<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2018-03-17T03:44:38.604Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ArrayList源码学习</title>
    <link href="http://jianwl.com/2018/03/15/ArrayList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jianwl.com/2018/03/15/ArrayList源码学习/</id>
    <published>2018-03-15T15:05:33.000Z</published>
    <updated>2018-03-17T03:44:38.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-常用方法-amp-字段梳理"><a href="#1-常用方法-amp-字段梳理" class="headerlink" title="1. 常用方法 &amp; 字段梳理"></a>1. 常用方法 &amp; 字段梳理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/41421167.jpg" alt=""></p>
<p>ArrayList底层的数据结构是数组，往列表中插入数据时，首先会检查列表的容量是否充足，当容量不够时，会自动扩容为当前容量的3倍，本节我们会带着问题，学习ArrayList的实现原理。</p>
<h3 id="2-提出问题"><a href="#2-提出问题" class="headerlink" title="2. 提出问题"></a>2. 提出问题</h3><ol>
<li>add(E)，新增元素时，如何实现自动扩容；</li>
<li>add(index,E)如何实现在指定位置插入元素，指定位置之后的元素如何处理？</li>
<li>clear(), 避免内存溢出，在移除元素时，我们应该注意些什么？</li>
</ol>
<h4 id="1）新增元素"><a href="#1）新增元素" class="headerlink" title="1）新增元素"></a>1）新增元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 新增元素入口</div><div class="line">   public boolean add(E e) &#123;</div><div class="line">       ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">       elementData[size++] = e;</div><div class="line">       return true;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private void ensureCapacityInternal(int minCapacity) &#123;</div><div class="line">       if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       ensureExplicitCapacity(minCapacity);</div><div class="line">   &#125;</div><div class="line">       </div><div class="line">   private void ensureExplicitCapacity(int minCapacity) &#123;</div><div class="line">       modCount++;</div><div class="line"></div><div class="line">       // overflow-conscious code</div><div class="line">       if (minCapacity - elementData.length &gt; 0)</div><div class="line">           grow(minCapacity);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private void grow(int minCapacity) &#123;</div><div class="line">       // overflow-conscious code</div><div class="line">       int oldCapacity = elementData.length;</div><div class="line">       int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 为原来的3倍；</div><div class="line">       if (newCapacity - minCapacity &lt; 0)</div><div class="line">           newCapacity = minCapacity;</div><div class="line">       if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</div><div class="line">           newCapacity = hugeCapacity(minCapacity);</div><div class="line">       // minCapacity is usually close to size, so this is a win:</div><div class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private static int hugeCapacity(int minCapacity) &#123;</div><div class="line">       if (minCapacity &lt; 0) // overflow</div><div class="line">           throw new OutOfMemoryError();</div><div class="line">       return (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">           Integer.MAX_VALUE :</div><div class="line">           MAX_ARRAY_SIZE;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>第3 ~ 4行：新增一个元素之前，需要先确保元素加进去之后，容量是否会溢出;如果容量够用，则往数组中插入数据；</p>
<p>第9 ~ 11行：如果是一个空列表，当前最小的容量(size + 1)为默认值10；</p>
<p>第 20 ~ 21行：如果新增元素后，元素的数量(size + 1) <strong>大于</strong> 数组的长度(elementData.length),则扩容；</p>
<p>第26 ~ 33行：扩容的逻辑，将列表的容量扩大为原来的3倍即(3 elementData.length),如果扩容后的容量 <strong>仍旧小于</strong> 元素的数量(size + 1),则将列表容量设置为(size + 1)，之后判断扩容后的容量是否大于「最大的整数 - 8」，如果大于，则等于最大整数；最后将原来的数组迁移到扩容后的数组；</p>
<p>第37 ~ 38行：为了防止当容量大于整数最大值即(大于Integer.MAX_VALUE)，此时会出现整型数据溢出，为负值，此时报内存溢出异常。</p>
<h4 id="2-指定位置新增元素"><a href="#2-指定位置新增元素" class="headerlink" title="2) 指定位置新增元素"></a>2) 指定位置新增元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public void add(int index, E element) &#123;</div><div class="line">    rangeCheckForAdd(index);</div><div class="line"></div><div class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">    System.arraycopy(elementData, index, elementData, index + 1,</div><div class="line">                     size - index);</div><div class="line">    elementData[index] = element;</div><div class="line">    size++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void rangeCheckForAdd(int index) &#123;</div><div class="line">    if (index &gt; size || index &lt; 0)</div><div class="line">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第12 ~ 13行：判断索引位置会不会越界即(大于数组大小和小于0)；</p>
<p>第 4 行：新增元素前，进行容量预估，容量不足时则扩容。上一个模块已描述，这里就不赘述了；</p>
<p>第 5 行：用图示的方式来说明，如果往元素2的位置插入元素，需要将元素2及之后的元素均向后挪动一位，这行代码就是执行这样的功能。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-17/23285668.jpg" alt=""></p>
<p>第7 ~ 8行：把元素放到数组中的指定位置，同时将列表的长度加1。</p>
<h4 id="3）清空数组"><a href="#3）清空数组" class="headerlink" title="3）清空数组"></a>3）清空数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public void clear() &#123;</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    // clear to let GC do its work</div><div class="line">    for (int i = 0; i &lt; size; i++)</div><div class="line">        elementData[i] = null;</div><div class="line"></div><div class="line">    size = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第5 ~ 6行：遍历数组中的每一个元素，将其设置为null，方便后续GC回收内存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-常用方法-amp-字段梳理&quot;&gt;&lt;a href=&quot;#1-常用方法-amp-字段梳理&quot; class=&quot;headerlink&quot; title=&quot;1. 常用方法 &amp;amp; 字段梳理&quot;&gt;&lt;/a&gt;1. 常用方法 &amp;amp; 字段梳理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;ht
    
    </summary>
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/categories/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/tags/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>如何定位消耗CPU最多的线程</title>
    <link href="http://jianwl.com/2018/03/15/%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E6%B6%88%E8%80%97CPU%E6%9C%80%E5%A4%9A%E7%9A%84%E7%BA%BF%E7%A8%8B/"/>
    <id>http://jianwl.com/2018/03/15/如何定位消耗CPU最多的线程/</id>
    <published>2018-03-15T12:28:13.000Z</published>
    <updated>2018-03-15T13:14:48.828Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，先上代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class CpuMax &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        for(int i =0 ; i &lt; 10 ; i ++)&#123;</div><div class="line">            new Thread(() -&gt; &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000L);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Thread t = new Thread(() -&gt; &#123;</div><div class="line">            int i = 0;</div><div class="line">            while (true)&#123;</div><div class="line">                i = (i++) /100;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t.setName(&quot;Business Thread&quot;);</div><div class="line">        t.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有11个线程，其中10个线程啥也不做，1个线程执行死循环操作。那么如何定位消耗CPU最多的这个线程呢？且看以下解决思路：</p>
<h4 id="1-运行程序"><a href="#1-运行程序" class="headerlink" title="1. 运行程序"></a>1. 运行程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 编译</div><div class="line">javac CpuMax.java</div><div class="line"></div><div class="line"># 运行</div><div class="line">java CpuMax</div></pre></td></tr></table></figure>
<h4 id="2-获取进程PID"><a href="#2-获取进程PID" class="headerlink" title="2. 获取进程PID"></a>2. 获取进程PID</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep &quot;CpuMax&quot;</div></pre></td></tr></table></figure>
<p>得到进程PID: 5055</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/8443081.jpg" alt=""></p>
<h4 id="3-获取进程中各线程所占CPU的占比"><a href="#3-获取进程中各线程所占CPU的占比" class="headerlink" title="3. 获取进程中各线程所占CPU的占比"></a>3. 获取进程中各线程所占CPU的占比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -Hp 5505</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/33928406.jpg" alt=""></p>
<p>根据图片信息，我们可以得到：CPU占比99.9%的线程PID为5084。线程PID转为16进制为：ox13dc</p>
<h4 id="4-打印进程中各个线程栈信息"><a href="#4-打印进程中各个线程栈信息" class="headerlink" title="4. 打印进程中各个线程栈信息"></a>4. 打印进程中各个线程栈信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jstack 5055</div></pre></td></tr></table></figure>
<p>得到以下信息:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/57356621.jpg" alt=""></p>
<p>步骤3中，我们得到CPU最大的线程的PID，16进制为：0x13dc，在线程栈中，我们可以根据16进制的PID得到一些关键信息。<strong>得到线程名为「Business Thread」为CPU占比最高的线程</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说，先上代码。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div 
    
    </summary>
    
      <category term="Java进阶" scheme="http://jianwl.com/categories/Java%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java进阶" scheme="http://jianwl.com/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码学习计划</title>
    <link href="http://jianwl.com/2018/03/14/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://jianwl.com/2018/03/14/JDK源码学习计划/</id>
    <published>2018-03-14T03:45:33.000Z</published>
    <updated>2018-03-17T04:20:27.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习源码是非常重要的，列出几个感触比较深的地方：</p>
<ol>
<li>学习Java多年，如果连平时最常用的API的实现原理都不知道，说明这个人没什么好奇心，基础不扎实。</li>
<li>1年的经验，重复使用多年，自身的经验并没有随着年限而增长，个人成长处于停滞状态。</li>
<li>只有接触多了优秀的源码，才知道进步的方向，只是埋头苦干，很容易迷失自我。</li>
<li>沉淀的重要性，切记样样通，样样半桶水的状态。知道怎么做，问你原理半天憋不出的糗样。探究精神尤其重要；</li>
</ol>
<h3 id="1-JDK1期-学习计划"><a href="#1-JDK1期-学习计划" class="headerlink" title="1. JDK1期 学习计划"></a>1. JDK1期 学习计划</h3><h4 id="1）集合类"><a href="#1）集合类" class="headerlink" title="1）集合类"></a>1）集合类</h4><ul>
<li><a href="http://jianwl.com/2018/03/15/ArrayList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">ArrayList</a> [√]</li>
<li>LinkedList</li>
<li>HashMap</li>
<li>HashSet</li>
<li>HashTable</li>
</ul>
<h4 id="2）基本变量类型-amp-String"><a href="#2）基本变量类型-amp-String" class="headerlink" title="2）基本变量类型 &amp; String"></a>2）基本变量类型 &amp; String</h4><ul>
<li>Byte</li>
<li>Character</li>
<li>Short</li>
<li>Integer</li>
<li>Long</li>
<li>Float</li>
<li>Double</li>
<li>Boolean</li>
<li>String</li>
<li>StringBuilder</li>
<li>StringBuffer</li>
</ul>
<h4 id="3-多线程-amp-线程池"><a href="#3-多线程-amp-线程池" class="headerlink" title="3) 多线程 &amp; 线程池"></a>3) 多线程 &amp; 线程池</h4><ul>
<li>Thread</li>
<li>ThreadLocal</li>
<li>ConcurrentHashMap</li>
<li>ThreadPoolExecutor</li>
</ul>
<h4 id="4-原子操作"><a href="#4-原子操作" class="headerlink" title="4) 原子操作"></a>4) 原子操作</h4><ul>
<li>AtomicInteger</li>
<li>AtomicBoolean</li>
<li>AtomicLong</li>
<li>AtomicReference</li>
</ul>
<h4 id="5-锁"><a href="#5-锁" class="headerlink" title="5) 锁"></a>5) 锁</h4><ul>
<li>ReentrantLock</li>
<li>ReentrantReadWriteLock</li>
</ul>
<h4 id="6）队列"><a href="#6）队列" class="headerlink" title="6）队列"></a>6）队列</h4><ul>
<li>ArrayBlockingQueue</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;学习源码是非常重要的，列出几个感触比较深的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学习Java多年，如果连平时最常用的API的实现原理都不知道，说
    
    </summary>
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/categories/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/tags/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JVM类加载的那些事</title>
    <link href="http://jianwl.com/2018/03/04/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://jianwl.com/2018/03/04/JVM类加载的那些事/</id>
    <published>2018-03-04T13:56:36.000Z</published>
    <updated>2018-03-07T14:01:18.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java源代码被编译成class字节码，最终需要加载到虚拟机中才能运行。整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载7个阶段。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-5/76059548.jpg" alt=""></p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ol>
<li>通过一个类的全限定名获取描述此类的二进制字节流</li>
<li>通过这个字节流锁代表的静态存储结构保存为方法区的运行时数据结构；</li>
<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为范文方法区的入口；</li>
</ol>
<p>虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，实现这个动作的代码称为“类加载器”，JVM提供了3种类加载器：</p>
<ol>
<li>启动类加载器（Bootstrap ClassLoader）： 负责加载JAVA_HOME\lib目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li>
<li>扩展类加载器（Extension ClassLoader）: 负责加载JAVA_HOME\lib\ext目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>
<li>应用程序类加载器（Application ClassLoader）:负责加载用户路径(classpath)上的类库。</li>
</ol>
<p>JVM基于上述类加载器，通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-6/33598419.jpg" alt=""></p>
<p>双亲委派模型工作过程：当一个类加载器收到类加载任务,优先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。</p>
<p>双亲委派模型有什么好处？</p>
<p>比如位于rt.jar包中的类java.lang.Object,无论哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，确保了Object类在各种加载器环境中都是同一个类。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>为了确保Class文件符合当前虚拟机要求，需要对其字节流数据进行验证，主要包括格式验证、元数据验证、字节码验证和符号引用验证。</p>
<h4 id="1、格式校验"><a href="#1、格式校验" class="headerlink" title="1、格式校验"></a>1、格式校验</h4><p>验证字节流是否符合class文件格式的规范，并且能被当前虚拟机处理，如：是否以魔数0xCAFEBABE开头、主次版本号是否在当前虚拟机处理范围内、常量池是否有不支持的常量类型等。只有经过格式验证的字节流，才会存储到方法区的数据结构，剩余3个验证都基于方法区的数据进行。</p>
<h4 id="2、元数据验证"><a href="#2、元数据验证" class="headerlink" title="2、元数据验证"></a>2、元数据验证</h4><p>对字节码描述的数据进行语义分析，以保证符合Java语言规范，如是否继承了final修饰的类、是否实现了父类的抽象方法、是否覆盖了父类的final方法或final字段等。</p>
<h4 id="3、字节码验证"><a href="#3、字节码验证" class="headerlink" title="3、字节码验证"></a>3、字节码验证</h4><p>对类的方法体进行分析，确保在方法运行时不会有危害虚拟机的事件发生，如保证操作数栈的数据类型和指令代码序列的匹配、保证跳转指令的正确性、保证类型转换的有效性等。</p>
<h4 id="4、符号引用验证"><a href="#4、符号引用验证" class="headerlink" title="4、符号引用验证"></a>4、符号引用验证</h4><p>为了确保后续的解析动作能够正常执行，对符号引用进行验证，如通过字符串描述的全限定名是能找到对应的类、在指定类中是否存在符合方法的字段描述等。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在准备阶段，为类变量(static修饰)在方法区中分配内存并设置初始值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static int var = 100;</div></pre></td></tr></table></figure>
<p>准备阶段完成后，var值为0，而不是100。在初始化阶段，才会把100赋值给val，但是有个特殊情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final int VAL = 100;</div></pre></td></tr></table></figure>
<p>在编译阶段会为VAL生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue属性将VAL赋值为100。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是将常量池中的符号引用替换为直接引用的过程，符号引用和直接引用有什么不同？</p>
<ol>
<li>符号引用使用一组符号来描述所引用的目标，可以是任何形式的字面常量，定义在Class文件格式中。</li>
<li>直接引用可以是直接指向目标的指针，相对偏移量或者能间接定位目标的句柄。</li>
</ol>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化阶段是执行类构造器<clinit>方法的过程，<clinit>方法由类变量的赋值动作和静态语句块按照在源文件出现的顺序合并而成，该合并操作由编译器完成。</clinit></clinit></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private static int value = 100;</div><div class="line">static int a = 100;</div><div class="line">static int b = 100;</div><div class="line">static int c;</div><div class="line"></div><div class="line">static &#123;</div><div class="line">	c = a + b;</div><div class="line">	System.out.println(&quot;it only run once&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><clinit>方法对于类和接口不是必须的，如果一个类中没有静态代码块，也没有静态变量的赋值操作，那么编译器不会生成<clinit>；</clinit></clinit></li>
<li><clinit>方法与实例构造器不同，不需要显式的调用父类的<clinit>方法，虚拟机会保证父类的<clinit>优先执行。</clinit></clinit></clinit></li>
<li>为了防止多次执行<clinit>,虚拟机会确保<clinit>方法在多线程环境下被正确的加锁同步执行，如果有多个线程同时初始化一个类，那么只有一个线程能够执行<clinit>方法，其他线程进行阻塞等待，直到<clinit>执行完成。</clinit></clinit></clinit></clinit></li>
<li>注意：执行接口的<clinit>方法不需要先执行父接口的<clinit>，只有使用父接口中定义的变量时，才会执行。</clinit></clinit></li>
</ol>
<h3 id="类初始化场景"><a href="#类初始化场景" class="headerlink" title="类初始化场景"></a>类初始化场景</h3><p>虚拟机中严格规定了有且只有5种情况必须对类初始化。</p>
<ul>
<li>执行new、getstatic、putstatic和invokestatic指令；</li>
<li>使用reflect对类进行反射调用；</li>
<li>初始化一个类的时候，父类还没有初始化，会事先初始化父类；</li>
<li>启动虚拟机时，需要初始化包含main方法的类；</li>
<li>在JDK1.7中，如果java.lang.invoke.MethodHandler实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行初始化；</li>
</ul>
<p>一下几种情况，不会触发类初始化：</p>
<p>1、通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Parent&#123;</div><div class="line">	static int a = 100;</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;parent int !&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Parent&#123;</div><div class="line">	static &#123;</div><div class="line">	 	System.out.println(&quot;child init!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Init&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		System.out.println(Child.a);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为：<br>parent init !<br>100</p>
<p>2、定义对象数组，不会触发该类的初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Init&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		Parent[] parents = new Parent[10];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无输出，说明没有触发类Parent的初始化，但是这段代码做了什么？先看看生成的字节码指令；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-7/40936913.jpg" alt=""></p>
<p>anewarray指令为新数组分配空间，并触发Parent类的初始化，这个类由虚拟机自动生成。</p>
<p>3、常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Const&#123;</div><div class="line">	static final int A = 100;</div><div class="line">	static &#123;</div><div class="line">		System.out.println(&quot;Const init&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Init&#123;</div><div class="line">	public static void main(String[] args)&#123;</div><div class="line">		System.out.println(Const.A);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：100</p>
<p>说明没有触发类Const的初始化，在编译阶段，Const类中常量A的值100存储到Init类的常量池中，这两个类在编译成class文件之后就没有联系了。</p>
<p>4、通过类名获取Class对象，不会触发类的初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		Class cDog = Dog.class;</div><div class="line">		Class clazz = Class.forName(&quot;zzzzzzz.Cat&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Cat &#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;Cat is load&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Dog&#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;Dog is load&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：Cat is load, 所以通过Dog.class并不会触发Dog类的初始化动作。</p>
<p>5、通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否亚欧对类进行初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		Class clazz = Class.forName(&quot;zzzzzz.Cat&quot;,false,Cat.class.getClassLoader());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cat&#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	static &#123;</div><div class="line">		System.out.println(&quot;Cat is load&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6、通过ClassLoader默认的loadClass方法，也不会触发初始化动作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ClassLoader()&#123;&#125;.loadClass(&quot;zzzzzz.Cat&quot;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Java源代码被编译成class字节码，最终需要加载到虚拟机中才能运行。整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载7个阶段
    
    </summary>
    
      <category term="JVM专题" scheme="http://jianwl.com/categories/JVM%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="JVM专题" scheme="http://jianwl.com/tags/JVM%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存的那些事</title>
    <link href="http://jianwl.com/2018/03/04/JVM%E5%86%85%E5%AD%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://jianwl.com/2018/03/04/JVM内存的那些事/</id>
    <published>2018-03-04T08:46:45.000Z</published>
    <updated>2018-03-04T13:45:24.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于C语言开发的程序员来说，在内存管理方面，必须负责每一个对象的生命周期，从有到无。对于Java程序员来说，在虚拟机内存管理的帮助下，不需要为每个new对象都匹配free操作，内存泄露和内存溢出等问题也不太容易出现，不过也正是把内存管理交给了虚拟机，一旦运行中的程序出现了内存泄露问题，给排查过程造成很大困难。所以只有理解了Java虚拟机的运行机制，才能够运筹帷幄于各种代码。本文以HotSpot为例说说虚拟机的那些事。</p>
<p>Java虚拟机把管理的内存划分为几个不同的数据区。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-4/82705423.jpg" alt=""></p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆是被所有线程共享的一块内存区域，主要用于存放对象实例，Java虚拟机规范中有这样一段描述：所有的对象实例和数据都要在堆上进行分配。为对象分配内存就是把一块大小确定的内存从堆内存中划分出来，通常有两种方法实现：</p>
<h4 id="1、指针碰撞法"><a href="#1、指针碰撞法" class="headerlink" title="1、指针碰撞法"></a>1、指针碰撞法</h4><p>假设Java堆中内存是完整的，已分配的内存和空闲内存分别在不同的一侧，通过一个指针作为分界点，需要分配内存时，仅仅需要把指针往空闲的一端移动与对象大小相等的距离。</p>
<h4 id="2、空闲列表法"><a href="#2、空闲列表法" class="headerlink" title="2、空闲列表法"></a>2、空闲列表法</h4><p>事实上，Java堆的内存并不是完整的，已分配的内存和空闲内存相互交错，JVM通过维护一个列表，记录可用的内存块信息，当分配操作发生时，从列表中找到一个足够大的内存块分配给对象实例，并更新列表上的记录。</p>
<p>对象创建时一个非常频繁的行为，进行堆内存分配时还需要考虑多线程并发问题，可能出现正在给对象A分配内存，指针或记录还未更新，对象B又同时分配到原来的内存，解决这个问题有两种方案：</p>
<p>1、采用CAS保证数据更新操作的原子性；</p>
<p>2、把内存分配的行为按照线程进行划分，在不同的空间中进行，每个线程在Java堆中预先分配一个内存块，称为本地线程分配缓冲(Thread Local Allocation Buffer,TLAB);</p>
<h3 id="Java栈"><a href="#Java栈" class="headerlink" title="Java栈"></a>Java栈</h3><p>Java栈是线程私有的，每个线程对应一个Java栈，每个线程在执行一个方法时会创建一个对应的栈帧(Stack Frame)，栈帧负责存储局部变量表、操作数栈、动态链接和方法返回地址等信息。每个方法的调用过程，相当于栈帧在Java栈的入栈和出栈的过程。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-4/89188723.jpg" alt=""></p>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>用于存放方法参数和方法内部定义的局部变量，其大小在代码编译期间已经确定，在方法运行期间不会改变。局部变量表以变量槽(Slot)为最小存储单位，每个Slot能够存放一个boolean、byte、char、short、int、float、reference和return address类型的32位数据，对于64位的数据类型long和double，虚拟机会以高位对齐的方式为其分配两个连续的Slot空间。</p>
<p>在方法执行时，如果是实例方法，即非static方法，局部变量表中第0位Slot默认存放对象实例的引用，在方法中可以通过关键字this进行访问，方法参数按照参数列表顺序，从第1位Slot开始分配，方法内部变量则按照定义顺序进行分配其余的Slot。</p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区和Java堆一样，是所有线程共享的内存区域，用于存放已被虚拟机加载的类信息、常量、静态变量和即时编译器编译后的代码等数据。运行时常量池是方法区的一部分，用于存放编译期间产生的各种字面常量和符号引用。</p>
<h3 id="指令计数器"><a href="#指令计数器" class="headerlink" title="指令计数器"></a>指令计数器</h3><p>指令计数器是线程私有的，每个线程都有独立的指令计数器，计数器记录着虚拟机正在执行的字节码指令的地址，分支、循环、跳转、异常处理和线程恢复等操作都依赖这个计数器完成。如果线程执行的是native方法，这个计数器则为空。</p>
<h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>对象在内存中布局可以分成三块区域：对象头、实例数据和对齐填充。</p>
<h5 id="1、对象头"><a href="#1、对象头" class="headerlink" title="1、对象头"></a>1、对象头</h5><p>对象头包括两部分信息：运行时数据和类型指针，如果对象是一个数组，还需要一块用于记录数组长度的数据。</p>
<p>1.1、运行时数据包括哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向锁和偏向时间戳等，这部分数据在32位和64位虚拟机中的长度分别为32bit和64bit，官方称为“Mark Word”。Mark Word被设计成非固定的数据结构，以实现在有限空间内保存尽可能多的数据。</p>
<p>32为虚拟机中，对象未被锁定的状态下，Mark Word的32bit中25bit存储对象的HashCode、4bit存储对象分代年龄、2bit存储锁标志位、1bit固定为0，具体如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-4/80147108.jpg" alt=""></p>
<p>其他状态(轻量级锁定、重量级锁定、GC锁、可偏向锁)下Mark Word的存储内容如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">存储内容</th>
<th style="text-align:center">标志位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">轻量级锁定</td>
<td style="text-align:center">指向锁记录的指针</td>
<td style="text-align:center">00</td>
</tr>
<tr>
<td style="text-align:center">重量级锁定</td>
<td style="text-align:center">指向重量级的指针</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">GC标志</td>
<td style="text-align:center">空</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">可偏向</td>
<td style="text-align:center">偏向线程ID、时间戳、分代年龄</td>
<td style="text-align:center">01</td>
</tr>
<tr>
<td style="text-align:center">未锁定</td>
<td style="text-align:center">对象哈希码、分代年龄</td>
<td style="text-align:center">01</td>
</tr>
</tbody>
</table>
<p>1.2 、对象头的类型指针指向该对象的类元数据、虚拟机通过这个指针可以确定该对象是哪个类的实例。</p>
<h5 id="2、实例数据"><a href="#2、实例数据" class="headerlink" title="2、实例数据"></a>2、实例数据</h5><p>实例数据就是在程序代码中所定义的各种类型的字段，包括从父类继承的，这部分的存储顺序会受到虚拟机分配策略和字段在源码中定义顺序的影响。</p>
<h5 id="3、对齐填充"><a href="#3、对齐填充" class="headerlink" title="3、对齐填充"></a>3、对齐填充</h5><p>由于HotSpot的自动内存管理要求对象的起始地址必须是8字节的整数倍，即对象的大小必须是8字节的整数倍，对象头的数据正好是8的整数倍，所以当实例数据不够8字节整数倍时，需要通过对齐填充进行补全。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解Java虚拟机</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;对于C语言开发的程序员来说，在内存管理方面，必须负责每一个对象的生命周期，从有到无。对于Java程序员来说，在虚拟机内存管理的帮助下，不需要
    
    </summary>
    
      <category term="JVM专题" scheme="http://jianwl.com/categories/JVM%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="JVM专题" scheme="http://jianwl.com/tags/JVM%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>用ELK搭建自己的日志分析系统</title>
    <link href="http://jianwl.com/2017/11/05/%E7%94%A8ELK%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://jianwl.com/2017/11/05/用ELK搭建自己的日志分析系统/</id>
    <published>2017-11-05T00:25:09.000Z</published>
    <updated>2017-11-05T03:50:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>不管用于记录、监控，日志对于任何系统来说都是一个极其重要的部分，但一般的日志的数据量会比较大，并且分散在各个地方，当管理的服务器比较少，我们还可以逐一登录到各个服务器去查看、分析。但如果服务器比较多，这种方法就显得力不从心了。基于这种场景，一些集中式的日志系统也就产生了。比较成熟<a href="https://www.splunk.com/zh-hans_cn" target="_blank" rel="external">Splunk</a>、Facebook的Scribe、Apache的Chukwa、Cloudera的Fluentd和ELK等。</p>
<h3 id="2-概述"><a href="#2-概述" class="headerlink" title="2 概述"></a>2 概述</h3><p>ELK不是一款软件，是三个软件产品的首字母缩写：ElasticSearc、Logstash和Kibana，这三款都是开源的，目前归于<code>Elastic.co</code>公司。三者之间的关系如图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/58949300.jpg" alt=""></p>
<h4 id="1）Elasticsearch"><a href="#1）Elasticsearch" class="headerlink" title="1）Elasticsearch"></a>1）Elasticsearch</h4><p>Elasticsearch是一个实时的分布式搜索和分析引擎，它可以用于全文搜索、结构化搜索以及分析，它是基于Apache Lucence基础上开发搜索引擎，使用Java语言编写。作为ELK协议栈的核心，它用于集中存储数据。</p>
<p>特点：</p>
<ul>
<li>实时</li>
<li>分布式</li>
<li>面向文档</li>
<li>高可用性、易扩展、支持集群、分片、复制</li>
<li>接口友好，RestFUL接口风格；</li>
</ul>
<h4 id="2）Logstash"><a href="#2）Logstash" class="headerlink" title="2）Logstash"></a>2）Logstash</h4><p>Logstash是一个具有实时渠道能力的数据收集引擎，是用JRuby语言编写，其作者是世界上著名的运维工程师乔丹西塞。</p>
<p>特点：</p>
<ul>
<li>几乎可以访问任何数据</li>
<li>可以和多种外部应用结合</li>
<li>支持弹性扩展</li>
</ul>
<p>组成部分</p>
<ul>
<li>INPUTS，从各个服务器获取数据</li>
<li>FILTERS，过滤处理获取到的数据</li>
<li>OUTPUTS，将处理完的数据输出到指定地方</li>
</ul>
<h4 id="3）Kibana"><a href="#3）Kibana" class="headerlink" title="3）Kibana"></a>3）Kibana</h4><p>Kibana是一款基于Apache开源协议，使用Javascript语言编写，为Elasticsearch提供分析和可视化的Web平台。它可以在Elasticsearch的搜索中查找、交互数据，并生成各种维度的表图。</p>
<h3 id="3-ELK平台搭建-MacOS"><a href="#3-ELK平台搭建-MacOS" class="headerlink" title="3 ELK平台搭建(MacOS)"></a>3 ELK平台搭建(MacOS)</h3><h4 id="1-Elasticsearch搭建"><a href="#1-Elasticsearch搭建" class="headerlink" title="1) Elasticsearch搭建"></a>1) Elasticsearch搭建</h4><p>1 下载Elasticsearch &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.zip</div><div class="line">unzip elasticsearch-5.6.3.zip</div></pre></td></tr></table></figure>
<p>2 启动Elasticsearch</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./$&#123;ES_HOME&#125;/bin/elasticsearch</div></pre></td></tr></table></figure>
<p>3 检查是否启动成功</p>
<p>健康值绿色: 所有主、复制分片都是正常的；</p>
<p>健康值黄色: 所有主分片正常，部分或全部复制分片数有问题；</p>
<p>健康值红色: 部分或全部主分片有问题 </p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/55815051.jpg" alt=""></p>
<p>4 安装elastic-head</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/mobz/elasticsearch-head.git</div><div class="line">cd elasticsearch-head</div><div class="line">npm install</div><div class="line">npm run start</div></pre></td></tr></table></figure>
<p>通过elastic-head查看elasticsearch的数据：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/4570828.jpg" alt=""></p>
<h4 id="2）Logstash搭建"><a href="#2）Logstash搭建" class="headerlink" title="2）Logstash搭建"></a>2）Logstash搭建</h4><p>1 下载Logstash &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-5.6.3.zip</div><div class="line">unzip logstash-5.6.3.zip</div></pre></td></tr></table></figure>
<p>2 Logstash管道测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd logstash-5.6.3</div><div class="line">bin/logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&apos;</div></pre></td></tr></table></figure>
<p><code>-e</code>表示能够在命令行中配置logstash的配置(一次性的),通过上述命令启动logstash，当你看到<code>Pipeline main started</code>，在命令行中输入<code>hello world</code>，会得到一个输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello world!</div><div class="line">2017-11-05T01:53:55.571Z jianweilindeMacBook-Pro.local hello world!</div></pre></td></tr></table></figure>
<p>3 配置Filebeat发送日志到Logstash</p>
<p>1) 下载Filebeat &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.6.3-darwin-x86_64.tar.gz</div><div class="line">tar zxvf filebeat-5.6.3-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure>
<p>2) 配置filebeat.yml</p>
<ul>
<li><p>下载<a href="http://oc5a5l0a0.bkt.clouddn.com/logstash-tutorial.log" target="_blank" rel="external">logstash-tutorial.log</a></p>
</li>
<li><p>配置filebeat.yml</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filebeat.prospectors:</div><div class="line">- input_type: log</div><div class="line">  paths:</div><div class="line">    - /Users/jianweilin/Downloads/logstash-tutorial.log</div><div class="line">    - /var/log/*.log</div><div class="line">output.logstash:</div><div class="line">  hosts: [&quot;localhost:5043&quot;]</div></pre></td></tr></table></figure>
<p>特别注意：logstash-tutorial.log的路径是刚刚下载的文件，在你本地的路径。</p>
<p>3）配置Logstash配置文件</p>
<p>在${LOGSTASH_HOME}目录下创建一个配置文件<code>first-pipeline.conf</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    beats &#123;</div><div class="line">        port =&gt; &quot;5043&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; [ &quot;localhost:9200&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述配置的意思是：从filebeat中接收数据，之后发送到elasticsearch中</p>
<p>4) 启动logstash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f first-pipeline.conf --config.reload.automatic</div></pre></td></tr></table></figure>
<p><code>--config.reload.automatic</code>表示之后如果first-pipeline.conf配置文件更新规则，会自动更新生效，不需要重启logstash；</p>
<p>5) 启动filebeat将日志发送到logstash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./filebeat -e -c filebeat.yml -d &quot;publish&quot;</div></pre></td></tr></table></figure>
<p>6) 在elastic-head中查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/18364515.jpg" alt=""></p>
<p>elasticsearch健康值为黄色，是因为只有一个主分片，没有复制分片；</p>
<h4 id="3-Kibana搭建"><a href="#3-Kibana搭建" class="headerlink" title="3) Kibana搭建"></a>3) Kibana搭建</h4><p>1 Kibana下载 &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.3-darwin-x86_64.tar.gz</div><div class="line">tar zxvf kibana-5.6.3-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure>
<p>2 启动Kibana</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;KIBANA_HOME&#125;/bin/kibana</div></pre></td></tr></table></figure>
<p>3 使用Kibana连接Elasticsearch</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/96019826.jpg" alt=""></p>
<ul>
<li>访问<code>localhost:5601</code>进入Kibana的UI界面</li>
<li>在Kibana中配置Elasticsearch中索引的配置规则，符合配置规则的索引才会在Kibana中搜索到</li>
<li>在Kibana中配置，数据以什么维度进行展示，通常来说设置为时间维度；</li>
<li>在Kibana中点击create按钮创建索引匹配规则；</li>
</ul>
<p>4 在Kibana中搜索日志</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/5428734.jpg" alt=""></p>
<p>至此ELK平台搭建完毕。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html" target="_blank" rel="external">Elasticsearch官方文档</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/5.6/index.html" target="_blank" rel="external">Logstash官方文档</a></li>
<li><a href="https://www.elastic.co/guide/en/kibana/5.6/install.html" target="_blank" rel="external">Kibana官方文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h3&gt;&lt;p&gt;不管用于记录、监控，日志对于任何系统来说都是一个极其重要的部分，但一般的日志的数据量会比较大，并且分散在各个地方，当管理的服
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://jianwl.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://jianwl.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elastic-Job-Lite源码分析---作业配置</title>
    <link href="http://jianwl.com/2017/11/01/Elastic-Job-Lite%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BD%9C%E4%B8%9A%E9%85%8D%E7%BD%AE/"/>
    <id>http://jianwl.com/2017/11/01/Elastic-Job-Lite源码分析-作业配置/</id>
    <published>2017-11-01T08:30:37.000Z</published>
    <updated>2017-11-02T09:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><p>涉及到主要类的类图如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/79872342.jpg" alt=""></p>
<h3 id="2-作业配置"><a href="#2-作业配置" class="headerlink" title="2 作业配置"></a>2 作业配置</h3><p>一个作业(ElasticJob)的调度，需要配置独有的一个作业调度器(JobScheduler),两者是1:1的关系，这点大家要注意下，当然下文看代码也会看到。</p>
<p>作业调度器的创建可以配置四个参数：</p>
<ol>
<li>注册中心(CoordinatorRegistryCenter): 用于协调分布式服务，必填；</li>
<li>Lite作业配置(LiteJobConfiguration): 必填</li>
<li>作业事件总线(JobEventBus): 对作业事件异步监听。选填</li>
<li>作业监听器(ElasticJobListener): 对作业执行前，执行后进行同步监听。选填</li>
</ol>
<h3 id="2-1-注册中心配置"><a href="#2-1-注册中心配置" class="headerlink" title="2.1 注册中心配置"></a>2.1 注册中心配置</h3><p>Elastic-Job抽象了注册中心接口(RegistryCenter),并提供了基于Zookeeper的注册中心实现(ZookeeperRegistryCenter)。</p>
<p>ZookeeperRegistryCenter对应配置类为ZookeeperConfiguration，该类注释很完整，这里我们重点说下<code>namespace</code>属性。如果你有多个不同Elastic-Job集群时，使用相同Zookeeper，可以配置不同的<code>namespace</code>进行隔离。</p>
<p>注册中心的初始化，我们会在后文<code>Elastic-Job-Lite源码解析---注册中心</code>详细分享。</p>
<h3 id="2-2-Lite作业配置"><a href="#2-2-Lite作业配置" class="headerlink" title="2.2 Lite作业配置"></a>2.2 Lite作业配置</h3><p><code>LiteJobConfiguration</code>继承自接口<code>JobRootConfiguration</code>，作为<code>Elastic-Job-Lite</code>里的作业(LiteJob)配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public final class LiteJobConfiguration implements JobRootConfiguration &#123;</div><div class="line">    private final JobTypeConfiguration typeConfig;</div><div class="line">    private final boolean monitorExecution;</div><div class="line">    private final int maxTimeDiffSeconds;</div><div class="line">    private final int monitorPort;</div><div class="line">    private final String jobShardingStrategyClass;</div><div class="line">    private final int reconcileIntervalMinutes;</div><div class="line">    private final boolean disabled;</div><div class="line">    private final boolean overwrite;</div><div class="line">    </div><div class="line">    // ... 省略部分get方法</div><div class="line">    public static class Builder &#123;</div><div class="line">	    // ... 省略部分属性</div><div class="line">	    public final LiteJobConfiguration build() &#123;</div><div class="line">	            return new LiteJobConfiguration(jobConfig, monitorExecution, maxTimeDiffSeconds, monitorPort, jobShardingStrategyClass, reconcileIntervalMinutes, disabled, overwrite);</div><div class="line">	        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>typeConfig</code>:作业类型配置，必填</li>
<li><code>monitorExecution</code>: 监控作业运行时状态，默认为<code>false</code>，选填。</li>
</ul>
<blockquote>
<p>每次作业执行时间和间隔时间均非常短的情况, 建议不监控作业运行时状态以提升效率, 因为是瞬时状态, 所以无必要监控. 请用户自行增加数据堆积监控. 并且不能保证数据重复选取, 应在作业中实现幂等性. 也无法实现作业失效转移.</p>
<p> 每次作业执行时间和间隔时间均较长短的情况, 建议监控作业运行时状态, 可保证数据不会重复选取.每次作业执行时间和间隔均较长的情况，建议监控作业运行时状态，可保证数据不会重复选取。</p>
</blockquote>
<ul>
<li><code>maxTimeDiffSeconds</code>: 设置最大容忍的本机与注册中心的时间误差秒数。默认为-1，不检查时间误差。选填</li>
<li><code>monitorPort</code>: 作业监控端口，默认为-1，不开启作业监控端口。选填</li>
<li><code>jobShardingStrategyClass</code>：作业分片策略实现类全路径，默认为使用分配侧路。</li>
<li><code>reconcileIntervalMinutes</code>：修复作业服务器不一致状态服务调度间隔时间，配置为小于1的任意值，默认为10.</li>
<li><code>disabled</code>: 作业是否禁用执行。默认为false，选填。</li>
<li><code>overwrite</code>: 设置使用本地配置覆盖注册中心的作业配置。默认为false，选填。建议使用运维平台console配置作业配置，统一管理。</li>
<li>Builder类：使用该类配置LiteJobConfiguration属性，调用<code>#build()</code>方法最终生成作业配置。</li>
</ul>
<h3 id="2-2-1-作业类型配置"><a href="#2-2-1-作业类型配置" class="headerlink" title="2.2.1 作业类型配置"></a>2.2.1 作业类型配置</h3><p>作业类型配置接口(JobTypeConfiguration)有三种配置实现，针对三种作业类型：</p>
<table>
<thead>
<tr>
<th>配置实现</th>
<th>作业</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SimpleJobConfiguration</td>
<td>SimpleJob</td>
<td>简单作业。例如：订单过期作业</td>
</tr>
<tr>
<td>DataflowJobConfiguration</td>
<td>DataflowJob</td>
<td>数据流作业。TODO:暂未了解流式处理数据</td>
</tr>
<tr>
<td>ScriptJobConfiguration</td>
<td>ScriptJob</td>
<td>脚本作业。例如：调用shell脚本备份数据库作业</td>
</tr>
</tbody>
</table>
<p>三种配置类属性对比如：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">SimpleJob</th>
<th style="text-align:center">DataflowJob</th>
<th style="text-align:center">ScriptJob</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">coreConfig</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">作业核心配置</td>
</tr>
<tr>
<td style="text-align:center">jobType</td>
<td style="text-align:center">JobType.SIMPLE</td>
<td style="text-align:center">JobType.DATAFLOW</td>
<td style="text-align:center">JobType.SCRIPT</td>
<td style="text-align:center">作业类型</td>
</tr>
<tr>
<td style="text-align:center">jobClass</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️(默认：ScriptJob.class)</td>
<td style="text-align:center">作业实现类全路径</td>
</tr>
<tr>
<td style="text-align:center">streamingProcess</td>
<td style="text-align:center"></td>
<td style="text-align:center">✔️</td>
<td style="text-align:center"></td>
<td style="text-align:center">是否流式处理数据</td>
</tr>
<tr>
<td style="text-align:center">scriptCommandLine</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">脚本型作业执行命令行</td>
</tr>
</tbody>
</table>
<h3 id="2-2-2-作业核心配置"><a href="#2-2-2-作业核心配置" class="headerlink" title="2.2.2 作业核心配置"></a>2.2.2 作业核心配置</h3><p>作业核心配置(JobCoreConfiguration),我们可以看到在每种作业类型配置都有该属性(<code>coreConfig</code>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public final class JobCoreConfiguration &#123;</div><div class="line">    private final String jobName;</div><div class="line">    private final String cron;</div><div class="line">    private final int shardingTotalCount;</div><div class="line">    private final String shardingItemParameters;</div><div class="line">    private final String jobParameter;</div><div class="line">    private final boolean failover;</div><div class="line">    private final boolean misfire;</div><div class="line">    private final String description;</div><div class="line">    private final JobProperties jobProperties;</div><div class="line">    </div><div class="line">    // ... 省略Getter方法</div><div class="line">    public static class Builder &#123;</div><div class="line">    </div><div class="line">	    // ... 省略部分属性</div><div class="line">	    public final JobCoreConfiguration build() &#123;</div><div class="line">	            Preconditions.checkArgument(!Strings.isNullOrEmpty(jobName), &quot;jobName can not be empty.&quot;);</div><div class="line">	            Preconditions.checkArgument(!Strings.isNullOrEmpty(cron), &quot;cron can not be empty.&quot;);</div><div class="line">	            Preconditions.checkArgument(shardingTotalCount &gt; 0, &quot;shardingTotalCount should larger than zero.&quot;);</div><div class="line">	            return new JobCoreConfiguration(jobName, cron, shardingTotalCount, shardingItemParameters, jobParameter, failover, misfire, description, jobProperties);</div><div class="line">	        &#125;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>jobName</code>: 作业名称。必填</li>
<li><code>cron</code>: cron表达式，用于控制作业触发时间。必填</li>
<li><code>shardingTotalCount</code>: 作业分片总数，如果一个作业启动超过作业分片总数的节点，只有<code>shardingTotalCount</code>会执行作业。必填</li>
<li><code>shardingItemParameters</code>: 分片序列号和参数</li>
</ul>
<blockquote>
<p>分片序列号和参数用等号分隔，多个键值对用逗号分隔<br>分片序列号从0开始，不可大于或等于分片总数<br>如: 0=a,1=b,2=c</p>
</blockquote>
<ul>
<li><code>jobParameter</code>: 作业自定义参数，选填</li>
</ul>
<blockquote>
<p>作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业</p>
<p>例: 每次获取的数据量、作业实例从数据库读取的主键</p>
</blockquote>
<ul>
<li><code>failover</code>: 是否开启作业执行失效转移，开启表示如果作业在一次作业执行中途宕机，允许将该次未完成的作业在另一作业节点上补偿执行。默认为false。选填</li>
<li><code>misfire</code>: 是否开启错误作业重新执行，默认为true.选填</li>
<li><code>description</code>: 作业描述，选填。</li>
<li><code>jobProperties</code>: 作业属性配置，选填。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public final class JobProperties &#123;</div><div class="line">    </div><div class="line">    private EnumMap&lt;JobPropertiesEnum, String&gt; map = new EnumMap&lt;&gt;(JobPropertiesEnum.class);</div><div class="line"></div><div class="line">	public enum JobPropertiesEnum &#123;</div><div class="line">	        </div><div class="line">	        /**</div><div class="line">	         * 作业异常处理器.</div><div class="line">	         */</div><div class="line">	        JOB_EXCEPTION_HANDLER(&quot;job_exception_handler&quot;, JobExceptionHandler.class, DefaultJobExceptionHandler.class.getCanonicalName()),</div><div class="line">	        </div><div class="line">	        /**</div><div class="line">	         * 线程池服务处理器.</div><div class="line">	         */</div><div class="line">	        EXECUTOR_SERVICE_HANDLER(&quot;executor_service_handler&quot;, ExecutorServiceHandler.class, DefaultExecutorServiceHandler.class.getCanonicalName());</div><div class="line">	        </div><div class="line">	        private final String key;</div><div class="line">	    </div><div class="line">	        private final Class&lt;?&gt; classType;</div><div class="line">	        </div><div class="line">	        private final String defaultValue;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>JOB_EXCEPTION_HANDLER</code>: 用于扩展异常处理类</li>
<li><code>EXECUTOR_SERVICE_HANDLER</code>: 用于扩展作业处理线程池类</li>
<li>通过这个属性，我们可以自定义每个作业的异常处理和线程池服务</li>
</ul>
<h3 id="2-3-作业事件配置"><a href="#2-3-作业事件配置" class="headerlink" title="2.3 作业事件配置"></a>2.3 作业事件配置</h3><p>通过作业事件配置（<code>JobEventConfiguration</code>）,实现对作业事件的异步监听、处理。在<code>Elastic-Job-Lite源码解析 --- 作业事件追踪</code> 详细分享</p>
<h3 id="2-4-作业监听器"><a href="#2-4-作业监听器" class="headerlink" title="2.4 作业监听器"></a>2.4 作业监听器</h3><p>通过配置作业监听器（<code>ElasticJobListener</code>）,实现对作业执行的同步监听、处理。<code>Elastic-Job-Lite源码解析 --- 作业监听器</code>详细分享</p>
<h3 id="3-作业配置服务"><a href="#3-作业配置服务" class="headerlink" title="3 作业配置服务"></a>3 作业配置服务</h3><p>多个Elastic-Job-Lite使用相同注册中心和相同<code>namespace</code>组成集群，实现高可用。集群中，使用作业配置服务（<code>ConfigurationService</code>）共享作业配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final class ConfigurationService &#123;</div><div class="line">    </div><div class="line">    private final TimeService timeService;</div><div class="line">    </div><div class="line">    private final JobNodeStorage jobNodeStorage;</div><div class="line">    </div><div class="line">    public ConfigurationService(final CoordinatorRegistryCenter regCenter, final String jobName) &#123;</div><div class="line">        jobNodeStorage = new JobNodeStorage(regCenter, jobName);</div><div class="line">        timeService = new TimeService();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>timeService</code>: 时间服务，提供当前时间查询</li>
<li><code>jobNodeStorage</code>: 封装注册中心，提供存储服务。<code>Elastic-Job-Lite源码解析 --- 作业数据存储</code>详细分享</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final class TimeService &#123;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前时间的毫秒数.</div><div class="line">     * </div><div class="line">     * @return 当前时间的毫秒数</div><div class="line">     */</div><div class="line">    public long getCurrentMillis() &#123;</div><div class="line">        return System.currentTimeMillis();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-1-读取作业配置"><a href="#3-1-读取作业配置" class="headerlink" title="3.1 读取作业配置"></a>3.1 读取作业配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 读取作业配置.</div><div class="line">    * </div><div class="line">    * @param fromCache 是否从缓存中读取</div><div class="line">    * @return 作业配置</div><div class="line">    */</div><div class="line">   public LiteJobConfiguration load(final boolean fromCache) &#123;</div><div class="line">       String result;</div><div class="line">       if (fromCache) &#123;</div><div class="line">           result = jobNodeStorage.getJobNodeData(ConfigurationNode.ROOT);</div><div class="line">           if (null == result) &#123;</div><div class="line">               result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.ROOT);</div><div class="line">           &#125;</div><div class="line">       &#125; else &#123;</div><div class="line">           result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.ROOT);</div><div class="line">       &#125;</div><div class="line">       return LiteJobConfigurationGsonFactory.fromJson(result);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-持久化作业配置"><a href="#3-2-持久化作业配置" class="headerlink" title="3.2 持久化作业配置"></a>3.2 持久化作业配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * 持久化分布式作业配置信息.</div><div class="line">  * </div><div class="line">  * @param liteJobConfig 作业配置</div><div class="line">  */</div><div class="line"> public void persist(final LiteJobConfiguration liteJobConfig) &#123;</div><div class="line">     checkConflictJob(liteJobConfig);</div><div class="line">     if (!jobNodeStorage.isJobNodeExisted(ConfigurationNode.ROOT) || liteJobConfig.isOverwrite()) &#123;</div><div class="line">         jobNodeStorage.replaceJobNode(ConfigurationNode.ROOT, LiteJobConfigurationGsonFactory.toJson(liteJobConfig));</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用 <code>#checkConflictJob(...)</code>方法校验注册中心存储的作业配置的作业实现类全路径（<code>jobClass</code>）和当前的是否相同，如果不同，则认为是冲突，不允许存储：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void checkConflictJob(final LiteJobConfiguration liteJobConfig) &#123;</div><div class="line">        Optional&lt;LiteJobConfiguration&gt; liteJobConfigFromZk = find();</div><div class="line">        if (liteJobConfigFromZk.isPresent() &amp;&amp; !liteJobConfigFromZk.get().getTypeConfig().getJobClass().equals(liteJobConfig.getTypeConfig().getJobClass())) &#123;</div><div class="line">            throw new JobConfigurationException(&quot;Job conflict with register center. The job &apos;%s&apos; in register center&apos;s class is &apos;%s&apos;, your job class is &apos;%s&apos;&quot;, </div><div class="line">                    liteJobConfig.getJobName(), liteJobConfigFromZk.get().getTypeConfig().getJobClass(), liteJobConfig.getTypeConfig().getJobClass());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>当注册中心未存储该作业配置或者当前作业配置允许替换注册中心配置(<code>overwrite = true</code>)时，持久化作业配置。</li>
</ul>
<h3 id="3-3-校验本机时间是否合法"><a href="#3-3-校验本机时间是否合法" class="headerlink" title="3.3 校验本机时间是否合法"></a>3.3 校验本机时间是否合法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 检查本机与注册中心的时间误差秒数是否在允许范围.</div><div class="line">     * </div><div class="line">     * @throws JobExecutionEnvironmentException 本机与注册中心的时间误差秒数不在允许范围所抛出的异常</div><div class="line">     */</div><div class="line">    public void checkMaxTimeDiffSecondsTolerable() throws JobExecutionEnvironmentException &#123;</div><div class="line">        int maxTimeDiffSeconds =  load(true).getMaxTimeDiffSeconds();</div><div class="line">        if (-1  == maxTimeDiffSeconds) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        long timeDiff = Math.abs(timeService.getCurrentMillis() - jobNodeStorage.getRegistryCenterTime());</div><div class="line">        if (timeDiff &gt; maxTimeDiffSeconds * 1000L) &#123;</div><div class="line">            throw new JobExecutionEnvironmentException(</div><div class="line">                    &quot;Time different between job server and register center exceed &apos;%s&apos; seconds, max time different is &apos;%s&apos; seconds.&quot;, timeDiff / 1000, maxTimeDiffSeconds);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Elastic-Job-Lite</code>作业触发时依赖本机时间，相同集群使用注册中心为基准，校验本机与注册中心的时间误差是否在允许范围内<code>LiteJobConfiguration.maxTimeDiffSeconds</code></li>
</ul>
<h3 id="4-结语"><a href="#4-结语" class="headerlink" title="4 结语"></a>4 结语</h3><p>这篇文章写作思路是参考别人的，通过这篇文章我提炼出，阅读源码几点技巧：</p>
<ul>
<li>从一个点切入，找到这个点的入口；</li>
<li>按照作者编码的思路去思考，抓住主线，一个个类去梳理</li>
<li>擅加利用IDEA的查看接口实现类的功能；如下展示：</li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-2/35421199.jpg" alt=""></p>
<ul>
<li>从官方文档上，了解到项目有哪些功能，带着问题去看源码；列出你想要了解的功能，一个个去学习；</li>
<li>以类图来梳理整个功能的逻辑，了解每个类，每个属性的含义，而又不会深入到每个方法的具体实现细节。</li>
<li>一次只讨论一个点，每次学习都有一个重心；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h3&gt;&lt;p&gt;涉及到主要类的类图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oc5a5l0a0.bkt.clouddn.com
    
    </summary>
    
      <category term="ElasticJob" scheme="http://jianwl.com/categories/ElasticJob/"/>
    
    
      <category term="ElasticJob" scheme="http://jianwl.com/tags/ElasticJob/"/>
    
  </entry>
  
  <entry>
    <title>Elastic-Job源码分析---为什么阅读Elastic-Job源码</title>
    <link href="http://jianwl.com/2017/11/01/Elastic-Job%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%85%E8%AF%BBElastic-Job%E6%BA%90%E7%A0%81/"/>
    <id>http://jianwl.com/2017/11/01/Elastic-Job源码分析-为什么阅读Elastic-Job源码/</id>
    <published>2017-11-01T07:25:05.000Z</published>
    <updated>2017-11-01T08:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么阅读源码Elastic-Job源码"><a href="#为什么阅读源码Elastic-Job源码" class="headerlink" title="为什么阅读源码Elastic-Job源码"></a>为什么阅读源码Elastic-Job源码</h3><ol>
<li>Quartz多节点通过数据库锁实现任务抢占，Elastic-Job基于什么策略实现任务调度与分配</li>
<li>任务分片如何实现</li>
<li><code>Elastic-Job-Cloud</code>如何实现任务动态扩容和缩容</li>
<li>任务超时如何处理？任务假死怎么判断？</li>
</ol>
<h3 id="步骤-功能"><a href="#步骤-功能" class="headerlink" title="步骤/功能"></a>步骤/功能</h3><ul>
<li>【】分布式调度协调</li>
<li>【】弹性扩容缩容</li>
<li>【】失效转移</li>
<li>【】错过执行作业重触发</li>
<li>【】作业分片策略</li>
<li>【】作业唯一节点执行</li>
<li>【】自诊断并修复分布式不稳定造成的问题</li>
<li>【】支持并行调度</li>
<li>【】支持作业生命周期操作</li>
<li>【】丰富的作业类型</li>
<li>【】Spring整合以及命名空间提供</li>
<li>【】运维平台</li>
<li>【】事件追踪</li>
<li>【】DUMP作业运行信息</li>
<li>【】作业监听器</li>
<li>【】基于Docker的进程隔离（TBD）</li>
<li>【】高可用</li>
</ul>
<h3 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h3><p>基于V1.8，会逐步和Elastic-Job功能做对比</p>
<ul>
<li>【】简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手</li>
<li>【】动态：支持动态修改任务状态、暂停/恢复任务、以及终止运行中任务，即时生效；</li>
<li>【】调度中心HA（中心式）：调度采用中心式设计，调度中心基于集群Quartz实现可保证调度中心HA</li>
<li>【】执行器HA（分布式）：任务分布式执行，任务执行器支持集群部署，可保证任务执行HA</li>
<li>【】任务Failover:执行器集群部署时，任务路由策略选择故障转移情况下，调度失败时将会平滑切换执行器进行Failover；</li>
<li>【】一致性：调度中心通过DB锁保证集群分布式调度的一致性，一次任务调度只会触发一次执行；</li>
<li>【】自定义任务参数：支持在线配置调度任务入参，即时生效；</li>
<li>【】调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被阻塞；</li>
<li>【】弹性扩容缩容：一旦有新执行器机器上线或下线，下次调度时将会重新分配任务</li>
<li>【】邮件报警：任务失败时支持邮件报警，支持配置多邮件群发报警邮件</li>
<li>【】状态监控：支持实时监控任务进度</li>
<li>【】Rolling执行日志：支持在线查看调度结果，并且支持以Rolling方式实时查看执行器输出的完整的执行日志</li>
<li>【】GLUE：提供Web IDE,支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程，支持30个版本的历史版本回溯</li>
<li>【】数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性</li>
<li>【】任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会触发一次子任务的执行，多个子任务用逗号分隔；</li>
<li>【】推送maven中央库：将会把最新稳定版本推送到maven中央库，方便用户接入和使用；</li>
<li>【】任务注册：执行器会周期性自动注册任务，调度中心将会自动发现注册的任务并触发执行，同时也支持手动录入执行器地址；</li>
<li>【】路由策略：执行器集群部署时提供丰富的路由策略，包括第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近未使用、故障转移、忙碌转移等；</li>
<li>【】运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器次数等、以及调度报表，如调度日期分布图、调度成功分布图等；</li>
<li>【】脚本任务：支持以GLUE模式开发和运行脚本任务，包括shell、python等类型脚本；</li>
<li>【】阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度、</li>
<li>【】处理失败策略：调度失败时的处理策略，策略包括：失败告警（默认）、失败重试</li>
<li>【】分片广播任务：执行器集群部署时，任务路由策略选择分片广播情况下，一次任务调度将会广播触发对应集群中所有执行器执行一次任务、同时传递分片参数、可根据分片参数分片开发任务；</li>
<li>【】动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理，在进行大数量业务操作是，可显著提升任务处理能力和速度。</li>
<li>【】事件触发：除了Cron方法和任务依赖方式触发任务执行之外，支持基于事件的触发任务方式，调度中心提供触发任务单次执行的API服务，可根据业务事件灵活触发。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么阅读源码Elastic-Job源码&quot;&gt;&lt;a href=&quot;#为什么阅读源码Elastic-Job源码&quot; class=&quot;headerlink&quot; title=&quot;为什么阅读源码Elastic-Job源码&quot;&gt;&lt;/a&gt;为什么阅读源码Elastic-Job源码&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="ElasticJob" scheme="http://jianwl.com/categories/ElasticJob/"/>
    
    
      <category term="ElasticJob" scheme="http://jianwl.com/tags/ElasticJob/"/>
    
  </entry>
  
  <entry>
    <title>ElasticJob入门实战</title>
    <link href="http://jianwl.com/2017/11/01/ElasticJob%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/"/>
    <id>http://jianwl.com/2017/11/01/ElasticJob入门实战/</id>
    <published>2017-11-01T03:31:58.000Z</published>
    <updated>2017-11-01T04:42:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h3><p><code>ElasticJob</code>是一个分布式调度解决方案，由两个互相独立的子项目<code>Elastic-Job-Lite</code>和<code>Elastic-Job-Cloud</code>组成。<code>Elastic-Job-Lite</code>定位为轻量级无中心化解决方案，使用jar包形式提供分布式的协调服务。这一节我们将会介绍SpringBoot整合ElasticJob。</p>
<h3 id="2、SpringBoot整合ElasticJob"><a href="#2、SpringBoot整合ElasticJob" class="headerlink" title="2、SpringBoot整合ElasticJob"></a>2、SpringBoot整合ElasticJob</h3><h4 id="1）依赖pom-xml"><a href="#1）依赖pom-xml" class="headerlink" title="1）依赖pom.xml"></a>1）依赖pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.frank&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;chapter6-4&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;chapter6-4&lt;/name&gt;</div><div class="line">	&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">		&lt;elastic.job.version&gt;2.1.5&lt;/elastic.job.version&gt;</div><div class="line">		&lt;mysql.version&gt;5.1.43&lt;/mysql.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.dangdang&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;elastic-job-lite-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;elastic.job.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.dangdang&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;elastic-job-lite-spring&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;elastic.job.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;curator-test&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.0.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.h2database&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;h2&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.4.184&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</div><div class="line">			&lt;optional&gt;true&lt;/optional&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<h4 id="2）注册中心配置"><a href="#2）注册中心配置" class="headerlink" title="2）注册中心配置"></a>2）注册中心配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@ConditionalOnExpression(&quot;&apos;$&#123;regCenter.serverList&#125;&apos;.length()&gt;0&quot;)</div><div class="line">public class ZookeeperRegistryCenterConfig &#123;</div><div class="line">    @Bean(initMethod = &quot;init&quot;)</div><div class="line">    public ZookeeperRegistryCenter regCenter(@Value(&quot;$&#123;regCenter.serverList&#125;&quot;) final String serverList,</div><div class="line">                                             @Value(&quot;$&#123;regCenter.namespace&#125;&quot;) final String namespace)&#123;</div><div class="line">        return new ZookeeperRegistryCenter(new ZookeeperConfiguration(serverList,namespace));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-作业事件配置"><a href="#3-作业事件配置" class="headerlink" title="3) 作业事件配置"></a>3) 作业事件配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class JobEventConfig &#123;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private DataSource dataSource;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public JobEventConfiguration jobEventConfiguration() &#123;</div><div class="line">        return new JobEventRdbConfiguration(dataSource);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-内嵌Zookeeper配置"><a href="#4-内嵌Zookeeper配置" class="headerlink" title="4) 内嵌Zookeeper配置"></a>4) 内嵌Zookeeper配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class EmbedZookeeperServer &#123;</div><div class="line">    private static TestingServer testingServer;</div><div class="line"></div><div class="line">    public static void start(final int port)&#123;</div><div class="line">        try&#123;</div><div class="line">            testingServer = new TestingServer(port,new File(String.format(&quot;target/test_zk_data/%s/&quot;,System.nanoTime())));</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000L);</div><div class="line">                    testingServer.close();</div><div class="line">                &#125; catch (InterruptedException | IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-基于时间驱动的任务"><a href="#5-基于时间驱动的任务" class="headerlink" title="5) 基于时间驱动的任务"></a>5) 基于时间驱动的任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SpringSimpleJob implements SimpleJob&#123;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private FooRepository fooRepository;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void execute(ShardingContext shardingContext) &#123;</div><div class="line">        System.out.println(String.format(&quot;Item: %s | Time: %s | Thread: %s | %s&quot;,</div><div class="line">                shardingContext.getShardingItem(), new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(new Date()), Thread.currentThread().getId(), &quot;SIMPLE&quot;));</div><div class="line">        List&lt;Foo&gt; data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);</div><div class="line">        for (Foo each : data) &#123;</div><div class="line">            fooRepository.setCompleted(each.getId());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模型类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class Foo implements Serializable&#123;</div><div class="line">    private final long id;</div><div class="line">    private final String location;</div><div class="line">    private Status status;</div><div class="line"></div><div class="line">    public Foo(long id, String location, Status status) &#123;</div><div class="line">        this.id = id;</div><div class="line">        this.location = location;</div><div class="line">        this.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLocation() &#123;</div><div class="line">        return location;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Status getStatus() &#123;</div><div class="line">        return status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStatus(Status status) &#123;</div><div class="line">        this.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Foo&#123;&quot; +</div><div class="line">                &quot;id=&quot; + id +</div><div class="line">                &quot;, location=&apos;&quot; + location + &apos;\&apos;&apos; +</div><div class="line">                &quot;, status=&quot; + status +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public enum Status&#123;</div><div class="line">        TODO,</div><div class="line">        COMPLETED</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Repository</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">@Repository</div><div class="line">public class FooRepository &#123;</div><div class="line">    private Map&lt;Long,Foo&gt; data = new ConcurrentHashMap&lt;&gt;(300,1);</div><div class="line"></div><div class="line">    public FooRepository()&#123;init();&#125;</div><div class="line"></div><div class="line">    private void init()&#123;</div><div class="line">        addData(0L, 100L, &quot;Beijing&quot;);</div><div class="line">        addData(100L, 200L, &quot;Shanghai&quot;);</div><div class="line">        addData(200L, 300L, &quot;Guangzhou&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addData(final Long idFrom,final Long idTo,final String location)&#123;</div><div class="line">        for(long i=idFrom; i &lt; idTo; i++) &#123;</div><div class="line">            data.put(i,new Foo(i,location,Foo.Status.TODO));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Foo&gt; findTodoData(final String location, final int limit) &#123;</div><div class="line">        List&lt;Foo&gt; result = new ArrayList&lt;&gt;(limit);</div><div class="line">        int count = 0;</div><div class="line">        for (Map.Entry&lt;Long, Foo&gt; each : data.entrySet()) &#123;</div><div class="line">            Foo foo = each.getValue();</div><div class="line">            if (foo.getLocation().equals(location) &amp;&amp; foo.getStatus() == Foo.Status.TODO) &#123;</div><div class="line">                result.add(foo);</div><div class="line">                count++;</div><div class="line">                if (count == limit) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCompleted(final long id) &#123;</div><div class="line">        data.get(id).setStatus(Foo.Status.COMPLETED);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-任务注册"><a href="#6-任务注册" class="headerlink" title="6) 任务注册"></a>6) 任务注册</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class SimpleJobConfig &#123;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private ZookeeperRegistryCenter regCenter;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private JobEventConfiguration jobEventConfiguration;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SimpleJob simpleJob()&#123;</div><div class="line">        return new SpringSimpleJob();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean(initMethod = &quot;init&quot;)</div><div class="line">    public JobScheduler simpleJobScheduler(final SimpleJob simpleJob, @Value(&quot;$&#123;simpleJob.cron&#125;&quot;) final String cron,</div><div class="line">                                           @Value(&quot;$&#123;simpleJob.shardingTotalCount&#125;&quot;) final int shardingTotalCount,</div><div class="line">                                           @Value(&quot;$&#123;simpleJob.shardingItemParameters&#125;&quot;) final String shardingItemParameters)&#123;</div><div class="line">        return new SpringJobScheduler(simpleJob, regCenter, getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters), jobEventConfiguration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private LiteJobConfiguration getLiteJobConfiguration(final Class&lt;? extends SimpleJob&gt; jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) &#123;</div><div class="line">        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(</div><div class="line">                jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build(), jobClass.getCanonicalName())).overwrite(true).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-入口类"><a href="#7-入口类" class="headerlink" title="7) 入口类"></a>7) 入口类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">public class Chapter64Application &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		EmbedZookeeperServer.start(6181); // 启动内嵌zookeeper</div><div class="line">		SpringApplication.run(Chapter64Application.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-参数配置application-properties"><a href="#8-参数配置application-properties" class="headerlink" title="8) 参数配置application.properties"></a>8) 参数配置application.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">regCenter.serverList=localhost:6181</div><div class="line">regCenter.namespace=elastic-job-lite-springboot</div><div class="line"></div><div class="line">simpleJob.cron=0/30 * * * * ?</div><div class="line">simpleJob.shardingTotalCount=3</div><div class="line">simpleJob.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</div><div class="line"></div><div class="line">spring.datasource.url=jdbc:h2:mem:job_event_storage</div><div class="line">spring.datasource.driver-class-name=org.h2.Driver</div><div class="line">spring.datasource.username=sa</div><div class="line">spring.datasource.password=</div></pre></td></tr></table></figure>
<h4 id="9-项目源码请移步：SpringBoot整合ElasticJob"><a href="#9-项目源码请移步：SpringBoot整合ElasticJob" class="headerlink" title="9) 项目源码请移步：SpringBoot整合ElasticJob"></a>9) 项目源码请移步：<a href="https://github.com/frank-jian/SpringBootDemo/tree/master/chapter6-4" target="_blank" rel="external">SpringBoot整合ElasticJob</a></h4><h3 id="3、elastic-job-lite-console界面中配置注册中心"><a href="#3、elastic-job-lite-console界面中配置注册中心" class="headerlink" title="3、elastic-job-lite-console界面中配置注册中心"></a>3、<a href="https://github.com/elasticjob/elastic-job/blob/master/elastic-job-lite/elastic-job-lite-console/src/main/java/com/dangdang/ddframe/job/lite/console/ConsoleBootstrap.java" target="_blank" rel="external">elastic-job-lite-console</a>界面中配置注册中心</h3><p>1、启动<a href="https://github.com/elasticjob/elastic-job/blob/master/elastic-job-lite/elastic-job-lite-console/src/main/java/com/dangdang/ddframe/job/lite/console/ConsoleBootstrap.java" target="_blank" rel="external">ConsoleBootstrap.java</a>类，输入账号：root，密码：root</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/62773298.jpg" alt=""></p>
<p>2、启动步骤2中SpringBoot整合的ElasticJob项目，在<code>elastic-job-lite-console</code>界面中配置注册中心地址；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/48589935.jpg" alt=""></p>
<p>3、连接注册中心</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/20731156.jpg" alt=""></p>
<p>4、获取注册中心的任务(另外一个任务文章没有提及注册流程，具体可以看<a href="https://github.com/frank-jian/SpringBootDemo/tree/master/chapter6-4" target="_blank" rel="external">项目源码</a>)</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/54676368.jpg" alt=""></p>
<p>5、触发任务</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/11175796.jpg" alt=""></p>
<h3 id="4、结语"><a href="#4、结语" class="headerlink" title="4、结语"></a>4、结语</h3><p>至此，已经简单介绍了ElasticJob的用法，后续会深入ElasticJob源码学习，深入理解其各个特性实现的思想；</p>
<h3 id="5、参考资料"><a href="#5、参考资料" class="headerlink" title="5、参考资料"></a>5、参考资料</h3><ol>
<li><a href="http://elasticjob.io/index_zh.html" target="_blank" rel="external">Elastic-Job官方文档</a></li>
<li><a href="https://github.com/elasticjob/elastic-job" target="_blank" rel="external">Elastic-Job源码</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、引言&quot;&gt;&lt;a href=&quot;#1、引言&quot; class=&quot;headerlink&quot; title=&quot;1、引言&quot;&gt;&lt;/a&gt;1、引言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ElasticJob&lt;/code&gt;是一个分布式调度解决方案，由两个互相独立的子项目&lt;code&gt;Elastic-J
    
    </summary>
    
      <category term="ElasticJob" scheme="http://jianwl.com/categories/ElasticJob/"/>
    
    
      <category term="ElasticJob" scheme="http://jianwl.com/tags/ElasticJob/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB极简实战入门</title>
    <link href="http://jianwl.com/2017/10/28/MongoDB%E6%9E%81%E7%AE%80%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/"/>
    <id>http://jianwl.com/2017/10/28/MongoDB极简实战入门/</id>
    <published>2017-10-28T01:37:38.000Z</published>
    <updated>2017-10-28T06:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、为什么用MongoDB"><a href="#1、为什么用MongoDB" class="headerlink" title="1、为什么用MongoDB?"></a>1、为什么用MongoDB?</h3><p>传统的计算机应用大多数使用关系型数据库来存储数据，比如MySQL,它的特点是数据以表格的形式存储起来，数据库由一张张排列整齐的表格构成，就好像有一个Excel表格一样，每个表格都会有若干列，比如一个学生信息表，可能包含学号、姓名、性别、入学年份、高考成绩、籍贯等。而表格的每一排，则是一个个学生的具体信息。在企业级应用和前互联网时代，关系型数据库几乎是不二选择。关系型数据库的特点是有整齐划一的组织，很方便对数据进行描述、插入、搜索。</p>
<p>想象有一个传统的网上服务商店，它主要的数据可能是存储在一张叫products的表单里，表单可能包含这些列：商品编号id、名称name、商家brank、主目录cate、子目录sub-cat、零售价price、是否促销promotion等，如果有一个用户想要查找所有价格低于300元的正在促销的鞋子的编号和名称，则可以执行类似以下的SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT id, name FROM products WHERE cate=&apos;shoes&apos; AND price &lt; 300 AND promotion = true;</div></pre></td></tr></table></figure></p>
<p>SQL具备了强大的深度查询能力，能满足各式各样的查询要求，而如果要对数据进行添加和删除，成本也是非常低的，这些是SQL的优势之一，随着互联网的兴起以及数据形式的多样化，四平八稳的SQL表单在一些领域渐渐显现出它的劣势，让我们通过一个例子来说明。考虑一个后台系统，如果我们用关系型数据库为每篇博客article创建一个表单的话，这个表单大概会包括以下这些列：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">title</th>
<th style="text-align:center">description</th>
<th style="text-align:center">author</th>
<th style="text-align:center">content</th>
<th style="text-align:center">likes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a_1</td>
<td style="text-align:center">title1</td>
<td style="text-align:center">description1</td>
<td style="text-align:center">author1</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">a_2</td>
<td style="text-align:center">title2</td>
<td style="text-align:center">description2</td>
<td style="text-align:center">author2</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">13</td>
</tr>
</tbody>
</table>
<p>这个时候用SQL数据库来存储是非常方便的，但假如我们要给每篇文章添加评论功能，会发现每篇文章可能要多篇评论，而且这些数目是动态变化的，而且每篇评论还包括好几项内容：评论人、评论时间、以及评论内容。这时候要将这些内容都塞进上述的表，就显得很困难。通常的做法是为评论comment单独建一个表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">author</th>
<th style="text-align:center">time</th>
<th style="text-align:center">content</th>
<th style="text-align:center">article</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">c_1</td>
<td style="text-align:center">anna</td>
<td style="text-align:center">2017-10-26 08:23</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">a_1</td>
</tr>
<tr>
<td style="text-align:center">c_2</td>
<td style="text-align:center">david</td>
<td style="text-align:center">2017-10-26 08:23</td>
<td style="text-align:center">content2</td>
<td style="text-align:center">a_2</td>
</tr>
</tbody>
</table>
<p>类似地，每篇文章可能会有若干标签tags，标签本身又是一个表单：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">category</th>
<th style="text-align:center">tags</th>
<th style="text-align:center">content</th>
<th style="text-align:center">article</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">t_1</td>
<td style="text-align:center">anna</td>
<td style="text-align:center">java</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">a_1</td>
</tr>
<tr>
<td style="text-align:center">t_2</td>
<td style="text-align:center">david</td>
<td style="text-align:center">python</td>
<td style="text-align:center">content2</td>
<td style="text-align:center">a_2</td>
</tr>
</tbody>
</table>
<p>而博客的表格则要通过foreign key跟这些相关联的表格联系起来，这样一来当我们做查询的时候，比如说：找出评论数不少于3的标签为java的作者为author1文章，就会涉及到复杂的跨表查询，需要大量使用join语句。这种跨表查询不仅降低了查询速度，而这些语句写起来也不简单。</p>
<p>那么，如果用MongoDB数据库来实现，可以如何涉及数据模型呢？很简单，想下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">_id: POST_ID</div><div class="line">  title: TITLE_OF_POST, </div><div class="line">  description: POST_DESCRIPTION,</div><div class="line">  author: POST_BY,</div><div class="line">  tags: [TAG1, TAG2, TAG3],</div><div class="line">  likes: TOTAL_LIKES, </div><div class="line">  comments: [	</div><div class="line">     &#123;</div><div class="line">        user:&apos;COMMENT_BY&apos;,</div><div class="line">        message: TEXT,</div><div class="line">        dateCreated: DATE_TIME,</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">        user:&apos;COMMENT_BY&apos;,</div><div class="line">        message: TEXT,</div><div class="line">        dateCreated: DATE_TIME,</div><div class="line">     &#125;</div><div class="line">  ]</div></pre></td></tr></table></figure>
<p>在MongoDB里，每篇博客文章以一个文档documen的形式保存起来，而文档内部包含了很多项目，比如title、tags等，每个项目都是key-value形式，重要的是一个key，可以有多个values，它们用[]括起来。</p>
<p>这种宽松的数据存储形式非常灵活，MongoDB不限制每个key对应的values的数目。比如有的文章没有评论，则它的值就是一个空集，完全没有问题；有的文章评论很多，也可以无限制地插入。更灵活的是，MongoDB不要求同一个集合(collection，相当于SQL的table)里面的不同document有相同的key，比如除了上述这种文档组织，有的文档所代表的文章可能没有likes这个项目，在比如有的文章可能有更多的项目。这些不同的文档都可以灵活地存储在同一个集合下，而且查询起来也异常简单，因为都在一个文档里，不用进行各种跨文档查询。而这种MongoDB式的存储也方便了数据的维护，对于每一篇博客文章来说，所有的相关数据都在这个document里面，不用去考虑一个数据库操作需要涉及到多少了表格。</p>
<p>当然，除了上述的优点，MongoDB还有不少别的优势，比如MongoDB的数据是用JSON(Javascript Object Notation)存储的，而几乎所有的web应用都是基于Javascript的。因此，存储数据和应用的数据的格式是高度一致的，不需经过转换，更多关于MongoDB的优点可以看<a href="https://www.tutorialspoint.com/mongodb/mongodb_advantages.htm" target="_blank" rel="external">这篇文章</a></p>
<h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><h4 id="Mac平台"><a href="#Mac平台" class="headerlink" title="Mac平台"></a>Mac平台</h4><p>1、更新Homebrew的package数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew update</div></pre></td></tr></table></figure>
<p>2、安装MongoDB</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew intall mongodb</div></pre></td></tr></table></figure>
<p>3、连接到mongo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo</div></pre></td></tr></table></figure>
<p>4、推荐安装<a href="https://robomongo.org/" target="_blank" rel="external">MongoDB客户端</a></p>
<h3 id="3、MongoDB实战-以下命令在mongdb客户端执行"><a href="#3、MongoDB实战-以下命令在mongdb客户端执行" class="headerlink" title="3、MongoDB实战(以下命令在mongdb客户端执行)"></a>3、MongoDB实战(以下命令在mongdb客户端执行)</h3><h4 id="1、数据库操作"><a href="#1、数据库操作" class="headerlink" title="1、数据库操作"></a>1、数据库操作</h4><h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1) 创建数据库"></a>1) 创建数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use bd_use</div></pre></td></tr></table></figure>
<p>这样就新建一个叫<code>bd_use</code>的数据库，执行以下指令显示当前的数据库</p>
<h5 id="2-显示当前数据库"><a href="#2-显示当前数据库" class="headerlink" title="2) 显示当前数据库"></a>2) 显示当前数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases</div></pre></td></tr></table></figure>
<p>不过由于我们的新数据库是空的，所以会显示类似这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin  0.000GB</div><div class="line">local  0.000GB</div></pre></td></tr></table></figure>
<h4 id="2、集合操作"><a href="#2、集合操作" class="headerlink" title="2、集合操作"></a>2、集合操作</h4><h5 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1) 创建集合"></a>1) 创建集合</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.createCollection(&apos;users&apos;)</div></pre></td></tr></table></figure>
<p>顺利的话会显示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;ok&quot; : 1.0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2）查看当前数据库"><a href="#2）查看当前数据库" class="headerlink" title="2）查看当前数据库"></a>2）查看当前数据库</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/35436214.jpg" alt=""></p>
<h5 id="3）查看数据库集合列表"><a href="#3）查看数据库集合列表" class="headerlink" title="3）查看数据库集合列表"></a>3）查看数据库集合列表</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/99042015.jpg" alt=""></p>
<h5 id="4）移除集合"><a href="#4）移除集合" class="headerlink" title="4）移除集合"></a>4）移除集合</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.drop()</div></pre></td></tr></table></figure>
<h4 id="3、新增"><a href="#3、新增" class="headerlink" title="3、新增"></a>3、新增</h4><p>无需先创建集合再新增数据，直接对相应集合新增数据即可；</p>
<h5 id="1）新增1条数据"><a href="#1）新增1条数据" class="headerlink" title="1）新增1条数据:"></a>1）新增1条数据:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.insert(&#123;</div><div class="line">    id: 1,</div><div class="line">    name: &apos;张三&apos;,</div><div class="line">    city_id: 1,</div><div class="line">    mail: &apos;zhangsan@gmail.com&apos;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/14240895.jpg" alt=""></p>
<h5 id="2）新增多条数据"><a href="#2）新增多条数据" class="headerlink" title="2）新增多条数据"></a>2）新增多条数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.insert([</div><div class="line">&#123;</div><div class="line">    id: 2,</div><div class="line">    name: &apos;赵六二&apos;,</div><div class="line">    city_id: 2,</div><div class="line">    mail: &apos;zhaoliuer@gmail.com&apos;,</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">    id: 3,</div><div class="line">    name: &apos;刘二麻子&apos;,</div><div class="line">    city_id: 3,</div><div class="line">    mail: &apos;liuermazi@gmail.com&apos;,</div><div class="line">    register_time: &apos;2017-10-27&apos;</div><div class="line">&#125;</div><div class="line">])</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/95636913.jpg" alt=""></p>
<h4 id="4-查询"><a href="#4-查询" class="headerlink" title="4 查询"></a>4 查询</h4><h5 id="1-单条件查询"><a href="#1-单条件查询" class="headerlink" title="1) 单条件查询"></a>1) 单条件查询</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/28617087.jpg" alt=""></p>
<h5 id="2-多条件查询"><a href="#2-多条件查询" class="headerlink" title="2) 多条件查询"></a>2) 多条件查询</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/1559324.jpg" alt=""></p>
<h5 id="3-查询或条件"><a href="#3-查询或条件" class="headerlink" title="3) 查询或条件"></a>3) 查询或条件</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/22233869.jpg" alt=""></p>
<h5 id="4-区间查询"><a href="#4-区间查询" class="headerlink" title="4) 区间查询"></a>4) 区间查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">大于：$gt</div><div class="line">小于：$lt</div><div class="line">大于或等于:$gte</div><div class="line">小于或等于:$lte</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/93826405.jpg" alt=""></p>
<h5 id="5-分页查询"><a href="#5-分页查询" class="headerlink" title="5) 分页查询"></a>5) 分页查询</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/54991109.jpg" alt=""></p>
<h5 id="6-查询只返回需要的字段"><a href="#6-查询只返回需要的字段" class="headerlink" title="6) 查询只返回需要的字段"></a>6) 查询只返回需要的字段</h5><p>第一个{}为查询条件，第二个{}为返回字段，1表示显示，0表示不显示</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/90600021.jpg" alt=""></p>
<h4 id="5-更新"><a href="#5-更新" class="headerlink" title="5 更新"></a>5 更新</h4><h5 id="1-更新字段"><a href="#1-更新字段" class="headerlink" title="1) 更新字段"></a>1) 更新字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.update(&#123;id: 2&#125;,&#123;$set: &#123;name:&apos;赵六二666&apos;,mai: &apos;zhaoliuer666@gmail.com&apos;&#125;&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/38746145.jpg" alt=""></p>
<h4 id="2-增量更新数据"><a href="#2-增量更新数据" class="headerlink" title="2) 增量更新数据"></a>2) 增量更新数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.update(&#123;id: 2&#125;,&#123;$inc: &#123;city_id: 2&#125;&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/82981085.jpg" alt=""></p>
<h4 id="6、删除"><a href="#6、删除" class="headerlink" title="6、删除"></a>6、删除</h4><h5 id="1）-删除一条记录"><a href="#1）-删除一条记录" class="headerlink" title="1） 删除一条记录"></a>1） 删除一条记录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.remove(&#123;id:2&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/30082639.jpg" alt=""></p>
<h4 id="7、索引"><a href="#7、索引" class="headerlink" title="7、索引"></a>7、索引</h4><h5 id="1）获取文档的所有索引"><a href="#1）获取文档的所有索引" class="headerlink" title="1）获取文档的所有索引"></a>1）获取文档的所有索引</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/58287318.jpg" alt=""></p>
<h5 id="2）创建索引"><a href="#2）创建索引" class="headerlink" title="2）创建索引"></a>2）创建索引</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/80609873.jpg" alt=""></p>
<p>查看索引</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/24726879.jpg" alt=""></p>
<h5 id="3-移除索引"><a href="#3-移除索引" class="headerlink" title="3) 移除索引"></a>3) 移除索引</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/40728147.jpg" alt=""></p>
<p>查看索引</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/5130353.jpg" alt=""></p>
<h4 id="8、聚合操作"><a href="#8、聚合操作" class="headerlink" title="8、聚合操作"></a>8、聚合操作</h4><h5 id="1）按城市聚合"><a href="#1）按城市聚合" class="headerlink" title="1）按城市聚合"></a>1）按城市聚合</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/49303018.jpg" alt=""></p>
<h5 id="2-城市聚合，并id求和"><a href="#2-城市聚合，并id求和" class="headerlink" title="2) 城市聚合，并id求和"></a>2) 城市聚合，并id求和</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/669500.jpg" alt=""></p>
<h5 id="3-城市聚合，并算出相同城市的个数"><a href="#3-城市聚合，并算出相同城市的个数" class="headerlink" title="3) 城市聚合，并算出相同城市的个数"></a>3) 城市聚合，并算出相同城市的个数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/94872900.jpg" alt=""></p>
<h3 id="4、参考资料"><a href="#4、参考资料" class="headerlink" title="4、参考资料"></a>4、参考资料</h3><p>1、<a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="external">MongoDB 极简实践入门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、为什么用MongoDB&quot;&gt;&lt;a href=&quot;#1、为什么用MongoDB&quot; class=&quot;headerlink&quot; title=&quot;1、为什么用MongoDB?&quot;&gt;&lt;/a&gt;1、为什么用MongoDB?&lt;/h3&gt;&lt;p&gt;传统的计算机应用大多数使用关系型数据库来存储数据
    
    </summary>
    
      <category term="MongoDB" scheme="http://jianwl.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://jianwl.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>书单整理</title>
    <link href="http://jianwl.com/2017/10/26/%E4%B9%A6%E5%8D%95%E6%95%B4%E7%90%86/"/>
    <id>http://jianwl.com/2017/10/26/书单整理/</id>
    <published>2017-10-26T03:30:36.000Z</published>
    <updated>2017-10-26T09:02:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>书单能在你想要打怪升级的路上给予些许帮助，建议先收藏本书单，认真啃完一本再买下一本，扎实走完每一步，部分书单关联博客和微信公众号，书单没有进行分类，大体顺序，编程开发 =&gt; 数据库 =&gt; 架构运维 =&gt; 算法。</p>
<h3 id="书籍列表"><a href="#书籍列表" class="headerlink" title="书籍列表"></a>书籍列表</h3><h4 id="1、《Effective-Java中文版》"><a href="#1、《Effective-Java中文版》" class="headerlink" title="1、《Effective Java中文版》"></a>1、<a href="https://item.jd.com/10058902.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=9db5551f46de481d8cff65b99ad40260" target="_blank" rel="external">《Effective Java中文版》</a></h4><ul>
<li>豆瓣评分：9.1 【1235人评价】</li>
<li>推荐理由：本书介绍了在Java编程中78条极具实用价值的经验规则，这些经验规则涵盖了大多数开发人员每天所面临的问题的解决方案。</li>
<li>友情提示：同推荐《重构：改善既有代码的设计》、《代码整洁之道》、《代码大全》有一定内容重叠</li>
</ul>
<h4 id="2、《Java性能权威指南》"><a href="#2、《Java性能权威指南》" class="headerlink" title="2、《Java性能权威指南》"></a>2、<a href="https://item.jd.com/11896988.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=4649d7ebe7284a478595eb4cbe89b399" target="_blank" rel="external">《Java性能权威指南》</a></h4><ul>
<li>豆瓣评分：8.2【44人评价】</li>
<li>推荐理由：市面上介绍Java的书有很多，但专注于Java性能的并不多，能游刃有余地展示Java性能优化难点的更是凤毛麟角，本书即是其中之一。通过使用JVM和Java平台，以及Java语言和应用程序接口，本书详尽讲解了Java性能调优的相关知识，帮助读者深入理解Java平台性能的各个方面，最终使程序如虎添翼。</li>
</ul>
<h4 id="3、《Spring揭密》"><a href="#3、《Spring揭密》" class="headerlink" title="3、《Spring揭密》"></a>3、<a href="https://item.jd.com/10063640.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=e5ebdb789c364f23862fdf953f0e0f63" target="_blank" rel="external">《Spring揭密》</a></h4><ul>
<li>豆瓣评分：9.0【162人评价】</li>
<li>推荐理由：Spring使用者不得不读</li>
<li>推荐博客：<a href="http://spring4all.com/" target="_blank" rel="external">Spring4All社区</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=spring4all" target="_blank" rel="external">Spring4All社区</a></li>
</ul>
<h4 id="4、《SpringBoot解密》"><a href="#4、《SpringBoot解密》" class="headerlink" title="4、《SpringBoot解密》"></a>4、<a href="https://item.jd.com/11940558.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=66023fea833e4c8f8a5bcac1f5e27017" target="_blank" rel="external">《SpringBoot解密》</a></h4><ul>
<li>豆瓣评分：6.8【44人评价】</li>
<li>推荐理由：《Spring揭密》相同作者，SpringBoot入门书籍</li>
<li>作者博客：<a href="https://afoo.me/" target="_blank" rel="external">扶墙老师说一个架构士的思考与沉淀</a></li>
<li>作者公众号：<a href="https://afoo.me/images/qrcode_for_gh_4fe672b2e860_430.jpg" target="_blank" rel="external">扶墙老师说</a></li>
<li>付费教程：<a href="https://segmentfault.com/ls/1650000011063780" target="_blank" rel="external">《Java 微服务实践 - Spring Boot 系列》</a></li>
</ul>
<h4 id="5、《MyBatis技术内幕》"><a href="#5、《MyBatis技术内幕》" class="headerlink" title="5、《MyBatis技术内幕》"></a>5、<a href="https://item.jd.com/12125531.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=c9571326f34f4ad4b779d7ca40161779" target="_blank" rel="external">《MyBatis技术内幕》</a></h4><ul>
<li>豆瓣评分：暂无</li>
<li>推荐理由：以MyBatis 3.4为基础，针对MyBatis的架构设计和实现细节进行了详细分析，其中穿插介绍了MyBatis源码中涉及的基础知识、设计模式以及笔者自己在实践中的思考。</li>
<li>作者博客：<a href="https://my.oschina.net/zudajun/blog" target="_blank" rel="external">祖大俊的博客</a></li>
</ul>
<h4 id="6、有效的单元测试"><a href="#6、有效的单元测试" class="headerlink" title="6、有效的单元测试"></a>6、<a href="https://item.jd.com/11582394.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=6a9d70686b5246e19559509e551d2118" target="_blank" rel="external">有效的单元测试</a></h4><ul>
<li>豆瓣评分：7.4 【18 人评价】</li>
<li>推荐理由：Java 单元测试入门。</li>
</ul>
<h4 id="7、《Java并发编程实战》"><a href="#7、《Java并发编程实战》" class="headerlink" title="7、《Java并发编程实战》"></a>7、<a href="https://item.jd.com/10922250.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=f4a1f467b1014d7f9c97af819b0fb814" target="_blank" rel="external">《Java并发编程实战》</a></h4><ul>
<li>豆瓣评分：9.0 【651 人评价】</li>
<li>推荐理由：本书深入浅出地介绍了Java线程和并发，是一本完美的Java并发参考手册。</li>
<li>推荐博客：<a href="http://ifeve.com/" target="_blank" rel="external">并发编程网</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=ifeves" target="_blank" rel="external">并发编程网</a></li>
</ul>
<h4 id="8、《Netty实战》"><a href="#8、《Netty实战》" class="headerlink" title="8、《Netty实战》"></a>8、<a href="https://item.jd.com/12070975.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=a1ad25055c664e598bda5f663f1d4157" target="_blank" rel="external">《Netty实战》</a></h4><ul>
<li>豆瓣评分：7.5【24 人评价】</li>
<li>豆瓣评分：8.1【83 人评价】 《Netty in Action》英文版</li>
<li>推荐理由：Netty之父Trustin Lee作序推荐。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=NettyZone" target="_blank" rel="external">Netty之家</a></li>
</ul>
<h4 id="9、《深入剖析Tomcat》"><a href="#9、《深入剖析Tomcat》" class="headerlink" title="9、《深入剖析Tomcat》"></a>9、<a href="https://item.jd.com/10913619.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=33bd504b09414f71b76770638001db97" target="_blank" rel="external">《深入剖析Tomcat》</a></h4><ul>
<li>豆瓣评分：8.3【118 人评价】</li>
<li>豆瓣评分：8.9【73 人评价】 《How Tomcat Works》英文版</li>
<li>推荐理由：本书深入剖析Tomcat 4和Tomcat 5中的每个组件，并揭示其内部工作原理。通过学习本书，你将可以自行开发Tomcat组件，或者扩展已有的组件。</li>
</ul>
<h4 id="10、《深入理解Nginx》"><a href="#10、《深入理解Nginx》" class="headerlink" title="10、《深入理解Nginx》"></a>10、<a href="https://item.jd.com/11217076.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=92163cd0388d41fb8b5872ec1c8c48d9" target="_blank" rel="external">《深入理解Nginx》</a></h4><ul>
<li>豆瓣评分：8.5【138 人评价】</li>
<li>推荐理由：书中首先通过介绍官方Nginx的基本用法和配置规则，帮助读者了解一般Nginx模块的用法，然后重点介绍了如何开发HTTP模块(含HTTP过滤模块)来得到定制化的Nginx，其中包括开发—个功能复杂的模块所需要了解的各种知识，并对内存池的实现细节及TCP协议进行了详细介绍；接着，综合Nginx框架代码分析了Nginx架构的设计理念和技巧，此外，还新增了如何在模块中支持HTTP变量，以及与slab共享内存等相关的内容，相信通过完善，可进一步帮助读者更好地开发出功能丰富、性能—流的Nginx模块。</li>
<li>友情提示：相对适用于 Nginx 开发者。Nginx 使用者可以了解。</li>
</ul>
<h4 id="11、《深入理解Java虚拟机：JVM高级特性与最佳实践》"><a href="#11、《深入理解Java虚拟机：JVM高级特性与最佳实践》" class="headerlink" title="11、《深入理解Java虚拟机：JVM高级特性与最佳实践》"></a>11、<a href="https://item.jd.com/11252778.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=eda3fc1cffd846e0a6cc4865c83047f4" target="_blank" rel="external">《深入理解Java虚拟机：JVM高级特性与最佳实践》</a></h4><ul>
<li>豆瓣评分：8.9 【657 人评价】</li>
<li>推荐理由：不去了解 JVM 的工程师，和咸鱼有什么区别？</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=lovestblog" target="_blank" rel="external">你假笨</a></li>
<li>推荐博客：<a href="http://lovestblog.cn/" target="_blank" rel="external">你假笨@JVM</a></li>
</ul>
<h4 id="12、《Java核心技术系列：Java虚拟机规范（Java-SE-8版）》"><a href="#12、《Java核心技术系列：Java虚拟机规范（Java-SE-8版）》" class="headerlink" title="12、《Java核心技术系列：Java虚拟机规范（Java SE 8版）》"></a>12、<a href="https://item.jd.com/11703581.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=82ba243013084915ad130178cb063f91" target="_blank" rel="external">《Java核心技术系列：Java虚拟机规范（Java SE 8版）》</a></h4><ul>
<li>豆瓣评分：暂无评价</li>
<li>豆瓣评分：8.3 【27 人评价】《Java虚拟机规范(Java SE 7版)》</li>
<li>推荐理由：基于Java SE 8,Oracle官方发布，Java虚拟机技术创建人撰写，国内Java技术专家翻译，是深度了解Java虚拟机和Java语言实现细节的必读之作</li>
<li>推荐博客：<a href="http://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="external">占小狼的简书</a></li>
<li>推荐公众号：<a href="http://upload-images.jianshu.io/upload_images/2184951-2079ac376dbc9c0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="external">占小狼的博客</a></li>
</ul>
<h4 id="13、《Go语言编程》"><a href="#13、《Go语言编程》" class="headerlink" title="13、《Go语言编程》"></a>13、<a href="https://item.jd.com/11067810.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=b58705ad1a4a438cb108d604a94cc4f6" target="_blank" rel="external">《Go语言编程》</a></h4><ul>
<li>豆瓣评分：7.1 【444 人评价】</li>
<li>推荐理由：这本书从整体的写作风格来说，会以介绍 Go 语言特性为主，示例则尽量采用作者平常的实践，而不是一个没有太大实际意义的语法示范样例。</li>
<li>友情提示：本书作者背景极强，许式伟为原金山WPS首席架构师、曾是盛大创新院研究员，目前是国内Go语言实践圈子公认的Go语言专家。</li>
</ul>
<h4 id="14、《-Go语言学习笔记》"><a href="#14、《-Go语言学习笔记》" class="headerlink" title="14、《 Go语言学习笔记》"></a>14、<a href="https://item.jd.com/11944267.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=acd310e55c2f49baa6fee671228c00b0" target="_blank" rel="external">《 Go语言学习笔记》</a></h4><ul>
<li>豆瓣评分：8.4 【57 人评价】</li>
<li>推荐理由：基于Go1.6， 解析语言规范，深入剖析Go运行时源码</li>
<li>友情提示：雨痕大大，教科书级人物</li>
</ul>
<h4 id="15、《MySQL技术内幕——InnoDB存储引擎》"><a href="#15、《MySQL技术内幕——InnoDB存储引擎》" class="headerlink" title="15、《MySQL技术内幕——InnoDB存储引擎》"></a>15、<a href="https://item.jd.com/11252326.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=ad40d5df95cd49a2b70cb7fa9de78428" target="_blank" rel="external">《MySQL技术内幕——InnoDB存储引擎》</a></h4><ul>
<li>豆瓣评分：8.6 【104 人评价】</li>
<li>推荐理由：从源代码的角度深度解析了InnoDB的体系结构、实现原理、工作机制，并给出了大量最佳实践，能帮助你系统而深入地掌握InnoDB，更重要的是，它能为你设计管理高性能、高可用的数据库系统提供绝佳的指导。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=dbaplus" target="_blank" rel="external">DBAplus社群</a></li>
</ul>
<h4 id="16、《高性能MySQL》"><a href="#16、《高性能MySQL》" class="headerlink" title="16、《高性能MySQL》"></a>16、<a href="https://item.jd.com/11220393.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=5e2d58c91b80419a8c600f96d4a8d4b1" target="_blank" rel="external">《高性能MySQL》</a></h4><ul>
<li>豆瓣评分：9.3 【245 人评价】</li>
<li>推荐理由：对于想要了解MySQL性能提升的人来说，这是一本不可多得的书。书中没有各种提升性能的秘籍，而是深入问题的核心，详细的解释了每种提升性能的原理，从而可以使你四两拨千斤。授之于鱼不如授之于渔，这本书做到了。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=iMYSQL_WX" target="_blank" rel="external">老叶茶馆</a></li>
</ul>
<h4 id="17、《高可用MySQL》"><a href="#17、《高可用MySQL》" class="headerlink" title="17、《高可用MySQL》"></a>17、<a href="https://wqitem.jd.com/item/view?sku=11774353&amp;PTAG=17047.12.1&amp;cu=true&amp;utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=7da2a03f065048e3a87e0ab0b34532eb&amp;abt=3" target="_blank" rel="external">《高可用MySQL》</a></h4><ul>
<li>豆瓣评分：8.0 【87 人评价】</li>
<li>推荐理由：《高性能MySQL》的姊妹篇。</li>
</ul>
<h4 id="18、《MongoDB权威指南》"><a href="#18、《MongoDB权威指南》" class="headerlink" title="18、《MongoDB权威指南》"></a>18、<a href="https://item.jd.com/11384782.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=282adc6929f24a07aa7195c117353076" target="_blank" rel="external">《MongoDB权威指南》</a></h4><ul>
<li>豆瓣评分：8.0 【69 人评价】</li>
<li>推荐理由：算是普通的参考书了，没有特别有深度的讲解。其实就是一本正常的介绍mongoDB是怎么用的，也可以作为nosql学习的入门。作为指南书，还是很合格的符合期望。</li>
<li>推荐博客：<a href="http://mongoing.com/" target="_blank" rel="external">MongoDB 中文社区</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=mongoing-com" target="_blank" rel="external">MongoDB 中文社区</a></li>
</ul>
<h4 id="19、《Redis开发与运维》"><a href="#19、《Redis开发与运维》" class="headerlink" title="19、《Redis开发与运维》"></a>19、<a href="https://item.jd.com/12121730.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=0a34adc050b946d283d5afa84e93f9ae" target="_blank" rel="external">《Redis开发与运维》</a></h4><ul>
<li>豆瓣评分：8.8 【41 人评价】</li>
<li>推荐理由：从开发、运维两个角度总结了Redis实战经验，深入浅出地剖析底层实现，包含大规模集群开发与运维的实际案例、应用技巧。全面覆盖Redis 基本功能及应用，图示丰富，讲解细腻。</li>
<li>推荐博客：<a href="http://redis.cn/" target="_blank" rel="external">Redis 中国用户组</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=rediscn" target="_blank" rel="external">CRUG</a></li>
</ul>
<h4 id="20、《Redis设计与实现》"><a href="#20、《Redis设计与实现》" class="headerlink" title="20、《Redis设计与实现》"></a>20、<a href="https://item.jd.com/11486101.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=57f3b67147d142e5b76aa501d0e6c4e3" target="_blank" rel="external">《Redis设计与实现》</a></h4><ul>
<li>豆瓣评分：8.5 【427 人评价】</li>
<li>推荐理由：系统而全面地描述了 Redis 内部运行机制。图示丰富，描述清晰，并给出大量参考信息，是NoSQL数据库开发人员案头必备。</li>
</ul>
<h4 id="21、《NoSQL精粹》"><a href="#21、《NoSQL精粹》" class="headerlink" title="21、《NoSQL精粹》"></a>21、<a href="https://item.jd.com/11297782.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=3a24cb49ab394d38bd24edbcb17fae79" target="_blank" rel="external">《NoSQL精粹》</a></h4><ul>
<li>豆瓣评分：8.2 【226 人评价】</li>
<li>推荐理由：书中全方位比较了关系型数据库与NoSQL数据库的异同；分别以Riak、MongoDB、Cassandra和Neo4J为代表，详细讲解了键值数据库、文档数据库、列族数据库和图数据库这4大类NoSQL数据库的优劣势、用法和适用场合；深入探讨了实现NoSQL数据库系统的各种细节，以及与关系型数据库的混用。</li>
</ul>
<h4 id="21、《Elasticsearch权威指南》中文版"><a href="#21、《Elasticsearch权威指南》中文版" class="headerlink" title="21、《Elasticsearch权威指南》中文版"></a>21、<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_who_should_read_this_book.html" target="_blank" rel="external">《Elasticsearch权威指南》中文版</a></h4><ul>
<li>推荐博客：<a href="https://elasticsearch.cn/" target="_blank" rel="external">Elastic 中文社区</a></li>
</ul>
<h4 id="22、-《ELK-Stack权威指南》"><a href="#22、-《ELK-Stack权威指南》" class="headerlink" title="22、 《ELK Stack权威指南》"></a>22、 <a href="https://item.jd.com/12073937.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=cf070e1e547047189a262416e312d14b" target="_blank" rel="external">《ELK Stack权威指南》</a></h4><ul>
<li>豆瓣评分：7.0 【10 人评价】</li>
<li>推荐理由：ELK stack是以Elasticsearch、Logstash、Kibana三个开源软件为主的数据处理工具链，是目前开源界最流行的实时数据分析解决方案，成为实时日志处理领域开源界的第一选择。</li>
</ul>
<h4 id="23、《ZooKeeper：分布式过程协同技术详解》"><a href="#23、《ZooKeeper：分布式过程协同技术详解》" class="headerlink" title="23、《ZooKeeper：分布式过程协同技术详解》"></a>23、<a href="https://item.jd.com/11880788.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=7825abc7598f4c799bc3663a803a7b51" target="_blank" rel="external">《ZooKeeper：分布式过程协同技术详解》</a></h4><ul>
<li>豆瓣评分：7.6 【49 人评价】</li>
<li>推荐理由：Zookeeper 入门</li>
<li>友情提示：翻译可能略显尴尬。</li>
</ul>
<h4 id="24、《从Paxos到Zookeeper分布式一致性原理与实践》"><a href="#24、《从Paxos到Zookeeper分布式一致性原理与实践》" class="headerlink" title="24、《从Paxos到Zookeeper分布式一致性原理与实践》"></a>24、<a href="https://item.jd.com/11622772.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=0c4d1fdbbc104d3bab65e19bdc3d0068" target="_blank" rel="external">《从Paxos到Zookeeper分布式一致性原理与实践》</a></h4><ul>
<li>豆瓣评分：8.1 【187 人评价】</li>
<li>推荐理由：从分布式一致性的理论出发，向读者简要介绍几种典型的分布式一致性协议，以及解决分布式一致性问题的思路，其中重点讲解了Paxos和ZAB协议。同时，本书深入介绍了分布式一致性问题的工业解决方案——ZooKeeper，并着重向读者展示这一分布式协调框架的使用方法、内部实现及运维技巧，旨在帮助读者全面了解ZooKeeper，并更好地使用和运维ZooKeeper。</li>
</ul>
<h4 id="25、《RabbitMQ实战：高效部署分布式消息队列》"><a href="#25、《RabbitMQ实战：高效部署分布式消息队列》" class="headerlink" title="25、《RabbitMQ实战：高效部署分布式消息队列》"></a>25、<a href="https://item.jd.com/11790530.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=70d94d35b9b84e169b999019b56098f8" target="_blank" rel="external">《RabbitMQ实战：高效部署分布式消息队列》</a></h4><ul>
<li>豆瓣评分：6.9 【47 人评价】</li>
<li>推荐理由：本书对RabbitMQ做了全面、翔实的讲解，体现了两位专家的真知灼见。本书首先介绍了有关MQ的历史，然后从基本的消息通信原理讲起，带领读者一路探索RabbitMQ的消息通信世界。</li>
<li>友情提示：本书 RabbitMQ 版本较旧。消息队列中间件 RabbitMQ、ActiveMQ、RocketMQ、Kafka 可以选择了解一下。</li>
</ul>
<h4 id="26、《Apache-Kafka源码剖析》"><a href="#26、《Apache-Kafka源码剖析》" class="headerlink" title="26、《Apache Kafka源码剖析》"></a>26、<a href="https://item.jd.com/12190152.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=755c2bdf8e794669a2e16d5725666ad8" target="_blank" rel="external">《Apache Kafka源码剖析》</a></h4><ul>
<li>豆瓣评分：7.8 【30 人评价】</li>
<li>推荐理由：以Kafka 0.10.0版本源码为基础，针对Kafka的架构设计到实现细节进行详细阐述。</li>
</ul>
<h4 id="27、《作业调度系统-Quartz-中文文档》"><a href="#27、《作业调度系统-Quartz-中文文档》" class="headerlink" title="27、《作业调度系统 Quartz 中文文档》"></a>27、<a href="https://xuzongbao.gitbooks.io/quartz/content/" target="_blank" rel="external">《作业调度系统 Quartz 中文文档》</a></h4><ul>
<li>豆瓣评分：暂无</li>
<li>推荐理由：暂时未找到大家评价不错的 Quartz 实战相关书籍，先推荐看中文翻译的官方文档。如果你有合适的推荐，烦请告诉我。</li>
<li>友情提示：国内开源项目 Elastic-Job，XXL-Job 都可以选择了解。</li>
</ul>
<h4 id="28、《微服务设计》"><a href="#28、《微服务设计》" class="headerlink" title="28、《微服务设计》"></a>28、<a href="https://item.jd.com/11917800.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=96dec37b8bef4983b1d7f730fd092931" target="_blank" rel="external">《微服务设计》</a></h4><ul>
<li>豆瓣评分：8.1 【273 人评价】</li>
<li>推荐理由：通过Netflix等多个业界案例，从微服务架构演进到原理剖析，全面讲解建模集成部署等微服务所涉及的各种主题，微服务架构与实践指南。</li>
</ul>
<h4 id="29、《Spring-Cloud微服务实战》"><a href="#29、《Spring-Cloud微服务实战》" class="headerlink" title="29、《Spring Cloud微服务实战》"></a>29、<a href="https://item.jd.com/12172344.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=02ed7b41b3d24b0f8f4671c44c49f3a9" target="_blank" rel="external">《Spring Cloud微服务实战》</a></h4><ul>
<li>豆瓣评分：7.9【20 人评价】</li>
<li>推荐理由：从时下流行的微服务架构概念出发，详细介绍了Spring Cloud针对微服务架构中几大核心要素的解决方案和基础组件。对于各个组件的介绍，主要以示例与源码结合的方式来帮助读者更好地理解这些组件的使用方法以及运行原理。同时，在介绍的过程中，还包含了作者在实践中所遇到的一些问题和解决思路，可供读者在实践中作为参考。</li>
<li>作者博客：<a href="http://blog.didispace.com/" target="_blank" rel="external">http://blog.didispace.com/</a></li>
<li>作者公众号：<a href="http://blog.didispace.com/css/images/weixin.jpg" target="_blank" rel="external">didispace</a></li>
</ul>
<h4 id="30、《亿级流量网站架构核心技术》"><a href="#30、《亿级流量网站架构核心技术》" class="headerlink" title="30、《亿级流量网站架构核心技术》"></a>30、<a href="https://item.jd.com/12153914.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=5834a1458c2c4f00952e3ce5ef631676" target="_blank" rel="external">《亿级流量网站架构核心技术》</a></h4><ul>
<li>豆瓣评分：7.6【57 人评价】</li>
<li>推荐理由：总结并梳理了亿级流量网站高可用和高并发原则，通过实例详细介绍了如何落地这些原则。本书分为四部分：概述、高可用原则、高并发原则、案例实战。</li>
<li>作者博客：<a href="http://jinnianshilongnian.iteye.com/" target="_blank" rel="external">开涛的博客</a></li>
<li>作者公众号：<a href="http://open.weixin.qq.com/qr/code/?username=kaitao-1234567" target="_blank" rel="external">开涛的博客</a></li>
</ul>
<h4 id="31、《架构即未来：现代企业可扩展的Web架构、流程和组织》"><a href="#31、《架构即未来：现代企业可扩展的Web架构、流程和组织》" class="headerlink" title="31、《架构即未来：现代企业可扩展的Web架构、流程和组织》"></a>31、<a href="https://item.jd.com/11905648.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=1dcd186310304ff9bb7f1ff3a6e9c487" target="_blank" rel="external">《架构即未来：现代企业可扩展的Web架构、流程和组织》</a></h4><ul>
<li>豆瓣评分：8.7【77 人评价】</li>
<li>推荐理由：任何一个持续成长的公司最终都需要解决系统、组织和流程的扩展性问题。本书汇聚了作者从eBay、VISA、Salesforce.com到Apple超过30年的丰富经验， 全面阐释了经过验证的信息技术扩展方法，对所需要掌握的产品和服务的平滑扩展做了详尽的论述，并在第1版的基础上更新了扩展的策略、技术和案例。</li>
</ul>
<h4 id="32、《Zabbix企业级分布式监控系统》"><a href="#32、《Zabbix企业级分布式监控系统》" class="headerlink" title="32、《Zabbix企业级分布式监控系统》"></a>32、<a href="https://item.jd.com/11522142.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=3bcf74726eb949658ae9bc3d82dc02b1" target="_blank" rel="external">《Zabbix企业级分布式监控系统》</a></h4><ul>
<li>豆瓣评分：7.6 【39 人评价】</li>
<li>推荐理由：本书从运维（OPS）角度对Zabbix的各项功能进行了详细介绍，以自动化运维视角为出发点，对Zabbix的安装和配置、自动化功能、监控告警、性能调优、Zabbix API、Zabbix协议、RPM安装包定制，结合SaltStack实现自动化配置管理等内容进行了全方位的深入剖析。</li>
</ul>
<h4 id="33、《第一本Docker书》"><a href="#33、《第一本Docker书》" class="headerlink" title="33、《第一本Docker书》"></a>33、<a href="https://item.jd.com/11909234.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=233f169f48ee4f84a23cabf57e72485a" target="_blank" rel="external">《第一本Docker书》</a></h4><ul>
<li>豆瓣评分：8.8 【63 人评价】</li>
<li>推荐理由：本书由Docker公司前服务与支持副总裁James Turnbull编写，是Docker开发指南。本书专注于Docker 1.9及以上版本，指导读者完成Docker的安装、部署、管理和扩展，带领读者经历从测试到生产的整个开发生命周期，让读者了解Docker适用于什么场景。</li>
<li>推荐博客：<a href="http://dockone.io/" target="_blank" rel="external">DockerOne</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=dockerone" target="_blank" rel="external">DockerOne</a></li>
</ul>
<h4 id="34、《Docker——容器与容器云》"><a href="#34、《Docker——容器与容器云》" class="headerlink" title="34、《Docker——容器与容器云》"></a>34、<a href="https://item.jd.com/12052716.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=f3215fb76db24ec4bf140c895fc0944d" target="_blank" rel="external">《Docker——容器与容器云》</a></h4><ul>
<li>豆瓣评分：8.5 【99 人评价】</li>
<li>推荐理由：本书根据Docker 1.10版和Kubernetes 1.2版对第1版进行了全面更新，从实践者的角度出发，以Docker和Kubernetes为重点，沿着“基本用法介绍”到“核心原理解读”到“高级实践技巧”的思路，一本书讲透当前主流的容器和容器云技术，有助于读者在实际场景中利用Docker容器和容器云解决问题并启发新的思考。</li>
</ul>
<h4 id="35、《Kubernetes权威指南》"><a href="#35、《Kubernetes权威指南》" class="headerlink" title="35、《Kubernetes权威指南》"></a>35、<a href="https://item.jd.com/11980349.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=2935d4803df24414b35d41ab0b7f5626" target="_blank" rel="external">《Kubernetes权威指南》</a></h4><p>豆瓣评分：7.7【15 人评价】<br>推荐理由：Kubernetes重磅开山之作，针对Kubernetes v1.6和本书第2版进行大篇幅内容更新，全方位完美覆盖，可借鉴性极强。<br>推荐博客：<a href="https://www.kubernetes.org.cn/" target="_blank" rel="external">Kubernetes 中文社区</a><br>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=kubernetescn" target="_blank" rel="external">K8S 技术社区</a></p>
<h4 id="36、《用Mesos框架构建分布式应用》"><a href="#36、《用Mesos框架构建分布式应用》" class="headerlink" title="36、《用Mesos框架构建分布式应用》"></a>36、<a href="https://item.jd.com/12043093.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=31a6a0687d704012a93019c79b845a89" target="_blank" rel="external">《用Mesos框架构建分布式应用》</a></h4><ul>
<li>豆瓣评分：暂无评分</li>
<li>推荐理由：超级薄的一本书，看完之后，你会对 Mesos 会非常了解，并且极大可能性学会如何基于 Mesos 框架构建分布式应用。</li>
</ul>
<h4 id="37、《数据结构与算法分析：Java语言描述》"><a href="#37、《数据结构与算法分析：Java语言描述》" class="headerlink" title="37、《数据结构与算法分析：Java语言描述》"></a>37、<a href="https://item.jd.com/11886254.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=acc1fd554cdf4b2d9872a745174b005f" target="_blank" rel="external">《数据结构与算法分析：Java语言描述》</a></h4><ul>
<li>豆瓣评分：8.3【183 人评价】</li>
<li>推荐理由：本书是国外数据结构与算法分析方面的经典教材，使用卓越的Java编程语言作为实现工具讨论了数据结构（组织大量数据的方法）和算法分析（对算法运行时间的估计）。</li>
<li>友情提示：算法方法还有其他很好的书籍，例如《算法导论》、《算法（第四版）》，也可以选择阅读。重要的是，保持耐心，享受这个痛并快乐的过程。</li>
</ul>
<h4 id="38、《Head-First-设计模式》"><a href="#38、《Head-First-设计模式》" class="headerlink" title="38、《Head First 设计模式》"></a>38、<a href="https://item.jd.com/10100236.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=6a61dd328ecd43bc906a209498de467d" target="_blank" rel="external">《Head First 设计模式》</a></h4><ul>
<li>豆瓣评分：9.2【2394 人评价】</li>
<li>推荐理由：《Head First设计模式》(中文版)共有14章，每章都介绍了几个设计模式，完整地涵盖了四人组版本全部23个设计模式。</li>
</ul>
<h4 id="39、《HTTP权威指南》"><a href="#39、《HTTP权威指南》" class="headerlink" title="39、《HTTP权威指南》"></a>39、<a href="https://item.jd.com/11056556.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=415194b6c8a64a2abb9a51b055efb1a2" target="_blank" rel="external">《HTTP权威指南》</a></h4><ul>
<li>豆瓣评分：8.7 【1126 人评价】</li>
<li>推荐理由：本书尝试着将HTTP中一些互相关联且常被误解的规则梳理清楚，并编写了一系列基于各种主题的章节，对HTTP各方面的特性进行了介绍。纵观全书，对HTTP“为什么”这样做进行了详细的解释，而不仅仅停留在它是“怎么做”的。</li>
</ul>
<h4 id="40、《TCP-IP详解-系列》"><a href="#40、《TCP-IP详解-系列》" class="headerlink" title="40、《TCP/IP详解 系列》"></a>40、<a href="https://item.jd.com/10057317.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=21aa132de02443148ea06c4c255147e2" target="_blank" rel="external">《TCP/IP详解 系列》</a></h4><ul>
<li>豆瓣评分：9.3 【1883 人评价】</li>
<li>推荐理由：完整而详细的TCP/IP协议指南。针对任何希望理解TCP/IP协议是如何实现的读者设计。</li>
</ul>
<h4 id="41、《Linux内核设计与实现》"><a href="#41、《Linux内核设计与实现》" class="headerlink" title="41、《Linux内核设计与实现》"></a>41、<a href="https://item.jd.com/10664953.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=904940b94eff4b6bb6a19c155dda0fff" target="_blank" rel="external">《Linux内核设计与实现》</a></h4><ul>
<li>豆瓣评分：8.7【286 人评价】</li>
<li>详细描述了Linux内核的主要子系统和特点，包括Linux内核的设计、实现和接口。从理论到实践涵盖了Linux内核的方方面面，可以满足读者的各种兴趣和需求。</li>
<li>友情提示：Linux内核方面不乏好书。本书篇幅方面较为合适。</li>
</ul>
<h4 id="42-《剑指Offer：名企面试官精讲典型编程题》"><a href="#42-《剑指Offer：名企面试官精讲典型编程题》" class="headerlink" title="42 《剑指Offer：名企面试官精讲典型编程题》"></a>42 <a href="https://item.jd.com/12163054.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=050d308787134c908c3ade06a205766f" target="_blank" rel="external">《剑指Offer：名企面试官精讲典型编程题》</a></h4><ul>
<li>豆瓣评分：8.5【508 人评价】</li>
<li>推荐理由：剖析了80个典型的编程面试题，系统整理基础知识、代码质量、解题思路、优化效率和综合能力这5个面试要点。</li>
<li>推荐网站：<a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网-专业IT笔试面试备考平台</a></li>
</ul>
<h4 id="43-《程序员代码面试指南：IT名企算法与数据结构题目最优解》"><a href="#43-《程序员代码面试指南：IT名企算法与数据结构题目最优解》" class="headerlink" title="43 《程序员代码面试指南：IT名企算法与数据结构题目最优解》"></a>43 <a href="https://item.jd.com/11770838.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=456c96ef91064b0bb1f107dd0bea036c" target="_blank" rel="external">《程序员代码面试指南：IT名企算法与数据结构题目最优解》</a></h4><ul>
<li>豆瓣评分：8.4【32 人评价】</li>
<li>推荐理由：程序员刷题宝典！编程能力提升秘笈！精选IT名企真实代码面试题，全面覆盖算法与数据结构题型！</li>
</ul>
<h4 id="44-《领域驱动设计》"><a href="#44-《领域驱动设计》" class="headerlink" title="44 《领域驱动设计》"></a>44 <a href="https://item.jd.com/11961038.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=e263bb9daa91485295956fe59455107c" target="_blank" rel="external">《领域驱动设计》</a></h4><ul>
<li>豆瓣评分：9.0【115 人评价】</li>
<li>推荐理由：是领域驱动设计方面的经典之作。全书围绕着设计和开发实践，结合若干真实的项目案例，向读者阐述如何在真实的软件开发中应用领域驱动设计。</li>
<li>友情提示：理论的书籍往往较为枯燥，勤修内功是必须走的路。</li>
</ul>
<h4 id="45、《火球-UML大战需求分析》"><a href="#45、《火球-UML大战需求分析》" class="headerlink" title="45、《火球:UML大战需求分析》"></a>45、<a href="https://item.jd.com/10932134.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=da62a9177e3145c79bcbc36abbdc86c6" target="_blank" rel="external">《火球:UML大战需求分析》</a></h4><ul>
<li>豆瓣评分：7.9【115 人评价】</li>
<li>推荐理由：融合UML、非UML、需求分析及需求管理等各方面的知识，帮助读者解决UML业界问题、需求分析及需求管理问题。</li>
<li>友情提示：可能不是最好的 UML 书籍，但从是否能够阅读理解完的角度来说，本书可能是相对合适的。有兴趣的同学也可以看看《UML和模式应用》、《大象：Thinking in UML》。</li>
</ul>
<h3 id="ToDO-List"><a href="#ToDO-List" class="headerlink" title="ToDO List"></a>ToDO List</h3><h4 id="待推荐书籍"><a href="#待推荐书籍" class="headerlink" title="待推荐书籍"></a>待推荐书籍</h4><ul>
<li>TODO 《大数据日知录 架构与算法》</li>
<li>TODO 《大型网站系统与Java中间件实践》</li>
<li>TODO 《HotSpot实战》</li>
<li>TODO 《垃圾回收的算法与实现》</li>
<li>TODO 《彩色UML建模》</li>
<li>TODO 《七周七并发模型》</li>
</ul>
<h4 id="技术领域归纳"><a href="#技术领域归纳" class="headerlink" title="技术领域归纳"></a>技术领域归纳</h4><ul>
<li>[] Go</li>
<li>[] Node</li>
<li>[] Linux内核</li>
<li>[] UML</li>
<li>[] Tomcat</li>
<li>[x] SpringCloud</li>
<li>[x] Java基础</li>
<li>[] Netty</li>
<li>[x] Mybatis</li>
<li>[x] 数据库</li>
<li>[] MongoDB</li>
<li>[x] Maven</li>
<li>[] DevOps</li>
<li>[] 运维</li>
<li>[] 面试</li>
<li>[] 消息队列</li>
<li>[x] 设计模式</li>
<li>[] 算法与数据结构</li>
<li>[] Zookeeper</li>
<li>[x] SpringBoot</li>
<li>[] Nginx</li>
<li>[] 定时任务</li>
<li>[] 搜索引擎</li>
<li>[x] 协议</li>
<li>[x] 单元测试</li>
<li>[x] 重构</li>
<li>[] 日志</li>
<li>[] Docker</li>
<li>[] 监控</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.iocoder.cn/Architecture/books-recommended/" target="_blank" rel="external">书单整理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;书单能在你想要打怪升级的路上给予些许帮助，建议先收藏本书单，认真啃完一本再买下一本，扎实走完每一步，部分书单关联博客和微信公众号，书单没有进
    
    </summary>
    
      <category term="书单" scheme="http://jianwl.com/categories/%E4%B9%A6%E5%8D%95/"/>
    
    
      <category term="书单" scheme="http://jianwl.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Elasticsearch</title>
    <link href="http://jianwl.com/2017/10/25/SpringBoot%E6%95%B4%E5%90%88Elasticsearch/"/>
    <id>http://jianwl.com/2017/10/25/SpringBoot整合Elasticsearch/</id>
    <published>2017-10-25T04:40:07.000Z</published>
    <updated>2017-10-25T10:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一年以前曾接触过ES，但后续因为没有相关的业务需求，荒废了这一块的进修；近期因朋友问到相关问题，故重新拾起。之前学的基本忘的差不多了，索性从头学起；这一节，主要来学习如何通过SpringBoot来整合ES，从环境的搭建、到源码的实战来学习ES；</p>
<h3 id="1、本地ES搭建"><a href="#1、本地ES搭建" class="headerlink" title="1、本地ES搭建"></a>1、本地ES搭建</h3><p>1）<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-4" target="_blank" rel="external">官方ES 2.4.4 版本</a></p>
<p>为什么不用最新版版本呢？因为Spring Data Elasticsearch的版本目前只支持5.00以下的版本，详情可以看这<a href="https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix" target="_blank" rel="external">版本对应关系</a>。</p>
<p>2）解压 具体可以看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html" target="_blank" rel="external">ES安装官方文档</a>。</p>
<p>3）修改 ${ES_HOME}/config/elasticsearch.yml文件,设置cluster.name;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cluster.name: frank_cluster</div></pre></td></tr></table></figure>
<p>4) 启动ES服务</p>
<h3 id="2、SpringBoot整合ES实战"><a href="#2、SpringBoot整合ES实战" class="headerlink" title="2、SpringBoot整合ES实战"></a>2、SpringBoot整合ES实战</h3><h4 id="1-pom-xml-添加依赖"><a href="#1-pom-xml-添加依赖" class="headerlink" title="1) pom.xml 添加依赖"></a>1) pom.xml 添加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.39&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<h4 id="2）创建数据模型User"><a href="#2）创建数据模型User" class="headerlink" title="2）创建数据模型User"></a>2）创建数据模型User</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@Document(indexName = &quot;frank&quot;, type = &quot;user&quot;)</div><div class="line">public class User &#123;</div><div class="line">    @Id</div><div class="line">    private Long id;</div><div class="line"></div><div class="line">    private String userName;</div><div class="line"></div><div class="line">    private String userPhone;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(Long id, String userName, String userPhone) &#123;</div><div class="line">        this.id = id;</div><div class="line">        this.userName = userName;</div><div class="line">        this.userPhone = userPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Long getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(Long id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUserName() &#123;</div><div class="line">        return userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUserName(String userName) &#123;</div><div class="line">        this.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUserPhone() &#123;</div><div class="line">        return userPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUserPhone(String userPhone) &#123;</div><div class="line">        this.userPhone = userPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;User&#123;&quot; +</div><div class="line">                &quot;id=&quot; + id +</div><div class="line">                &quot;, userName=&apos;&quot; + userName + &apos;\&apos;&apos; +</div><div class="line">                &quot;, userPhone=&apos;&quot; + userPhone + &apos;\&apos;&apos; +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Dao层"><a href="#3-Dao层" class="headerlink" title="3) Dao层"></a>3) Dao层</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public interface UserRepository extends ElasticsearchRepository&lt;User,Long&gt; &#123;</div><div class="line">    /**</div><div class="line">     * 根据用户名，获取用户分页列表</div><div class="line">     * @param userName 用户名</div><div class="line">     * @param pageable 分页模型</div><div class="line">     * @return 分页用户列表</div><div class="line">     */</div><div class="line">    Page&lt;User&gt; findByUserName(String userName, Pageable pageable);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据用户手机号，获取用户列表</div><div class="line">     * @param userPhone 用户手机</div><div class="line">     * @return  用户列表</div><div class="line">     */</div><div class="line">    List&lt;User&gt; findByUserPhone(String userPhone);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Service层-接口"><a href="#4-Service层-接口" class="headerlink" title="4) Service层 - 接口"></a>4) Service层 - 接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public interface UserService &#123;</div><div class="line">    User save(User user);</div><div class="line"></div><div class="line">    void deleteByUserId(Long userId);</div><div class="line"></div><div class="line">    User findByUserId(Long userId);</div><div class="line"></div><div class="line">    Iterable&lt;User&gt; findAll();</div><div class="line"></div><div class="line">    Page&lt;User&gt; findByUserName(String userName, PageRequest pageRequest);</div><div class="line"></div><div class="line">    List&lt;User&gt; findByUserPhone(String userPhone);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5）Service层-实现类"><a href="#5）Service层-实现类" class="headerlink" title="5）Service层 - 实现类"></a>5）Service层 - 实现类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public class UserServiceImpl implements UserService &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private UserRepository userRepository;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public User save(User user) &#123;</div><div class="line">        return userRepository.save(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void deleteByUserId(Long userId) &#123;</div><div class="line">        userRepository.delete(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public User findByUserId(Long userId) &#123;</div><div class="line">        return userRepository.findOne(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Iterable&lt;User&gt; findAll() &#123;</div><div class="line">        return userRepository.findAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Page&lt;User&gt; findByUserName(String userName, PageRequest pageRequest) &#123;</div><div class="line">        return userRepository.findByUserName(userName,pageRequest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;User&gt; findByUserPhone(String userPhone) &#123;</div><div class="line">        return userRepository.findByUserPhone(userPhone);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-入口"><a href="#6-入口" class="headerlink" title="6) 入口"></a>6) 入口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">public class Chapter411Application implements CommandLineRunner &#123;</div><div class="line">	@Autowired</div><div class="line">	private UserService userService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(String... args) throws Exception &#123;</div><div class="line">		System.out.println(&quot;&lt;&lt;&lt;&lt;&lt;&lt; Elasticsearch 初始化数据开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;);</div><div class="line">		userService.save(new User(1L,&quot;张三&quot;,&quot;18817394122&quot;));</div><div class="line">		userService.save(new User(2L,&quot;李四&quot;,&quot;18817394132&quot;));</div><div class="line">		userService.save(new User(3L,&quot;王二麻子&quot;,&quot;18817394142&quot;));</div><div class="line">		userService.save(new User(4L,&quot;赵六子&quot;,&quot;18817394152&quot;));</div><div class="line">		System.out.println(&quot;&lt;&lt;&lt;&lt;&lt;&lt; Elasticsearch 初始化数据结束 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(Chapter411Application.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-修改配置文件application-properties"><a href="#7-修改配置文件application-properties" class="headerlink" title="7) 修改配置文件application.properties"></a>7) 修改配置文件application.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.data.elasticsearch.cluster-name=frank_cluster</div><div class="line">spring.data.elasticsearch.cluster-nodes=localhost:9300</div></pre></td></tr></table></figure>
<h4 id="8-测试类"><a href="#8-测试类" class="headerlink" title="8) 测试类"></a>8) 测试类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class Chapter410ApplicationTests &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private UserService userService;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_001()&#123;</div><div class="line">		List&lt;User&gt; userList = new ArrayList&lt;&gt;();</div><div class="line">		Iterator&lt;User&gt; iterator = userService.findAll().iterator();</div><div class="line">		while (iterator.hasNext())&#123;</div><div class="line">			userList.add(iterator.next());</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;userList =&gt; &quot; + JSON.toJSONString(userList));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_002()&#123;</div><div class="line">		Page&lt;User&gt; userPage = userService.findByUserName(&quot;张三&quot;,new PageRequest(0,10));</div><div class="line">		System.out.println(&quot;element nums =&gt; &quot; + userPage.getTotalElements());</div><div class="line">		System.out.println(&quot;user page =&gt; &quot; + JSON.toJSONString(userPage.getContent()));</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_003()&#123;</div><div class="line">		System.out.println(JSON.toJSONString(userService.findByUserId(1L)));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_004()&#123;</div><div class="line">		System.out.println(JSON.toJSONString(userService.findByUserPhone(&quot;18817394122&quot;)));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_005()&#123;</div><div class="line">		userService.deleteByUserId(1L);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、遇到的坑"><a href="#3、遇到的坑" class="headerlink" title="3、遇到的坑"></a>3、遇到的坑</h3><p>1、 由于SpringDataElasticsearch只支持5.0以下的版本，而本地装了ES5.6版本，导致报错；具体错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Caused by: org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;localhost&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure>
<p>解决办法：将本地ES由5.6版本降到2.46版本即可；</p>
<p>2、单机启动时，当往ES存入数据时，因为不存在备份分片，导致系统健康值为黄色；</p>
<p>解决办法：再次启动ES服务即可；</p>
<h3 id="4、本项目源码"><a href="#4、本项目源码" class="headerlink" title="4、本项目源码"></a>4、本项目源码</h3><p><a href="https://github.com/frank-jian/SpringBootDemo/tree/master/chapter4-11" target="_blank" rel="external">SpringBoot整合ES源码</a></p>
<h3 id="5、参考资料"><a href="#5、参考资料" class="headerlink" title="5、参考资料"></a>5、参考资料</h3><p>1、<a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-data-elasticsearch" target="_blank" rel="external">spring-boot-sample-data-elasticsearch</a></p>
<p>2、<a href="http://www.mkyong.com/spring-boot/spring-boot-spring-data-elasticsearch-example/" target="_blank" rel="external">Spring Boot + Spring Data + Elasticsearch example</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一年以前曾接触过ES，但后续因为没有相关的业务需求，荒废了这一块的进修；近期因朋友问到相关问题，故重新拾起。之前学的基本忘的差不多了，索性从
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://jianwl.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://jianwl.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ShadowsocksX在配置文件设置server列表</title>
    <link href="http://jianwl.com/2017/10/21/ShadowsocksX%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AEserver%E5%88%97%E8%A1%A8/"/>
    <id>http://jianwl.com/2017/10/21/ShadowsocksX在配置文件设置server列表/</id>
    <published>2017-10-21T08:44:56.000Z</published>
    <updated>2017-10-21T09:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Mac上使用ShadowsocksX客户端，之前都是一台一台服务器手动添加的，但是服务器太多就想能不能通过配置文件来设置。接下来我们来演示下，在Mac下如何通过配置文件来设置服务列表。</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><h4 id="1、-Shadowsocks客户端在Mac下的配置文件的位置"><a href="#1、-Shadowsocks客户端在Mac下的配置文件的位置" class="headerlink" title="1、 Shadowsocks客户端在Mac下的配置文件的位置"></a>1、 Shadowsocks客户端在Mac下的配置文件的位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Preferences/clowwindy.ShadowsocksX.plist</div></pre></td></tr></table></figure>
<h4 id="2、plist文件是什么"><a href="#2、plist文件是什么" class="headerlink" title="2、plist文件是什么?"></a>2、plist文件是什么?</h4><blockquote>
<p>在OS X的Cocoa，NeXTSTEP和GNUstep编程框架中，属性列表（Property List）文件是一种用来存储序列化后的对象的文件。属性列表文件的文件扩展名为.plist，因此通常被称为plist文件。Plist文件通常用于储存用户设置，也可以用于存储捆绑的信息。——Wikipedia</p>
</blockquote>
<h4 id="3、将plist转成可读的xml"><a href="#3、将plist转成可读的xml" class="headerlink" title="3、将plist转成可读的xml"></a>3、将plist转成可读的xml</h4><p><strong>注意：</strong> 在修改plist <strong>前请务必备份</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plutil -convert xml1 ~/Library/Preferences/clowwindy.ShadowsocksX.plist -o xxx.xml</div></pre></td></tr></table></figure>
<p>在<key>config</key>字段下的<data>字段就是保存了现有服务器信息的字段，整个复制出来，base63解码(OSX的base64工具在从stdin读入数据的时候有长度限制，建议先保存到文件再读入)</data></p>
<h4 id="4、base64解码服务列表信息"><a href="#4、base64解码服务列表信息" class="headerlink" title="4、base64解码服务列表信息"></a>4、base64解码服务列表信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">base64 -D -i /path/to/file -o -</div></pre></td></tr></table></figure>
<p>-D 表示解码，-i 表示读入的文件路径，-o – 表示输出解码结果到 stdout，也可以保存到新文件方便编辑。</p>
<p>修改后base64编码填回xml(不加-D选项即是编码)</p>
<h4 id="5、将xml转回plist"><a href="#5、将xml转回plist" class="headerlink" title="5、将xml转回plist"></a>5、将xml转回plist</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plutil -convert binary1 xxx.xml -o yyy.plist</div></pre></td></tr></table></figure>
<h4 id="6、重新载入plist"><a href="#6、重新载入plist" class="headerlink" title="6、重新载入plist"></a>6、重新载入plist</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults import clowwindy.ShadowsocksX /path/to/yyy.plist</div></pre></td></tr></table></figure>
<h4 id="7、重启shadowsocksX客户端，即可看到新配置已经载入"><a href="#7、重启shadowsocksX客户端，即可看到新配置已经载入" class="headerlink" title="7、重启shadowsocksX客户端，即可看到新配置已经载入"></a>7、重启shadowsocksX客户端，即可看到新配置已经载入</h4><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.starduster.me/2016/04/02/mac-shadowsocksx-config-file-to-os-x-user-default-plist/" target="_blank" rel="external">从 ShadowsocksX 客户端配置文件说到 OS X user default plist</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Mac上使用ShadowsocksX客户端，之前都是一台一台服务器手动添加的，但是服务器太多就想能不能通过配置文件来设置。接下来我们来演示
    
    </summary>
    
      <category term="Mac" scheme="http://jianwl.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://jianwl.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2配置代理</title>
    <link href="http://jianwl.com/2017/10/14/iTerm2%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://jianwl.com/2017/10/14/iTerm2配置代理/</id>
    <published>2017-10-14T07:45:50.000Z</published>
    <updated>2017-10-14T07:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Shadowsocks使用全局代理模式的前提下，iTerm2下载却不走代理，这一节我们将来解决这个问题；</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="Socks-proxy"><a href="#Socks-proxy" class="headerlink" title="Socks proxy"></a>Socks proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export http_proxy=sock5://127.0.0.1:1080</div></pre></td></tr></table></figure>
<h4 id="Http-proxy"><a href="#Http-proxy" class="headerlink" title="Http proxy"></a>Http proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http_proxy=http://localhost:8035/</div></pre></td></tr></table></figure>
<h4 id="Https-proxy"><a href="#Https-proxy" class="headerlink" title="Https proxy"></a>Https proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https_proxy=http://localhost:8035/</div></pre></td></tr></table></figure>
<h3 id="验证iTerm2走了代理"><a href="#验证iTerm2走了代理" class="headerlink" title="验证iTerm2走了代理"></a>验证iTerm2走了代理</h3><h4 id="1-Shadowsocks选择全局模式"><a href="#1-Shadowsocks选择全局模式" class="headerlink" title="1. Shadowsocks选择全局模式"></a>1. Shadowsocks选择全局模式</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/94978227.jpg" alt=""></p>
<h4 id="2-浏览器访问IP查询-查看当前网络IP"><a href="#2-浏览器访问IP查询-查看当前网络IP" class="headerlink" title="2. 浏览器访问IP查询,查看当前网络IP"></a>2. 浏览器访问<a href="http://ip.cn/" target="_blank" rel="external">IP查询</a>,查看当前网络IP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/16537485.jpg" alt=""></p>
<h4 id="3-查看iTerm2访问的网络IP"><a href="#3-查看iTerm2访问的网络IP" class="headerlink" title="3. 查看iTerm2访问的网络IP"></a>3. 查看iTerm2访问的网络IP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/55981155.jpg" alt=""></p>
<h4 id="4-由此可见iTerm2已经走代理了"><a href="#4-由此可见iTerm2已经走代理了" class="headerlink" title="4. 由此可见iTerm2已经走代理了"></a>4. 由此可见iTerm2已经走代理了</h4><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://skyacer.github.io/2016/03/24/iTerm2-config-proxy/" target="_blank" rel="external">iTerm2 configure proxy</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Shadowsocks使用全局代理模式的前提下，iTerm2下载却不走代理，这一节我们将来解决这个问题；&lt;/p&gt;
&lt;h3 id=&quot;解决方案
    
    </summary>
    
      <category term="Mac" scheme="http://jianwl.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://jianwl.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java常用加密算法简述</title>
    <link href="http://jianwl.com/2017/10/11/Java%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E8%BF%B0/"/>
    <id>http://jianwl.com/2017/10/11/Java常用加密算法简述/</id>
    <published>2017-10-11T02:02:24.000Z</published>
    <updated>2017-10-11T08:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在开发应用过程中，客户端与服务端经常需要进行数据传输，涉及到重要隐私安全信息时，开发者自然会想到对其进行加密，即使传输过程中被”有心人”截取，也不会将信息泄露。对于加密算法，相信很多开发者都有了解，比如MD5加密、BASE64加密，SHA-1加密、DES加密、AES加密、RSA加密等等。在这里主要总结一下常用的加密算法。</p>
<h3 id="1-MD5加密"><a href="#1-MD5加密" class="headerlink" title="1. MD5加密"></a>1. MD5加密</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><p>MD5的全称是<code>Message-Digest Algorithm 5</code>(信息-摘要算法)，在90年代初由<code>MIT Laboratory for Computer Science 和 RSA Data Security Inc</code>的<code>Ronald L.Riverst</code>开发出来，经MD2、MD3和MD4发展而来。</p>
<p>MD5用于确保信息传输完整一致，是计算机广泛使用的杂凑算法之一,MD5的作用是让大容量信息在数字签名软件签署私人秘钥前被压缩成一种保密的格式(即把一个任意长度的字节串变成一定长的十六进制数字串)。</p>
<h4 id="1-2-算法原理"><a href="#1-2-算法原理" class="headerlink" title="1.2 算法原理"></a>1.2 算法原理</h4><p>MD5以512位分组来处理输入信息，且每一分组又被划分为32位子分组，经过了一系列的处理后，算法的输出由4个32位分组组成，将4个32位分组级联后将生成一个128位散列值。</p>
<h4 id="1-3-MD5的特点"><a href="#1-3-MD5的特点" class="headerlink" title="1.3 MD5的特点"></a>1.3 MD5的特点</h4><ol>
<li>压缩性: 任意长度的数据，算出的MD5值长度都是固定的；</li>
<li>容易计算: 从原数据计算出MD5很容易</li>
<li>抗修改性: 对原始数据进行任何改动，哪怕只修改一个字节，所得到的MD5值都有很大的区别。</li>
<li>弱抗碰撞: 已知原数据和其MD5值，想找到一个相同的MD5值的数据是非常困难的；</li>
<li>强抗碰撞: 想找到两个不同的数据，使它们具有相同的MD5值是非常困难的。</li>
</ol>
<h4 id="1-4-JAVA中MD5的实现"><a href="#1-4-JAVA中MD5的实现" class="headerlink" title="1.4 JAVA中MD5的实现"></a>1.4 JAVA中MD5的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class MD5Utils &#123;</div><div class="line">    private static final String MD5_KEY = &quot;MD5&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * MD5加密 生成32位MD5码</div><div class="line">     * @param content 待加密字符串</div><div class="line">     * @return 返回32位MD5码</div><div class="line">     * @throws UnsupportedEncodingException</div><div class="line">     */</div><div class="line">    public static String md5Encode(String content) throws UnsupportedEncodingException &#123;</div><div class="line">        MessageDigest md5 = null;</div><div class="line">        try&#123;</div><div class="line">            md5 = MessageDigest.getInstance(MD5_KEY);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        byte[] byteArray = content.getBytes(&quot;UTF-8&quot;);</div><div class="line">        byte[] md5Bytes = md5.digest(byteArray);</div><div class="line">        StringBuffer hexValue = new StringBuffer();</div><div class="line">        for (int i = 0; i &lt; md5Bytes.length; i ++) &#123;</div><div class="line">            int val = ((int) md5Bytes[i]) &amp; 0xff;</div><div class="line">            if(val &lt; 16) &#123;</div><div class="line">                hexValue.append(0);</div><div class="line">            &#125;</div><div class="line">            hexValue.append(Integer.toHexString(val));</div><div class="line">        &#125;</div><div class="line">        return hexValue.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        String content = &quot;This is a MD5 Test&quot;;</div><div class="line">        String hash = md5Encode(content);</div><div class="line">        System.out.println(&quot;original: &quot; + content);</div><div class="line">        System.out.println(&quot;md5 after: &quot; + hash + &quot; length =&gt; &quot; + hash.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-SHA加密"><a href="#2-SHA加密" class="headerlink" title="2. SHA加密"></a>2. SHA加密</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h4><p>SHA是一种数据加密算法，其算法思想是，接收一段明文，然后以一种不可逆的方式将它转换成一段密文，也可以简单的理解为取出一串输入码，并把他们转化为长度较短、位数固定的输出序列即散列值。</p>
<h4 id="2-2-SHA-1和MD5的比较"><a href="#2-2-SHA-1和MD5的比较" class="headerlink" title="2.2 SHA-1和MD5的比较"></a>2.2 SHA-1和MD5的比较</h4><p>因为两者均由MD4导出，SHA-1和MD5彼此很相似，他们的强度和其他特性也相识，但有以下几点不同：</p>
<ol>
<li>对强行攻击的安全性: 最显著和最重要的区别是SHA-1摘要比MD5摘要长32位，使用强行技术，产生任何一个报文, 对MD5是2^128数据级的操作，对SHA-1是2^160数量级的操作，这样SHA-1对强行攻击有更大的强度。</li>
<li>对密码分析的安全性：由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击。</li>
<li>速度: 在相同的硬件上，SHA-A的运行速度比MD慢。</li>
</ol>
<h4 id="2-3-JAVA中SHA实现"><a href="#2-3-JAVA中SHA实现" class="headerlink" title="2.3 JAVA中SHA实现"></a>2.3 JAVA中SHA实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class SHAUtils &#123;</div><div class="line">    private static final String SHA_KEY = &quot;SHA&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * MD5加密 生成32位MD5码</div><div class="line">     * @param content 待加密字符串</div><div class="line">     * @return 返回32位MD5码</div><div class="line">     * @throws UnsupportedEncodingException</div><div class="line">     */</div><div class="line">    public static String shaEncode(String content) throws UnsupportedEncodingException &#123;</div><div class="line">        MessageDigest sha = null;</div><div class="line">        try&#123;</div><div class="line">            sha = MessageDigest.getInstance(SHA_KEY);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        byte[] byteArray = content.getBytes(&quot;UTF-8&quot;);</div><div class="line">        byte[] shaBytes = sha.digest(byteArray);</div><div class="line">        StringBuffer hexValue = new StringBuffer();</div><div class="line">        for (int i = 0; i &lt; shaBytes.length; i ++) &#123;</div><div class="line">            int val = ((int) shaBytes[i]) &amp; 0xff;</div><div class="line">            if(val &lt; 16) &#123;</div><div class="line">                hexValue.append(0);</div><div class="line">            &#125;</div><div class="line">            hexValue.append(Integer.toHexString(val));</div><div class="line">        &#125;</div><div class="line">        return hexValue.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        String content = &quot;This is a SHA Test&quot;;</div><div class="line">        String hash = shaEncode(content);</div><div class="line">        System.out.println(&quot;original: &quot; + content);</div><div class="line">        System.out.println(&quot;sha after: &quot; + hash + &quot; length =&gt; &quot; + hash.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-对称加密与非对称加密"><a href="#3-对称加密与非对称加密" class="headerlink" title="3. 对称加密与非对称加密"></a>3. 对称加密与非对称加密</h3><h4 id="3-1-对称加密算法"><a href="#3-1-对称加密算法" class="headerlink" title="3.1 对称加密算法"></a>3.1 对称加密算法</h4><blockquote>
<p>甲方选择某一种加密规则，对信息进行加密；</p>
<p>乙方使用同一种规则，对信息进行解密。</p>
</blockquote>
<p>特点: 对称加密算法的特定是算法公开、计算量下、加密速度快、加密效率高。</p>
<p>不足: 甲方必须把加密规则告诉乙方，否则无法解密。保存和传递秘钥，就成了最头疼的问题</p>
<p>常见的对称加密算法: AES DES 3DES IDEA RC4 RC5 RC6 等</p>
<h4 id="3-2-非对称加密算法"><a href="#3-2-非对称加密算法" class="headerlink" title="3.2 非对称加密算法"></a>3.2 非对称加密算法</h4><blockquote>
<p>乙方生成两把密钥(公钥和私钥)，公钥是公开的，任何人都可以获得，私钥则是保密的。</p>
<p>甲方获取乙方的公钥，然后用它对信息加密</p>
<p>乙方得到加密后的信息，用私钥解密</p>
</blockquote>
<p>特点: 公钥和私钥是一对，如果公开密钥对数据进行加密，只有对应的私钥才能解密；如果用私钥进行加密，只有对应的公钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫非对称加密算法。</p>
<h3 id="4-AES算法和RSA算法"><a href="#4-AES算法和RSA算法" class="headerlink" title="4. AES算法和RSA算法"></a>4. AES算法和RSA算法</h3><h4 id="4-1-AES算法"><a href="#4-1-AES算法" class="headerlink" title="4.1 AES算法"></a>4.1 AES算法</h4><p>高级加密标准(Advanced Encryption Standard,缩写:AES),在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。</p>
<h4 id="4-2-RSA算法"><a href="#4-2-RSA算法" class="headerlink" title="4.2 RSA算法"></a>4.2 RSA算法</h4><p>1977年，三位科学家<code>Rivest</code>、<code>Shamir</code>和<code>Adleman</code>设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，加做RSA算法。RSA属于非对称加密算法。</p>
<h4 id="4-3-两种算法使用的场景"><a href="#4-3-两种算法使用的场景" class="headerlink" title="4.3 两种算法使用的场景"></a>4.3 两种算法使用的场景</h4><ol>
<li>客户端传输重要信息给服务端，服务端返回的信息不需加密的情况，如绑定银行卡的时候，需要传递用户的银行卡号、手机号等重要信息，客户端这边就需要对这些重要信息进行加密，使用RSA公钥加密、服务端使用RSA解密，然后返回一些普通信息，比如状态码code,提示信息msg等</li>
<li>客户端传输重要的信息给服务端，服务端返回的信息需加密,如传递用户名和密码等资料，需要进行加密，服务端验证信息后，返回令牌token需要进行加密，客户端解密后保存。</li>
</ol>
<h4 id="4-4-JAVA中使用RSA加密和解密"><a href="#4-4-JAVA中使用RSA加密和解密" class="headerlink" title="4.4 JAVA中使用RSA加密和解密"></a>4.4 JAVA中使用RSA加密和解密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">import org.apache.commons.codec.binary.Base64;</div><div class="line"></div><div class="line">import javax.crypto.BadPaddingException;</div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.IllegalBlockSizeException;</div><div class="line">import javax.crypto.NoSuchPaddingException;</div><div class="line">import java.security.*;</div><div class="line">import java.security.interfaces.RSAPrivateKey;</div><div class="line">import java.security.interfaces.RSAPublicKey;</div><div class="line">import java.security.spec.InvalidKeySpecException;</div><div class="line">import java.security.spec.PKCS8EncodedKeySpec;</div><div class="line">import java.security.spec.X509EncodedKeySpec;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class RSAUtils &#123;</div><div class="line">    private static final String PUBLIC_KEY = &quot;RSAPublicKey&quot;;</div><div class="line">    private static final String PRIVATE_KEY = &quot;RSAPrivateKey&quot;;</div><div class="line">    private static final String KEY_ALGORITHM = &quot;RSA&quot;;</div><div class="line">    private static final String SIGNATHURE_ALGORITHM = &quot;MD5withRSA&quot;;</div><div class="line"></div><div class="line">    public static Map&lt;String,Object&gt; initKey() throws NoSuchAlgorithmException &#123;</div><div class="line">        // 1. 生成公钥和私钥对，基于RSA算法生成对象</div><div class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);</div><div class="line"></div><div class="line">        // 2. 初始化密钥对生成器，密钥大小为1024位</div><div class="line">        keyPairGenerator.initialize(1024);</div><div class="line"></div><div class="line">        // 3. 生成一个密钥对，保存在keyPair中</div><div class="line">        KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line"></div><div class="line">        // 4. 得到私钥和公钥</div><div class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</div><div class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</div><div class="line"></div><div class="line">        Map&lt;String,Object&gt; keyMap = new HashMap&lt;&gt;();</div><div class="line">        keyMap.put(PUBLIC_KEY,publicKey);</div><div class="line">        keyMap.put(PRIVATE_KEY,privateKey);</div><div class="line">        return keyMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取私钥</div><div class="line">     */</div><div class="line">    public static String getPrivateKey(Map&lt;String,Object&gt; keyMap)&#123;</div><div class="line">        Key key = (Key) keyMap.get(PRIVATE_KEY);</div><div class="line">        return Base64.encodeBase64String(key.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取公钥</div><div class="line">     */</div><div class="line">    public static String getPublicKey(Map&lt;String,Object&gt; keyMap) &#123;</div><div class="line">        Key key = (Key) keyMap.get(PUBLIC_KEY);</div><div class="line">        return Base64.encodeBase64String(key.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用公钥对数据加密</div><div class="line">     */</div><div class="line">    public static byte[] encryptByPublicKey(byte[] data,String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</div><div class="line">        // 对公钥解密</div><div class="line">        byte[] keyBytes = Base64.decodeBase64(key);</div><div class="line"></div><div class="line">        // 取得公钥</div><div class="line">        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(keyBytes);</div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">        Key publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line"></div><div class="line">        // 对数据加密</div><div class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE,publicKey);</div><div class="line">        return cipher.doFinal(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用私钥对数据解密</div><div class="line">     */</div><div class="line">    public static byte[] decrptByPrivateKey(byte[] data, String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</div><div class="line">        // 对私钥解密</div><div class="line">        byte[] keyBytes = Base64.decodeBase64(key);</div><div class="line"></div><div class="line">        // 取得私钥</div><div class="line">        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(keyBytes);</div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">        Key privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line"></div><div class="line">        // 对数据解密</div><div class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">        cipher.init(Cipher.DECRYPT_MODE,privateKey);</div><div class="line"></div><div class="line">        return cipher.doFinal(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        String content = &quot;Hello World&quot;;</div><div class="line"></div><div class="line">        // 1. 初始化公钥 &amp; 私钥</div><div class="line">        Map&lt;String,Object&gt; pairKey = initKey();</div><div class="line"></div><div class="line">        // 2. 获取公钥</div><div class="line">        String publicKey = getPublicKey(pairKey);</div><div class="line"></div><div class="line">        // 3. 用公钥加密内容</div><div class="line">        byte[] encodeContent = encryptByPublicKey(content.getBytes(&quot;UTF-8&quot;),publicKey);</div><div class="line"></div><div class="line">        // 4. 获取私钥</div><div class="line">        String privateKey = getPrivateKey(pairKey);</div><div class="line"></div><div class="line">        // 5. 用私钥解密内容</div><div class="line">        byte[] decodeContent = decrptByPrivateKey(encodeContent,privateKey);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + content);</div><div class="line">        System.out.print(&quot;密文：&quot;);</div><div class="line">        System.out.println(new String(encodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;明文：&quot; + new String(decodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;加密~解密历时: &quot; + (System.currentTimeMillis() - start)/1000 + &quot;秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-5-AES加密-amp-解密"><a href="#4-5-AES加密-amp-解密" class="headerlink" title="4.5 AES加密 &amp; 解密"></a>4.5 AES加密 &amp; 解密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">import sun.misc.BASE64Decoder;</div><div class="line">import sun.misc.BASE64Encoder;</div><div class="line"></div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.spec.IvParameterSpec;</div><div class="line">import javax.crypto.spec.SecretKeySpec;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class AESUtils &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  加密</div><div class="line">     */</div><div class="line">    public static String encrypt(String sSrc, String sKey) throws Exception &#123;</div><div class="line">        if (sKey == null) &#123;</div><div class="line">            System.out.print(&quot;Key为空null&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        // 判断Key是否为16位</div><div class="line">        if (sKey.length() != 16) &#123;</div><div class="line">            System.out.print(&quot;Key长度不是16位&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        byte[] raw = sKey.getBytes();</div><div class="line">        SecretKeySpec skeySpec = new SecretKeySpec(raw, &quot;AES&quot;);</div><div class="line">        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);//&quot;算法/模式/补码方式&quot;</div><div class="line">        IvParameterSpec iv = new IvParameterSpec(&quot;0102030405060708&quot;.getBytes());//使用CBC模式，需要一个向量iv，可增加加密算法的强度</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);</div><div class="line">        byte[] encrypted = cipher.doFinal(sSrc.getBytes());</div><div class="line"></div><div class="line">        return new BASE64Encoder().encode(encrypted);//此处使用BASE64做转码功能，同时能起到2次加密的作用。</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  解密</div><div class="line">     */</div><div class="line">    public static String decrypt(String sSrc, String sKey) throws Exception &#123;</div><div class="line">        try &#123;</div><div class="line">            // 判断Key是否正确</div><div class="line">            if (sKey == null) &#123;</div><div class="line">                System.out.print(&quot;Key为空null&quot;);</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            // 判断Key是否为16位</div><div class="line">            if (sKey.length() != 16) &#123;</div><div class="line">                System.out.print(&quot;Key长度不是16位&quot;);</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            byte[] raw = sKey.getBytes(&quot;ASCII&quot;);</div><div class="line">            SecretKeySpec skeySpec = new SecretKeySpec(raw, &quot;AES&quot;);</div><div class="line">            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);</div><div class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;0102030405060708&quot;</div><div class="line">                    .getBytes());</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);</div><div class="line">            byte[] encrypted1 = new BASE64Decoder().decodeBuffer(sSrc);//先用base64解密</div><div class="line">            try &#123;</div><div class="line">                byte[] original = cipher.doFinal(encrypted1);</div><div class="line">                String originalString = new String(original);</div><div class="line">                return originalString;</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                System.out.println(e.toString());</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception ex) &#123;</div><div class="line">            System.out.println(ex.toString());</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        String content = &quot;HelloWorld123456&quot;;</div><div class="line">        String password = &quot;1234567123456712&quot;;</div><div class="line"></div><div class="line">        // AES加密</div><div class="line">        String encodeContent = encrypt(content,password);</div><div class="line"></div><div class="line">        // AES解密</div><div class="line">        String decodeContent = decrypt(encodeContent,password);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + content);</div><div class="line">        System.out.println(&quot;密文：&quot; + encodeContent);</div><div class="line">        System.out.println(&quot;明文：&quot; + decodeContent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-Base64编码"><a href="#5-Base64编码" class="headerlink" title="5. Base64编码"></a>5. Base64编码</h3><h4 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h4><p>Base64内容传送编码是一种以任意8位字节序列组合的描述形式，这种形式不易被人直接识别。Base64是一种常见的编码规范，其作用是将二进制序列转换为人类可读的ASCLL字符序列，常用在需用通过文本协议(如HTTP和SMTP)来传输二进制数据下。Base64并不是加密解密算法，尽管我们有时也听到过使用Base64来加密解密的说法，但这里所有的加密和解密实际是编码和解码的过程，其变换是非常简单的，仅仅能够编码信息被直接识别。</p>
<h4 id="5-2-原理"><a href="#5-2-原理" class="headerlink" title="5.2 原理"></a>5.2 原理</h4><p>Base64算法主要是将给定的字符以字符编码(如ASCLL码，UTF-8码)对应的十进制数为基准，做编码操作。</p>
<blockquote>
<p>1、将给定的字符串以字符为单位，转换为对应的字符编码。</p>
<p>2、将获得字符编码转换为二进制</p>
<p>3、对二进制做分组转换，每3个字节为一组，转换为每4个6位二进制位为1组(不足6位时，低位补0)这是一个分组变化的过程，3个8位二进制和4个6位二进制的长度都是24位</p>
<p>4、对获得的4-6二进制码补位，向6位二进制码添加2位高位0，组成4个8位二进制码。</p>
<p>5、对获得4-8二进制码转换为十进制码。</p>
<p>6、将获得的十进制码转换为Base64字符表中的对应字符。</p>
</blockquote>
<h4 id="5-3-JAVA实现Base64编码和解码"><a href="#5-3-JAVA实现Base64编码和解码" class="headerlink" title="5.3 JAVA实现Base64编码和解码"></a>5.3 JAVA实现Base64编码和解码</h4><p>推荐使用<code>commons-codec</code>开源包，请在maven工程中添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;commons-codec&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.10&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>实战：Base64编码 &amp; 解码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import org.apache.commons.codec.binary.Base64;</div><div class="line"></div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class Base64Utils &#123;</div><div class="line">    private static final String QUERY_URL = &quot;http://localhost:8080/hello?content=sayHello&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        byte[] encodeContent = Base64.encodeBase64URLSafe(QUERY_URL.getBytes(&quot;UTF-8&quot;));</div><div class="line">        byte[] decodeContent = Base64.decodeBase64(encodeContent);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + QUERY_URL);</div><div class="line">        System.out.println(&quot;编码：&quot; + new String(encodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;解码：&quot; + new String(decodeContent,&quot;UTF-8&quot;));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.jianshu.com/p/316ce9fa083e" target="_blank" rel="external">JAVA中常用加密算法简述</a></li>
<li><a href="http://www.jianshu.com/p/d83f5be22181" target="_blank" rel="external">Java与加密解密</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在开发应用过程中，客户端与服务端经常需要进行数据传输，涉及到重要隐私安全信息时，开发者自然会想到对其进行加密，即使传输过程中被”有心人”截取
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>沉浸式学Git</title>
    <link href="http://jianwl.com/2017/09/26/%E6%B2%89%E6%B5%B8%E5%BC%8F%E5%AD%A6Git/"/>
    <id>http://jianwl.com/2017/09/26/沉浸式学Git/</id>
    <published>2017-09-26T07:12:33.000Z</published>
    <updated>2017-11-09T13:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>平时用SourceTree比较多，对于Git命令比较生疏，这块是个短板；找到一篇比较实用的Git科普文，这里会简单介绍下常用的场景。</p>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><code>git status</code>、<code>git add</code>、<code>git commit</code>、<code>git checkout</code>是非常常用的命令，因此对它们进行缩写十分有用。</p>
<p>MacOS系统中的git config file的在哪？可以参见这篇文章<a href="https://stackoverflow.com/questions/16283280/how-to-locate-the-git-config-file-in-mac" target="_blank" rel="external">How to locate the git config file in Mac</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  co = checkout</div><div class="line">  ci = commit</div><div class="line">  st = status</div><div class="line">  br = branch</div><div class="line">  hist = log --pretty=format:&apos;%h %ad | %s%d [%an]&apos; --graph --date=short</div><div class="line">  type = cat-file -t</div><div class="line">  dump = cat-file -p</div></pre></td></tr></table></figure>
<h3 id="撤销提交的更改"><a href="#撤销提交的更改" class="headerlink" title="撤销提交的更改"></a>撤销提交的更改</h3><p>有时候你意识到已经提交的更改不正确并想撤销该提交，有几种方式可以处理这种问题，我们在本实验中所用的方式总是安全的。</p>
<p>1、 更改文件并提交(更改hello.java文件)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world!</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add hello.java</div><div class="line">$ git commit -m &quot;init hello.java file&quot;</div></pre></td></tr></table></figure>
<p>2、创建还原提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git revert HEAD</div></pre></td></tr></table></figure>
<p>这将带你到编辑器中，你可以编辑默认的提交信息，或直接离开它。保存并关闭文件，你应该看到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git revert HEAD --no-edit</div><div class="line">[master 6b9d8af] Revert &quot;init hello.java file&quot;</div><div class="line">1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<p>因为我们将撤销我们做的最后提交，所以我们使用HEAD作为还原的参数。通过简单的指定哈希值，我们可以撤销早期历史中的任意提交。</p>
<h3 id="删除远端已提交的文件，并不在跟踪（-idea为要删除的文件）"><a href="#删除远端已提交的文件，并不在跟踪（-idea为要删除的文件）" class="headerlink" title="删除远端已提交的文件，并不在跟踪（.idea为要删除的文件）"></a>删除远端已提交的文件，并不在跟踪（.idea为要删除的文件）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached --ignore-unmatch .idea/**</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://igit.linuxtoy.org/contents.html" target="_blank" rel="external">沉浸式学Git</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;平时用SourceTree比较多，对于Git命令比较生疏，这块是个短板；找到一篇比较实用的Git科普文，这里会简单介绍下常用的场景。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jianwl.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jianwl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java问题排查工具箱</title>
    <link href="http://jianwl.com/2017/09/21/Java%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    <id>http://jianwl.com/2017/09/21/Java问题排查工具箱/</id>
    <published>2017-09-20T16:44:29.000Z</published>
    <updated>2017-09-20T17:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在长期排查线上问题的过程中，总结了一些工具的用法和排查问题的思路，首先讲讲工具，JVM自带的一些工具是必须掌握的，例如jstack、jmap、jstat等，它可以帮我们去深入了解JVM正在做的事情，主要的使用领取有这些：</p>
<h3 id="1、jstack"><a href="#1、jstack" class="headerlink" title="1、jstack"></a>1、jstack</h3><blockquote>
<p>jstack可以告诉你当前所有JVM线程正在做什么，包括用户线程和虚拟机线程，你可以用它来查看线程，并且结合Lock信息来检测是否发生了死锁和死锁的线程。</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/88774560.jpg" alt=""></p>
<h3 id="2、jstat"><a href="#2、jstat" class="headerlink" title="2、jstat"></a>2、jstat</h3><blockquote>
<p>stat,顾明思义就是提供一些统计信息，它可以告诉你当前的GC情况，包括GC次数、时间、具体的GC还可以结合gc.log文件去分析。</p>
<p>一般来说，我们用jstat去查看GC情况，判断是否存在YGC或FGC频繁的情况，再去看gc.log和jamp dump内存，MAT分析来定位问题(后面会有一个case针对这种场景)</p>
<p>常用的用法是jstat -gcutil pid time_interval</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/72875924.jpg" alt=""></p>
<h3 id="3、jmap"><a href="#3、jmap" class="headerlink" title="3、jmap"></a>3、jmap</h3><blockquote>
<p>排查GC问题必然会用到的工具，jmap可以告诉你当前JVM内存堆中的对象分布及其关系，当你dump堆之后可以用MAT分析，看看有哪些大对象，或者哪些类的实例特别多。</p>
<p>常用用法：</p>
<p>强制FGC: -histo:live</p>
<p>dump堆:-dump:[live],format=b,file=dump.bin</p>
<p>查看各代内存占用情况: -heap</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/33702309.jpg" alt=""></p>
<p>然后我们来介绍一些开源的工具，来增强JVM工具本身的作用：</p>
<h3 id="1、MAT-Eclipse-Memory-Analyzer"><a href="#1、MAT-Eclipse-Memory-Analyzer" class="headerlink" title="1、MAT(Eclipse Memory Analyzer)"></a>1、MAT(Eclipse Memory Analyzer)</h3><blockquote>
<p>GC必备分析，用于分析jmap或OOM时dump出来的内存快照，可以看到对象和引用关系；</p>
<p>官方地址：<a href="http://www.eclipse.org/mat" target="_blank" rel="external">http://www.eclipse.org/mat</a></p>
</blockquote>
<h3 id="2、top"><a href="#2、top" class="headerlink" title="2、top"></a>2、top</h3><blockquote>
<p>这个是Linux自带的命令，查看系统资源消耗情况，可以看到CPU、内存、SWAP、I/O的消耗情况，需要特别注意有几个值：</p>
<p>ni,这个值如果特别高说明线程上下文切换开销较大，看看是不是开了太多的线程导致的</p>
<p>res，这个代表了进程实际占用的内存</p>
<p>swap，内存不足就是占用swap空间，这个时候一般应用的性能会急剧下降，需要特别关注；</p>
</blockquote>
<h3 id="3、HouseMD"><a href="#3、HouseMD" class="headerlink" title="3、HouseMD"></a>3、HouseMD</h3><blockquote>
<p>一个类似于BTrace的小工具，用于对JVM运行时的状态进行追踪和诊断，作者是中间件团队的聚石。</p>
<p>通常我们排查问题很多时候都在代码中加个日志，看看方法的参数、返回值是不是我们期望的，然后编译打包部署重启应用，十几分钟过去了。HouseMD可以直接让你可以追踪到方法的返回值和参数，以及调用次数、调用平均rt、调用栈，甚至是类的成员变量的值、Class加载的路径、对应的ClassLoader都可以用一行命令给你展现出来，堪称神器。</p>
</blockquote>
<h3 id="4、TBJMap"><a href="#4、TBJMap" class="headerlink" title="4、TBJMap"></a>4、TBJMap</h3><blockquote>
<p>通过jmap和MAT我们可以知道整个JVM堆的对象分布情况，但是有时候我们需要知道young/old/perm区分别有哪些对象的时候，就要用到TBJMap这个神器了。</p>
<p>它可以告诉你各个分代区各个Class的实例数、占用的空间、以及DirectMemory占用的空间等。</p>
</blockquote>
<h3 id="5、tsar"><a href="#5、tsar" class="headerlink" title="5、tsar"></a>5、tsar</h3><blockquote>
<p>sar是淘宝的采集工具，主要用来收集服务器的系统信息（如cpu，io，mem，tcp等）以及应用数据（如squid haproxy nginx等），tsar支持t实时查看和历史查看，方便了解应用和服务器的信息。</p>
</blockquote>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://hellojava.info/?p=517" target="_blank" rel="external">Java问题排查工具箱 - 毕玄</a></li>
<li><a href="http://colobu.com/2016/08/10/Java-Flame-Graphs/" target="_blank" rel="external">火焰图</a></li>
<li><a href="http://blog.csdn.net/fenglibing/article/details/6411951" target="_blank" rel="external">JDK内置工具使用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;在长期排查线上问题的过程中，总结了一些工具的用法和排查问题的思路，首先讲讲工具，JVM自带的一些工具是必须掌握的，例如jstack、jmap
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中文乱码排查</title>
    <link href="http://jianwl.com/2017/09/20/MySQL%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%8E%92%E6%9F%A5/"/>
    <id>http://jianwl.com/2017/09/20/MySQL中文乱码排查/</id>
    <published>2017-09-20T06:17:39.000Z</published>
    <updated>2017-09-22T04:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Github上看到别人用JAVA写了个文章管理工具，git clone到本地看看；按照教程将SQL导入MYSQL中，并启动SpringBoot项目。项目启动之后长这样：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/54860156.jpg" alt=""></p>
<p>1、新建文章(未保存)</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/43647701.jpg" alt=""></p>
<p>2、保存文章后</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/45523456.jpg" alt=""></p>
<h3 id="出现问题的反应"><a href="#出现问题的反应" class="headerlink" title="出现问题的反应"></a>出现问题的反应</h3><p>因为是git clone别人的代码，下意识认为代码层面是没有问题的。第一反应是浏览器编码的问题，尝试了Chrome、Safari、Firefox三个浏览器都是乱码；将编码设置为UTF8之后仍是乱码；于是开始调试代码；</p>
<p>保存文章的流程：① 新建文章 ② 点击保存文章 ③ 后端接收前端传过来的内容 ④ 后端将数据存入数据库，在步骤③打印日志，发现后端接收到的内容是正常的，非乱码，但存入数据库却是乱码的；将问题定位到数据库；</p>
<h3 id="解决数据库中文乱码"><a href="#解决数据库中文乱码" class="headerlink" title="解决数据库中文乱码"></a>解决数据库中文乱码</h3><p>1、根据以下这条命令查询MYSQL的字符集</p>
<blockquote>
<p>show variables like ‘character%’</p>
</blockquote>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/65176549.jpg" alt=""></p>
<p>如图可知，服务端的编码非”UTF8”，而存入的中文编码是”UTF8”，因为编码不一致导致乱码；</p>
<p>2、修改数据库my.cnf配置文件加个配置：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/68228133.jpg" alt=""></p>
<p>3、重启MYSQL服务器</p>
<h3 id="中文乱码Fixed"><a href="#中文乱码Fixed" class="headerlink" title="中文乱码Fixed"></a>中文乱码Fixed</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/6735572.jpg" alt=""></p>
<h3 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h3><p>临时改变编码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set character_set_server = utf8</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Github上看到别人用JAVA写了个文章管理工具，git clone到本地看看；按照教程将SQL导入MYSQL中，并启动SpringBo
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域学习</title>
    <link href="http://jianwl.com/2017/09/19/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jianwl.com/2017/09/19/Java内存区域学习/</id>
    <published>2017-09-19T14:25:57.000Z</published>
    <updated>2017-09-20T09:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/5113112.jpg" alt=""></p>
<p>JVM内存模型分为两部分私有内存和共享内存；如图所示，堆和方法区是所有线程共有的，而虚拟栈、本地方法栈、程序计数器则是线程私有的。接下来我们来一一分析不同区域的作用。</p>
<h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>堆内存是所有线程共有的，可分为两部分：年轻代和老年代。下图中的Perm代表的永久代，但是永久代并不属于堆内存中的一部分，同时JDK1.8之后永久代被移除了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/12946482.jpg" alt=""></p>
<p>GC(垃圾回收器)对年轻中的对象进行回收被称为Minor GC,用通俗一点的话说年轻代就是用来存放年轻的对象，年轻对象是什么意思呢?年轻对象可以简单的理解为没有经历多次垃圾回收的对象，如果一个对象经历过一定次数的Minor GC,JVM一般就会将这个对象放入到年轻代，而JVM对年老代对象回收则成为Major GC。</p>
<p>如上图所示，年轻代中还可以细分为三个部分，我们需要重点关注这几点:</p>
<p>1、 大部分对象刚创建的时候，JVM将其分布到Eden区域。</p>
<p>2、当Eden区域中的对象达到一定的数目的时候，就会进行Minor GC，经历这次垃圾回收后所有存活的对象都会进入两个 Suvivor Place中的一个。</p>
<p>3、同一时刻两个Suvivor Place,即S0和S1中总有一个总是空的。</p>
<p>4、年轻代中的对象经历过了多次的垃圾回收就会转移到年老代中。</p>
<p>5、当申请不到空间时会抛出OutOfMemoryError.下面我们简单模拟一个内存溢出的情况:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class HeapOOM &#123;</div><div class="line">    static  class  OOMObject&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;OOMObject&gt;();</div><div class="line">        while (true) &#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是执行的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</div><div class="line">	at java.util.Arrays.copyOf(Arrays.java:3210)</div><div class="line">	at java.util.Arrays.copyOf(Arrays.java:3181)</div><div class="line">	at java.util.ArrayList.grow(ArrayList.java:261)</div><div class="line">	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)</div><div class="line">	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)</div><div class="line">	at java.util.ArrayList.add(ArrayList.java:458)</div><div class="line">	at jvm.HeapOOM.main(HeapOOM.java:17)</div></pre></td></tr></table></figure>
<p>堆内存是我们平时在生产环境中进行性能调优中一个非常重要的部分，以下拓展补充几个常见的性能调优参数：</p>
<ul>
<li>PretenureSizeThreshold:直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代中分配。</li>
<li>MaxTenuringThreshold:晋升到老年代的对象年龄，每个对象在坚持过一次Minor GC之后，年龄会加1，当超过这个参数值时就进入老年代。</li>
<li>UseAdaptiveSizePolicy:动态调整Java堆中各个区域的大小以及进入年老代的年龄。</li>
<li>SurivorRatio:新生代Eden区域与Survivor区域的容量比例，默认为8，代表Eden: Suvivor = 8:1。</li>
<li>NewRatio:设置新生代(包括Eden和两个Survivor区)与老年代的比值(除去持久代)，设置为3，则新生代与年老代所占比值为1：3，新生代占整个堆栈的1/4</li>
<li>Xmx:设置JVM堆最大内存</li>
<li>Xms:设置JVM堆初始化内存</li>
<li>Xmn:参数设置年轻代内存</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区与Java堆一样，是所有线程共享的区域，它用于存储已被虚拟机加载的类信息、常量、静态常量，即时编译(JIT)后的代码等数据。</p>
<p>对于JDK1.8之前的HotSpot虚拟机而言，很多人经常将方法区称为我们上图中所描述的永久代，实际上两者并不等价，因为这仅仅是HotSpot的设计团队选择利用永久代来实现方法区而言。同时对于其他虚拟机比如IBM J9是不存在永久代概念的。</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>JVM中程序计数器和计算机组成原理中提到的程序计数器PC概念类似，线程私有，用来记录执行的字节码位置。CPU的占有时间是以分片的形式分配给每个不同线程的，从操作系统的角度讲，在不同线程之间切换的时候就是依赖程序计数器来记录上一次线程所执行到具体的代码的行数，在JVM就是字节码。</p>
<h3 id="JAVA虚拟机栈"><a href="#JAVA虚拟机栈" class="headerlink" title="JAVA虚拟机栈"></a>JAVA虚拟机栈</h3><p>与程序计数器一样，JAVA虚拟机栈也是线程私有的，用通俗的话将它就是我们常常听到堆栈中的那个“栈”内存。虚拟机栈描述的是JAVA方法执行的内存模型：每个方法在执行的时候都会创建一个栈帧(Stack Frame)用于存储局部变量表（局部变量表需要的内存，在编译期间就确定所在方法运行期间不会改变大小），操作数栈、动态链接、方法出口等信息。每一个方法从调用至出栈的过程，就是栈帧在虚拟机中从入栈到出栈的过程。</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈和JAVA虚拟机栈类似，只不过是为JVM执行Native方法服务。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解JAVA虚拟机</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oc5a5l0a0.bkt.clouddn.com/17-9-20/5113112.jpg&quot; alt=&quot;&quot;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java8之HashMap源码学习</title>
    <link href="http://jianwl.com/2017/09/01/Java8%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jianwl.com/2017/09/01/Java8之HashMap源码学习/</id>
    <published>2017-09-01T07:20:01.000Z</published>
    <updated>2017-09-01T13:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>随着JDK的更新，JDK1.8对HashMap底层的实现进行了优化，本文想深入探讨HashMap的结构实现和功能原理。</p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/39063824.jpg" alt=""></p>
<p>Java为数据结构中的映射定义了一个接口java.util.Map，此接口有四个常用的实现类，分别为HashMap、LinkedHashMap和TreeMap，类继承关系如图；以下针对各个实现类的特定做了一些说明；</p>
<p>(1) HashMap: 它根据键的hashCode值存储数据，大多数情况可以直接定位到它的值，因而具有很快的访问速度，但遍历速度却是不确定的。HashMap最多只允许一条记录键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻多个线程同时写HashMap，可能会导致数据的不一致，如果要满足线程安全可以用Collections的synchronizedMap方法使HashMap具有线程安全的能力，或使用ConcurrentHashMap。</p>
<p>(2) Hashtable: Hashtable是遗留类，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable,并发性不如ConcurrentHashMap,因为ConcurrentHashMap引入了分段锁。Hashtable不允许键或值为null；</p>
<p>(3) LinkedHashMap: LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序;</p>
<p>(4) TreeMap: TreeMap实现了SortedMap接口，能够把它的记录根据键排序，默认按键值的升序排序，也可以指定排序的比较器；</p>
<p>上述四种Map类型的类，要求映射的key是<strong>不可变类</strong>，不可变类是该对象在创建后它的哈希值不会被改变。如果对象的哈希值改变了，Map对象很可能就定位不到映射的位置了。</p>
<h3 id="存储结构-字段"><a href="#存储结构-字段" class="headerlink" title="存储结构 - 字段"></a>存储结构 - 字段</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/44470980.jpg" alt=""></p>
<p>这里需要讲明白两个问题，数据底层具体存储的是什么？这样的存储方式有什么优点？</p>
<p>1、什么是Node?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">        final int hash; // 定位数组的索引位置</div><div class="line">        final K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next; // 链表的下一个Node</div><div class="line"></div><div class="line">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</div><div class="line"></div><div class="line">        public final K getKey()        &#123; ... &#125;</div><div class="line">        public final V getValue()      &#123; ... &#125;</div><div class="line">        public final String toString() &#123; ... &#125;</div><div class="line"></div><div class="line">        public final int hashCode() &#123; ... &#125;</div><div class="line"></div><div class="line">        public final V setValue(V newValue) &#123; ... &#125;</div><div class="line"></div><div class="line">        public final boolean equals(Object o) &#123; ... &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Node是HashMap的内部类，实现了Map.Entry接口，本质上Node是一个链表；</p>
<p>2、如何确认哈希桶索引位置?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line">static final int hash(Object key) &#123;   //jdk1.8 &amp; jdk1.7</div><div class="line">     int h;</div><div class="line">     // h = key.hashCode() 为第一步 取hashCode值</div><div class="line">     // h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</div><div class="line">     return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class="line">&#125;</div><div class="line">方法二：</div><div class="line">static int indexFor(int h, int length) &#123;  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</div><div class="line">     return h &amp; (length-1);  //第三步 取模运算</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的Hash算法本质上就三步：取key的hashCode值、高位运算、取模运算；举例说明：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/79939676.jpg" alt=""></p>
<p>这样就可以通过key来定位数组的索引位置了；</p>
<p>3、如何解决哈希冲突？</p>
<p>采用链地址法，简单来说就是数组加链表的结合，在每个数组元素上都是一个链表结构，当数据Hash后，得到数组下标，都把数据放在对应下标元素的链表上。</p>
<p>4、关于哈希冲突的调优？</p>
<p>两个Key定位到相同的位置，表示发生了哈希冲突。通过什么方式可来控制Map是的哈希碰撞概率小，哈希桶数组占用空间又小呢？有几个参数需要重点注意：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int threshold // 扩容的阈值 -- 数组length * loadFactor</div><div class="line">final float loadFactor; // 负载因子 -- 默认0.75</div><div class="line">int modCount;</div><div class="line">int size;</div></pre></td></tr></table></figure>
<p>默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。</p>
<h3 id="分析HashMap的put方法"><a href="#分析HashMap的put方法" class="headerlink" title="分析HashMap的put方法"></a>分析HashMap的put方法</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/13730914.jpg" alt=""></p>
<h3 id="JDK1-8-VS-JDK1-7-性能测试"><a href="#JDK1-8-VS-JDK1-7-性能测试" class="headerlink" title="JDK1.8 VS JDK1.7 性能测试"></a>JDK1.8 VS JDK1.7 性能测试</h3><p>1、哈希较均匀的情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class Keys &#123;</div><div class="line">    public static final int MAX_KEY = 1_000_000;</div><div class="line">    private static final Key[] KEYS_CACHE = new Key[MAX_KEY];</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        for (int i = 0; i &lt; MAX_KEY; ++i) &#123;</div><div class="line">            KEYS_CACHE[i] = new Key(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Key of(int value) &#123;</div><div class="line">        return KEYS_CACHE[value];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void test(int mapSize) &#123;</div><div class="line">        HashMap&lt;Key, Integer&gt; map = new HashMap&lt;Key, Integer&gt;(mapSize);</div><div class="line">        for (int i = 0; i &lt; mapSize; i++) &#123;</div><div class="line">            map.put(Keys.of(i), i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        long beginTime = System.nanoTime();</div><div class="line">        for (int i = 0; i &lt; mapSize; i++) &#123;</div><div class="line">            map.get(Keys.of(i));</div><div class="line">        &#125;</div><div class="line">        long endTime = System.nanoTime();</div><div class="line">        System.out.println(&quot;mapSize =&gt; &quot; + mapSize + &quot; time =&gt; &quot; + (endTime - beginTime));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        for (int i = 10; i &lt;= MAX_KEY; i *= 10) &#123;</div><div class="line">            test(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Key implements Comparable&lt;Key&gt; &#123;</div><div class="line">    private final int value;</div><div class="line"></div><div class="line">    public Key(int value) &#123;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int compareTo(Key o) &#123;</div><div class="line">        return Integer.compare(this.value, o.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean equals(Object o) &#123;</div><div class="line">        if (this == o) return true;</div><div class="line">        if (o == null || getClass() != o.getClass())</div><div class="line">            return false;</div><div class="line">        Key key = (Key) o;</div><div class="line">        return value == key.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int hashCode() &#123;</div><div class="line">        return value; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/1545958.jpg" alt=""></p>
<p>从图上可看到JDK1.8的效率远远高于JDK1.7</p>
<p>2、哈希不均匀测试</p>
<p>修改了HashCode的值，其余不变；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Key implements Comparable&lt;Key&gt; &#123;</div><div class="line">    </div><div class="line">    ....</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int hashCode() &#123;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/48441366.jpg" alt=""></p>
<p>由图中结果可知，随着size的变大，JDK1.7花费时间是增长的趋势，而JDK1.8是明显的降低趋势，并呈现对数增长稳定，当一个链表太长是，HashMap会动态将它替换为红黑树，这将时间复杂度从O(N)将为O(logn)。hash算法均匀和不均匀所花费的时间明显也不相同。</p>
<p>3、JDK1.8 哈希均匀 VS 哈希不均匀</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/40579970.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;随着JDK的更新，JDK1.8对HashMap底层的实现进行了优化，本文想深入探讨HashMap的结构实现和功能原理。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
</feed>
