<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2017-05-06T13:40:45.000Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM之类加载机制</title>
    <link href="http://jianwl.com/2017/05/06/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://jianwl.com/2017/05/06/JVM之类加载机制/</id>
    <published>2017-05-06T12:05:52.000Z</published>
    <updated>2017-05-06T13:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JVM的类加载机制是之前面试中被问到频率比较高的问题之一了，这一节我们来详细了解它的实现机制。</p>
<h3 id="1-JVM类加载"><a href="#1-JVM类加载" class="headerlink" title="1. JVM类加载"></a>1. JVM类加载</h3><p>JAVA虚拟机中类加载的全过程，也就是加载、验证、准备、解析和初始化这5个阶段，接下来将会详细介绍每个阶段所执行的具体动作。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/1958164-file_1494072982627_39b3.png" alt=""></p>
<h4 id="1）加载"><a href="#1）加载" class="headerlink" title="1）加载"></a>1）加载</h4><p>在加载阶段，虚拟机将会完成以下3件事情：</p>
<p>1）通过一个类的全限定名来获取定义此类的二进制字节流</p>
<p>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p>
<p>3) 在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>
<h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2) 验证"></a>2) 验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<p>验证阶段大致会完成下面4个阶段检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p>
<h5 id="2-1-文件格式验证"><a href="#2-1-文件格式验证" class="headerlink" title="2.1 文件格式验证"></a>2.1 文件格式验证</h5><ul>
<li>是否以魔数0xCAFEBABE开头</li>
<li>主、次版本号是否在当前虚拟机处理范围之内</li>
<li>常量池的常量中是否有不被支持的常量类型</li>
</ul>
<p>…</p>
<p>这阶段的是基于二进制字节流进行的，只有通过这个验证后，字节流才会进入内存的方法区进行存储，后面的3个验证全都是基于方法区的存储结构进行的。</p>
<h5 id="2-2-元数据验证"><a href="#2-2-元数据验证" class="headerlink" title="2.2 元数据验证"></a>2.2 元数据验证</h5><p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java信息规范的要求。这个阶段主要验证：</p>
<ul>
<li>这个类是否有父类</li>
<li>这个类的父类是否集成了不允许继承的类</li>
<li>如果这个类不是抽象类，是否实现了父类或接口之中要求实现的所有方法</li>
<li>类中的字段、方法是否与父类产生矛盾</li>
</ul>
<h5 id="2-3-字节码验证"><a href="#2-3-字节码验证" class="headerlink" title="2.3 字节码验证"></a>2.3 字节码验证</h5><p>第三个阶段是整个验证中最复杂的一个阶段，主要目的是通过数据流和控制流分析确定程序语义是合法的，符合逻辑的。</p>
<ul>
<li>保证任意时刻操作数据栈的数据类型与指令代码序列都能配合工作，例如不会出现类似的情况：在操作栈放置一个int类型的数据，使用时却按long类型来加载本地变量表。</li>
<li>保证跳转执行不会跳转到方法体以外的字节码指令上</li>
<li>保证方法体中的类型转换是有效的。例如可以把一个子类对象赋值给父类数据类型。</li>
</ul>
<h5 id="2-4-符号引用验证"><a href="#2-4-符号引用验证" class="headerlink" title="2.4 符号引用验证"></a>2.4 符号引用验证</h5><p>最后一个阶段的验证发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段 – 解析阶段中发生。符号引用验证可以看做是对类自身以外的信息进行匹配性校验。</p>
<ul>
<li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li>
<li>在指定类中是否存在符号方法的字段描述符以及简单名称所描述的方法和字段。</li>
<li>符号引用中的类、字段、方法的访问性(private、protect、public、default)是否可被当前类访问</li>
</ul>
<h4 id="3）准备"><a href="#3）准备" class="headerlink" title="3）准备"></a>3）准备</h4><p>准备阶段是为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段有两个特别容易混淆的概念需要强调一下，首先，这个时候进行内存分配的仅包含类变量(被static修饰的变量)，而不包括实例变量，实例变量将在对象实例化时随着对象一起分配在java堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值。假设定义一个类变量定义为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static int value = 123;</div></pre></td></tr></table></figure>
<p>那变量value在准备阶段过后的初始值为0而不是123，因为这时候尚未开始执行Java方法，而把value赋值为123的pubstatic指令是程序被编译后，存放在类构造器<clinit>()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。</clinit></p>
<h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4) 解析"></a>4) 解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，先来了解下解析阶段中直接引用与符号引用有什么关联？</p>
<ul>
<li>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义定位到目标即可。</li>
<li>直接引用：直接引用是可以直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</li>
</ul>
<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法局冰河调用点限定符7类符号引用进行</p>
<h5 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5) 初始化"></a>5) 初始化</h5><p>类初始化是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的JAVA程序代码。</p>
<h3 id="2-类加载器"><a href="#2-类加载器" class="headerlink" title="2. 类加载器"></a>2. 类加载器</h3><h4 id="1-类加载器的分类"><a href="#1-类加载器的分类" class="headerlink" title="1) 类加载器的分类"></a>1) 类加载器的分类</h4><p>JAVA提供3中类加载器，启动类加载器、扩展类加载器、应用程序类加载器。</p>
<h5 id="1-1-启动类加载器"><a href="#1-1-启动类加载器" class="headerlink" title="1.1 启动类加载器"></a>1.1 启动类加载器</h5><p>这个类加载器将存放在<code>&lt;JAVA_HOME&gt;\lib</code>目录中的，或被<code>-Xbootclasspath</code>参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机聂村中。启动类加载器无法被Java程序直接引用，用户在编写自定义加载器时，如果需要将加载器请求委派给引导类加载器，那直接使用null代替即可。</p>
<h5 id="1-2-扩展类加载器"><a href="#1-2-扩展类加载器" class="headerlink" title="1.2 扩展类加载器"></a>1.2 扩展类加载器</h5><p>这个加载器由<code>sun.misc.Lanchuer$ExtClassLoader</code>实现，它负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中的，或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</p>
<h5 id="1-3-应用程序类加载器"><a href="#1-3-应用程序类加载器" class="headerlink" title="1.3 应用程序类加载器"></a>1.3 应用程序类加载器</h5><p>它负责加载用户类路径(ClassPath)上所指定的类库，开发者直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下就是程序中默认的类加载器。</p>
<h4 id="2-类加载器之间的关系-–-双亲委派模型"><a href="#2-类加载器之间的关系-–-双亲委派模型" class="headerlink" title="2)类加载器之间的关系 – 双亲委派模型"></a>2)类加载器之间的关系 – 双亲委派模型</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/80453965-file_1494077656090_6545.png" alt=""></p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到类加载的请求，它首先不会自家去尝试加载这个类，而是把这个请求委派给父类加载器去完成，没一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时，子加载器才会尝试自己去加载。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解java虚拟机 by 周志明</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;JVM的类加载机制是之前面试中被问到频率比较高的问题之一了，这一节我们来详细了解它的实现机制。&lt;/p&gt;
&lt;h3 id=&quot;1-JVM类加载&quot;&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Fork/Join框架</title>
    <link href="http://jianwl.com/2017/05/06/Fork-Join%E6%A1%86%E6%9E%B6/"/>
    <id>http://jianwl.com/2017/05/06/Fork-Join框架/</id>
    <published>2017-05-06T07:59:14.000Z</published>
    <updated>2017-05-06T08:31:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是Fork-Join框架"><a href="#1-什么是Fork-Join框架" class="headerlink" title="1. 什么是Fork/Join框架"></a>1. 什么是Fork/Join框架</h3><p><code>Fork/Join</code>框架是<code>Java7</code>提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/59644370-file_1494058071918_c704.png" alt=""></p>
<h3 id="2-工作窃取算法"><a href="#2-工作窃取算法" class="headerlink" title="2. 工作窃取算法"></a>2. 工作窃取算法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>工作窃取(work-stealing)算法是指某个线程从其他队列里窃取任务来执行。</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>线程1负责处理4个任务，线程2负责处理4个任务，当线程1任务处理完了，但线程2还在处理任务。干完活的线程与其闲着，不如去帮其他线程干活。于是它就去其他线程的队里里窃取一个任务来执行。<strong>在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务之间的竞争，通过会使用双端队列，被窃取任务线程永远从双端队列的头部执行任务，而窃取任务线程用于从双端队列的尾部拿任务。</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/32884348-file_1494058582643_ef6c.png" alt=""></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>充分利用线程进行并行计算，减少了线程间的竞争。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>在某些情况下，还是存在竞争，比如双端队列里只有一个任务时，并且算法会消耗更多的系统资源。</p>
<h3 id="3-Fork-Join框架的设计"><a href="#3-Fork-Join框架的设计" class="headerlink" title="3. Fork/Join框架的设计"></a>3. Fork/Join框架的设计</h3><p>如果让我们来设计一个Fork/Join框架，我们该如何设计？</p>
<p>步骤1 分割任务，首先我们需要有一个Fork类来把大任务分割成子任务，有可能子任务还是很大，所以还需要不停地分割，知道分割出的子任务足够小。</p>
<p>步骤2 执行任务并合并结果，分割的子任务分别放在双端队列里，然后几个启动线程分别从双端队列里获取任务执行，子任务执行完的结果都统一放在一个队列里，启动一个线程从队列里拿数据，然后合并这些数据。</p>
<p>Fork/Join框架提供以下两个子类：</p>
<ul>
<li>RecursiveAction: 用于没有返回结果的任务</li>
<li>RecursiveTask: 用于有返回结果的任务</li>
</ul>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class CountTask extends RecursiveTask&lt;Integer&gt; &#123;</div><div class="line">    private static final int THRESHOLD = 2;</div><div class="line">    private int start;</div><div class="line">    private int end;</div><div class="line"></div><div class="line">    public CountTask(int start, int end) &#123;</div><div class="line">        this.start = start;</div><div class="line">        this.end = end;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected Integer compute() &#123;</div><div class="line">        int sum = 0;</div><div class="line"></div><div class="line">        // 如果任务足够小就计算任务</div><div class="line">        boolean canCompute = (end - start) &lt;= THRESHOLD;</div><div class="line">        if (canCompute) &#123;</div><div class="line">            for (int i = start; i &lt;= end; i++) &#123;</div><div class="line">                sum += i;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 如果任务大于阈值,就分裂成两个子任务计算</div><div class="line">            int middle = (start + end) / 2;</div><div class="line">            CountTask leftTask = new CountTask(start,middle);</div><div class="line">            CountTask rightTask = new CountTask(middle + 1,end);</div><div class="line"></div><div class="line">            // 执行子任务</div><div class="line">            leftTask.fork();</div><div class="line">            rightTask.fork();</div><div class="line"></div><div class="line">            //等待子任务执行完,并得到其结果</div><div class="line">            int leftResult = leftTask.join();</div><div class="line">            int rightReult = rightTask.join();</div><div class="line"></div><div class="line">            // 合并子任务</div><div class="line">            sum = leftResult + rightReult;</div><div class="line">        &#125;</div><div class="line">        return sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ForkJoinPool forkJoinPool = new ForkJoinPool();</div><div class="line"></div><div class="line">        // 生成一个计算任务,负责计算1+2+3+4;</div><div class="line">        CountTask countTask = new CountTask(1,4);</div><div class="line"></div><div class="line">        // 执行一个任务</div><div class="line">        Future&lt;Integer&gt; result = forkJoinPool.submit(countTask);</div><div class="line">        try &#123;</div><div class="line">            System.out.println(result.get());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">        &#125;catch (ExecutionException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 10</div></pre></td></tr></table></figure>
<h3 id="5-Fork-Join框架的异常处理"><a href="#5-Fork-Join框架的异常处理" class="headerlink" title="5. Fork/Join框架的异常处理"></a>5. Fork/Join框架的异常处理</h3><p>ForkJoinTask在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以<code>ForkJoinTask</code>提供了<code>isCompletedAbonormally()</code>方法来检查任务是否已经抛出异常或已经被取消了。并且通过<code>ForkJoinTask</code>的<code>getException</code>方法获取异常。</p>
<h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol>
<li>java并发编程的艺术 by 方腾飞</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是Fork-Join框架&quot;&gt;&lt;a href=&quot;#1-什么是Fork-Join框架&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Fork/Join框架&quot;&gt;&lt;/a&gt;1. 什么是Fork/Join框架&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Fork/J
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之线程池</title>
    <link href="http://jianwl.com/2017/05/06/JAVA%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://jianwl.com/2017/05/06/JAVA之线程池/</id>
    <published>2017-05-06T05:45:11.000Z</published>
    <updated>2017-05-06T07:42:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前面试问到最多的问题就是线程池的实现原理，这一节我们将会来学习线程池实现原理及线程池的用法。</p>
<h3 id="1-线程池的优点"><a href="#1-线程池的优点" class="headerlink" title="1. 线程池的优点"></a>1. 线程池的优点</h3><p>Java中线程池是运用场景最多的并发框架，几乎所有需要异步或并发执行任务的程序都可以使用线程池，在开发过程中，合理地使用线程池能够带来3个好处。</p>
<ol>
<li>降低资源消耗，通过重复利用已创建的线程降低线程创建和销毁造成的消耗；</li>
<li>提高响应速度，当任务达到时，任务可以不需要等到线程创建就能立即执行。</li>
<li>提高线程的可管理性，线程是稀缺资源，如果无限制地创建、不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。但是，要做到合理利用线程池，必须对其原理了如指掌。</li>
</ol>
<h3 id="2-线程池的实现原理"><a href="#2-线程池的实现原理" class="headerlink" title="2. 线程池的实现原理"></a>2. 线程池的实现原理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/30502602-file_1494052172147_1313c.png" alt=""></p>
<p>当提交一个新任务到线程池，处理流程如下：</p>
<p>1）线程池判断核心线程池里的线程是否都在执行任务，如果不是，则创建一个新的工作线程来执行任务，如果核心线程池里的线程都在执行任务，则进入下一个流程。</p>
<p>2）线程池判断工作队列是否已满，如果工作队列已满，则将新提交的任务存储在这个工作队列里如果工作队列满了，则进入下一个流程。</p>
<p>3) 线程池判断线程池的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务，如果满了，则交给饱和策略来处理这个任务。</p>
<p>ThreadPoolExecutor执行的<code>execute()</code>方法的示意图：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/10523759-file_1494053473005_d83a.png" alt=""></p>
<p>1） 如果当前运行的线程少于coorPoolSize,则创建新线程来执行任务「执行这一步骤要获取全局锁」</p>
<p>2) 如果运行的线程等于或多余corePoolSize,则将任务加入BlockingQueue；</p>
<p>3）如果无法将任务加入BlockingQueue(队列已满)，则创建新的线程来处理任务「执行这一步骤需要获取全局锁」</p>
<p>4) 如果创建新线程将使当前运行的线程超过maxPool的数量，任务将被拒绝，并调用<code>RejectedExecutionHandle.rejectedExecution()</code>方法。</p>
<h3 id="3-线程池的使用"><a href="#3-线程池的使用" class="headerlink" title="3. 线程池的使用"></a>3. 线程池的使用</h3><h4 id="1-线程池的创建"><a href="#1-线程池的创建" class="headerlink" title="1) 线程池的创建"></a>1) 线程池的创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,milliseconds,runnableTaskQueue,handler);</div></pre></td></tr></table></figure>
<p>1) corePoolSize(线程池的基本大小)：当提交一个任务到线程池时，线程池会创建一个新的线程来执行任务。等到需要执行的任务数大于线程池基本大小时就不再创建。</p>
<p>2）runnableTaskQueue(任务队列): 用于保存等待执行的任务的阻塞队列,有以下几个可供选择：</p>
<ul>
<li>ArrayBlockingQueue: 一个基于数组结构的<strong>有界</strong>阻塞队列，此队列按FIFO对元素进行排序；</li>
<li>LinkedBlockingQueue: 一个基于链表结构的阻塞队列，此队列按FIFO排序元素；</li>
<li>SynchronousQueue: 一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态</li>
<li>PriorityBlockingQueue: 一个具有优先级的<strong>无限</strong>阻塞队列</li>
</ul>
<p>3）maximumPoolSize(线程池最大数量)：线程池允许创建的最大线程数。如果队列满了，并且已经创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。<strong>如果使用无界的任务，这个参数没效果。</strong></p>
<p>4）ThreadFactory: 用于设置创建线程工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># guava提供的ThreadFactoryBuilder</div><div class="line">new ThreadFactoryBuilder().setNameFormat(&quot;XX-task-%d&quot;).build();</div></pre></td></tr></table></figure>
<p>5）RejectedExecutionHandle(饱和策略)：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。</p>
<ul>
<li>AbortPolicy: 直接抛出异常(默认处理方式）</li>
<li>CallerRunsPolicy: 只用调用者所在线程来执行任务</li>
<li>DiscardOldestPolicy: 丢弃队列里的最近一个任务，并执行当前任务；</li>
<li>DiscardPolicy: 不处理，丢弃掉</li>
</ul>
<p>6）keepAliveTime(线程活动保持时间)：线程池的工作线程空闲后，保持存活的时间。如果任务多，单个任务执行时间短，可以调大时间，提高线程的利用率。</p>
<h4 id="2-实战"><a href="#2-实战" class="headerlink" title="2) 实战"></a>2) 实战</h4><h5 id="创建线程池-amp-提交任务"><a href="#创建线程池-amp-提交任务" class="headerlink" title="创建线程池 &amp; 提交任务"></a>创建线程池 &amp; 提交任务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static final int CORE_POOL_SIZE = 1;</div><div class="line">    private static final int MAXI_MUM_POOL_SIZE = 1;</div><div class="line">    private static final long KEEP_ALIVE_TIME = 1;</div><div class="line">    private static final TimeUnit TIME_UNIT = TimeUnit.SECONDS;</div><div class="line">    private static BlockingQueue&lt;Runnable&gt; workQueue = new ArrayBlockingQueue(1);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ThreadPoolExecutor threadPools = new ThreadPoolExecutor(CORE_POOL_SIZE,MAXI_MUM_POOL_SIZE,KEEP_ALIVE_TIME,TIME_UNIT,workQueue);</div><div class="line">        threadPools.execute(() -&gt; &#123;</div><div class="line">            System.out.println(&quot;ThreadName:&quot; + Thread.currentThread().getName() + &quot; currentTime =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;);</div><div class="line">        // 关闭线程池</div><div class="line">        threadPools.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// ThreadName:pool-1-thread-1 currentTime =&gt; 1494055661705</div></pre></td></tr></table></figure>
<h5 id="提交任务过多，触发饱和策略，默认执行AbortPolicy"><a href="#提交任务过多，触发饱和策略，默认执行AbortPolicy" class="headerlink" title="提交任务过多，触发饱和策略，默认执行AbortPolicy"></a>提交任务过多，触发饱和策略，默认执行<code>AbortPolicy</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static final int CORE_POOL_SIZE = 1;</div><div class="line">    private static final int MAXI_MUM_POOL_SIZE = 1;</div><div class="line">    private static final long KEEP_ALIVE_TIME = 1;</div><div class="line">    private static final TimeUnit TIME_UNIT = TimeUnit.SECONDS;</div><div class="line">    private static BlockingQueue&lt;Runnable&gt; workQueue = new ArrayBlockingQueue(1);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ThreadPoolExecutor threadPools = new ThreadPoolExecutor(CORE_POOL_SIZE,MAXI_MUM_POOL_SIZE,KEEP_ALIVE_TIME,TIME_UNIT,workQueue);</div><div class="line"></div><div class="line">        for (int i=0; i&lt;10000; i++) &#123;</div><div class="line">            threadPools.execute(() -&gt; &#123;</div><div class="line">                System.out.println(&quot;ThreadName:&quot; + Thread.currentThread().getName() + &quot; currentTime =&gt; &quot; + System.currentTimeMillis());</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 关闭线程池</div><div class="line">        threadPools.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/77334009-file_1494055810091_46b3.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java并发编程的艺术 by 方腾飞</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前面试问到最多的问题就是线程池的实现原理，这一节我们将会来学习线程池实现原理及线程池的用法。&lt;/p&gt;
&lt;h3 id=&quot;1-线程池的优点&quot;&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Lock的使用</title>
    <link href="http://jianwl.com/2017/05/06/Lock%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://jianwl.com/2017/05/06/Lock的使用/</id>
    <published>2017-05-06T02:01:05.000Z</published>
    <updated>2017-05-06T05:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-ReentrantLock实现同步"><a href="#1-ReentrantLock实现同步" class="headerlink" title="1. ReentrantLock实现同步"></a>1. ReentrantLock实现同步</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MyService myService = new MyService();</div><div class="line">        MyThread t1 = new MyThread(myService);</div><div class="line">        MyThread t2 = new MyThread(myService);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：</div><div class="line">// ThreadName = Thread-0(0)</div><div class="line">// ThreadName = Thread-0(1)</div><div class="line">// ThreadName = Thread-1(0)</div><div class="line">// ThreadName = Thread-1(1)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private Lock lock = new ReentrantLock();</div><div class="line">    public void testMethod()&#123;</div><div class="line">        lock.lock();</div><div class="line">        for (int i=0;i &lt; 5; i++) &#123;</div><div class="line">            System.out.println(&quot;ThreadName = &quot; + Thread.currentThread().getName() + &quot;(&quot; + i + &quot;)&quot;);</div><div class="line">        &#125;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程MyThread</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class MyThread extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public MyThread(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>描述</p>
<p>当前线程打印完毕之后，将锁进行释放，其他线程才可以继续打印。线程打印的数据是分组打印，因为当前线程已持有锁，但线程之间打印的顺序是随机的。</p>
<h4 id="2-使用Condition实现通知部分线程"><a href="#2-使用Condition实现通知部分线程" class="headerlink" title="2. 使用Condition实现通知部分线程"></a>2. 使用Condition实现通知部分线程</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        MyService myService = new MyService();</div><div class="line">        ThreadA t1 = new ThreadA(myService);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(myService);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">        Thread.sleep(3000);</div><div class="line">        myService.siginalAll_A();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 运行结果</div><div class="line">// begin awaitA 时间为 1494037693605 ThreadName = A</div><div class="line">// begin awaitB 时间为 1494037693606 ThreadName = B</div><div class="line">// singalAll_A 时间为 1494037696608 ThreadName = main</div><div class="line">// end awaitA 时间为 1494037696608 ThreadName = A</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private Lock lock = new ReentrantLock();</div><div class="line">    public Condition conditionA = lock.newCondition();</div><div class="line">    public Condition conditionB = lock.newCondition();</div><div class="line"></div><div class="line">    public void awaitA() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;begin awaitA 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionA.await();</div><div class="line">            System.out.println(&quot;end awaitA 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void awaitB() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;begin awaitB 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionB.await();</div><div class="line">            System.out.println(&quot;end awaitB 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void siginalAll_A() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;singalAll_A 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionA.signalAll();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void siginalAll_B() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;singalAll_B 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionB.signalAll();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadA(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.awaitA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadB(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.awaitB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-实现生产者-消费者模式"><a href="#3-实现生产者-消费者模式" class="headerlink" title="3) 实现生产者/消费者模式"></a>3) 实现生产者/消费者模式</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">        public static void main(String[] args) &#123;</div><div class="line">            MyService myService = new MyService();</div><div class="line">            ThreadA t1 = new ThreadA(myService);</div><div class="line">            t1.start();</div><div class="line">            ThreadB t2 = new ThreadB(myService);</div><div class="line">            t2.start();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private ReentrantLock lock = new ReentrantLock();</div><div class="line">    private Condition condition = lock.newCondition();</div><div class="line">    private boolean hasValue = false;</div><div class="line"></div><div class="line">    public void set()&#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            while (hasValue == true) &#123;</div><div class="line">                condition.await();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;打印❤&quot;);</div><div class="line">            hasValue = true;</div><div class="line">            condition.signal();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void get()&#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            while (hasValue == false) &#123;</div><div class="line">                condition.await();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;打印❤❤❤❤❤❤&quot;);</div><div class="line">            hasValue = false;</div><div class="line">            condition.signal();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadA(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">            myService.set();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadB(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">            myService.get();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-使用Condition实现顺序执行"><a href="#4-使用Condition实现顺序执行" class="headerlink" title="4) 使用Condition实现顺序执行"></a>4) 使用Condition实现顺序执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static volatile int nextPrintWho = 1;</div><div class="line">    private static ReentrantLock lock = new ReentrantLock();</div><div class="line">    private static final Condition conditionA = lock.newCondition();</div><div class="line">    private static final Condition conditionB = lock.newCondition();</div><div class="line">    private static final Condition conditionC = lock.newCondition();</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        Thread t1  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 1)&#123;</div><div class="line">                    conditionA.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadA (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 2;</div><div class="line">                conditionB.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t2  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 2)&#123;</div><div class="line">                    conditionB.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadB (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 3;</div><div class="line">                conditionC.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t3  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 3)&#123;</div><div class="line">                    conditionB.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadC (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 1;</div><div class="line">                conditionA.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// ThreadA (0)</div><div class="line">// ThreadA (1)</div><div class="line">// ThreadA (2)</div><div class="line">// ThreadB (0)</div><div class="line">// ThreadB (1)</div><div class="line">// ThreadB (2)</div><div class="line">// ThreadC (0)</div><div class="line">// ThreadC (1)</div><div class="line">// ThreadC (2)</div></pre></td></tr></table></figure>
<h4 id="5-ReentrantReadWriteLock"><a href="#5-ReentrantReadWriteLock" class="headerlink" title="5) ReentrantReadWriteLock"></a>5) ReentrantReadWriteLock</h4><p>ReetrantLock具有完全互斥排他的效果，即同一时间只有一个线程在执行<code>ReentrantLock.lock()</code>方法后面的任务，这样做虽然保证了实例变量的线程安全性，但效率却非常低下。在<code>JDK</code>中提供了一种读写锁<code>ReentrantReadWriteLock</code>类，使用它可以加快效率，在某些不需要操作实例变量的方法中，完全可以使用读写锁<code>ReentrantReadWriteLock</code>来提升该方法的代码运行速度。</p>
<p>读写锁表示有两个锁，一个是读操作相关的锁，也成为共享锁；另一个是写操作相关的锁，也叫排他锁。也就是多个读取锁之间互不排斥，读锁与写锁互斥，写锁与写锁互斥。在没有线程进行写入操作时，进行读取操作的多个线程都可以获取读锁，而进行写入操作的线程只有在获取写锁后，才能进行写操作。即多个线程可以同时进行读取操作，但同一时刻只允许一个线程进行写入操作。</p>
<h5 id="读读共享"><a href="#读读共享" class="headerlink" title="读读共享"></a>读读共享</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果: 同一时刻，两个线程分别都获取了读锁</div><div class="line">// 获取读锁A 1494047926771</div><div class="line">// 获取读锁B 1494047926771</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line">    public void read() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.readLock().lock();</div><div class="line">                System.out.println(&quot;获取读锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(1000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.readLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="写写互斥"><a href="#写写互斥" class="headerlink" title="写写互斥"></a>写写互斥</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：线程A释放写锁后，线程B获取写锁，才能执行；</div><div class="line">// 获取写锁A 1494048231414</div><div class="line">// 获取写锁B 1494048241416</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line">    public void write() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.writeLock().lock();</div><div class="line">                System.out.println(&quot;获取写锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.writeLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="读写互斥"><a href="#读写互斥" class="headerlink" title="读写互斥"></a>读写互斥</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：读锁释放后，获取写锁，才能进行写操作。</div><div class="line">// 获取读锁A 1494048498737</div><div class="line">// 获取写锁B 1494048508739</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    public void read() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.readLock().lock();</div><div class="line">                System.out.println(&quot;获取读锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.readLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void write() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.writeLock().lock();</div><div class="line">                System.out.println(&quot;获取写锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.writeLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java多线程编程核心技术 by 高洪岩</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;1-ReentrantLock实现同步&quot;&gt;&lt;a href=&quot;#1-ReentrantLock实现同步&quot; class=&quot;header
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>多线程间的通信</title>
    <link href="http://jianwl.com/2017/05/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://jianwl.com/2017/05/04/多线程间的通信/</id>
    <published>2017-05-04T14:21:01.000Z</published>
    <updated>2017-05-04T23:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体。本文将会来学习使用<code>wait/notify</code>实现线程间的通信。</p>
<h3 id="1-wait-notify机制的实现"><a href="#1-wait-notify机制的实现" class="headerlink" title="1. wait/notify机制的实现"></a>1. <code>wait/notify</code>机制的实现</h3><p>方法<code>wait</code>的作用是使当前执行代码的线程进行等待，<code>wait</code>方法是<code>Object</code>类的方法，该方法用来将当前线程置入“预执行队列”中，并且在<code>wait()</code>所在的代码行处停止执行，直到接到通知或被中断为止。在调用<code>wait()</code>之前，<strong>线程必须获取该对象的对象级别的锁，即只能在synchronized方法或同步块中调用wait()方法。</strong> 在执行<code>wait()</code>方法后，当前线程释放锁，在从<code>wait()</code>放回前，线程与其他线程竞争重新获得锁。<strong>如果调用wait()时，没有持有适当的锁，则抛出illegalMonitorStateException，它是RuntimeException的子类，因此不需要try-catch语句进行捕捉。</strong></p>
<p><code>notify()</code>方法也要在<strong>synchronized或同步块中调用</strong>，即在调用前，线程也必须获得该对象的对象级别锁。如果调用<code>notify()</code>时没有持有适当的锁，也会抛出<code>illegalMonitorStateException</code>。该方法用来通知那些可能等待该对象的对象锁的其他线程，如果有多个线程等待，则由线程规划器随机挑选出其中一个呈wait状态的线程，对其发出通知notify，并使它等待获取该对象的对象锁。需要说明的是，<strong>在执行notify()方法后，当前线程不会马上释放该对象锁，呈wait状态的线程也并不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，也就是退出synchronized代码块后，当前线程才会释放锁，而呈wait状态所在的线程才可以获取对象锁。</strong> 当第一个获得该对象锁的wait线程执行完毕之后，它会释放该对象锁，如果此时该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有该对象的通知，还会继续阻塞在wait状态，直到这个对象发出一个<code>notify或notifyAll</code>。</p>
<p>用一句话来总结wait和notify: wait是线程停止运行，而notify是停止的线程继续运行。</p>
<h3 id="2-实战"><a href="#2-实战" class="headerlink" title="2. 实战"></a>2. 实战</h3><h4 id="1）不在同步方法内执行wait，报错"><a href="#1）不在同步方法内执行wait，报错" class="headerlink" title="1）不在同步方法内执行wait，报错"></a>1）不在同步方法内执行<code>wait</code>，报错</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/59950818-file_1493909988683_133c4.png" alt=""></p>
<h4 id="2）暂停线程wait"><a href="#2）暂停线程wait" class="headerlink" title="2）暂停线程wait"></a>2）暂停线程<code>wait</code></h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/39178586-file_1493910208703_13eb9.png" alt=""></p>
<h4 id="3-notify-wait"><a href="#3-notify-wait" class="headerlink" title="3) notify/wait"></a>3) <code>notify/wait</code></h4><p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Object object;</div><div class="line">    public ThreadA(Object object)&#123;</div><div class="line">        super();</div><div class="line">        this.object = object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try&#123;</div><div class="line">            synchronized (object)&#123;</div><div class="line">                System.out.println(&quot;start wait time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">                object.wait();</div><div class="line">                System.out.println(&quot;end wait time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread&#123;</div><div class="line">    private Object object;</div><div class="line">    public ThreadB(Object object)&#123;</div><div class="line">        super();</div><div class="line">        this.object = object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (object)&#123;</div><div class="line">            System.out.println(&quot;start notify time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            object.notify();</div><div class="line">            System.out.println(&quot;end notify time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try&#123;</div><div class="line">            Object object = new Object();</div><div class="line">            ThreadA t1 = new ThreadA(object);</div><div class="line">            t1.start();</div><div class="line">            Thread.sleep(3000);</div><div class="line">            ThreadB t2 = new ThreadB(object);</div><div class="line">            t2.start();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// start wait time =&gt; 1493910683445</div><div class="line">// start notify time =&gt; 1493910686449</div><div class="line">// end notify time =&gt; 1493910686449</div><div class="line">// end wait time =&gt; 1493910686449</div></pre></td></tr></table></figure>
<p>特别注意一点，执行notify方法时，需要等待执行notify的线程，退出synchronized方法，抛出对象锁，wait获取对象锁，才能唤醒被wait的线程。</p>
<h3 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h3><ol>
<li>java多线程核心技术 by 高洪岩</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体。本文将会来学习使用&lt;code&gt;wait/notify&lt;/cod
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>对象及变量的并发访问</title>
    <link href="http://jianwl.com/2017/05/03/%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/"/>
    <id>http://jianwl.com/2017/05/03/对象及变量的并发访问/</id>
    <published>2017-05-03T14:11:59.000Z</published>
    <updated>2017-05-03T16:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-线程不安全"><a href="#1-线程不安全" class="headerlink" title="1) 线程不安全"></a>1) 线程不安全</h4><p>共享变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class HasSelfPrivateNum &#123;</div><div class="line">    private int num = 0;</div><div class="line">    public void addI(String username) &#123;</div><div class="line">        try &#123;</div><div class="line">            if (username.equals(&quot;a&quot;)) &#123;</div><div class="line">                num = 100;</div><div class="line">                System.out.println(&quot;a set over!&quot;);</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125;else &#123;</div><div class="line">                num = 200;</div><div class="line">                System.out.println(&quot;b set over!&quot;);</div><div class="line">            &#125;</div><div class="line">            System.out.println(username + &quot; num = &quot; + num);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private HasSelfPrivateNum numRef;</div><div class="line"></div><div class="line">    public ThreadA(HasSelfPrivateNum numRef) &#123;</div><div class="line">        super();</div><div class="line">        this.numRef = numRef;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        numRef.addI(&quot;a&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private HasSelfPrivateNum numRef;</div><div class="line"></div><div class="line">    public ThreadB(HasSelfPrivateNum numRef) &#123;</div><div class="line">        super();</div><div class="line">        this.numRef = numRef;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        numRef.addI(&quot;b&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        HasSelfPrivateNum numRef = new HasSelfPrivateNum();</div><div class="line">        ThreadA t1 = new ThreadA(numRef);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(numRef);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结果：</div><div class="line">// a set over!</div><div class="line">// b set over!</div><div class="line">// b num = 200</div><div class="line">// a num = 200</div></pre></td></tr></table></figure>
<p>描述</p>
<p>线程A执行run方法，运行到<code>Thread.sleep(2000);</code>这个语句时，线程B也执行run方法，运行到<code>System.out.println(username + &quot; num = &quot; + num);</code>，此时共享变量已被线程B覆盖，再回到线程A时，输出的共享变量值，实际是线程B的赋值结果。</p>
<p>解决</p>
<p>共享变量<code>addI</code>方法前增加<code>synchronized</code>关键字即可。</p>
<h4 id="2-可重入锁"><a href="#2-可重入锁" class="headerlink" title="2) 可重入锁"></a>2) 可重入锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    public synchronized void service1()&#123;</div><div class="line">        System.out.println(&quot;service1&quot;);</div><div class="line">        service2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void service2()&#123;</div><div class="line">        System.out.println(&quot;service2&quot;);</div><div class="line">        service3();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void service3()&#123;</div><div class="line">        System.out.println(&quot;service3&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       new Thread(() -&gt; new Service().service1()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// service1</div><div class="line">// service2</div><div class="line">// service3</div></pre></td></tr></table></figure>
<p>描述</p>
<p>可重入锁的概念是，自己可以再次获取自己内部锁，比如有线程A获得了某个对象锁，此时对象锁还没有释放，当其再次获取这个对象的锁的时候还是可以获取的，如果<strong>不可锁重入的话</strong>，就会造成死锁。</p>
<h4 id="3）出现异常，锁自动释放"><a href="#3）出现异常，锁自动释放" class="headerlink" title="3）出现异常，锁自动释放"></a>3）出现异常，锁自动释放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    public synchronized void testMethod() &#123;</div><div class="line">        if (Thread.currentThread().getName().equals(&quot;A&quot;)) &#123;</div><div class="line">            System.out.println(&quot;ThreadName = &quot; + Thread.currentThread().getName() + &quot; run Time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            int i = 1;</div><div class="line">            while (i == 1) &#123;</div><div class="line">                if((&quot;&quot; + Math.random()).substring(0,8).equals(&quot;0.123456&quot;)) &#123;</div><div class="line">                    Integer.parseInt(&quot;A&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;else &#123;</div><div class="line">            System.out.println(&quot;ThreadName = B run Time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadA(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadB(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service,&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadA t2 = new ThreadA(service,&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/55553957-file_1493826471587_1272a.png" alt=""></p>
<p>描述</p>
<p>线程A出现异常并释放锁，线程B进入方法，正常打印，可知出现异常是锁被自动释放了。</p>
<h4 id="4-同步synchronized无限等待与解决"><a href="#4-同步synchronized无限等待与解决" class="headerlink" title="4) 同步synchronized无限等待与解决"></a>4) 同步synchronized无限等待与解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">   public synchronized void methodA()&#123;</div><div class="line">       System.out.println(&quot;methodA begin&quot;);</div><div class="line">       boolean isContinueRun = true;</div><div class="line">       while (isContinueRun) &#123;&#125;</div><div class="line">       System.out.println(&quot;methodA end&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">    public synchronized void methodB()&#123;</div><div class="line">        System.out.println(&quot;methodB begin&quot;);</div><div class="line">        System.out.println(&quot;methodB end&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadA(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.methodA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadB(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.methodB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service,&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(service,&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">methodA begin</div></pre></td></tr></table></figure>
<p>描述</p>
<p>上述情况，线程B永远也得不到运行的机会，锁死了。</p>
<p>解决</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    Object objectA = new Object();</div><div class="line">    public void methodA() &#123;</div><div class="line">        synchronized (objectA) &#123;</div><div class="line">            System.out.println(&quot;methodA begin&quot;);</div><div class="line">            boolean isContinueRun = true;</div><div class="line">            while (isContinueRun) &#123;</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;methodA end&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Object objectB = new Object();</div><div class="line">    public void methodB() &#123;</div><div class="line">        synchronized (objectB) &#123;</div><div class="line">            System.out.println(&quot;methodB begin&quot;);</div><div class="line">            System.out.println(&quot;methodB end&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用同步块，可以解决以上问题。</p>
<h4 id="5）volatile-解决异步死循环"><a href="#5）volatile-解决异步死循环" class="headerlink" title="5）volatile 解决异步死循环"></a>5）volatile 解决异步死循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RunThread extends Thread &#123;</div><div class="line">    private boolean isRunning = true;</div><div class="line"></div><div class="line">    public boolean isRunning() &#123;</div><div class="line">        return isRunning;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRunning(boolean running) &#123;</div><div class="line">        isRunning = running;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;进入run了&quot;);</div><div class="line">        while (isRunning == true)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;线程被停止了!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try&#123;</div><div class="line">            RunThread thread = new RunThread();</div><div class="line">            thread.start();</div><div class="line">            Thread.sleep(1000);</div><div class="line">            thread.setRunning(false);</div><div class="line">            System.out.println(&quot;已经赋值为false&quot;);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 进入run了</div><div class="line">// 已经赋值为false</div></pre></td></tr></table></figure>
<p>描述</p>
<p>运行后出现死循环效果，<code>System.out.println(&quot;线程被停止了!&quot;);</code> 这句代码永远不会执行。变量<code>isRunning</code>存在于公共堆栈及线程的私有堆栈中，执行<code>thread.setRunning(false);</code>只更新公共堆栈的<code>isRunning</code>，而私有堆栈中<code>isRunning</code>的值一直为<code>true</code>。</p>
<p>解决</p>
<p>设置变量<code>isRunning</code>时，加个关键字<code>volatitle</code>，它的作用就是当线程访问<code>isRunning</code>这个变量时，强制性从公共堆栈中进行取值。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/69232462-file_1493829649793_b809.png" alt=""></p>
<h4 id="6-synchronized-和-volatile区别"><a href="#6-synchronized-和-volatile区别" class="headerlink" title="6) synchronized 和 volatile区别"></a>6) synchronized 和 volatile区别</h4><ol>
<li>关键字<code>volatile</code>是线程同步的轻量级实现，所以<code>volatile</code>性能肯定比<code>synchronized</code>要好，并且<code>volatile</code>只能修饰于变量，而<code>synchronized</code>可以修饰方法、以及代码块。随着<code>JDK</code>新版本的发布，<code>synchronized</code>关键字在执行效率上得到很大的提升。</li>
<li>多线程访问volatile不会发生阻塞，而<code>synchronized</code>会出现阻塞。</li>
<li>volatile能保证数据的可见性，但不能保证原子性；而synchronized可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公共内存中的数据做同步。</li>
<li>再次重申，关键字volatile解决的是多个线程之间的可见性；而synchronized解决的是，多个线程之间访问资源的同步性。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java多线程编程核心技术 by 高洪岩</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;1-线程不安全&quot;&gt;&lt;a href=&quot;#1-线程不安全&quot; class=&quot;headerlink&quot; title=&quot;1) 线程不安全&quot;&gt;&lt;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>多线程之join</title>
    <link href="http://jianwl.com/2017/05/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bjoin/"/>
    <id>http://jianwl.com/2017/05/02/多线程之join/</id>
    <published>2017-05-02T15:16:31.000Z</published>
    <updated>2017-05-03T00:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>thread.join</code>把指定线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程，比如在线程B中调用线程A的join方法，直到线程A执行完毕后，才会继续执行线程B。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t.join(); // 线程t执行完毕之后，再执行B线程，假设当前为线程B；</div><div class="line">t.join(1000); // 等待t线程1000毫秒之后，再执行线程B，假设当前为线程B</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-thread-join"><a href="#1-thread-join" class="headerlink" title="1. thread.join()"></a>1. thread.join()</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/25776764-file_1493769433016_726d.png" alt=""></p>
<p>上述代码可能出现两种结果，主线程执行<code>System.out.println(&quot;== main ==&quot;)</code>这条语句时，子线程可能已运行也可能没有。使用<code>join</code>方法，能够让子线程，在执行主线程之前执行完毕。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/22949143-file_1493769510138_e7bf.png" alt="">   </p>
<h4 id="2-thread-join-毫秒"><a href="#2-thread-join-毫秒" class="headerlink" title="2. thread.join(毫秒)"></a>2. thread.join(毫秒)</h4><h5 id="子线程t等待100毫秒之后，再执行主线程"><a href="#子线程t等待100毫秒之后，再执行主线程" class="headerlink" title="子线程t等待100毫秒之后，再执行主线程"></a>子线程t等待100毫秒之后，再执行主线程</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/64963858-file_1493769576917_7717.png" alt=""></p>
<h5 id="子线程t等待1000毫秒之后，再执行主线程"><a href="#子线程t等待1000毫秒之后，再执行主线程" class="headerlink" title="子线程t等待1000毫秒之后，再执行主线程"></a>子线程t等待1000毫秒之后，再执行主线程</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/94693111-file_1493769617860_8412.png" alt="">                                                                                                              </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;thread.join&lt;/code&gt;把指定线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程，比如在线程B中调用线程A的join方法，直到线程A执行完毕后，才会继续执行线程B。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局入门(二)</title>
    <link href="http://jianwl.com/2017/05/01/Flex%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <id>http://jianwl.com/2017/05/01/Flex布局入门-二/</id>
    <published>2017-05-01T05:22:50.000Z</published>
    <updated>2017-05-01T11:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章介绍了Flex布局的语法，今天介绍常见布局的Flex写法。</p>
<p>你会看到，不管是什么布局，Flex往往都可以几行命令搞定。</p>
<p><img src="http://i1.piimg.com/567571/2f98d7972439d234.png" alt=""></p>
<h3 id="骰子的布局"><a href="#骰子的布局" class="headerlink" title="骰子的布局"></a>骰子的布局</h3><p>骰子的一面，最多可以放置9个点。</p>
<p><img src="http://i4.buimg.com/567571/5a8e1061daaf4aee.png" alt=""></p>
<p>下面，就来看看Flex如何实现，从1个点到9个点的布局，你可以到<a href="http://codepen.io/LandonSchropp/pen/KpzzGo" target="_blank" rel="external">codepen</a>查看Demo.</p>
<p><img src="http://i2.muimg.com/567571/111c729a8c94fa04.png" alt=""></p>
<p>如果不加说明，本机的HTML模板益率如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">	&lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，div元素(代表骰子的一个面)是Flex容器，span元素(代表一个点)是Flex项目，如果有多个项目，就要添加多个span元素。一次类推。</p>
<h4 id="1-单项目"><a href="#1-单项目" class="headerlink" title="1) 单项目"></a>1) 单项目</h4><p>首先，只有左上角1个点的情况，Flex布局默认就是首行左对齐，所以一行代码就过了。</p>
<p><img src="http://i1.piimg.com/567571/fa9f94ebcae1b9f6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置项目的对齐方式，就能实现居中对齐和右对齐。</p>
<p><img src="http://i1.piimg.com/567571/fd942caa2b481a06.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/fe59e20f993b6e11.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置交叉轴对齐方式，可以垂直移动主轴</p>
<p><img src="http://i1.piimg.com/567571/c4477f6e9d87aa13.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/fbd32760f95ab206.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/d195c044863d8f54.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/b1073016bbc8bdb6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: flex-end;</div><div class="line">	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-双项目"><a href="#2-双项目" class="headerlink" title="2) 双项目"></a>2) 双项目</h4><p><img src="http://i1.piimg.com/567571/fc13c83dc1527a55.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">  	justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/7aa8f2626292a919.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/1802864126ddaced.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">  	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/ad246ae685532521.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">  	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/2ad96bcc4bf29343.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 父元素的第二个子元素的item,居中：</div><div class="line">.item:nth-child(2) &#123;</div><div class="line">  align-self: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/fbaafaec0a26603d.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(2) &#123;</div><div class="line">  align-self: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-三项目"><a href="#3-三项目" class="headerlink" title="3) 三项目"></a>3) 三项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/29159668-file_1493621836732_7df3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(2) &#123;</div><div class="line">	align-self: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(3) &#123;</div><div class="line">	align-self: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-四项目"><a href="#4-四项目" class="headerlink" title="4) 四项目"></a>4) 四项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/94995716-file_1493621929171_60b5.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  justify-content: flex-end;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/4746522-file_1493621982783_1f7b.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.column &#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display: flex;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-六项目"><a href="#5-六项目" class="headerlink" title="5) 六项目"></a>5) 六项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/55582845-file_1493622078669_9d03.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/90816185-file_1493622163027_fa48.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/13462133-file_1493622255129_e5ad.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row&#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(2)&#123;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(3)&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-九项目"><a href="#6-九项目" class="headerlink" title="6) 九项目"></a>6) 九项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/43687614-file_1493622306258_14ec8.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>最简单的网格布局，就是平均分布，在容器里面平均分配空间，跟上面的骰子布局很像，但是需要设置项目的自动缩放。</p>
<h4 id="1-基本网格布局"><a href="#1-基本网格布局" class="headerlink" title="1) 基本网格布局"></a>1) 基本网格布局</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/61368010-file_1493635693058_8d98.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.Grid &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-百分比布局"><a href="#2-百分比布局" class="headerlink" title="2) 百分比布局"></a>2) 百分比布局</h4><p>某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/2000422-file_1493635816791_7197.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of4&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of3&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.Grid &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-full &#123;</div><div class="line">  flex: 0 0 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of2 &#123;</div><div class="line">  flex: 0 0 50%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of3 &#123;</div><div class="line">  flex: 0 0 33.3333%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of4 &#123;</div><div class="line">  flex: 0 0 25%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>圣杯布局(Holy Grail Layout)指的是一种最常见的网站布局，页面从上到下，分成三个部分：头部(header)，躯干(body)，尾部(footer)。其中躯干又水平分成三栏，从左到右为:导航、主栏、副栏。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/32149229-file_1493636028511_11eac.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body class=&quot;HolyGrail&quot;&gt;</div><div class="line">  &lt;header&gt;...&lt;/header&gt;</div><div class="line">  &lt;div class=&quot;HolyGrail-body&quot;&gt;</div><div class="line">    &lt;main class=&quot;HolyGrail-content&quot;&gt;...&lt;/main&gt;</div><div class="line">    &lt;nav class=&quot;HolyGrail-nav&quot;&gt;...&lt;/nav&gt;</div><div class="line">    &lt;aside class=&quot;HolyGrail-ads&quot;&gt;...&lt;/aside&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;footer&gt;...&lt;/footer&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.HolyGrail &#123;</div><div class="line">  display: flex;</div><div class="line">  min-height: 100vh;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line">header,</div><div class="line">footer &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-body &#123;</div><div class="line">  display: flex;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-content &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-nav, .HolyGrail-ads &#123;</div><div class="line">  /* 两个边栏的宽度设为12em */</div><div class="line">  flex: 0 0 12em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-nav &#123;</div><div class="line">  /* 导航放到最左边 */</div><div class="line">  order: -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是小屏幕，躯干的三栏会自动变为垂直叠加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@media (max-width: 768px) &#123;</div><div class="line">  .HolyGrail-body &#123;</div><div class="line">    flex-direction: column;</div><div class="line">    flex: 1;</div><div class="line">  &#125;</div><div class="line">  .HolyGrail-nav,</div><div class="line">  .HolyGrail-ads,</div><div class="line">  .HolyGrail-content &#123;</div><div class="line">    flex: auto;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输入框的布局"><a href="#输入框的布局" class="headerlink" title="输入框的布局"></a>输入框的布局</h3><p>我们常常需要在输入框的前方提示添加提示，后方添加按钮。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/93489209-file_1493636187353_b89c.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;InputAddOn&quot;&gt;</div><div class="line">  &lt;span class=&quot;InputAddOn-item&quot;&gt;...&lt;/span&gt;</div><div class="line">  &lt;input class=&quot;InputAddOn-field&quot;&gt;</div><div class="line">  &lt;button class=&quot;InputAddOn-item&quot;&gt;...&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.InputAddOn &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.InputAddOn-field &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="悬挂式布局"><a href="#悬挂式布局" class="headerlink" title="悬挂式布局"></a>悬挂式布局</h3><p>有时，主栏的左侧或右侧，需要添加一个图片栏。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/41165031-file_1493636283290_9b33.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Media&quot;&gt;</div><div class="line">  &lt;img class=&quot;Media-figure&quot; src=&quot;&quot; alt=&quot;&quot;&gt;</div><div class="line">  &lt;p class=&quot;Media-body&quot;&gt;...&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.Media &#123;</div><div class="line">  display: flex;</div><div class="line">  align-items: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Media-figure &#123;</div><div class="line">  margin-right: 1em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Media-body &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="固定的底栏"><a href="#固定的底栏" class="headerlink" title="固定的底栏"></a>固定的底栏</h3><p>有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间，这时可以采用Flex布局，让底栏总是出现在页面的底部。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/14451373-file_1493636429347_15e58.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body class=&quot;Site&quot;&gt;</div><div class="line">  &lt;header&gt;...&lt;/header&gt;</div><div class="line">  &lt;main class=&quot;Site-content&quot;&gt;...&lt;/main&gt;</div><div class="line">  &lt;footer&gt;...&lt;/footer&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.Site &#123;</div><div class="line">  display: flex;</div><div class="line">  min-height: 100vh;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Site-content &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>每行的项目数固定，会自行分行。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/51166331-file_1493636541332_edb5.png" alt=""></p>
<p>CSS的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 150px;</div><div class="line">  background-color: black;</div><div class="line">  display: flex;</div><div class="line">  flex-flow: row wrap;</div><div class="line">  align-content: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.child &#123;</div><div class="line">  box-sizing: border-box;</div><div class="line">  background-color: white;</div><div class="line">  flex: 0 0 25%;</div><div class="line">  height: 50px;</div><div class="line">  border: 1px solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇 by 阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇文章介绍了Flex布局的语法，今天介绍常见布局的Flex写法。&lt;/p&gt;
&lt;p&gt;你会看到，不管是什么布局，Flex往往都可以几行命令搞定
    
    </summary>
    
      <category term="CSS" scheme="http://jianwl.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://jianwl.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局入门(一)</title>
    <link href="http://jianwl.com/2017/05/01/Flex%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8-%E4%B8%80/"/>
    <id>http://jianwl.com/2017/05/01/Flex布局入门-一/</id>
    <published>2017-05-01T02:44:08.000Z</published>
    <updated>2017-05-01T04:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网页布局(layout)是<code>CSS</code>的一个重点应用</p>
<p><img src="http://i2.muimg.com/567571/93944116677e563b.png" alt=""></p>
<p>布局的传统解决方案，基于盒状模型，依赖<code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便。比如，垂直居中就不容易实现。</p>
<p>2009年，W3C提出一种新的方案 – Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<p>Flex布局将成为未来布局的首选方案，本文介绍它的语法，下一篇文章给出常见布局的<code>Flex</code>写法。</p>
<h3 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h3><p><code>Flex</code>是<code>Flexible Box</code>，意为“弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>行内元素也可以使用Flex布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Webkit内核浏览器，必须加上<code>-webkit</code>前缀。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: -webkit-flex; /* Safari */</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性都将失效。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>采用Flex布局的元素，称为Flex容器(flex container)，简称“容器”。它的所有子元素自动称为容器成员，称为Flex项目(flex item)，简称“项目”。</p>
<p><img src="http://i2.muimg.com/567571/288f8307e2da445e.png" alt=""></p>
<p>容器默认存在两根轴：水平的主轴(main axis)和垂直的交叉轴(crow axis)。主轴的开始位置(与边框的交叉点)叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认延主轴排序，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><p>以下6个属性值设置在容器上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flex-direction</div><div class="line">flex-wrap</div><div class="line">flex-flow</div><div class="line">jusitify-content</div><div class="line">align-items</div><div class="line">align-content</div></pre></td></tr></table></figure>
<h4 id="1-flex-direction属性"><a href="#1-flex-direction属性" class="headerlink" title="1) flex-direction属性"></a>1) flex-direction属性</h4><p><code>flex-direction</code>属性决定主轴的方向(即项目的排列方向)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/3ea0e291bfd8a635.png" alt=""></p>
<p>它可能有4个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">row(默认值)： 主轴的水平方向，起点在左端。</div><div class="line"></div><div class="line">row-reverse: 主轴的水平方向，起点在右端。</div><div class="line"></div><div class="line">column: 主轴为垂直方向，起点在上沿</div><div class="line"></div><div class="line">column-reverse: 主轴为垂直方向，起点在下沿。</div></pre></td></tr></table></figure>
<h4 id="2）flex-wrap属性"><a href="#2）flex-wrap属性" class="headerlink" title="2）flex-wrap属性"></a>2）flex-wrap属性</h4><p>默认情况下，项目都排在一条线(又称为“轴线”)上，<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p><img src="http://i4.buimg.com/567571/8572c78874a5c6b3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能取三个值:</p>
<p>(1) <code>nowrap</code>(默认)：不换行。</p>
<p><img src="http://i4.buimg.com/567571/afd3df650ad2b30d.png" alt=""></p>
<p>(2) <code>wrap</code>：换行，第一行在上方</p>
<p><img src="http://i1.piimg.com/567571/f99a004cf748aaaf.png" alt=""></p>
<p>(3) <code>wrap-reverse</code>: 换行，第一行在下方。</p>
<p><img src="http://i4.buimg.com/567571/c748e0c92c0a3fa5.png" alt=""></p>
<h4 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3) flex-flow"></a>3) flex-flow</h4><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-justify-content属性"><a href="#4-justify-content属性" class="headerlink" title="4) justify-content属性"></a>4) justify-content属性</h4><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/75861f2b490af1a7.png" alt=""></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关，下面假设主轴为从左到右。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">flex-start(默认值)： 左对齐</div><div class="line"></div><div class="line">flex-end: 右对齐</div><div class="line"></div><div class="line">center: 居中</div><div class="line"></div><div class="line">space-between: 两端对齐，项目之间的间隔都相等</div><div class="line"></div><div class="line">space-around: 每个项目两侧的间隔相等，所以项目之间的间隔比项目与边框的间隔大一倍。</div></pre></td></tr></table></figure>
<h4 id="5-align-items属性"><a href="#5-align-items属性" class="headerlink" title="5) align-items属性"></a>5) align-items属性</h4><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/6d0bc32cb1eb12fc.png" alt=""></p>
<p>它可能取5个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flex-start: 交叉轴的起点对齐。</div><div class="line">flex-end: 交叉轴的终点对齐。</div><div class="line">center: 交叉轴的中点对齐。</div><div class="line">baseline: 项目的第一行文字的基线对齐。</div><div class="line">stretch(默认值): 如果项目未设置高度或设为auto，将占满整个容器的高度。</div></pre></td></tr></table></figure>
<h4 id="6）align-content属性"><a href="#6）align-content属性" class="headerlink" title="6）align-content属性"></a>6）align-content属性</h4><p><code>align-content</code>属性定义了多跟轴线的对齐方式，如果项目只有一个轴线，该属性不起作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/f8e7c4d69794f23a.png" alt=""></p>
<p>该属性值可能取6个值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flex-start: 与交叉轴的起点对齐。</div><div class="line">flex-end: 与交叉轴的终点对齐。</div><div class="line">center: 与交叉轴的中点对齐。</div><div class="line">space-between:与交叉轴两端对齐，轴线之间的间隔平均分布</div><div class="line">space-around:每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。</div><div class="line">stretch(默认值): 轴线占满整个交叉轴。</div></pre></td></tr></table></figure>
<h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><p>以下6个属性设置在项目上.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">order</div><div class="line"></div><div class="line">flex-grow</div><div class="line"></div><div class="line">flex-shrink</div><div class="line"></div><div class="line">flex-basis</div><div class="line"></div><div class="line">flex</div><div class="line"></div><div class="line">align-self</div></pre></td></tr></table></figure>
<h4 id="1-order属性"><a href="#1-order属性" class="headerlink" title="1) order属性"></a>1) order属性</h4><p><code>order</code>属性定义项目的排列顺序，数值越小，排列越靠前，默认为0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line"> order: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/7f587ff9c90bbb53.png" alt=""></p>
<h4 id="2-flex-grow属性"><a href="#2-flex-grow属性" class="headerlink" title="2) flex-grow属性"></a>2) flex-grow属性</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-grow: &lt;number&gt;; /* default */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/1970f38cd94a26f5.png" alt=""></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间(如果有的话)，如果一个项目的<code>flex-grow</code>属性为2，其他属性都为1，则牵着占据的剩余空间将比其他项多一倍。</p>
<h4 id="3）flex-shrink属性"><a href="#3）flex-shrink属性" class="headerlink" title="3）flex-shrink属性"></a>3）flex-shrink属性</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-shrink: &lt;number&gt;; /* default 1*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/359ac6d037d1a438.png" alt=""></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小，如果一个项目的<code>flex-shrink</code>属性为0，其他项都为1，则空间不足时，前者会不断缩小。负值对该属性无效。</p>
<h4 id="4）flex-basis属性"><a href="#4）flex-basis属性" class="headerlink" title="4）flex-basis属性"></a>4）flex-basis属性</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间(main size)。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>,即项目的本来大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值(比如350px)，则项目将占据固定空间。</p>
<h4 id="5）flex属性"><a href="#5）flex属性" class="headerlink" title="5）flex属性"></a>5）flex属性</h4><p><code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>，后两个属性可选。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex: none | [&lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该属性有两个快捷键：<code>auto</code>(<code>1 1 auto</code>)和none(<code>0 0  auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="6-align-self-属性"><a href="#6-align-self-属性" class="headerlink" title="6) align-self 属性"></a>6) align-self 属性</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性，默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/ace048e9e73b8add.png" alt=""></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程 by 阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;网页布局(layout)是&lt;code&gt;CSS&lt;/code&gt;的一个重点应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.muimg.
    
    </summary>
    
      <category term="CSS" scheme="http://jianwl.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://jianwl.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS入门</title>
    <link href="http://jianwl.com/2017/04/29/CSS%E5%85%A5%E9%97%A8/"/>
    <id>http://jianwl.com/2017/04/29/CSS入门/</id>
    <published>2017-04-29T02:05:00.000Z</published>
    <updated>2017-04-29T07:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是CSS"><a href="#1-什么是CSS" class="headerlink" title="1. 什么是CSS"></a>1. 什么是CSS</h3><p><code>CSS</code>是一门指定文档该如何呈现给用户的语言。当你的浏览器请求页面时，服务器会查询数据库生成文档，将散落在众多文件中的文档碎片搜集起来。 </p>
<p><code>创建一个文档范例：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">		&lt;title&gt;Sample document&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;strong&gt;c&lt;/strong&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="2-为何使用CSS？"><a href="#2-为何使用CSS？" class="headerlink" title="2.为何使用CSS？"></a>2.为何使用CSS？</h3><p>CSS将文档信息的内容和如何展示它的细节相分离，使得避免重复、更容易维护，同时实现为了不同的目的，使用不同的样式而内容相同。</p>
<h4 id="1-连接文档和样式表"><a href="#1-连接文档和样式表" class="headerlink" title="1) 连接文档和样式表"></a>1) 连接文档和样式表</h4><p>在<code>style1.css</code>文件中保存如下行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strong &#123;color:red;&#125;</div></pre></td></tr></table></figure>
<p>在文档中引入样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">		&lt;title&gt;Sample document&lt;/title&gt;</div><div class="line">		&lt;link rel=&quot;stylesheet&quot; href=&quot;style1.css&quot;&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;strong&gt;c&lt;/strong&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="3-CSS基础知识"><a href="#3-CSS基础知识" class="headerlink" title="3. CSS基础知识"></a>3. CSS基础知识</h3><h4 id="1-盒模型"><a href="#1-盒模型" class="headerlink" title="1) 盒模型"></a>1) 盒模型</h4><p><img src="http://i2.muimg.com/567571/867bf24d7d50d14b.png" alt=""></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> width</td>
<td>内容盒的宽度</td>
</tr>
<tr>
<td> height</td>
<td>内容盒的高度</td>
</tr>
<tr>
<td> padding</td>
<td>内边距，内容盒的外边缘与边框的内边缘之间</td>
</tr>
<tr>
<td> border</td>
<td>位于内边距的外边缘以及外边距的内边缘之间</td>
</tr>
<tr>
<td> margin</td>
<td>外边距</td>
</tr>
</tbody>
</table>
<p> <code>实战</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	body &#123;</div><div class="line">	  margin: 0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	#wrapper * &#123;</div><div class="line">	  padding: 20px;</div><div class="line">	  font-size: 20px;</div><div class="line">	  border: 20px solid rgba(0,0,0,0.5);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* specific boxes */</div><div class="line"></div><div class="line">	#wrapper header, #wrapper footer &#123;</div><div class="line">	  background-color: blue;</div><div class="line">	  color: white;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	#wrapper main &#123;</div><div class="line">	  background-color: yellow;</div><div class="line">	&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div id=&quot;wrapper&quot;&gt;</div><div class="line">		  &lt;header&gt;Header&lt;/header&gt;</div><div class="line">		  &lt;main&gt;Main content&lt;/main&gt;</div><div class="line">		  &lt;footer&gt;Footer&lt;/footer&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i1.piimg.com/567571/f29c0ef1d9e3a821.png" alt=""></p>
<p><code>要点：</code></p>
<ul>
<li>当内容的宽度<strong>大于</strong>盒模型的<strong>总宽度</strong>时，<strong>溢出内容如何处理？</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># overflow属性，三种属性值</div><div class="line">auto: 溢出内容会自动隐藏，单行显示，变滚轮显示，让用户可以看到所有内容。</div><div class="line">hidden: 溢出内容自动隐藏</div><div class="line">visible: 溢出内容展示在盒模型之外，这个配置是默认的；</div></pre></td></tr></table></figure>
<ul>
<li>只有块级元素，才能设置宽度，长度等属性，CSS设置为块级元素，用<code>display</code>属性。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># display有三个属性值</div><div class="line">block 「块盒」：整个盒模型是基于块盒之上的，块盒内可以设置自己的长、宽。</div><div class="line">inline 「行内盒」：在行内盒中设置长、宽无效，border、padding是基于text的。</div><div class="line">inline-block「行内块状盒」：结合了block与inline两种属性</div></pre></td></tr></table></figure>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		p &#123;</div><div class="line">		  padding : 1em;</div><div class="line">		  border  : 1px solid black;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		span &#123;</div><div class="line">		  padding : 0.5em;</div><div class="line">		  border  : 1px solid green;</div><div class="line">		  height: 50px;</div><div class="line">		  /* That makes the box visible, regardless of its type */</div><div class="line">		  background-color: yellow;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.inline       &#123; display: inline;       &#125;</div><div class="line">		.block        &#123; display: block;        &#125;</div><div class="line">		.inline-block &#123; display: inline-block; &#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;</div><div class="line">		   Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		   &lt;span class=&quot;inline&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		   Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line"></div><div class="line">		&lt;p&gt;</div><div class="line">		  Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		  &lt;span class=&quot;block&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line"></div><div class="line">		&lt;p&gt;</div><div class="line">		  Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		  &lt;span class=&quot;inline-block&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>演示效果：</p>
<p><img src="http://i4.buimg.com/567571/f6bf997532ac0d5e.png" alt=""></p>
<h4 id="2）文本对齐"><a href="#2）文本对齐" class="headerlink" title="2）文本对齐"></a>2）文本对齐</h4><p><code>text-align</code>属性终于控制文本对齐，它有以下4个属性值；</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">left: 文本左对齐</div><div class="line">right: 文本右对齐</div><div class="line">center: 文本居中对齐</div><div class="line">justify: 文本扩展使得所有行的文本宽度一致</div></pre></td></tr></table></figure>
<p> <code>实战:</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		p &#123;</div><div class="line">		  padding : 1em;</div><div class="line">		  border  : 1px solid black;</div><div class="line">		&#125;</div><div class="line">		.right  &#123; text-align: right; &#125;</div><div class="line">		.center &#123; text-align: center;        &#125;</div><div class="line">		.left &#123; text-align: left; &#125;</div><div class="line">		.justify&#123; text-align: justify; &#125;</div><div class="line">		strong &#123;color: red;&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Learn CSS&lt;/strong&gt;&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;left&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;right&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;justify&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p> <code>运行结果:</code></p>
<p><img src="http://i4.buimg.com/567571/bd335169ff70189e.png" alt=""></p>
<h4 id="3-链接样式"><a href="#3-链接样式" class="headerlink" title="3) 链接样式"></a>3) 链接样式</h4><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a:link</code></td>
<td>未访问时的样式</td>
</tr>
<tr>
<td> <code>a:visited</code></td>
<td>已经访问过的样式</td>
</tr>
<tr>
<td><code>a:hover</code></td>
<td>浮于链接上的样式</td>
</tr>
<tr>
<td> <code>a:focus</code></td>
<td>通过<code>tab</code>选中该链接时的样式</td>
</tr>
<tr>
<td> <code>a:active</code></td>
<td>链接被触发时的样式</td>
</tr>
</tbody>
</table>
<p> <code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		body &#123;</div><div class="line">		  width: 300px;</div><div class="line">		  margin: 0 auto;</div><div class="line">		  font-size: 1.2rem;</div><div class="line">		  font-family: sans-serif;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		p &#123;</div><div class="line">		  line-height: 1.4;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a &#123;</div><div class="line">		  outline: none;</div><div class="line">		  text-decoration: none;</div><div class="line">		  padding: 2px 1px 0;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:link &#123;</div><div class="line">		  color: #265301;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:visited &#123;</div><div class="line">		  color: #437A16;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:focus &#123;</div><div class="line">		  border-bottom: 1px solid;</div><div class="line">		  background: #BAE498;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:hover &#123;</div><div class="line">		  border-bottom: 1px solid;     </div><div class="line">		  background: #CDFEAA;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:active &#123;</div><div class="line">		  background: #265301;</div><div class="line">		  color: #CDFEAA;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;There are several browsers available, such as </div><div class="line">			&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot;&gt;MozillaFirefox&lt;/a&gt;, </div><div class="line">			&lt;a href=&quot;https://www.google.com/chrome/index.html&quot;&gt;Google Chrome&lt;/a&gt;, and</div><div class="line">			&lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot;&gt;Microsoft Edge&lt;/a&gt;.</div><div class="line">		&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p>通过<code>TAB键选中：即a:focus效果：</code></p>
<p><img src="http://i4.buimg.com/567571/e32e85f5430f6c0e.png" alt=""></p>
<h4 id="4-CSS布局"><a href="#4-CSS布局" class="headerlink" title="4) CSS布局"></a>4) CSS布局</h4><h5 id="1-浮动"><a href="#1-浮动" class="headerlink" title="1 浮动"></a>1 浮动</h5><p>浮动技术允许元素浮动到另外一个元素的左侧或右侧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># float属性有4个属性值:</div><div class="line">left: 将元素浮动到左侧</div><div class="line">right: 将元素浮动到右侧</div><div class="line">none: 默认值，不浮动</div><div class="line">inherit: 继承父元素的浮动元素</div></pre></td></tr></table></figure>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		.blockA &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid;</div><div class="line">			float:left;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockB &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid red;</div><div class="line">			float: left;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockC &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid blue;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockD &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid green;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">		</div><div class="line">	&lt;body&gt;</div><div class="line">		</div><div class="line">		&lt;div&gt;</div><div class="line">			&lt;div class=&quot;blockC&quot;&gt;C&lt;/div&gt;</div><div class="line">			&lt;div class=&quot;blockD&quot;&gt;D&lt;/div&gt;	</div><div class="line">		&lt;/div&gt;</div><div class="line">		</div><div class="line">		&lt;div&gt;			</div><div class="line">			&lt;div class=&quot;blockA&quot;&gt;A&lt;/div&gt;</div><div class="line">			&lt;div class=&quot;blockB&quot;&gt;B&lt;/div&gt;</div><div class="line">		&lt;/div&gt;		</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i2.muimg.com/567571/894f4e1cd0702d00.png" alt=""></p>
<h5 id="2-定位技术"><a href="#2-定位技术" class="headerlink" title="2 定位技术"></a>2 定位技术</h5><p>定位技术允许我们将一个元素从它在页面的原始位置准确移动到另一个位置。</p>
<p>有4中主要的定位类型：</p>
<ul>
<li>静态定位(static)是每个元素默认的属性</li>
<li>相对定位(relative): 以元素自身作比较，进行移动;</li>
<li>绝对定位(absolute): 以第一个为<code>absolute</code>元素做参考，进行移动,且绝对定位是脱离文档流的； </li>
<li>固定定位(fixed)与绝对定位非常类似，除了它是将一个元素相对浏览器视口固定。</li>
</ul>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		body &#123;</div><div class="line">		  width: 500px;</div><div class="line">		  margin: 0 auto;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		p &#123;</div><div class="line">		  background: aqua;</div><div class="line">		  border: 3px solid blue;</div><div class="line">		  padding: 10px;</div><div class="line">		  margin: 10px;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.positioned &#123;</div><div class="line">		  position: relative;</div><div class="line">		  background: yellow;</div><div class="line">		  top: 30px;</div><div class="line">		  left: 30px;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		.absolute-test&#123;</div><div class="line">			position: absolute;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.abosolute_div&#123;</div><div class="line">			position: absolute;</div><div class="line">			background: red;</div><div class="line">			text-align: center;</div><div class="line">			height: 50px;</div><div class="line">			width: 50px;</div><div class="line">			top: 0px;</div><div class="line">			left: 0px;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">		</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;I am a basic block level element.&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;positioned&quot;&gt;I am a basic block level element.&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;absolute-test&quot;&gt;I am a basic block level element.&lt;/p&gt;	</div><div class="line">		&lt;p class=&quot;abosolute_div&quot;&gt;小哈&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i1.piimg.com/567571/2f91f17c3c6ceb5a.png" alt=""></p>
<h5 id="3-z-index"><a href="#3-z-index" class="headerlink" title="3 z-index"></a>3 z-index</h5><p>当元素开始重叠，什么时候决定哪些元素出现在其他元素的顶部。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">z-index:1</div></pre></td></tr></table></figure>
<h4 id="4-优先级"><a href="#4-优先级" class="headerlink" title="4) 优先级"></a>4) 优先级</h4><p>优先级就是分配指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。而当优先级与多个CSS声明中任意一个声明的优先级相等的时候，CSS中最后的那个声明将会被应用到元素上。</p>
<p><code>1. !important</code> 规则例外</p>
<p>当在一个样式上使用<code>!important</code>规则时，该样式会覆盖CSS中任何其他的声明。</p>
<p>经验法则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">永远不要在全站范围的css上使用!important</div><div class="line">只在需要覆盖全站或外展css的特定页面中使用!important</div><div class="line">永远不要在你的插件中使用!important</div><div class="line">要优化考虑使用样式规则的优先级来解决问题而不是!important</div></pre></td></tr></table></figure>
<h4 id="5-CSS简写属性"><a href="#5-CSS简写属性" class="headerlink" title="5) CSS简写属性"></a>5) CSS简写属性</h4><h5 id="1-background有以下属性"><a href="#1-background有以下属性" class="headerlink" title="1. background有以下属性"></a>1. background有以下属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">background-color: #000;</div><div class="line">background-image: url(images/bg.gif);</div><div class="line">background-repeat: no-repeat;</div><div class="line">background-position: top right;</div></pre></td></tr></table></figure>
<p>简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: #000 url(images/bg.gif) no-repeat top right;</div></pre></td></tr></table></figure>
<h5 id="2-Font属性"><a href="#2-Font属性" class="headerlink" title="2. Font属性"></a>2. Font属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">font-style: italic;</div><div class="line">font-weight: bold;</div><div class="line">font-size: .8em;</div><div class="line">line-height: 1.2;</div><div class="line">font-family: Arial, sans-serif;</div></pre></td></tr></table></figure>
<p>简写为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font: italic bold .8em/1.2 Arial, sans-serif;</div></pre></td></tr></table></figure>
<h5 id="3-Border属性"><a href="#3-Border属性" class="headerlink" title="3. Border属性"></a>3. Border属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">border-width: 1px;</div><div class="line">border-style: solid;</div><div class="line">border-color: #000;</div></pre></td></tr></table></figure>
<p>简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border: 1px solid #000;</div></pre></td></tr></table></figure>
<h5 id="4-Margin和Padding属性"><a href="#4-Margin和Padding属性" class="headerlink" title="4. Margin和Padding属性"></a>4. Margin和Padding属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">margin-top: 10px;</div><div class="line">margin-right: 5px;</div><div class="line">margin-bottom: 10px;</div><div class="line">margin-left: 5px;</div></pre></td></tr></table></figure>
<p>简写为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">margin: 10px 5px 10px 5px;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties" target="_blank" rel="external">CSS教程 by MND</a> </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是CSS&quot;&gt;&lt;a href=&quot;#1-什么是CSS&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是CSS&quot;&gt;&lt;/a&gt;1. 什么是CSS&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt;是一门指定文档该如何呈现给用户的语言。当你的浏览器请求页
    
    </summary>
    
      <category term="CSS" scheme="http://jianwl.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://jianwl.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>缓存使用规范</title>
    <link href="http://jianwl.com/2017/04/26/%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>http://jianwl.com/2017/04/26/缓存使用规范/</id>
    <published>2017-04-26T14:01:18.000Z</published>
    <updated>2017-04-27T07:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-使用规则"><a href="#1-使用规则" class="headerlink" title="1. 使用规则"></a>1. 使用规则</h3><ul>
<li>尽量不要强依赖缓存「除非有特殊需求」，参考下面的缓存使用基本方法</li>
<li>如果缓存更新丢失会导致缓存与DB中的数据不一致，<strong>如果允许数据出现短期不一致，通过设置缓存的超时时间</strong></li>
<li>如果缓存采用的Redis，由于Redis是单线程，要特别注意不要放置特别大的对象「超过1K」，避免引起堵塞。</li>
<li>在极端高并发的情况下，考虑使用本地缓存<ul>
<li><strong>针对Java的应用程序，可以考虑使用Guava Cache，Ehcache，ConcurrentHashMap。使用前要做好容量的评估。</strong></li>
<li>针对Python应用程序，要特别Python的多进程模式（本地缓存在某个进程中都有一份copy，在做容量估算，要乘以进程数）</li>
</ul>
</li>
<li>关注高并发下的缓存穿透问题</li>
</ul>
<h3 id="2-缓存使用基本写法"><a href="#2-缓存使用基本写法" class="headerlink" title="2. 缓存使用基本写法"></a>2. 缓存使用基本写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def get_city(city_id):</div><div class="line">    cache_key = &apos;city:&#123;0&#125;&apos;.format(city_id)</div><div class="line">    try:</div><div class="line">        cache_value = cache.get(cache_key)</div><div class="line">        if cache_value is not None:</div><div class="line">            return cache_value</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">     </div><div class="line">    cache_value = get_city_from_db(city_id)</div><div class="line">    try:</div><div class="line">        cache.set(cache_key, cache_value)</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">    return cache_value</div></pre></td></tr></table></figure>
<h3 id="3-高并发下缓存穿透问题"><a href="#3-高并发下缓存穿透问题" class="headerlink" title="3. 高并发下缓存穿透问题"></a>3. 高并发下缓存穿透问题</h3><p>如果因缓存不命中，导致大量的查询请求穿透到DB中，造成DB很大的压力，可能会引发雪崩效应。缓存不命中有几种情况</p>
<ul>
<li>大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID</li>
<li>某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。</li>
<li>在同一时间点有大量的缓存key过期或者被剔除</li>
</ul>
<h4 id="情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID"><a href="#情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID" class="headerlink" title="情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID"></a>情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID</h4><p>当该缓存数据不存在时，不是不设置缓存，而是通过设置某个默认值，例如：$$，来避免缓存穿透。</p>
<h4 id="情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。"><a href="#情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。" class="headerlink" title="情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。"></a>情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。</h4><ul>
<li>根据实际的业务情况，不进行缓存穿透，缓存获取不到或者获取失败的情况下，直接返回空的结果。</li>
<li>将缓存设置为永不过期（提供一个缓存有效时间单独key，或者设置一个单独的字段来标示缓存的有效时间），根据业务的实际情况，来选择是否采用过期的数据</li>
<li>通过对缓存key的进行加锁访问，来控制缓存穿透到数据库的并发。这在一定程度上会降低应用的性能，容易产生请求堆积。</li>
<li>通过定时等手段保证缓存永不过期</li>
</ul>
<h4 id="情况三：在同一时间点有大量的缓存key过期或者被剔除"><a href="#情况三：在同一时间点有大量的缓存key过期或者被剔除" class="headerlink" title="情况三：在同一时间点有大量的缓存key过期或者被剔除"></a>情况三：在同一时间点有大量的缓存key过期或者被剔除</h4><ul>
<li>尽量将缓存过期时间均匀分布，可以通过随机设置一个过期时间</li>
<li>如果因缓存服务器宕机导致的大量key过期，那么需要将缓存服务器做到高可用</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://blog.jobbole.com/83439/" target="_blank" rel="external">那些年我们一起追过的缓存写法</a></li>
<li><a href="http://www.tuicool.com/articles/7jMZFzj" target="_blank" rel="external">缓存穿透与缓存雪崩</a></li>
<li><a href="http://www.tuicool.com/articles/Y36vaib" target="_blank" rel="external">再谈缓存穿透、缓存并发、热点缓存之最佳招式</a></li>
</ol>
<p><a href="http://bdms.hylin.dev.imdada.cn/" target="_blank" rel="external">http://bdms.hylin.dev.imdada.cn/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-使用规则&quot;&gt;&lt;a href=&quot;#1-使用规则&quot; class=&quot;headerlink&quot; title=&quot;1. 使用规则&quot;&gt;&lt;/a&gt;1. 使用规则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽量不要强依赖缓存「除非有特殊需求」，参考下面的缓存使用基本方法&lt;/li&gt;
&lt;li&gt;如果缓存
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>数据库开发规范</title>
    <link href="http://jianwl.com/2017/04/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://jianwl.com/2017/04/26/数据库开发规范/</id>
    <published>2017-04-26T12:57:17.000Z</published>
    <updated>2017-04-26T13:58:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h3><h4 id="1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割"><a href="#1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割" class="headerlink" title="1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割"></a>1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割</h4><ul>
<li>MYSQL有配置参数lower_case_table_names,不可动态更改，linux默认为0，即库表名以实际情况存储，大小写敏感。如果是1，以小写存储，大小写不敏感。如果是2，以实际情况存储，但以小写比较；</li>
<li>如果大小写混用使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。</li>
<li>字段名显式区分大小写，但实际使用不区分，即不可以建立两个名字一样但大小写不一样的字段。</li>
<li>为了统一规范，库名、表名、字段名使用小写字母。</li>
</ul>
<h4 id="2）表名、字段名不超过32个字符"><a href="#2）表名、字段名不超过32个字符" class="headerlink" title="2）表名、字段名不超过32个字符"></a>2）表名、字段名不超过32个字符</h4><ul>
<li>库名、表名、字段名支持最多64个字符，但为了统一规范，易于辨识以及减少传输量，禁止超过32个字符</li>
</ul>
<h4 id="3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。"><a href="#3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。" class="headerlink" title="3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。"></a>3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。</h4><h4 id="4-索引名称采用idx-前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。"><a href="#4-索引名称采用idx-前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。" class="headerlink" title="4) 索引名称采用idx_前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。"></a>4) 索引名称采用<code>idx_</code>前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。</h4><ul>
<li>基于这些规范的正确实例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS `mall_coupon_order_map` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;id&apos;,</div><div class="line">  `coupon_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;优惠券编号&apos;,</div><div class="line">  `order_unit_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;订单号&apos;,</div><div class="line">  `bill_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;账单号&apos;,</div><div class="line">  `is_del` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;删除状态：0-正常，1-已删除&apos;,</div><div class="line">  `create_time` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_coupon_bill` (`coupon_id`, `bill_id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商城-使用优惠券与订单映射表&apos;;</div></pre></td></tr></table></figure>
<h4 id="5-不适用保留字，关键字-很重要！"><a href="#5-不适用保留字，关键字-很重要！" class="headerlink" title="5) 不适用保留字，关键字(很重要！)"></a>5) 不适用保留字，关键字(很重要！)</h4><ul>
<li>参考网址：<a href="http://dev.mysql.com/doc/refman/5.6/en/keywords.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/keywords.html</a></li>
<li>当库名、表名、字段名等属性含有保留字时，SQL语句必须用<strong>反引用</strong>属性名称，这将是的SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</li>
</ul>
<h4 id="6-对临时表、备份表的命名规则"><a href="#6-对临时表、备份表的命名规则" class="headerlink" title="6) 对临时表、备份表的命名规则"></a>6) 对临时表、备份表的命名规则</h4><ul>
<li>临时库、表必须以tmp为前缀，并已日期为后缀。例如：tmp_test01_20160704</li>
<li>备份库、表必须以bak为前缀，并以日期为后缀。例如：bak_test01_20160704</li>
</ul>
<h4 id="7-保留字使用全大写；SQL语句中，字符串使用单引号「’’」"><a href="#7-保留字使用全大写；SQL语句中，字符串使用单引号「’’」" class="headerlink" title="7) 保留字使用全大写；SQL语句中，字符串使用单引号「’’」"></a>7) 保留字使用全大写；SQL语句中，字符串使用单引号「’’」</h4><ul>
<li>典例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-- 正确</div><div class="line"> SELECT id, title FROM xiaoqu WHERE id = 1 </div><div class="line"> SELECT id, title FROM xiaoqu WHERE areacode = &apos;000100010001&apos;</div><div class="line">-- 错误</div><div class="line">select ID, title from XiaoQu where id = 1</div><div class="line">SELECT id, title FROM xiaoqu WHERE areacode = &quot;000100010001&quot;</div></pre></td></tr></table></figure>
<h4 id="8-存储实体数据的表，名称使用名词，单数"><a href="#8-存储实体数据的表，名称使用名词，单数" class="headerlink" title="8) 存储实体数据的表，名称使用名词，单数"></a>8) 存储实体数据的表，名称使用名词，单数</h4><h4 id="9-存储实体表多对多对应关系的表，名称建议采用noun-verb-noun这样的模式。例如：member-like-property、property-has-tag。"><a href="#9-存储实体表多对多对应关系的表，名称建议采用noun-verb-noun这样的模式。例如：member-like-property、property-has-tag。" class="headerlink" title="9) 存储实体表多对多对应关系的表，名称建议采用noun_verb_noun这样的模式。例如：member_like_property、property_has_tag。"></a>9) 存储实体表多对多对应关系的表，名称建议采用<code>noun_verb_noun</code>这样的模式。例如：<code>member_like_property</code>、<code>property_has_tag</code>。</h4><h3 id="表设计规范"><a href="#表设计规范" class="headerlink" title="表设计规范"></a>表设计规范</h3><h4 id="1-MYSQL存储引用使用InnoDB"><a href="#1-MYSQL存储引用使用InnoDB" class="headerlink" title="1) MYSQL存储引用使用InnoDB"></a>1) MYSQL存储引用使用InnoDB</h4><ul>
<li>不用纠结，没有特殊原因的情况下，作为在线交易系统「OLTP」的MYSQL使用InnoDB引擎</li>
<li>InnoDB有支持事务、行级锁、还有更好的数据恢复能力，更好的并发性能，同时对多核、大内存、SSD等硬件支持更好，支持数据热备份等。</li>
</ul>
<h4 id="2）表字符集使用UTF-8字符集，后续会用UTF8MB4"><a href="#2）表字符集使用UTF-8字符集，后续会用UTF8MB4" class="headerlink" title="2）表字符集使用UTF-8字符集，后续会用UTF8MB4"></a>2）表字符集使用UTF-8字符集，后续会用UTF8MB4</h4><h4 id="3）正确使用时间类型"><a href="#3）正确使用时间类型" class="headerlink" title="3）正确使用时间类型"></a>3）正确使用时间类型</h4><ul>
<li>精确到秒的时间采用<code>TIMESTAMP</code>,自动更新时间</li>
<li>精确到日期使用<code>DATE</code> </li>
<li>一般不使用<code>DATETIME</code>类型</li>
<li>不允许使用字符串类型存储时间</li>
<li>如果想对时间列建索引，还是用int类型，节省空间，效率高，适合需要大量时间范围的数据表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">`create_time` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `update_time` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_settle_order_id` (`settle_order_id`),</div><div class="line">  KEY `idx_plateform_user_type_user_id` (`plateform`,`user_type`,`user_id`),</div><div class="line">  KEY `idx_create_time` (`create_time`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=195 DEFAULT CHARSET=utf8 COMMENT=&apos;退款结算表&apos;;</div></pre></td></tr></table></figure>
<h4 id="4-字段定义为NOT-NULL，同时设置DEFAULT值。"><a href="#4-字段定义为NOT-NULL，同时设置DEFAULT值。" class="headerlink" title="4) 字段定义为NOT NULL，同时设置DEFAULT值。"></a>4) 字段定义为NOT NULL，同时设置DEFAULT值。</h4><ul>
<li>不是必须要设置NULL，就将字段设置NOT NULL</li>
<li>设置为<code>NOT NULL</code>的字段，需要设置一个缺省值</li>
<li>B树索引不会存储<code>NULL</code>值，所以如果索引字段可以为NULL，索引效率会下降。</li>
<li>建议用0、特殊值或空串代替NULL值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user_feedback` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `uid` int(11) NOT NULL COMMENT &apos;用户id&apos;,</div><div class="line">  `phone` varchar(20) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;手机号&apos;,</div><div class="line">  `feedback_status` int(11) NOT NULL DEFAULT &apos;10&apos; COMMENT &apos;反馈处理状态&apos;,</div><div class="line">  `feedback_type` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;反馈类型&apos;,</div><div class="line">  `supp_info` varchar(800) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;补充内容&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_phone` (`phone`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;意见反馈&apos;;</div></pre></td></tr></table></figure>
<h4 id="5-字段个数不超过32个"><a href="#5-字段个数不超过32个" class="headerlink" title="5) 字段个数不超过32个"></a>5) 字段个数不超过32个</h4><ul>
<li>一个表有很多很多字段，不仅占用空间，而且不方便，请在认真考虑设计是否正确</li>
</ul>
<h4 id="6）不适用浮点类型-FLOAT、DOUBLE"><a href="#6）不适用浮点类型-FLOAT、DOUBLE" class="headerlink" title="6）不适用浮点类型(FLOAT、DOUBLE)"></a>6）不适用浮点类型(FLOAT、DOUBLE)</h4><ul>
<li>没有充分的理由，不要使用浮点数</li>
<li>例如金额可以用分为单位，然后采用<code>INT</code>，如果依然要以元为单位，可以采用<code>DECIMAL</code></li>
</ul>
<h4 id="7-不直接存储图片、音频、视频等大容量内容"><a href="#7-不直接存储图片、音频、视频等大容量内容" class="headerlink" title="7) 不直接存储图片、音频、视频等大容量内容"></a>7) 不直接存储图片、音频、视频等大容量内容</h4><ul>
<li>请使用分布式文件系统来存储图片、音频、视频等内容，数据库内只存储文件位置</li>
</ul>
<h4 id="8）使用INT-UNSIGNED来存储Ipv4地址"><a href="#8）使用INT-UNSIGNED来存储Ipv4地址" class="headerlink" title="8）使用INT UNSIGNED来存储Ipv4地址"></a>8）使用INT UNSIGNED来存储Ipv4地址</h4><ul>
<li>使用 <code>INET_ATON</code> 将 IP 地址的字符串形式转换成数字形式；使用<code>INET_NTOA</code> 将 IP 地址数字形式转换成字符串形式，以便查看。</li>
<li>当程序使用自带的函数进行 IP 地址的字符串形式与数字形式之间的转换时，需要注意数字的存储类型至少应为 32 位的无符号整型（如 <code>uint32_t</code>)，并注意字节数。</li>
<li>当要查询某段的 IP 时，请参考以下示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT user_id FROM user_ip</div><div class="line">WHERE ip &gt; INET_ATON(&apos;192.168.0.0&apos;) AND ip &lt; INET_ATON(&apos;192.168.255.255&apos;)</div></pre></td></tr></table></figure>
<h4 id="9-所有表都需要添加注释，每张表数据量建议控制在5000W以内"><a href="#9-所有表都需要添加注释，每张表数据量建议控制在5000W以内" class="headerlink" title="9) 所有表都需要添加注释，每张表数据量建议控制在5000W以内"></a>9) 所有表都需要添加注释，每张表数据量建议控制在5000W以内</h4><ul>
<li>除主键外的其他字段都需要增加注释</li>
<li>推荐采用英文标点，避免出现乱码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">--错误：</div><div class="line">CREATE TABLE `push_stat_key` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</div><div class="line">  `stat_key` varchar(32) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `description` varchar(256) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `owner_mail` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `owner_phone` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `del_flag` tinyint(4) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_stat_key` (`stat_key`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line">--正确：</div><div class="line">CREATE TABLE IF NOT EXISTS `mall_coupon_order_map` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;id&apos;,</div><div class="line">  `coupon_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;优惠券编号&apos;,</div><div class="line">  `order_unit_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;订单号&apos;,</div><div class="line">  `bill_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;账单号&apos;,</div><div class="line">  `is_del` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;删除状态：0-正常，1-已删除&apos;,</div><div class="line">  `create_time` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_coupon_bill` (`coupon_id`, `bill_id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商城-使用优惠券与订单映射表&apos;;</div></pre></td></tr></table></figure>
<h4 id="10-禁止使用分区表"><a href="#10-禁止使用分区表" class="headerlink" title="10) 禁止使用分区表"></a>10) 禁止使用分区表</h4><ul>
<li>分区表对分区键有严格要求</li>
<li>分区表在表变大后，执行DDL、SHARDING、单表恢复等都变得更加困难</li>
<li>因此禁止使用分区表，并建议业务端手动SHARDING。</li>
</ul>
<h4 id="11）采用合适的分库分表策略，例如千库十表、十库表表等"><a href="#11）采用合适的分库分表策略，例如千库十表、十库表表等" class="headerlink" title="11）采用合适的分库分表策略，例如千库十表、十库表表等"></a>11）采用合适的分库分表策略，例如千库十表、十库表表等</h4><ul>
<li>采用合适的分库分表策略，有利于后期快速对数据库进行水平拆分</li>
<li>同时分库可以有效利用MYSQL的多线程复制特性</li>
</ul>
<h4 id="12-将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据"><a href="#12-将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据" class="headerlink" title="12) 将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据"></a>12) 将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据</h4><ul>
<li>分离冷热数据，有效利用缓存，防止读入无用的冷数据，较少磁盘IO</li>
<li>同时保证热数据常驻内存提高缓存命中率</li>
</ul>
<h4 id="13-强烈建议使用TINYINT来代替ENUM类型"><a href="#13-强烈建议使用TINYINT来代替ENUM类型" class="headerlink" title="13) 强烈建议使用TINYINT来代替ENUM类型"></a>13) 强烈建议使用TINYINT来代替ENUM类型</h4><ul>
<li>ENUM类型在需要修改或增加枚举值时，需要在线DDL，成本较大</li>
<li>ENUM列值如果含有数字类型，可能会引起默认值混淆</li>
</ul>
<h4 id="14-尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR-N-中的N表示字符数而非字节数"><a href="#14-尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR-N-中的N表示字符数而非字节数" class="headerlink" title="14) 尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR(N)中的N表示字符数而非字节数"></a>14) 尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR(N)中的N表示字符数而非字节数</h4><ul>
<li>没有特殊情况一般不用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">create table dj_trade_request_0</div><div class="line">(</div><div class="line">id bigint not null auto_increment comment &apos;自增id&apos;,</div><div class="line">order_type tinyInt not null comment &apos;订单类型:交易;取消交易&apos;,</div><div class="line">order_id bigint not null comment &apos;订单id&apos;,</div><div class="line">controller_scene_id int not null comment &apos;场景id&apos;,</div><div class="line">tradeIdentity bigint not null comment &apos;交易识别id&apos;,</div><div class="line">tradeIdentity_type int not null comment &apos;交易识别type&apos;,</div><div class="line">content text not null comment &apos;请求内容&apos;,</div><div class="line">status tinyInt not null comment &apos;状态&apos;,</div><div class="line">request_times int not null comment &apos;请求次数&apos;,</div><div class="line">execute_times int not null comment &apos;执行次数&apos;,</div><div class="line">identity_success_ids varchar(1024) not null comment &apos;处理成功ids&apos;,</div><div class="line">identity_fail_ids varchar(1024) not null comment &apos;处理失败ids&apos;,</div><div class="line">create_time bigint not null comment &apos;创建时间&apos;,</div><div class="line">update_time bigint not null comment &apos;更新时间&apos;,</div><div class="line">version int not null comment &apos;版本控制&apos;,</div><div class="line">primary key (id)</div><div class="line">)auto_increment = 1 ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;</div></pre></td></tr></table></figure>
<h4 id="15-区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY-UNSIGNED"><a href="#15-区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY-UNSIGNED" class="headerlink" title="15) 区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY UNSIGNED"></a>15) 区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY UNSIGNED</h4><ul>
<li>对某一列只有一两个值，例如要么是0，要么是1，可以使用tinyint</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table `supplier_contact` add column `addr_type` tinyint(4) not null default &apos;10&apos; comment &apos;地址类型，10 - 达达商家，20 - 达达快送&apos;;</div></pre></td></tr></table></figure>
<h4 id="16-使用VARBINARY存储大小写敏感的变长字符串或二进制内容"><a href="#16-使用VARBINARY存储大小写敏感的变长字符串或二进制内容" class="headerlink" title="16) 使用VARBINARY存储大小写敏感的变长字符串或二进制内容"></a>16) 使用VARBINARY存储大小写敏感的变长字符串或二进制内容</h4><ul>
<li>VARBINARY默认区分大小写,没有字符集概念,速度快</li>
</ul>
<h4 id="17-建议使用UNSIGNED存储非负数值"><a href="#17-建议使用UNSIGNED存储非负数值" class="headerlink" title="17) 建议使用UNSIGNED存储非负数值"></a>17) 建议使用UNSIGNED存储非负数值</h4><h3 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h3><h4 id="1-使用数字主键，不使用联合主键"><a href="#1-使用数字主键，不使用联合主键" class="headerlink" title="1) 使用数字主键，不使用联合主键"></a>1) 使用数字主键，不使用联合主键</h4><ul>
<li>存储实体数据的表，其主键应该是数字类型。</li>
<li>存储实体数据的表，不使用联合主键。</li>
<li>存储实体表间多对多对应关系的表（仅有两个字段）允许例外。</li>
</ul>
<h4 id="2-不使用外键"><a href="#2-不使用外键" class="headerlink" title="2) 不使用外键"></a>2) 不使用外键</h4><ul>
<li>所有的表不建立外键约束。</li>
</ul>
<h4 id="3-表必须有主键-推荐使用UNSIGNED自增列作为主键"><a href="#3-表必须有主键-推荐使用UNSIGNED自增列作为主键" class="headerlink" title="3) 表必须有主键,推荐使用UNSIGNED自增列作为主键"></a>3) 表必须有主键,推荐使用UNSIGNED自增列作为主键</h4><h4 id="4-联合索引字段数不超过-5-个（单个索引中的字段数不超过5个）"><a href="#4-联合索引字段数不超过-5-个（单个索引中的字段数不超过5个）" class="headerlink" title="4) 联合索引字段数不超过 5 个（单个索引中的字段数不超过5个）"></a>4) 联合索引字段数不超过 5 个（单个索引中的字段数不超过5个）</h4><ul>
<li>一个联合索引的字段数太多，很可能是设计得不好，还很难符合命名的规范。</li>
</ul>
<h4 id="5-前缀索引长度不超过-8-个字符，单张表中索引数量最好不超过5个"><a href="#5-前缀索引长度不超过-8-个字符，单张表中索引数量最好不超过5个" class="headerlink" title="5) 前缀索引长度不超过 8 个字符，单张表中索引数量最好不超过5个"></a>5) 前缀索引长度不超过 8 个字符，单张表中索引数量最好不超过5个</h4><ul>
<li>对字符串类型的字段建立索引，采用前缀索引，且长度不超过 8 个字符。</li>
</ul>
<h4 id="6-索引的命名规则"><a href="#6-索引的命名规则" class="headerlink" title="6) 索引的命名规则"></a>6) 索引的命名规则</h4><ul>
<li>非唯一索引按照“idx<em>字段名称[</em>字段名称]”进用行命名。例如idx_age_name</li>
<li>唯一索引按照“uniq<em>字段名称[</em>字段名称]”进用行命名。例如uniq_age_name</li>
<li>组合索引建议包含所有字段名,过长的字段名可以采用缩写形式。例如idx_age_name_add</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--错误：</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `training_id_index` (`training_id`),</div><div class="line">  KEY `site_id_index` (`training_id`,`site_id`),</div><div class="line">  KEY `training_site_id_index` (`is_valid`,`training_id`,`site_id`)</div><div class="line"> </div><div class="line">--正确：</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_settle_order_id` (`settle_order_id`),</div><div class="line">  KEY `idx_plateform_user_type_user_id` (`plateform`,`user_type`,`user_id`),</div><div class="line">  KEY `idx_create_time` (`create_time`)</div></pre></td></tr></table></figure>
<h4 id="7-禁止冗余索引"><a href="#7-禁止冗余索引" class="headerlink" title="7) 禁止冗余索引"></a>7) 禁止冗余索引</h4><ul>
<li>索引是把双刃剑,会增加维护负担,增大IO压力。(a,b,c)、(a,b),后者为冗余索引</li>
<li>可以利用前缀索引来达到加速目的,减轻维护负担</li>
</ul>
<h4 id="8-禁止重复索引"><a href="#8-禁止重复索引" class="headerlink" title="8) 禁止重复索引"></a>8) 禁止重复索引</h4><ul>
<li>例如：primary key a;uniq index a</li>
<li>重复索引增加维护负担、占用磁盘空间,同时没有任何益处</li>
</ul>
<h4 id="9-不在低基数列上建立索引-例如“性别”"><a href="#9-不在低基数列上建立索引-例如“性别”" class="headerlink" title="9) 不在低基数列上建立索引,例如“性别”"></a>9) 不在低基数列上建立索引,例如“性别”</h4><ul>
<li>大部分场景下,低基数列上建立索引的精确查找,相对于不建立索引的全表扫描没有任何优势,而且增大了IO负担</li>
</ul>
<h4 id="10-选择区分度大的列建立索引。组合索引中-区分度大的字段放在最前"><a href="#10-选择区分度大的列建立索引。组合索引中-区分度大的字段放在最前" class="headerlink" title="10) 选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前"></a>10) 选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前</h4><h4 id="11-不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引-或添加CRC32或MD5伪列并建立索引"><a href="#11-不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引-或添加CRC32或MD5伪列并建立索引" class="headerlink" title="11) 不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引"></a>11) 不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引</h4><h4 id="12-合理创建联合索引，合理使用覆盖索引减少IO-避免排序"><a href="#12-合理创建联合索引，合理使用覆盖索引减少IO-避免排序" class="headerlink" title="12) 合理创建联合索引，合理使用覆盖索引减少IO,避免排序"></a>12) 合理创建联合索引，合理使用覆盖索引减少IO,避免排序</h4><ul>
<li>例如：(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)</li>
<li>覆盖索引能从索引中获取需要的所有字段,从而避免回表进行二次查找,节省IO</li>
</ul>
<h3 id="SQL语句规范"><a href="#SQL语句规范" class="headerlink" title="SQL语句规范"></a>SQL语句规范</h3><h4 id="1-禁止在查询条件中对字段进行数学运算、函数调用"><a href="#1-禁止在查询条件中对字段进行数学运算、函数调用" class="headerlink" title="1) 禁止在查询条件中对字段进行数学运算、函数调用"></a>1) 禁止在查询条件中对字段进行数学运算、函数调用</h4><ul>
<li>这类查询语句在使用索引时将非常困难。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE NOW() - update_time &lt; 3600</div><div class="line">SELECT id FROM property WHERE update_time + 3600 &gt; NOW()</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">SELECT id FROM property WHERE update_time &gt; NOW() - 3600</div><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE CHAR_LENGTH(title) &gt; 20</div><div class="line"> </div><div class="line">-- 假设字段 property.status 的类型为 TINYINT</div><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE status = &apos;1&apos;</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">SELECT id FROM property WHERE status = 1</div></pre></td></tr></table></figure>
<h4 id="2-禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE-也不允许隐式类型转换。"><a href="#2-禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE-也不允许隐式类型转换。" class="headerlink" title="2) 禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE 也不允许隐式类型转换。"></a>2) 禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，<code>INSERT</code>，<code>UPDATE</code> 也不允许隐式类型转换。</h4><ul>
<li>典例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-- 假设字段 property.status 的类型为 TINYINT</div><div class="line">-- 禁止</div><div class="line">INSERT INTO property (..., status) VALUES (..., &apos;1&apos;)</div><div class="line">UPDATE property SET status = &apos;1&apos; WHERE id = &apos;43&apos;</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">INSERT INTO property (..., status) VALUES (..., 1)</div><div class="line">UPDATE property SET status = 1 WHERE id = 43</div></pre></td></tr></table></figure>
<h4 id="3-禁止使用-前导查询"><a href="#3-禁止使用-前导查询" class="headerlink" title="3) 禁止使用 % 前导查询"></a>3) 禁止使用 % 前导查询</h4><ul>
<li>尽量不要使用like查询，不得不用的情况下也禁止使用%前导查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE title LIKE &apos;%最%&apos;</div></pre></td></tr></table></figure>
<h4 id="4-不使用联表查询，不使用子查询，不使用负向查询"><a href="#4-不使用联表查询，不使用子查询，不使用负向查询" class="headerlink" title="4) 不使用联表查询，不使用子查询，不使用负向查询"></a>4) 不使用联表查询，不使用子查询，不使用负向查询</h4><ul>
<li>OLTP 不使用 <code>JOIN</code> 联合查询。</li>
<li>没有特别好的理由，OLTP 不允许使用子查询。必要时用join代替子查询</li>
<li>负向查询是指，如果查询条件描述的是不要什么数据，其余的都要。例如 <code>!=</code>、<code>&lt;&gt;</code>、<code>NOT EXISTS</code>、<code>NOT IN</code> 以及 <code>NOT LIKE</code> 等就是负向查询，它们利用索引将会很辛苦。</li>
</ul>
<h4 id="5-LIMIT-m-n，其中-m-应当小于-500"><a href="#5-LIMIT-m-n，其中-m-应当小于-500" class="headerlink" title="5) LIMIT m, n，其中 m 应当小于 500"></a>5) LIMIT m, n，其中 m 应当小于 500</h4><ul>
<li>使用 <code>SELECT ... LIMIT offset, row_count</code> 或者 <code>SELECT ... LIMIT row_count OFFSET offset</code> 时，当 offset 小于 500 时，允许使用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 允许</div><div class="line">SELECT ... FROM property WHERE broker_id=? ORDER BY update_time LIMIT 40, 20</div><div class="line">-- 不允许</div><div class="line">SELECT ... FROM property WHERE areacode=? ORDER BY update_time LIMIT 4000, 20</div></pre></td></tr></table></figure>
<ul>
<li>能够不使用 offset 的情况应当避免，如下面的例子（其中 id 是主键）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 建议</div><div class="line">SELECT ... FROM property WHERE broker_id=? AND id&gt;? ORDER BY id LIMIT 20</div><div class="line">-- 避免</div><div class="line">SELECT ... FROM property WHERE broker_id=? ORDER BY id LIMIT 40, 20</div></pre></td></tr></table></figure>
<h4 id="6-避免使用-COUNT-函数，其他聚合函数，例如-SUM-、AVG-、MAX-等，同样适用。"><a href="#6-避免使用-COUNT-函数，其他聚合函数，例如-SUM-、AVG-、MAX-等，同样适用。" class="headerlink" title="6) 避免使用 COUNT() 函数，其他聚合函数，例如 SUM()、AVG()、MAX() 等，同样适用。"></a>6) 避免使用 COUNT() 函数，其他聚合函数，例如 <code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code> 等，同样适用。</h4><ul>
<li>能不使用就不使用，尽量用其他方式来解决</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 避免</div><div class="line">SELECT COUNT(*) FROM propertys WHERE broker_id=?</div><div class="line">-- 正确</div><div class="line">SELECT 1 FROM propertys WHERE broker_id=? LIMIT 1</div></pre></td></tr></table></figure>
<h4 id="7-使用prepared-statement-可以提升性能并避免SQL注入"><a href="#7-使用prepared-statement-可以提升性能并避免SQL注入" class="headerlink" title="7) 使用prepared statement,可以提升性能并避免SQL注入"></a>7) 使用prepared statement,可以提升性能并避免SQL注入</h4><h4 id="8-使用IN代替OR。SQL语句中IN包含的值不应过多"><a href="#8-使用IN代替OR。SQL语句中IN包含的值不应过多" class="headerlink" title="8) 使用IN代替OR。SQL语句中IN包含的值不应过多"></a>8) 使用IN代替OR。SQL语句中IN包含的值不应过多</h4><ul>
<li>IN是范围查找,MySQL内部会对IN的列表值进行排序后查找,比OR效率更高</li>
</ul>
<h4 id="9-减少与数据库交互次数-尽量采用批量SQL语句"><a href="#9-减少与数据库交互次数-尽量采用批量SQL语句" class="headerlink" title="9) 减少与数据库交互次数,尽量采用批量SQL语句"></a>9) 减少与数据库交互次数,尽量采用批量SQL语句</h4><ul>
<li>修改同一张表的多条语句，可改为一条语句；多用于修改表结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">--错误</div><div class="line">alter table target_config modify column target_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div><div class="line">alter table target_config modify column real_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div><div class="line"> </div><div class="line">--正确</div><div class="line">alter table target_config modify column target_value decimal(12,4) DEFAULT &apos;0.0000&apos;,modify column real_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div></pre></td></tr></table></figure>
<h4 id="10-拆分复杂SQL为多个小SQL-避免大事务"><a href="#10-拆分复杂SQL为多个小SQL-避免大事务" class="headerlink" title="10) 拆分复杂SQL为多个小SQL,避免大事务"></a>10) 拆分复杂SQL为多个小SQL,避免大事务</h4><ul>
<li>转化为小SQL，并进行主键的更新</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">--错误</div><div class="line">update test.tmp_qos set feedback=1 where transport_id&lt;=24769887;</div><div class="line"> </div><div class="line">--正确</div><div class="line">update test.tmp_qos set feedback=1 where id=1;</div><div class="line">update test.tmp_qos set feedback=1 where id=2;</div><div class="line">update test.tmp_qos set feedback=1 where id=3;</div><div class="line">update test.tmp_qos set feedback=1 where id=4;</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="11-使用UNION-ALL代替UNION"><a href="#11-使用UNION-ALL代替UNION" class="headerlink" title="11)  使用UNION ALL代替UNION"></a>11)  使用UNION ALL代替UNION</h4><ul>
<li>UNION ALL不需要对结果集再进行排序</li>
</ul>
<h4 id="12-SELECT只获取必要的字段-禁止使用SELECT"><a href="#12-SELECT只获取必要的字段-禁止使用SELECT" class="headerlink" title="12 ) SELECT只获取必要的字段,禁止使用SELECT *"></a>12 ) SELECT只获取必要的字段,禁止使用SELECT <code>*</code></h4><ul>
<li>减少网络带宽消耗</li>
<li>能有效利用覆盖索引</li>
<li>表结构变更对程序基本无影响</li>
</ul>
<h4 id="13-SQL中避免出现now-、rand-、sysdate-、current-user-等不确定结果的函数"><a href="#13-SQL中避免出现now-、rand-、sysdate-、current-user-等不确定结果的函数" class="headerlink" title="13) SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数"></a>13) SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数</h4><ul>
<li>语句级复制场景下,引起主从数据不一致</li>
<li>不确定值的函数,产生的SQL语句无法利用QUERY CACHE</li>
</ul>
<h4 id="14-禁止使用order-by-rand"><a href="#14-禁止使用order-by-rand" class="headerlink" title="14) 禁止使用order by rand()"></a>14) 禁止使用order by rand()</h4><ul>
<li>order by rand()会为表增加一个伪列,然后用rand()函数为每一行数据计算出rand()值,然后基于该行排序, 这通常都会生成磁盘上的临时表,因此效率非常低。</li>
<li>建议先使用rand()函数获得随机的主键值,然后通过主键获取数据</li>
</ul>
<h4 id="15-禁止单条SQL语句同时更新多个表"><a href="#15-禁止单条SQL语句同时更新多个表" class="headerlink" title="15)  禁止单条SQL语句同时更新多个表"></a>15)  禁止单条SQL语句同时更新多个表</h4><h4 id="16-建议使用合理的分页方式以提高分页效率"><a href="#16-建议使用合理的分页方式以提高分页效率" class="headerlink" title="16) 建议使用合理的分页方式以提高分页效率"></a>16) 建议使用合理的分页方式以提高分页效率</h4><h4 id="17-禁止在从库上执行后台管理和统计类功能的QUERY-必要时申请统计类从库"><a href="#17-禁止在从库上执行后台管理和统计类功能的QUERY-必要时申请统计类从库" class="headerlink" title="17) 禁止在从库上执行后台管理和统计类功能的QUERY,必要时申请统计类从库"></a>17) 禁止在从库上执行后台管理和统计类功能的QUERY,必要时申请统计类从库</h4><h4 id="18-程序应有捕获SQL异常的处理机制-必要时通过rollback显式回滚"><a href="#18-程序应有捕获SQL异常的处理机制-必要时通过rollback显式回滚" class="headerlink" title="18) 程序应有捕获SQL异常的处理机制,必要时通过rollback显式回滚"></a>18) 程序应有捕获SQL异常的处理机制,必要时通过rollback显式回滚</h4><h4 id="19-重要SQL必须被索引-update、delete的where条件列、order-by、group-by、distinct字段、多表join字段"><a href="#19-重要SQL必须被索引-update、delete的where条件列、order-by、group-by、distinct字段、多表join字段" class="headerlink" title="19)  重要SQL必须被索引:update、delete的where条件列、order by、group by、distinct字段、多表join字段"></a>19)  重要SQL必须被索引:update、delete的where条件列、order by、group by、distinct字段、多表join字段</h4><h4 id="20）使用EXPLAIN判断SQL语句是否合理使用索引-尽量避免extra列出现-Using-File-Sort、Using-Temporary"><a href="#20）使用EXPLAIN判断SQL语句是否合理使用索引-尽量避免extra列出现-Using-File-Sort、Using-Temporary" class="headerlink" title="20）使用EXPLAIN判断SQL语句是否合理使用索引,尽量避免extra列出现:Using File Sort、Using Temporary"></a>20）使用EXPLAIN判断SQL语句是否合理使用索引,尽量避免extra列出现:Using File Sort、Using Temporary</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-命名规范&quot;&gt;&lt;a href=&quot;#1-命名规范&quot; class=&quot;headerlink&quot; title=&quot;1. 命名规范&quot;&gt;&lt;/a&gt;1. 命名规范&lt;/h3&gt;&lt;h4 id=&quot;1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Shell常用命令备忘</title>
    <link href="http://jianwl.com/2017/04/25/Shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>http://jianwl.com/2017/04/25/Shell常用命令备忘/</id>
    <published>2017-04-25T05:01:52.000Z</published>
    <updated>2017-04-25T09:27:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-ls命令"><a href="#1-ls命令" class="headerlink" title="1. ls命令"></a>1. ls命令</h3><h4 id="1-显示长格式的输出"><a href="#1-显示长格式的输出" class="headerlink" title="1) 显示长格式的输出"></a>1) 显示长格式的输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">### -R 递归显示</div><div class="line">### -A almost-all，类似「-a」，不含「.」、「..」 目录</div><div class="line">### -h --human-readable</div><div class="line">### -r --reverse</div><div class="line"></div><div class="line">$ ls -l</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div></pre></td></tr></table></figure>
<h4 id="2-显示最后访问时间"><a href="#2-显示最后访问时间" class="headerlink" title="2) 显示最后访问时间"></a>2) 显示最后访问时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lu</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff      0  3 12 23:34 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4 25 13:01 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 12:57 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67  3 12 10:02 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49  4 25 12:57 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  4 22 09:54 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  4 25 13:01 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170  4 25 13:02 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374  4 25 13:02 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  4 25 13:02 themes</div></pre></td></tr></table></figure>
<h4 id="3-显示文件的大小"><a href="#3-显示文件的大小" class="headerlink" title="3) 显示文件的大小"></a>3) 显示文件的大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lh</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff     0B 10  1  2016 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1.9K  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff   174B  4 25 13:01 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff    35B  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff    67B 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff    49B 10  1  2016 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff   9.9K  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff   759B  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff   714B  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff   170B 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff   374B 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff   238B  3 11 21:10 themes</div></pre></td></tr></table></figure>
<h4 id="4-按最近修改时间排序"><a href="#4-按最近修改时间排序" class="headerlink" title="4) 按最近修改时间排序"></a>4) 按最近修改时间排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lt</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div></pre></td></tr></table></figure>
<h4 id="5-按最近修改时间逆排序"><a href="#5-按最近修改时间逆排序" class="headerlink" title="5) 按最近修改时间逆排序"></a>5) 按最近修改时间逆排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -ltr</div><div class="line">total 48</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div></pre></td></tr></table></figure>
<h4 id="6-按文件大小排序"><a href="#6-按文件大小排序" class="headerlink" title="6) 按文件大小排序"></a>6) 按文件大小排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lS</div><div class="line">total 48</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div></pre></td></tr></table></figure>
<h4 id="7-递归显示"><a href="#7-递归显示" class="headerlink" title="7) 递归显示"></a>7) 递归显示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ls -lR</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 1.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 2.txt</div><div class="line">drwxr-xr-x  4 jianweilin  staff  136  4 25 14:51 tmp</div><div class="line"></div><div class="line">./tmp:</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 14:51 3.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 14:51 4.txt</div></pre></td></tr></table></figure>
<h3 id="2-stat命令"><a href="#2-stat命令" class="headerlink" title="2. stat命令"></a>2. stat命令</h3><h4 id="1-显示文件统计信息"><a href="#1-显示文件统计信息" class="headerlink" title="1) 显示文件统计信息"></a>1) 显示文件统计信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ stat db.json</div><div class="line">16777220 18825586 -rw-r--r-- 1 jianweilin staff 0 174 &quot;Apr 25 12:57:01 2017&quot; &quot;Apr 25 13:01:52 2017&quot; &quot;Apr 25 13:01:52 2017&quot; &quot;Apr 25 12:57:00 2017&quot; 4096 8 0 db.json</div></pre></td></tr></table></figure>
<h3 id="3-cat命令"><a href="#3-cat命令" class="headerlink" title="3. cat命令"></a>3. cat命令</h3><h4 id="1-显示行号"><a href="#1-显示行号" class="headerlink" title="1) 显示行号"></a>1) 显示行号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$ cat -n package.json</div><div class="line">     1	&#123;</div><div class="line">     2	  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class="line">     3	  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">     4	  &quot;private&quot;: true,</div><div class="line">     5	  &quot;hexo&quot;: &#123;</div><div class="line">     6	    &quot;version&quot;: &quot;3.2.2&quot;</div><div class="line">     7	  &#125;,</div><div class="line">     8	  &quot;dependencies&quot;: &#123;</div><div class="line">     9	    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class="line">    10	    &quot;hexo-deployer-git&quot;: &quot;^0.1.0&quot;,</div><div class="line">    11	    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class="line">    12	    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class="line">    13	    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class="line">    14	    &quot;hexo-generator-feed&quot;: &quot;^1.2.0&quot;,</div><div class="line">    15	    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</div><div class="line">    16	    &quot;hexo-generator-search&quot;: &quot;^1.0.2&quot;,</div><div class="line">    17	    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;,</div><div class="line">    18	    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class="line">    19	    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class="line">    20	    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</div><div class="line">    21	    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</div><div class="line">    22	    &quot;hexo-server&quot;: &quot;^0.2.0&quot;</div><div class="line">    23	  &#125;,</div><div class="line">    24	  &quot;devDependencies&quot;: &#123;</div><div class="line">    25	    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class="line">    26	    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;</div><div class="line">    27	  &#125;</div><div class="line">    28	&#125;</div></pre></td></tr></table></figure>
<h3 id="4-tar命令"><a href="#4-tar命令" class="headerlink" title="4. tar命令"></a>4. tar命令</h3><h4 id="1-显示当前目录"><a href="#1-显示当前目录" class="headerlink" title="1) 显示当前目录"></a>1) 显示当前目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">### -c 创建一个新的tar归档文件</div><div class="line">### -x 从已有tar归档文件中提取文件</div><div class="line">### -v 在处理文件时显示文件</div><div class="line">### -z 将输出重定向给gzip命令压缩内容</div><div class="line">### -t 列出已有tar归档文件的内容</div><div class="line">### -f file 输出结果到file</div><div class="line"></div><div class="line">### 压缩常用参数 cvzf</div><div class="line">### 解压常用参数 xvzf</div><div class="line"></div><div class="line">$ ls -lR</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 1.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 2.txt</div><div class="line">drwxr-xr-x  4 jianweilin  staff  136  4 25 16:50 tmp</div><div class="line"></div><div class="line">./tmp:</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 16:50 3.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 16:50 4.txt</div></pre></td></tr></table></figure>
<h4 id="2-忽略tmp目录打包"><a href="#2-忽略tmp目录打包" class="headerlink" title="2) 忽略tmp目录打包"></a>2) 忽略tmp目录打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar --exclude &quot;tmp&quot; -cvzf test.tgz test</div><div class="line">a test</div><div class="line">a test/1.txt</div><div class="line">a test/2.txt</div></pre></td></tr></table></figure>
<h4 id="3-查看tar归档文件内容"><a href="#3-查看tar归档文件内容" class="headerlink" title="3) 查看tar归档文件内容"></a>3) 查看tar归档文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar -tf test.tgz</div><div class="line">test/</div><div class="line">test/1.txt</div><div class="line">test/2.txt</div></pre></td></tr></table></figure>
<h4 id="4-解压"><a href="#4-解压" class="headerlink" title="4) 解压"></a>4) 解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar -xvzf test.tgz</div><div class="line">x test/</div><div class="line">x test/1.txt</div><div class="line">x test/2.txt</div></pre></td></tr></table></figure>
<h3 id="5-实用命令"><a href="#5-实用命令" class="headerlink" title="5. 实用命令"></a>5. 实用命令</h3><h4 id="1-列出当前目录-文件夹并按大小排序"><a href="#1-列出当前目录-文件夹并按大小排序" class="headerlink" title="1) 列出当前目录|文件夹并按大小排序"></a>1) 列出当前目录|文件夹并按大小排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ du -sh * | sort -nr</div><div class="line"> 53M	node_modules</div><div class="line"> 24M	themes</div><div class="line"> 17M	public</div><div class="line"> 12K	scaffolds</div><div class="line">5.0M	source</div><div class="line">4.0K	package.json</div><div class="line">4.0K	hexo-deploy.sh</div><div class="line">4.0K	github-backup.sh</div><div class="line">4.0K	except.txt</div><div class="line">4.0K	db.json</div><div class="line">4.0K	_config.yml</div><div class="line">  0B	README.md</div></pre></td></tr></table></figure>
<h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol>
<li><a href="http://fqk.io/shell-some-command/" target="_blank" rel="external">Shell常用命令备忘 by fang</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-ls命令&quot;&gt;&lt;a href=&quot;#1-ls命令&quot; class=&quot;headerlink&quot; title=&quot;1. ls命令&quot;&gt;&lt;/a&gt;1. ls命令&lt;/h3&gt;&lt;h4 id=&quot;1-显示长格式的输出&quot;&gt;&lt;a href=&quot;#1-显示长格式的输出&quot; class=&quot;header
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>算法基础学习笔记</title>
    <link href="http://jianwl.com/2017/04/24/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://jianwl.com/2017/04/24/算法基础学习笔记/</id>
    <published>2017-04-24T00:35:06.000Z</published>
    <updated>2017-04-26T00:06:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>算法一篇空白，大学所学忘的差不多了，接下来几周会侧重学习算法基础。</p>
<h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h3><h4 id="1-领居好说话-–-冒泡算法"><a href="#1-领居好说话-–-冒泡算法" class="headerlink" title="1) 领居好说话 – 冒泡算法"></a>1) 领居好说话 – 冒泡算法</h4><p><code>基本思想：</code> 每次比较两个相邻的元素，如果他们的顺序错误就把他们交换过来；每一趟只能确定将一个数归位。如<code>12 35 99 18 76</code>这5个数，第一趟确定最大的数排在第1位，第二趟确定第二大的数排在第二位，5个数字，只需要5趟，就能够排好序。</p>
<p><img src="http://i4.buimg.com/567571/c604fc4bd2fa1fa5.png" alt=""></p>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001()&#123;</div><div class="line">    int[] nums = new int[]&#123;12,35,99,18,76&#125;;</div><div class="line">    // 第一层: 待排序数[0,n-2]</div><div class="line">    for (int i = 0; i &lt; nums.length - 1; i++) &#123;</div><div class="line">        // 第二层: 未排序数[i,n-1]</div><div class="line">       for (int j = i; j&lt; nums.length -1; j++) &#123;</div><div class="line">           // 待排序数 VS 未排序数, 比其小则交换</div><div class="line">           if (nums[i] &lt; nums[j+1]) &#123;</div><div class="line">               int t = nums[i];</div><div class="line">               nums[i] = nums[j+1];</div><div class="line">               nums[j+1] = t;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    System.out.println(JSON.toJSONString(nums));</div><div class="line">&#125;</div><div class="line">// 结果 [99,76,35,18,12]</div><div class="line">// 时间复杂度 O(N^2)</div></pre></td></tr></table></figure>
<h4 id="2-最常用的排序-–-快速排序"><a href="#2-最常用的排序-–-快速排序" class="headerlink" title="2) 最常用的排序 – 快速排序"></a>2) 最常用的排序 – 快速排序</h4><p><code>基本思想：</code> 以序列<code>6 1 2 7 9 3 4 5 10 8</code>为例，分别从序列两端探测，先<strong>从右到左</strong>找一个小于6的数，找到之后，停止前进的步伐，再<strong>从左到右</strong>找一个大于6的数，然后交换他们。这里可以用变量i和变量j来表示，知道变量i和变量j相遇,完成第一次排序；</p>
<p><img src="http://i2.muimg.com/567571/e31ef94b0d159921.png" alt=""></p>
<p><code>整个算法处理过程：</code></p>
<p><img src="http://i2.muimg.com/567571/1db0b8aba2e48ad7.png" alt=""></p>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public void quick(Integer[] str) &#123;</div><div class="line">    if (str.length &gt; 0) &#123;    //查看数组是否为空</div><div class="line">        _quickSort(str, 0, str.length - 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">private void _quickSort(Integer[] list, int low, int high) &#123;</div><div class="line">    if (low &lt; high) &#123;</div><div class="line">        int middle = _getMiddle(list, low, high);  //将list数组进行一分为二</div><div class="line">        _quickSort(list, low, middle - 1);        //对低字表进行递归排序</div><div class="line">        _quickSort(list, middle + 1, high);       //对高字表进行递归排序</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">private int _getMiddle(Integer[] list, int low, int high) &#123;</div><div class="line">    int tmp = list[low];   //数组的第一个作为中轴</div><div class="line">    while (low &lt; high) &#123;</div><div class="line">        while (low &lt; high &amp;&amp; list[high] &gt; tmp) &#123;</div><div class="line">            high--;</div><div class="line">        &#125;</div><div class="line">        list[low] = list[high];   //比中轴小的记录移到低端</div><div class="line">        while (low &lt; high &amp;&amp; list[low] &lt; tmp) &#123;</div><div class="line">            low++;</div><div class="line">        &#125;</div><div class="line">        list[high] = list[low];   //比中轴大的记录移到高端</div><div class="line">    &#125;</div><div class="line">    list[low] = tmp;              //中轴记录到尾</div><div class="line">    return low;                   //返回中轴的位置</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 时间复杂度: O(NlogN)</div></pre></td></tr></table></figure>
<h3 id="2-队列、栈、链表"><a href="#2-队列、栈、链表" class="headerlink" title="2. 队列、栈、链表"></a>2. 队列、栈、链表</h3><h4 id="1-解密QQ号-–-队列"><a href="#1-解密QQ号-–-队列" class="headerlink" title="1) 解密QQ号 – 队列"></a>1) 解密QQ号 – 队列</h4><p><code>基本思想：</code> <strong>先进先出</strong>的数据结构，队尾进入，队首出去。</p>
<p><code>场景：</code>新学期开始了，小哈是小哼的新同桌，小哼向小哈询问QQ号，小哈给小哼一串加密过的数字，同时告诉小哼解密规则：将第1个数删除、紧接着将第2个数放到这串数的末尾，再将第三个数删除并将第4个数放到这串数字的末尾，再将第5个数删除….直到剩下最后一个数，将最后一个数也删除。最后将删除的数连在一起就是小哈的QQ。加密的数字为「6 3 1 7 5 8 9 2 4」</p>
<p><code>解题思路：</code> 解密第一步是将第一个数删除，如何在数组中删除一个数呢？最简单的办法是将所有后面的数都往前挪一步，将前面的数覆盖，但这样的做法太耗时了。在这里我们将引入两个变量，head用来记录队列的队首，tail用来记录队列的队尾的下一个位置。为什么tail不直接记录队尾呢，却要记录队尾的下一个位置呢？因为当队列中只剩下一个元素时，队首和队尾重合会带来一些麻烦。</p>
<p><code>解密过程：</code></p>
<p><img src="http://i1.piimg.com/567571/1bb74389d2320537.png" alt=""></p>
<p><code>实战:</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_002()&#123;</div><div class="line">    // init</div><div class="line">    int nums[] = new int[102];</div><div class="line">    List&lt;Integer&gt; initNums = Arrays.asList(6,3,1,7,5,8,9,2,4);</div><div class="line">    for(int i = 0; i &lt; initNums.size(); i ++) &#123;</div><div class="line">        nums[i] = initNums.get(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int head = 0;</div><div class="line">    int tail = initNums.size();</div><div class="line">    while (head &lt; tail) &#123;</div><div class="line">        System.out.print(nums[head] + &quot; &quot;);</div><div class="line">        head ++;</div><div class="line">        nums[tail] = nums[head];</div><div class="line">        tail ++;</div><div class="line">        head ++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 输出结果：6 1 5 9 4 7 2 8 3</div></pre></td></tr></table></figure>
<h4 id="2-解密回文-–-栈"><a href="#2-解密回文-–-栈" class="headerlink" title="2) 解密回文 – 栈"></a>2) 解密回文 – 栈</h4><p><code>基本思想：</code> <strong>后进先出</strong>的数据结构，且只能在一端进行插入和删除操作。</p>
<p><code>生活上的例子：</code>我们在吃桶装薯片的时候，想要吃掉<strong>最后一片</strong>，就必须把前面的全部吃掉；在装子弹的时候，最后装入的那发子弹，是被第一个打出去的；</p>
<p><code>场景：</code> “xyzyx”是一个回文字符串，所谓回文字符串就是正读反读均相同的字符序列。通过栈这个数据结构我们很容易判断一个字符串是否为回文。</p>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">   public void test_003()&#123;</div><div class="line">       String str = &quot;xyzyx&quot;;</div><div class="line"></div><div class="line">       // 偶数一定不是回文</div><div class="line">       if(str.length() % 2 == 0)&#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       int mid = str.length() / 2;</div><div class="line">       int top = -1;</div><div class="line">       char[] strChars = str.toCharArray();</div><div class="line">       char[] firstChars = new char[mid];</div><div class="line"></div><div class="line">       for(int i = 0; i &lt; mid; i ++) &#123;</div><div class="line">           firstChars[++top] = strChars[i];</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       System.out.print(&quot;firstChars =&gt; &quot; + new String(firstChars) + “ : ”);</div><div class="line"></div><div class="line">       // xy mid yx 左右两边是对称的;</div><div class="line">       for(int i = mid + 1; i &lt; str.length()-1; i++) &#123;</div><div class="line">           if(strChars[i] != firstChars[top])&#123;</div><div class="line">               break;</div><div class="line">           &#125;</div><div class="line">           top --;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       System.out.println(top == 0 ? &quot;YES&quot; : &quot;NO&quot;);</div><div class="line">   &#125;</div><div class="line">   // 结果: firstChars =&gt; xy : YES</div></pre></td></tr></table></figure>
<h4 id="3-链表"><a href="#3-链表" class="headerlink" title="3) 链表"></a>3) 链表</h4><p><code>场景：</code> 有一串已经从小到大排好序的数<code>2 3 5 9 10 18 26 32</code>，需要往这串数中插入6，使其得到的新序列仍符合从小到大的排序。</p>
<p><code>解决思路:</code> 方式1，将8和8后面的数都往后挪一位，但这样非常耗时。方式2，采用链表插入的方式「如图」，非常快。</p>
<p><img src="http://i1.piimg.com/567571/a579c9ed51b59186.png" alt=""></p>
<p><code>模拟链表描述：</code> 两个数组，第一个数组data用来存放具体数字，另外一个数组right用来存放当前序列中每个元素右边元素在数组data中的位置。如：right[1]的值为2，表示当前序列中1号元素右边的元素存放在data[2]中。</p>
<p><img src="http://i2.muimg.com/567571/ad75760e34453fb6.png" alt=""></p>
<p>现需要在8前面插入一个6，只需要将6直接存放在数组data的末尾即data[9]=6,接着只需要将right[3]改为9，表示新序列中3号元素右边的元素放在data[9]；再将right[9]改为3，表示新序列中9号元素右边的元素存放在data[3]中。</p>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_004()&#123;</div><div class="line">        List&lt;Integer&gt; init = Arrays.asList(2,3,5,8,9,10,18,26,32);</div><div class="line">        int[] data = new int[init.size()+1];</div><div class="line">        for (int i=0; i&lt; init.size(); i++) &#123;</div><div class="line">            data[i] = init.get(i);</div><div class="line">        &#125;</div><div class="line">        // 在数组末尾加一个数</div><div class="line">        data[data.length-1] = 6;</div><div class="line">        int[] right = new int[data.length];</div><div class="line"></div><div class="line">        for(int i = 0; i &lt; init.size(); i++)&#123;</div><div class="line">            right[i] = 1+i &lt; init.size() ? 1+i : 0;</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;data =&gt; &quot; + JSON.toJSONString(init));</div><div class="line">        System.out.println(&quot;right =&gt; &quot; + JSON.toJSONString(right) + &quot;\n\n&quot;);</div><div class="line"></div><div class="line">        // 从链表头开始遍历</div><div class="line">        int t = -1;</div><div class="line">        while (t!=0) &#123;</div><div class="line">            t = t + 1;</div><div class="line">            if(data[right[t]] &gt; data[data.length-1]) &#123;</div><div class="line">                right[data.length-1] = right[t];</div><div class="line">                right[t] = data.length-1;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            t = right[t];</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;after insert data =&gt; &quot; + JSON.toJSONString(data));</div><div class="line">        System.out.println(&quot;right =&gt; &quot; + JSON.toJSONString(right));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data =&gt; [2,3,5,8,9,10,18,26,32]</div><div class="line">right =&gt; [1,2,3,4,5,6,7,8,0,0]</div><div class="line"></div><div class="line"></div><div class="line">after insert data =&gt; [2,3,5,8,9,10,18,26,32,6]</div><div class="line">right =&gt; [1,2,9,4,5,6,7,8,0,3]</div></pre></td></tr></table></figure>
<p><code>核心代码逻辑图解：</code></p>
<p><img src="http://i4.buimg.com/567571/c1957d0f1373b136.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>啊哈！算法 by 啊哈磊</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;算法一篇空白，大学所学忘的差不多了，接下来几周会侧重学习算法基础。&lt;/p&gt;
&lt;h3 id=&quot;1-排序&quot;&gt;&lt;a href=&quot;#1-排序&quot; cl
    
    </summary>
    
      <category term="算法" scheme="http://jianwl.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://jianwl.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>React-Router入门</title>
    <link href="http://jianwl.com/2017/04/23/React-Router%E5%85%A5%E9%97%A8/"/>
    <id>http://jianwl.com/2017/04/23/React-Router入门/</id>
    <published>2017-04-23T04:26:18.000Z</published>
    <updated>2017-04-23T05:54:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>真正学会<code>React</code>是一个漫长的过程。你会发现，它不是一个库，也不是一个框架，而是一个庞大的体系，想要发挥它的威力，整个技术栈都要配合它改造。你要学习一整套解决方案，从后端到前端都是全新的做法。</p>
<p>本文介绍<code>React</code>体系的一个重要组成部分：路由库<code>React-Router</code>,它是官方维护的，事实上也是唯一可选的路由库。它通过管理URL，实现组件的切换和状态的变化，开发复杂的应用几乎肯定会用到。</p>
<h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><p>React Router安装命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -S react-router</div></pre></td></tr></table></figure>
<p>使用时，路由器<code>Router</code>就是React的一个组件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; Router &#125; from &apos;react-router&apos;;</div><div class="line">render(&lt;Router/&gt;,document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
<p><code>Router</code>组件本身只是一个容器，真正的路由要通过<code>Route</code>组件来定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; Router, Route, hashHistory &#125; from &apos;react-router&apos;;</div><div class="line"></div><div class="line">render((</div><div class="line">	&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">		&lt;Router path=&quot;/&quot; component=&#123;App&#125;/&gt;</div><div class="line">	&lt;/Router&gt;</div><div class="line">), document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问跟路由<code>/</code>（比如<code>http://www.example.com/</code>）,组件App就会加载到<code>document.getElementById(&#39;app&#39;)</code>。</p>
<p>你可能还注意到，<code>Router</code>组件有一个参数<code>history</code>，它的值<code>hashHistory</code>表示，路由的切换由URL的hash变化决定，即<code>URL</code>的<code>#</code>部分发生变化，举例来说，用户访问<code>http://www.example.com/</code>，实际上看到的是<code>http://www.example.com/#/</code>。</p>
<p><code>Route</code>组件定义了URL路径与组件的对应关系，你可以同时使用多个<code>Route</code>组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">	&lt;Route path=&quot;/&quot; component=&#123;App&#125;/&gt;</div><div class="line">	&lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;/&gt;</div><div class="line">	&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>repos</code>(比如<code>http://localhost:8080/#/repos</code>),加载<code>Repos</code>组件；访问<code>/about</code>(<code>http://localhost:8080/#/about</code>)时，加载<code>About</code>组件。</p>
<h3 id="2-嵌套路由"><a href="#2-嵌套路由" class="headerlink" title="2. 嵌套路由"></a>2. 嵌套路由</h3><p>Route组件可以嵌套</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">	&lt;Route path=&quot;/&quot; component=&#123;App&#125;/&gt;</div><div class="line">		&lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;/&gt;</div><div class="line">		&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</div><div class="line">	&lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>/repos</code>时，会先加载<code>App</code>组件，然后在它的内部再加载<code>Repos</code>组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;App&gt;</div><div class="line">	&lt;Repos&gt;</div><div class="line">&lt;/App&gt;</div></pre></td></tr></table></figure>
<p><code>App</code>组件要写成下面的样子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export default React.createClass(&#123;</div><div class="line">	render() &#123;</div><div class="line">		return &lt;div&gt;</div><div class="line">			&#123;this.props.children&#125;</div><div class="line">			&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上面代码中，<code>App</code>组件的<code>this.props.children</code>属性就是子组件。</p>
<p>子路由也可以不写在<code>Router</code>组件里面，单独传入<code>Router</code>组件的<code>routes</code>属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let routes = &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">	&lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;/&gt;</div><div class="line">	&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Route&gt;</div><div class="line"></div><div class="line">&lt;Router routes=&#123;routes&#125; history=&#123;browserHistory&#125;/&gt;</div></pre></td></tr></table></figure>
<h3 id="3-path属性"><a href="#3-path属性" class="headerlink" title="3. path属性"></a>3. path属性</h3><p><code>Route</code>组件的<code>path</code>属性指定路由的匹配规则，这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件。</p>
<p>试看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">	&lt;Route path=&quot;message/:id&quot; component=&#123;Message&#125;&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，当用户访问<code>/inbox/message/:id</code>,会加载下面的组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Inbox&gt;</div><div class="line">	&lt;Message/&gt;</div><div class="line">&lt;/Inbox&gt;</div></pre></td></tr></table></figure>
<p>如果省略外层<code>Route</code>的path参数，写成下面的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Route component=&#123;Inbox&#125;&gt;</div><div class="line">	&lt;Route path=&quot;inbox/message/:id&quot; component=&#123;Message&#125;&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>现在用户访问<code>/inbox/message/:id</code>时，组件加载还是原来的样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Inbox&gt;</div><div class="line">	&lt;Message/&gt;</div><div class="line">&lt;/Inbox&gt;</div></pre></td></tr></table></figure>
<h3 id="4-通配符"><a href="#4-通配符" class="headerlink" title="4. 通配符"></a>4. 通配符</h3><p><code>path</code>属性可以使用通配符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/hello/:name&quot;&gt;</div><div class="line">// 匹配 /hello/andy</div><div class="line">// 匹配 /hello/lucy</div><div class="line"></div><div class="line">&lt;Route path=&quot;/hello(/:name)&quot;&gt;</div><div class="line">// 匹配 /hello</div><div class="line">// 匹配 /hello/andy</div><div class="line">// 匹配 /hello/lucy</div><div class="line"></div><div class="line">&lt;Route path=&quot;/files/*.*&quot;&gt;</div><div class="line">// 匹配 /files/hello.jpg</div><div class="line">// 匹配 /files/hello.html</div><div class="line"></div><div class="line">&lt;Route path=&quot;/files/*&quot;&gt;</div><div class="line">// 匹配 /files/</div><div class="line">// 匹配 /files/a</div><div class="line">// 匹配 /files/a/b</div><div class="line"></div><div class="line">&lt;Route path=&quot;/**/*.jpg&quot;&gt;</div><div class="line">// 匹配 /files/hello.jpg</div><div class="line">// 匹配 /files/path/to/file.jpg</div></pre></td></tr></table></figure>
<p>通配符的规则如下：</p>
<p>(1) <code>:paramName</code></p>
<p><code>:paramName</code>匹配URL的一个部分，知道遇到下一个<code>/</code>、<code>？</code>、<code>#</code>为止，这个路径参数可以通过<code>this.props.params.paramName</code>取出；</p>
<p>(2) <code>()</code></p>
<p><code>()</code>表示URL的这个部分是可选的；</p>
<p>(3) <code>*</code></p>
<p><code>*</code>匹配任意字符，直到模式里面的下一个字符为止，匹配方式是非贪婪模式；</p>
<p>(4) <code>**</code></p>
<p><code>**</code> 匹配任意字符，知道下一个<code>/</code>、<code>？</code>、<code>#</code>为止。匹配方式是贪婪模式。</p>
<p><code>path</code> 属性也可以使用相对路径(不以<code>/</code>开头)，匹配时就会相对于父组件的路由，可以参考上一节的例子，嵌套路由如果想摆脱这个规则，可以使用绝对路由。</p>
<p>路由匹配规则是从上到下执行，一旦发现匹配，就不再匹配其余的规则了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/comments&quot; ...&gt;</div><div class="line">&lt;Route path=&quot;/comments&quot; ...&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，路径<code>/comments</code>同时匹配两个规则，第二个规则不会生效。</p>
<p>设置路径参数时，需要特别小心这一点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path=&quot;/:userName/:id&quot; component=&#123;UserPage&#125;/&gt;</div><div class="line">  &lt;Route path=&quot;/about/me&quot; component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>/about/me</code>时，不会触发第二个路由规则，因为它会匹配<code>/:username/:id</code>这个规则，因此，带参数的路劲一般要写在路由规则的底部。</p>
<p>此外，<code>URL</code>的查询字符串<code>/foo?bar=baz</code>，可以用<code>this.props.location.query.bar</code>获取。</p>
<h3 id="5-IndexRoute组件"><a href="#5-IndexRoute组件" class="headerlink" title="5. IndexRoute组件"></a>5. IndexRoute组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">    &lt;Route path=&quot;accounts&quot; component=&#123;Accounts&#125;/&gt;</div><div class="line">    &lt;Route path=&quot;statements&quot; component=&#123;Statements&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，访问根路径<code>/</code>，不会加载任何子组件，也就是说，<code>App</code>组件的<code>this.props.children</code>，这时是<code>undefined</code>。</p>
<p><code>IndexRoute</code>就是解决这个问题的，显示指定<code>Home</code>是跟路由的子组件，即默认情况下加载的子组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</div><div class="line">    &lt;Route path=&quot;accounts&quot; component=&#123;Accounts&#125;/&gt;</div><div class="line">    &lt;Route path=&quot;statements&quot; component=&#123;Statements&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>现在，用户访问<code>/</code>的时候，加载的组件结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;App&gt;</div><div class="line">  &lt;Home/&gt;</div><div class="line">&lt;/App&gt;</div></pre></td></tr></table></figure>
<h3 id="6-Redirect组件"><a href="#6-Redirect组件" class="headerlink" title="6. Redirect组件"></a>6. Redirect组件</h3><p><code>&lt;Redirect&gt;</code>组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">	&#123;/* 从/inbox/messages/:id 跳转到 /messages/:id */&#125;</div><div class="line">	&lt;Redirect from=&quot;messages/:id&quot; to=&quot;/messages/:id&quot;&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<h3 id="7-IndexRedirect组件"><a href="#7-IndexRedirect组件" class="headerlink" title="7. IndexRedirect组件"></a>7. IndexRedirect组件</h3><p><code>IndexRedirect</code>组件用于访问跟路由的时候，将用户重定向到某个子组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">  ＜IndexRedirect to=&quot;/welcome&quot; /&gt;</div><div class="line">  &lt;Route path=&quot;welcome&quot; component=&#123;Welcome&#125; /&gt;</div><div class="line">  &lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问根路径时，将自动重定向到子组件<code>welcome</code>。</p>
<h3 id="8-Link"><a href="#8-Link" class="headerlink" title="8. Link"></a>8. Link</h3><p><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击跳转到另一个路由。它基本上就是<code>&lt;a&gt;</code>元素的<code>React</code>版本，可以接收<code>Router</code>的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">	return &lt;div&gt;</div><div class="line">		&lt;ul role=&quot;nav&quot;&gt;</div><div class="line">			&lt;li&gt;&lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;Link to=&quot;/repos&quot;&gt;Repos&lt;/Link&gt;&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="9-IndexLink"><a href="#9-IndexLink" class="headerlink" title="9.IndexLink"></a>9.IndexLink</h3><p>如果链接到跟路由<code>/</code>，不要使用<code>Link</code>组件，而要使用<code>IndexLink</code>组件，对于跟路由来说<code>activeStyle</code>和<code>activeClassName</code>会失效，或者说总是生效，因为<code>/</code>会匹配任何子路由，而<code>IndexLink</code>组件会使用路径的精确匹配。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;IndexLink to=&quot;/&quot; activeClassName=&quot;active&quot;&gt;</div><div class="line">  Home</div><div class="line">&lt;/IndexLink&gt;</div></pre></td></tr></table></figure>
<h3 id="10-history属性"><a href="#10-history属性" class="headerlink" title="10. history属性"></a>10. history属性</h3><p><code>Router</code>组件的<code>history</code>属性，用来监听浏览器地址栏的变化，并将URL解析成一个地址对象，供<code>React Router</code>匹配。</p>
<p><code>history</code>属性，一共可以设置三种值，分别为 browserHistory、hashHistory、createMemoryHistory。</p>
<p>(1) 如果设为<code>hashHistory</code>，路由将通过URL的hash部分(<code>#</code>)切换，URL的形式类似<code>example.com/#/some/path</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; hashHistory &#125; from &apos;react-router&apos;</div><div class="line"></div><div class="line">render(</div><div class="line">	&lt;Router history= &#123;hashHistory&#125; routes=&#123;routes&#125;/&gt;,</div><div class="line">	document.getElementById(&apos;app&apos;)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>(2) 如果设为<code>browserHistory</code>，浏览器的路由将不再通过<code>Hash</code>完成，而显示正常的路径<code>example.com/some/path</code>,背后调用的是浏览器的History API.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; browserHistory &#125; from &apos;react-router&apos;</div><div class="line"></div><div class="line">render(</div><div class="line">	&lt;Router history= &#123;browserHistory&#125; routes=&#123;routes&#125;/&gt;,</div><div class="line">	document.getElementById(&apos;app&apos;)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>但是，这种情况需要对服务器改造，否则用户直接向服务器请求某个子路由，会显示<code>404</code>。</p>
<p>(3) <code>createMemoryHistory</code>主要用于服务器渲染，它创建一个内存中<code>history</code>对象，不与浏览器<code>URL</code>互动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const history = createMemoryHistory(location)</div></pre></td></tr></table></figure>
<h3 id="11-表单处理"><a href="#11-表单处理" class="headerlink" title="11. 表单处理"></a>11. 表单处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">	&lt;input type=&quot;text&quot; placeholder=&quot;username&quot;/&gt;</div><div class="line">	&lt;input type=&quot;text&quot; placeholder=&quot;repo&quot;&gt;</div><div class="line">	&lt;button type=&quot;submit&quot;&gt;Go&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>第一种方法是使用<code>browserHistory.push</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import &#123; browserHistory &#125; from &apos;react-router&apos;</div><div class="line"></div><div class="line">// ...</div><div class="line"></div><div class="line">handleSubmit(event) &#123;</div><div class="line">	event.preventDefault()</div><div class="line">	const userName = event.target.elements[0].value</div><div class="line">	const repo = event.target.element[1].value</div><div class="line">	const path = `/repos/$&#123;userName&#125;/$&#123;repo&#125;`</div><div class="line">	browserHistory.push(path)</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>第二种方法是使用<code>context</code>对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">export default React.createClass(&#123;</div><div class="line">	contextTypes: &#123;</div><div class="line">		router: React.PropTypes.object</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	handleSubmit(event) &#123;</div><div class="line">		// ...</div><div class="line">		this.context.router.push(path)</div><div class="line">	&#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="12-路由的钩子"><a href="#12-路由的钩子" class="headerlink" title="12. 路由的钩子"></a>12. 路由的钩子</h3><p>每个路由都有<code>Enter</code>和<code>Leave</code>钩子，用户进入或离开时触发。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</div><div class="line">＜Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">  ＜Redirect from=&quot;messages/:id&quot; to=&quot;/messages/:id&quot; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，如果用户离开<code>/messages/:id</code>，进入<code>/about</code>时，会依次触发以下的钩子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/messages/:id的onLeave</div><div class="line">/inbox的onLeave</div><div class="line">/about的onEnter</div></pre></td></tr></table></figure>
<p>下面是一个例子，使用<code>onEnter</code>钩子代替<code>&lt;Redirect&gt;</code>组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">  &lt;Route</div><div class="line">    path=&quot;messages/:id&quot;</div><div class="line">    onEnter=&#123;</div><div class="line">      (&#123;params&#125;, replace) =&gt; replace(`/messages/$&#123;params.id&#125;`)</div><div class="line">    &#125; </div><div class="line">  /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p><code>onEnter</code>钩子还可以用来做认证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const requireAuth = (nextState, replace) =&gt; &#123;</div><div class="line">    if (!auth.isAdmin()) &#123;</div><div class="line">        // Redirect to Home page if not an Admin</div><div class="line">        replace(&#123; pathname: &apos;/&apos; &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export const AdminRoutes = () =&gt; &#123;</div><div class="line">  return (</div><div class="line">     &lt;Route path=&quot;/admin&quot; component=&#123;Admin&#125; onEnter=&#123;requireAuth&#125; /&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是一个高级应用，当用户离开一个路径的时候，跳出一个提示框，要求用户确认是否离开。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const Home = withRouter(</div><div class="line">  React.createClass(&#123;</div><div class="line">    componentDidMount() &#123;</div><div class="line">      this.props.router.setRouteLeaveHook(</div><div class="line">        this.props.route, </div><div class="line">        this.routerWillLeave</div><div class="line">      )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    routerWillLeave(nextLocation) &#123;</div><div class="line">      // 返回 false 会继续停留当前页面，</div><div class="line">      // 否则，返回一个字符串，会显示给用户，让其自己决定</div><div class="line">      if (!this.state.isSaved)</div><div class="line">        return &apos;确认要离开？&apos;;</div><div class="line">    &#125;,</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>上面代码中，<code>setRouteLeaveHook</code>方法为<code>Leave</code>钩子指定<code>routerWillLeave</code>函数。该方法如果返回false，将阻止路由的切换，否则就返回一个字符串，提示用户决定是否要切换。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="external">React Router使用教程 by 阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;真正学会&lt;code&gt;React&lt;/code&gt;是一个漫长的过程。你会发现，它不是一个库，也不是一个框架，而是一个庞大的体系，想要发挥它的威力，
    
    </summary>
    
      <category term="React" scheme="http://jianwl.com/categories/React/"/>
    
    
      <category term="React" scheme="http://jianwl.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="http://jianwl.com/2017/04/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://jianwl.com/2017/04/22/Linux学习笔记/</id>
    <published>2017-04-22T02:00:00.000Z</published>
    <updated>2017-04-22T02:59:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-快速改变当前工作目录的有效方法："><a href="#1-快速改变当前工作目录的有效方法：" class="headerlink" title="1. 快速改变当前工作目录的有效方法："></a>1. 快速改变当前工作目录的有效方法：</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>运行结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td>更改工作目录到你的家目录</td>
</tr>
<tr>
<td>cd -</td>
<td>更改工作目录到先前的工作目录</td>
</tr>
<tr>
<td>cd ~user_name</td>
<td>更改工作目录到用户家目录</td>
</tr>
</tbody>
</table>
<h4 id="2-Linux目录结构"><a href="#2-Linux目录结构" class="headerlink" title="2. Linux目录结构"></a>2. Linux目录结构</h4><table>
<thead>
<tr>
<th>目录</th>
<th>评论</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>根目录，万物起源</td>
</tr>
<tr>
<td>/bin</td>
<td>包含系统启动和运行所必须的二进制程序</td>
</tr>
<tr>
<td>/boot</td>
<td>包含Linux内核，最初的RMA磁盘映像</td>
</tr>
<tr>
<td>/dev</td>
<td>这是一个包含设备结点的特殊目录。 “一切都是文件”，也适用于设备，在这个目录里，内核维护着它支持的设备</td>
</tr>
<tr>
<td>/etc</td>
<td>这个目录包含所有系统层面的配置文件。它也包含一系列的shell脚本，在系统启动时，这些脚本会运行每个系统服务。这个目录中的任何文件都是可读的文本文件。<code>/etc/crontab</code>，定义自动运行的任务；<code>/etc/fstab</code>，包含存储设备的列表，以及与他们相关的挂载点;<code>/etc/passwd</code>，包含用户账号列表;</td>
</tr>
<tr>
<td>/home</td>
<td>在通常的配置环境下，系统会在/home下，给每个用户分配一个目录，普通智能在他们的目录下创建文件。这个限制保护系统免受错误的用户活动破坏。</td>
</tr>
<tr>
<td>/lib</td>
<td>包含核心程序所需的库文件，这些文件与windows中的动态链接库相似</td>
</tr>
<tr>
<td>/lost+found</td>
<td>每个使用Linux文件系统的格式化分区或设备</td>
</tr>
<tr>
<td>/media</td>
<td>可移除媒体设备的挂载点，例如USB驱动器、CD-ROMS等</td>
</tr>
<tr>
<td>/mnt</td>
<td>可移除设备的挂载点</td>
</tr>
<tr>
<td>/opt</td>
<td>安装可选的软件</td>
</tr>
<tr>
<td>/proc</td>
<td>它是一个由Linux内核维护的虚拟文件系统，它所包含的文件时内核的窥视孔</td>
</tr>
<tr>
<td>/root</td>
<td>root账户的家目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>这个目录包含“系统”二进制文件</td>
</tr>
<tr>
<td>/tmp</td>
<td>存储各种程序创建的临时文件的地方</td>
</tr>
<tr>
<td>/usr</td>
<td>包含普通用户所需要的所有程序和文件</td>
</tr>
<tr>
<td>/usr/bin</td>
<td>系统安装的可执行程序</td>
</tr>
<tr>
<td>/usr/lib</td>
<td>程序所用的共享库</td>
</tr>
<tr>
<td>/usr/local</td>
<td>由源码编译的程序会安装在/usr/local/bin目录下</td>
</tr>
<tr>
<td>/usr/sbin</td>
<td>许多系统管理程序</td>
</tr>
<tr>
<td>/usr/share</td>
<td>由/usr/bin目录中的程序使用的共享数据</td>
</tr>
<tr>
<td>/var</td>
<td>各种数据库，假脱机文件、用户邮件等都在这</td>
</tr>
<tr>
<td>/var/log</td>
<td>系统日志</td>
</tr>
</tbody>
</table>
<h4 id="3-硬链接-VS-符号链接"><a href="#3-硬链接-VS-符号链接" class="headerlink" title="3. 硬链接 VS 符号链接"></a>3. 硬链接 VS 符号链接</h4><p><code>硬链接</code></p>
<p><img src="http://i2.muimg.com/567571/c80b86ffcc0477bf.png" alt=""></p>
<p>source.txt与copy.txt共用同一份资源，任何一个文件改动，另外一个文件会跟着变化。</p>
<p><code>符号链接</code></p>
<p><img src="http://i2.muimg.com/567571/aae479ac8ce6f170.png" alt=""></p>
<p>source.txt与sign_copy.txt共用同一份资源，任何一个文件改动，另外一个文件会跟着变化。</p>
<p><code>硬链接 VS 符号链接区别 ？</code></p>
<p>硬链接不能跨越物理设备，硬链接不能关联目录，只能关联文件；符号链接就是为了解决这两个问题，创建符号链接的过程与硬链接相似；</p>
<h4 id="4-which-显示可执行文件的位置"><a href="#4-which-显示可执行文件的位置" class="headerlink" title="4. which 显示可执行文件的位置"></a>4. which 显示可执行文件的位置</h4><p><img src="http://i1.piimg.com/567571/224ff92365521577.png" alt=""></p>
<h4 id="5-重定向"><a href="#5-重定向" class="headerlink" title="5. 重定向"></a>5. 重定向</h4><h5 id="1-重定向标准输出，从头开始写文件"><a href="#1-重定向标准输出，从头开始写文件" class="headerlink" title="1) 重定向标准输出，从头开始写文件"></a>1) 重定向标准输出，从头开始写文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 将标准输出重定向到 ls-output.txt 文件</div><div class="line">ls -l /usr/bin &gt; ls-output.txt</div></pre></td></tr></table></figure>
<p>重复定向测试，这次我们把目录换成一个不存在的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 屏幕上显示 ls: /usr/bins: No such file or directory</div><div class="line">ls -l /usr/bins &gt; ls-output.txt</div></pre></td></tr></table></figure>
<p>为什么错误信息没有被重定向到ls-output.txt文件呢？反而直接抛出在屏幕上，因为我们只定义了标准输出，而没有定向标准错误输出。</p>
<h5 id="2）重定向标准输出，追加文件"><a href="#2）重定向标准输出，追加文件" class="headerlink" title="2）重定向标准输出，追加文件"></a>2）重定向标准输出，追加文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 将内容追加到ls-output.txt</div><div class="line">ls -l /usr/bin &gt;&gt; ls-output.txt</div></pre></td></tr></table></figure>
<h5 id="3-重定向标准错误"><a href="#3-重定向标准错误" class="headerlink" title="3) 重定向标准错误"></a>3) 重定向标准错误</h5><p><img src="http://i2.muimg.com/567571/b024d5f76e8db1a7.png" alt=""></p>
<p>文件描述符2，紧挨着重定向符之前，用来重定向标准错误输出到文件。</p>
<h5 id="4）重定向标准输出和错误到同一个文件"><a href="#4）重定向标准输出和错误到同一个文件" class="headerlink" title="4）重定向标准输出和错误到同一个文件"></a>4）重定向标准输出和错误到同一个文件</h5><p><img src="http://i1.piimg.com/567571/a1958525fdae5dfd.png" alt=""></p>
<p><code>2&gt;&amp;1</code>表示重定向文件描述符<code>2</code>「标准错误」到文件描述符<code>1</code>「标准输出」，注意重定向的顺序非常重要，标准错误的重定向必须总是在标准输出重定向之后，要不然它就不起作用；</p>
<h5 id="5-处理不需要的输出"><a href="#5-处理不需要的输出" class="headerlink" title="5) 处理不需要的输出"></a>5) 处理不需要的输出</h5><p>有时候我们不想要一个命令的输出结果，只想把他们直接扔掉，我们可以将其重定向到一个特殊的叫做<code>/dev/null</code>的文件，它接受输入，并且对输入不做任何处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -l /usr/bins 2&gt; /dev/null</div></pre></td></tr></table></figure>
<h4 id="6-快速移动光标快捷键"><a href="#6-快速移动光标快捷键" class="headerlink" title="6. 快速移动光标快捷键"></a>6. 快速移动光标快捷键</h4><table>
<thead>
<tr>
<th>按键</th>
<th>行动</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl-a</td>
<td>光标移到行首</td>
</tr>
<tr>
<td>Ctrl-e</td>
<td>光标移到行尾</td>
</tr>
<tr>
<td>Ctrl-f</td>
<td>光标前移一个字符</td>
</tr>
<tr>
<td>Ctrl-b</td>
<td>光标后移一个字符</td>
</tr>
<tr>
<td>Ctrl-l</td>
<td>清空屏幕</td>
</tr>
</tbody>
</table>
<h4 id="7-VIM快捷键"><a href="#7-VIM快捷键" class="headerlink" title="7. VIM快捷键"></a>7. VIM快捷键</h4><h5 id="1-移动光标-「命令模式下」"><a href="#1-移动光标-「命令模式下」" class="headerlink" title="1) 移动光标 「命令模式下」"></a>1) 移动光标 「命令模式下」</h5><table>
<thead>
<tr>
<th>按键</th>
<th>移动光标</th>
</tr>
</thead>
<tbody>
<tr>
<td>l</td>
<td>向右移动一个字符</td>
</tr>
<tr>
<td>h</td>
<td>向左移动一个字符</td>
</tr>
<tr>
<td>j</td>
<td>向下移动一行</td>
</tr>
<tr>
<td>k</td>
<td>向上移动一行</td>
</tr>
<tr>
<td>^</td>
<td>移动到当前行的第一个非空字符</td>
</tr>
<tr>
<td><code>$</code></td>
<td>移动到当前行的末尾</td>
</tr>
<tr>
<td>numberG</td>
<td>移动到第number行</td>
</tr>
<tr>
<td>G</td>
<td>移动到文件末尾</td>
</tr>
</tbody>
</table>
<h5 id="2-删除文本"><a href="#2-删除文本" class="headerlink" title="2) 删除文本"></a>2) 删除文本</h5><table>
<thead>
<tr>
<th>按键</th>
<th>删除的文本</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>当前字符</td>
</tr>
<tr>
<td>dd</td>
<td>当前行</td>
</tr>
<tr>
<td>5dd</td>
<td>当前行及随后4行</td>
</tr>
<tr>
<td>dG</td>
<td>当前行到文件末尾</td>
</tr>
<tr>
<td>d20G</td>
<td>当前行到文件的第20行</td>
</tr>
</tbody>
</table>
<h5 id="3-复制文本"><a href="#3-复制文本" class="headerlink" title="3) 复制文本"></a>3) 复制文本</h5><p>通过 dd「剪切」yy「复制」文本，通过 p「粘贴」</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>复制的内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>yy</td>
<td>当前行</td>
</tr>
<tr>
<td>5yy</td>
<td>当前行及随后4行</td>
</tr>
<tr>
<td>yG</td>
<td>当前行到文件末尾</td>
</tr>
<tr>
<td>y20G</td>
<td>当前行到文件的第20行</td>
</tr>
</tbody>
</table>
<h5 id="4-全局查找和替代"><a href="#4-全局查找和替代" class="headerlink" title="4) 全局查找和替代"></a>4) 全局查找和替代</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/Line/line/g</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>条目</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>:</td>
<td>冒号字符运行一个ex命令</td>
</tr>
<tr>
<td>%</td>
<td>指定要操作的行数，%是一个快捷方式，表示从第一行到最后一行。另外也可以用1,<code>$</code>来代替，表示从第一行到文件最后一行</td>
</tr>
<tr>
<td>s</td>
<td>指定操作，在这种情况下是，替换</td>
</tr>
<tr>
<td>Line/line</td>
<td>查找类型与替换文本</td>
</tr>
<tr>
<td>g</td>
<td>文本行中所有匹配的字符串执行查找和替换操作</td>
</tr>
</tbody>
</table>
<h5 id="5-显示行号与关闭行号"><a href="#5-显示行号与关闭行号" class="headerlink" title="5) 显示行号与关闭行号"></a>5) 显示行号与关闭行号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:set nu // 显示行号</div><div class="line">:set nonu // 关闭行号</div></pre></td></tr></table></figure>
<h4 id="8-查找文件"><a href="#8-查找文件" class="headerlink" title="8. 查找文件"></a>8. 查找文件</h4><p><img src="http://i1.piimg.com/567571/062a4bbf1cd6f71f.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>快乐的Linux命令行</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;1-快速改变当前工作目录的有效方法：&quot;&gt;&lt;a href=&quot;#1-快速改变当前工作目录的有效方法：&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Redux入门教程(三)</title>
    <link href="http://jianwl.com/2017/04/21/Redux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%B8%89/"/>
    <id>http://jianwl.com/2017/04/21/Redux入门教程-三/</id>
    <published>2017-04-21T09:00:53.000Z</published>
    <updated>2017-04-21T10:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="http://jianwl.com/2017/04/21/Redux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BA%8C/#more">上一篇文章</a>，介绍了Redux的基本做法：用户发出Action,Reducer函数算出新的State，View重新渲染。但是一个关键的问题没有解决：异步操作怎么办？Action发出以后，Reducer立即算出State，这叫做同步；Action发出以后，过一段时间在执行Reducer，这就是异步。</p>
<p>怎么才能Reducer在异步操作结束后自动执行呢？这就要用到新的工具：中间件(middleware)。</p>
<h3 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h3><p>为了理解中间件，让我们站在框架作者的角度思考问题：如果要添加功能，你会在哪个环节添加？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Reducer: 纯函数，只能承担计算 State 的功能，不适合承担其他功能，也承担不了，因为理论上，纯函数不能进行读写操作。</div><div class="line"></div><div class="line">View：与 State 一一对应，可以看做 State 的视觉层，也不适合承担其他功能。</div><div class="line"></div><div class="line">Action: 存放数据的对象，即消息的载体， 只能被别人操作，自己不能进行任何操作。</div></pre></td></tr></table></figure>
<p>想来想去，只有发送 Action 的这个步骤，即<code>store.dispatch()</code>方法，可以添加功能，距离来说，添加日志功能，把 Action 和 State 打印出来， 可以对<code>store.dispatch</code>进行如下改造。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let next = store.dispatch;</div><div class="line">store.dispatch = function dispatchAndLog(action) &#123;</div><div class="line">	consle.log(&quot;dispatching&quot;,action);</div><div class="line">	next(action);</div><div class="line">	console.log(&apos;next state&apos;, store.getState());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，对<code>store.dispatch</code>进行了重定义，在发送<code>Action</code>前后添加了打印功能，这就是中间件的雏形。中间件就是一个函数，对<code>store.dispatch</code>方法进行了改造，在发出Action 和执行 Reducer 这两步之间，添加了其他功能。</p>
<h3 id="中间件的用法"><a href="#中间件的用法" class="headerlink" title="中间件的用法"></a>中间件的用法</h3><p>上节的日志中间件，是有现成的模块的<a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">redux-logger</a>，这里将介绍如何使用它们。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; applyMiddleware, createStore &#125; from &apos;redux&apos;;</div><div class="line">import createLogger from &apos;redux-logger&apos;;</div><div class="line">const logger = createStore(</div><div class="line">	reducer,</div><div class="line">	applyMiddleware(logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>redux-logger</code>提供一个生成器<code>createLogger</code>,可以生成日志中间件<code>logger</code>,然后，将他放在<code>appleMiddleware</code>方法之中，传入<code>createStore</code>方法，就完成了<code>store.dispatch()</code>的功能增强。</p>
<p>这里有两点需要注意：</p>
<p>（1）<code>createStore</code> 方法可以接受整个应用的初始化状态作为参数，那样的话，<code>applyMiddleware</code>就是第三个参数了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const store = createStore(</div><div class="line">	reducer,</div><div class="line">	initial_state,</div><div class="line">	applyMiddleware(logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>(2) 中间件的次序有讲究</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const store = createStore(</div><div class="line">	reducer,</div><div class="line">	applyMiddleware(thunk, promise, logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>applyMiddleware</code>方法的三个参数，就是三个中间件，有的中间件有次序要求，使用前要查下文档，比如，<code>logger</code>就一定要放在最后，否则输出结果就不对。</p>
<h3 id="applyMiddlewares"><a href="#applyMiddlewares" class="headerlink" title="applyMiddlewares()"></a>applyMiddlewares()</h3><p>看到这里，你可能会问，<code>applyMiddlewares</code>这个方法到底是干什么用的？<br>它是<code>Redux</code>的原生方法，作用是将所有中间件组成一个数组，依次执行，下面是它的源码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">export default function applyMiddleware(...middlewares) &#123;</div><div class="line">	return (createStore) =&gt; (reducer, preloadedState, enhancer) =&gt; &#123;</div><div class="line">		var dispatch = store.dispatch;</div><div class="line">		var chain = [];</div><div class="line">		</div><div class="line">		var middlewareAPI = &#123;</div><div class="line">			getState: store.getState,</div><div class="line">			dispatch: (action) =&gt; dispatch(action)</div><div class="line">		&#125;;</div><div class="line">		chain = middlewares.map(middleware =&gt; middleware(middlewareAPI));</div><div class="line">		dispatch = compose(...chain)(store.dispatch);</div><div class="line">		</div><div class="line">		return &#123;...store,dispatch&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，所有中间件被放进一个数组<code>chain</code>，然后进行嵌套执行，最后执行<code>store.dispatch</code>，可以看到，中间件内部（middlewareAPI）可以拿到<code>getState</code> 和 <code>dispatch</code> 这两个方法。</p>
<h3 id="异步操作的思路"><a href="#异步操作的思路" class="headerlink" title="异步操作的思路"></a>异步操作的思路</h3><p>理解中间件以后，就可以处理异步操作了。</p>
<p>同步操作只需要发出一种Action即可，异步操作的差别是它要发出三种Action。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">操作发起的Action</div><div class="line">操作成功时的Action</div><div class="line">操作失败时的Action</div></pre></td></tr></table></figure>
<p>以向服务器取出数据为例，三种Action可以有两种不同的写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 写法一：名称相同，参数不同</div><div class="line">&#123; type: &apos;FETCH_POSTS&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS&apos;, status: &apos;error&apos;, error: &apos;Oops&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS&apos;, status: &apos;success&apos;, response: &#123; ... &#125; &#125;</div><div class="line"></div><div class="line">// 写法二：名称不同</div><div class="line">&#123; type: &apos;FETCH_POSTS_REQUEST&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS_FAILURE&apos;, error: &apos;Oops&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS_SUCCESS&apos;, response: &#123; ... &#125; &#125;</div></pre></td></tr></table></figure>
<p>除了 Action 种类不同，异步操作的 State 也要进行改造，反映不同的操作状态。下面是 State 的一个例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let state = &#123;</div><div class="line">	isFetching: true,</div><div class="line">	didInvalidate: true,</div><div class="line">	lastUpdated: &apos;xxxxx&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中， State的属性<code>isFetching</code>表示是否在抓取数据。<code>didInvalidate</code>表示数据是否过时，<code>lastUpdated</code>表示上一次更新时间。</p>
<p>现在整个异步操作的思路就很清楚了:操作开始时，送出一个 Action，触发 State 更新为”正在操作”状态，View 重新渲染;操作结束后，再送出一个 Action，触发 State 更新为”操作结束”状态，View 再一次重新渲染</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">Redux入门教程二 by 阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://jianwl.com/2017/04/21/Redux%E5%85%A5%E9%97%A8%E6%95%99
    
    </summary>
    
      <category term="React" scheme="http://jianwl.com/categories/React/"/>
    
    
      <category term="React" scheme="http://jianwl.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux入门教程(二)</title>
    <link href="http://jianwl.com/2017/04/21/Redux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://jianwl.com/2017/04/21/Redux入门教程-二/</id>
    <published>2017-04-21T02:11:40.000Z</published>
    <updated>2017-04-21T08:01:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章<a href="http://jianwl.com/2017/04/19/Redux%E5%85%A5%E9%97%A8/#more">Redux入门</a>，主要偏于实战，这一节主要介绍Redux的基本概念 &amp; API &amp; Reducer拆分。</p>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p><code>Redux</code>的设计思想很简单，就两句话。</p>
<blockquote>
<p>(1) Web 应用是一个状态机，视图与状态是一一对应的。</p>
<p>(2) 所有的状态，保存在一个对象里面。</p>
</blockquote>
<h3 id="基本概念-amp-API"><a href="#基本概念-amp-API" class="headerlink" title="基本概念 &amp; API"></a>基本概念 &amp; API</h3><h4 id="1、Store"><a href="#1、Store" class="headerlink" title="1、Store"></a>1、Store</h4><p><code>Store</code>就是保存数据的地方，你可以把它看成一个容器，整个应用只能有一个<code>Store</code>。<code>Redux</code>提供<code>createStore</code>这个函数，用来生成<code>Store</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;;</div><div class="line">const store = createStore(fn);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>createStore</code>函数接受另一个函数作为参数，返回新生成的<code>Store</code>对象。</p>
<h4 id="2、State"><a href="#2、State" class="headerlink" title="2、State"></a>2、State</h4><p><code>Store</code>对象包含所有数据，如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合，就叫<code>State</code>。当前时刻的<code>State</code>，可以通过<code>store.getState()</code>拿到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;</div><div class="line">const store = createStore(fn);</div><div class="line">const state = store.getState();</div></pre></td></tr></table></figure>
<p><code>Redux</code>规定，一个<code>State</code>对应一个<code>View</code>，只要<code>State</code>相同，<code>View</code>就相同，你知道<code>State</code>，就知道<code>View</code>是什么样。</p>
<h4 id="3、Action"><a href="#3、Action" class="headerlink" title="3、Action"></a>3、Action</h4><p><code>State</code>的变化，会导致<code>View</code>的变化，但是，用户接触不到<code>State</code>，只能接触到<code>View</code>，所以<code>State</code>变化必须是<code>View</code>导致的，<code>Action</code>就是<code>View</code>发出的通知，表示<code>State</code>应该要发送变化了。</p>
<p><code>Action</code>是一个对象，其中<code>type</code>属性是必须的，表示<code>Action</code>的名称，其他属性可以自由设置，社区有一个<a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">规范</a>可以参考。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const action = &#123;</div><div class="line">	type: &apos;ADD_TODO&apos;,</div><div class="line">	payload: &apos;Learn Redux&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>Action</code>的名称是<code>ADD_TODO</code>，它携带的信息是字符串<code>Learn Redux</code>。可以这样理解，<code>Action</code>描述当前发生的事情，改变<code>State</code>的唯一方法，就是使用<code>Action</code>，它会运送数据到<code>Store</code>。</p>
<h4 id="4、Action-Creator"><a href="#4、Action-Creator" class="headerlink" title="4、Action Creator"></a>4、Action Creator</h4><p><code>View</code>要发送多少信息，就会有多少种<code>Action</code>，如果都手写，会很麻烦，可以定义一个函数来生成<code>Action</code>，这个函数就叫<code>Action Creator</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const ADD_TODO = &apos;添加 TODO&apos;；</div><div class="line"></div><div class="line">function addTodo(text) &#123;</div><div class="line">	return &#123;</div><div class="line">		type: ADD_TODO,</div><div class="line">		text</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const action = addTodo(&apos;Learn Redux&apos;);</div></pre></td></tr></table></figure>
<p>上面代码中,<code>addTodo</code>函数就是一个<code>Action Creator</code>。</p>
<h4 id="5、store-dispatch"><a href="#5、store-dispatch" class="headerlink" title="5、store.dispatch()"></a>5、store.dispatch()</h4><p><code>store.dispatch()</code>是View发出Action的唯一方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;;</div><div class="line">const store = createStore(fn);</div><div class="line"></div><div class="line">store.dispatch(&#123;</div><div class="line">	type: &apos;ADD_TODO&apos;,</div><div class="line">	payload: &apos;Learn Redux&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>store.dispatch</code>接受一个Action对象作为参数，将他发送出去。<br>结合 <code>Action Creator</code>，这段代码可以改写如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(addTodo(‘Learn Redux’));</div></pre></td></tr></table></figure>
<h4 id="6、Reducer"><a href="#6、Reducer" class="headerlink" title="6、Reducer"></a>6、Reducer</h4><p><code>Store</code>收到<code>Action</code>以后，必须给出一个新的<code>State</code>，这样<code>View</code>才会发生变化，这种<code>State</code>的计算过程就叫做<code>Reducer</code>。<code>Reducer</code>是一个函数，它接受<code>Action</code>和当前<code>State</code>作为参数，返回一个新的<code>State</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const reducer = function(state,action) &#123;</div><div class="line">	// ...</div><div class="line">	return new_state;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个应用的状态，可以作为State的默认值，下面是一个实际例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const defaultState = 0;</div><div class="line">const reducer = (state = defaultState,action) =&gt; &#123;</div><div class="line">	switch (action.type) &#123;</div><div class="line">		case &apos;ADD&apos;:</div><div class="line">			return state + action.payload;</div><div class="line">		default:</div><div class="line">			return state;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const state = reducer(1,&#123;</div><div class="line">	type: &apos;ADD&apos;,</div><div class="line"> 	payload: 2</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>reducer</code>函数收到名为<code>ADD</code>的<code>Action</code>以后，就返回一个新的<code>State</code>,作为加法的计算结果，其他计算的逻辑（比如减法)，也可以根据<code>Action</code>的不同来实现。</p>
<p>实际应用中，<code>reducer</code>函数不用像上面这样手动调用，<code>store.dispatch</code>方法会触发<code>Reducer</code>的自动执行。为此，<code>Store</code>需要知道<code>Reducer</code>函数，做法就是在生成Store的时候，将<code>Reducer</code>传入<code>createStore</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;</div><div class="line">const store = createStore(reducer);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>createStore</code>接受<code>Reducer</code>作为参数，生成一个新的Store，以后每当<code>store.dispatch</code>发送过来一个新的<code>Action</code>，就会自动调用<code>Reducer</code>，得到<code>State</code>。</p>
<p>为什么这个函数叫做<code>Reducer</code>呢？因为它可以作为数据的<code>reduce</code>方法的函数，请看下面的例子，一系列<code>Action</code>对象按照排序作为一个数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const actions = &#123;</div><div class="line">	&#123; type: &apos;ADD&apos;, payload: 0&#125;,</div><div class="line">	&#123; type: &apos;ADD&apos;, payload: 1&#125;,</div><div class="line">	&#123; type: &apos;ADD&apos;, payload: 2&#125;</div><div class="line">&#125;</div><div class="line">const total = actions.reduce(reducer,0); //3</div></pre></td></tr></table></figure>
<p>上面代码中，数组<code>actions</code>表示依次有三个<code>Action</code>，分别是加<code>0</code>、加<code>1</code>和加<code>2</code>。数组的<code>reduce</code>方法接受<code>Reducer</code>函数作为参数，就可以直接得到最终的状态<code>3</code>。</p>
<h4 id="7、纯函数"><a href="#7、纯函数" class="headerlink" title="7、纯函数"></a>7、纯函数</h4><p><code>Reducer</code>函数最重要的特征是，它是一个纯函数，也就是说，只要是同样的输入，必定得到同样的输出。纯函数是函数式编程的概念，必须遵守以下规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不得改写参数</div><div class="line">不能调用系统I/O的API</div><div class="line">不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果</div></pre></td></tr></table></figure>
<p>由于<code>Reducer</code>是纯函数，就可以保证同样的<code>State</code>，必定得到同样的<code>View</code>，但也正因为这一点，<code>Reducer</code>函数里不能改变<code>State</code>，必须返回一个全新的对象。参考下面的写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// State 是一个对象</div><div class="line">function reducer(state, action) &#123;</div><div class="line">	return Object.assign(&#123;&#125;,state,&#123;thingToChange&#125;);</div><div class="line">	// 或者</div><div class="line">	return &#123; ...state,...newState &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// State 是一个数组</div><div class="line">function reducer(state, action) &#123;</div><div class="line">	return [ ...state, newItem ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最好把<code>State</code>对象设成只读，你没法改变它，要得到新的<code>State</code>,唯一办法就是生成一个新对象，这样的好处是，任何时候，与某个View对应的<code>State</code>总是一个不变的对象。</p>
<h4 id="store-subscribe"><a href="#store-subscribe" class="headerlink" title="store.subscribe()"></a>store.subscribe()</h4><p><code>Store</code>允许使用<code>store.subscribe</code>方法设置监听函数，一旦<code>State</code>发生变化，就自动执行这个函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;;</div><div class="line">const store = createStore(reducer);</div><div class="line"></div><div class="line">store.subscribe(listener);</div></pre></td></tr></table></figure>
<p>显然，只要把<code>View</code>的更新函数（对于React项目，就是组件的render方法或setState方法）放入<code>listen</code>，就会实现<code>View</code>的自动渲染。</p>
<p><code>store.subscribe</code>方法返回一个函数，调用这个函数就可以解除监听。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let unsubscribe = store.subscribe(() =&gt; </div><div class="line">	console.log(store.getState())</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="Reducer拆分"><a href="#Reducer拆分" class="headerlink" title="Reducer拆分"></a>Reducer拆分</h3><p><code>Reducer</code>函数负责生成<code>State</code>，由于整个应用只有一个<code>State</code>对象，包含所有数据，对于大型应用来说，这个<code>State</code>必然十分庞大，导致<code>Reducer</code>函数也十分庞大。<br>请看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const chatReducer = (state = defaultState, action = &#123;&#125;) =&gt; &#123;</div><div class="line">	const &#123; type, payload &#125; = action;</div><div class="line">	switch (type) &#123;</div><div class="line">		case ADD_CHAT:</div><div class="line">			return Object.assign(&#123;&#125;,state,&#123;</div><div class="line">				chatLog: state.chatLog.concat(payload)</div><div class="line">			&#125;);</div><div class="line">		case CHANNGE_STATUS:</div><div class="line">			return Object.assign(&#123;&#125;, state, &#123;</div><div class="line">				statusMessage: payload</div><div class="line">			&#125;);</div><div class="line">		case CHANGE_USERNAME:</div><div class="line">			return Object.assign(&#123;&#125;,state, &#123;</div><div class="line">				userName: payload</div><div class="line">			&#125;);</div><div class="line">		default: return state;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，三种<code>Action</code>分别改变<code>State</code>的三个属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ADD_CHAT: chatLog属性</div><div class="line">CHANGE_STATUS: statusMessage属性</div><div class="line">CHANGE_USERNAME: userName属性</div></pre></td></tr></table></figure>
<p>这三个属性之前没有联系，这提示我们可以把<code>Reducer</code>函数拆分，不同的函数负责处理不同属性，最终把它们合并成一个大的<code>Reducer</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const chatReducer = (state = defaultState, action = &#123;&#125;) =&gt; &#123;</div><div class="line">	return &#123;</div><div class="line">		chatLog: chatLog(state.chatLog,action),</div><div class="line">		statusMessage: statusMessage(state.statusMessage,action),</div><div class="line">		userName: userName(state.userName, action)</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>Reducer</code>函数被拆分成了三个小函数，每一个负责生产对应的属性。</p>
<p>这样一拆，<code>Reducer</code>就容易读写多了，而且，这种拆分与<code>React</code>应用的结构相吻合： 一个<code>React</code>跟组件由许多子组件构成这就是说子组件与子Reducer完全可以对应。</p>
<p>Redux提供了一个<code>combineReducers</code>方法，用于Reducer的拆分，你只要定义各个子<code>Reducer</code>函数，然后用这个方法，将它们合成一个大的<code>Reducer</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; combineReducers &#125; from &apos;redux&apos;</div><div class="line"></div><div class="line">const chatReducer = combineReducers(&#123;</div><div class="line">	chatLog,</div><div class="line">	statusMessage,</div><div class="line">	userName</div><div class="line">&#125;)</div><div class="line"></div><div class="line">export default todoApp;</div></pre></td></tr></table></figure>
<p>这种写法有一个前提，<code>State</code>的属性名必须与子<code>Redecer</code>同名，如果不同名，就要采用下面的写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const reducer = combineReducers(&#123;</div><div class="line">	a: doSomethingWithA,</div><div class="line">	b: processB,</div><div class="line">	c: c</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 等同于</div><div class="line">function reducer(state = &#123;&#125;, action) &#123;</div><div class="line">	return &#123;</div><div class="line">		a: doSomethingWithA(state.a,action),</div><div class="line">		b: processB(state.b,action),</div><div class="line">		c: c(state.c,action)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总之，<code>combineReducers()</code>做的就是产生一个整体的<code>Reducer</code>函数，该函数根据<code>State</code>的key去执行相应的子<code>Reducer</code>，并将返回结果合并成一个大的<code>State</code>对象。</p>
<p>下面是<code>combineReducer</code>的简单实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const combineReducers = reducers =&gt; &#123;</div><div class="line">	return (state = &#123;&#125;, action) =&gt; &#123;</div><div class="line">		return Object.keys(reducers).reduce(</div><div class="line">			(nextState,key) =&gt; &#123;</div><div class="line">				nextState[key] = reducers[key](state[key],action);</div><div class="line">				return nextState;	</div><div class="line">			&#125;,</div><div class="line">			&#123;&#125;</div><div class="line">		);</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>你可以把所有字<code>Reducer</code>放在一个文件里面，然后统一引入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; combineReducers &#125; from &apos;redux&apos;</div><div class="line">import * as reducers from &apos;./reducers&apos;</div><div class="line">const reducer = combineReducers(reducers)</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">Redux 入门教程（一) by 阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇文章&lt;a href=&quot;http://jianwl.com/2017/04/19/Redux%E5%85%A5%E9%97%A8/#mo
    
    </summary>
    
      <category term="React" scheme="http://jianwl.com/categories/React/"/>
    
    
      <category term="React" scheme="http://jianwl.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JS之易错点</title>
    <link href="http://jianwl.com/2017/04/20/JS%E4%B9%8B%E6%98%93%E9%94%99%E7%82%B9/"/>
    <id>http://jianwl.com/2017/04/20/JS之易错点/</id>
    <published>2017-04-19T23:37:56.000Z</published>
    <updated>2017-04-20T12:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚接触JS语法，有许多易出错的点，将这些点记录下来，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-var变量声明提升"><a href="#1-var变量声明提升" class="headerlink" title="1. var变量声明提升"></a>1. var变量声明提升</h4><p>声明变量有三种方式：</p>
<p><code>var</code> 声明一个变量，可以选择将其初始化为一个值</p>
<p><code>let</code> 声明一个块作用域的局部变量，可选择将其初始化为一个值</p>
<p><code>const</code> 声明一个只读的常量</p>
<p><code>案例1：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/54570265-file_1492646127490_12e36.png" alt=""></p>
<p><code>案例2：</code> 变量提升后的变量将返回<code>undefined</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/90885158-file_1492646887623_17d65.png" alt=""></p>
<h4 id="2-字符串字面量"><a href="#2-字符串字面量" class="headerlink" title="2. 字符串字面量"></a>2. 字符串字面量</h4><p>模板字符串提供一些语法糖来构造字符串，例如：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/43060038-file_1492647130780_4999.png" alt=""></p>
<h4 id="3-JS闭包"><a href="#3-JS闭包" class="headerlink" title="3. JS闭包"></a>3. JS闭包</h4><p>当内部函数以某一种方式被任何一个外部函数作用域访问时，就产生闭包了。JS中内部函数可以访问定义在外部函数中的所有变量和函数，但是外部函数却不能访问定义在函数内部的变量和函数。如果需要访问，则可以使用闭包。</p>
<p><code>案例1：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/94058572-file_1492653762314_14c1b.png" alt=""></p>
<p><code>案例2：</code></p>
<p><img src="http://i1.piimg.com/567571/cdb2b25d28952ef4.png" alt=""></p>
<h4 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4. 箭头函数"></a>4. 箭头函数</h4><p>箭头函数不绑定自己的<code>this</code>、<code>arguments</code>、<code>super</code>或<code>new.target</code>，此外箭头函数最好在非方法函数中使用，且不能用作构造函数。</p>
<p><code>1、 基础语法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 多参数</div><div class="line">(param1, param2,..., paramN) =&gt; &#123; statements &#125;</div><div class="line">(param1, param2,..., paramN) =&gt; expression</div><div class="line">// 等价于: =&gt; &#123; return expression &#125;</div><div class="line"></div><div class="line">// 一个参数，圆括号可选</div><div class="line">(singleParam) =&gt; &#123;statements&#125;</div><div class="line">singleParam =&gt; &#123;statements&#125;</div><div class="line"></div><div class="line">// 无参的函数需要使用圆括号</div><div class="line">() =&gt; &#123; statements &#125;</div></pre></td></tr></table></figure>
<p><code>2、高级语法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 返回文字表达式时应当用圆括号将其包起来：</div><div class="line">params =&gt; (&#123;foo: bar&#125;)</div><div class="line"></div><div class="line">// 支持 Rest parameters 和 default parameters</div><div class="line">(param1, param2, ...rest) =&gt; &#123; statements &#125;</div><div class="line">(param1 = defaultValue1, param2, ...,paramN = defaultValueN ) =&gt; &#123; statements &#125;</div><div class="line"></div><div class="line">// 支持参数列表中的解构赋值</div><div class="line">var f = ([a,b] = [1,2],&#123;x: c&#125; = &#123;x: a+b&#125;) =&gt; a + b + c;</div></pre></td></tr></table></figure>
<p><code>案例1</code></p>
<p><img src="http://i1.piimg.com/567571/30e0246c31be8206.png" alt=""></p>
<h4 id="5-解构"><a href="#5-解构" class="headerlink" title="5. 解构"></a>5. 解构</h4><p><img src="http://i2.muimg.com/567571/b29447a502915ebf.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#变量声明提升(Variable_hoisting" target="_blank" rel="external">MSDN之JS基础教程</a>)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;刚接触JS语法，有许多易出错的点，将这些点记录下来，备忘。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;hea
    
    </summary>
    
      <category term="JavaScript" scheme="http://jianwl.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jianwl.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS之基本数据结构</title>
    <link href="http://jianwl.com/2017/04/19/JS%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://jianwl.com/2017/04/19/JS之基本数据结构/</id>
    <published>2017-04-19T15:12:50.000Z</published>
    <updated>2017-04-19T15:37:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>JavaScript</code>是一种弱类型语言，意味着你不用提前声明变量的类型，在程序运行的过程中，类型会被自动确定。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var foo = 42; // foo is a Number now</div><div class="line">var foo = &quot;bar&quot;; // foo is a String now</div><div class="line">var foo = true; // foo is a Boolean now</div></pre></td></tr></table></figure>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>最新的<code>ECMASCRIPT</code>标准定义了7种数据结构分别为<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>Object</code>。 </p>
<h4 id="1-布尔类型"><a href="#1-布尔类型" class="headerlink" title="1. 布尔类型"></a>1. 布尔类型</h4><p>布尔表示一个逻辑实体，可以有两个值：<code>true</code>和<code>false</code></p>
<h4 id="2-Null-类型"><a href="#2-Null-类型" class="headerlink" title="2. Null 类型"></a>2. Null 类型</h4><p>Null类型只有一个值: null</p>
<h4 id="3-Undefined-类型"><a href="#3-Undefined-类型" class="headerlink" title="3. Undefined 类型"></a>3. Undefined 类型</h4><p>一个没有被赋值的变量会有个默认值<code>undefined</code></p>
<h4 id="4-数字类型"><a href="#4-数字类型" class="headerlink" title="4. 数字类型"></a>4. 数字类型</h4><h4 id="5-字符串类型"><a href="#5-字符串类型" class="headerlink" title="5. 字符串类型"></a>5. 字符串类型</h4><h4 id="6-符号类型"><a href="#6-符号类型" class="headerlink" title="6. 符号类型"></a>6. 符号类型</h4><p>符号「Symbols」是<code>ECMASCRIPT</code>第六版定义的，符号类型是唯一的并且是不可修改的，并且也可以作为Object的key的值。</p>
<h4 id="7-对象"><a href="#7-对象" class="headerlink" title="7. 对象"></a>7. 对象</h4><p>在<code>JavaScript</code>里，对象可以被看作是一组属性的组合。用对象字面量语法来定义对象时，会自动初始化一组属性。 </p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="external">MSDN之JS数据结构</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;是一种弱类型语言，意味着你不用提前声明变量的类型，在程序运行的过程中，类型会被自动确定。例如：
    
    </summary>
    
      <category term="JavaScript" scheme="http://jianwl.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jianwl.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
