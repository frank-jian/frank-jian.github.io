<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[何为自我意识？]]></title>
      <url>http://jianwl.com/2017/01/27/%E4%BD%95%E4%B8%BA%E8%87%AA%E6%88%91%E6%84%8F%E8%AF%86%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>2016本命年是一个波折的一年，发生了很多事，大部分事情，我都没法搞定。我开始意识到，我对自己的认识是那么浅薄，我根本就不了解自己。当我在笑的时候，我无法意识到自己在笑，当我开心的时候，我无法享受着我笑的那一刻。我发现大多数情况下，我都处于无意识或半意识下，靠条件反射去应付生活中的所有事情。换言之，控制自己的行为和思考的，仅仅只是本能而已。这是一个让人很后怕的事情，为了让自己尽快地摆脱现状，我想我需要尽快的去了解它。</p>
<p>何为自我意识？就是意识到“自我”的存在。</p>
<p>一个优秀的人，你所看到的他的优秀只是他的外部而已，你所看不到的是他内在的高度自律和思想的完整秩序。就如同一棵参天大树，你感叹它的奇伟挺拔，你却不知道这棵树的根基扎得有多深多广。当你尝试跟他交流的时候，你才发现，他的知识广博远超乎你的想象，他的见解深刻到你膜拜不已。你会觉得，究竟是怎么的大脑，经过怎样的训练，才能有如此的见识与智慧。</p>
<p>感受力高的人拥有更多的自我意识，也就是–他能突然意识到自己的心理变化过程，从而意识到问题的存在。感受力低的人往往意识不到问题所在，我的意思是说：根本！意识不到！问题所在！</p>
<p>举个例子：坚持</p>
<p>情商高的人更懂坚持,然后呢？你只看到他无比厉害的外表 – 然后他怎么坚持下去的?当你实在找不到原因的时候，只能把原因归功于“他情商高”。</p>
<p>问题的关键在于：<strong>情商高的人他能注意到坚持过程中自己的负面情绪，从而及时处理这些问题，但是情商低的人他不会注意到这也是一个问题–我，正在讨厌这件事，这是一个不好的信号，所以，他需要被解决。</strong>你有没有意识到你的情绪，有没有注意到自己的一些想法。</p>
<p>在举个例子：自我为中心</p>
<p>写作中如何加粗是一个学问：因为你认为你能了解到的东西，人家不一定能有耐心–意识到其中的“自我中心”也是一个问题。一个人会突然意识到，我看到的，感觉到的，和别人是不同的！如何加粗，如何排版，如何使阅读体验最大化，是一个需要被注意到的问题。</p>
<p><strong>这个世界究竟是怎么样的，不是你头脑认为如何就是如何的。那些厉害的人，一定是发现了什么不可告人的认知世界的方式</strong></p>
<blockquote>
<p>人是思想的产物，心里想的是什么，就会变成什么样的人。 –甘地</p>
</blockquote>
<p>既然自我意识那么重要，那我该如何改变现状，让自我意识为我所用？我调研了下，具体有几个关键性概念。</p>
<p><strong>1、自我监视</strong></p>
<p>自我监视和反思不同点在于：自我监视更强调集中观察 – 在做事情的时候就意识到，属于及时反馈。反思是经过一段时间后的整体感知，例如写日记往往在意的是今天影响最深的东西，而无法注意到最细微的当时感受。</p>
<p>自我监视常常容易被事后遗忘，建立一套及时信息记录系统非常有必要。高三时，有位学霸有个习惯非常值得深思：每次考完月考考试时，他就会把一些想法记下来 – 因为他知道当把月考试卷发回到手里的时候，很多感觉就不见了。这些感觉不限于针对知识点，还有心态调节，各种方面。</p>
<p><strong>2、可视化</strong></p>
<p>关注自己的内心是一种非常抽象的探索，有时候这种感觉只是一道闪光就不见了。<strong>只有很少一部分最懂得关注自我的人能把这些体验用图像呈现在脑海中，这就是体验的可视化。</strong></p>
<p><strong>3、悦纳与接受</strong></p>
<p>人天生就有一种让自己只看到想看到的东西的本领，<strong>选择性过滤也许是自我监视最大的敌人 – 我们时时刻刻被一些不重要的但困扰着我们的东西所干扰着，但是我们不想也不愿去正视它们。</strong>但是坦然接受一切，再重新审视什么在困扰着你的时候，你也许能够发现问题所在。</p>
<p><strong>4、刻意练习、实验</strong></p>
<p>当我们发现了内心的冲突的时候，心理问题也许仅仅采取接受的方法就能解决，但是<strong>有很多高阶的、更加复杂的问题则需要进行刻意练习。</strong> 其实可以练习理论根本上来自于对自我的关注，没有对自我的关注和反馈就永远不可能有提升。</p>
<p>刻意练习理论需要有<strong>最好的教练和最强大的意志力，很多时候我们只是不知道自己处于一种什么样的水平，我们需要什么样的训练，这才是刻意练习最难的地方。</strong></p>
<p>最后提一点：<strong>问题从来都是不一样的，解决问题时候内心的感受很多时候都是相同的，你模糊地感受到了同样的感觉，就能够指引你从别处找到方法。自我意识是一个成熟的理性人所拥有的最明显和本质的标志，而成长，必然是一个充满顿悟、反惯性、痛苦、枯燥但不乏趣味的自我意识过程。唯有一个意识到问题存在的人才能进步，这事通往成熟和自我完善的门，而自我意识就是这扇门的钥匙。问题，永远是自己思维的问题 – 你需要更多的自我意识，需要注意更多的问题。</strong> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015携程Java工程师面试题]]></title>
      <url>http://jianwl.com/2017/01/13/2015%E6%90%BA%E7%A8%8BJava%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近来被业务缠身，有一段时间没有学习新知识了，感觉诚惶诚恐。今天刷某社交软件时，碰到一个很经典的面试题。一开始我也还真做错了，说明这块基础不扎实，知识点虽懂了，不代表真正理解了。话不多说，让我们来看下<code>2015年携程的JAVA工程师面试题</code></p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class BasicDemo &#123;</div><div class="line">    private String str = &quot;base&quot;;</div><div class="line"></div><div class="line">    public BasicDemo() &#123;</div><div class="line">        callName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void callName()&#123;</div><div class="line">        System.out.println(str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class SudDemo extends BasicDemo&#123;</div><div class="line">        private String str = &quot;sub&quot;;</div><div class="line"></div><div class="line">        public void callName()&#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        BasicDemo basicDemo = new SudDemo();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>求这段程序的输出值？</p>
<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-13/25754236-file_1484321521055_383f.png" alt=""></p>
<p>可以看到结果为「null」，但为什么呢？</p>
<blockquote>
<p>类的加载顺序：父类静态块 -&gt; 子类静态块 -&gt; 父类初始化语句 -&gt; 父类构造函器 -&gt; 子类初始化语句 -&gt; 子类构造器</p>
</blockquote>
<p><strong>程序运行顺序</strong></p>
<p>1、<code>new SudDemo</code>调用SudDemo构造器，因子类没有声明无参构造器，故调用父类的无参构造器。</p>
<p>2、父类无参构造器调用<code>callName</code>方法，因该方法在子类中被重构，故调用子类的<code>callName</code>方法，其输出的是子类中的<code>str</code>参数，因该参数未被初始化，故输出null。即其调用顺序是 : 主函数 -&gt; 初始化父类<code>str参数</code> -&gt; 父类构造器 -&gt; 子类重构的<code>callName</code>方法 -&gt; 初始化子类<code>str参数</code></p>
<h3 id="涉及的知识点"><a href="#涉及的知识点" class="headerlink" title="涉及的知识点"></a>涉及的知识点</h3><ol>
<li>类初始化的加载顺序、JVM类加载顺序（这部分知识点，还是挺模糊的，需要加强。）</li>
<li>继承（子类和父类有相同字段，父类字段会隐藏，而不是覆盖父类字段）</li>
<li>多态</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://maimai.cn/article/detail?fid=79085975" target="_blank" rel="external">2015年携程的JAVA工程师面试题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git实战]]></title>
      <url>http://jianwl.com/2017/01/04/Git%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Source Tree</code>图形化界面用多了，在服务器操作时，Git命令行大部分都遗忘了。本节主要记录Git常用命令</p>
<h3 id="工作区、暂存区的概念"><a href="#工作区、暂存区的概念" class="headerlink" title="工作区、暂存区的概念"></a>工作区、暂存区的概念</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/50500847-file_1484059096086_3789.jpg" alt=""></p>
<p>把文件往GIT版本库里添加的时候是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<h3 id="GIT实战"><a href="#GIT实战" class="headerlink" title="GIT实战"></a>GIT实战</h3><p><code>场景1：添加文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/31507464-file_1484059818873_b118.png" alt=""></p>
<p><code>场景2：将暂存区的修改回退到工作区</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/9343551-file_1484060480734_811a.png" alt=""></p>
<p><code>场景3：放弃工作区中所有的修改</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/82204251-file_1484060562988_e215.png" alt=""></p>
<p><code>场景4：当前分支回退到某次提交(已提交到「远程分支」和「本地分支」均可实现回滚)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/60922523-file_1484062431722_f5f1.png" alt=""></p>
<p><code>场景5：查看提交日志信息</code></p>
<p><strong>方式1</strong></p>
<p><code>git log --pretty=oneline</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/31517947-file_1484063163364_a911.png" alt=""></p>
<p><strong>方式2</strong></p>
<p><code>git log --graph</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/49133052-file_1484063099366_109d7.png" alt=""></p>
<p><code>场景6：显示、创建、切换分支</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/70304771-file_1484063405708_bf84.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="external">廖雪峰Git教程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之不常用却很有用的知识点]]></title>
      <url>http://jianwl.com/2016/12/11/Java8%E4%B9%8B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%B4%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><code>1、forEach VS forEachOrdered</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_005()&#123;</div><div class="line">    List&lt;String&gt; strs = Arrays.asList(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;);</div><div class="line">    strs.stream().parallel().forEach(str -&gt; System.out.println(&quot;forEach =&gt; &quot; + str));</div><div class="line">    strs.stream().parallel().forEachOrdered(str -&gt; System.out.println(&quot;forEachOrdered =&gt; &quot; + str));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-11/96792814-file_1481436578266_14fcc.png" alt=""></p>
<p><code>分析</code></p>
<p>并行处理数据时，<code>forEach</code>处理的数据是无序的，而<code>forEachOrdered</code>处理数据是按照输入流的顺序处理的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA8之Stream特性总结]]></title>
      <url>http://jianwl.com/2016/12/11/JAVA8%E4%B9%8BStream%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="常用方法梳理"><a href="#常用方法梳理" class="headerlink" title="常用方法梳理"></a>常用方法梳理</h3><table>
<thead>
<tr>
<th style="text-align:left">常用方法</th>
<th style="text-align:center">返回值</th>
<th style="text-align:center">类型/使用<code>Function Interface</code>接口</th>
<th style="text-align:center"><code>Function Interface</code>描述符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">filter</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">distinct</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">skip</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">limit</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">map</td>
<td style="text-align:center"><code>Stream&lt;R&gt;</code></td>
<td style="text-align:center"><code>Function&lt;T, R&gt;</code></td>
<td style="text-align:center"><code>T -&gt; R</code></td>
</tr>
<tr>
<td style="text-align:left">flatMap</td>
<td style="text-align:center"><code>Stream&lt;R&gt;</code></td>
<td style="text-align:center"><code>Function&lt;T,Stream&lt;R&gt;&gt;</code></td>
<td style="text-align:center"><code>T -&gt; Stream&lt;R&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">sorted</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>Comparator&lt;T&gt;</code></td>
<td style="text-align:center"><code>(T,T) -&gt; int</code></td>
</tr>
<tr>
<td style="text-align:left">anyMatch</td>
<td style="text-align:center"><code>boolean</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">noteMatch</td>
<td style="text-align:center"><code>boolean</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">allMatch</td>
<td style="text-align:center"><code>boolean</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">findAny</td>
<td style="text-align:center"><code>Optional&lt;T&gt;</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">findFirst</td>
<td style="text-align:center"><code>Optional&lt;T&gt;</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">forEach</td>
<td style="text-align:center"><code>void</code></td>
<td style="text-align:center"><code>Consumer&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; void</code></td>
</tr>
<tr>
<td style="text-align:left">collect</td>
<td style="text-align:center"><code>R</code></td>
<td style="text-align:center"><code>Collector&lt;T, A, R&gt;</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">reduce</td>
<td style="text-align:center"><code>Optional&lt;T&gt;</code></td>
<td style="text-align:center"><code>BinaryOperator&lt;T&gt;</code></td>
<td style="text-align:center"><code>(T, T) -&gt; T</code></td>
</tr>
<tr>
<td style="text-align:left">count</td>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">   public void test_004()&#123;</div><div class="line">       List&lt;Integer&gt; nums = Arrays.asList(1,1,1,2,2,2,2,2,3,4,5,6,7,8,9);</div><div class="line">       List&lt;List&lt;Integer&gt;&gt; numsList = Arrays.asList(Arrays.asList(1,2,3),Arrays.asList(4,5,6),Arrays.asList(7,8,9));</div><div class="line"></div><div class="line">       // filter</div><div class="line">       Stream&lt;Integer&gt; filter = nums.stream().filter(num -&gt; num &gt; 5);</div><div class="line">       System.out.println(&quot;filter =&gt; &quot; + JSON.toJSONString(filter.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // distinct</div><div class="line">       Stream&lt;Integer&gt; distinct = nums.stream().distinct();</div><div class="line">       System.out.println(&quot;distinct =&gt; &quot; + JSON.toJSONString(distinct.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // skip</div><div class="line">       Stream&lt;Integer&gt; skip = nums.stream().skip(5);</div><div class="line">       System.out.println(&quot;skip =&gt; &quot; + JSON.toJSONString(skip.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // limit</div><div class="line">       Stream&lt;Integer&gt; limit = nums.stream().limit(5);</div><div class="line">       System.out.println(&quot;limit =&gt; &quot; + JSON.toJSONString(limit.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // map</div><div class="line">       Stream&lt;Integer&gt; map = nums.stream().map(num -&gt; num * 2);</div><div class="line">       System.out.println(&quot;map =&gt; &quot; + JSON.toJSONString(map.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // flatMap</div><div class="line">       Stream&lt;Integer&gt; flatMap = numsList.stream().flatMap(ns -&gt; ns.stream());</div><div class="line">       System.out.println(&quot;flatMap =&gt; &quot; + JSON.toJSONString(flatMap.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // sorted</div><div class="line">       Stream&lt;Integer&gt; sorted = nums.stream().sorted((n1,n2) -&gt; n2.compareTo(n1));</div><div class="line">       System.out.println(&quot;sorted =&gt; &quot; + JSON.toJSONString(sorted.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // anyMatch</div><div class="line">       boolean anyMatch = nums.stream().anyMatch(num -&gt; num == 1);</div><div class="line">       System.out.println(&quot;anyMatch =&gt; &quot; + anyMatch);</div><div class="line"></div><div class="line">       // noneMatch</div><div class="line">       boolean noneMatch = nums.stream().noneMatch(num -&gt; num == 1);</div><div class="line">       System.out.println(&quot;noneMatch =&gt; &quot; + noneMatch);</div><div class="line"></div><div class="line">       // allMatch</div><div class="line">       boolean allMatch = nums.stream().allMatch(num -&gt; num &gt; 0);</div><div class="line">       System.out.println(&quot;allMatch =&gt; &quot; + allMatch);</div><div class="line"></div><div class="line">       // findAny</div><div class="line">       Optional&lt;Integer&gt; findAny = nums.stream().findAny();</div><div class="line">       System.out.println(&quot;findAny =&gt; &quot; + JSON.toJSONString(findAny));</div><div class="line"></div><div class="line">       // findAny</div><div class="line">       Optional&lt;Integer&gt; findFirst = nums.stream().findFirst();</div><div class="line">       System.out.println(&quot;findFirst =&gt; &quot; + JSON.toJSONString(findFirst));</div><div class="line"></div><div class="line">       // forEach</div><div class="line">       nums.stream().filter(num -&gt; num == 9).forEach(num -&gt; System.out.println(&quot;forEach =&gt; &quot; + num ++));</div><div class="line"></div><div class="line">       // collect</div><div class="line">       Map&lt;Integer,List&lt;Integer&gt;&gt; groupBy = nums.stream().collect(Collectors.groupingBy(num -&gt; num));</div><div class="line">       System.out.println(&quot;collect =&gt; &quot; + JSON.toJSONString(groupBy));</div><div class="line"></div><div class="line">       // reduce</div><div class="line">       Optional&lt;Integer&gt; reduce1 = nums.stream().reduce((n1,n2) -&gt; n1 + n2);</div><div class="line">       Integer reduce2 = nums.stream().reduce(0,(n1,n2) -&gt; n1 + n2);</div><div class="line">       System.out.println(&quot;reduce1 =&gt; &quot; + reduce1.get() + &quot; reduce2 =&gt; &quot; + reduce2);</div><div class="line"></div><div class="line">       // count</div><div class="line">       Long count = nums.stream().count();</div><div class="line">       System.out.println(&quot;count =&gt; &quot; + count);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-11/38986855-file_1481433637180_11981.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Java8 in action</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之FlatMap用法]]></title>
      <url>http://jianwl.com/2016/12/10/Java8%E4%B9%8BFlatMap%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="flatMap的作用"><a href="#flatMap的作用" class="headerlink" title="flatMap的作用"></a>flatMap的作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String[]&gt;   	  -&gt; flatMap  -&gt;   Stream&lt;String&gt;</div><div class="line">Stream&lt;Set&lt;String&gt;&gt;   -&gt; flatMap  -&gt;   Stream&lt;String&gt;</div><div class="line">Stream&lt;List&lt;String&gt;&gt;  -&gt; flatMap  -&gt;   Stream&lt;String&gt;</div><div class="line">Stream&lt;List&lt;Object&gt;&gt;  -&gt; flatMap  -&gt;   Stream&lt;Object&gt;</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>范例1</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@RunWith(JUnit4.class)</div><div class="line">public class StreamTest &#123;</div><div class="line">    public static class Tech&#123;</div><div class="line">        private String name;</div><div class="line">        private List&lt;String&gt; hobies;</div><div class="line"></div><div class="line">        public static Tech initTech()&#123;</div><div class="line">            Random random = new Random();</div><div class="line">            List&lt;String&gt; names = Arrays.asList(&quot;张三&quot;,&quot;李四&quot;,&quot;刘二麻子&quot;,&quot;李爱武&quot;);</div><div class="line">            List&lt;String&gt; hobies = Arrays.asList(&quot;溜溜球&quot;,&quot;集邮&quot;,&quot;羽毛球&quot;,&quot;足球&quot;);</div><div class="line">            Tech tech = new Tech();</div><div class="line">            tech.setName(names.get(random.nextInt(4)));</div><div class="line">            tech.setHobies(Arrays.asList(hobies.get(random.nextInt(3)),hobies.get(random.nextInt(3))));</div><div class="line">            return tech;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getName() &#123;</div><div class="line">            return name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setName(String name) &#123;</div><div class="line">            this.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public List&lt;String&gt; getHobies() &#123;</div><div class="line">            return hobies;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setHobies(List&lt;String&gt; hobies) &#123;</div><div class="line">            this.hobies = hobies;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_001()&#123;</div><div class="line">        List&lt;Tech&gt; techList = Arrays.asList(Tech.initTech(),Tech.initTech(),Tech.initTech(),Tech.initTech());</div><div class="line">        List&lt;String&gt; allHobies = techList.stream().map(tech -&gt; tech.getHobies()).flatMap(hobies -&gt; hobies.stream()).map(hoby -&gt; hoby.concat(&quot; - modify&quot;)).collect(Collectors.toList());</div><div class="line">        System.out.println(JSON.toJSONString(allHobies));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果1</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-10/90787855-file_1481380649544_134aa.png" alt=""></p>
<p><code>范例2</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_002()&#123;</div><div class="line">        List&lt;String&gt; strs = Arrays.asList(&quot;我,在,学&quot;,&quot;Java8,的&quot;,&quot;新,特,性&quot;);</div><div class="line">        List&lt;String[]&gt; strArray = strs.stream().map(str -&gt; str.split(&quot;,&quot;)).collect(Collectors.toList());</div><div class="line">        List&lt;String&gt; strList = strs.stream().map(str -&gt; str.split(&quot;,&quot;)).flatMap(Arrays::stream).collect(Collectors.toList());</div><div class="line"></div><div class="line">        System.out.println(&quot;strArray =&gt; &quot; + JSON.toJSONString(strArray));</div><div class="line">        System.out.println(&quot;strList =&gt; &quot; + JSON.toJSONString(strList));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-10/33004085-file_1481381376033_c47b.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java8中的Stream流可以处理通过<code>map</code>方法处理基本类型及(String)，但却无法对数组和列表进行操作，<code>flatMap</code>方法弥补了这一不足。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx入门篇]]></title>
      <url>http://jianwl.com/2016/11/17/Nginx%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h3><p><strong>Nginx是什么？</strong></p>
<p><code>Nginx</code>是一个高性能的<code>HTTP</code>和反向代理服务器，也是一个<code>IMAP/POP3/SMTP</code>代理服务器。</p>
<p>由于Nginx使用基于事件驱动的架构，能够并发处理百万级别的<code>TCP</code>连接，高度模块化的设计和自由的许可证使得其作为<code>Web</code>服务器被广泛应用到大流量的网站上，包含淘宝、腾讯、新浪、京东等访问量巨大的网站。</p>
<p><strong>反向代理是什么？</strong></p>
<p>反向代理是代理服务器的一种，它根据客户端的请求，从后端的服务器上（如<code>Web</code>服务器）获取资源，然后再讲这些资源返回给客户端。如图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/xx2.jpg" alt=""></p>
<p><strong>为什么选择Nginx</strong></p>
<ol>
<li><code>处理响应请求很快</code>：在正常的情况下，单次请求会得到更快的响应，在高峰期Nginx可以比其他的Web服务器更快的响应请求。</li>
<li><code>高并发连接</code>：Nginx支持的并发连接上限取决于你的内存，10万远未封顶。</li>
<li><code>低的内存消耗</code>：1万个非活跃的HTTP Keep-Alive连接在Nginx中仅消耗2.5MB的内存</li>
<li><code>很高的可靠性</code>：优秀的核心架构设计，且这些模块非常稳定</li>
<li><code>高扩展性</code>：Nginx的设计是由多个不同功能、不同层次、不同类型且耦合度极低的模块组成，具有极大的扩展性。</li>
<li><code>热部署</code>：master管理进程和worker工作进程的分离设计，使得Nginx具有热部署的功能，可以在7*24小时不间断服务的前提下，升级Nginx的可执行文件。</li>
<li><code>自由的BSD许可协议</code>：允许用于商业用途</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong><code>Mac</code>环境安装<code>Nginx</code></strong></p>
<ul>
<li><a href="http://brew.sh/" target="_blank" rel="external"><code>brew</code></a>安装<code>Nginx</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx</div></pre></td></tr></table></figure>
<ul>
<li>修改配置<code>/usr/local/etc/nginx/nginx.conf</code></li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-17/12669164.jpg" alt=""></p>
<ul>
<li>启动<code>Nginx</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<ul>
<li>访问<code>http://localhost</code></li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-17/73904106.jpg" alt=""></p>
<ul>
<li><code>Nginx</code>停止服务</li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-17/45565169.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86" target="_blank" rel="external">反向代理 - 维基百科</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim保存只读文件的修改内容]]></title>
      <url>http://jianwl.com/2016/11/13/Vim%E4%BF%9D%E5%AD%98%E5%8F%AA%E8%AF%BB%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>有时候使用<code>Vim</code>编辑文件时，辛辛苦苦写了一大堆东西，写完后输入<code>：wq</code>准备结束战斗时，却突然发现<code>Vim</code>报错了：</p>
<blockquote>
<p>E45: ‘readonly’ option is set (add ! to override)</p>
</blockquote>
<p>这种情况一般都是权限不够，文件只有读权限，没有写权限。</p>
<p><strong>解决办法</strong></p>
<p>这时可以在<code>Vim</code>使用一条特殊的命令解决问题：</p>
<blockquote>
<p>:w !sudo tee %</p>
</blockquote>
<p><strong>分析</strong></p>
<p>这条命令的作用是什么呢？</p>
<ol>
<li><code>:w</code>执行写操作，写的位置是哪里呢？这里调用了<code>sudo</code>命令，使得我们有<code>root</code>权限；</li>
<li>将文件写入到<code>tee</code>来处理，tee是什么？它复制标准输入到标准输出(例如文件)，tee的后缀参数为文件名。</li>
<li><code>%</code>在<code>Vim</code>中表示当前文件名</li>
</ol>
<p>将以上这些联系起来就明白了：我们将当前文件内容首先读入到<code>tee</code>，然后再利用<code>sudo</code>获取的<code>root</code>权限覆盖原文件保存。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.commandlinefu.com/commands/view/1204/save-a-file-you-edited-in-vim-without-the-needed-permissions" target="_blank" rel="external">Save a file you edited in vim without the needed permissions</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之HashMap源码学习]]></title>
      <url>http://jianwl.com/2016/11/10/Java%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>总是在写重复代码，有没有觉得很煎熬？对代码多点挑剔，你会想法设法尽量去避免写重复代码。学习和借鉴优秀源码的设计思想，用于实际项目中，让你的代码变得更加优雅。</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-10/90063033.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1. <code>Map</code>接口</strong></p>
<p>解读<code>Map</code>源码，学到了以下几点：</p>
<ol>
<li>泛型的使用</li>
<li><code>default</code>声明方法体的方法；</li>
<li>接口中可声明静态方法</li>
<li>接口中嵌套接口</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public interface Map&lt;K, V&gt; &#123;</div><div class="line"></div><div class="line">    // 1. 通用接口方法</div><div class="line">    boolean containsKey(Object key);</div><div class="line"></div><div class="line">    // 2. 泛型</div><div class="line">    V get(Object key);</div><div class="line"></div><div class="line">    // 3. 泛型共同父类</div><div class="line">    void putAll(Map&lt;? extends K, ? extends V&gt; m);</div><div class="line"></div><div class="line">    // 4. 接口中声明接口</div><div class="line">    interface Entry&lt;K, V&gt; &#123;</div><div class="line"></div><div class="line">        K getKey();</div><div class="line"></div><div class="line">        V getValue();</div><div class="line"></div><div class="line">        // 5. 接口中声明静态方法</div><div class="line">        public static &lt;K extends Comparable&lt;? super K&gt;, V&gt; Comparator&lt;Entry&lt;K,V&gt;&gt; comparingByKey() &#123;</div><div class="line">            return (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</div><div class="line">                    (c1, c2) -&gt; c1.getKey().compareTo(c2.getKey());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 6. 接口中声明默认方法</div><div class="line">    default V getOrDefault(Object key, V defaultValue) &#123;</div><div class="line">        V v;</div><div class="line">        return (((v = get(key)) != null) || containsKey(key))</div><div class="line">                ? v</div><div class="line">                : defaultValue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Set&lt;Entry&lt;K, V&gt;&gt; entrySet();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. <code>MapAbstract</code>抽象方法</strong></p>
<p>解读<code>MapAbstract</code>源码，学习到以下几点：</p>
<ol>
<li>抽象类中，至少要有一个抽象方法。</li>
<li>抽象类，不能有接口，除了抽象方法，方法必须有方法体。</li>
<li>抽象类中，可以声明静态类。 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public abstract class AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt; &#123;</div><div class="line"></div><div class="line">    // 1. 实现containsKey接口方法</div><div class="line">    public boolean containsKey(Object key) &#123;</div><div class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</div><div class="line">        if (key==null) &#123;</div><div class="line">            while (i.hasNext()) &#123;</div><div class="line">                Entry&lt;K,V&gt; e = i.next();</div><div class="line">                if (e.getKey()==null)</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            while (i.hasNext()) &#123;</div><div class="line">                Entry&lt;K,V&gt; e = i.next();</div><div class="line">                if (key.equals(e.getKey()))</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 2. 声明抽象方法体,没有方法体,继承类必须实现该方法</div><div class="line">    public abstract Set&lt;Entry&lt;K,V&gt;&gt; entrySet();</div><div class="line"></div><div class="line">    // 3. 抽象方法中可声明静态类</div><div class="line">    public static class SimpleEntry&lt;K,V&gt;</div><div class="line">        implements Entry&lt;K,V&gt;, java.io.Serializable</div><div class="line">    &#123;</div><div class="line">        private static final long serialVersionUID = -8499721149061103585L;</div><div class="line"></div><div class="line">        private final K key;</div><div class="line">        private V value;</div><div class="line">        </div><div class="line">        public SimpleEntry(K key, V value) &#123;</div><div class="line">            this.key   = key;</div><div class="line">            this.value = value;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        public K getKey() &#123;</div><div class="line">            return key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public V getValue() &#123;</div><div class="line">            return value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>未完待续….</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>JDK1.8源码</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL查询优化]]></title>
      <url>http://jianwl.com/2016/11/02/MySQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>临近双11，达达App的流量突然猛增，日单量破百万单。这几天数据库出现几次报警，排查下来是某些SQL性能很差，导致慢查询。本节我们主要来学习，优化SQL。</p>
<h3 id="查询原理"><a href="#查询原理" class="headerlink" title="查询原理"></a>查询原理</h3><p>当我们向MySQL发送一个请求时，它到底做了什么？大概有一下几个步骤：</p>
<ol>
<li>客户端发送一条查询给服务器</li>
<li>服务器先检查查询缓存，如果命中缓存则立刻返回存储在缓存中的结果，否则进入下一个阶段。</li>
<li>服务器进行SQL解析、预处理，再由优化器生成对应的执行计划</li>
<li>MySQL根据优化器生成的执行计划，调用存储引用的API来执行查询。</li>
<li>将结果返回给客户端。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、查询执行计划</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-11-2/73226876.jpg" alt=""></p>
<p>通过执行计划知道，<code>type=index</code>表示通过索引查询，预估得到2条记录<code>rows=2</code>;</p>
<p><strong>2、不要使用count(非索引字段)</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-11-2/4766428.jpg" alt=""></p>
<p>通过执行计划可知，使用<code>count(非索引字段)</code>使用全表扫描查询，而使用<code>count(*)</code>或<code>count(索引字段)</code>使用索引查询。</p>
<p><strong>3、切分查询</strong></p>
<p><code>场景：</code> 有时候一个大查询我们需要<code>分而治之</code>，将大查询切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一部分查询结果。</p>
<p><code>举个🌰</code></p>
<blockquote>
<p>定期删除大量数据时，如果用一个大的语句一次性完成的话，则可能需要一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多很小的但很重要的查询。将一个大的DELETE语句切分成多个小的查询可以尽可能小地影响MYSQL性能，同时还可以减少MYSQL复制的延时。</p>
</blockquote>
<p><code>再举个线上环境的🌰</code></p>
<p><code>场景：</code> 假设我需要一次查询1万个用户的信息；</p>
<p><code>大查询：</code> SELECT * FROM ‘dada’ WHERE dada_id IN (1万个id);</p>
<p><code>小查询:</code> SELECT * FROM ‘dada’ WHERE dada_id IN (1千个id); 查询10次；</p>
<p><code>结果：</code> 使用<code>大查询</code>很可能出现慢查询，导致性能问题，而使用<code>小查询</code>，对服务器性能影响小很多。</p>
<p><strong>4、分解关联查询</strong></p>
<p><code>关联查询</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM &apos;tag&apos;</div><div class="line">JOIN &apos;tag_post&apos; ON tag_post.tag_id=tag.id </div><div class="line">JOIN &apos;post&apos; ON tag_post.post_id=post.id </div><div class="line">WHERE tag.tag=&apos;mysql&apos;;</div></pre></td></tr></table></figure>
<p><code>分解查询</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM &apos;tag&apos; WHERE tag=&apos;mysql&apos;;</div><div class="line">SELECT * FROM &apos;tag_post&apos; WHERE tag_id=1234;</div><div class="line">SELECT * FROM &apos;post&apos; WHERE post.id in(123,456,567,9098,8904);</div></pre></td></tr></table></figure>
<p><code>关联查询分解为多个查询的好处</code></p>
<ol>
<li>缓存效率更高，如:上面查询中的<code>tag=mysql</code>已经被缓存了，那么应用就可以跳过第一个查询。再如，应用已经缓存<code>post.id为123、456</code>的内容，那么第三个查询的<code>IN</code>就可以少查询几个<code>post.id</code>。如果表结构变了，就不能使用查询缓存了。</li>
<li>查询分解后，执行单个查询可以减少锁的竞争。</li>
<li>应用层做分解后，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。</li>
<li>查询效率会有所提升，使用<code>IN</code>代替关联查询，可让MYSQL按照ID顺序进行查询，这可能比随机关联更高效。</li>
<li>减少冗余记录的查询，在应用层做分解查询，意味着对于某条记录应用只需查询一次，而在数据库做关联查询，则需要重复访问一部分数据，可减少网路和内存的消耗。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>高性能MYSQL(第三版)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux之高级命令]]></title>
      <url>http://jianwl.com/2016/10/29/Linux%E4%B9%8B%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、grep高级用法</strong></p>
<p><code>语法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">grep [-A] [-B] [-n] &apos;搜索字符串&apos;</div><div class="line"></div><div class="line">-A ：后面可加数字，为after的意思，除了列出该行之后，后续的n行也列出来。</div><div class="line">-B ：后面可加数字，为before的意思，除了列出该行之后，前面的n行也列出来。</div><div class="line">-n : 将找到的关键字显色，且加上行号来表示</div></pre></td></tr></table></figure>
<p><code>实战1</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/14.jpg" alt=""></p>
<p><strong>2、nl命令</strong></p>
<p>输出文件内容，并自动加上行号</p>
<p><code>实战2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/15.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>鸟哥的Linux私房菜</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之观察者模式]]></title>
      <url>http://jianwl.com/2016/10/29/JAVA%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>半年前写过一篇<a href="http://jianwl.com/2016/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">观察者模式</a>,当我再次翻阅这篇文章时，我已看不懂，我当初写这篇文章的主线是什么？仅仅是将「Head First设计模式」书中的代码搬过来。这样没有经过思考的学习笔记，对知识的理解是很浅的，且忘记后再看原文不容易重新拾起。本文将重新梳理「JAVA观察者模式」。</p>
<h3 id="观察者模式介绍"><a href="#观察者模式介绍" class="headerlink" title="观察者模式介绍"></a>观察者模式介绍</h3><p>一个目标对象管理所有依赖于它的观察者对象，并且在它本身的状态改变时，主动发出通知。</p>
<p><code>优点</code></p>
<p>观察者和被观察者是抽象耦合的</p>
<p><code>缺点</code></p>
<ol>
<li>如果一个目标对象有很多的观察者，通知所有观察者会花费很多时间</li>
<li>目标对象和观察者之间有循环依赖的话，会触发循环调用，导致系统崩溃。</li>
<li>观察者模式没有相应的机制让观察者知道目标对象是怎么发生变化的，仅仅只是知道观察目标发生了变化。</li>
</ol>
<p><code>组成</code></p>
<ol>
<li><code>抽象主题角色「Subject」:</code>把所有观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</li>
<li><code>具体主题角色 「ConcreteSubject」：</code>存入具体观察者对象，在具体主题的内部状态改变时，给所有登记过的观察者发出通知。</li>
<li><code>抽象观察者角色「Observer」：</code>为所有的具体观察者定义一个接口，在得到主题的通知时，更新自己。</li>
<li><code>具体观察角色「ConsreteObserver」：</code>具体观察者实现抽象观察者所要求的所有接口。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、定义抽象观察者角色</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Observer</div><div class="line"> * @param &lt;S&gt; Subject</div><div class="line"> * @param &lt;O&gt; Observer</div><div class="line"> * @param &lt;A&gt; Argument type</div><div class="line"> */</div><div class="line">public interface Observer&lt;S extends Observable&lt;S, O, A&gt;, O extends Observer&lt;S, O, A&gt;, A&gt; &#123;</div><div class="line"></div><div class="line">  void update(S subject, A argument);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Race.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public interface Race extends Observer&lt;GWeather, Race, WeatherType&gt; &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2、定义具体观察者角色</strong></p>
<p><code>具体观察者角色：GOrcs.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class GOrcs implements Race &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void update(GWeather weather, WeatherType weatherType) &#123;</div><div class="line">    switch (weatherType) &#123;</div><div class="line">      case COLD:</div><div class="line">        System.out.println(&quot;The orcs are freezing cold.&quot;);</div><div class="line">        break;</div><div class="line">      case RAINY:</div><div class="line">        System.out.println(&quot;The orcs are dripping wet.&quot;);</div><div class="line">        break;</div><div class="line">      case SUNNY:</div><div class="line">        System.out.println(&quot;The sun hurts the orcs&apos; eyes.&quot;);</div><div class="line">        break;</div><div class="line">      case WINDY:</div><div class="line">        System.out.println(&quot;The orc smell almost vanishes in the wind.&quot;);</div><div class="line">        break;</div><div class="line">      default:</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>具体观察者角色：GHobbits.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class GHobbits implements Race &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void update(GWeather weather, WeatherType weatherType) &#123;</div><div class="line">    switch (weatherType) &#123;</div><div class="line">      case COLD:</div><div class="line">        System.out.println(&quot;The hobbits are shivering in the cold weather.&quot;);</div><div class="line">        break;</div><div class="line">      case RAINY:</div><div class="line">        System.out.println(&quot;The hobbits look for cover from the rain.&quot;);</div><div class="line">        break;</div><div class="line">      case SUNNY:</div><div class="line">        System.out.println(&quot;The happy hobbits bade in the warm sun.&quot;);</div><div class="line">        break;</div><div class="line">      case WINDY:</div><div class="line">        System.out.println(&quot;The hobbits hold their hats tightly in the windy weather.&quot;);</div><div class="line">        break;</div><div class="line">      default:</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3、定义抽象主题角色</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Subject</div><div class="line"> * @param &lt;S&gt; Subject</div><div class="line"> * @param &lt;O&gt; Observer</div><div class="line"> * @param &lt;A&gt; Argument type</div><div class="line"> */</div><div class="line">public abstract class Observable&lt;S extends Observable&lt;S, O, A&gt;, O extends Observer&lt;S, O, A&gt;, A&gt; &#123;</div><div class="line"></div><div class="line">  protected List&lt;O&gt; observers;</div><div class="line"></div><div class="line">  public Observable() &#123;</div><div class="line">    this.observers = new CopyOnWriteArrayList&lt;&gt;();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void addObserver(O observer) &#123;</div><div class="line">    this.observers.add(observer);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void removeObserver(O observer) &#123;</div><div class="line">    this.observers.remove(observer);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Notify observers</div><div class="line">   */</div><div class="line">  @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">  public void notifyObservers(A argument) &#123;</div><div class="line">    for (O observer : observers) &#123;</div><div class="line">      observer.update((S) this, argument);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4、定义具体的主题</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class GWeather extends Observable&lt;GWeather, Race, WeatherType&gt; &#123;</div><div class="line"></div><div class="line">  private WeatherType currentWeather;</div><div class="line"></div><div class="line">  public GWeather() &#123;</div><div class="line">    currentWeather = WeatherType.SUNNY;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Makes time pass for weather</div><div class="line">   */</div><div class="line">  public void timePasses() &#123;</div><div class="line">    WeatherType[] enumValues = WeatherType.values();</div><div class="line">    currentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];</div><div class="line">    System.out.println(&quot;The weather changed to &quot; + currentWeather + &quot;.&quot;);</div><div class="line">    notifyObservers(currentWeather);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>WeatherType.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public enum WeatherType &#123;</div><div class="line"></div><div class="line">  SUNNY, RAINY, WINDY, COLD;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public String toString() &#123;</div><div class="line">    return this.name().toLowerCase();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5、运行观察者模式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        GWeather gWeather = new GWeather();</div><div class="line">        gWeather.addObserver(new GOrcs());</div><div class="line">        gWeather.addObserver(new GHobbits());</div><div class="line"></div><div class="line">        gWeather.timePasses();</div><div class="line">        gWeather.timePasses();</div><div class="line">        gWeather.timePasses();</div><div class="line">        gWeather.timePasses();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/13.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">观察者模式-维基百科</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法基础之插入排序]]></title>
      <url>http://jianwl.com/2016/10/29/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>算法对一个工程师来说是极其重要的，初级工程师虽然在工作中，鲜有用到算法，但对算法的训练仍不能有丝毫的含糊，算法对工程师的思维训练也是有极大的好处的。从基础算法起步，逐步学习算法。本节主要介绍插入排序算法。</p>
<h3 id="插入排序介绍"><a href="#插入排序介绍" class="headerlink" title="插入排序介绍"></a>插入排序介绍</h3><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p><code>举个实际生活中的例子</code></p>
<blockquote>
<p>排序一手扑克牌，开始时，我们的左手为空并且桌子上的牌面向下，然后我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，拿在左手上的牌总是排序好的。</p>
</blockquote>
<h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p><code>时间复杂度</code></p>
<p>O(n^2)</p>
<p><code>空间复杂度</code></p>
<p>O(n),需要辅助空间O(1)</p>
<h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol>
<li>第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素「已排序」大于新元素，将该元素移动下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001() &#123;</div><div class="line">    // 初始化数组</div><div class="line">    int[] arr = &#123;6, 2, 4, 1, 5, 9&#125;;</div><div class="line"></div><div class="line">    // 默认第一个元素为已排序(以「i = 1」,简述流程)</div><div class="line">    for (int i = 1; i &lt; arr.length; i++) &#123;</div><div class="line"></div><div class="line">        // 当前新插入元素 arr[1] = 2;</div><div class="line">        int temp = arr[i];</div><div class="line"></div><div class="line">        // 当前已排序的最大下标位是0,结束条件是「下标位&gt;=0 且 已排序元素大于插入元素」</div><div class="line">        for (int j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j--) &#123;</div><div class="line">            // 从后往前,交换插入新元素 和 已排序的元素</div><div class="line">            arr[j + 1] = arr[j];</div><div class="line">            arr[j] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    System.out.println(&quot;inserted sorted ==&gt; &quot; + JSON.toJSON(arr));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/10.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#Java" target="_blank" rel="external">插入排序-维基百科</a></li>
<li>算法导论(第三版)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA8之java.util.stream.Collectors实战]]></title>
      <url>http://jianwl.com/2016/10/29/JAVA8%E4%B9%8Bjava-util-stream-Collectors%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Java8</code>新增了一个集合工具类<code>java.util.stream.Collectors</code>，超级好用，在平时处理业务逻辑时，会经常用到。熟练掌握其用法，对于提高工作效率有很大的帮助。当然，这仅仅是最初级的，之后会抽空写一篇关于其源码解读的文章。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>对象模型</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    private String name;</div><div class="line">    private Integer age;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(String name, Integer age) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getAge() &#123;</div><div class="line">        return age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAge(Integer age) &#123;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>1、聚合对象某一属性<code>Collectors.toList()</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_001() &#123;</div><div class="line">        // 初始化用户对象</div><div class="line">        List&lt;User&gt; users = Collections.unmodifiableList(Arrays.asList(new User(&quot;对象C&quot;, 21), new User(&quot;对象B&quot;, 27), new User(&quot;对象A&quot;, 22), new User(&quot;对象D&quot;, 22)));</div><div class="line">        // 此处JSON类引用「阿里巴巴的fastjson包」</div><div class="line">        System.out.println(&quot;users ==&gt; &quot; + JSON.toJSON(users));</div><div class="line"></div><div class="line">        // 获取用户年龄的集合,包含重复年龄</div><div class="line">        List&lt;Integer&gt; ages = users.stream().map(User::getAge).collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;ages ==&gt; &quot; + JSON.toJSON(ages));</div><div class="line"></div><div class="line">        // 获取年龄的集合,并去重</div><div class="line">        List&lt;Integer&gt; distinctAges = users.stream().map(User::getAge).distinct().collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;distinctAges ==&gt; &quot; + JSON.toJSON(distinctAges));</div><div class="line"></div><div class="line">        // 按年龄排序 小 -&gt; 大</div><div class="line">        List&lt;User&gt; ageSortedUser = users.stream().sorted((u1,u2) -&gt; u1.getAge() - u2.getAge()).collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;ageSortedUser ==&gt; &quot; + JSON.toJSON(ageSortedUser));</div><div class="line"></div><div class="line">        // 按名字排序按字母从 A - &gt; Z || a - &gt; z</div><div class="line">        List&lt;User&gt; nameSortedUser = users.stream().sorted((u1,u2) -&gt; u1.getName().compareTo(u2.getName())).collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;nameSortedUser ==&gt; &quot; + JSON.toJSON(nameSortedUser));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>提一点</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/8.jpg" alt=""></p>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/4.jpg" alt=""></p>
<p><strong>2、将每个年龄的用户分组<code>Collectors.groupingBy()</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_002() &#123;</div><div class="line">        // 初始化用户对象</div><div class="line">        List&lt;User&gt; users = Collections.unmodifiableList(Arrays.asList(new User(&quot;对象A&quot;, 21), new User(&quot;对象B&quot;, 22), new User(&quot;对象C&quot;, 22)));</div><div class="line"></div><div class="line">        // 每个年龄的用户分组</div><div class="line">        Map&lt;Integer, List&lt;User&gt;&gt; usersGroup = users.stream().collect(Collectors.groupingBy(User::getAge));</div><div class="line">        System.out.println(&quot;usersGroup ==&gt; &quot; + JSON.toJSON(usersGroup));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/2.jpg" alt=""></p>
<p><strong>3、其他</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_003() &#123;</div><div class="line">        // 初始化用户对象</div><div class="line">        List&lt;User&gt; users = Collections.unmodifiableList(Arrays.asList(new User(&quot;对象C&quot;, 21), new User(&quot;对象B&quot;, 27), new User(&quot;对象A&quot;, 22), new User(&quot;对象D&quot;, 22)));</div><div class="line"></div><div class="line">        // 用户平均年龄</div><div class="line">        Double averageAge = users.stream().collect(Collectors.averagingInt(User::getAge));</div><div class="line">        System.out.println(&quot;averageAge ==&gt; &quot; + averageAge);</div><div class="line"></div><div class="line">        // 计算年龄大于22岁的人数</div><div class="line">        Long objectCount = users.stream().filter(user -&gt; user.getAge() &gt; 22).collect(Collectors.counting());</div><div class="line">        System.out.println(&quot;objectCount ==&gt; &quot; + objectCount);</div><div class="line"></div><div class="line">        // 将所有对象用「,」拼接</div><div class="line">        String userNames = users.stream().map(User::getName).collect(Collectors.joining(&quot;,&quot;));</div><div class="line">        System.out.println(&quot;userNames ==&gt; &quot; + userNames);</div><div class="line"></div><div class="line">        // =================================== 聚合为映射 ===========================================================================</div><div class="line"></div><div class="line">        // 将用户分为「大于22岁」和「小于等于22岁」两组</div><div class="line">        Map&lt;Boolean, List&lt;User&gt;&gt; partitionUsers = users.stream().collect(Collectors.partitioningBy(user -&gt; user.getAge() &gt; 22));</div><div class="line">        System.out.println(&quot;partitionUsers ==&gt;  &quot; + JSON.toJSON(partitionUsers));</div><div class="line"></div><div class="line">        // 将用户列表转化为「对象名 -&gt; 对象」的映射关系</div><div class="line">        Map&lt;String, User&gt; userMap = users.stream().collect(Collectors.toMap(User::getName, user -&gt; user));</div><div class="line">        System.out.println(&quot;userMap ==&gt; &quot; + JSON.toJSON(userMap));</div><div class="line"></div><div class="line">        // =================================== 映射排序 ===========================================================================</div><div class="line"></div><div class="line">        // 对用户映射表userMap排序 从大 -&gt; 小</div><div class="line">        Map&lt;String, User&gt; descUserMap = new LinkedHashMap&lt;&gt;();</div><div class="line">        userMap.entrySet().stream().sorted(Map.Entry.&lt;String, User&gt;comparingByKey().reversed()).forEachOrdered(entry -&gt; descUserMap.put(entry.getKey(), entry.getValue()));</div><div class="line">        System.out.println(&quot;descUserMap ==&gt;&quot; + descUserMap);</div><div class="line">        // 「特别需要注意JSON.toJSON()会对内容顺序重排」 --&gt; 对比上一条输出</div><div class="line">        System.out.println(&quot;descUserMap ==&gt;&quot; + JSON.toJSON(descUserMap));</div><div class="line"></div><div class="line">        // 对用户映射表userMap排序 从小 -&gt; 到</div><div class="line">        Map&lt;String, User&gt; ascUserMap = new LinkedHashMap&lt;&gt;();</div><div class="line">        userMap.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEachOrdered(entry -&gt; ascUserMap.put(entry.getKey(), entry.getValue()));</div><div class="line">        System.out.println(&quot;ascUserMap ==&gt;&quot; + ascUserMap);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>提一点</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/6.jpg" alt=""></p>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/5.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Java8官方文档之<code>java.util.stream.Collectors</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之ArrayList源码学习]]></title>
      <url>http://jianwl.com/2016/10/26/JAVA%E4%B9%8BArrayList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接触<code>JAVA</code>2年多了，写代码总是随心所遇，怎么快，怎么来。写代码时，没有去思考怎么避免重复代码，降低多个模块间的耦合，都是事后填坑。看优秀的源码是一个很好地学习方式,同时有助于加深理解。</p>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-28/26213741.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>为何ArrayList能够动态扩容？</strong></p>
<p><code>1. 定义变量</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 默认容量</div><div class="line">private static final int DEFAULT_CAPACITY = 10;</div><div class="line">    </div><div class="line">// 数组元素,其长度代表总的容量,实际元素个数，小于总容量</div><div class="line">transient Object[] elementData; </div><div class="line">  </div><div class="line">// 实际元素个数</div><div class="line">private int size;</div><div class="line">    </div><div class="line">// 默认空实例</div><div class="line">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div></pre></td></tr></table></figure>
<p><code>2. 初始化，实际元素个数为0</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public ArrayList() &#123;</div><div class="line">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>3.增加元素</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">// 确保数组的容量够，不够自动扩容，具体来看下实现。</div><div class="line">   ensureCapacityInternal(size + 1);</div><div class="line">        </div><div class="line">// 数组指定位置赋值</div><div class="line">   elementData[size++] = e;</div><div class="line">   return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ensureCapacityInternal 具体实现</code></p>
<p>简单叙述一下步骤：</p>
<ol>
<li>初始化,元素个数(<code>size=0</code>)为0</li>
<li>此时<code>elementData</code>为空，故<code>minCapacity=10</code> </li>
<li>因<code>minCapacity=10</code>而<code>elementData.length=0</code>故第一次自动扩容。</li>
<li><code>当前元素的个数 * 1.5 = 0</code>小于<code>minCapacity=10</code>,所以扩容的长度为10.</li>
<li>赋值<code>elementData</code>的长度为10。自此完成一次完整扩容。</li>
<li>再次增加元素，因<code>minCapacity - elementData.length == 0</code>，故不会再次扩容，直到元素的个数为11个，此时<code>minCapacity=11</code>而<code>elementData.length=10</code>，将再次触发扩容。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">private void ensureCapacityInternal(int minCapacity) &#123;</div><div class="line">      if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">          minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ensureExplicitCapacity(minCapacity);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  private void ensureExplicitCapacity(int minCapacity) &#123;</div><div class="line">      modCount++;</div><div class="line"></div><div class="line">      // 实际元素个数大于数组容量时,进行扩容。</div><div class="line">      if (minCapacity - elementData.length &gt; 0)</div><div class="line">          grow(minCapacity);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  // 扩容</div><div class="line">  private void grow(int minCapacity) &#123;</div><div class="line">      // overflow-conscious code</div><div class="line">      int oldCapacity = elementData.length;</div><div class="line">      </div><div class="line">      // 新容量为当前元素个数的1.5倍</div><div class="line">      int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</div><div class="line">      if (newCapacity - minCap。、acity &lt; 0)</div><div class="line">          newCapacity = minCapacity;</div><div class="line">      if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</div><div class="line">          newCapacity = hugeCapacity(minCapacity);</div><div class="line">      // minCapacity is usually close to size, so this is a win:</div><div class="line">      elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>JDK8源码</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之简单工厂模式]]></title>
      <url>http://jianwl.com/2016/10/24/JAVA%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一节我们学习了<a href="http://jianwl.com/2016/10/17/Java%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/">模板方法</a>，这一节让我们来学习简单工厂模式。</p>
<p><code>定义</code></p>
<p>工厂模式就是按照要求返回一个类型的对象。</p>
<p><code>目的</code></p>
<p>使对象的实例化与主程序代码解耦。</p>
<p><code>设计原则</code></p>
<ul>
<li>变量不要持有具体类的引用</li>
<li>不要让类继承具体类，要继承抽象类或接口</li>
<li>不要覆盖基类中已实现的方法</li>
</ul>
<p><code>优点</code></p>
<ul>
<li>简单工厂模式实现了对责任的分割，提供了专门的工厂类创建对象</li>
<li>引入配置文件，在不需要修改客户端代码的情况下更换和增加新的产品类，一定程度提高系统的灵活性。</li>
</ul>
<p><code>缺点</code></p>
<ul>
<li>扩展困难，一旦添加新产品需要修改工厂逻辑</li>
<li>产品类型较多时，可能造成工厂逻辑过于复杂，不利于系统扩展和维护</li>
<li>工厂类集中了所有产品创建逻辑，一旦不能工作，整个系统将受影响。</li>
<li>简单工厂模式会增加系统中类的个数，一定程度上增加了系统的复杂性和理解难度</li>
<li>使用静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li>
</ul>
<p><code>应用场景A</code></p>
<p>我们与银行有业务来往，需要与银行方进行报文通信，不同的业务的报文不同，为此我们需要有一个工厂来简单创建不同的报文。</p>
<p><code>应用场景B</code></p>
<p>写一个Servlet处理客户端请求的时候，往往会给一个Servlet处理多个业务逻辑，为此我们需要有一个工厂类简单创建不同的Servlet。</p>
<h3 id="实战-应用场景A："><a href="#实战-应用场景A：" class="headerlink" title="实战 - 应用场景A："></a>实战 - 应用场景A：</h3><p><strong>1. 定义产品接口</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IProduct &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 定义一个抽象类，他是所有产品的父类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public abstract class AnswerHead &#123;</div><div class="line">    protected String requestType;</div><div class="line">    protected String agentCode;</div><div class="line">    protected String trnCode;</div><div class="line">    protected String frontTraceno;</div><div class="line">    public abstract String toXML();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. 产品类A，只应答报文头</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class AnswerHeadOnly extends AnswerHead &#123;</div><div class="line">    @Override</div><div class="line">    public String toXML() &#123;</div><div class="line">        System.out.println(&quot;AnswerHeadOnly to xml&quot;);</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4. 产品类B，只应答报文体</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class AnswerBodyMobile extends AnswerHead &#123;</div><div class="line">    @Override</div><div class="line">    public String toXML() &#123;</div><div class="line">        System.out.println(&quot;AnswerBodyMobile to xml&quot;);</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. 简单工厂类，根据参数不同生成不同的实例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class ProductFactory &#123;</div><div class="line">    public static AnswerHead createProduct(String type)&#123;</div><div class="line">       switch (type)&#123;</div><div class="line">           case &quot;answerHeadOnly&quot;:</div><div class="line">               return new AnswerHeadOnly();</div><div class="line">           case &quot;answerHeadMobile&quot;:</div><div class="line">               return new AnswerBodyMobile();</div><div class="line">           default:</div><div class="line">               return null;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ProductFactory.createProduct(&quot;answerHeadOnly&quot;).toXML();</div><div class="line">        ProductFactory.createProduct(&quot;answerHeadMobile&quot;).toXML();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>6、结果</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-25/57629976.jpg" alt=""></p>
<h3 id="实战-应用场景B"><a href="#实战-应用场景B" class="headerlink" title="实战 - 应用场景B"></a>实战 - 应用场景B</h3><p>我们在写一个Servlet处理客户端请求的时候，往往会一个Servlet处理多个业务逻辑，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) &#123;</div><div class="line">    String flag = request.getParameter(&quot;flag&quot;);</div><div class="line">    if(flag.equals(&quot;service1&quot;)) &#123;</div><div class="line">        service1();</div><div class="line">    &#125;else if(flag.equals(&quot;service2&quot;)) &#123;</div><div class="line">        service2();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是我们的Servlet处理多业务逻辑的常规方法，写一坨<code>if else</code>语句，一种比较好的办法就是，将请求的分发与Servlet分离，让Servlet之处理业务逻辑。我们把各种请求的Servlet看做产品类，<code>javax.servlet.HttpServlet</code>是产品父类，<code>javax.servlet.Servlet</code>是产品接口，这样我们定义一个<code>ServletFactory</code>,在过滤器里解析url请求并交给<code>ServletFactory</code>来处理就可以了。这是一个典型的简单工厂应用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@WebFilter(&quot;/TransRequest&quot;)</div><div class="line">public class TransRequest implements Filter&#123;</div><div class="line">    private String servletName;</div><div class="line">    @Override</div><div class="line">    public void doFilter(ServletRequest request, ServletResponse response,</div><div class="line">            FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">        HttpServletRequest myRequest = (HttpServletRequest)request;</div><div class="line">        //拿到请求的servlet名字， 这里我们约定请求都是/servletName形式</div><div class="line">        String names[] = myRequest.getRequestURI().trim().split(&quot;/&quot;);</div><div class="line">        servletName = names[2];</div><div class="line">        if( servletName != null) &#123;</div><div class="line">        //以下是最典型的两句简单工厂的例子</div><div class="line">            Servlet servlet = ServletFactory.createServlet(servletName);</div><div class="line">            servlet.service(request, response);</div><div class="line">        &#125;else</div><div class="line">            chain.doFilter(request, response);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>每次类一个请求我们用工厂生产一个Servlet，这样可以免去xml配置大量的servlet路径信息比较方便，逻辑也更加清晰。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> public class ServletFactory &#123;</div><div class="line">    public static Servlet createServlet(String servletName) throws ServletException &#123;</div><div class="line">        if(servletName.equals(&quot;servletName1&quot;)) &#123;</div><div class="line">            return new Service1();</div><div class="line">        &#125;else if(servletName.equals(&quot;servletName2&quot;))&#123;</div><div class="line">            return new Service2();</div><div class="line">        &#125;else&#123;</div><div class="line">            throw new ServletException(&quot;No such servlet&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.csdn.net/zuoxiaolong8810/article/details/9044033" target="_blank" rel="external">简单工厂模式详解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[KeyNote技巧之次序]]></title>
      <url>http://jianwl.com/2016/10/22/KeyNote%E6%8A%80%E5%B7%A7%E4%B9%8B%E6%AC%A1%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>内容呈现的<code>次序</code>，对于演讲者来说是经常会碰到的。一般来说，演讲的内容会分为好多点来呈现，当然你可以用最简单的方式，每一页呈现一点，但听众可能听到后面会忘了前面的内容。这一节我们将会来学习，怎么在一页中呈现所有点，并且在讲解当前点时，观众不会被其他点分散注意力。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><code>描述：</code> 第一点说完，讲解第二点时，将第一点置为透明；讲解第3点时，将第2点至为透明；讲解第4点时，将第3点至为透明；最后将所有点都呈现出来。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/56992915.jpg" alt=""></p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>1、介绍个人履历</strong></p>
<p><code>描述：</code>在介绍个人履历时，介绍某个阶段时，将之前的经历至为透明，避免观众分散注意力。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/65788428.jpg" alt=""></p>
<p><strong>2、英语读物推荐</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/634423.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、出现「数字2时将数字1透明」</strong></p>
<p><code>设置「数字2」的出现效果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/46206252.jpg" alt=""></p>
<p><code>设置「数字1」的透明程度为90%</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/7820640.jpg" alt=""></p>
<p><code>设置构建的顺序，当「数字2」出现时，「数字1」变为透明</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/55957232.jpg" alt=""></p>
<p><code>效果图</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/68799891.jpg" alt=""></p>
<p><strong>2、介绍好所有点，最后将所有点都非透明呈现出来</strong></p>
<p><code>拷贝所有点到新的一页，设置新的一页和之前一页的出现次序为「渐隐渐现」</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/73577781.jpg" alt=""></p>
<p><code>实现效果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/93172671.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.youtube.com/watch?v=f3tZhoX82v0&amp;index=5&amp;list=PLnt8-ZhVs2dupUpGriwiVceamkpVdZ5yF" target="_blank" rel="external">许岑KeyNote教学 –需要翻墙</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[KeyNote技巧之参考线与对齐]]></title>
      <url>http://jianwl.com/2016/10/22/KeyNote%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%8F%82%E8%80%83%E7%BA%BF%E4%B8%8E%E5%AF%B9%E9%BD%90/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近遇到一个比较困惑的问题：<code>项目工程做出来了，但是怎么样展示项目，让别人了解它。</code>用<code>KeyNote</code>是一种比较好的展现方式，所以学习<code>KeyNote</code>使用技巧是非常有必要的。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1.文字水平&amp;竖直居中</strong></p>
<p><code>操作：拖动文字当文字呈现出一个十字标识时，处于水平、竖直居中位置</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/6424996.jpg" alt=""></p>
<p><strong>2.文字间距相同</strong></p>
<p><code>操作：移动「平凡之路」与「参考线与对齐」出现双箭头时，说明「平凡之路」、「参考线与对齐」、「走在平坦的路上」间距相同，当出现竖线时，说明它们竖直居中对齐</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/32772264.jpg" alt=""></p>
<p><strong>3.文字左对齐</strong></p>
<p><code>方式1：手动左对齐</code></p>
<p><code>操作</code></p>
<p>1、 <code>Command + R</code>快捷键，开启标签<br>2、 拉出一条对齐线</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/9811713.jpg" alt=""></p>
<p>3、 调节直到文字在一条直线上，且间距相同。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/45974538.jpg" alt=""> </p>
<p><code>方式2：自动左对齐</code></p>
<p><code>操作</code></p>
<p>1、 选中所有文字, 在其中一个文字旁右键选择对齐方式</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/30119857.jpg" alt=""></p>
<p>2、得到左对齐文字后，在一个文字旁右键选择<code>分布对象</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/18045225.jpg" alt=""></p>
<p>3、得到左对齐且竖直间距相同的文字</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/34020849.jpg" alt=""></p>
<p><strong>4.调整图片为相同大小</strong></p>
<p><code>操作</code></p>
<p>1、有两张比例相同，但大小不同的图片</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/45034017.jpg" alt=""></p>
<p>2、按比例缩放一张图片，当图片的长宽均出现双箭头时，此时两张图片大小一致</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/24118872.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.youtube.com/watch?v=Z02qoRAWULE&amp;list=PLnt8-ZhVs2dupUpGriwiVceamkpVdZ5yF&amp;index=4" target="_blank" rel="external">许岑KeyNote教学</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之模板方法]]></title>
      <url>http://jianwl.com/2016/10/17/Java%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>模板方法之前写过一篇<a href="http://jianwl.com/2016/08/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">Java设计模式之模板方法模式</a>,当回过头来再看这篇文章时，发现原来的文章过于累赘，无法让人快速理解，故重新梳理。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p><strong>什么是模板方法？</strong></p>
<p>提取了类库中的公共行为，将公共行为放在父类中，通过其子类来实现不同的行为。</p>
<p><strong>优点</strong></p>
<ol>
<li>将不变的行为搬到超类，去除了子类中的重复代码</li>
<li>子类实现算法的细节，有助于算法的扩展。</li>
<li>父类调用子类实现的操作，通过子类扩展新的行为，符合开闭原则。</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>每个不同的实现都需要定义一个子类，这会导致类的个数的增加，设计更加抽象。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1. 定义算法骨架</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public abstract class StealingMethod &#123;</div><div class="line"></div><div class="line">  protected abstract String pickTarget();</div><div class="line"></div><div class="line">  protected abstract void confuseTarget(String target);</div><div class="line"></div><div class="line">  protected abstract void stealTheItem(String target);</div><div class="line"></div><div class="line">  public void steal() &#123;</div><div class="line">    String target = pickTarget();</div><div class="line">    System.out.println(&quot;The target has been chosen as &quot; + target + &quot;.&quot;);</div><div class="line">    confuseTarget(target);</div><div class="line">    stealTheItem(target);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 主对象使用骨架算法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class HalflingThief &#123;</div><div class="line"></div><div class="line">  private StealingMethod method;</div><div class="line"></div><div class="line">  public HalflingThief(StealingMethod method) &#123;</div><div class="line">    this.method = method;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void steal() &#123;</div><div class="line">    method.steal();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void changeMethod(StealingMethod method) &#123;</div><div class="line">    this.method = method;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. 子类A实现骨架算法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class HitAndRunMethod extends StealingMethod &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected String pickTarget() &#123;</div><div class="line">    return &quot;old goblin woman&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void confuseTarget(String target) &#123;</div><div class="line">    System.out.println(&quot;Approach the &quot; + target + &quot; from behind.&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void stealTheItem(String target) &#123;</div><div class="line">    System.out.println(&quot;Grab the handbag and run away fast!&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4. 子类B实现骨架算法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class SubtleMethod extends StealingMethod &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected String pickTarget() &#123;</div><div class="line">    return &quot;shop keeper&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void confuseTarget(String target) &#123;</div><div class="line">    System.out.println(&quot;Approach the &quot; + target + &quot; with tears running and hug him!&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void stealTheItem(String target) &#123;</div><div class="line">    System.out.println(&quot;While in close contact grab the &quot; + target + &quot;&apos;s wallet.&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. Main方法运行</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">  public static void main(String[] args) &#123;</div><div class="line">    HalflingThief thief = new HalflingThief(new HitAndRunMethod());</div><div class="line">    thief.steal();</div><div class="line">    thief.changeMethod(new SubtleMethod());</div><div class="line">    thief.steal();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-17/79477811.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之HashMap新特性]]></title>
      <url>http://jianwl.com/2016/10/17/Java8%E4%B9%8BHashMap%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>简介</code></p>
<p><code>Hash table</code>也是基于<code>Map接口</code>实现的，功能与<code>HashMap</code>基本相似，不同的是<code>HashMap</code>允许key和value插入空值，且<code>HashMap</code>是一个线程不安全类。</p>
<p><code>性能</code></p>
<p><code>HashMap</code>影响其性能的有两个参数：初始化容量(<code>initial capacity</code>)和负载因子(<code>load factor</code>)。初始化容量是哈希表创建时的容量。负载因子决定了哈希表充分哈希的比例多大时，自动扩容。当哈希表中的数量大于负载因子乘以哈希表的容量时，哈希表将扩容并重新哈希已存入的数据。</p>
<p>默认负载因子是<code>0.75</code>是时间和空间成本的权衡比较好的一个平衡点。那负载因子为何是<code>0.75</code>？增大负载因子有什么影响？ 增大负载因子会降低空间开销，但提高查找成本（体现HashMap类的操作，包括get和put)。后文会举例说明。</p>
<p><code>如何提高性能</code></p>
<p>预估向<code>HashMap</code>塞的数量来设置初始容量，尽可能减少重新哈希(<code>rehash</code>)的操作，如果初始化容量大于最大条目数<code>除以</code>负载因子，重新哈希操作(<code>rehash</code>)将不会发生。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、无设置初始化容量 VS 设置初始化容量</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001() &#123;</div><div class="line">    long start = System.currentTimeMillis();</div><div class="line">    Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">        map.put(String.valueOf(i), i);</div><div class="line">    &#125;</div><div class="line">    System.out.println(&quot;not init capacity =&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void test_002() &#123;</div><div class="line">    long start = System.currentTimeMillis();</div><div class="line">    Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(20560000);</div><div class="line">    for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">        map.put(String.valueOf(i), i);</div><div class="line">    &#125;</div><div class="line">    System.out.println(&quot;init capacity=&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%8812.32.06.png" alt=""></p>
<p>很明显，设置初始化容量之后的效率会更高。</p>
<p><strong>2、默认负载因子(0.75f)  VS 设置更高的负载因子</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line"> public void test_002() &#123;</div><div class="line">     long start = System.currentTimeMillis();</div><div class="line">     Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(20560000, 075f);</div><div class="line">     for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">         map.put(String.valueOf(i), i);</div><div class="line">     &#125;</div><div class="line">     System.out.println(&quot;default load capacity=&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> @Test</div><div class="line"> public void test_0021() &#123;</div><div class="line">     long start = System.currentTimeMillis();</div><div class="line">     Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(20560000, 0.9f);</div><div class="line">     for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">         map.put(String.valueOf(i), i);</div><div class="line">     &#125;</div><div class="line">     System.out.println(&quot;0.9 load capacity =&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%8812.55.36.png" alt=""></p>
<p>很明显，增大负载因子后，效率变低。</p>
<p><strong>3、compute方法</strong></p>
<p><code>作用：</code>新增数据时，若<code>Map</code>中已存在该Key,可以对Value进行操作。</p>
<p><code>场景：</code>统计一个数字出现的次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_011() &#123;</div><div class="line">    List&lt;Integer&gt; list = Arrays.asList(1, 1, 1, 2, 3, 4, 4, 5, 5, 8);</div><div class="line">    Map&lt;Integer, Integer&gt; numCounts = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    list.stream().forEach(num -&gt; &#123;</div><div class="line">        if (numCounts.containsKey(num)) &#123;</div><div class="line">            numCounts.compute(num, (k, v) -&gt; (v != null) ? v = v + 1 : v);</div><div class="line">        &#125; else &#123;</div><div class="line">            numCounts.put(num, 1);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    numCounts.forEach((k, v) -&gt; System.out.println(&quot;key -&gt; &quot; + k + &quot; value -&gt; &quot; + v));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.22.00.png" alt=""></p>
<p><strong>4、遍历forEach</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_006() &#123;</div><div class="line">    Map&lt;String, String&gt; map = new HashMap&lt;&gt;(16, 0.75f);</div><div class="line">    map.put(&quot;1&quot;, &quot;1&quot;);</div><div class="line">    map.put(&quot;2&quot;, &quot;2&quot;);</div><div class="line">    map.put(&quot;3&quot;, &quot;3&quot;);</div><div class="line">    map.forEach((k, v) -&gt; System.out.println(&quot; key -&gt; &quot; + k + &quot; value -&gt; &quot; + v));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.24.14.png" alt=""></p>
<p><strong>5、合并merge</strong></p>
<p><code>作用：</code>新增数据，当存在该key，则对该value做处理，反之则新增数据。</p>
<p><code>场景：</code>统计一个数字出现的次数；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> @Test</div><div class="line">public void test_012() &#123;</div><div class="line">    List&lt;Integer&gt; list = Arrays.asList(1, 1, 1, 2, 3, 4, 4, 5, 5, 8);</div><div class="line">    Map&lt;Integer, Integer&gt; numCounts = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    list.stream().forEach(num -&gt; &#123;</div><div class="line">        numCounts.merge(num,1,Integer::sum);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    numCounts.forEach((k, v) -&gt; System.out.println(&quot;key -&gt; &quot; + k + &quot; value -&gt; &quot; + v));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.22.00.png" alt=""></p>
<p><strong>6、获取所有键值values()</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_008() &#123;</div><div class="line">    Map&lt;String, String&gt; map = new HashMap&lt;&gt;(16, 0.75f);</div><div class="line">    map.put(&quot;1&quot;, &quot;1&quot;);</div><div class="line">    map.put(&quot;2&quot;, &quot;2&quot;);</div><div class="line">    map.put(&quot;3&quot;, &quot;Oh!&quot;);</div><div class="line">    System.out.println(JSON.toJSON(map.values()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.36.30.png" alt=""></p>
<p><strong>7、按键值排序顺序或逆序</strong></p>
<p><code>用LinkedHashMap排序</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_013()&#123;</div><div class="line">    Map&lt;String,Double&gt; map = new LinkedHashMap&lt;&gt;();</div><div class="line">    Map&lt;String,Double&gt; sortedMapA = new LinkedHashMap&lt;&gt;();</div><div class="line">    Map&lt;String,Double&gt; sortedMapB = new LinkedHashMap&lt;&gt;();</div><div class="line">    map.put(&quot;1&quot;,1.0);</div><div class="line">    map.put(&quot;4&quot;,4.0);</div><div class="line">    map.put(&quot;3&quot;,3.0);</div><div class="line">    map.put(&quot;2&quot;,2.0);</div><div class="line">    map.put(&quot;5&quot;,5.0);</div><div class="line">    </div><div class="line">    map.entrySet().stream().sorted(Map.Entry.&lt;String,Double&gt;comparingByValue().reversed()).forEachOrdered(entry -&gt; sortedMapA.put(entry.getKey(),entry.getValue()));</div><div class="line">    map.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEachOrdered(entry -&gt; sortedMapB.put(entry.getKey(),entry.getValue()));</div><div class="line"></div><div class="line">    // 逆序</div><div class="line">    System.out.println(sortedMapA);</div><div class="line"></div><div class="line">    // 顺序</div><div class="line">    System.out.println(sortedMapB);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-20/30575157.jpg" alt=""></p>
<p>但是….如果用<code>HashMap</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-20/60385941.jpg" alt=""></p>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-20/71588571.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>JAVA8官方文档之HashMap</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分享「代码家」的学习过程和学习方法]]></title>
      <url>http://jianwl.com/2016/10/17/%E5%88%86%E4%BA%AB%E3%80%8C%E4%BB%A3%E7%A0%81%E5%AE%B6%E3%80%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E5%92%8C%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天逛博客的时候，发现一篇非常棒的文章，出自「<a href="http://blog.daimajia.com/fen-xiang-yi-xie-zi-ji-de-xue-xi-guo-cheng-he-xue-xi-fang-fa/" target="_blank" rel="external">代码家</a>」之手，觉得一时可能难以消化所有的知识，转录过来,方便后续随时查阅。</p>
<p><code>注：以下内容均来自于「代码家」的博客</code></p>
<p>每天，都会有人在微博上私信我，问我关于学习和成长的问题。这种问题我一般都不会回复某个j，毕竟每个人的情况不一样，每个人对待事物的性格也不一样，我不能夸下海口的说，你看某本书几个月就能如何如何，我能做的多数时候只是鼓励鼓励，其次我也从不认为我已经成长到一个多高的境界上，让我去给别人做指导，我还是当之有愧的。</p>
<p>但是，有时候看到大家私信我的时候，确实是处于一种很痛苦或是需要帮助的状态上。 最近晚上有空，就想写写自己从第一次接触程序，到一路颠簸学到今天的一些故事和经验，希望对大家有所帮助。</p>
<h3 id="学习的三个阶段"><a href="#学习的三个阶段" class="headerlink" title="学习的三个阶段"></a>学习的三个阶段</h3><p><strong>第一阶段：消费者阶段</strong></p>
<p>我在快上高中的时候，开始接触的程序。那会儿家里有一本 Visual Basic 的书，30 多页左右，也是家里唯一一本计算机类书籍，是我哥学校发的一本课外书，他对计算机貌似没有什么兴趣，就一直堆在家里，直到无意中被我翻到。</p>
<p>书里的程序格外的简单，几行简单的英语代码，就能让计算机弹出一个对话框，当时看到简直神奇极了！跃跃欲试的在老妈店里的电脑上一步一步的敲下代码，弹出一个简单的对话框，那一瞬间，感觉像是推开了新世界的大门，从此一发不可收拾。 实践完 VB 后，又在小书摊，看到了一本 《黑客 X 档案》，看着各路高深的入侵，木马，盗号，试图努力学会这些技能，然后去跟朋友们炫耀，但一直都无法入门。因为需要太多计算机的基础知识了，不是写个弹框，或者计算器水平的人能搞定的。</p>
<p>那会儿家里也没有懂电脑的，也没有人可以问，又处在小城市，连个培训班都没有。</p>
<p>随即，开始漫漫买书求学路。</p>
<blockquote>
<p>一旦开始买书，就进入了学习的第一个阶段：消费者阶段。当个消费者其实是个挺轻松的事情，对着书本照猫画虎，一会儿就能跑起来一个看着很有趣的程序。</p>
</blockquote>
<p>那会儿，疯狂的买各种书，但是由于周围没有人指导，买了很多类似 21 天 xxx 系列的书，那会儿真的有这种书，我还抱有幻想⋯⋯觉得 21 天后我就⋯⋯</p>
<p>现在想想国内的图书市场简直恶劣到一定程度。很多高校，教师升职评比需要考察发表书籍情况，导致国内一大批烂书其实都是高校老师发出来的。我现在依然认为国内 95% 的技术类书籍是不值得买的，除了像侯杰老师这种文笔很好的技术人以外。</p>
<p>很多作者总是做不到『以读者能理解的顺序，而非自己认为的顺序』写文章，坑害了不少对计算机有兴趣的同学。我一直很崇拜侯杰老师的另一个原因是侯杰老师的书，总是能把你最想问的，如同庖丁解牛，深入浅出的解答出来。就如同 MFC 框架（很早前的一个 Windows SDK 框架，现在已经用的很少了），MFC 是很复杂的一个框架，所有初学的人，都会问一样的问题：”这玩意儿是怎么工作起来的？！”，但所有国产的 Visual C++ 的书，都避而不答，让你照猫画虎的做，就能弹出一个窗体。当初国内只有 《深入浅出 MFC》一书，讲明白了背后的一切。</p>
<p>学完一些基础知识后，就进入了学习的第二个阶段 <strong>实践者阶段</strong> 阶段。所谓实践者，就是开始用自己所学，去开发程序，成为一名专业或非专业的码农，很多人的职业生涯，也就停留在了这个阶段，过上了小富即安的程序员的日子。</p>
<p>我从<strong>消费者阶段</strong>过度到<strong>实践者阶段</strong>大概用了三四年的时间，其实已经挺长的了。我一直都认为我是一只笨鸟，无意中起飞，却飞了很久的那种。</p>
<p><strong>第二阶段：实践者阶段</strong></p>
<p>我真正开始实践的，是在本科学校做的几个网站。</p>
<p>第一个是个学校的匿名聊天系统，就是所有人都可以登录学校的站点，然后会匿名匹配到一个异性，开始聊天，当时用的 Asp.net 做的开发，配合 ajax + jquery，但由于当时技术太差，导致很多人聊着聊着就断线了，导致小产品不告而终。</p>
<p>第二个是给我们信息学院开发的一个官网，用的 PHP。在做这个网站的同时，我选修了一门叫《网络安全》的课程，这门课的老师叫陈路，我曾当着老师的面儿，夸下海口，我开发的官网，坚不可摧…(大概这个意思😳)陈老师知道了我做的网站，随即下达一个作业:”谁能攻陷我们的官网，一个漏洞加五分…”，后来，咳咳⋯网站数据没有了⋯⋯ 有个同学用一个很通用的扫描工具，在他也不知道发生了什么的情况下，工具把网站内容都删除了⋯⋯恩，我犯了个超低级的错误⋯⋯ GET 请求可以删除数据，外加身份认证代码有误⋯⋯</p>
<p>幸好，查看 Apache 日志的时候，发现删除请求到来的前几分钟，Google 爬虫来过（那会儿 Google 还能用），随即马上去 Google 的缓存里找回了所有的数据。 后来陈路老师被学校批斗了一顿，批斗的罪名是『鼓励学生攻击校园网络』，我其实是极力跟学校执事说明这个错误是我犯的，陈老师做的并没有错，而且我到现在还是很喜欢陈老师这种教学方法，毕竟实践出真知。</p>
<blockquote>
<p>可能现在陈老师在教《网络安全》课程的时候，会以 “当年有个学生….” 作为开头，有时候想想也挺有意思的。</p>
</blockquote>
<p>再后来我花了很多实践学习 Web 安全相关的知识。写各种 Web 程序时，都会最大程度的考虑安全问题。 网站攻陷后没多久，Android 出来了，我买了第一部 Android 手机，然后自己照着官方文档开始学 Android，动力的源头，是我听说写 App 能赚钱。赚钱真是学技术的很强的动力，之前写网站零零星星的赚了六七千块钱，作为同学里的小土豪，我又把目光转到了刚出来没多久的 Android 上。 当时先定了一个目标，写一个图片类 App，打算叫『无尽画廊』。因为很喜欢 WeHeartIt 这个小众文艺图片网站。随即计划利用正则解析图片地址，然后用把图片呈现在 App 上。那会儿 Java 和 Android 完全零基础。</p>
<p>自己在入门 Android 的时候真的超级拼。早上 6 点起床，然后开始悄悄下床（不能吵着舍友），打开电脑开始研究加开发。折腾到早上 7点半左右就和舍友一起去吃早饭，然后上课。中午回来也不午休，开发到快上课，晚上基本都会熬到 12 点左右。持续了 1 个月左右，终于从零基础到开发出一个粗糙的 1.0 版本，发到了国内的几个 App 市场。反馈不是很多，但是都挺积极，随即决定开发 2.0 版本，还加入了广告积分墙。就这样超拼的持续了 3 个月左右。现在网上能看到的基本都是 2.0 版本。我从这个 App 里，也赚到了一些广告费，大概几百块。但是因为广告服务商倒闭了⋯⋯ 钱到现在还没取出来⋯⋯ 心痛⋯⋯ 持续更新那个 App 到快毕业的时候，选择了保送到北师大。</p>
<p>暑假的时候去上海一家小公司去实习了，在实习的这家小公司，我做了一个到现在来看依然很屌的功能。现在来看是一个相当不错的 Growth Hacker 的一个案例（那会儿可没有增长黑客这个概念）。</p>
<p>实习所在的公司，是做类似小米盒子的东西。当时的盒子，最重要的当属内容，版权还处于蛮荒时代的时候，大家纷纷解析优酷，土豆这类的网站，以最少的成本，盗用优酷的带宽。简单点而来说，就是做视频聚合。视频聚合最麻烦的就是提取视频的真实文件地址，这样能为所有的创业公司免去版权纠纷，同时解决带宽费用问题。</p>
<p>我去那家公司实习的主要内容，就是用 Node 语言做视频地址解析，费劲功夫搞定了几乎所有的视频网站，各种黑科技都用上了，抓包，逆向，Headless Browser 等等。搞定所有网站后，也算勉强跟竞争对手站在同一起跑线。实习第二周的时候，已经有些没事儿干了，就在这会儿疯狂的想法出现了！</p>
<p>可能很多人还记得当年伟大的迅雷云播，解救了不知道多少个少男寂寞的夜。我们疯狂的想法就是要让我们的小盒子，能够流畅的播放用户从电脑上推送的任意种子文件，无需等待。在那会儿 TV 上，这种功能简直就是创举！</p>
<p>想法出来后，我抗下大旗，开始用代码模拟迅雷云播的全套流程。开发的过程十分艰难，得从不同平台的迅雷上抓包，寻找蛛丝马迹。优先从 Web 端模拟登陆和提交种子文件，这些都相对容易一些，最难的是如何提取到视频的真实地址。花了大概一周时间攻陷了所有的流程，然后公司买了 10 几个迅雷会员，又和各路 BT 网站开始合作，开启了浩浩荡荡的用户增长之旅。具体增长了多少新用户，其实我心里没有数，但是看见旁边的小朋友，每天都在加服务器，优化 Socket 连接数，我猜那一周得新增了 5 - 10万用户，更为壮观的是每到夜里，所有的迅雷账号里就瞬间塞满各种不可描述的日本电影，全部清空后，又被瞬间塞满。以至于后来，实习到第十七八天的时候，我的老板和 CTO 喊我过去，直接送了我 20 万期权，那感觉也是蛮爽的。后来微博上，这个功能也是火了一阵子，不过很快就挂了，起因是有用户在微博上 at 了小米电视和迅雷，让他们跟我们学着点儿⋯⋯ 然后，不超过半小时⋯⋯ 服务就挂掉了⋯⋯ 不过挂掉没几天我就去帝都准备研究生报名了。</p>
<p>还有一件很爽的事，就是我上了研究生后的半年里，那家公司一直给我支付着工资⋯⋯ 每个月轻轻松松就有几千块钱零花钱⋯⋯ 再后来的后来，那家公司倒闭了⋯⋯</p>
<p>快从上海实习结束的时候（实习一个月），我又认识了少楠，加入了 AT！组织。AT! 组织是一个分享优质原创动画的小团队，从此我从一枚野生开发正式晋升为一枚正规军。少楠是一枚非常优秀的产品经理兼设计师，跟着他学到了很多产品的知识和团队协作的技巧，也让我最后真的开发出了近百万用户的 App。AT！组织到现在都是我爱的组织，大家虽然从事不同行业，但就跟亲人一样。每次聚会都是一年一度最嗨皮的日子，都是我经历过最真诚的聊天。从后来做了 AnimeTaste 再到 EverMemo，我第一感觉到团队的重要性，第一次见识到优秀的设计师和 iOS 开发者。</p>
<p>以上的诸多经历也为自己创业埋下了很多伏笔。这些都是我是我的实践者阶段，漫长的三四年。</p>
<p><strong>第三阶段：创造者阶段</strong></p>
<p>实践者阶段之后，自己开始尝试创造。也是我认为学习的第三个阶段 — 创造者阶段，这个阶段是没有结束节点，就一直这么存在着。</p>
<p>我大致是研究生一年级的时候开始摸到创造者阶段的门梁，大三的时候接触的 GitHub，感觉是我学程序来，打开的第二个世界的大门（第一个，算是那个 VB 程序的弹框）。接触到 GitHub 让我第一次开始学习和研究脚本语言（ Python，Node，PhantomJS 等等），第一次开始接触真正的生产工具（类似 Less，Sass 等等），GitHub 简直是求学者的宝库，你会很期待明天的 Trending 榜单上会是什么新东西冒了出来。</p>
<p>那会儿在研究生阶段，每个月有了公司发的几千块钱，也开始入手了人生第一台 iPhone，一台土豪金版的 iPhone5s，买 App 太贵便折腾起了越狱（现在都是买 App 了）。装了一款越狱后的 Store（我忘了叫什么了），那个 Store，在下载一个 App 的时候，有个超漂亮的进度条，我每次都会认真的的盯着那个进度条，一边看，一边感叹，一边也暗许自己也要在 Android 上实现一套，这也是我开始第一次开发自定义组件的初衷，也是 NumberProgressBar 诞生的最初原因。</p>
<p>啃下第一个自定义组件，对很多人来说都是很痛苦的，我也一样，那会儿的 Android 组件少的可怜，不断的看文档，看源码，读别人的代码，试图搞清楚更多更底层的东西，不断的尝试运行，折腾了一周左右（每天超过 10 小时投入），终于做出来了，照猫画虎的写好文档，做好测试，小心翼翼的发布到 GitHub，然后发表到当时为数不多的 GitHub Android 分享社群里。地址在这里：<a href="https://plus.google.com/+daimajia/posts/d6DJhLhLn1c" target="_blank" rel="external">https://plus.google.com/+daimajia/posts/d6DJhLhLn1c</a></p>
<p>再到后来的几个月，又陆续写了一些其他的库，发到 GitHub 上，其实我根本没想到会有那么多人去 Star，可能跟下手比较早有关，恩。</p>
<p>创造者阶段，就是努力创造那些没有的，源自你脑海里的东西，而不是别人安排给你的。努力做到让更多的人用到，可以是一个 App，可以是一个帮助人们提高效率的 Chrome 插件，也可以是一个简单的组件。创造是最挑战你对一个行业的热爱程度的。</p>
<p>我从来不反对重复发明轮子。每一个轮子即便有一些小的改进，都是适应自然法则，优胜劣汰的。</p>
<p>就我身边而言，我最崇拜的创造者是尤小右，将一个小的 Framework，一点点的做大，再到做出国际影响力，真是个不得了的事情，也是很多技术人梦寐以求的事情。</p>
<p><strong>总而言之</strong></p>
<p>如果你忽然觉得自己这几年一直处在一个很稳定的状态中，觉得自己没有提升，那你得想想是不是我卡在了某个阶段，一直无法突破，你是否需要做些什么，突破到下一阶段去。随后的文章我也总结了一些误区和突破方法</p>
<h3 id="被误以为的学习"><a href="#被误以为的学习" class="headerlink" title="被误以为的学习"></a>被误以为的学习</h3><p>当年，有一本书刊特别流行，叫《故事会》。《故事会》后来销声匿迹了，在我眼里，取代《故事会》的是知乎。对，就是那个知乎。 我其实一直很反对一个论调：“上知乎，学知识”。醒醒吧。知乎明显就是现代版的故事会好吗？！ 我不否认知乎存在有价值的知识，但，根本不值得你花那么多时间，去发现那少的可怜的知识。去读书吧。用最系统的逻辑，去学会一项技能，哪怕你去《硅谷百年史》里去读那些振奋人心的仙童半导体的故事，也比你不断的知乎看着水的一笔的帖子要强的多。现在，最可怕的是大家在知乎上消费着垃圾，却依然觉得自己在吃着奶酪，学习的过程都是伴随着思考和痛苦的，如果你边笑边学习，那你真的得醒醒了。</p>
<h3 id="目标和激励很重要"><a href="#目标和激励很重要" class="headerlink" title="目标和激励很重要"></a>目标和激励很重要</h3><p>我在大三下半学期被保研后，开始了另一个小项目，一个叫 小熊词典 的 App，起因是因为在学英语的时候，所有词典类 App 想要获取最全的词语解释都需要联网，流量消耗大不说，电量是最大问题，自习一早上电量就没了。所以，自己想动手写一个词典 App，主打离线词库和快速查询。</p>
<p>但最后的时候，小项目胎死腹中。说实话，整个 App，已经开发到 95% 了，抓取了非常多有名的词库的数据，并且整理成了规范格式。但项目最后还是放弃了。即便今天来看这个词典依然很酷！（最丰富的词库和最快的查询速度）</p>
<p>现在想想，当初一个人开发的时候，每次想到一个很酷的功能，就决定加进来，项目进度遥遥无期。完全没有项目管理的思路，也没有意识到这样会很快拖垮我的体力，消磨掉自己的意志和热情。</p>
<p>对于很多初学者来说，总是抱着书学，其实也是同样的后果，你无法获得任何的反馈和激励，以至于觉得一件事情越做越难。学习的过程，最好能定一个简单的目标，比如：“我即便现在什么都不会，我就要做个小游戏出来，这个游戏应该是这样的一个玩儿法，blablabla。”，做出来后，快些去找用户，可以是你的朋友，也可以是你的父母，最好是那些不吝惜赞美的朋友们，让他们无形之中给你一些动力。</p>
<h3 id="你永远无法一步达到完美"><a href="#你永远无法一步达到完美" class="headerlink" title="你永远无法一步达到完美"></a>你永远无法一步达到完美</h3><p>我认识的朋友中，他们都有各种稀奇古怪的想法亟待实现，但最后，以信誓旦旦开始 Side projects，最后却都销声匿迹了，这是不无原因的。因为很多的开发者在刚开始的时候，缺乏清晰的计划，却想一步登顶完美的境地。这是很可怕的想法。就好比，我一个很少登山的人，却在第一次的时候，就决定登顶珠峰，结果自然可想而知。在实践自己想法的时候，最好能考虑以最低成本去展现你想法的核心部分，而非一个大而全的方案。</p>
<p>从最小成本的想法核心，一步步的去验证自己的想法，去收集反馈，调整策略。最终抵达一个正确的目标。</p>
<h3 id="赶在兴趣消失之前，去学习新知"><a href="#赶在兴趣消失之前，去学习新知" class="headerlink" title="赶在兴趣消失之前，去学习新知"></a>赶在兴趣消失之前，去学习新知</h3><p>不得不承认懒惰是人的共性，当你看到别的朋友做出来很酷的小游戏的时候，你是否也有几分钟冲动的想要去学习游戏制作。不要等！快去买两本书抓紧学起来，哪怕你知道你这个热情的苗头很快会熄灭，但请不要放弃任何发现新大陆的机会，在学习冲动消失之前，去入个门先。</p>
<p>我每次跟人互相分享初高中生涯的时候，我总是能想起来我初中时候的一位语文老师，微胖，性格和蔼。 她在一次自由复习准备期末考试的时候给我说： “你复习，不要局限在课本上，你背会 24 节气都是很有意义的，想看什么书，就去看，不要等，不要担心自己学不会。” 这话对我学习新东西影响特别深，现在我基本上想学习什么东西，立马去学，即便可能一周后气馁了，放弃了，但是从来不会怀疑学这些零碎知识的意义。 我学过吉他，写过毛笔字，写过 Delphi，用 Sketch 画过 icon，用 Blender 画过 3D 保龄球，写过 Unity 小游戏⋯⋯ 很多我都没坚持下来，但给我带来的最大改变就是我不会惧怕去接受新事物，思考问题的时候总是能把很多场景考虑到。也能慢慢的找到自己最爱做的那件事情，更清楚的定位自己。 所以，当你忽然对某件事情有兴趣的时候，抓住那几分钟，那几天，赶紧去学点新东西。 毕竟，点总是会串成线的。</p>
<h3 id="少看别人写的文章，多看优秀的代码"><a href="#少看别人写的文章，多看优秀的代码" class="headerlink" title="少看别人写的文章，多看优秀的代码"></a>少看别人写的文章，多看优秀的代码</h3><p>我做 Gank 以来，很多开发者都投稿过，以至于现在后台还挤压着 2000 多个投稿没有处理。看过这么一圈而后，我开始不主张去看别人写的技术类文章。看别人的文章，你看到的是他想讲给你的，而这些可能只是他在自己的项目里用到的，而不是一个客观全面的角度。时间一长，以至于你只知道这个东西的一两种用法，更可怕的是你可能已经对思考丧失兴趣，总想走捷径，可能这样前期学习效果显著，但是后期会很快到达瓶颈。我想如果你经常读各种语言的官方文档，总是会有 “啊哈！这样都可以，我以前都不知道还有这种方法存在。” 的感叹，但你看别人的文章，却很少有这种感觉。</p>
<p>至于主张看优秀的代码，其实是希望学习一个技术细节，是伴随着思考的。其实，评价某一种方案好与不好，是没有意义的。只有多积累其他人解决同一问题的方法，才能在下一次做决策的时候，找到适合当前场景的最优解，很多时候，也能触类旁通，给解决其他问题提供思路。</p>
<h3 id="慢慢减少对二手知识的依赖"><a href="#慢慢减少对二手知识的依赖" class="headerlink" title="慢慢减少对二手知识的依赖"></a>慢慢减少对二手知识的依赖</h3><p>技术提升这个过程，其实是你对二手知识减少依赖的过程。二手知识是什么？就是那些经过别人翻译，总结的文章。一开始入门，大家看到的都是二手知识（也可能是三手，四手的知识），但，想要提升自己的能力，强迫自己多去看些更官方的文档，体系化去学习。这个过程是很消耗体力和脑力的，但多坚持，一定会有明显改善的。</p>
<h3 id="收藏的意义不大，收藏也不能改变什么"><a href="#收藏的意义不大，收藏也不能改变什么" class="headerlink" title="收藏的意义不大，收藏也不能改变什么"></a>收藏的意义不大，收藏也不能改变什么</h3><p>很多人看到不错的文章，总要 @我的印象笔记⋯⋯ 我之前也会这么干，经常把一些不错的文章，存到 Pocket 或者 Readability 里，但，真的回顾去看那些文章的机会太少了，而收藏这些文章给我带来不少压力。有的文章，我只是浅显的读了读，脑子里总是得记着有时间了再去读完剩下部分，正如大多数人一样，再也不会去读了。久而久之，拖延症也就变得理所应当。</p>
<p>有可能你会说万一哪天用到呢？其实我觉得再 Google 一次就好啦，可能会找到比这篇文章更好的。就这样。</p>
<p>现在，看到一篇不错的文章，首先从标题推测下内容，再扫一眼，如果跟我猜测的八九不离十，我基本就关掉了。如果有跟我的推测大相径庭，我一定会一口气读完，而不是收藏起来以后再读。</p>
<p>之所以我说收藏什么也改变不了，是因为读别人的东西，思考的过程是别人的。努力去减少从别人文章里阅读学习的频率，多去读一手资料然后自己总结。</p>
<h3 id="培养一些对产品的感觉"><a href="#培养一些对产品的感觉" class="headerlink" title="培养一些对产品的感觉"></a>培养一些对产品的感觉</h3><p>你有没有在 PM 说了要实现某个效果或者功能的时候，你站出来反对，说这样并不合理。如果你有过，那么我想你也是一个有理想的开发者，而不是一个“码农”。聪明人喜欢跟聪明人合作，大家一开口就互相明白了。没有人是天生聪明的，只是看的多了，想的多了，就显得聪明了。</p>
<p>看些什么呢？看看一个优秀的 App 早起的冷启动是怎么做的，看看 Apple Store 或者 Google Play 上最近有没有什么新奇的 App 出现，看看 Tech Crunch 上最近又有什么天马行空的项目融到了钱。</p>
<p>想些什么呢？想想一个产品功能的存在有没有意义，他的下个阶段又会怎么发展，想想某段文案是否会降低产品某个功能的转换率，想想某个动画效果是否是很恼人的存在，如果你可以对微信加一个功能，减一个功能，你又会作何选择。</p>
<h3 id="每个人都应该有个-idea-list"><a href="#每个人都应该有个-idea-list" class="headerlink" title="每个人都应该有个 idea list"></a>每个人都应该有个 idea list</h3><p>我在西安读大学那会儿开始，就有一个小本子，记录着突然冲入自己脑海的一些靠谱或是离谱小想法。上面会写着类似：</p>
<ul>
<li>做个 Every big moment，用手机记录自己的每个值得纪念的瞬间，然后打印成相册发给我或者放在网上当做自己的 Profile。</li>
<li>狗狗出门便便，主人打扫很不方便，有没有更好的方案？</li>
<li>程序一旦崩溃，直接发送操作记录和堆栈信息到 Dashboard，而不要让测试人员努力重现，写个 SDK，搭建一套服务，一定会很好用。</li>
<li>很多的 Bug 追踪服务，为什么不在错误堆栈旁边，展示出来这个 Bug 的解决方案，哪怕是一个 StackOverflow 的链接也好，这样我就不用去自己搜索了。</li>
</ul>
<p>那个小本上记录了自己好多做产品的想法，有不少，后来市面上都出来了相应的产品。也有一些现在看来很可笑，有的想法今天再翻看的时候，仍然会冲动的想要组团队去实现。</p>
<p>Idea list 总是能激发你去创造的欲望，有空，就去不断的记录自己的 Idea list 吧。</p>
<p>另外，不要把自己的 idea 当做一个秘密，多和人去讨论自己的想法，在不断的否认和肯定中，完善自己的想法，idea 是不值钱的，只有实现它才是有价值的。</p>
<h3 id="争取去更优秀的地方"><a href="#争取去更优秀的地方" class="headerlink" title="争取去更优秀的地方"></a>争取去更优秀的地方</h3><p>这句话可能大家都懂，但我的体会却比大家都深刻。</p>
<p>我在西安一个叫西北大学的地方读的大学，是一个普通的 211。计算机专业客观来说比较一般，在来北京师范大学读研究生之前，我甚至没听说过 ACM。</p>
<p>Python、Ruby、Node 这种编程语言在我们的计算机系，根本连影子都没有，所以正统的计算机技能点基本都是 C，C++这样，这并没有什么错⋯⋯ 但路子就变窄了很多，学长毕业去个腾讯、阿里，已经能被大家推上神坛。</p>
<p>本科学校大二会给计算机系开一门日语课。为什么会给计算机系开日语课呢？因为很多外包来自日本。这个逻辑我一直都接受不能。这都什么年代了，我们早都不需要用外包支撑我国的 IT 产业了。</p>
<p>学校给学生的定位更多是一个学校展示就业率的棋子，你会什么不重要啦，只要你最后有个工作就好了，不要拖累了学校的名声。</p>
<p>来师大后，感受到了前所未有的转变。学校整体的气氛相当自由，很多老师们，都是各自领域的专家，你问一个问题，他们能给你引导出很多有意思的点。久而久之，你也会被这些感染到。有时候，我也会想，以后稳定下来之后，要不要去申请个美国名校读一读。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.daimajia.com/fen-xiang-yi-xie-zi-ji-de-xue-xi-guo-cheng-he-xue-xi-fang-fa/" target="_blank" rel="external">分享一些自己的学习过程和学习方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程入门]]></title>
      <url>http://jianwl.com/2016/10/16/Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Shell</code>是基于命令行的解释器，它连接用户和操作系统，允许通过编写脚本来执行系统命令。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p><strong>1、环境变量</strong></p>
<p><code>实战1：查看环境变量env</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/33734703.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HOME : 代表用户主文件夹</div><div class="line">SHELL : 目前这个环境使用的SHELL是哪个程序</div><div class="line">PATH : 执行文件查找路径，目录与目录中间以冒号`:`分隔</div><div class="line">LANG : 语系数据，很多信息都会用到它。</div></pre></td></tr></table></figure>
<p><strong>2、文件系统及程序的限制关系：ulimit</strong></p>
<p><code>场景：</code>Linux主机里同时登陆10个人，每个人同时打开100个文件，每个文件10MB，那么Linux主机内存需要<code>10 * 100 * 10 = 10000MB = 10G</code>,这样系统不挂掉才怪，为了预防这种情况<code>bash</code>可以限制用户的某些系统资源，具体配置用<code>ulimit</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-H : 严格设置，必定不能超过这个设置的数值</div><div class="line">-S : 警告设置，可以超过这个数值，但若超过则有警告信息</div><div class="line">-a : 后面不接任何参数，可列出所有限制额度</div><div class="line">-c : 当某些进程发成错误时，系统可能会将进程在内存中的信息写成文件，这种文件成为内核文件。</div><div class="line">-f : 此SHELL可以创建的最大文件容量(一般设为2GB)单位KB</div><div class="line">-d : 进程可使用的最大断裂内存容量</div><div class="line">-l : 可用于锁定内存量</div><div class="line">-t : 可使用最大CPU时间</div><div class="line">-u : 单一用户可以使用的最大进程数量</div></pre></td></tr></table></figure>
<p><code>实战1：查看当前用户的所有限制数据值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/71746717.jpg" alt=""></p>
<p><code>实战2：限制用户仅仅能创建10MB容量以下的文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/80080741.jpg" alt=""></p>
<p><strong>3、一次执行多个命令 &amp;&amp; 、||</strong></p>
<p><code>场景：</code>很多命令我想要一次输入去执行，而不想分次执行。有两个办法，一个是编写<code>shell script</code>脚本去执行，另一个是一次性输入多重命令。</p>
<p><code>基本语法如下</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmd1 &amp;&amp; cmd2 --&gt; 若cmd1成功，$?(命令回传码)=0，则执行cmd2，反之cmd1失败，$?≠0，则cmd2不执行</div><div class="line"></div><div class="line">cmd1 || cmd2 --&gt; 若cmd1成功，$?(命令回传码)=0，则不执行cmd2，反之cmd1失败，$?≠0，则cmd2执行</div></pre></td></tr></table></figure>
<p><code>实战1：&amp;&amp;命令</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/3250026.jpg" alt=""></p>
<p><code>实战2：||命令,cmd1执行不成功，执行cmd2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/27649803.jpg" alt=""></p>
<p><code>实战3：||命令，cmd2执行成功，不执行cmd2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/78874389.jpg" alt=""></p>
<p><strong>4、选取命令cut、grep</strong></p>
<p><code>cut</code>命令，可以将一段信息的某一段切出来，处理的信息是以行为单位，基本语法<code>cut -d &#39;分隔字符&#39; -f &#39;第几段&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-d : 后面接分隔字符，与-f一起使用</div><div class="line">-f : 依据-d的分隔符将一段信息切割成为数段，用-f取出第几段的意思；</div><div class="line">-c : 以字符的单位取出固定字符区间</div></pre></td></tr></table></figure>
<p><code>实战1：将PATH变量取出，找出第5个路径</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/34433783.jpg" alt=""></p>
<p><code>实战2，将PATH变量取出，找出第3个和第5个路径</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/77994451.jpg" alt=""></p>
<p><code>grep命令</code>是分析一行信息，若当中有需要的信息，将该行拿出来，基本语法<code>grep [-acinv] [--color=auto] &#39;查找字符串&#39; filename</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-a : 将binary文件以text文件的方式查找数据</div><div class="line">-c : 计算找到&apos;查找字符串&apos;的次数</div><div class="line">-i : 忽略大小写的不同</div><div class="line">-v : 反向选择</div><div class="line">--color=auto : 可以将找到的关键字部分加上颜色；</div></pre></td></tr></table></figure>
<p><code>实战1：将last当中出现jianweilin的那一行取出来</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/64550336.jpg" alt=""></p>
<p><code>实战2：取出jianweilin那一行的第一列</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/56948030.jpg" alt=""></p>
<p><code>实战3：取出文件中包含console的行，并标红关键字</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/65838802.jpg" alt=""></p>
<p><strong>5、排序命令sort、wc、uniq</strong></p>
<p><code>sort</code>命令可以依据不同的数据类型来排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-f : 忽略大小写的差异</div><div class="line">-b : 忽略最前面的空格符部分</div><div class="line">-M : 以月份的名字来排序</div><div class="line">-n : 使用纯数字来进行排序</div><div class="line">-r : 反向排序</div><div class="line">-u : uniq，相同的数据中，仅出现一行代表</div><div class="line">-t : 分隔符</div><div class="line">-k : 以那个区间来进行排序</div></pre></td></tr></table></figure>
<p><code>实战1：利用last输出的数据，并加以排序</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/47905704.jpg" alt=""></p>
<p><code>实战2：1.log的内容，每行的数据以:分隔，按第2列来排序</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/77485521.jpg" alt=""></p>
<p><code>uniq</code>命令，将重复的数据仅列出一个显示<code>uniq [-ic]</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-i : 忽略大小写字符</div><div class="line">-c : 进行计数</div></pre></td></tr></table></figure>
<p><code>实战1：统计每个用户登录的总次数</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/83045345.jpg" alt=""></p>
<p><code>wc</code>命令，用于统计文件里有多少字，多少行，多少字符,基本语法<code>wc [-lwm]</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-l : 仅列出行</div><div class="line">-w : 仅列出多少字</div><div class="line">-m : 多少字符</div></pre></td></tr></table></figure>
<p><code>实战1：统计行数、单词数、字符数</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/17425650.jpg" alt=""></p>
<p><code>6、字符转换命令tr</code></p>
<p><code>tr</code>命令可以删除一段信息中的文字，并用其他文字信息进行替换。语法为<code>tr [-ds] set1  set</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-d ：删除信息中‘set1’字符串</div><div class="line">-s : 用‘set’字符串替换‘set1’</div></pre></td></tr></table></figure>
<p><code>实战1：将小写字符换成大写字符</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/38444009.jpg" alt=""></p>
<p><code>实战2：PATH路径，删除&#39;:&#39;</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/24188455.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Linux鸟哥的私房菜</li>
<li>Linux命令行与shell脚本编程大全</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux之常用命令]]></title>
      <url>http://jianwl.com/2016/10/15/Linux%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Linux命令非常多，我的策略是熟练掌握常用的命令，遇到不懂的用<code>man</code>命令查下即可。下面总结下常用的Linux命令。</p>
<h3 id="理论-amp-实战"><a href="#理论-amp-实战" class="headerlink" title="理论 &amp; 实战"></a>理论 &amp; 实战</h3><p><strong>1、cd命令</strong></p>
<p>用于切换当前名录</p>
<p><code>实战1：切换到上一层目录</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-15/12530934.jpg" alt=""></p>
<p><code>实战2：切换到下一层目录</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-15/95348529.jpg" alt=""></p>
<p><strong>2、ls命令</strong></p>
<p>查看文件与目录的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-l : 列出长数据串，包含文件的属性与权限数据等</div><div class="line">-a : 列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用） </div><div class="line">-d ：仅列出目录本身，而不是列出目录的文件数据</div><div class="line">-h ：将文件容量以较易读的方式（GB，kB等）列出来  </div><div class="line">-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</div></pre></td></tr></table></figure>
<p><code>实战1：查看当前文件下的所有文件，并显示文件属性和权限数据</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/32656794.jpg" alt=""></p>
<p><strong>3、grep命令</strong></p>
<p>用于一些命令的输出进行筛选</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-a ：将binary文件以text文件的方式查找数据  </div><div class="line">-c ：计算找到‘查找字符串’的次数</div><div class="line">-i ：忽略大小写的区别，即把大小写视为相同</div><div class="line">-v ：反向选择，即显示出没有‘查找字符串’内容的那一行</div></pre></td></tr></table></figure>
<p><code>实战1：检索Java文件夹</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/4322651.jpg" alt=""></p>
<p><code>实战2：统计名为Java文件夹的数量</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/85863738.jpg" alt=""></p>
<p><strong>4、find命令</strong></p>
<p><code>find</code>是一个基于查找的功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 与时间有关的参数：</div><div class="line">-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；</div><div class="line">-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；</div><div class="line">-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；</div><div class="line">-newer file : 列出比file还要新的文件名   </div><div class="line"></div><div class="line"># 与文件权限及名称有关的参数：</div><div class="line">-name filename ：找出文件名为filename的文件</div></pre></td></tr></table></figure>
<p><code>实战1：查找今天内改过的文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/93572660.jpg" alt=""></p>
<p><code>实战2：查找Work目录下的test.txt文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/49366537.jpg" alt=""></p>
<p><strong>5、cp命令</strong></p>
<p>复制文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-a ：将文件的特性一起复制</div><div class="line">-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</div><div class="line">-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行</div><div class="line">-r ：递归持续复制，用于目录的复制行为 </div><div class="line">-u ：目标文件与源文件有差异时才会复制</div></pre></td></tr></table></figure>
<p><code>实战1：复制文件若目标文件已存在，会询问是否覆盖</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/73728478.jpg" alt=""></p>
<p><strong>6、mv命令</strong></p>
<p>移动文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  </div><div class="line">-i ：若目标文件已经存在，就会询问是否覆盖  </div><div class="line">-u ：若目标文件已经存在，且比目标文件新，才会更新</div></pre></td></tr></table></figure>
<p><code>实战1：移动文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/42236280.jpg" alt=""></p>
<p><strong>7、rm命令</strong></p>
<p>删除文件或目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息 </div><div class="line">-i ：互动模式，在删除前会询问用户是否操作</div><div class="line">-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</div></pre></td></tr></table></figure>
<p><code>实战1：删除文件前，会询问用户是否删除</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/42206997.jpg" alt=""></p>
<p><strong>8、ps命令</strong></p>
<p>将某个时间点的进程运行情况选取下来并输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-A ：所有的进程均显示出来 </div><div class="line">-a ：不与terminal有关的所有进程</div><div class="line">-u ：有效用户的相关进程</div><div class="line">-x ：一般与a参数一起使用，可列出较完整的信息 </div><div class="line">-l ：较长，较详细地将PID的信息列出</div></pre></td></tr></table></figure>
<p><code>ps</code>命令常用搭配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps aux # 查看系统所有的进程数据</div><div class="line">ps ax # 查看不与terminal有关的所有进程 </div><div class="line">ps -lA # 查看系统所有的进程数据</div></pre></td></tr></table></figure>
<p><code>实战1：查看系统所有进程</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/17901898.jpg" alt=""></p>
<p><strong>9、kill命令</strong></p>
<p>向某个PID传送一个信号,基本语法如下：<code>kill -signal PID</code></p>
<p><code>signal常用参数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1：SIGHUP，启动被终止的进程  </div><div class="line">2：SIGINT，相当于输入ctrl+c，中断一个程序的进行  </div><div class="line">9：SIGKILL，强制中断一个进程的进行 </div><div class="line">15：SIGTERM，以正常的结束进程方式来终止进程 </div><div class="line">17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行</div></pre></td></tr></table></figure>
<p><code>实战1：杀死某个PID</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/64733197.jpg" alt=""></p>
<p><strong>10、file命令</strong></p>
<p>判断文件的基本数据，基本语法<code>file filename</code></p>
<p><code>实战1：确定文件的基本数据</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/47080888.jpg" alt=""></p>
<p><strong>11、tar命令</strong></p>
<p>对文件进行打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-c ：新建打包文件 </div><div class="line">-t ：查看打包文件的内容含有哪些文件名 </div><div class="line">-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中 </div><div class="line">-j ：通过bzip2的支持进行压缩/解压缩</div><div class="line">-z ：通过gzip的支持进行压缩/解压缩 </div><div class="line">-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来</div><div class="line">-f filename ：filename为要处理的文件</div><div class="line">-C dir ：指定压缩/解压缩的目录dir</div></pre></td></tr></table></figure>
<p><code>tar命令常用组合</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># tar包</div><div class="line">tar -cvf text_02.tar text_02.txt 压缩text_02.txt为text_02.tar</div><div class="line">tar -xvf text_02.tar 解压text_02.tar为text_02.txt</div><div class="line"> </div><div class="line"># tar.gz包</div><div class="line">tar -czf text_02.tar.gz text_02.txt 压缩text_02.txt为text_02.tar.gz</div><div class="line">tar -xzvf text_02.tar.gz 解压text_02.tar.gz为text_02.txt</div></pre></td></tr></table></figure>
<p><code>实战1：压缩为tar.gz包</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/44362048.jpg" alt=""></p>
<p><code>实战2：解压tar.gz包</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/7921494.jpg" alt=""></p>
<p><strong>12、chown命令</strong></p>
<p>用于改变文件的所有者，基本语法是<code>chown 用户:用户组 需要修改的文件名</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-c :显示更改的部分的信息</div><div class="line">-f :忽略错误信息</div><div class="line">-h :修复符号链接</div><div class="line">-R :处理指定目录以及其子目录下的所有文件</div><div class="line">-v :显示详细的处理信息</div></pre></td></tr></table></figure>
<p><code>实战1：改变test_02.txt文件的拥有者为root权限,用户组为staff</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/50637932.jpg" alt=""></p>
<p><code>实战2：改变test_02.txt文件的拥有者为jianweilin权限</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/49550628.jpg" alt=""></p>
<p><strong>13、chmod命令</strong></p>
<p>用于改变文件的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-c 当发生改变时，报告处理信息</div><div class="line">-f 错误信息不输出</div><div class="line">-R 处理指定目录以及其子目录下的所有文件</div><div class="line">-v 运行时显示详细处理信息</div><div class="line"></div><div class="line"># 权限范围</div><div class="line">u ：目录或者文件的当前的用户</div><div class="line">g ：目录或者文件的当前的群组</div><div class="line">o ：除了目录或者文件的当前用户或群组之外的用户或者群组</div><div class="line">a ：所有的用户及群组</div><div class="line"></div><div class="line"># 权限代号</div><div class="line">r ：读权限，用数字4表示</div><div class="line">w ：写权限，用数字2表示</div><div class="line">x ：执行权限，用数字1表示</div><div class="line">- ：删除权限，用数字0表示</div></pre></td></tr></table></figure>
<p><code>实战1：test_02.txt文件删除当前用户的读权限</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/14943806.jpg" alt=""></p>
<p><code>实战2：test_02.txt文件给当前用户及所有用户组加上写权限</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/13772423.jpg" alt=""><br>未完待续….</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Linux命令行与Shell脚本编程大全</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之日期函数运算]]></title>
      <url>http://jianwl.com/2016/10/13/MYSQL%E4%B9%8B%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常项目中，常常需要查询某个时间的数据，那么熟练运用<code>MYSQL</code>的日期函数就显得很有用了。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>场景1:获取当前时间</strong></p>
<p><code>方式1：获取年月日时分秒 -&gt; SELECT NOW()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/1444048.jpg" alt=""></p>
<p><code>方式2：获取年月日时分秒 -&gt; SELECT CURRENT_TIMESTAMP()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/92157935.jpg" alt=""></p>
<p><code>方式3: 获取年月日 -&gt; SELECT current_date()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/2987579.jpg" alt=""></p>
<p><code>方式4: 获取时分秒 -&gt; SELECT current_time()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/43833424.jpg" alt=""></p>
<p><strong>场景2:时间加法&amp;减法运算</strong></p>
<p><code>方式1: 增加天数 -&gt;  SELECT date_add(NOW(),interval &#39;1 01:01:01&#39; day_second)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/54720309.jpg" alt=""></p>
<p><code>方式2：增加小时 -&gt; SELECT date_add(NOW(),interval &#39;01:01:01&#39; hour_second)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/49340433.jpg" alt=""></p>
<p><code>方式3：增加月数 -&gt; SELECT date_add(now(),interval 1 month)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/82457234.jpg" alt=""></p>
<p><code>减法运算与加法运算相似,减少月数 -&gt; SELECT  date_sub(NOW(),interval 1 month)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/91908338.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://ylive.blog.51cto.com/881983/537257" target="_blank" rel="external">Mysql日期函数</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo报错Module version mismatch. Expected 47, got 46.]]></title>
      <url>http://jianwl.com/2016/10/13/Hexo%E6%8A%A5%E9%94%99Module-version-mismatch-Expected-47-got-46/</url>
      <content type="html"><![CDATA[<p>升级了Node.js后，发现在项目目录中执行hexo相关命令会报出错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[Error: Module version mismatch. Expected 47, got 46.]</div><div class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div></pre></td></tr></table></figure>
<p><code>解决方案：</code> </p>
<ol>
<li>执行<code>npm uninstall hexo</code>卸载<code>hexo</code>；</li>
<li>重新安装hexo，<code>npm install -g hexo</code>；</li>
<li>到博客目录执行<code>npm install</code>，<code>hexo clean</code>，<code>hexo generate</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之垃圾回收器]]></title>
      <url>http://jianwl.com/2016/10/10/Java%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>内存的动态分配与内存回收技术已相当成熟，那为什么我们还要去了解GC和内存分配呢？答案很简单，当需要排查各种内存溢出、内存泄露问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们需要对这些“自动化”的技术实施必要的监控和调节。</p>
<h3 id="垃圾回收器理论知识"><a href="#垃圾回收器理论知识" class="headerlink" title="垃圾回收器理论知识"></a>垃圾回收器理论知识</h3><p>要完成GC需要考虑以下三件事情：1.哪些内存需要回收？2.什么时候回收？3.如何回收？接下来会一一解答这些问题。</p>
<p><strong>哪些内存需要回收</strong></p>
<p>Java内存运行时，程序计数器、虚拟栈、本地方法栈这3个区域随线程生，随线程灭，每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知了，因此这几个区域的内存分配和回收都具备确定性，不需要过多考虑回收的问题，因为方法或线程结束了，内存自然就回收了。</p>
<p>而Java堆和方法区则不一样，一个方法中的多个分支需要的内存可能不一样，只有在运行期间时才知道会创建哪些对象，这部分内存的分配和回收都是动态的，是垃圾回收器关注的对象。</p>
<p><strong>什么时候回收</strong></p>
<p>没有被引用的对象将被GC回收。</p>
<p><strong>如何回收</strong></p>
<p><code>引用计数算法</code>：给对象添加一个引用计数器，每当一个地方引用它，计数器值就加1，当引用失效时，计数器值就减1，任何时刻计数器为0的对象就不可能再被使用了。</p>
<p>很多人都认为GC是这种回收策略，但实际上主流的Java虚拟机都没有使用<code>引用计数算法</code>，因为它难以解决循环引用的问题。</p>
<p>举个例子：对象A和对象B都有instance字段，<code>A.instance = B，B.instance = A</code>,这两个对象互相引用对方，导致他们的引用计数都不为0，如果GC使用引用计数算法，那么他们不会被回收。但实际呢？让我们来实践一下。</p>
<p><code>ReferenceCountingGC.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// VM args: -XX:+PrintGCDetails 用于输出GC的详细日志 </div><div class="line">public class ReferenceCountingGC &#123;</div><div class="line"></div><div class="line">    public Object instance = null;</div><div class="line">    private static final int _1MB = 1024 * 1024 ;</div><div class="line"></div><div class="line">    // 这个成员的唯一意义就是占点内存,以便能在GC日志中看清楚是否被回收过</div><div class="line">    private byte[] bigSize = new byte[2 * _1MB];</div><div class="line"></div><div class="line">    public static void testGC()&#123;</div><div class="line">        ReferenceCountingGC objA = new ReferenceCountingGC();</div><div class="line">        ReferenceCountingGC objB = new ReferenceCountingGC();</div><div class="line">        objA.instance = objB;</div><div class="line">        objB.instance = objA;</div><div class="line"></div><div class="line">        objA = null;</div><div class="line">        objB = null;</div><div class="line"></div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        testGC();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-10/83029188.jpg" alt=""></p>
<p><code>分析：</code></p>
<p>GC日志中包含<code>6758K -&gt; 496K</code>意味着虚拟机并没有因为对象互相引用就不回收他们，侧面说明虚拟机并不是通过引用算法来判断的。那虚拟机是中什么算法来回收的呢？</p>
<p><code>可达性分析算法</code></p>
<p>主流的Java虚拟机是用可达性分析来判断对象是否可回收的。基本思想是通过一系列<code>GC Roots</code>的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链。当一个对象到<code>GC Roots</code>没有任何引用链条相连，代表此对象可回收。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-10/72297953.jpg" alt=""></p>
<p>可作为<code>GC Roots对象</code>有：</p>
<ol>
<li>虚拟栈中引用对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>Native方法引用对象</li>
</ol>
<p><strong>引用</strong></p>
<p>在<code>JDK1.2</code>以前，一个对象只有引用和没有引用两种状态，<code>JDK1.2</code>之后，对引用概念进行扩充，将引用分为<code>强引用</code>、<code>软引用</code>、<code>弱引用</code>、<code>虚引用</code>4中，强度依次递减。</p>
<p><code>强引用</code>：类似于<code>Object a = new Object()</code>,只要强引用存在，垃圾回收器永远不会回收引用对象。</p>
<p><code>软引用</code>：描述一些有用，但并非必须的引用。在系统发生内存溢出异常之前，将会把这些对象回收，如果回收后还没有足够内存，才会抛出内存溢出异常。</p>
<p><code>弱引用</code>：描述非必需对象，弱引用关联对象只能生存到下一次垃圾收集器发生之前，当垃圾回收期工作时，无论当前内存是否足够，都会回收弱引用对象。</p>
<p><code>虚引用</code>：一个对象是否有虚引用，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。唯一的目的就是能够在这个对象被回收器回收时会收到系统通知。</p>
<p><code>引用实战</code></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解Java虚拟机</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之内存区域]]></title>
      <url>http://jianwl.com/2016/10/09/Java%E4%B9%8B%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于Java开发人员来说，由于在虚拟机自动内存管理机制的帮助下，不在需要为每一个<code>new</code>的对象去配对<code>free</code>代码，不容易出现内存泄露的问题，但一旦出现内存泄露方面的问题，如果不了解虚拟机是怎么使用内存的，那么排错误将会成为一项异常艰难的问题。接下来，让我们一起来学习虚拟机的内存分配。</p>
<h3 id="Java虚拟机运行时数据区"><a href="#Java虚拟机运行时数据区" class="headerlink" title="Java虚拟机运行时数据区"></a>Java虚拟机运行时数据区</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/69952506.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、 堆内存溢出报OutOfMemoryError</strong></p>
<p>限制Java堆最小值<code>-Xms</code>和最大值<code>-Xmx</code>为20M，避免自动扩展。通过参数<code>-XX:+HeapDumpOnOutOfMemoryError</code>可以让虚拟机在出现内存溢出时<code>Dump</code>出当前的内存堆转储快照以便之后分析。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// VM Args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</div><div class="line">public class HeapOOM &#123;</div><div class="line">    static class OOMObject&#123;&#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        while (true)&#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/10597433.jpg" alt=""></p>
<p><strong>2、栈内存溢出报StackOverFlowError</strong></p>
<p><code>实验1：</code></p>
<p>使用<code>-Xss</code>参数减少栈内存容量，结果:抛出<code>StackOverflowError</code>异常，异常出现时输出堆栈深度相应缩小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// VM Args: -Xss160k</div><div class="line">public class JavaVMStackSOF &#123;</div><div class="line">    private int stackLength = 1;</div><div class="line"></div><div class="line">    public void stackLeak()&#123;</div><div class="line">        stackLength ++;</div><div class="line">        stackLeak();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        JavaVMStackSOF oom = new JavaVMStackSOF();</div><div class="line">        try&#123;</div><div class="line">            oom.stackLeak();</div><div class="line">        &#125;catch (Throwable e)&#123;</div><div class="line">            System.out.println(&quot;stack length : &quot; + oom.stackLength);</div><div class="line">            throw e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/62380876.jpg" alt=""></p>
<p><code>实验2：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// VM args: -Xss4096M(不妨设大些)</div><div class="line">public class JavaVMStackOOM &#123;</div><div class="line">    private void dontStop()&#123;</div><div class="line">        while (true)&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void stackLeakByThread()&#123;</div><div class="line">        while (true)&#123;</div><div class="line">            Thread thread = new Thread(() -&gt; dontStop());</div><div class="line">            thread.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Throwable&#123;</div><div class="line">        JavaVMStackOOM oom = new JavaVMStackOOM();</div><div class="line">        oom.stackLeakByThread();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果:</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/93987125.jpg" alt=""></p>
<p><code>分析:</code><br>栈分配的内存越大，越容易出现内存溢出,其原因不难理解，操作系统分配给每个进程的内存是有限制的，譬如32的Windows限制为2GB，虚拟机提供参数来控制<code>JAVA</code>堆和方法区这两部分的最大内存。 <strong>剩余内存2G -&gt; 减去最大堆内存(Xmx) -&gt; 减去最大方法区容量(MaxPermSize) -&gt; 程序计数器消耗内存很小忽略 -&gt; 剩下就是虚拟栈和本地方法栈。</strong>栈越大，建立线程时越容易把剩下的内存耗尽。</p>
<p><strong>3、方法区和运行时常量池溢出</strong></p>
<p>String.intern()是一个Native方法，他的作用是如果字符串常量池中包含一个等于此String对象的字符串，则返回池中这个字符串的String对象，否则对象包含的字符串添加到常量池中，并返回String对象的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// JDK1.7前有效，到JDK1.8已移除永久代 </div><div class="line">// VM args: -XX:PermSize=10M -XX:MaxPermSize=10M</div><div class="line">public class RuntimeConstantPoolOOM &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 使用List保持着常量池引用,避免FULL GC回收常量池行为</div><div class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        // 10MB的PermSize在interger范围内足够产生OOM了</div><div class="line">        int i = 0;</div><div class="line">        while(true)&#123;</div><div class="line">            list.add(String.valueOf(i++).intern());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/63281885.jpg" alt=""></p>
<p><strong>4、直接内存溢出(DirectOutOfMemory)</strong></p>
<p><code>DirectMemory</code>容量可通过<code>-XX:MaxDirectMemorySize</code>指定，如果不指定，则默认与Java堆最大值一样。以下代码通过反射获取Unsafe实例进行内存分配，抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是<code>unsafe.allocateMemory()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// VM args: -Xmx20M -XX:MaxDirectMemorySize=10M</div><div class="line">public class DirectMemoryOOM &#123;</div><div class="line">    private static final int _1MB = 1024 * 1024 * 1024;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        Field unsaftField = Unsafe.class.getDeclaredFields()[0];</div><div class="line">        unsaftField.setAccessible(true);</div><div class="line">        Unsafe unsafe = (Unsafe) unsaftField.get(null);</div><div class="line">        while (true)&#123;</div><div class="line">            unsafe.allocateMemory(_1MB);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果:</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-10/69040604.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>深入理解Java虚拟机 – 周志明</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud之服务注册与发现]]></title>
      <url>http://jianwl.com/2016/10/08/SpringCloud%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="为什么要使用服务发现"><a href="#为什么要使用服务发现" class="headerlink" title="为什么要使用服务发现"></a>为什么要使用服务发现</h3><p>设想一下，我们的代码用<code>REST API</code>和<code>Thrift API</code>来调用服务，为了完成一次请求，代码需要知道服务实例的网络位置(IP地址和端口)，传统应用都运行在物理硬件上，服务实例的网络位置都是相对固定的，例如，代码可以从一个经常变更的配置文件中读取网络位置。</p>
<p>而对于一个现代的，基于微服务的应用来说，这却是一个麻烦的问题，架构如图所示。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/1336276.jpg" alt=""></p>
<p>服务实例的网络位置都是动态分配的，而且因为扩展、失效和升级需求，服务实例会经常动态改变，因为，客户端代码需要使用一种更加复杂的服务发现机制。</p>
<p>目前有两大类服务发现模式：<a href="http://microservices.io/patterns/client-side-discovery.html?utm_source=service-discovery-in-a-microservices-architecture&amp;utm_medium=blog" target="_blank" rel="external">客户端发现</a>和<a href="http://microservices.io/patterns/server-side-discovery.html?utm_source=service-discovery-in-a-microservices-architecture&amp;utm_medium=blog" target="_blank" rel="external">服务端发现</a></p>
<h3 id="客户端发现模式"><a href="#客户端发现模式" class="headerlink" title="客户端发现模式"></a>客户端发现模式</h3><p>当使用客户端发现模式时，客户端负责决定相应的服务实例的网络位置，并且对请求实现负责均衡。客户端从一个注册服务中查询，其中是所有可用服务实例的库,客户端使用负载均衡算法从多个服务实例中选择出一个，然后发出请求。架构如图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/13733713.jpg" alt=""></p>
<p>服务实例的网络位置是在启动时注册到服务注册表中，并且服务终止时从注册表中删除，服务实例注册信息一般使用心跳机制来定期刷新。</p>
<p><a href="https://netflix.github.io/" target="_blank" rel="external">Netflix OSS</a>提供了一种非常棒的客户端发现模式，<a href="https://github.com/Netflix/eureka" target="_blank" rel="external">Netflix Eureka</a>是一个注册服务表，为服务实例注册管理和查询可用实例，提供了REST API接口。<a href="https://github.com/Netflix/ribbon" target="_blank" rel="external">Netflix Ribbon</a>是一种IPC客户端，与Eureka合同工作实现对请求的负载均衡。</p>
<p><code>优点</code></p>
<p>除了服务注册表，没有其他改变的因素，客户端知道可用服务注册表信息，因此客户端可以使用哈希一直性变得更加聪明，更加有效的负载均衡。</p>
<p><code>缺点</code></p>
<p>需要针对不同的编程语言注册不同的服务，在客户端需要为每种语言开发不同的服务。</p>
<h3 id="服务端发现模式"><a href="#服务端发现模式" class="headerlink" title="服务端发现模式"></a>服务端发现模式</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/19412124.jpg" alt=""></p>
<p>客户端通过负载均衡器向各某个服务器提出请求，负载均衡器向服务注册表发出请求，将每个请求转发往可用的服务实例，跟客户端发现一样，服务实例在服务注册表中注册或注销。</p>
<p>AWS Elastic Load Balancer(ELB)是一种服务端发现路由的例子，ELB一般用于均衡从网络来的访问流量，也可以使用ELB来均衡VPC内部的流量，客户端使用DNS，通过ELB发出请求(HTTP或者TCP)，ELB负载均衡器负载在注册的EC2实例或者ECS容器之间均衡负载，并不存在一个分离的注册表，而EC2实例和ECS实例也想ELB注册。</p>
<p>HTTP服务和类似NGNIX和<a href="https://www.nginx.com/products/" target="_blank" rel="external">NGINX Plus</a>的负载均衡器都可以作为服务端发现均衡器，例如，<a href="https://www.airpair.com/scalable-architecture-with-docker-consul-and-nginx" target="_blank" rel="external">这篇博文</a>就描述如何使用<a href="https://github.com/hashicorp/consul-template" target="_blank" rel="external">Consul Template</a>来动态配置NGNIX反向代理。Consul Template是周期性从存放在Consul Template注册表中配合数据重建配置文件的工具。当文件发生变化时，会运行一个命令，在如何博客中，Consul Template产生了一个nginx.conf文件，用于配置反向代理，然后运行一个命令，告诉NGINX重新调入配置文件，更复杂的例子可以用HTTP API或者DNS动态重新配置NGINX Plus.</p>
<p>某些部署环境，例如<a href="https://github.com/kubernetes/kubernetes/blob/master/docs/design/architecture.md" target="_blank" rel="external">Kubernetes</a>和<a href="https://mesosphere.github.io/marathon/docs/service-discovery-load-balancing.html" target="_blank" rel="external">Marathon</a>在集群每个节点上运行一个代理，此代理作为服务端发现负载均衡器，为了向服务发出请求，客户端使用主机IP和分配的端口通过代理请求路由发出去，代理将次请求透明的转发到集群中可用的服务实例。</p>
<p><code>优点</code></p>
<p>客户端无需关注发现的细节，客户端只需简单的向负载均衡器发送请求，实际上减少了编程语言框架需要完成的发现逻辑。</p>
<p><code>缺点</code></p>
<p>除非部署环境提供负载均衡器，否则负载均衡器是另一个需要配置管理的高可用系统功能。</p>
<h3 id="服务注册表"><a href="#服务注册表" class="headerlink" title="服务注册表"></a>服务注册表</h3><p><a href="http://microservices.io/patterns/service-registry.html" target="_blank" rel="external">服务注册表</a>是服务发现很重要的部分，它是包含服务实例网络地址的数据库，服务注册表需要高可用而且随时更新，客户端可以缓存从服务注册表获得的网络地址，然而，这些信息最终会变得过时，客户端也无法服务实例。因此，服务注册表由若干使用复制协议保持同步的服务器构成。</p>
<p>如前所述，<a href="https://github.com/Netflix/eureka" target="_blank" rel="external">Netflix Eureka</a>是一个服务注册表很好地例子，提供了REST API注册和请求服务实例，服务实例使用POST请求注册网络地址，每30秒必须使用PUT方法更新注册表，使用HTTP DELETE请求或者实例超时来注销。客户端可以使用HTTP GET请求接受注册服务实例信息。</p>
<p>Netflix通过在每个AWS EC2域运行一个或者多个Eureka服务实现高可用性，每个Eureka服务器都运行在拥有弹性IP地址的EC2实例上，DNS TEXT记录用于存储Eureka集群配置，其中存放从可用域到一系列Eureka服务器网络地址的列表。当Eureka服务启动时，向DNS请求接受Eureka集群配置，确认同伴位置，给自己分配一个未被使用的弹性IP地址。</p>
<p>Eureka客户端 —&gt; 服务和服务客户端 —&gt; 向DNS请求发现Eureka服务的网络地址，客户端首选使用同一域内的服务。然而，如果没有可用服务，客户端会使用另外一个可用域的Eureka服务。</p>
<p>另外一些服务注册表例子包括：</p>
<ul>
<li><a href="https://github.com/coreos/etcd" target="_blank" rel="external">etcd</a> – 是一个高可用，分布式的，一致性的，键值表，用于共享配置和服务发现。两个著名案例包括Kubernetes和Cloud Foundry。</li>
<li><a href="https://www.consul.io/" target="_blank" rel="external">consul</a> – 是一个用于发现和配置的服务。提供了一个API允许客户端注册和发现服务。Consul可以用于健康检查来判断服务可用性。</li>
<li><a href="http://zookeeper.apache.org/" target="_blank" rel="external">Apache ZooKeeper</a> – 是一个广泛使用，为分布式应用提供高性能整合的服务。Apache ZooKeeper最初是Hadoop的子项目，现在已经变成顶级项目。</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>注册服务中心</strong></p>
<p>创建一个SpringBoot工程，并在<code>pom.xml</code>中引入需要依赖的内容</p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;springclouddemo&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">    &lt;name&gt;SpringCloudDemo&lt;/name&gt;</div><div class="line">    &lt;description&gt;SpringCloudDemo&lt;/description&gt;</div><div class="line"></div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;properties&gt;</div><div class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">    &lt;/properties&gt;</div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">            &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line">    &lt;dependencyManagement&gt;</div><div class="line">        &lt;dependencies&gt;</div><div class="line">            &lt;dependency&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">                &lt;version&gt;Brixton.RELEASE&lt;/version&gt;</div><div class="line">                &lt;type&gt;pom&lt;/type&gt;</div><div class="line">                &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">            &lt;/dependency&gt;</div><div class="line">        &lt;/dependencies&gt;</div><div class="line">    &lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><code>@EnableEurekaServer</code>注解启动一个服务注册中心提供给其他应用进行对话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableEurekaServer</div><div class="line">public class SpringCloudDemoApplication &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		new SpringApplicationBuilder(SpringCloudDemoApplication.class).web(true).run(args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在默认配置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用他的客户端注册行为。</p>
<p><code>application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server.port=1111</div><div class="line">eureka.client.register-with-eureka=false</div><div class="line">eureka.client.fetch-registry=false</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:$&#123;server.port&#125;/eureka/</div></pre></td></tr></table></figure>
<p>启动工程后，访问：<code>http:localhost:1111</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/4076123.jpg" alt=""></p>
<p><a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/SpringCloudDemo?dir=1&amp;filepath=SpringCloudDemo&amp;oid=7ea641a1decaf22920670bfb29e9e198b701def7&amp;sha=66fe516db609fdcb2d95a59d2930d970c2c1be82" target="_blank" rel="external">SpringCloudDemo项目链接</a></p>
<p><strong>创建服务提供方</strong></p>
<p><code>场景：</code> 假设我们有一个提供计算功能的微服务模块，我们实现一个RESTFUL API，通过传入两个参数<code>valueA</code>和<code>valueB</code>的微服务模块，我们实现一个RESTFUL API，通过传入两个参数<code>valueA</code>和<code>valueB</code>,最后返回<code>valueA + valueB</code>的结果。</p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;computeservice&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;ComputeService&lt;/name&gt;</div><div class="line">	&lt;description&gt;ComputeService&lt;/description&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;dependencyManagement&gt;</div><div class="line">		&lt;dependencies&gt;</div><div class="line">			&lt;dependency&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;Brixton.RELEASE&lt;/version&gt;</div><div class="line">				&lt;type&gt;pom&lt;/type&gt;</div><div class="line">				&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">			&lt;/dependency&gt;</div><div class="line">		&lt;/dependencies&gt;</div><div class="line">	&lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>实现<code>/add</code>请求处理接口，通过<code>DiscoveryClient</code>对象，在日志中打印出服务实例的相关内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class ComputeController &#123;</div><div class="line">    private static final Logger logger = LoggerFactory.getLogger(ComputeController.class);</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private DiscoveryClient client;</div><div class="line"></div><div class="line">    @RequestMapping(value = &quot;/add&quot;,method = RequestMethod.GET)</div><div class="line">    public Integer add(@RequestParam Integer valueA,@RequestParam Integer valueB)&#123;</div><div class="line">        ServiceInstance instance = client.getLocalServiceInstance();</div><div class="line">        Integer result = valueA + valueB;</div><div class="line">        logger.info(&quot;/add, host: &quot; + instance.getHost() + &quot; service_id : &quot; + instance.getServiceId() + &quot;, result: &quot; + result);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在主类中加上<code>@EnableDiscoveryClient</code>注解，该注解能激活Eureka中的<code>DiscoveryClient</code>实现，才能实现Controller中对服务信息的输出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">public class ComputeServiceApplication &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		new SpringApplicationBuilder(ComputeServiceApplication.class).web(true).run(args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 指定微服务名称后续在调用只需使用名称就可以进行服务访问了</div><div class="line">spring.application.name=compute-service</div><div class="line"></div><div class="line"># 为了在本机上测试区分服务提供方和服务注册中心，设置端口。</div><div class="line">server.port=2222</div><div class="line"></div><div class="line"># 服务注册中心的位置</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/</div></pre></td></tr></table></figure>
<p>启动工程后，再次访问：<code>http:localhost:1111/</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/98601009.jpg" alt=""></p>
<p>可以看到，我们定义的服务被注册了。</p>
<p><a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/ComputeService?dir=1&amp;filepath=ComputeService&amp;oid=8233018cf6b98106be981444bb5fe1ecf7d73630&amp;sha=66fe516db609fdcb2d95a59d2930d970c2c1be82" target="_blank" rel="external">ComputeService项目链接</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/?utm_source=deploying-microservices&amp;utm_medium=blog" target="_blank" rel="external">Service Discovery in a Microservices Architecture </a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[规划好技术路线，如何将想法落地?]]></title>
      <url>http://jianwl.com/2016/09/29/%E8%A7%84%E5%88%92%E5%A5%BD%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%EF%BC%8C%E5%A6%82%E4%BD%95%E5%B0%86%E6%83%B3%E6%B3%95%E8%90%BD%E5%9C%B0%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个工程师，多多少少都有自己的技术路线的规划，怎么这些规划落地，真正地去磨练技术，这是个值得思考的问题？本文介绍一个方法<code>三段分解法</code>，即：<code>将一个宏大或者长远的目标经过三次分解，得到一个个短期内能够达到的小目标。</code></p>
<p><code>Tips</code>: 以下内容引用于<code>阿里巴巴李运华</code>。</p>
<h3 id="正确的做法"><a href="#正确的做法" class="headerlink" title="正确的做法"></a>正确的做法</h3><p><strong>一段分解：瞄准目标</strong></p>
<p>我想10年成为大牛，这个目标虽然比较长远比较宏大，但并不意味着，我们在没有没有成为大牛之前，都是菜鸟。从菜鸟到大牛的过程中，中间其实有几个关键的里程碑，这些里程碑就是我们的一段目标。</p>
<p>以技术人员为例，技术人员典型的发展路径基本上都是下面的这个模式：</p>
<p>1）0 ~ 1年：菜鸟，需要别人手把手来教</p>
<p>2）1 ~ 3年：初级，需要别人带你做</p>
<p>3）3 ~ 5年：高级，能独当一面，可以带初级技术人员了</p>
<p>4）5 ~ 8年：资深，能独挡多面</p>
<p>5）8 ~ 10年：大牛，统筹规划，高屋建瓴</p>
<p>通过这种分解方法，再核对一下自己目前所处的位置，然后先瞄准下一个目标，全力以赴其实也就2 ~ 3年时间，这样来看一段目标其实是比较容易达成的。</p>
<p>这种目标分解的方法除了适合技术人员外，其它很多领域也都适应，比如说产品人员、运营人员、甚至公务员！</p>
<p><strong>二段分解：掌握技能</strong></p>
<p>经过一段分解后，明确自己目前所处的位置和下一个目标，接下来就要看这个一段目标如何实现了。虽然说每个一段目标持续时间在 2~3年，但3年时间说长不长，说短也不短，如果没有好好利用，可能到了2年多的时候回头一看，好像什么都没达成，还是原地踏步。因此，为了更好的利用这3年时间，我们需要进一步分解，这就是“二段分解”。</p>
<p>还是以技术人员为例，假设经过自我评估，认为自己目前处于初级阶段，而且初级阶段的事情已经做得比较顺手和熟练了，那么下一个一段目标自然就是达到“高级”水平。“高级”与“初级”相比，有哪些不同的技能要求呢？</p>
<p>这就需要我们根据各自不同的行业和方向详细列出来了，如果自己想不出来，网上有很多资料都可以搜索到，最方便的就是到一个招聘网站，多看看几个招聘需求的描述，然后归纳总结一下。</p>
<p>我们随便到网上搜索一个，例如达达的“高级Java开发工程师”招聘：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-29/17450031.jpg" alt=""></p>
<p>多看几个类似的职位招聘，基本上我们就能明白“高级Java开发工程师”的一些基本要求。当然实际上的技能要求比招聘需求的描述还要更加细致，我个人的习惯是将这些要求整理为一个思维导图，详细列出每个技术点。例如：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-29/45436716.jpg" alt=""></p>
<p>有了这样一个思维导图后，我们就可以开始真正进行二段分解了，分解的方法很简单：哪里不懂补哪里！例如：我感觉目前我的数据库水平一般，仅仅会写CRUD语句，其它的东西都不懂，那我就开始专攻数据库这一部分，经过一段时间的专攻来提升自己的水平。</p>
<p>二段目标持续时间一般建议是6个月，既不能太短也不能太长。太短容易让人陷入为了目标而做的误区，没有真正得到有效提升；时间太长的话，3年时间又不够完成其它目标了，例如要是我定一个目标说2年提升数据库，那操作系统怎么办？网络怎么办？……等等。以6个月为一个周期，基本上刚刚好。</p>
<p>经过分解，最终的二段目标可以分解为如下的几个更小的目标：</p>
<p>1）2016.06 ~ 2017.01：提升数据库水平</p>
<p>2）2017.01 ~ 2017.06：提升Linux水平</p>
<p>3）2017.06 ~ 2017.12：提升网络和网络编程水平</p>
<p>当然，二段分解目标并不是一成不变的，很多时候需要根据我们工作的内容进行调整。例如老大正好安排我来负责优化系统性能，降低机器负载，那么我完全可以将“提升Linux水平”安排到“提升数据库水平”之前。</p>
<p><strong>三段分解: 规划执行</strong></p>
<p>二段分解得到的小目标后，接下来关键就是要实现这个目标，这就是三段分解的主要目的，即，将技能目标分解为具体要做的事情，然后按计划执行。</p>
<p>比如说我的二段目标是“提升Linux水平”，那怎么样才能提升呢？可以上网搜索，也可以去问有经验的朋友。明确要做的事情后，三段分解需要将二段分解的6个月目标更加细化，分为1个月或者两个月一个目标。</p>
<p>以我当时加入UC的情况为例，我在华为的时候是在Windows平台上用VC6进行开发，而到了UC的时候是在Linux平台上用C++开发，我当时定了“提升Linux水平”的目标，然后通过上网查，找别人问等方法，最终将这个目标分解为几个步骤：</p>
<p>1）1个月：通读《UNIX环境高级编程》</p>
<p>2）1个月：通读《Linux系统编程》</p>
<p>3）2个月：通读《UNIX网络编程 卷1》</p>
<p>4）1个月：Linux常用命令实战：tcpdump、ps、top等</p>
<p>通过这种方法，将6个月的目标又进一步分解为1个月的目标，实施起来就简单多了，每1 ~ 2个月专注一个具体目标，每次完成后都很有成就感，既感觉自己的水平有了提升，又佩服自己能够坚持按计划按目标完成任务，双重奖赏让自己更有动力进行下一个目标。我大约花了2年的时间将Linux、网络、MySQL三个重点技能从一无所知提升到高级的水平，很多同事都问我之前在华为是不是就是做这方面的，因为他们觉得短时间能达到这个水平是不太可能的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综合前面的分析，我们将三段分解提炼一下：一段分解“等级”，二段分解“技能”，三段分解“行动”。</p>
<p>Tips:<code>学习时，尽量获取第一手资料，往后你会发现这样做是多么的正确。</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994070&amp;idx=1&amp;sn=7bd89e8d208b87a8c47b5b172cdc335d&amp;chksm=bdbf0dc58ac884d3de1640df97494ab50280dd350910445392c540ab7e7e4130d109b1d465d2&amp;scene=21#wechat_redirect" target="_blank" rel="external">技术人的小目标：10000小时理论落地，你就是大牛 – 阿里李运华</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天天写「业务代码」，如何成为「技术大牛」]]></title>
      <url>http://jianwl.com/2016/09/29/%E5%A4%A9%E5%A4%A9%E5%86%99%E3%80%8C%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E3%80%8D%EF%BC%8C%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E3%80%8C%E6%8A%80%E6%9C%AF%E5%A4%A7%E7%89%9B%E3%80%8D/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>「一直写业务代码，能够成长为技术大牛？」这也是我一直困惑的地方，今早在地铁上看到<code>阿里李运华</code>的这篇文章，感悟良多，现阶段的我，思维存在一定的误区，内心有些浮躁，梳理文章要点, 规划修炼之路，并将文中所提及的方法付诸实践。</p>
<p><code>Tips</code>: 以下内容引用于<code>阿里巴巴李运华</code>。</p>
<h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p><strong>拜大牛为师</strong></p>
<blockquote>
<p>知乎上有人认为想成为大牛最简单直接、快速有效的方式是拜团队技术大牛为师，让他们平时给你开小灶，给你分配一些有难度的工作。</p>
</blockquote>
<p>个人觉得这个方法不现实；</p>
<ol>
<li>大牛很忙，不太可能单独给你开小灶，更不可能每天都给你开一个小时的小灶。</li>
<li>因为第一个原因，所以一般找大牛，都是带着问题去请教或探讨。</li>
<li>大牛不多，不可能每个团队都有技术大牛，只能说团队里会有比你水平高的人，即使每天给你开小灶，最终你也只能提升到他的水平。</li>
</ol>
<p>综上所述的几个原因，对于大部分人来说，要想成为大牛，首先还是要明白“主要靠自己”。</p>
<p><strong>业务代码一样很牛逼</strong></p>
<blockquote>
<p>知乎上有人回答认为写业务代码一样可以很牛逼，理由是业务代码一样可以有各种技巧，日志记录好了问题，问题定位效率可以提升10倍…等等</p>
</blockquote>
<p>业务代码有技术含量这是肯定的，业务代码中的技术是每个程序员的基础，但只是掌握这些技巧，并不能成为技术大牛。就想游戏中升级打怪一样，开始打小怪，经验值很高，越到后面经验值越少，打小怪已经不能提升经验值了。这个时候就需要打一些更高级的怪，刷一些有挑战的副本了，没看到哪个游戏，只要一直打小怪就能升到顶级的。</p>
<p>成为技术大牛的路也类似，要不断提升自己的水平，然后面临更大的挑战，通过应对这些挑战从而使自己的水平更上一级。写业务代码只是打怪升级路上的一个挑战而已，而且是一个比较初级的挑战。</p>
<p>所以，业务代码都写不好的程序员肯定无法成为技术大牛，但只把业务代码写好的程序员也还不能成为技术大牛。</p>
<p><strong>上班太忙没时间自学</strong></p>
<blockquote>
<p>很多人认为自己没有成为技术大牛并不是自己不聪明，也不是自己不努力，而是中国的这个环境下，技术人员加班太多，导致自己没有额外的时间进行学习。</p>
</blockquote>
<p>有几个误区导致了这种想法</p>
<ol>
<li>上班做的都是重复工作，要想提升必须自己额外去学习</li>
<li>学习需要大段的连续时间，实际上做法正好相反，我们应该在工作中学习和提升，因为学以致用，或者有实例参考，学习的效果是最好的，其次工作后学习不需要打算时间，而是要挤出时间，利用时间碎片来学习。</li>
</ol>
<h3 id="正确的做法"><a href="#正确的做法" class="headerlink" title="正确的做法"></a>正确的做法</h3><p><strong>DO MORE</strong></p>
<p>1.<code>熟悉更多业务 &amp; 代码</code></p>
<p> 熟悉更多业务，不管是不是你负责的;熟悉更多代码，不管是不是你写的；</p>
<p> 2.<code>熟悉端到端</code></p>
<p> 比如说你负责后端web后台开发，但实际用户发起一个HTTP请求，要经过很多中间步骤才能到你的服务器(例如浏览器缓存、NDS、Nginx等)，但服务器一般又会经过很多处理才到你写的那部分代码(路由、权限等)这整个流程中的很多系统或者步骤，绝大部分人是不可能参与写代码的，但掌握这些知识对你的综合水平有很大的作用。</p>
<p>3.<code>自学</code></p>
<p>以<code>Java</code>为例，大部分业务代码就是<code>if-else</code>加个数据库操作，但我们完全可以自己学写更<code>java</code>的知识，例如垃圾回收、调优、网络编程等，这些可能暂时没用，但真要用的时候，不是Google一下就可以了，这个时候谁已经掌握了相关知识和技能，机会就是谁的。 </p>
<p>以垃圾回收为例，平时抽时间学习了这些知识，学了1年都没用上，但后来用上了几次，每次都解决了卡死的问题，而有的同学，写了几年的<code>java</code>代码，对于<code>stop-the-world</code>是什么概念都不知道，更不要说去优化了。</p>
<p>很多开源软件，更加需要自己平时去学，例如<code>Nignx、Redis、Mongodb、ElasticSearch等</code>在合适的时机引入这些技术，能够能够带来很大的价值。</p>
<p><strong>DO BETTER</strong></p>
<p>世界上没有完美的东西，你负责的系统和业务，总有不合理和可以改进的地方，这些不合理和可改进的地方，都是更高级别的怪物，打完后能够增加更多的经验值。识别出这些地方，并且给出解决方案。</p>
<p>例如：</p>
<ul>
<li>重复代码太多，是否可以引入设计模式？</li>
<li>系统系能一般，可否进行优化？</li>
<li>目前是单机，如果做成双机是否更好？</li>
<li>版本开发质量不高，是否引入高效的单元测试和集成测试方案？</li>
<li>目前的系统太庞大，是否可以通过重构和解耦改为3个系统？</li>
<li>阿里中间件有一些系统感觉我们也可以用，是否可以引入？</li>
</ul>
<p>只要你去想，其实总能发现可以改进得地方，如果你觉得系统哪里都没有改进的地方，那就说明你的水平还不够，可以多学习相关技术，多看看业界其他公司怎么做，BAT都怎么做。</p>
<p><strong>DO EXERCISE</strong></p>
<p>在执行过程中，发现确实做到了<code>DO MORE 、DO BETTER</code>,但光看不用效果很差，怎么办？</p>
<p>例如：</p>
<ul>
<li>学习了JVM的垃圾回收，但是线上比较少出现FGC导致的卡顿问题，就算出现了，恢复业务也是第一位的，不太可能线上出现问题然后让每个同学都去练一下手，那么怎么去实践这些JVM的只是和技能呢？</li>
<li>Netty我也看了，也了解了Reactor原理，但是我不可能参与Netty开发，怎么让自己真正掌握Reactor异步模式呢？</li>
<li>看了«高性能MySQL»，但是线上的数据库都是DBA管理的，测试环境的数据库感觉又是随便配置的，我怎么去验证这些技术呢？</li>
<li>框架封装了DAL层，数据库的访问我们都不需要操心，我们怎么去了解分库分表实现？</li>
</ul>
<p>诸如此类问题，总结下来就是三个词：<code>Learning</code>、<code>Trying</code>、<code>Teaching</code></p>
<p>1.<code>Learning</code></p>
<p>这是第一阶段，看书、Google、看视频、看别人的博客都可以，但要注意一点是<code>系统化</code>，特别是一些基础性的东西，例如JVM原理、Java编程、网络编程、HTTP协议等等，这些基础技术不能只通过Google或者博客学习，我的做法一般是先完整看完一本书全面的了解，然后在通过Google、视频、博客有针对性的查找一些有疑问的地方或者一些技巧。</p>
<p>2.<code>Trying</code></p>
<p><code>自己动手丰衣足食</code>，也就是自己去尝试搭建一些模拟环境，自己写一些测试程序。例如：</p>
<ul>
<li>JVM垃圾回收：可以自己写个简单的测试程序，分配内存不释放，然后调整各种JVM启动参数，在运行的过程使用Jstack、Jstat等命令查看JVM的堆内存分布和垃圾回收情况。</li>
<li>Reactor原理：自己真正尝试写一个Reactor模式的Demo，不要以为这个很难，简单的Reactor模式代码量不超过200行(可以参考Doug Lee的PPT)，自己写完后，再看看netty怎么做，一对比理解就更加深刻了。</li>
<li>MySQL:既然有线上的配置可以参考，那可以直接让DBA将线上配置发给我们，直接学习，然后搭建一个MySQL环境，用线上的配置启动；</li>
<li>框架封装了DAL层，可以自己用JDBC尝试去写一个分库分表的简单实现，然后与框架的实现进行对比，看看差异在哪里？</li>
<li>用浏览器的工具查看HTTP缓存实现，看看不同种类的网站、不同类型的资源，具体是如何控制缓存的，也可以自己用Python写一个简单的HTTP服务器，模拟返回各种HTTP Headers来观察浏览器的反应。</li>
</ul>
<p>真正想去实践，很多场景其实可以自己模拟，当然如果在实际工作中使用，效果会更好，毕竟线上的环境和业务服务度不是我们写个模拟程序就能够模拟的，但这样的机会可遇不可求，大部分情况，我们还真只能靠自己模拟，然后等到真正业务要用的时候，能够信手捏来。 </p>
<p>3.<code>Teaching</code></p>
<p>一般来说，经过Learning和Trying，能够掌握70%左右，但要到真正掌握，我觉得一定要做到能够跟别人讲清楚，因为在讲的时候，我们既需要将一个知识点系统化，也需要考虑各种细节，这会促使我们进一步思考和学习。同时，讲出来后看或听的人有不同的理解，或者有新的补充，相当于继续晚上整个知识技能体系。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994277&amp;idx=1&amp;sn=f0d3c25d805503264a78ab5eeb29044d&amp;chksm=bdbf0e368ac88720da10e901457fdbee77a90a426c20a3b95316fcbc6c8ab7b1afbd55950ad3&amp;mpshare=1&amp;scene=1&amp;srcid=0929Z1bTPNoOJWSebrDHoiwl#rd" target="_blank" rel="external">天天写「业务代码」，如何成为「技术大牛」 – 李运华</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程设计模式之保护性暂挂(Guarged Suspension)]]></title>
      <url>http://jianwl.com/2016/09/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%9A%82%E6%8C%82-Guarged-Suspension/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>多线程编程中，为了提高并发性，往往会将一个任务分解为不同的部分，将其交由不同的线程来执行。这些线程间互相协作时，仍然可能出现一个线程去等待另一个线程完成一定的操作，其自身才能继续运行的情形。好比，汽车行驶过程中油量不足时，司机只好到加油站等工作人员将油加满才能继续行驶。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>场景</strong></p>
<p>多线程获取共享资源需要条件时，这时候就需要用到保护性暂挂模式了。常见的例子是客户端与服务端的通信，客户端会不断的发送请求给服务端，服务端会不停的接受请求，假设我们用队列去存储请求，那么服务端就不能再队列为空的时候去接受请求，<code>这个是存取的条件 -- 队列不能为空</code></p>
<p><strong>数据模型：<code>Request.Java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Request &#123;</div><div class="line">    private final String name;</div><div class="line"></div><div class="line">    public Request(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;[ Request &quot; + name + &quot; ]&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>用<code>LinkedList</code>来存放<code>Request</code>：<code>RequestQueue.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class RequestQueue &#123;</div><div class="line">    private final LinkedList queue = new LinkedList();</div><div class="line"></div><div class="line">    public synchronized Request getRequest() &#123;</div><div class="line">        while (queue.size() &lt;= 0) &#123;</div><div class="line">            try &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot;: wait() begins, queue = &quot; + queue);</div><div class="line">                wait();</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot;: wait() ends, queue = &quot; + queue);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return (Request) queue.removeFirst();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void putRequest(Request request) &#123;</div><div class="line">        queue.addLast(request);</div><div class="line">        System.out.println(Thread.currentThread().getName() + &quot;: notifyAll() begins, queue = &quot; + queue);</div><div class="line">        notifyAll();</div><div class="line">        System.out.println(Thread.currentThread().getName() + &quot;: notifyAll() ends, queue = &quot; + queue);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>客户端不断发出请求：<code>ClientThread.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class ClientThread extends Thread &#123;</div><div class="line">    private Random random;</div><div class="line">    private RequestQueue requestQueue;</div><div class="line"></div><div class="line">    public ClientThread(RequestQueue requestQueue, String name, long seed) &#123;</div><div class="line">        super(name);</div><div class="line">        this.requestQueue = requestQueue;</div><div class="line">        this.random = new Random(seed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">                Request request = new Request(&quot;No.&quot; + i);</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot; requests &quot; + request);</div><div class="line">                requestQueue.putRequest(request);</div><div class="line">                Thread.sleep(random.nextInt(1000));</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>服务端检验队列是否为空，不为空才取，否则线程阻塞:<code>ServerThread.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class ServerThread extends Thread &#123;</div><div class="line">    private Random random;</div><div class="line">    private RequestQueue requestQueue;</div><div class="line"></div><div class="line">    public ServerThread(RequestQueue requestQueue, String name, long seed) &#123;</div><div class="line">        super(name);</div><div class="line">        this.requestQueue = requestQueue;</div><div class="line">        this.random = new Random(seed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">                Request request = requestQueue.getRequest();</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot; handles &quot; + request);</div><div class="line">                Thread.sleep(random.nextInt(1000));</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>主函数：Main.java</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 启动执行器</div><div class="line">        RequestQueue requestQueue = new RequestQueue();</div><div class="line">        Thread alice = new ClientThread(requestQueue, &quot;Alice&quot;, 314159L);</div><div class="line">        Thread bobby = new ServerThread(requestQueue, &quot;Bobby&quot;, 265358L);</div><div class="line">        alice.start();</div><div class="line">        bobby.start();</div><div class="line">        try &#123;</div><div class="line">            // 等待约10s</div><div class="line">            Thread.sleep(10000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;***** calling interrupt *****&quot;);</div><div class="line">        // 呼叫interrupt方法</div><div class="line">        alice.interrupt();</div><div class="line">        bobby.interrupt();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Java多线程编程实战指南 – 黄文海</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之不可变对象]]></title>
      <url>http://jianwl.com/2016/09/25/Java%E4%B9%8B%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>多线程共享变量的情况下，为了保证数据一致性，往往需要对这些变量的访问进行加锁。而锁本身又会带来一些问题和开销。<code>Immutable Object</code>使得我们可以在不使用锁的情况下，既保证共享变量访问的线程安全，又能避免锁引入带来的问题和开销。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li><strong>被建模对象的状态变化不频繁</strong></li>
<li><strong>同时对一组相关的数据进行写操作，需要保证原子性</strong></li>
<li><strong>使用某个对象作为安全的HashMap的Key</strong>，一个对象作为<code>HashMap</code>的Key被放入<code>HashMap</code>之后，若该对象状态变化导致了其<code>Hash Code</code>的变化，则会导致后面再同样的对象作为<code>Key</code>去<code>get</code>的时候无法获取关联的值，但由于不可变对象的状态不变，因此其<code>Hash Code</code>也不变。</li>
</ol>
<h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><ol>
<li>被建模对象的状态变更频繁，此时不见得不能使用不可变对象，只是状态变更需要频繁创建不可变对象，增加JVM垃圾回收。</li>
<li>防御性赋值，如果不可变对象本身包含一些状态需要对外暴露，而相应的字段本身又是可变的。那么返回这些字段的方法，还是需要做防御性复制，以避免外部代码修改了其内部的状态。</li>
</ol>
<h3 id="如何让类不可变"><a href="#如何让类不可变" class="headerlink" title="如何让类不可变"></a>如何让类不可变</h3><blockquote>
<p><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html" target="_blank" rel="external">JAVA文档，有关如何定义不可变类指南</a></p>
</blockquote>
<ol>
<li>不提供<code>setter</code>方法，setter方法用于修改属性和对象引用。这个原则阐述了在类定义的所有可变属性中，不提供setter方法，setter方法意味着你能够改变这个属性的状态，必须阻止提供setter方法。</li>
<li>所有的属性修饰添加<code>private</code>和<code>final</code>。这是另一种增加不可变的方式，属性声明为<code>private</code>为了在类之外不能够被访问到，final修饰符为了让你不能随便的改变他们。</li>
<li>不允许子类重写方法。最简单的方式声明类为final，final类不允许重写。</li>
<li>当属性中存在可变对象变量时，要特别留意。对象分为不可变和可变，当对象可变时，对可变对象的内容进行复制，并创建一个新对象赋值给它，这样保证可变对象的不可变。</li>
<li>定义一个private的构造方法，通过工厂方法构造对象。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>创建不可变类：ImmutableClass.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">package immutable;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">/**</div><div class="line">* Always remember that your instance variables will be either mutable or immutable.</div><div class="line">* Identify them and return new objects with copied content for all mutable objects.</div><div class="line">* Immutable variables can be returned safely without extra effort.</div><div class="line">* */</div><div class="line">public final class ImmutableClass</div><div class="line">&#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">    * Integer class is immutable as it does not provide any setter to change its content</div><div class="line">    * */</div><div class="line">    private final Integer immutableField1;</div><div class="line">    /**</div><div class="line">    * String class is immutable as it also does not provide setter to change its content</div><div class="line">    * */</div><div class="line">    private final String immutableField2;</div><div class="line">    /**</div><div class="line">    * Date class is mutable as it provide setters to change various date/time parts</div><div class="line">    * */</div><div class="line">    private final Date mutableField;</div><div class="line"></div><div class="line">    //Default private constructor will ensure no unplanned construction of class</div><div class="line">    private ImmutableClass(Integer fld1, String fld2, Date date)</div><div class="line">    &#123;</div><div class="line">        this.immutableField1 = fld1;</div><div class="line">        this.immutableField2 = fld2;</div><div class="line">        this.mutableField = new Date(date.getTime());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //Factory method to store object creation logic in single place</div><div class="line">    public static ImmutableClass createNewInstance(Integer fld1, String fld2, Date date)</div><div class="line">    &#123;</div><div class="line">        return new ImmutableClass(fld1, fld2, date);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //Provide no setter methods</div><div class="line"></div><div class="line">    /**</div><div class="line">    * Integer class is immutable so we can return the instance variable as it is</div><div class="line">    * */</div><div class="line">    public Integer getImmutableField1() &#123;</div><div class="line">        return immutableField1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">    * String class is also immutable so we can return the instance variable as it is</div><div class="line">    * */</div><div class="line">    public String getImmutableField2() &#123;</div><div class="line">        return immutableField2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">    * Date class is mutable so we need a little care here.</div><div class="line">    * We should not return the reference of original instance variable.</div><div class="line">    * Instead a new Date object, with content copied to it, should be returned.</div><div class="line">    * */</div><div class="line">    public Date getMutableField() &#123;</div><div class="line">        return new Date(mutableField.getTime());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return immutableField1 +&quot; - &quot;+ immutableField2 +&quot; - &quot;+ mutableField;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>验证以上为不可变类：MainTest.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">public class MainTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ImmutableClass im = ImmutableClass.createNewInstance(100, &quot;test&quot;, new Date());</div><div class="line">        System.out.println(im);</div><div class="line">        tryModification(im.getImmutableField1(), im.getImmutableField2(), im.getMutableField());</div><div class="line">        System.out.println(im);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void tryModification(Integer immutableField1, String immutableField2, Date mutableField) &#123;</div><div class="line">        immutableField1 = 10000;</div><div class="line">        immutableField2 = &quot;test changed&quot;;</div><div class="line">        mutableField.setDate(10);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<p>不可变对象包含(Integer、String、Date，其中Date为一个可变对象)，创建不可变对象后，更改入参的Date，并不会对不可变对象产生影响。故验证其为不可变对象类。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-25%20%E4%B8%8B%E5%8D%883.14.00.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://howtodoinjava.com/core-java/related-concepts/how-to-make-a-java-class-immutable/" target="_blank" rel="external">how-to-make-a-java-class-immutable</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html" target="_blank" rel="external">Java官方文档-不可变类</a> </li>
<li>Java多线程编程实战指南(设计模式篇) - 黄文海 </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java序列化]]></title>
      <url>http://jianwl.com/2016/09/24/Java%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="序列化是什么？"><a href="#序列化是什么？" class="headerlink" title="序列化是什么？"></a>序列化是什么？</h3><p>序列化是一种用来处理对象流的机制，所谓对象流就是将对象的内容进行流化，可以对流化后的对象进行读写操作，也可以将流化后的对象传输于网络之间。</p>
<p><code>序列化</code>：将数据分解成字节流，以便存储在文件中或在网络上传输。</p>
<p><code>反序列化</code>：打开字节流并重构对象。对象序列化不仅要将基本数据类型转换成字节表示，还有恢复数据的对象实例。</p>
<h3 id="序列化使用场景"><a href="#序列化使用场景" class="headerlink" title="序列化使用场景"></a>序列化使用场景</h3><ul>
<li>对象序列化可以实现分布式对象，如RMI要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象一样。</li>
<li><code>JAVA</code>对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。可以将整个对象层次写入字节流中，可以保存在文件中或网络连接上传递。利用对象序列化可以进行对象的深复制，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong> Employee序列化</strong></p>
<p><code>serialVersionUID序列化ID</code> ：序列化ID不同，对象是无法相互序列化和反序列化的。</p>
<p><code>transient</code> ： 在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Employee implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = -5310833892778578686L;</div><div class="line">    private String name;</div><div class="line">    private String address;</div><div class="line">    private transient Integer SSN;</div><div class="line">    private Integer number;</div><div class="line">	</div><div class="line">	// 此处省略Getter &amp; Setter 方法</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>将序列化对象赋值后存入文件中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class SerializeDemo &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Employee e = new Employee();</div><div class="line">        e.setAddress(&quot;上海&quot;);</div><div class="line">        e.setName(&quot;张三&quot;);</div><div class="line">        e.setSSN(123);</div><div class="line">        e.setNumber(123);</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            FileOutputStream fileOut = new FileOutputStream(&quot;/tmp/employee.ser&quot;);</div><div class="line">            ObjectOutputStream out = new ObjectOutputStream(fileOut);</div><div class="line">            out.writeObject(e);</div><div class="line">            out.close();</div><div class="line">            fileOut.close();</div><div class="line">            System.out.printf(&quot;Serialized data is saved in /tmp/employee.ser&quot;);</div><div class="line">        &#125; catch (IOException i) &#123;</div><div class="line">            i.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>查看存入文件中的序列化对象</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-24/99793188.jpg" alt=""></p>
<p><strong>从文件中反序列化字节码为Employee对象</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class DeserializeDemo &#123;</div><div class="line"></div><div class="line">   public static void main(String [] args) &#123;</div><div class="line">      Employee e = null;</div><div class="line">      try &#123;</div><div class="line">         FileInputStream fileIn = new FileInputStream(&quot;/tmp/employee.ser&quot;);</div><div class="line">         ObjectInputStream in = new ObjectInputStream(fileIn);</div><div class="line">         e = (Employee) in.readObject();</div><div class="line">         in.close();</div><div class="line">         fileIn.close();</div><div class="line">      &#125;catch(IOException i) &#123;</div><div class="line">         i.printStackTrace();</div><div class="line">         return;</div><div class="line">      &#125;catch(ClassNotFoundException c) &#123;</div><div class="line">         System.out.println(&quot;Employee class not found&quot;);</div><div class="line">         c.printStackTrace();</div><div class="line">         return;</div><div class="line">      &#125;</div><div class="line">      System.out.println(&quot;Employee&quot; + JSON.toJSONString(e));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>反序列化结果</strong></p>
<p>被声明为<code>transient</code>的<code>SSN</code>属性没有序列化，故没有反序列化出来。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-24/15700843.jpg" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>一个类进行序列化和反序列化其序列化ID必须一致，否则将出错。</li>
<li>子类实现序列化接口，父类未实现序列化接口，反序列化中，父类的属性与序列化不一致，解决办法，将父类也实现序列化接口。</li>
<li>对于对象中不需要序列化的属性前加<code>transient</code>关键字</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot中的事务管理]]></title>
      <url>http://jianwl.com/2016/09/23/SpringBoot%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在项目应用开发时，用户一个操作实际是对数据读写的多步操作的结合，由于数据操作在顺序执行的过程中，任何一步操作都有可能发生异常，异常会导致后续操作无法完成，此时由于业务逻辑并没有正确完成，之前成功操作数据并不可靠，需要在这种情况下进行回退。</p>
<h3 id="事务的作用"><a href="#事务的作用" class="headerlink" title="事务的作用"></a>事务的作用</h3><p>事务是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有异常发生就回退到事务刚开始未进行操作的状态；事务管理是Spring框架中最为常用的功能之一，我们在使用SpringBoot开发时，大部分情况下也都需要使用事务；</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>未完待续….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot中使用JavaMailSender发送邮件]]></title>
      <url>http://jianwl.com/2016/09/18/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8JavaMailSender%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用过Spring的开发者都知道Spring提供了非常好用的<code>JavaMailSender</code>接口实现邮件发送，在SpringBoot的Starter模块中也为此提供了自动化配置。</p>
<h3 id="实战1-发送简单邮件-项目的Git链接"><a href="#实战1-发送简单邮件-项目的Git链接" class="headerlink" title="实战1:发送简单邮件 项目的Git链接"></a>实战1:发送简单邮件 <a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/SpringMailSenderDemo?dir=1&amp;filepath=SpringMailSenderDemo&amp;oid=56c7fdd75afebd32f0bb1aa71da5349f0cd42d70&amp;sha=4940a0702b65b0ce4022441ad12f4be49824374e" target="_blank" rel="external">项目的Git链接</a></h3><p><strong>1.创建SpringBoot工程，并引入<code>spring-boot-starter-mail</code>依赖</strong></p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;springmailsenderdemo&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">    &lt;name&gt;SpringMailSenderDemo&lt;/name&gt;</div><div class="line">    &lt;description&gt;SpringMailSenderDemo&lt;/description&gt;</div><div class="line"></div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">        &lt;relativePath/&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;properties&gt;</div><div class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">    &lt;/properties&gt;</div><div class="line">	</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--mail--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">            &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><strong>2.在<code>application.properties</code>配置相应属性内容(注意替换<code>username</code> &amp; <code>password</code>)</strong></p>
<p><code>application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.mail.host=smtp.163.com</div><div class="line">spring.mail.username=username@163.com</div><div class="line">spring.mail.password=password</div><div class="line">spring.mail.properties.mail.smtp.auth=true</div><div class="line">spring.mail.properties.mail.smtp.starttls.enable=true</div><div class="line">spring.mail.properties.mail.smtp.starttls.required=true</div></pre></td></tr></table></figure>
<p><strong>3.单元测试实现简单一封邮件的发送</strong></p>
<p><code>MailTest.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class MailTest &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private JavaMailSender javaMailSender;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void sendSimpleMail()&#123;</div><div class="line">        SimpleMailMessage message = new SimpleMailMessage();</div><div class="line">        message.setFrom(&quot;soso_jwl@163.com&quot;);</div><div class="line">        message.setTo(&quot;soso_jwl@163.com&quot;);</div><div class="line">        message.setSubject(&quot;主题:这是一份测试邮件&quot;);</div><div class="line">        message.setText(&quot;测试邮件内容&quot;);</div><div class="line"></div><div class="line">        javaMailSender.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4.遇到的问题</strong></p>
<p>最开始用QQ邮箱来测试，<code>application.properties</code>中邮件服务器更改为<code>spring.mail.host=smtp.qq.com</code>,出现以下错误：<img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-18/24716938.jpg" alt=""></p>
<p><code>解决方案：</code>更改邮箱服务器为163的，用163邮箱测试。</p>
<p><strong>5.测试的结果</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-18/11547717.jpg" alt=""></p>
<h3 id="实战2：发送带附件的邮件"><a href="#实战2：发送带附件的邮件" class="headerlink" title="实战2：发送带附件的邮件"></a>实战2：发送带附件的邮件</h3><p><code>测试用例:MailTest.class</code></p>
<p>发送一份带两个附件的邮件耗时<code>2.5s</code>，每个附件为400k的照片。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class MailTest &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private JavaMailSender javaMailSender;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void sendAttachmentsMail() throws MessagingException &#123;</div><div class="line">        Long start = System.currentTimeMillis();</div><div class="line"></div><div class="line">        MimeMessage mimeMessage = javaMailSender.createMimeMessage();</div><div class="line"></div><div class="line">        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage,true);</div><div class="line">        helper.setFrom(&quot;soso_jwl@163.com&quot;);</div><div class="line">        helper.setTo(&quot;soso_jwl@163.com&quot;);</div><div class="line">        helper.setSubject(&quot;主题:这是带附件的测试邮件&quot;);</div><div class="line">        helper.setText(&quot;附件...&quot;);</div><div class="line"></div><div class="line">        FileSystemResource file = new FileSystemResource(new File(&quot;my.png&quot;));</div><div class="line">        helper.addAttachment(&quot;附件-1.png&quot;,file);</div><div class="line">        helper.addAttachment(&quot;附件-2.png&quot;,file);</div><div class="line"></div><div class="line">        javaMailSender.send(mimeMessage);</div><div class="line"></div><div class="line">        System.out.println(&quot;SPEND TIME ==&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>测试结果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-18/76088226.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot中使用@Async实现异步调用]]></title>
      <url>http://jianwl.com/2016/09/17/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8-Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="什么是异步调用"><a href="#什么是异步调用" class="headerlink" title="什么是异步调用"></a>什么是异步调用</h3><p><code>异步调用</code>对应的是<code>同步调用</code>，<code>同步调用</code>指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；<code>异步调用</code>指程序在顺序执行时，不等待异步调用返回的结果，就执行后面的程序了。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>案例1：同步调用</strong></p>
<p>创建三个处理函数分别模拟三个执行任务的操作，操作耗时随机取(10s内)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class Task &#123;</div><div class="line">    public static Random random =new Random();</div><div class="line"></div><div class="line">    public void doTaskOne() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务一&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务一，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void doTaskTwo() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务二&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务二，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void doTaskThree() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务三&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务三，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>测试方法：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class TaskTest &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private Task task;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void taskExec() throws Exception &#123;</div><div class="line">        task.doTaskOne();</div><div class="line">        task.doTaskTwo();</div><div class="line">        task.doTaskThree();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>执行结果:</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/44690361.jpg" alt=""></p>
<p><strong>案例2：异步调用</strong></p>
<p><code>在Spring Boot的主程序增加@EnableAsyn，为了让@Async注解生效</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@EnableAsync</div><div class="line">@SpringBootApplication</div><div class="line">public class SpringDemoApplication &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(SpringDemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>三个异步调用函数：AsyncTask.class</code></p>
<p>特别注意：@Async所修饰的函数不要定义为static类型，这样异步调用不会生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class AsyncTask &#123;</div><div class="line">    public static Random random =new Random();</div><div class="line"></div><div class="line">    @Async</div><div class="line">    public Future&lt;String&gt; doTaskOne() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务一&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务一，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line"></div><div class="line">        return new AsyncResult&lt;&gt;(&quot;任务一已完成!!!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Async</div><div class="line">    public Future&lt;String&gt; doTaskTwo() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务二&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务二，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">        return new AsyncResult&lt;&gt;(&quot;任务二已完成!!!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Async</div><div class="line">    public Future&lt;String&gt; doTaskThree() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务三&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务三，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">        return new AsyncResult&lt;&gt;(&quot;任务三已完成!!!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>执行的结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/20718204.jpg" alt=""></p>
<p><code>分析</code></p>
<p>对比<code>同步调用</code>和<code>异步调用</code>案例，很明显，异步调用让任务1、2、3并发执行，有效的减少了程序的总运行时间。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot使用AOP统一处理Web请求日志]]></title>
      <url>http://jianwl.com/2016/09/17/SpringBoot%E4%BD%BF%E7%94%A8AOP%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86Web%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Spring</code>有两个重要的特性一个是<code>IOC</code>,另一个<code>AOP</code>。<code>IOC</code>在Spring项目中被广泛使用，<code>AOP</code>却是一个盲点。今日初探<code>AOP</code>,深深感觉到它的强大。本文主要讲解在SpringBoot中引入Aop功能 &amp; 使用AOP做切面去统一处理Web请求日志。</p>
<h3 id="AOP是什么？"><a href="#AOP是什么？" class="headerlink" title="AOP是什么？"></a><code>AOP</code>是什么？</h3><p><code>AOP</code>为<code>Aspect Oriented Programming</code>的缩写，意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。<code>AOP</code>通过对既有程序定义一个切入点，然后在其前后切入不同的执行内容，比如常见的有：打开数据库连接 &amp; 关闭数据库连接 &amp; 打开事务 &amp; 关闭事务 &amp; 记录日志等。基于AOP不会破坏原来程序逻辑，因此它可以很好地对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<h3 id="实战-项目Git链接"><a href="#实战-项目Git链接" class="headerlink" title="实战 项目Git链接"></a>实战 <a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/SpringAopDemo?dir=1&amp;filepath=SpringAopDemo&amp;oid=006ff95faa36663be27ce9d0ae93f8058ec82901&amp;sha=4940a0702b65b0ce4022441ad12f4be49824374e" target="_blank" rel="external">项目Git链接</a></h3><p><strong>1.搭建本地SpringBoot项目</strong></p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springaopdemo&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;SpringAopDemo&lt;/name&gt;</div><div class="line">	&lt;description&gt;SpringAopDemo&lt;/description&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;!--lombok--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.16.10&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--fast json--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.17&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--springBoot--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--AOP--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--Log4j--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-log4j&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><code>Controller层：AdminController.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">@RequestMapping(value = &quot;/admin&quot;)</div><div class="line">public class AdminController &#123;</div><div class="line">    @RequestMapping(value = &quot;/info&quot;,method = RequestMethod.GET)</div><div class="line">    public String info(@RequestParam String username, @RequestParam String password)&#123;</div><div class="line">        return JSON.toJSONString(new Admin(username,password));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>数据模型:Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class Admin &#123;</div><div class="line">    private final String username;</div><div class="line">    private final String password;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，我们实现了一个简单请求处理，通入<code>username</code> &amp; <code>password</code>，返回<code>Admin</code>的JSON字符串。下面我们可以对上面的<code>/admin/info</code>请求，进行切面日志记录。</p>
<p><strong>Web层的日志切面</strong></p>
<p>SpringBoot中默认是开启AOP的，所以不需要增加<code>@EnableAspectJAutoProxy</code>注解。而当我们需要使用<code>CGLIB</code>来实现AOP的时候，需要配置<code>spring.aop.proxy-target-class=true</code>，不然默认使用的是标准<code>Java</code>的实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># AOP</div><div class="line">spring.aop.auto=true # Add @EnableAspectJAutoProxy.</div><div class="line">spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as</div><div class="line"> opposed to standard Java interface-based proxies (false).</div></pre></td></tr></table></figure>
<p><code>AOP切面的几个要素</code></p>
<ul>
<li><code>@Aspect</code>注解将Java类定义为切面类</li>
<li><code>@Pointcut</code>注解定义一个切入点，切入点的表达式筛选规则<code>execution(&lt;方法修饰符&gt; ? &lt;方法返回值类型&gt; &lt;包名&gt;.&lt;类名&gt;.&lt;方法名&gt;(&lt;参数类型&gt;) [throws &lt;异常类型&gt;]?)</code>;<br><code>*</code>代表0个或多个任意字符 &amp; 包名中<code>..</code>代表当前包及其子包 &amp; 参数列表中<code>..</code>代表任意个参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Pointcut(&quot;execution(public * com.dada.controller..*.*(..))&quot;)</div><div class="line">  public void webLog()&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>@Before</code>在切入点开始处切入内容</li>
<li><code>@After</code>在切入点结尾处切入内容</li>
<li><code>@AfterReturning</code>在切入点return内容之后，切入内容。可以对处理返回值做些加工处理</li>
<li><code>@Around</code>在切入点前后切入内容，并自己控制何时执行切入点自身的内容。</li>
<li><code>@AfterThrowing</code>用来处理当切入内容部分抛出异常之后的处理逻辑</li>
</ul>
<p><code>声明切面类：WebLogAspect.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@Aspect</div><div class="line">@Component</div><div class="line">public class WebLogAspect &#123;</div><div class="line">    private Logger logger = Logger.getLogger(getClass());</div><div class="line"></div><div class="line">    @Pointcut(&quot;execution(public * com.dada.controller..*.*(..))&quot;)</div><div class="line">    public void webLog()&#123;&#125;</div><div class="line"></div><div class="line">    @Before(&quot;webLog()&quot;)</div><div class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</div><div class="line">        // 接收到请求，记录请求内容</div><div class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</div><div class="line">        HttpServletRequest request = attributes.getRequest();</div><div class="line">        // 记录下请求内容</div><div class="line">        logger.info(&quot;URL : &quot; + request.getRequestURL().toString());</div><div class="line">        logger.info(&quot;HTTP_METHOD : &quot; + request.getMethod());</div><div class="line">        logger.info(&quot;IP : &quot; + request.getRemoteAddr());</div><div class="line">        logger.info(&quot;CLASS_METHOD : &quot; + joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName());</div><div class="line">        logger.info(&quot;ARGS : &quot; + Arrays.toString(joinPoint.getArgs()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</div><div class="line">    public void doAfterReturning(Object ret) throws Throwable &#123;</div><div class="line">        // 处理完请求，返回内容</div><div class="line">        logger.info(&quot;RESPONSE : &quot; + ret);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求”/admin/info”接口，得到以下日志信息：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/22783585.jpg" alt=""></p>
<h3 id="AOP切面中的同步问题"><a href="#AOP切面中的同步问题" class="headerlink" title="AOP切面中的同步问题"></a>AOP切面中的同步问题</h3><p>在WebLogAspect切面中，分别通过<code>doBefore</code> &amp; <code>doAfterReturning</code>两个独立函数实现了切点头部和切点返回后执行的内容，若我们想统计请求的处理时间，就需要在doBefore出记录时间，并在doAfterReturning处通过当前时间与开始处的时间计算得到请求处理的消耗时间。</p>
<p>那么我们是否可以在WebLogAspect切面中定义一个成员变量来给doBefore和doAfterReturning一起访问呢？是否会有同步问题呢？</p>
<p>直接在这里定义基本类型肯定会有同步问题，所以我们引入ThreadLocal对象，以这种方式记录，就可以解决同步的问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Aspect</div><div class="line">@Component</div><div class="line">public class WebLogAspect &#123;</div><div class="line">    private Logger logger = Logger.getLogger(getClass());</div><div class="line">    </div><div class="line">    ThreadLocal&lt;Long&gt; start = new ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    @Pointcut(&quot;execution(public * com.dada.controller..*.*(..))&quot;)</div><div class="line">    public void webLog()&#123;&#125;</div><div class="line"></div><div class="line">    @Before(&quot;webLog()&quot;)</div><div class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</div><div class="line">        start.set(System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</div><div class="line">    public void doAfterReturning(Object ret) throws Throwable &#123;</div><div class="line">        // 处理完请求，返回内容</div><div class="line">        logger.info(&quot;RESPONSE : &quot; + ret);</div><div class="line">        logger.info(&quot;SPEND TIME:&quot; + System.currentTimeMillis() - start.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AOP切面的优先级"><a href="#AOP切面的优先级" class="headerlink" title="AOP切面的优先级"></a>AOP切面的优先级</h3><p>由于通过AOP实现，程序得到了很好地解耦，但也会带来一些问题，比如我们可能会对Web层做多个切面，校验用户，校验头信息等等，这个时候会碰到切面的处理顺序问题。</p>
<p>所以，我们需要定义每个切面的优先级，我们需要<code>@Order(i)</code>注解来标识切面的优先级，i的值越小，优先级越高。假设我们还有一个切面是<code>CheckNameAspect</code>用来校验name必须是liuyun，我们为其设置<code>@Order(10)</code>,而上文中WebLogAspect设置为<code>@Order(5)</code>所以WebLogAspect有更高的优先级，这个时候的执行顺序是这样的；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@Before中`@Order(5)`的内容 -&gt; @Before中`@Order(10)`的内容 -&gt; `@After`和`@AfterReturning`中`@Order(10)`的内容 -&gt; `@After`和`@AfterReturning`中`@Order(5)`的内容</div></pre></td></tr></table></figure>
<p>故得到这样的结论:</p>
<ul>
<li>切入点前的操作，按Order的值由小到大执行；</li>
<li>切入点后的操作，按Order的值由大到小执行；</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit入门]]></title>
      <url>http://jianwl.com/2016/09/17/Retrofit%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a><code>Retrofit</code>简介</h3><p><code>Retrofit</code>是<code>Square</code>公司开发的一个类型安全的<code>Java</code> &amp; <code>Android</code>的<code>REST</code>客户端库，这个库为网路认证、API请求以及用<code>OkHttp</code>发送网络请求提供了强大的框架。<code>Retrofit</code>库使得从<code>Web API</code>下载<code>JSON</code> 或者 <code>XML</code>数据变得非常简单直接，一旦数据下载完成即将其解析成普通的<code>Java</code>类(<code>POJO</code>).</p>
<p><code>Retrofit</code>使用的最核心的两个技术是：动态代理和<code>Java</code>反射。<code>Retrofit</code>非常巧妙的用注解来描述<code>HTTP</code>请求，将一个<code>HTTP</code>请求抽象成一个<code>Java</code>接口，然后用<code>Java</code>动态代理的方式，动态的将这个接口的注解“解释”成一个<code>HTTP</code>请求，最后在执行这个HTTP请求。</p>
<p><code>Retrofit</code>无非是让用户创建接口，并在接口中指定网络访问路径、规则，把接口传入<code>Retrofit</code>；<code>Retrofit</code>进行解析，然后调用<code>OkHttp</code>完成实际的网络请求并将请求结果处理后返回给用户。</p>
<p>另：<code>Retrofit</code>支持<code>Java 7</code>或<code>Android2.3</code>以上版本</p>
<h3 id="Retrofit优势"><a href="#Retrofit优势" class="headerlink" title="Retrofit优势"></a><code>Retrofit</code>优势</h3><ol>
<li>底层使用<code>OkHttp</code>进行网络传输，性能好、速度快</li>
<li>拥有出色的<code>API</code>文档和社区支持</li>
<li>自动将<code>REST API</code>返回的数据转化为<code>Java</code>对象，且支持多种数据格式转换(<code>JSON</code>、<code>XML</code>…) </li>
<li>使用<code>Java</code>注解声明<code>HTTP</code>请求</li>
<li>支持<code>Multipart</code>请求和文件上传</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1.搭建本地测试服务,以<code>SpringBoot</code>框架为例</strong></p>
<p><code>Controller层：AdminController.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">@RequestMapping(value = &quot;/admin&quot;)</div><div class="line">public class AdminController &#123;</div><div class="line">    @RequestMapping(value = &quot;/get&quot;,method = RequestMethod.GET)</div><div class="line">    public JsonResult&lt;Admin&gt; get(@RequestParam String name, @RequestParam String password)&#123;</div><div class="line">        return JsonResult.ok(new Admin(name,password));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>对象模型: Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 注： @Data为lombok插件注解，表示Getter &amp; Setter 方法，声明为final类型的属性为构造方法属性，详情可以参考[lombok官网](https://projectlombok.org/) </div><div class="line"></div><div class="line">@Data</div><div class="line">public class Admin &#123;</div><div class="line">    private final String name;</div><div class="line">    private final String password;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>工具类:JsonResult.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class JsonResult&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    private boolean success;</div><div class="line"></div><div class="line">    @JsonInclude(JsonInclude.Include.NON_NULL)</div><div class="line">    private T data;</div><div class="line"></div><div class="line">    @JsonInclude(JsonInclude.Include.NON_NULL)</div><div class="line">    private Integer errorCode;</div><div class="line"></div><div class="line">    @JsonInclude(JsonInclude.Include.NON_NULL)</div><div class="line">    private String errorMessage;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; ok() &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setSuccess(true);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; ok(T data) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setSuccess(true);</div><div class="line">        result.setData(data);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error(Code code) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(code.getCode());</div><div class="line">        result.setErrorMessage(code.getMessage());</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error(String message) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(SERVER_ERROR.getCode());</div><div class="line">        result.setErrorMessage(message);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error() &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(SERVER_ERROR.getCode());</div><div class="line">        result.setErrorMessage(SERVER_ERROR.getMessage());</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error(Integer code ,String message) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(code);</div><div class="line">        result.setErrorMessage(message);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>错误常量枚举：Code.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 注: @Getter 为lombok插件注解 功能与Getter方法等价</div><div class="line">@Getter</div><div class="line">public enum Code &#123;</div><div class="line">    // 基础响应码</div><div class="line">    SERVER_ERROR(1, &quot;服务异常&quot;),</div><div class="line">    BASE_NOT_FOUND(2, &quot;资源不存在&quot;),</div><div class="line">    BASE_UNAUTHORIZED(3, &quot;未授权&quot;),</div><div class="line">    BASE_FORBIDDEN(4, &quot;拒绝访问&quot;),</div><div class="line">    BASE_BAD_PARAMS(5, &quot;请求参数错误&quot;);</div><div class="line"></div><div class="line">    private int code;</div><div class="line">    private String message;</div><div class="line"></div><div class="line">    Code(int code, String message) &#123;</div><div class="line">        this.message = message;</div><div class="line">        this.code = code;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. Retrofit运用实例</strong></p>
<p><code>将网络请求API转换为一个Java接口: UserApi.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface AdminApi &#123;</div><div class="line">    @GET(&quot;/admin/get&quot;)</div><div class="line">    Call&lt;JsonResult&lt;Admin&gt;&gt; get(@Query(&quot;name&quot;) String name, @Query(&quot;password&quot;) String password);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Retrofit生成UserApi接口实现 &amp; 创建同步远程请求:RetrofitBootStrap.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RetrofitBootStrap &#123;</div><div class="line">    private static final String LOCAL_HOST = &quot;http://127.0.0.1:8080&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Retrofit retrofit = new Retrofit.Builder().baseUrl(LOCAL_HOST)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        // retrofit生成UserApi接口实现</div><div class="line">        UserApi service = retrofit.create(AdminApi.class);</div><div class="line"></div><div class="line">        Call&lt;JsonResult&lt;Admin&gt;&gt; postMsg = service.get(&quot;zhangsan&quot;, &quot;123456&quot;);</div><div class="line">        try &#123;</div><div class="line">            // 创建同步远程请求</div><div class="line">            System.out.println(JSON.toJSONString(postMsg.execute().body()));</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.执行步骤</strong></p>
<ol>
<li>启动<code>SpringBoot</code>，将本地测试服务开启来；</li>
<li>执行<code>RetrofitBootStrap.class</code>的<code>main</code>方法，请求本地测试服务的<code>/admin/get的请求路径接口</code>，得到相应结果为：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/72733150.jpg" alt=""></li>
</ol>
<h3 id="Retrofit知识点"><a href="#Retrofit知识点" class="headerlink" title="Retrofit知识点"></a>Retrofit知识点</h3><p><strong>注解</strong></p>
<p><code>案例1：GET请求路径带路径参数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</div><div class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) Integer groupId);</div></pre></td></tr></table></figure>
<p><code>案例2：GET请求，带查询参数；类似于Spring中的@RequestParam注解</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;group/user&quot;)</div><div class="line">Call&lt;List&lt;User&gt;&gt; getUser(@Query(&quot;name&quot;) String name);</div></pre></td></tr></table></figure>
<p><code>案例3: POST请求，参数是一个对象，类似于Spring中的@RequestBody注解</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@POST(&quot;/users/new&quot;)</div><div class="line">Call&lt;User&gt; createUser(@Body User user);</div></pre></td></tr></table></figure>
<p><code>案例4: 请求内容类型为</code>form-encoded<code>格式</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//每一个key-value键值对用@Field表示 </div><div class="line">@FormUrlEncoded</div><div class="line">@POST(&quot;user/edit&quot;)</div><div class="line">Call&lt;User&gt; updateUser(@Field(&quot;firstName&quot;) String first,@Field(&quot;lastName&quot;) String last);</div></pre></td></tr></table></figure>
<p><code>案例5：声明请求头参数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 单个请求头参数</div><div class="line">@Headers(&quot;Cache-Control: max-age=640000&quot;)</div><div class="line">@GET(&quot;widget/list&quot;)</div><div class="line">Call&lt;List&lt;Widget&gt;&gt; widgetList();</div><div class="line"></div><div class="line">// 多个请求头参数</div><div class="line">@Headers(&#123;</div><div class="line">    &quot;Accept: application/vnd.github.v3.full+json&quot;,</div><div class="line">    &quot;User-Agent: Retrofit-Sample-App&quot;</div><div class="line">&#125;)</div><div class="line">@GET(&quot;users&quot;)</div><div class="line">Call&lt;User&gt; getUser();</div><div class="line"></div><div class="line">// 参数中带请求头</div><div class="line">@GET(&quot;user&quot;)</div><div class="line">Call&lt;User&gt; getUser(@Header(&quot;Authorization&quot;) String authorization)</div></pre></td></tr></table></figure>
<p><strong>转化器</strong></p>
<p>默认情况下，<code>Retrofit</code>只能反序列化<code>HTTP</code>的<code>Body</code>到<code>okhttp</code>的<code>ResponseBody</code>，并且<code>@Body</code>注解只能接收<code>RequestBody</code>的类型数据。</p>
<p>转换器可以被添加来支持其它类型。下面是6个流行的序列化库来方便操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Gson: com.squareup.retrofit2:converter-gson</div><div class="line">Jackson: com.squareup.retrofit2:converter-jackson</div><div class="line">Moshi: com.squareup.retrofit2:converter-moshi</div><div class="line">Protobuf: com.squareup.retrofit2:converter-protobuf</div><div class="line">Wire: com.squareup.retrofit2:converter-wire</div><div class="line">Simple XML: com.squareup.retrofit2:converter-simplexml</div></pre></td></tr></table></figure>
<p><code>案例：新增Gson转换器</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder().baseUrl(LOCAL_HOST)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://square.github.io/retrofit/" target="_blank" rel="external">retrofit官网</a></li>
<li><a href="https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/" target="_blank" rel="external">用Retrofit2简化HTTP请求</a></li>
<li><a href="https://my.oschina.net/purplesense/blog/650123" target="_blank" rel="external">Retrofit介绍</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA技能树]]></title>
      <url>http://jianwl.com/2016/09/16/JAVA%E6%8A%80%E8%83%BD%E6%A0%91/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 常常问自己，一个合格的工程师应该掌握哪些技能？技术之海太大，时间有限，精力有限，不能遍历；最好的方式是，选取一个方向做深，之后再增加广度，做一个T字型工程师。那对于JAVA工程师，需要掌握哪些必备技能呢？经过调研总结如下，记录下来，时刻鞭策自己，不断学习。</p>
<h3 id="JVM-基础篇"><a href="#JVM-基础篇" class="headerlink" title="JVM (基础篇)"></a>JVM (基础篇)</h3><p><strong>1.1 Java内存模型、Java内存管理、Java堆和栈、垃圾回收</strong></p>
<blockquote>
<p>参考链接：</p>
<p><a href="http://ifeve.com/jmm-faq/" target="_blank" rel="external">Java内存模型FAQ</a></p>
<p><a href="https://www.jcp.org/en/jsr/detail?id=133" target="_blank" rel="external">官方JCP</a></p>
</blockquote>
<p><strong>1.2 了解JVM各种参数及调优</strong></p>
<p><strong>1.3 学习使用Java工具</strong></p>
<blockquote>
<p>jps, jstack, jmap, jconsole, jinfo, jhat, javap, …</p>
<p><a href="http://kenai.com/projects/btrace" target="_blank" rel="external">http://kenai.com/projects/btrace</a></p>
<p><a href="http://www.crashub.org/" target="_blank" rel="external">http://www.crashub.org/</a></p>
<p><a href="https://github.com/taobao/TProfiler" target="_blank" rel="external">https://github.com/taobao/TProfiler</a></p>
<p><a href="https://github.com/CSUG/HouseMD" target="_blank" rel="external">https://github.com/CSUG/HouseMD</a></p>
<p><a href="http://wiki.cyclopsgroup.org/jmxterm" target="_blank" rel="external">http://wiki.cyclopsgroup.org/jmxterm</a></p>
<p><a href="https://github.com/jlusdy/TBJMap" target="_blank" rel="external">https://github.com/jlusdy/TBJMap</a></p>
</blockquote>
<p><strong>1.4 学习Java诊断工具</strong></p>
<blockquote>
<p><a href="http://www.eclipse.org/mat/" target="_blank" rel="external">http://www.eclipse.org/mat/</a></p>
<p><a href="http://visualvm.java.net/oqlhelp.html" target="_blank" rel="external">http://visualvm.java.net/oqlhelp.html</a></p>
</blockquote>
<p><strong>1.5 自己编写各种outofmemory,stackoverflow程序</strong></p>
<blockquote>
<p>HeapOutOfMemory</p>
<p>Young OutOfMemory</p>
<p>MethodArea OutOfMemory</p>
<p>ConstantPool OutOfMemory</p>
<p>DirectMemory OutOfMemory</p>
<p>Stack OutOfMemory Stack OverFlow</p>
</blockquote>
<p><strong>1.6 使用工具尝试解决一下问题，并写下总结</strong></p>
<blockquote>
<p>当一个Java程序响应很慢时，如何查找问题；</p>
<p>当一个Java程序频繁FullGC时，如何解决问题，如何查看垃圾回收日志</p>
<p>当一个Java应用发生OutOfMerrory时该如何解决，年轻代、年老代、永久代解决办法不同，导致原因也不同</p>
<p>参考资料：</p>
<p><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/" target="_blank" rel="external">http://docs.oracle.com/javase/specs/jvms/se7/html/</a></p>
<p><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/" target="_blank" rel="external">http://www.cs.umd.edu/~pugh/java/memoryModel/</a></p>
<p><a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html" target="_blank" rel="external">http://gee.cs.oswego.edu/dl/jmm/cookbook.html</a></p>
<p><a href="http://www.guru99.com/java-virtual-machine-jvm.html" target="_blank" rel="external">http://www.guru99.com/java-virtual-machine-jvm.html</a></p>
</blockquote>
<h3 id="JAVA基础知识"><a href="#JAVA基础知识" class="headerlink" title="JAVA基础知识"></a>JAVA基础知识</h3><p><strong>2.1 阅读源代码</strong></p>
<blockquote>
<p><code>java.lang.String</code> <code>java.lang.Integer</code> <code>java.lang.Long</code> <code>java.lang.Enum</code> <code>java.math.BigDecimal</code> <code>java.lang.ThreadLocal</code> <code>java.lang.ClassLoader</code>  <code>java.net.URLClassLoader</code> <code>java.util.ArrayList</code>  <code>java.util.LinkedList</code> <code>java.util.HashMap</code>  <code>java.util.LinkedHashMap</code> <code>java.util.TreeMap</code> <code>java.util.HashSet</code> <code>java.util.LinkedHashSet</code> <code>java.util.TreeSet</code></p>
</blockquote>
<p><strong>2.2 熟悉Java中各种变量类型</strong></p>
<p><strong>2.3 熟悉Java String的使用，熟悉String的各种函数</strong></p>
<p><strong>2.4 熟悉Java中各种关键字</strong></p>
<p><strong>2.5 学会使用List、Map、Stack、Queue、Set</strong></p>
<blockquote>
<p>上述数据结构的遍历、排序、去重；</p>
</blockquote>
<p><strong>2.6 Java IO &amp; Java NIO,并使用</strong></p>
<blockquote>
<p><code>java.io.*</code> <code>java.nio.*</code>nio和reactor设计模式 文件编码 字符集</p>
</blockquote>
<p><strong>2.7 Java反射 &amp; javassist</strong></p>
<blockquote>
<p>反射与工厂模式 <code>java.lang.reflect.*</code></p>
</blockquote>
<p><strong>2.8 Java序列化</strong></p>
<blockquote>
<p><code>java.io.Serializable</code> 什么是序列化，为什么序列化 序列化与单例模式 google序列化protobuf</p>
</blockquote>
<p><strong>2.9 虚引用、弱引用、软引用</strong></p>
<blockquote>
<p><code>java.lang.ref.*</code>实验这里引用的回收;</p>
</blockquote>
<p><strong>2.10 熟悉Java系统属性</strong></p>
<blockquote>
<p><code>java.util.Properties</code></p>
</blockquote>
<p><strong>2.11 熟悉Annotation用法</strong></p>
<blockquote>
<p><code>java.lang.annotation.*</code></p>
</blockquote>
<p><strong>2.12 JMS</strong></p>
<blockquote>
<p><code>javax.jms.*</code></p>
</blockquote>
<p><strong>2.13 JMX</strong></p>
<blockquote>
<p><code>java.lang.management.*</code> <code>javax.management.*</code></p>
</blockquote>
<p><strong>2.14 泛型和继承，泛型和擦除</strong></p>
<p><strong>2.15 自动拆箱装箱与字节码</strong></p>
<p><strong>2.16 实现Callback</strong></p>
<p><strong>2.17 java.lang.Void类使用</strong></p>
<p><strong>2.18 java Agent premain函数</strong></p>
<blockquote>
<p><code>java.lang.instrument</code></p>
</blockquote>
<p><strong>2.19 单元测试</strong></p>
<blockquote>
<p><a href="http://junit.org/" target="_blank" rel="external">Junit</a></p>
<p><a href="https://code.google.com/p/jmockit/" target="_blank" rel="external">Jmockit</a></p>
<p><a href="http://works.dgic.co.jp/djunit/" target="_blank" rel="external">djUnit</a></p>
</blockquote>
<p><strong>2.20 Java实现通过正则表达式提取一段文本中的电子邮件，并将@替换为#输出</strong></p>
<blockquote>
<p><code>java.lang.util.regex.*</code></p>
</blockquote>
<p><strong>2.21 学习使用常用的Java工具库</strong></p>
<blockquote>
<p><code>commons.lang</code> <code>commons.*...</code> <code>guava-libraries</code> <code>netty</code></p>
<p>参考资料</p>
<p><a href="http://openjdk.java.net/" target="_blank" rel="external">http://openjdk.java.net/</a></p>
<p><a href="http://commons.apache.org/" target="_blank" rel="external">http://commons.apache.org/</a></p>
<p><a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">https://code.google.com/p/guava-libraries/</a></p>
<p><a href="http://netty.io/" target="_blank" rel="external">http://netty.io/</a></p>
<p><a href="http://stackoverflow.com/questions/2954372/difference-between-spi-and-api" target="_blank" rel="external">http://stackoverflow.com/questions/2954372/difference-between-spi-and-api</a></p>
<p><a href="http://stackoverflow.com/questions/11404230/how-to-implement-the-api-spi-pattern-in-java" target="_blank" rel="external">http://stackoverflow.com/questions/11404230/how-to-implement-the-api-spi-pattern-in-java</a></p>
</blockquote>
<p><strong>2.22 什么API &amp; SPI</strong></p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="external">API维基百科</a></p>
<p><a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="external">SPI维基百科</a></p>
</blockquote>
<h3 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h3><p><strong>3.1 阅读源代码，并学会使用</strong></p>
<blockquote>
<p><code>java.lang.Thread</code> <code>java.lang.Runnable</code> <code>java.util.concurrent.Callable</code> <code>java.util.concurrent.locks.ReentrantLock</code> <code>java.util.concurrent.locks.ReentrantReadWriteLock</code> <code>java.util.concurrent.atomic.Atomic*</code> <code>java.util.concurrent.Semaphore</code> <code>java.util.concurrent.CountDownLatch</code> <code>java.util.concurrent.CyclicBarrier</code> <code>java.util.concurrent.ConcurrentHashMap</code> <code>java.util.concurrent.Executors</code></p>
</blockquote>
<p><strong>3.2 学习使用线程池，自己设计线程池需要注意什么</strong></p>
<p><strong>3.3 锁</strong></p>
<blockquote>
<p>什么是锁，锁的种类有哪些，每种锁有什么特点，适用场景是什么，在并发编程中所的意义是什么</p>
</blockquote>
<p><strong>3.4 <code>synchronized</code>的作用是什么，<code>synchronized</code>和<code>lock</code></strong></p>
<p><strong>3.5 sleep和wait</strong></p>
<p><strong>3.6 <code>wait</code>和<code>notify</code></strong></p>
<p><strong>3.7 写一个死锁的程序</strong></p>
<p><strong>3.8 什么是守护线程，守护线程和非守护线程的区别以及用法</strong></p>
<p><strong>3.9 <code>volatile</code>关键字的理解</strong></p>
<blockquote>
<p>C ++ volatile关键字和Java volatile关键字 happens-before语义 编译器指令重排和CPU指令重排</p>
<p>参考资料</p>
<p><a href="https://en.wikipedia.org/wiki/Memory_ordering" target="_blank" rel="external">Memory ordering 维基百科</a></p>
<p><a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming" target="_blank" rel="external">volatile维基百科</a>)</p>
<p><a href="http://preshing.com/20130702/the-happens-before-relation/" target="_blank" rel="external">The Happens-Before Relation</a></p>
</blockquote>
<p><strong>3.10 以下代码是不是线程安全？为什么？如果为count加上volatile修饰是否能够做到线程安全？你觉得该怎么做是线程安全？</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Sample &#123;</div><div class="line">  private static int count = 0;</div><div class="line">  public static void increment() &#123;</div><div class="line">    count++;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.11 解释一下下面两段代码的差别？</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 代码1</div><div class="line">public class Sample &#123;</div><div class="line">  private static int count = 0;</div><div class="line">  synchronized public static void increment() &#123;</div><div class="line">    count++;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 代码2</div><div class="line">public class Sample &#123;</div><div class="line">  private static AtomicInteger count = new AtomicInteger(0);</div><div class="line">  public static void increment() &#123;</div><div class="line">    count.getAndIncrement();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考资料</p>
<p><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="external">Java并发编程实战</a></p>
</blockquote>
<h3 id="Java底层知识-进阶篇"><a href="#Java底层知识-进阶篇" class="headerlink" title="Java底层知识(进阶篇)"></a>Java底层知识(进阶篇)</h3><p><strong>4.1 了解字节码、<code>class</code>文件格式</strong></p>
<blockquote>
<p><a href="http://en.wikipedia.org/wiki/Java_class_file" target="_blank" rel="external">http://en.wikipedia.org/wiki/Java_class_file</a><br><a href="http://en.wikipedia.org/wiki/Java_bytecode" target="_blank" rel="external">http://en.wikipedia.org/wiki/Java_bytecode</a><br><a href="http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings" target="_blank" rel="external">http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings</a><br><a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/" target="_blank" rel="external">http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/</a><br><a href="http://asm.ow2.org/" target="_blank" rel="external">http://asm.ow2.org/</a></p>
</blockquote>
<p><strong>4.2 写一个程序要求实现javap的功能(手工完成，不借助ASM等工具)</strong></p>
<p><code>Java源码</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">   int i = 0;</div><div class="line">   i += 1;</div><div class="line">   i *= 1;</div><div class="line">   System.out.println(i);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>编译后读取class文件输出以下代码</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">  Code:</div><div class="line">   Stack=2, Locals=2, Args_size=1</div><div class="line">   0:   iconst_0</div><div class="line">   1:   istore_1</div><div class="line">   2:   iinc    1, 1</div><div class="line">   5:   iload_1</div><div class="line">   6:   iconst_1</div><div class="line">   7:   imul</div><div class="line">   8:   istore_1</div><div class="line">   9:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">   12:  iload_1</div><div class="line">   13:  invokevirtual   #3; //Method java/io/PrintStream.println:(I)V</div><div class="line">   16:  return</div><div class="line">  LineNumberTable: </div><div class="line">   line 4: 0</div><div class="line">   line 5: 2</div><div class="line">   line 6: 5</div><div class="line">   line 7: 9</div><div class="line">   line 8: 16</div></pre></td></tr></table></figure>
<p><strong>4.3 CPU缓存，L1,L2,L3和伪共享</strong></p>
<blockquote>
<p><a href="http://duartes.org/gustavo/blog/post/intel-cpu-caches/" target="_blank" rel="external">http://duartes.org/gustavo/blog/post/intel-cpu-caches/</a><br><a href="http://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html" target="_blank" rel="external">http://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html</a></p>
</blockquote>
<p><strong>4.4 什么是尾递归</strong></p>
<p><strong>4.5 熟悉位运算</strong></p>
<blockquote>
<p>用位运算实现加、减、乘、除、取余</p>
<p>参考资料：</p>
<ol>
<li><a href="https://book.douban.com/subject/1138768/" target="_blank" rel="external">深入Java虚拟机</a></li>
<li><a href="https://book.douban.com/subject/6522893/" target="_blank" rel="external">深入理解Java虚拟机</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_class_file" target="_blank" rel="external">Java class file维基百科</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_bytecode" target="_blank" rel="external">Java bytecode维基百科</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings" target="_blank" rel="external">Java bytecode instruction listings维基百科</a></li>
</ol>
</blockquote>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><strong>5.1 实现AOP</strong></p>
<blockquote>
<p><a href="http://cglib.sourceforge.net/" target="_blank" rel="external">CGLIB和InvocationHandler的区别</a></p>
<p><a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/" target="_blank" rel="external">动态代理模式Javassist实现AOP</a></p>
<p><a href="http://asm.ow2.org/" target="_blank" rel="external">ASM实现AOP</a></p>
<p><strong>5.2 使用模板方法设计模式和策略设计模式实现IOC</strong></p>
</blockquote>
<p><strong>5.3 不使用<code>synchronized</code>和<code>Lock</code>，实现线程安全的单例模式</strong></p>
<p><strong>5.4 nio和reactor设计模式</strong></p>
<h3 id="网络编程知识"><a href="#网络编程知识" class="headerlink" title="网络编程知识"></a>网络编程知识</h3><p><strong>6.1 <code>Java RMI</code>、<code>Socket</code>、<code>HttpClient</code></strong></p>
<p><strong>6.2 用<code>Java</code>写一个简单的静态文件的<code>HTTP</code>服务器</strong></p>
<blockquote>
<p>实现客户端缓存功能，支持返回304实现可并发下载一个文件，使用线程池处理客户端请求，使用nio处理客户端请求，支持简单的rewrite规则。上述功能在实现的时候需要满足<a href="https://en.wikipedia.org/wiki/Open/closed_principle" target="_blank" rel="external">“开闭原则”</a></p>
</blockquote>
<p><strong>6.3 了解Nignx和Apache服务器的特性并搭建一个对应的服务器</strong></p>
<blockquote>
<p><a href="http://nginx.org/" target="_blank" rel="external">Nginx官方链接</a></p>
<p><a href="http://httpd.apache.org/" target="_blank" rel="external">Apache官方链接</a></p>
</blockquote>
<p><strong>6.4 用Java实现FTP、SMTP协议</strong></p>
<p><strong>6.5 什么是CND? 如何实现？DNS起到什么作用？</strong></p>
<blockquote>
<p>搭建一个DNS服务器 搭建一个 Squid 或 Apache Traffic Server 服务器 <a href="http://www.squid-cache.org/" target="_blank" rel="external">http://www.squid-cache.org/</a> <a href="http://trafficserver.apache.org/" target="_blank" rel="external">http://trafficserver.apache.org/</a> <a href="http://en.wikipedia.org/wiki/Domain_Name_System" target="_blank" rel="external">http://en.wikipedia.org/wiki/Domain_Name_System</a></p>
</blockquote>
<h3 id="框架知识"><a href="#框架知识" class="headerlink" title="框架知识"></a>框架知识</h3><p><strong>7 Spring框架 &amp; Mybatis</strong></p>
<blockquote>
<p>阅读 Sping、Spring MVC、Mybatis主要源码；用Spring和Mybatis搭建Java Server</p>
</blockquote>
<h3 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h3><p><strong>8 常用应用服务器</strong></p>
<blockquote>
<p>熟悉使用<a href="http://www.jboss.org/" target="_blank" rel="external">JBoss</a></p>
<p>熟悉使用<a href="http://tomcat.apache.org/" target="_blank" rel="external">Tomcat</a></p>
<p>熟悉使用<a href="http://www.eclipse.org/jetty/" target="_blank" rel="external">Jetty</a></p>
</blockquote>
<h3 id="编译原理知识"><a href="#编译原理知识" class="headerlink" title="编译原理知识"></a>编译原理知识</h3><p><strong>9.1 用Java实现以下表达式解析并返回结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sysdate</div><div class="line">sysdate - 1</div><div class="line">sysdate - 1/24</div><div class="line">sysdate - 1/(12*2)</div></pre></td></tr></table></figure>
<p><strong>9.2 实现对一个List通过DSL筛选</strong></p>
<p>要求返回列表中匹配的对象，即最后两个对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">QList&lt;Map&lt;String, Object&gt;&gt; mapList = new QList&lt;Map&lt;String, Object&gt;&gt;;</div><div class="line">  mapList.add(&#123;&quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: -1,&quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 0, &quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;test test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 3, &quot;name&quot;: &quot;test hatter&quot;&#125;);</div><div class="line">  mapList.query(&quot;id is not null and id &gt; 0 and name   like &apos;%hatter%&apos;&quot;);</div></pre></td></tr></table></figure>
<p><strong>9.3 用Java实现以下程序（语法和变量作用域处理都和JavaScript类似</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = 2;</div><div class="line">var c = function() &#123;</div><div class="line">  var a = 3;</div><div class="line">  println(a);</div><div class="line">  println(b);</div><div class="line">&#125;;</div><div class="line">c();</div><div class="line">println(a);</div><div class="line">println(b);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">2</div><div class="line">1</div><div class="line">2</div></pre></td></tr></table></figure>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><strong>10 常用操作系统</strong></p>
<blockquote>
<p><code>Ubuntu Centos</code> 使用<code>Linix</code>，熟悉<code>Shell</code>脚本</p>
</blockquote>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p><strong>11.1 关系型数据库</strong></p>
<blockquote>
<p><code>MySQL</code> 如何看执行计划 如何搭建<code>MySQL</code>主备 <code>binlog</code>是什么 <code>Derby</code>，<code>H2</code>，<code>PostgreSQL</code> <code>SQLite</code></p>
</blockquote>
<p><strong>11.2 NoSQL</strong></p>
<blockquote>
<p><a href="http://redis.io/" target="_blank" rel="external">Redis</a></p>
<p><a href="https://memcached.org/" target="_blank" rel="external">Memecached</a></p>
<p><a href="http://cassandra.apache.org/" target="_blank" rel="external">cassandra</a></p>
<p><a href="https://code.google.com/p/leveldb/" target="_blank" rel="external">Leveldb</a></p>
<p><a href="http://hbase.apache.org/" target="_blank" rel="external">HBase</a></p>
<p><a href="http://www.mongodb.org/" target="_blank" rel="external">MongoDB</a></p>
<p><a href="http://www.neo4j.org/" target="_blank" rel="external">图数据库neo4j</a></p>
</blockquote>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><p><strong>12.1 <code>Zookeeper</code>,在<code>Linix</code>上部署ZK</strong></p>
<p><strong>12.2 <code>Solr</code>、<code>Lucence</code>、<code>ElasticSearch</code></strong></p>
<blockquote>
<p>在<code>Linux</code>上部署<code>Solr</code>、<code>solrCloud</code>、新增、删除、查询索引</p>
</blockquote>
<p><strong>12.3 <code>Storm</code> 流式计算，了解<code>Spark</code> <code>S4</code></strong></p>
<blockquote>
<p>在<code>Linux</code>上部署<code>Storm</code>，用<code>Zookeeper</code>做协调，运行Storm Hello World;Local和Remote 模式运行调试<code>storm topology</code></p>
</blockquote>
<p><strong>12.4 Hadoop,离线计算</strong></p>
<blockquote>
<p><code>HDFS</code>: 部署<code>NameNode</code> <code>SecondaryNameNode</code> <code>DataNode</code>、上传文件、打开文件、更改文件、删除文件</p>
<p><code>MapReduce</code>：部署<code>JobTracker</code>，<code>TaskTracker</code>，编写mr job</p>
<p><code>Hive</code>：部署<code>hive</code>，书写hive sql，得到结果</p>
<p><code>Presto</code>：类<code>hive</code>，不过比<code>hive</code>快，非常值得学习署</p>
</blockquote>
<p><strong>12.5 分布式日志收集<code>Flume</code>、<code>Kafka</code>、<code>Logstash</code></strong></p>
<p><strong>12.6 数据挖掘，<code>Mahout</code></strong></p>
<h3 id="网络安全知识"><a href="#网络安全知识" class="headerlink" title="网络安全知识"></a>网络安全知识</h3><p><strong>13.1 什么是<code>DES</code>、<code>AES</code></strong></p>
<p><strong>13.2 什么是<code>RSA</code>、<code>DSA</code></strong></p>
<p><strong>13.3 什么是<code>MD5</code>，<code>SHA1</code></strong></p>
<p><strong>13.4 什么是<code>SSL</code>、<code>TLS</code>，为什么<code>HTTPS</code>相对比较安全</strong></p>
<p><strong>13.5 什么是中间人攻击、如果避免中间人攻击</strong></p>
<p><strong>13.6 什么是<code>DOS</code>、<code>DDOS</code>、<code>CC</code>攻击</strong></p>
<p><strong>13.7 什么是<code>CSRF</code>攻击</strong></p>
<p><strong>13.8 什么是<code>CSS</code>攻击</strong></p>
<p><strong>13.9 什么是<code>SQL</code>注入攻击</strong></p>
<p><strong>13.10 什么是<code>Hash</code>碰撞拒绝服务攻击</strong></p>
<p><strong>13.11 了解并学习下面几种增强安全的技术</strong></p>
<blockquote>
<p>参考资料<br><a href="http://www.openauthentication.org/" target="_blank" rel="external">http://www.openauthentication.org/</a><br>HOTP <a href="http://www.ietf.org/rfc/rfc4226.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc4226.txt</a><br>TOTP <a href="http://tools.ietf.org/rfc/rfc6238.txt" target="_blank" rel="external">http://tools.ietf.org/rfc/rfc6238.txt</a><br>OCRA <a href="http://tools.ietf.org/rfc/rfc6287.txt" target="_blank" rel="external">http://tools.ietf.org/rfc/rfc6287.txt</a><br><a href="http://en.wikipedia.org/wiki/Salt_(cryptography" target="_blank" rel="external">http://en.wikipedia.org/wiki/Salt_(cryptography</a>)</p>
</blockquote>
<p><strong>13.12 用<code>openssl</code>签一个证书部署到<code>apache</code>或<code>nginx</code></strong></p>
<blockquote>
<p>参考资料<br><a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function" target="_blank" rel="external">http://en.wikipedia.org/wiki/Cryptographic_hash_function</a><br><a href="http://en.wikipedia.org/wiki/Block_cipher" target="_blank" rel="external">http://en.wikipedia.org/wiki/Block_cipher</a><br><a href="http://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="external">http://en.wikipedia.org/wiki/Public-key_cryptography</a><br><a href="http://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="external">http://en.wikipedia.org/wiki/Transport_Layer_Security</a><br><a href="http://www.openssl.org/" target="_blank" rel="external">http://www.openssl.org/</a><br><a href="https://code.google.com/p/google-authenticator/" target="_blank" rel="external">https://code.google.com/p/google-authenticator/</a></p>
</blockquote>
<h3 id="扩展技能"><a href="#扩展技能" class="headerlink" title="扩展技能"></a>扩展技能</h3><p><strong>14.1 云计算、分布式、高可用、可扩展</strong></p>
<p><strong>14.2 虚拟化</strong></p>
<blockquote>
<p><a href="https://linuxcontainers.org/" target="_blank" rel="external">https://linuxcontainers.org/</a></p>
<p><a href="http://www.linux-kvm.org/page/Main_Page" target="_blank" rel="external">http://www.linux-kvm.org/page/Main_Page</a></p>
<p><a href="http://www.xenproject.org/" target="_blank" rel="external">http://www.xenproject.org/</a></p>
<p><a href="https://www.docker.io/" target="_blank" rel="external">https://www.docker.io/</a></p>
</blockquote>
<p><strong>14.3 监控</strong></p>
<blockquote>
<p><a href="http://www.nagios.org/" target="_blank" rel="external">http://www.nagios.org/</a></p>
<p><a href="http://ganglia.info/" target="_blank" rel="external">http://ganglia.info/</a></p>
</blockquote>
<p><strong>14.4 负载均衡</strong></p>
<blockquote>
<p><a href="http://www.linuxvirtualserver.org/" target="_blank" rel="external">http://www.linuxvirtualserver.org/</a></p>
</blockquote>
<p><strong>14.5 学会使用Git</strong></p>
<blockquote>
<p><a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></p>
<p><a href="https://git.oschina.net/" target="_blank" rel="external">https://git.oschina.net/</a></p>
</blockquote>
<p><strong>14.6 学会使用<code>Maven</code></strong></p>
<blockquote>
<p><a href="http://maven.apache.org/" target="_blank" rel="external">http://maven.apache.org/</a></p>
</blockquote>
<p><strong>14.7 学习一个小语种语言</strong></p>
<blockquote>
<p><code>Groovy</code> <code>Scala</code> <code>LISP</code>  <code>Common LISP</code> <code>Schema</code>, <code>Clojure</code> <code>R</code> <code>Julia</code> <code>Lua</code> <code>Ruby</code></p>
</blockquote>
<p><strong>14.8 尝试了解编码的本质</strong></p>
<blockquote>
<p>了解以下概念<code>ASCLL</code>，<code>ISO-8859-1</code> <code>GB2312</code> <code>GBK</code> <code>GB18030 Unicode</code>,<code>UTF-8</code>不使用<code>String.getBytes()</code>等其他工具类/函数完成下面功能</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws IOException &#123;</div><div class="line">    String str = &quot;Hello, 我们是中国人。&quot;;</div><div class="line">    byte[] utf8Bytes = toUTF8Bytes(str);</div><div class="line">    FileOutputStream fos = new FileOutputStream(&quot;f.txt&quot;);</div><div class="line">    fos.write(utf8Bytes);</div><div class="line">    fos.close();</div><div class="line">&#125;</div><div class="line">public static byte[] toUTF8Bytes(String str) &#123;</div><div class="line">    return null; // TODO</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>想以下上面的程序能不能写一个转GBK的？写个程序自动判断一个文件时哪一种编码？</p>
</blockquote>
<p><strong>14.9 尝试了解时间的本质</strong></p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Time_zone" target="_blank" rel="external">时区</a> &amp; 冬令时 &amp; 夏令时</p>
<p><a href="https://en.wikipedia.org/wiki/Leap_year" target="_blank" rel="external">闰年</a></p>
<p><a href="ftp://ftp.iana.org/tz/data/leapseconds" target="_blank" rel="external">闰秒</a></p>
</blockquote>
<h3 id="横向扩展技能"><a href="#横向扩展技能" class="headerlink" title="横向扩展技能"></a>横向扩展技能</h3><p><strong>15.1 <code>JavaScript</code>知识</strong></p>
<p><strong>15.2 什么是<code>prototype</code></strong></p>
<blockquote>
<p>修改代码，是程序输出 <code>1 3 5</code>  <code>http://jsfiddle.net/Ts7Fk/</code></p>
</blockquote>
<p><strong>15.3 什么是闭包</strong></p>
<blockquote>
<p>看一下这段代码，并解释一下为什么按<code>Button1</code>时没有<code>alert</code>出<code>This is button: 1</code>，如何修改:<code>http://jsfiddle.net/FDPj3/1/</code></p>
</blockquote>
<p><strong>15.4 学习一个JS框架</strong></p>
<blockquote>
<p><code>React</code> <code>ArgularJS</code> <code>ExtJS</code> <code>JQuery</code></p>
</blockquote>
<p><strong>15.5 写一个<a href="http://en.wikipedia.org/wiki/Greasemonkey" target="_blank" rel="external">Greasemonkey</a>插件</strong></p>
<p><strong>15.6 学习<a href="http://nodejs.org/" target="_blank" rel="external">node.js</a></strong></p>
<p><strong>15.7 学习<code>Html5</code></strong></p>
<blockquote>
<p><a href="https://docs.angularjs.org/api" target="_blank" rel="external">ArgularJS</a></p>
</blockquote>
<p>未完待续….</p>
<h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><blockquote>
<p><a href="http://www.hollischuang.com/archives/489?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">七周七语言</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=522029636170" target="_blank" rel="external">七周七数据库</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=525319334615" target="_blank" rel="external">Hadoop技术内幕</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=25826348062&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073093_2k4_386928692&amp;pvid=200_10.176.139.147_1100_1474073093283" target="_blank" rel="external">Hbase In Action</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=521649099033&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073128_3k1_97638280&amp;pvid=200_10.176.139.154_1162_1474073128458" target="_blank" rel="external">这就是搜索引擎</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=521912282578&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073152_3k2_1235641721&amp;pvid=200_10.176.139.184_1216_1474073152748" target="_blank" rel="external">深入分析Java Web技术内幕</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=520125493740&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073190_2k7_326211549&amp;pvid=200_10.176.139.160_1042_1474073190008" target="_blank" rel="external">大型网站技术架构</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=522994008657&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073238_214_523050217&amp;pvid=200_10.176.139.147_473_1474073238628" target="_blank" rel="external">算法导论</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=525443498378" target="_blank" rel="external">代码大全</a></p>
<p>JavaScript权威指南</p>
<p>高性能MySQL</p>
<p>计算机程序设计艺术</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring数据校验]]></title>
      <url>http://jianwl.com/2016/09/14/Spring%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有一句话怎么说来着？对于外部输入的数据都是不可信的，都需要进行校验。故对于入参的校验是后端必不可少的工作,<code>JAVA</code>中提供了一套注解可供校验入参时不为NULL，不为空。</p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>场景：入参是一个对象，需要保证对象中的某些参数不为空，或不为NULL。</p>
<p>注意事项：</p>
<ol>
<li>对象前加<code>@Valid</code>注解，表示对象中的参数严格按照注解规范</li>
<li>属性前加<code>@NotNull</code>注解，表示对象中的属性不能为NULL，但允许为空，即(“”、”空格1”、”空格1空格2”)这三种情况均可。</li>
<li>属性前加<code>@NotEmpty</code>注解，表示对象中的属性不能为NULL，且长度必须大于0，，即(“空格1”、”空格1空格2”)这两种情况均可，(“”)这种情况长度为0，不是满足条件的。</li>
<li>属性前加<code>@NotBlank</code>注解，该注解只能作用于<code>String</code>上，不能为NULL，而且调用trim()后，长度必须大于0；</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>对象模型User.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    @NotNull</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    @NotEmpty</div><div class="line">    private String password;</div><div class="line"></div><div class="line">    @NotBlank</div><div class="line">    private String nickName;</div><div class="line"></div><div class="line">    @Valid</div><div class="line">    private Address address;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User user = new User();</div><div class="line">        Address address = new Address();</div><div class="line">        address.setPlaceNo(234);</div><div class="line">        address.setPlace(&quot;shanghai&quot;);</div><div class="line">        user.setPassword(&quot;12321&quot;);</div><div class="line">        user.setName(&quot;zhangsan&quot;);</div><div class="line">        user.setName(&quot;zhaowu&quot;);</div><div class="line">        user.setAddress(address);</div><div class="line">        System.out.println(JSON.toJSONString(user));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 此处省略 Getter &amp; Setter方法</div></pre></td></tr></table></figure>
<p><strong>对象模型Address.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Address &#123;</div><div class="line">    @NotNull</div><div class="line">    private String place;</div><div class="line">    @NotNull</div><div class="line">    private Integer placeNo;</div><div class="line">    </div><div class="line">    // 此处省略 Getter &amp; Setter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>SpringBoot的Controller层: AdminController.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class AdminController &#123;</div><div class="line">    @RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.POST)</div><div class="line">    public String get(@RequestBody @Valid User user)&#123;</div><div class="line">        return JSON.toJSONString(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要特别注意的是，一个对象中包含另外一个子对象，需要对子对象中的参数进行校验，子对象前需要加上<code>@Valid</code>注解。</p>
<p><strong>提示：</strong> 为了让例子更加简单，将<code>AdminController</code>原来返回的<code>JsonResult</code>对象改为了<code>String</code>，故验证部分的返回值和按照上述教程所得到的返回值是不一致的。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><strong>尝试1：验证加上@NotNull注解，该属性不能为NULL</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/7654533.jpg" alt=""></p>
<p><strong>尝试2：验证加上@NotEmpty注解，该入参长度需大于0</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/98161087.jpg" alt=""></p>
<p><strong>尝试3：验证加上@NotEmpty注解，该入参长度需大于0，包含空格</strong><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/6368009.jpg" alt=""></p>
<p><strong>尝试4：验证加上@NotBlank注解，该入参长度在去除空格之后，长度大于0</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/51683357.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA代码规范]]></title>
      <url>http://jianwl.com/2016/09/14/JAVA%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 代码是写给人看的，顺便在计算机上运行而已。把常用的标准记录下来，时常检验自己的代码是否符合规范，避免写烂代码。</p>
<h3 id="烂代码是如何出现？"><a href="#烂代码是如何出现？" class="headerlink" title="烂代码是如何出现？"></a>烂代码是如何出现？</h3><blockquote>
<ol>
<li>未经思考就开始编码</li>
<li>功能完成就结束编码</li>
<li>修改已有代码</li>
</ol>
</blockquote>
<h3 id="Java代码的一些规范"><a href="#Java代码的一些规范" class="headerlink" title="Java代码的一些规范"></a>Java代码的一些规范</h3><p><strong>命名</strong></p>
<ol>
<li>私有方法以「_ 」作为前缀</li>
<li>以获取为目的的数据库查询方法以get作为前缀，以搜索为目的的数据库查询方法以find作为前缀。</li>
<li>测试方法以test最为前缀</li>
<li>类名一般以名词结尾，方法名应该是动词或者动词短语</li>
<li>接口类以字母I作为前缀(常量类除外)</li>
<li>抽象父类以Base作为前缀</li>
<li>普通父类以类别作为后缀，比如xxxController,xxxService,xxxConstants,xxxVO(页面模型)、xxxQO(查询模型)、xxxHelper(带状态工具类),xxxUtils(无状态工具类)等</li>
<li>测试类以Test作为后缀，与被测试类使用同一包名</li>
<li>VO、QO的成员同一命名(包括大小写)</li>
<li>增加重要细节，比如时间变量的单位</li>
<li>对于作用域大的变量使用较长的名字。</li>
</ol>
<p><strong>代码</strong></p>
<ol>
<li>尽量编码使用NULL、使用Optional.ofNullable替代</li>
<li>不要使用Optional作为默认参数，使用重载或者拆分方法</li>
<li>Stream仅限于方法内部使用，接口层面使用List或Set</li>
<li>循环流程中尽量避免自动装箱，显式调用Integer.intValue()或Integer.valueOf()</li>
<li>工具类不应该捕获异常，而应将异常抛出由调用方处理</li>
<li>使用JAVA8的DateTime，不要用JodaTime.</li>
<li>除非会有多个实现，或者有解耦需求，不要使用Inteface.</li>
<li>与常量做比较时，应该把常量放在前面避免空指针异常</li>
<li>私有常量直接定义在类层面，而非方法层面。</li>
</ol>
<h3 id="抽象-amp-分类"><a href="#抽象-amp-分类" class="headerlink" title="抽象 &amp; 分类"></a>抽象 &amp; 分类</h3><p><code>抽象和分类是程序员/架构师最重要的能力</code></p>
<p>架构和编程都是一个不断抽象的过程，我们把业务需求抽象成数据模型、服务和应用，面向对象就是抽象出类和对象，面向过程就是抽象出方法和函数。</p>
<p>抽象出模块后，需要合理的将功能分到不同的模块，清楚的定义模块的边界，才能保证模块的可维护性和健壮性。</p>
<p>抽象和分类是将复杂的东西简单化的过程。对于司机，汽车是一个抽象，它的接口是方向盘、档位、刹车和油门。 对于汽车，轮胎是一个抽象，轮胎的规格都是固定的几种，可以安装在不同的汽车上。</p>
<h3 id="单一职责原则-Simple-Responsibility-Principle-SRP"><a href="#单一职责原则-Simple-Responsibility-Principle-SRP" class="headerlink" title="单一职责原则 Simple Responsibility Principle SRP"></a>单一职责原则 Simple Responsibility Principle SRP</h3><p><code>一个模块，只应该做一件事，并把这件事做好，或者只有一个引起该模块变化的原因。</code></p>
<h3 id="开放封闭原则-Open-Closed-Principle-OCP"><a href="#开放封闭原则-Open-Closed-Principle-OCP" class="headerlink" title="开放封闭原则 Open/Closed Principle,OCP"></a>开放封闭原则 Open/Closed Principle,OCP</h3><p>对扩展开放，对修改封闭。当需求改变时，我们可以扩展模块以满足新的需求，但扩展时，不应该需要修改原模块的实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class Square &#123; </div><div class="line">    public double side;</div><div class="line">&#125;</div><div class="line">public class Rectangle &#123; </div><div class="line">    public double height;</div><div class="line">    public double width;</div><div class="line">&#125;</div><div class="line">public class Circle &#123; </div><div class="line">    public double radius;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Geometry &#123;</div><div class="line">    public double area(Object shape) &#123;</div><div class="line">        if (shape instanceof Square) &#123;</div><div class="line">            Square s = (Square)shape;</div><div class="line">            return s.side * s.side;</div><div class="line">        &#125; else if (shape instanceof Rectangle) &#123;</div><div class="line">            Rectangle r = (Rectangle)shape;</div><div class="line">            return r.height * r.width;</div><div class="line">        &#125; else if (shape instanceof Square) &#123;</div><div class="line">            Circle c = (Circle)shape;</div><div class="line">            return PI * c.radius * c.radius;</div><div class="line">        &#125; else &#123;</div><div class="line">            throw new NoSuchShareException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Square implements Share &#123; </div><div class="line">    public double side;</div><div class="line">    </div><div class="line">    public double area() &#123;</div><div class="line">        return side * side;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Rectangle implements Share &#123; </div><div class="line">    public double height;</div><div class="line">    public double width;</div><div class="line">    </div><div class="line">    public double area() &#123;</div><div class="line">        return height * width;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Circle implements Share &#123; </div><div class="line">    public double radius;</div><div class="line">    </div><div class="line">    public double area() &#123;</div><div class="line">        return PI * radius * radius;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过程式代码难以添加新数据结构，面向对象代码难以添加新方法。</p>
<p>如果要添加一个新的形状(比如椭圆)，那面向对象的实现会方便些；</p>
<p>如果要添加一个新的方法(比如计算周长)，那过程式的实现会方便些。</p>
<h3 id="依赖倒置原则-Dependency-Inversion-Principle，DIP"><a href="#依赖倒置原则-Dependency-Inversion-Principle，DIP" class="headerlink" title="依赖倒置原则(Dependency Inversion Principle，DIP)"></a>依赖倒置原则(Dependency Inversion Principle，DIP)</h3><p>高层模块不应该依赖于底层模块的实现，两者都应该依赖于抽象，抽象不应该依赖于细节，细节应该依赖于抽象。</p>
<p><code>所有的协议和标准化都是DIP的一种实现</code></p>
<ol>
<li>TCP、HTTP等网络协议</li>
<li>JDBC和SQL</li>
<li>操作系统、JVM</li>
<li>Spring框架及各种设计模式</li>
<li>编程语言 </li>
</ol>
<p><code>生活中也有很多例子</code></p>
<ol>
<li>汽车和轮胎</li>
<li>铅笔和笔芯</li>
<li>电源插座</li>
<li>USB接口</li>
</ol>
<h3 id="里氏替换原则-Liskov-Substitution-Principle-LSP"><a href="#里氏替换原则-Liskov-Substitution-Principle-LSP" class="headerlink" title="里氏替换原则 Liskov Substitution Principle,LSP"></a>里氏替换原则 Liskov Substitution Principle,LSP</h3><p>子类必须能够替换他们的基类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Rectangle &#123; </div><div class="line">    public double height;</div><div class="line">    public double width;</div><div class="line">    </div><div class="line">    public void setHeight(int height) &#123; ... &#125;</div><div class="line">    public void setWidth(int width) &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Square extends Rectangle &#123; </div><div class="line">    ???</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正方形是一个特殊的长方形，那么，正方形可以是长方形的子类吗？</p>
<h3 id="接口隔离原则-Interface-Segregation-Principle-ISP"><a href="#接口隔离原则-Interface-Segregation-Principle-ISP" class="headerlink" title="接口隔离原则(Interface Segregation Principle, ISP)"></a>接口隔离原则(Interface Segregation Principle, ISP)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">interface Shape &#123;</div><div class="line">    public function area();</div><div class="line">    public function volume();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Square extends Shape &#123; </div><div class="line">    ???</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果正方形继承了Shape接口，该如何计算体积以实现volume方法？</p>
<h3 id="迪米特法则-Law-of-Demeter"><a href="#迪米特法则-Law-of-Demeter" class="headerlink" title="迪米特法则(Law of Demeter)"></a>迪米特法则(Law of Demeter)</h3><p>模块不应该了解它所操作的对象的内部情况。</p>
<p><code>生活中案例</code></p>
<p>如果你想让你的狗跑的话，你会对狗狗说，还是对四条狗腿说？<br>如果你去店里买东西，你会把钱交给店员，还是会把钱包交给店员让他自己拿？</p>
<p><code>代码例子</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</div></pre></td></tr></table></figure>
<p>这样的代码把对象内部实现暴露了出来，应该考虑讲该功能直接暴露为接口，或者合理使用设计模式（如Facade）。</p>
<h3 id="其他原则"><a href="#其他原则" class="headerlink" title="其他原则"></a>其他原则</h3><ul>
<li>Don’t Repeat Yourself (DRY)</li>
<li>Keep It Simple, Stupid (KISS)</li>
<li>You Ain’t Gonna Need It (YAGNI)</li>
<li>命令/查询分离原则(Command-Query Separation, CQS)</li>
<li>惯例优于配置原则(Convention over Configuration, CoC)</li>
<li>高内聚/低耦合(High Cohesion &amp; Loose Coupling)</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.devtf.cn/?p=1134" target="_blank" rel="external">http://www.devtf.cn/?p=1134</a></li>
<li><a href="http://www.jianshu.com/p/7645a5ea7f46" target="_blank" rel="external">http://www.jianshu.com/p/7645a5ea7f46</a></li>
<li><a href="http://blog.2baxb.me/archives/1343" target="_blank" rel="external">http://blog.2baxb.me/archives/1343</a></li>
<li><a href="http://blog.2baxb.me/archives/1378" target="_blank" rel="external">http://blog.2baxb.me/archives/1378</a></li>
<li><a href="http://blog.2baxb.me/archives/1499" target="_blank" rel="external">http://blog.2baxb.me/archives/1499</a></li>
<li><a href="http://beiyuu.com/readable-code/" target="_blank" rel="external">http://beiyuu.com/readable-code/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=408703236&amp;idx=1&amp;sn=3f78abcca906d5edee06ff85b2d22416&amp;scene=0#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=408703236&amp;idx=1&amp;sn=3f78abcca906d5edee06ff85b2d22416&amp;scene=0#wechat_redirect</a></li>
<li><a href="http://coolshell.cn/articles/4535.html" target="_blank" rel="external">http://coolshell.cn/articles/4535.html</a></li>
<li><a href="http://blog.jobbole.com/86267/" target="_blank" rel="external">http://blog.jobbole.com/86267/</a></li>
<li><a href="http://www.importnew.com/10656.html" target="_blank" rel="external">http://www.importnew.com/10656.html</a></li>
<li><a href="http://luopq.com/2016/02/21/write-good-function/" target="_blank" rel="external">http://luopq.com/2016/02/21/write-good-function/</a></li>
</ul>
<hr>
<ul>
<li><a href="http://book.douban.com/subject/4199741/" target="_blank" rel="external">「代码整洁之道」</a></li>
<li><a href="https://book.douban.com/subject/10797189/" target="_blank" rel="external">「编写可读代码的艺术」</a></li>
<li><a href="http://book.douban.com/subject/1140457/" target="_blank" rel="external">「敏捷软件开发：原则、模式与实践」</a></li>
<li><a href="http://book.douban.com/subject/1467587/" target="_blank" rel="external">「UNIX编程艺术」</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL之查询性能优化]]></title>
      <url>http://jianwl.com/2016/09/14/MySQL%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现有的项目，对于数据库查询的性能要求挺高的，对于查询性能的优化也是迫在眉睫，接下来，让我们一同来学习MySQL查询性能优化。</p>
<p>查询性能低下，最基本的原因是访问的数据太多。大部分性能低下的查询都可以通过减少访问的数据量的方式进行优化。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>查询不需要的记录</strong></p>
<p>场景：有些开发者习惯先使用<code>SELECT</code>语句查询大量的结果，然后获取前面N行后关闭结果集，他们认为MYSQL会执行查询，并只返回他们需要的10条数据，然后停止查询。但实际是MYSQL回查询出所有的结果集。客户端接受所有结果集，然后抛弃大部分数据。最有效的方式是在查询后加上LIMIT。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT username from USER LIMIT 10</div></pre></td></tr></table></figure>
<p><strong>多表关联时返回全部的列</strong></p>
<p>场景：我想获取电影My Love中出现的演员</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM actor </div><div class="line">INNER JOIN film_actor USIGN(actor_id)</div><div class="line">INNER JOIN film USIGN(film_id)</div><div class="line">WHERE film.title = &quot;My Love&quot;</div></pre></td></tr></table></figure>
<p>这将返回三个表的全部数据列，正确的做法应该是<code>SELECT actor.* FROM actor ....</code></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>高性能MySQL第三版</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决拦截器读取Request中的流,Controller读取不到的问题]]></title>
      <url>http://jianwl.com/2016/09/13/%E8%A7%A3%E5%86%B3%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AF%BB%E5%8F%96Request%E4%B8%AD%E7%9A%84%E6%B5%81-Controller%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天和同事对接项目，对方请求我的服务，请求参数是一个<code>JSON</code>；在进入服务之前，需要做一个签名验证，所以在拦截器部分，读取了请求参数。但拦截器读取完请求参数之后，Controller层便不能读取了。因为<code>Spring MVC</code>中<code>@RequestBody</code>是流的读取方式，而流只能读取一次，在拦截器中读取了，在Controller中再次读取便为空数据。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>SpringMVC解决方案</strong></p>
<p>流只能读一次，读了就没有了，为了后面的代码还能够取得的流，应该将其写出去。封装请求流，将请求流写出去。</p>
<p><code>CustomServletRequestWrapper.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 包装HttpServletRequest</div><div class="line"> */</div><div class="line">public class CustomServletRequestWrapper extends HttpServletRequestWrapper &#123;</div><div class="line"></div><div class="line">    private final byte[] body;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Construct a wrapper for the specified request.</div><div class="line">     *</div><div class="line">     * @param request The request to be wrapped</div><div class="line">     */</div><div class="line">    public CustomServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</div><div class="line">        super(request);</div><div class="line">        body = toByteArray(super.getInputStream());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public BufferedReader getReader() throws IOException &#123;</div><div class="line">        return new BufferedReader(new InputStreamReader(getInputStream()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ServletInputStream getInputStream() throws IOException &#123;</div><div class="line">        return new RequestBodyCachingInputStream(body);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class RequestBodyCachingInputStream extends ServletInputStream &#123;</div><div class="line">        private byte[] body;</div><div class="line">        private int lastIndexRetrieved = -1;</div><div class="line">        private ReadListener listener;</div><div class="line"></div><div class="line">        public RequestBodyCachingInputStream(byte[] body) &#123;</div><div class="line">            this.body = body;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int read() throws IOException &#123;</div><div class="line">            if (isFinished()) &#123;</div><div class="line">                return -1;</div><div class="line">            &#125;</div><div class="line">            int i = body[lastIndexRetrieved + 1];</div><div class="line">            lastIndexRetrieved++;</div><div class="line">            if (isFinished() &amp;&amp; listener != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                    throw e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isFinished() &#123;</div><div class="line">            return lastIndexRetrieved == body.length - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isReady() &#123;</div><div class="line">            // This implementation will never block</div><div class="line">            // We also never need to call the readListener from this method, as this method will never return false</div><div class="line">            return isFinished();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void setReadListener(ReadListener listener) &#123;</div><div class="line">            if (listener == null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener cann not be null&quot;);</div><div class="line">            &#125;</div><div class="line">            if (this.listener != null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener has been set&quot;);</div><div class="line">            &#125;</div><div class="line">            this.listener = listener;</div><div class="line">            if (!isFinished()) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int available() throws IOException &#123;</div><div class="line">            return body.length - lastIndexRetrieved - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void close() throws IOException &#123;</div><div class="line">            lastIndexRetrieved = body.length - 1;</div><div class="line">            body = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>设置过滤器，封装请求流: RequestReplaceFilter.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 替换Request对象</div><div class="line"> */</div><div class="line">public class RequestReplaceFilter extends OncePerRequestFilter &#123;</div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</div><div class="line">        if (!(request instanceof CustomServletRequestWrapper)) &#123;</div><div class="line">            request = new CustomServletRequestWrapper(request);</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>在web.xml中添加过滤器</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;requestReplaceFilter&lt;/filter-name&gt;</div><div class="line">	&lt;filter-class&gt;com.dada.bd.filter.RequestReplaceFilter&lt;/filter-class&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line"></div><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;requestReplaceFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure>
<p><strong>SpringBoot解决方案</strong></p>
<p><code>CustomServletRequestWrapper.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 包装HttpServletRequest</div><div class="line"> */</div><div class="line">public class CustomServletRequestWrapper extends HttpServletRequestWrapper &#123;</div><div class="line"></div><div class="line">    private final byte[] body;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Construct a wrapper for the specified request.</div><div class="line">     *</div><div class="line">     * @param request The request to be wrapped</div><div class="line">     */</div><div class="line">    public CustomServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</div><div class="line">        super(request);</div><div class="line">        body = toByteArray(super.getInputStream());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public BufferedReader getReader() throws IOException &#123;</div><div class="line">        return new BufferedReader(new InputStreamReader(getInputStream()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ServletInputStream getInputStream() throws IOException &#123;</div><div class="line">        return new RequestBodyCachingInputStream(body);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class RequestBodyCachingInputStream extends ServletInputStream &#123;</div><div class="line">        private byte[] body;</div><div class="line">        private int lastIndexRetrieved = -1;</div><div class="line">        private ReadListener listener;</div><div class="line"></div><div class="line">        public RequestBodyCachingInputStream(byte[] body) &#123;</div><div class="line">            this.body = body;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int read() throws IOException &#123;</div><div class="line">            if (isFinished()) &#123;</div><div class="line">                return -1;</div><div class="line">            &#125;</div><div class="line">            int i = body[lastIndexRetrieved + 1];</div><div class="line">            lastIndexRetrieved++;</div><div class="line">            if (isFinished() &amp;&amp; listener != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                    throw e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isFinished() &#123;</div><div class="line">            return lastIndexRetrieved == body.length - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isReady() &#123;</div><div class="line">            // This implementation will never block</div><div class="line">            // We also never need to call the readListener from this method, as this method will never return false</div><div class="line">            return isFinished();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void setReadListener(ReadListener listener) &#123;</div><div class="line">            if (listener == null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener cann not be null&quot;);</div><div class="line">            &#125;</div><div class="line">            if (this.listener != null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener has been set&quot;);</div><div class="line">            &#125;</div><div class="line">            this.listener = listener;</div><div class="line">            if (!isFinished()) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int available() throws IOException &#123;</div><div class="line">            return body.length - lastIndexRetrieved - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void close() throws IOException &#123;</div><div class="line">            lastIndexRetrieved = body.length - 1;</div><div class="line">            body = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>添加@Component注解，注册过滤器</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 替换Request对象</div><div class="line"> */</div><div class="line">@Component</div><div class="line">public class RequestReplaceFilter extends OncePerRequestFilter &#123;</div><div class="line">    private static final Logger logger = LoggerFactory.getLogger(RequestReplaceFilter.class);</div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</div><div class="line">        if (!(request instanceof CustomServletRequestWrapper)) &#123;</div><div class="line">            request = new CustomServletRequestWrapper(request);</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud入门]]></title>
      <url>http://jianwl.com/2016/09/13/SpringCloud%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h3><p><code>SpringCloud</code>是一个基于<code>SpringBoot</code>的云应用开发工具，它为基于<code>JVM</code>的云应用开发中的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态等操作提供了一种简单的开发方式。</p>
<p>SpringCloud包含了许多子项目，比如<code>Spring Cloud Config</code>、<code>Spring Cloud Netflix</code>、<code>Spring Cloud CloudFoundry</code>、<code>Spring Cloud AWS</code>、<code>Spring Cloud Security</code>、<code>Spring Cloud Commons</code>、<code>Spring Cloud Zookeeper</code>、<code>Spring Cloud CLI</code>等项目。</p>
<h3 id="微服务架构是什么？"><a href="#微服务架构是什么？" class="headerlink" title="微服务架构是什么？"></a>微服务架构是什么？</h3><p>微服务架构是将一个完整的应用从数据存储开始垂直拆分多个不同的服务，每个服务都能够独立部署、独立维护、独立扩展、服务和服务间通过诸如<code>RestFul API</code>的方式互相调用。</p>
<h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><p>在简单介绍了Spring Cloud和微服务架构之后，接下来将会使用Spring Cloud搭建服务注册和发现模块，这里我们会用到Spring Cloud Netflix,该项目是Spring Cloud的子项目之一，主要对Netflix一系列开源的产品的包装，通过简单的注解，开发者可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)、客户端负载均衡(Ribbon)等。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>未完待续….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij 常用快捷键]]></title>
      <url>http://jianwl.com/2016/09/11/Intellij-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>IntelliJ在业界被公认为最好的java开发工具之一,了解其常用快捷键对于工作效率会有一定提升。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>查询最近的文件</strong></p>
<p>应用场景：可以快速跳转到之前刚刚查看过的文件。</p>
<p>快捷键：<code>command + E</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/51543212.jpg" alt=""></p>
<p><strong>查看最近编辑的文件</strong></p>
<p>应用场景：可以快速跳转到之前刚刚编辑过的文件。</p>
<p>快捷键：<code>command + shift +  E</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/51543212.jpg" alt=""></p>
<p><strong>快速定位到大括号的开头或结尾</strong></p>
<p>快捷键：<code>command + ]</code> 或 <code>command + [</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/97015680.jpg" alt=""></p>
<p><strong>快速查找类</strong></p>
<p>快捷键：<code>command + N</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/42335832.jpg" alt=""></p>
<p><strong>格式化代码</strong></p>
<p>快捷键：<code>command + alt + L</code></p>
<p><strong>文本替换</strong></p>
<p>快捷键：<code>command + R</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/60502414.jpg" alt=""></p>
<p><strong>全局查找</strong></p>
<p>快捷键： <code>control + shift + F</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/85182590.jpg" alt=""></p>
<p><strong>删除行</strong></p>
<p>快捷键：<code>command + X</code></p>
<p><strong>复制行</strong></p>
<p>快捷键：<code>command + D</code></p>
<p><strong>跳到方法实现处</strong></p>
<p>使用场景：通常我们会声明一个接口，然后让一个类实现这个接口。那么怎么从接口，跳到方法实现处呢？可以用这个快捷键</p>
<p>快捷键： <code>command + alt + B</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/41820209.jpg" alt=""></p>
<p><strong>隐藏工具窗口</strong></p>
<p>快捷键： <code>shift + esc</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/75772825.jpg" alt=""></p>
<p><strong>定位到具体某一行</strong></p>
<p>快捷键：<code>command + G</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/99125758.jpg" alt=""></p>
<p><strong>复制当前文件的路径</strong></p>
<p>快捷键：<code>command + shift + C</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/26431733.jpg" alt=""></p>
<p><strong>重命名</strong></p>
<p>快捷键：<code>shift + fn + F6</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/88468445.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql服务启动错误 The server quit without updating PID file]]></title>
      <url>http://jianwl.com/2016/09/08/Mysql%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF-The-server-quit-without-updating-PID-file/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本地MySQL一直都能够正常启动的，昨晚关机了Mac，今早启动MySQL,出错了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-8/77573533.jpg" alt=""></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>删除下面这个错误文件就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /usr/local/var/mysql/jianweilindeMacBook-Pro.local.err</div></pre></td></tr></table></figure></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-8/23129111.jpg" alt=""></p>
<p>由于<code>jianweilindeMacBook-Pro.local.err</code>的用户权限是<code>_mysql</code>,而不是我自己的用户权限，故启动的时候会报错。删除这个文件或修改用户权限均可。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://pein0119.github.io/2015/03/25/MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF-The-server-quit-without-updating-PID-file/" target="_blank" rel="external">MySQL服务器启动错误<code>The server quit without updating PID file</code></a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之数组的扩展]]></title>
      <url>http://jianwl.com/2016/09/07/ES6%E4%B9%8B%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上篇文章介绍了<a href="http://jianwl.com/2016/09/06/ES6%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/">ES6之字符串的扩展</a>，本文将学习ES6中数组的扩展，数组在实际项目中比较常用，所以非常有必要了解一下。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>将数组对象转化为真正的数组：<code>Array.from</code></strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/44455334.jpg" alt=""></p>
<p><strong>将一组值转化为数组：Array.of</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/42839910.jpg" alt=""></p>
<p><strong>将当前数组内部指定位置的成员复制到其他的位置：copyWithin</strong></p>
<p>具体语法为<code>Array.prototype.copyWithin(target,start = 0, end = this.length)</code>,接受三个参数，target(必选)，从当前位置开始替换数据，start(可选)，从该位置开始读取数据，负数表示倒数，end(可选)，默认为数组长度；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/3645079.jpg" alt=""></p>
<p><strong>寻找数组中符合条件的元素：find和findIndex</strong></p>
<p><code>find</code>方法，数组中每个元素都会执行回调函数，若找到返回这个元素，没找到则返回<code>undefine</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/91334943.jpg" alt=""></p>
<p><code>findIndex</code>，数组中每个元素都会执行回调函数，找到返回具体的索引位置，找不到返回 -1</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/86472470.jpg" alt=""></p>
<p><strong>定值填充数组</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/35563292.jpg" alt=""></p>
<p><strong>数组实例的entries、keys、values</strong></p>
<p><code>keys</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/20213197.jpg" alt=""></p>
<p><code>values:报错，暂时不清楚什么原因？后续解决🤔</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/67413393.jpg" alt=""></p>
<p><code>entries</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/89340245.jpg" alt=""></p>
<p><strong>数组实例includes</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/36818030.jpg" alt=""></p>
<p><strong>数组空位</strong><br><code>比如Array构造函数返回的数组都是空位 Array[3] // [,,,]</code>；空位没有任何值，一个位置的值等于undefined仍是有值得。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/68402315.jpg" alt=""></p>
<p><strong>数组推导</strong></p>
<p>数组推导允许直接通过现有数组生成新数组。</p>
<p><code>案例1：暂时不清楚其为何报错，后续解决🤔</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/18821221.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 – 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之字符串的扩展]]></title>
      <url>http://jianwl.com/2016/09/06/ES6%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章学习了<a href="http://jianwl.com/2016/09/03/ES6%E4%B9%8B%E8%A7%A3%E6%9E%84/#more">ES6之解构</a>，本文将学习ES6中字符串的扩展。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>字符串遍历:由for…of循环遍历</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/54541215.jpg" alt=""></p>
<p>除了遍历以外，这个遍历器最好的优点是可以识别大于<code>0xFFFF</code>的码点，传统的for循环无法识别这样的码点。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/2647027.jpg" alt=""></p>
<p><strong>新增includes()、startWith()、endsWith()方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">includes()</td>
<td style="text-align:center">是否找到参数字符串</td>
</tr>
<tr>
<td style="text-align:left">startsWith</td>
<td style="text-align:center">是否以参数字符串开头</td>
</tr>
<tr>
<td style="text-align:left">endsWith</td>
<td style="text-align:center">是否以参数字符串结尾</td>
</tr>
</tbody>
</table>
<p><code>案例1</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/27503911.jpg" alt=""></p>
<p><strong>模板字符串</strong></p>
<p>传统的JavaScript输出模板通常是这样写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var world = &quot;liuMing&quot;;</div><div class="line">$(&quot;#result&quot;).append(&quot;Hello: &quot; + world + &quot;!&quot;);</div></pre></td></tr></table></figure></p>
<p>ES6引入了模板字符串来解决这个问题，用反引号 ` 标识，它可以当做普通字符串、也可以定义多行字符串，也可以在字符串中嵌入变量。<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/47264420.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 – 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot配置多个数据源]]></title>
      <url>http://jianwl.com/2016/09/05/SpringBoot%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上篇文章介绍<a href="http://jianwl.com/2016/09/04/SpringBoot%E9%9B%86%E6%88%90JOOQ/">SpringBoot集成JOOQ</a>，本文是其之上的延伸，将介绍在<code>SpringBoot</code>下，<code>JOOQ</code>如何配置多个数据源。</p>
<h3 id="为何需要配置多个数据库？"><a href="#为何需要配置多个数据库？" class="headerlink" title="为何需要配置多个数据库？"></a>为何需要配置多个数据库？</h3><p>默认情况下，<code>SpringBoot</code>使用的是单数据库配置（通过spring.datasource.*配置具体数据库连接信息）。对于绝大多数<code>SpringBoot</code>应用，这是符合其使用场景的，因为<code>Spring Boot</code>提倡的是微服务理念，每个应用对应一个单独的业务领域。但在某些特殊情况下，一个应用对应多个数据库又是无法避免的，例如实施数据库分库后原本单个数据库变为多个数据库。本文就结合实际代码介绍如何在单个<code>Boot</code>应用中配置多数据库，以及与之相关的<code>Druid</code>，<code>jOOQ</code>数据服务框架的配置改造。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>数据对象</strong></p>
<p><code>TEST库Admin表</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `nick_name` varchar(20) DEFAULT NULL,</div><div class="line">  `address` varchar(20) DEFAULT NULL,</div><div class="line">  `is_del` int(11) DEFAULT &apos;0&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `username` (`username`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><code>DADA库User表</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(11) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `is_del` int(11) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><strong>pom.xml</strong></p>
<p>可参考这篇文章<a href="http://jianwl.com/2016/09/04/SpringBoot%E9%9B%86%E6%88%90JOOQ/">SpringBoot集成JOOQ</a>的<code>pom.xml</code>,增加如下配置：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-5/43787554.jpg" alt=""></p>
<p><strong>自动生成代码</strong></p>
<p>在控制台，执行<code>mvn clean compile</code>，JOOQ会读取相应数据库的表生成对应的POJO。</p>
<p><strong>Druid连接池</strong></p>
<p>Druid是阿里巴巴开源的数据库连接池，提供了强大的监控支持，号称Java语言中最好的连接池。创建两个配置类分别注册对应TEST库和DADA库。<em>特别注意，声明多个库时，需要声明某一个库为默认装配实例，用注解@Primary，否则将报错，不能同时注册多个实例。</em></p>
<p><code>TestDbConfig.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class TestDbConfig &#123;</div><div class="line">    @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</div><div class="line">    @ConfigurationProperties(prefix = &quot;db.test&quot;)</div><div class="line">    @Primary</div><div class="line">    public DataSource dataSourceA() &#123;</div><div class="line">        return new DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    @Primary</div><div class="line">    public DataSourceTransactionManager transactionManagerA() &#123;</div><div class="line">        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</div><div class="line">        transactionManager.setDataSource(dataSourceA());</div><div class="line">        return transactionManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>DadaDbConfig.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class DadaDbConfig &#123;</div><div class="line">    @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</div><div class="line">    @ConfigurationProperties(prefix = &quot;db.dada&quot;)</div><div class="line">    public DataSource dataSourceB() &#123;</div><div class="line">        return new DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public DataSourceTransactionManager transactionManagerB() &#123;</div><div class="line">        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</div><div class="line">        transactionManager.setDataSource(dataSourceB());</div><div class="line">        return transactionManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>数据库参数配置：application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">db.test.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</div><div class="line">db.test.username=root</div><div class="line">db.test.password=</div><div class="line">db.test.initialSize=1</div><div class="line">db.test.minIdle=1</div><div class="line">db.test.maxActive=100</div><div class="line">db.test.filters=stat</div><div class="line"></div><div class="line">db.dada.url=jdbc:mysql://127.0.0.1:3306/dada?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</div><div class="line">db.dada.username=root</div><div class="line">db.dada.password=</div><div class="line">db.dada.initialSize=1</div><div class="line">db.dada.minIdle=1</div><div class="line">db.dada.maxActive=100</div><div class="line">db.dada.filters=stat</div></pre></td></tr></table></figure>
<p><strong>JOOQ配置</strong></p>
<p>特别注意，需要声明某一个数据库为默认装载数据库，用注解<code>@Primary</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class JooqConfig &#123;</div><div class="line">    @Bean</div><div class="line">    public DataSourceConnectionProvider dataSourceConnectionProviderA(</div><div class="line">            @Qualifier(&quot;dataSourceA&quot;) DataSource dataSourceA) &#123;</div><div class="line">        return new DataSourceConnectionProvider(</div><div class="line">                new TransactionAwareDataSourceProxy(dataSourceA));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SpringTransactionProvider transactionProviderA(</div><div class="line">            @Qualifier(&quot;transactionManagerA&quot;) DataSourceTransactionManager txManagerW) &#123;</div><div class="line">        return new SpringTransactionProvider(txManagerW);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public DataSourceConnectionProvider dataSourceConnectionProviderB(</div><div class="line">            @Qualifier(&quot;dataSourceB&quot;) DataSource dataSourceB) &#123;</div><div class="line">        return new DataSourceConnectionProvider(</div><div class="line">                new TransactionAwareDataSourceProxy(dataSourceB));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SpringTransactionProvider transactionProviderB(</div><div class="line">            @Qualifier(&quot;transactionManagerB&quot;) DataSourceTransactionManager txManagerB) &#123;</div><div class="line">        return new SpringTransactionProvider(txManagerB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Configuration</div><div class="line">    public static class DslContextConfig &#123;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordMapperProvider recordMapperProvider;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private Settings settings;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordListenerProvider[] recordListenerProviders;</div><div class="line"></div><div class="line">        @Autowired</div><div class="line">        private ExecuteListenerProvider[] executeListenerProviders;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private VisitListenerProvider[] visitListenerProviders;</div><div class="line"></div><div class="line">        @Bean</div><div class="line">        @Primary</div><div class="line">        public DefaultDSLContext dslContextA(@Qualifier(value = &quot;dataSourceConnectionProviderA&quot;) DataSourceConnectionProvider connectionProviderA,</div><div class="line">                                             @Qualifier(&quot;transactionProviderA&quot;) SpringTransactionProvider transactionProviderA) &#123;</div><div class="line">            return new DefaultDSLContext(configuration(connectionProviderA, transactionProviderA));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Bean</div><div class="line">        public DefaultDSLContext dslContextB(@Qualifier(value = &quot;dataSourceConnectionProviderB&quot;) DataSourceConnectionProvider connectionProviderB,</div><div class="line">                                             @Qualifier(&quot;transactionProviderB&quot;) SpringTransactionProvider transactionProviderB) &#123;</div><div class="line">            return new DefaultDSLContext(configuration(connectionProviderB, transactionProviderB));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private DefaultConfiguration configuration(ConnectionProvider connectionProvider, TransactionProvider transactionProvider) &#123;</div><div class="line">            DefaultConfiguration configuration = new DefaultConfiguration();</div><div class="line">            configuration.setSQLDialect(SQLDialect.MYSQL);</div><div class="line">            configuration.set(connectionProvider);</div><div class="line">            configuration.set(transactionProvider);</div><div class="line">            if (this.recordMapperProvider != null) &#123;</div><div class="line">                configuration.set(this.recordMapperProvider);</div><div class="line">            &#125;</div><div class="line">            if (this.settings != null) &#123;</div><div class="line">                configuration.set(this.settings);</div><div class="line">            &#125;</div><div class="line">            configuration.set(this.recordListenerProviders);</div><div class="line">            configuration.set(this.executeListenerProviders);</div><div class="line">            configuration.set(this.visitListenerProviders);</div><div class="line">            return configuration;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>事务配置</strong></p>
<p><code>SpringTransaction.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class SpringTransaction implements Transaction &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final TransactionStatus transactionStatus;</div><div class="line"></div><div class="line">    SpringTransaction(TransactionStatus transactionStatus) &#123;</div><div class="line">        this.transactionStatus = transactionStatus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TransactionStatus getTxStatus() &#123;</div><div class="line">        return this.transactionStatus;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>SpringTransactionProvider.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class SpringTransactionProvider implements TransactionProvider &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final PlatformTransactionManager transactionManager;</div><div class="line"></div><div class="line">    public SpringTransactionProvider(PlatformTransactionManager transactionManager) &#123;</div><div class="line">        this.transactionManager = transactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void begin(TransactionContext context) &#123;</div><div class="line">        TransactionDefinition definition = new DefaultTransactionDefinition(</div><div class="line">                TransactionDefinition.PROPAGATION_NESTED);</div><div class="line">        TransactionStatus status = this.transactionManager.getTransaction(definition);</div><div class="line">        context.transaction(new SpringTransaction(status));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void commit(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.commit(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void rollback(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.rollback(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private TransactionStatus getTransactionStatus(TransactionContext ctx) &#123;</div><div class="line">        SpringTransaction transaction = (SpringTransaction) ctx.transaction();</div><div class="line">        return transaction.getTxStatus();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此完成了，在SpringBoot下JOOQ配置多个数据源。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://emacoo.cn/blog/spring-boot-multi-db" target="_blank" rel="external">【Spring】如何在单个Boot应用中配置多数据库？</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell入门]]></title>
      <url>http://jianwl.com/2016/09/04/Shell%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>移动互联网应用的流行使得每周都有成百上千的应用部署在云平台上，而背后支撑这些云的正是<code>Linux</code>.<code>Linux</code>服务器上大量的数据处理和管理工作需要使用命令行和<code>Shell</code>脚本。</p>
<h3 id="命令实战"><a href="#命令实战" class="headerlink" title="命令实战"></a>命令实战</h3><p><strong>文件权限符</strong><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/30894252.jpg" alt=""></p>
<p>上述红色框圈出的部分是描述文件和目录权限码，具体含义如下（从左到右）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 第一个字符代表对象类型</div><div class="line">- 代表文件</div><div class="line">d 代表目录</div><div class="line">l 代表链接</div><div class="line">c 代表字符型设备</div><div class="line">b 代表块设备</div><div class="line">n 代表网络设备</div><div class="line"></div><div class="line">//之后有3组三个字符的码</div><div class="line">r 代表对象是可读的</div><div class="line">w 代表对象是可写的</div><div class="line">x 代表对象是可执行的</div><div class="line"></div><div class="line">// 3组三字码对应对象的三个安全级别</div><div class="line">对象的属主</div><div class="line">对象的属组</div><div class="line">系统其他用户</div></pre></td></tr></table></figure>
<p><code>案例1：修改所属主权限</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/88563757.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">u 代表用户</div><div class="line">g 代表组</div><div class="line">o 代表其他</div><div class="line">a 代表上述所有</div></pre></td></tr></table></figure>
<p><code>将该文件的三个安全级别均设为可读、写、执行</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/47093815.jpg" alt=""></p>
<p><code>案例2：改变所属关系</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/99885145.jpg" alt=""><br>改变所属关系用chown命令，语法为<code>chown owner:group file</code></p>
<p><code>查询所有组</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/8200700.jpg" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Linux命令行与Shell脚本编程大全（第2版）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot集成JOOQ]]></title>
      <url>http://jianwl.com/2016/09/04/SpringBoot%E9%9B%86%E6%88%90JOOQ/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前写过<a href="http://jianwl.com/2016/06/14/JOOQ%E5%85%A5%E9%97%A8%E7%AF%87/">JOOQ入门篇</a>和<a href="http://jianwl.com/2016/06/18/SpringBoot%E5%85%A5%E9%97%A8%E7%AF%87/">SpringBoot入门篇</a>这两篇文章，如果不了解JOOQ和SpringBoot可以先看看之前的文章。最近新入职，发现公司现有的项目是基于<code>SpringMVC和MyBatis</code>，SpringMVC需要设置各种配置文件，Mybatis需要生成各有<code>Mapper.xml</code>感觉挺繁琐的，所以想尝试引入<code>SpringBoot和JOOQ</code>框架。本文主要介绍SpringBoot如何集成JOOQ。</p>
<h3 id="SpringBoot集成JOOQ实战"><a href="#SpringBoot集成JOOQ实战" class="headerlink" title="SpringBoot集成JOOQ实战"></a>SpringBoot集成JOOQ实战</h3><p><strong>数据表</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `nick_name` varchar(20) DEFAULT NULL,</div><div class="line">  `address` varchar(20) DEFAULT NULL,</div><div class="line">  `is_del` int(11) DEFAULT &apos;0&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `username` (`username`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><strong>创建SpringBootJOOQ项目</strong></p>
<p>新建项目选择<code>spring Initializr</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/15159353.jpg" alt=""></p>
<p>勾选<code>JOOQ</code>，点击<code>Next</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/93706206.jpg" alt=""></p>
<p><strong>pom.xml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;springjooqdemo&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">    &lt;name&gt;SpringJOOQDemo&lt;/name&gt;</div><div class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">        &lt;relativePath/&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;properties&gt;</div><div class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">    &lt;/properties&gt;</div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;!--lombok--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.16.10&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--连接池--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.0.24&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--mysql connector java--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;5.1.39&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--springboot start--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-jooq&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">            &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;!--springboot end--&gt;</div><div class="line"></div><div class="line">        &lt;!-- utils start--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;3.4&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;commons-collections&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;3.2.2&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;guava&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;19.0&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.2.16&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;!-- utils end--&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;configuration&gt;</div><div class="line">                    &lt;skip&gt;true&lt;/skip&gt;</div><div class="line">                &lt;/configuration&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;executions&gt;</div><div class="line">                    &lt;execution&gt;</div><div class="line">                        &lt;phase&gt;generate-sources&lt;/phase&gt;</div><div class="line">                        &lt;goals&gt;</div><div class="line">                            &lt;goal&gt;add-source&lt;/goal&gt;</div><div class="line">                        &lt;/goals&gt;</div><div class="line">                        &lt;configuration&gt;</div><div class="line">                            &lt;sources&gt;</div><div class="line">                                &lt;source&gt;gensrc/main/java&lt;/source&gt;</div><div class="line">                            &lt;/sources&gt;</div><div class="line">                        &lt;/configuration&gt;</div><div class="line">                    &lt;/execution&gt;</div><div class="line">                &lt;/executions&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">        &lt;pluginManagement&gt;</div><div class="line">            &lt;plugins&gt;</div><div class="line">                &lt;plugin&gt;</div><div class="line">                    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</div><div class="line">                    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</div><div class="line">                    &lt;version&gt;$&#123;jooq.version&#125;&lt;/version&gt;</div><div class="line">                    &lt;executions&gt;</div><div class="line">                        &lt;execution&gt;</div><div class="line">                            &lt;goals&gt;</div><div class="line">                                &lt;goal&gt;generate&lt;/goal&gt;</div><div class="line">                            &lt;/goals&gt;</div><div class="line">                        &lt;/execution&gt;</div><div class="line">                    &lt;/executions&gt;</div><div class="line">                    &lt;dependencies&gt;</div><div class="line">                        &lt;dependency&gt;</div><div class="line">                            &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">                            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">                            &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</div><div class="line">                        &lt;/dependency&gt;</div><div class="line">                    &lt;/dependencies&gt;</div><div class="line">                    &lt;configuration&gt;</div><div class="line">                        &lt;generator&gt;</div><div class="line">                            &lt;generate&gt;</div><div class="line">                                &lt;pojos&gt;true&lt;/pojos&gt;</div><div class="line">                                &lt;fluentSetters&gt;true&lt;/fluentSetters&gt;</div><div class="line">                            &lt;/generate&gt;</div><div class="line">                        &lt;/generator&gt;</div><div class="line">                    &lt;/configuration&gt;</div><div class="line">                &lt;/plugin&gt;</div><div class="line">            &lt;/plugins&gt;</div><div class="line">        &lt;/pluginManagement&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line"></div><div class="line">    &lt;profiles&gt;</div><div class="line">    &lt;profile&gt;</div><div class="line">        &lt;id&gt;gensrc-clinic&lt;/id&gt;</div><div class="line">        &lt;activation&gt;</div><div class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</div><div class="line">        &lt;/activation&gt;</div><div class="line">        &lt;build&gt;</div><div class="line">            &lt;plugins&gt;</div><div class="line">                &lt;plugin&gt;</div><div class="line">                    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</div><div class="line">                    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</div><div class="line">                    &lt;configuration&gt;</div><div class="line">                        &lt;jdbc&gt;</div><div class="line">                            &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;</div><div class="line">                            &lt;url&gt;jdbc:mysql://127.0.0.1:3306/test&lt;/url&gt;</div><div class="line">                            &lt;user&gt;root&lt;/user&gt;</div><div class="line">                            &lt;password&gt;&lt;/password&gt;</div><div class="line">                        &lt;/jdbc&gt;</div><div class="line">                        &lt;generator&gt;</div><div class="line">                            &lt;database&gt;</div><div class="line">                                &lt;name&gt;org.jooq.util.mysql.MySQLDatabase&lt;/name&gt;</div><div class="line">                                &lt;includes&gt;.*&lt;/includes&gt;</div><div class="line">                                &lt;excludes&gt;</div><div class="line">                                    schema_version</div><div class="line">                                &lt;/excludes&gt;</div><div class="line">                                &lt;inputSchema&gt;test&lt;/inputSchema&gt;</div><div class="line">                            &lt;/database&gt;</div><div class="line">                            &lt;target&gt;</div><div class="line">                                &lt;packageName&gt;com.dada.test.domain&lt;/packageName&gt;</div><div class="line">                                &lt;directory&gt;$&#123;basedir&#125;/gensrc/main/java&lt;/directory&gt;</div><div class="line">                            &lt;/target&gt;</div><div class="line">                        &lt;/generator&gt;</div><div class="line">                    &lt;/configuration&gt;</div><div class="line">                &lt;/plugin&gt;</div><div class="line">            &lt;/plugins&gt;</div><div class="line">        &lt;/build&gt;</div><div class="line">    &lt;/profile&gt;</div><div class="line">    &lt;/profiles&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><strong>自动生成代码</strong></p>
<p>在控制台中执行<code>mvn clean compile</code>，jooq会读取相应数据库的表生成对应的POJO。执行之后，将生成以下代码<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/11303630.jpg" alt=""><br>具体连接的数据库是在<code>pom.xml</code>设置的：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/46566376.jpg" alt=""></p>
<p><strong>JOOQ配置</strong></p>
<p><code>JooqConfig.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">package com.dada.config;</div><div class="line"></div><div class="line">import org.jooq.*;</div><div class="line">import org.jooq.conf.Settings;</div><div class="line">import org.jooq.impl.DataSourceConnectionProvider;</div><div class="line">import org.jooq.impl.DefaultConfiguration;</div><div class="line">import org.jooq.impl.DefaultDSLContext;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.beans.factory.annotation.Qualifier;</div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.Primary;</div><div class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</div><div class="line">import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/9/2.</div><div class="line"> */</div><div class="line">@Configuration</div><div class="line">public class JooqConfig &#123;</div><div class="line">    @Bean</div><div class="line">    public DataSourceConnectionProvider dataSourceConnectionProviderA(</div><div class="line">            @Qualifier(&quot;dataSourceA&quot;) DataSource dataSourceA) &#123;</div><div class="line">        return new DataSourceConnectionProvider(</div><div class="line">                new TransactionAwareDataSourceProxy(dataSourceA));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SpringTransactionProvider transactionProviderA(</div><div class="line">            @Qualifier(&quot;transactionManagerA&quot;) DataSourceTransactionManager txManagerW) &#123;</div><div class="line">        return new SpringTransactionProvider(txManagerW);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Configuration</div><div class="line">    public static class DslContextConfig &#123;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordMapperProvider recordMapperProvider;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private Settings settings;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordListenerProvider[] recordListenerProviders;</div><div class="line"></div><div class="line">        @Autowired</div><div class="line">        private ExecuteListenerProvider[] executeListenerProviders;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private VisitListenerProvider[] visitListenerProviders;</div><div class="line"></div><div class="line">        @Bean</div><div class="line">        @Primary</div><div class="line">        public DefaultDSLContext dslContextA(@Qualifier(value = &quot;dataSourceConnectionProviderA&quot;) DataSourceConnectionProvider connectionProviderA,</div><div class="line">                                             @Qualifier(&quot;transactionProviderA&quot;) SpringTransactionProvider transactionProviderA) &#123;</div><div class="line">            return new DefaultDSLContext(configuration(connectionProviderA, transactionProviderA));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private DefaultConfiguration configuration(ConnectionProvider connectionProvider, TransactionProvider transactionProvider) &#123;</div><div class="line">            DefaultConfiguration configuration = new DefaultConfiguration();</div><div class="line">            configuration.setSQLDialect(SQLDialect.MYSQL);</div><div class="line">            configuration.set(connectionProvider);</div><div class="line">            configuration.set(transactionProvider);</div><div class="line">            if (this.recordMapperProvider != null) &#123;</div><div class="line">                configuration.set(this.recordMapperProvider);</div><div class="line">            &#125;</div><div class="line">            if (this.settings != null) &#123;</div><div class="line">                configuration.set(this.settings);</div><div class="line">            &#125;</div><div class="line">            configuration.set(this.recordListenerProviders);</div><div class="line">            configuration.set(this.executeListenerProviders);</div><div class="line">            configuration.set(this.visitListenerProviders);</div><div class="line">            return configuration;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>事务配置：SpringTransaction.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SpringTransaction implements Transaction &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final TransactionStatus transactionStatus;</div><div class="line"></div><div class="line">    SpringTransaction(TransactionStatus transactionStatus) &#123;</div><div class="line">        this.transactionStatus = transactionStatus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TransactionStatus getTxStatus() &#123;</div><div class="line">        return this.transactionStatus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>事务配置：SpringTransactionProvider.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class SpringTransactionProvider implements TransactionProvider &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final PlatformTransactionManager transactionManager;</div><div class="line"></div><div class="line">    public SpringTransactionProvider(PlatformTransactionManager transactionManager) &#123;</div><div class="line">        this.transactionManager = transactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void begin(TransactionContext context) &#123;</div><div class="line">        TransactionDefinition definition = new DefaultTransactionDefinition(</div><div class="line">                TransactionDefinition.PROPAGATION_NESTED);</div><div class="line">        TransactionStatus status = this.transactionManager.getTransaction(definition);</div><div class="line">        context.transaction(new SpringTransaction(status));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void commit(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.commit(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void rollback(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.rollback(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private TransactionStatus getTransactionStatus(TransactionContext ctx) &#123;</div><div class="line">        SpringTransaction transaction = (SpringTransaction) ctx.transaction();</div><div class="line">        return transaction.getTxStatus();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>数据库配置：TestDbConfig</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class TestDbConfig &#123;</div><div class="line"></div><div class="line">    @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</div><div class="line">    @ConfigurationProperties(prefix = &quot;db.test&quot;)</div><div class="line">    public DataSource dataSourceA() &#123;</div><div class="line">        return new DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public DataSourceTransactionManager transactionManagerA() &#123;</div><div class="line">        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</div><div class="line">        transactionManager.setDataSource(dataSourceA());</div><div class="line">        return transactionManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>配置数据库参数：application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.test.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</div><div class="line">db.test.username=root</div><div class="line">db.test.password=</div><div class="line">db.test.initialSize=1</div><div class="line">db.test.minIdle=1</div><div class="line">db.test.maxActive=100</div><div class="line">db.test.filters=stat</div></pre></td></tr></table></figure>
<p><strong>封装基础通用DAO库</strong></p>
<p><code>DbConstants.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface DbConstants &#123;</div><div class="line">	String DSL_TEST = &quot;dslContextA&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>TableConstants.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface TableConstants &#123;</div><div class="line">    Admin ADMIN = Tables.ADMIN;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractRepository.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public abstract class AbstractRepository implements TableConstants ,DbConstants&#123;</div><div class="line">    @Autowired</div><div class="line">    @Qualifier(DSL_TEST)</div><div class="line">    protected DSLContext dsl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractSingleReporitory.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(&quot;unused&quot;)</div><div class="line">public abstract class AbstractSingleRepository&lt;E extends Serializable&gt; extends AbstractRepository &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * OR-Mapping的基础映射</div><div class="line">     *</div><div class="line">     * @return (Object, Relationship)</div><div class="line">     */</div><div class="line">    protected abstract Pair&lt;Class&lt;E&gt;, Table&lt;? extends UpdatableRecord&gt;&gt; mapping();</div><div class="line"></div><div class="line">    protected Class&lt;E&gt; type() &#123;</div><div class="line">        return mapping().getLeft();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected Table&lt;? extends UpdatableRecord&gt; table() &#123;</div><div class="line">        return mapping().getRight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------查------------------------------------*/</div><div class="line">    public List&lt;E&gt; findAll() &#123;</div><div class="line">        return dsl.selectFrom(table()).fetchInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Optional&lt;E&gt; findOptionalById(Integer id) &#123;</div><div class="line">        return findOptional(_pk(), id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; List&lt;E&gt; find(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.selectFrom(table()).where(field.eq(value)).fetchInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; Optional&lt;E&gt; findOptional(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.selectFrom(table()).where(field.eq(value)).fetchOptionalInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Optional&lt;E&gt; findOptional(Condition condition) &#123;</div><div class="line">        return select(condition).fetchOptionalInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;E&gt; find(Condition... condition) &#123;</div><div class="line">        return select(condition).fetchInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;T extends E&gt; List&lt;T&gt; find(Condition condition, Class&lt;T&gt; subType) &#123;</div><div class="line">        return select(condition).fetchInto(subType);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public long countAll() &#123;</div><div class="line">        return dsl.selectCount().from(table()).fetchOneInto(long.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; long count(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.selectCount().from(table()).where(field.eq(value)).fetchOneInto(long.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long count(Condition... condition) &#123;</div><div class="line">        return dsl.selectCount().from(table()).where(condition).fetchOneInto(long.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public boolean existsById(Integer id) &#123;</div><div class="line">        return exists(_pk(), id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; boolean exists(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return count(field, value) &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean exists(Condition... condition) &#123;</div><div class="line">        return count(condition) &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean notExists(Condition... condition) &#123;</div><div class="line">        return count(condition) == 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------增------------------------------------*/</div><div class="line">    public boolean insert(E entity) &#123;</div><div class="line">        return record(entity, false).insert() == 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 新增记录并返回新增后的记录</div><div class="line">     *</div><div class="line">     * @apiNote 先执行insert, 再执行select</div><div class="line">     */</div><div class="line">    public &lt;T extends E&gt; E insertAndReturn(T entity) &#123;</div><div class="line">        return dsl.insertInto(table()).set(record(entity, false)).returning().fetchOne().into(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 新增记录并返回主键ID</div><div class="line">     *</div><div class="line">     * @apiNote 只执行insert</div><div class="line">     */</div><div class="line">    public &lt;T extends E&gt; Integer insertAndReturnId(T entity) &#123;</div><div class="line">        UpdatableRecord record = record(entity, false);</div><div class="line">        record.insert();</div><div class="line">        return record.getValue(_pk());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 保存一条记录, 如果主键/唯一键重复, 则更新, 否则新增</div><div class="line">     *</div><div class="line">     * @param saveMap 待保存记录</div><div class="line">     * @return 受影响行数</div><div class="line">     */</div><div class="line">    public Integer save(Map&lt;? extends Field&lt;?&gt;, ?&gt; saveMap) &#123;</div><div class="line">        if (saveMap == null || saveMap.isEmpty()) &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        return dsl.insertInto(table()).set(saveMap).onDuplicateKeyUpdate().set(saveMap).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------改------------------------------------*/</div><div class="line">    public &lt;T extends E&gt; boolean update(T entity) &#123;</div><div class="line">        return record(entity, true).update() == 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;T extends E&gt; E updateAndReturn(T entity) &#123;</div><div class="line">        UpdatableRecord&lt;?&gt; record = record(entity, true);</div><div class="line">        Integer id = record.getValue(_pk());</div><div class="line">        if (id == null) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;id can not be null for update&quot;);</div><div class="line">        &#125;</div><div class="line">        record.update();</div><div class="line">        return select(_pk().eq(id)).fetchOneInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param record     待更新的数据</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public int update(UpdatableRecord record, List&lt;Condition&gt; conditions) &#123;</div><div class="line">        return dsl.update(table()).set(record).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param record     待更新的数据</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public int update(UpdatableRecord record, Condition... conditions) &#123;</div><div class="line">        return dsl.update(table()).set(record).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param map        待更新的数据</div><div class="line">     * @param conditions 更新条件</div><div class="line">     * @apiNote 如果多个更新项之间有严格的先后顺序, 务必使用有序Map</div><div class="line">     */</div><div class="line">    public int update(Map&lt;? extends Field&lt;?&gt;, ?&gt; map, List&lt;Condition&gt; conditions) &#123;</div><div class="line">        return dsl.update(table()).set(map).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param map       待更新的数据</div><div class="line">     * @param condition 更新条件</div><div class="line">     * @apiNote 如果多个更新项之间有严格的先后顺序, 务必使用有序Map</div><div class="line">     */</div><div class="line">    public int update(Map&lt;? extends Field&lt;?&gt;, ?&gt; map, Condition condition) &#123;</div><div class="line">        return dsl.update(table()).set(map).where(condition).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 更新指定的字段</div><div class="line">     *</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public &lt;Z&gt; int update(Field&lt;Z&gt; field, Z value, List&lt;Condition&gt; conditions) &#123;</div><div class="line">        return dsl.update(table()).set(field, value).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 更新指定的字段</div><div class="line">     *</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public &lt;Z&gt; int update(Field&lt;Z&gt; field, Z value, Condition... conditions) &#123;</div><div class="line">        return dsl.update(table()).set(field, value).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------删------------------------------------*/</div><div class="line">    public boolean deleteById(Integer... ids) &#123;</div><div class="line">        if (ids.length == 1) &#123;</div><div class="line">            return dsl.delete(table()).where(_pk().eq(ids[0])).execute() == 1;</div><div class="line">        &#125;</div><div class="line">        return dsl.delete(table()).where(_pk().in(ids)).execute() == ids.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; int deleteBy(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.delete(table()).where(field.eq(value)).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    protected UpdatableRecord&lt;?&gt; record(E entity, boolean forUpdate) &#123;</div><div class="line">        Field&lt;Integer&gt; field = _pk();</div><div class="line">        UpdatableRecord&lt;?&gt; record = dsl.newRecord(table(), entity);</div><div class="line">        if (forUpdate &amp;&amp; field != null) &#123;</div><div class="line">            record.changed(field, false);</div><div class="line">        &#125;</div><div class="line">        // 如果实体属性为NULL,但数据库列为NOT NULL, 则允许数据库应用列的默认值</div><div class="line">        int size = record.size();</div><div class="line">        for (int i = 0; i &lt; size; i++)</div><div class="line">            if (record.getValue(i) == null &amp;&amp; !record.field(i).getDataType().nullable())</div><div class="line">                record.changed(i, false);</div><div class="line">        return record;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected List&lt;UpdatableRecord&lt;?&gt;&gt; records(Collection&lt;E&gt; entities, boolean forUpdate) &#123;</div><div class="line">        return entities.stream().map(entity -&gt; record(entity, forUpdate)).collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Field&lt;Integer&gt; _pk() &#123;</div><div class="line">        UniqueKey&lt;?&gt; key = table().getPrimaryKey();</div><div class="line">        if (key == null) &#123;</div><div class="line">            throw new DataAccessException(&quot;no primary key&quot;);</div><div class="line">        &#125;</div><div class="line">        Field&lt;?&gt;[] fields = key.getFieldsArray();</div><div class="line">        if (fields.length == 0) &#123;</div><div class="line">            throw new DataAccessException(&quot;no primary key&quot;);</div><div class="line">        &#125;</div><div class="line">        return fields[0].cast(Integer.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected SelectConditionStep&lt;? extends Record&gt; select(Condition... condition) &#123;</div><div class="line">        if (condition == null) &#123;</div><div class="line">            return dsl.selectFrom(table()).where(trueCondition());</div><div class="line">        &#125;</div><div class="line">        return dsl.selectFrom(table()).where(condition);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AdminReporitory.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Repository</div><div class="line">public class AdminRepository extends AbstractSingleRepository&lt;AdminRecord&gt;&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Pair&lt;Class&lt;AdminRecord&gt;, Table&lt;? extends UpdatableRecord&gt;&gt; mapping() &#123;</div><div class="line">        return Pair.of(AdminRecord.class, ADMIN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  根据id查询用户</div><div class="line">     */</div><div class="line">    public List&lt;Admin&gt; findById(Integer id)&#123;</div><div class="line">        AdminQO query = AdminQO.builder().id(id).build();</div><div class="line">        return dsl.select().from(ADMIN).where(query.conditions()).fetchInto(Admin.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>查询类：AdminQO.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Getter</div><div class="line">@Builder</div><div class="line">public class AdminQO implements Conditional&#123;</div><div class="line">    private Integer id;</div><div class="line">    private String username;</div><div class="line">    private String password;</div><div class="line">    private String nickName;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;Condition&gt; conditions() &#123;</div><div class="line">        List&lt;Condition&gt; conditions = Lists.newArrayList();</div><div class="line">        if(id != null)&#123;</div><div class="line">            conditions.add(ADMIN.ID.eq(id));</div><div class="line">        &#125;</div><div class="line">        if(username != null)&#123;</div><div class="line">            conditions.add(ADMIN.USERNAME.eq(username));</div><div class="line">        &#125;</div><div class="line">        if(password != null)&#123;</div><div class="line">            conditions.add(ADMIN.PASSWORD.eq(password));</div><div class="line">        &#125;</div><div class="line">        if(nickName != null)&#123;</div><div class="line">            conditions.add(ADMIN.NICK_NAME.eq(nickName));</div><div class="line">        &#125;</div><div class="line">        return conditions;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Conditional.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public interface Conditional &#123;</div><div class="line">    /**</div><div class="line">     * 获取查询条件</div><div class="line">     */</div><div class="line">    List&lt;Condition&gt; conditions();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 合并查询条件</div><div class="line">     */</div><div class="line">    default Condition toCondition() &#123;</div><div class="line">        return conditions().stream().reduce(Condition::and).orElse(trueCondition());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/9/4.</div><div class="line"> */</div><div class="line">@SpringBootTest</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">public class AdminTest &#123;</div><div class="line">    @Autowired</div><div class="line">    private AdminRepository adminRepository;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void findAdmin()&#123;</div><div class="line">        Integer id = 1;</div><div class="line">        List&lt;Admin&gt; admins = adminRepository.findById(id);</div><div class="line">        System.out.println(JSON.toJSON(admins));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，完成<code>SpringBoot</code>和<code>JOOQ</code>的集成。若要实现多个数据库，可以在<code>JooqConfig.class</code>中配置。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之解构]]></title>
      <url>http://jianwl.com/2016/09/03/ES6%E4%B9%8B%E8%A7%A3%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="什么是解构"><a href="#什么是解构" class="headerlink" title="什么是解构"></a>什么是解构</h3><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</p>
<h3 id="解构实战"><a href="#解构实战" class="headerlink" title="解构实战"></a>解构实战</h3><p><strong>模式匹配</strong></p>
<p><code>案例1：从数组中提取值对变量赋值</code></p>
<p>以前为变量赋值,只能直接指定值。<code>var a = 1; var b = 2; var c = 3;</code>,而ES6允许写成下面这样：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/62199557.jpg" alt=""></p>
<p>可以从数组中提取值，按照位置的对应关系对变量赋值。</p>
<p><code>案例2：输出指定参数</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/21789363.jpg" alt=""></p>
<p><code>案例3:获取除第一个元素外的数组元素</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/80722503.jpg" alt=""></p>
<p><code>案例4：部分解构成功</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/3511189.jpg" alt=""></p>
<p>变量解构不成功为<code>undefined</code>,数组解构不成功为<code>[]</code></p>
<p><code>案例5：指定默认值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/22448401.jpg" alt=""></p>
<p><strong>对象解构</strong></p>
<p><code>案例1：常规对象解构</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/33755818.jpg" alt=""></p>
<p>对象的解构与数组有一个重要的不同，数组的元素是按次序排列的，变量的取值由它的位置决定，而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。类似于<code>Java</code>的<code>Map</code></p>
<p><code>案例2：变量名与属性名不一致</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/50682927.jpg" alt=""></p>
<p>对象的解构赋值的内部机制是先找到同名属性，然后在赋给对应的变量，真正被赋值的是后者即<code>first和second变量</code></p>
<p><code>案例3：声明默认值</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/88888167.jpg" alt=""></p>
<p>默认值生效的条件的条件是，对象的属性值严格等于undefined;如下这种情况默认值是不会生效的。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/53746649.jpg" alt=""></p>
<p><strong>字符串解构</strong></p>
<p><code>案例1：字符串被转换成类似数组的对象</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/27671791.jpg" alt=""></p>
<p><code>案例2：字符串属性解构赋值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/67194660.jpg" alt=""></p>
<p><strong>函数解构</strong></p>
<p><code>案例1：常规函数解构</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/49058450.jpg" alt=""><br>函数add的参数实际上不是一个数组，而是通过解构得到的变量x和y；</p>
<p><code>案例2：函数默认值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/16643905.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 - 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之let和const命令]]></title>
      <url>http://jianwl.com/2016/09/03/ES6%E4%B9%8Blet%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有很多会问<code>ECMAScript和JavaScript</code>有什么关系？要讲清楚这个问题，需要回顾历史，<code>JavaScript</code>的创造者<code>Netscapt公司</code>将JavaScript交给国际标准化组织<code>ECMA</code>，希望这种语言能成为国际标准，而JavaScript本身已被注册为商标，为了保证这门语言的开发性和中立性，故<code>ECMA</code>将其取名为<code>ECMAScript</code>。因此，<code>ECMAScript</code>是<code>JavaScript</code>的规格，而<code>JavaScript</code>是<code>ECMAScript</code>的一种实现。</p>
<p>​    为了更好的熟悉ES6，将会了解其各个命令的用法。本文主要介绍<code>let</code>和<code>const</code>命令。</p>
<h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>1、let命令声明的变量只在所在的代码块内有效</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/4545513.jpg" alt=""></p>
<p><strong>应用场景</strong></p>
<p><code>var声明变量全局有效</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/7696539.jpg" alt=""></p>
<p><code>let声明变量，块级作用域有效</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/35110355.jpg" alt=""></p>
<hr>
<p>2、let声明变量不存在变量提升</p>
<p><code>let声明变量不存在提升</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/85962982.jpg" alt=""></p>
<p><code>var声明变量会提升，但没有赋值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/67602230.jpg" alt=""></p>
<hr>
<p>3、只要块级作用域内存在let命令，它所声明的变量就绑定这个区域，不再受外部影响。</p>
<p><code>暂时性死区</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/30615566.jpg" alt=""></p>
<p>代码中存在全局变量temp，但在块级作用域内用let又声明了一个局部变量temp，导致后者绑定到这个块级作用域，故let在声明变量前赋值会报错。<br><code>对比1:用var声明变量🤔</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/76273734.jpg" alt=""></p>
<p><code>对比2:用var变量声明🤔</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/50001912.jpg" alt=""></p>
<p>此处有疑问？对比1和对比2输出的结果为何不一致？</p>
<hr>
<p>4、let不允许在相同作用域内重复声明同一个变量</p>
<p><code>范例1❌</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/50645938.jpg" alt=""></p>
<p><code>范例2❌</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/25937104.jpg" alt=""></p>
<p><code>范例3✔️：非同一作用域，故正确</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/35044719.jpg" alt=""></p>
<hr>
<p>5、块级作用域</p>
<blockquote>
<p>为什么需要块级作用域? ES5只有全局作用域和函数作用域，没有块级作用域，可能造成以下不合理的场景？</p>
</blockquote>
<p><code>场景1：内存变量覆盖外层变量</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/65058203.jpg" alt=""></p>
<p><code>var</code>声明的变量提升，导致内层的<code>tep</code>变量覆盖了外层的<code>tep</code>变量。</p>
<p><code>场景2：计数的循环变量泄露为全局变量</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/74483314.jpg" alt=""></p>
<p><code>ES6使用块级作用域</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/2688486.jpg" alt=""></p>
<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><p>1、<code>const</code>是声明常量，声明之后，不能改变它的值。<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/3573997.jpg" alt=""></p>
<p>2、<code>const</code>声明变量，必须初始化；<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/51809303.jpg" alt=""></p>
<p>3、<code>const</code>的有效区为声明的块级作用域；<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/13875615.jpg" alt=""></p>
<p>4、<code>const</code>变量不能主动提升<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/9835388.jpg" alt=""></p>
<p>5、<code>const</code>变量不能重复声明<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/20566241.jpg" alt=""></p>
<p>6、<code>const</code>声明数组，地址不变，地址的内容可变<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/33621124.jpg" alt=""></p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>1、<code>window.global 等价于 global</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/18776994.jpg" alt=""></p>
<p>2、<code>let声明的变量不属于全局属性</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/69124545.jpg" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 - 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React入门实战]]></title>
      <url>http://jianwl.com/2016/09/02/React%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h3><p><code>React</code> 是一个<code>Facebook</code> 和<code>Instagram</code> 用来创建用户界面的<code>JavaScript</code> 库，其<code>Github</code>地址是<code>http://github.com/facebook/react</code>,截至目前已经获取48369个star，说明了<code>React</code>受到了很大的重视。</p>
<p><strong>React主要特点</strong></p>
<ol>
<li><code>作为UI</code>：<code>React</code>可以只作为视图<code>View</code>在MVC中使用，并且在已有项目中，很容易使用<code>React</code>开发新功能</li>
<li><code>虚拟DOM</code>:这是React的一个亮点，可以很好地优化视图的渲染和刷新。以前我们更新视图时，需要先清空<code>DOM</code>容器中的内容，然后将最新的<code>DOM</code>和数据追加到容器中，现在<code>React</code>将这一操作放进内存中，<code>React</code>认为内存的操作远比视图全部更新来的高效。</li>
<li><code>数据流</code>：<code>React</code>实现了单向的数据流，并相对于传统的数据绑定而言，<code>React</code>更加灵活，便捷。</li>
</ol>
<h3 id="React-实战"><a href="#React-实战" class="headerlink" title="React 实战"></a>React 实战</h3><p><strong>HTML模板</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">  	// ** our code goes here !**</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>scipt标签</code>的<code>type</code>属性为<code>type/babel</code>，这是因为React独有的JSX语法与<code>JavaScript</code>不兼容。上述代码一共用了三个库：<code>react.js</code>、<code>react-dom.js</code>、<code>Browser.js</code>，他们必须首先加载，<code>react.js</code>是<code>React</code>的核心库，<code>react-dom.js</code>是提供与<code>DOM</code>相关的功能，<code>Browser.js</code>是将JSX语法转化为<code>JavaScript</code>语法,这一步很耗时，实际上线应该放到服务器完成。</p>
<p><strong>Render &amp; JSX</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">      ReactDOM.render(</div><div class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</div><div class="line">        document.getElementById(&apos;example&apos;)</div><div class="line">      );</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>JSX</code>是React模板语法，它允许在<code>JavaScript</code>中插入<code>HTML语言</code>，<code>ReactDOM.reader()</code>用于将模板转化为<code>HTML</code>语言，并插入到指定的<code>DOM</code>节点。</p>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-2/93411408.jpg" alt=""></p>
<p><strong>在JSX中使用JavaScript</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">      var names = [&apos;Alice&apos;, &apos;Emily&apos;, &apos;Kate&apos;];</div><div class="line">      ReactDOM.render(</div><div class="line">        &lt;div&gt;</div><div class="line">        &#123;</div><div class="line">          names.map(function (name) &#123;</div><div class="line">            return &lt;div&gt;Hello, &#123;name&#125;!&lt;/div&gt;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">        &lt;/div&gt;,</div><div class="line">        document.getElementById(&apos;example&apos;)</div><div class="line">      );</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>JSX</code>的基本语法规则：遇到HTML标签（以 <code>&lt;</code>开头），就用<code>HTML</code>规则解析，遇到代码块(以<code>{</code>开头)，就用<code>JavaScript</code>解析。</p>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-2/82806925.jpg" alt=""></p>
<hr>
<p><strong>组件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">      var HelloMessage = React.createClass(&#123;</div><div class="line">        render: function() &#123;</div><div class="line">          return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      ReactDOM.render(</div><div class="line">        &lt;HelloMessage name=&quot;John&quot; /&gt;,</div><div class="line">        document.getElementById(&apos;example&apos;)</div><div class="line">      );</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>React</code>运行将代码封装成组件，然后像插入普通<code>HTML</code>标签一样，在网页中插入这个组件，<code>React.createClass</code>用于生成一个组件类。注意，组件类的第一个字母必须大写，否则会报错，比如<code>HelloMessage</code>不能写成<code>helloMessage</code>,另外，组件类只能包含一个顶层标签，否则也会报错。</p>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-2/87496917.jpg" alt=""></p>
<p>未完待续….</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><code>React Native</code> 入门与实战</li>
</ul>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external"><code>React</code>入门实例教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iTerm2工具介绍]]></title>
      <url>http://jianwl.com/2016/09/01/iTerm2%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h3 id="iTerm2简介"><a href="#iTerm2简介" class="headerlink" title="iTerm2简介"></a>iTerm2简介</h3><p><code>iTerm2</code>是Mac下最好的终端工具，为了在工作中，更高效的利用它，让我们来熟悉这个工具。以下将介绍其常用的功能。</p>
<p><strong>查询</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/36067323.jpg" alt=""></p>
<p>场景：<code>用于搜索关键字，按Tab键可以自动补全单词，且补全的单词可以直接粘贴到他处</code></p>
<p>快捷键：<code>command + f</code></p>
<p><strong>切屏</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/33677033.jpg" alt=""></p>
<p>场景描述：<code>水平分割，不想新建窗口，将一个窗口分割为上下两部分</code></p>
<p>快捷键：<code>command + shift + d</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/28476179.jpg" alt=""></p>
<p>场景描述：<code>垂直分割</code></p>
<p>快捷键：<code>command + d</code></p>
<p><strong>快速呼出<code>iTerm2</code></strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/40272002.jpg" alt=""></p>
<p>场景：<code>在浏览网页时，将控制台悬浮于网页之上，且呈现透明状</code></p>
<p><code>快捷键设置</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/57025295.jpg" alt=""></p>
<p>快捷键：<code>command + \</code>快速呼出<code>iTerm2</code></p>
<p><strong>全屏切换</strong></p>
<p>快捷键：<code>command + enter</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.iterm2.com/features.html" target="_blank" rel="external">iTerm2官方文档</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac技巧]]></title>
      <url>http://jianwl.com/2016/09/01/Mac%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/46842244.jpg" alt=""></p>
<p>手势：<code>三个手指向上滑</code></p>
<p>快捷键：<code>F3</code></p>
<h3 id="双屏"><a href="#双屏" class="headerlink" title="双屏"></a>双屏</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/77570248.jpg" alt=""></p>
<p>操作：<code>鼠标长按绿色按钮</code></p>
<h3 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h3><ul>
<li>截取全屏：<code>command + shift + 3</code></li>
<li>自由截屏：<code>command + shift + 4</code></li>
<li>所截图图片不存于桌面，而存于剪切板中: <code>command +control + shift + 3</code></li>
<li>标注截屏重点: <code>打开图片，点击小工具箱</code></li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/78386366.jpg" alt=""></p>
<h3 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h3><p>Mac应用有时会出现无法响应的问题，强制退出没有任何效果，可以使用任务管理器，强制杀死某些进程。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/6728135.jpg" alt=""></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/65099399.jpg" alt=""></p>
<h3 id="删除文件-amp-清空垃圾箱"><a href="#删除文件-amp-清空垃圾箱" class="headerlink" title="删除文件&amp;清空垃圾箱"></a>删除文件&amp;清空垃圾箱</h3><p>删除文件：<code>command + delete</code></p>
<p>清空垃圾箱: <code>command + shift + delete</code></p>
<h3 id="浏览器中快速到顶部和尾部"><a href="#浏览器中快速到顶部和尾部" class="headerlink" title="浏览器中快速到顶部和尾部"></a>浏览器中快速到顶部和尾部</h3><p>顶部： <code>command + ⬆️</code></p>
<p>尾部：<code>command + ⬇️</code></p>
<h3 id="Spotlight-查找文件"><a href="#Spotlight-查找文件" class="headerlink" title="Spotlight 查找文件"></a>Spotlight 查找文件</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-19%20%E4%B8%8B%E5%8D%885.36.24.png" alt=""></p>
<p>快捷键： <code>command + space</code></p>
<h3 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h3><p>场景：<code>有时候离开座位，又不想让别人看到你电脑上的资料，选择让电脑休眠,特别注意了，此快捷键容易与关机的快捷键command + ctrl + power混淆</code></p>
<p>快捷键：<code>command + alt + power</code></p>
<h3 id="去除格式粘贴"><a href="#去除格式粘贴" class="headerlink" title="去除格式粘贴"></a>去除格式粘贴</h3><p>场景：<code>有时候复制一段文字，文字中存在超链接，字体等等格式，如果我只想粘贴纯文本信息，怎么办呢？</code></p>
<p>快捷键: <code>command + shift + V</code></p>
<h3 id="浏览网页时，快速定位到地址栏"><a href="#浏览网页时，快速定位到地址栏" class="headerlink" title="浏览网页时，快速定位到地址栏"></a>浏览网页时，快速定位到地址栏</h3><p>快捷键：<code>command +L</code></p>
<h3 id="关闭应用程序"><a href="#关闭应用程序" class="headerlink" title="关闭应用程序"></a>关闭应用程序</h3><p>场景：<code>以往关闭程序，都是通过双击图标按钮点击退出，发现配合切换程序Commad + Tab来使用关闭程序command + Q效果非常好。</code></p>
<p>快捷键：<code>command + Q</code></p>
<h3 id="在Finder中打开当前目录文件"><a href="#在Finder中打开当前目录文件" class="headerlink" title="在Finder中打开当前目录文件"></a>在Finder中打开当前目录文件</h3><p>场景：<code>在终端输入 open + . 可以在Finder中开发当前目录</code></p>
<h3 id="三指拖动文件设置"><a href="#三指拖动文件设置" class="headerlink" title="三指拖动文件设置"></a>三指拖动文件设置</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/11683794.jpg" alt=""></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/63458286.jpg" alt=""></p>
<h3 id="显示资源库"><a href="#显示资源库" class="headerlink" title="显示资源库"></a>显示资源库</h3><p>Mac 10.7系统开始，可能是出于系统安全考虑，默认隐藏用户文件夹下的资源库文件夹</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/6579604.jpg" alt=""></p>
<p>操作：在终端下运行:<code>ln -s ~/Library/ ~/资源库</code>,创建资源库快捷方式</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/26224025.jpg" alt=""></p>
<h3 id="快速呼出emoji表情"><a href="#快速呼出emoji表情" class="headerlink" title="快速呼出emoji表情"></a>快速呼出emoji表情</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/67739359.jpg" alt=""></p>
<p>快捷键:<code>command + control + 空格键</code></p>
<h3 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h3><p>场景：<code>全屏和退出全屏是一个平时比较常用的功能</code></p>
<p>快捷键：<code>command + control + f</code></p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.cnblogs.com/chijianqiang/archive/2013/01/25/mactech.html" target="_blank" rel="external">池建强的Blog</a></li>
<li><a href="http://thiswan.coding.me/technology/how-use-qiniu-to-hexo/" target="_blank" rel="external">使用七牛云做Hexo图床</a></li>
<li><a href="http://wdxtub.com/2016/02/18/mac-tips/" target="_blank" rel="external">Mac使用技巧</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之索引]]></title>
      <url>http://jianwl.com/2016/08/28/MYSQL%E4%B9%8B%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>索引是存储引擎用于快速找到记录的一种数据结构</p>
<h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ul>
<li>让服务器快速定位到表的指定位置</li>
<li>大大减少了服务器需要扫描的数据量</li>
<li>帮助服务器避免排序和临时表</li>
<li>将随机IO变为顺序IO</li>
</ul>
<h3 id="高性能索引策略"><a href="#高性能索引策略" class="headerlink" title="高性能索引策略"></a>高性能索引策略</h3><p>1、<code>查询中索引列不能是表达式的一部分，否则MYSQL不会使用索引</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT admin_id FROM test.admin where nickname = &apos;张三&apos;</div></pre></td></tr></table></figure>
<p>2、<code>有时候需要索引很长的字符列，这会让索引变得大而慢，通过索引开始的部分字符，可以大大节约索引空间，从而提高索引效率。但这样会降低索引的选择性，索引的选择性指，不重复的索引值和数据表的记录总数的比值，选择性越高，查询效率越高。唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查询各个城市出现的次数</div><div class="line">mysql&gt; SELECT COUNT(*) AS cnt,city FROM test.city_demo</div><div class="line"></div><div class="line"># 查询各个城市前几个字母出现的次数</div><div class="line">mysql&gt; SELECT COUNT(*) AS cnt,LEFT(city,3) FROM test.city_demo</div><div class="line"></div><div class="line"># 增加city的查询长度，直至这个前缀的选择性接近于完整的选择性。</div><div class="line">mysql&gt; SELECT COUNT(*) AS cnt,LEFT(city,7) FROM test.city_demo</div></pre></td></tr></table></figure>
<p><strong>创建前缀索引</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE test.city_demo ADD KEY(city(7))</div></pre></td></tr></table></figure>
<p>前缀索引是一种能使索引更小，更快的有效方法，但另外一方面前缀索引无法做<code>ORDER BY、GROUP BY 操作</code></p>
<p>3、<code>选择合适的索引列顺序，将选择性最高的列放到索引最前列。</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT * FROM payment WHERE staff_id = 2 AND customer_id = 584</div><div class="line"></div><div class="line"># 跑一些查询确定这个表中值得分布 sum(staff_id = 2)=7992</div><div class="line">mysql&gt; SELECT SUM(staff_id = 2) FROM payment</div><div class="line"></div><div class="line"># sum(customer_id = 584)=30</div><div class="line">mysql&gt; SELECT SUM(customer_id = 584) FROM payment </div><div class="line"></div><div class="line"># 通过以上结果 我们可以优化查询</div><div class="line">mysql&gt; SELECT * FROM payment WHERE customer_id = 584 AND  staff_id = 2</div></pre></td></tr></table></figure>
<p>4、<code>移除重复索引，MYSQL允许在相同列上创建多个索引，重复索引会影响性能，发现后应该立即移除</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) NOT NULL PRIMARY KEY,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  UNIQUE(id),</div><div class="line">  INDEX(id)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p>一些经验不足的用户可能想创建一个主键，先加上一个唯一限制，然后在加上索引供查询使用，事实上，MYSQL的唯一键和主键限制都是通过索引来实现的。因此上面的写法实际上在相同列上创建了三个重复的索引。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>高性能MYSQL(第三版)</li>
</ul>
<p>未完待续…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis入门]]></title>
      <url>http://jianwl.com/2016/08/28/Mybatis%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MyBatis</code>是一个<code>Java</code>持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来。与<code>JDBC</code>相比，<code>Mybatis</code>简化了相关代码：<code>SQL</code>语句在一行代码就能执行，<code>MyBatis</code>提供了一个映射引擎，声明式的把<code>SQL</code>语句执行结果与对象数映射起来。</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">     &lt;!--mybatis--&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;3.4.1&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;6.0.3&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;4.12&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line">     &lt;!--Gson--&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;gson&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;2.7&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<p><code>数据模型：Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Admin &#123;            </div><div class="line">    private Integer id;         </div><div class="line">    private String username;    </div><div class="line">    private String password;    </div><div class="line">    private Date createdTime;   </div><div class="line">    private Date updatedTime; </div><div class="line">    </div><div class="line">    // 此处省略Getter &amp; Setter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>接口：AdminDao.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface AdminDao &#123;</div><div class="line">    Admin getAdminById(SqlSession sqlSession,Integer id);</div><div class="line">    Integer saveAdmin(SqlSession sqlSession,Admin admin);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>映射类：AdminMapper.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface AdminMapper &#123;</div><div class="line">    Admin getAdminById(Integer id);</div><div class="line">    Integer saveAdmin(Admin admin);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>接口实现类:AdminDaoImpl.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class AdminDaoImpl implements AdminDao &#123;</div><div class="line">    @Override</div><div class="line">    public Admin getAdminById(SqlSession sqlSession, Integer id) &#123;</div><div class="line">        AdminMapper mapper = sqlSession.getMapper(AdminMapper.class);</div><div class="line">        return mapper.getAdminById(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Integer saveAdmin(SqlSession sqlSession, Admin admin) &#123;</div><div class="line">        AdminMapper mapper = sqlSession.getMapper(AdminMapper.class);</div><div class="line">        return mapper.saveAdmin(admin);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>生成sqlSessionFactory工具类:MybatisUtil.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class MybatisUtil &#123;</div><div class="line">    private static SqlSessionFactory sqlSessionFactory = null;</div><div class="line">    private final static String LOCAL_JDBC = &quot;jdbc/mybatis-conf.xml&quot;;</div><div class="line">    static &#123;</div><div class="line">        System.out.println(&quot;====INIT Mybatis BEGIN ====&quot;);</div><div class="line">        Reader rdr;</div><div class="line">        try &#123;</div><div class="line">            rdr = Resources.getResourceAsReader(LOCAL_JDBC);</div><div class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(rdr);</div><div class="line">            rdr.close();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;====INIT Mybatis END ====&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static SqlSessionFactory getSqlSessionFactory()&#123;</div><div class="line">        return sqlSessionFactory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MyBatis核心配置：jdbc/mybatis-conf.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE configuration</div><div class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;properties resource=&quot;mysql/config.properties&quot;&gt;&lt;/properties&gt;</div><div class="line"></div><div class="line">    &lt;!--别名--&gt;</div><div class="line">    &lt;typeAliases&gt;</div><div class="line">        &lt;typeAlias type=&quot;domain.Admin&quot; alias=&quot;Admin&quot;/&gt;</div><div class="line">    &lt;/typeAliases&gt;</div><div class="line"></div><div class="line">    &lt;!--3套配置环境,具体使用那一套可由参数设置--&gt;</div><div class="line">    &lt;environments default=&quot;$&#123;environment&#125;&quot;&gt;</div><div class="line">        &lt;environment id=&quot;local&quot;&gt;</div><div class="line">            &lt;transactionManager type=&quot;$&#123;transactionManager_type&#125;&quot;/&gt;</div><div class="line">            &lt;dataSource type=&quot;$&#123;datasource_type&#125;&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;hermes-url&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;hermes-username&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;hermes-password&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumIdleConnections&quot; value=&quot;$&#123;jdbc.minPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumActiveConnections&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolTimeToWait&quot; value=&quot;$&#123;jdbc.maxIdleTime&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingQuery&quot; value=&quot;SELECT NOW()&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingEnabled&quot; value=&quot;true&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">        &lt;environment id=&quot;development&quot;&gt;</div><div class="line">            &lt;transactionManager type=&quot;$&#123;transactionManager_type&#125;&quot;/&gt;</div><div class="line">            &lt;dataSource type=&quot;$&#123;datasource_type&#125;&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;interact-url&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;hermes-username&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;hermes-password&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumIdleConnections&quot; value=&quot;$&#123;jdbc.minPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumActiveConnections&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolTimeToWait&quot; value=&quot;$&#123;jdbc.maxIdleTime&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingQuery&quot; value=&quot;SELECT NOW()&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingEnabled&quot; value=&quot;true&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">        &lt;environment id=&quot;production&quot;&gt;</div><div class="line">            &lt;transactionManager type=&quot;$&#123;transactionManager_type&#125;&quot;/&gt;</div><div class="line">            &lt;dataSource type=&quot;$&#123;datasource_type&#125;&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;hermes-url&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;hermes-username&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;hermes-password&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumIdleConnections&quot; value=&quot;$&#123;jdbc.minPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumActiveConnections&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolTimeToWait&quot; value=&quot;$&#123;jdbc.maxIdleTime&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingQuery&quot; value=&quot;SELECT NOW()&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingEnabled&quot; value=&quot;true&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">    &lt;/environments&gt;</div><div class="line"></div><div class="line">    &lt;!--映射表--&gt;</div><div class="line">    &lt;mappers&gt;</div><div class="line">        &lt;mapper resource=&quot;mapper/AdminMapper.xml&quot;/&gt;</div><div class="line">    &lt;/mappers&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p><code>数据库参数值：mysql/config.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">environment=local</div><div class="line">transactionManager_type=JDBC</div><div class="line">datasource_type=POOLED</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line"></div><div class="line">jdbc.initialPoolSize=1</div><div class="line">jdbc.minPoolSize=1</div><div class="line">jdbc.maxPoolSize=5</div><div class="line">jdbc.acquireIncrement=1</div><div class="line">jdbc.maxIdleTime=200</div><div class="line">jdbc.checkoutTimeout=3000</div><div class="line"></div><div class="line">hermes-url=jdbc:mysql://localhost/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</div><div class="line">hermes-username=root</div><div class="line">hermes-password=</div></pre></td></tr></table></figure>
<p><code>XML映射文件:mapper/AdminMapper.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;mapper namespace=&quot;mapper.AdminMapper&quot;&gt;</div><div class="line">    &lt;resultMap type=&quot;Admin&quot; id=&quot;admin&quot;&gt;</div><div class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</div><div class="line">        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</div><div class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;</div><div class="line">        &lt;result property=&quot;createdTime&quot; column=&quot;created_time&quot;/&gt;</div><div class="line">        &lt;result property=&quot;updatedTime&quot; column=&quot;updated_time&quot;/&gt;</div><div class="line">    &lt;/resultMap&gt;</div><div class="line"></div><div class="line">    &lt;select id=&quot;getAdminById&quot; parameterType=&quot;integer&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM admin</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div><div class="line"></div><div class="line">    &lt;insert id=&quot;saveAdmin&quot; parameterType=&quot;domain.Admin&quot;&gt;</div><div class="line">        INSERT INTO ADMIN(username)</div><div class="line">        VALUES (#&#123;username&#125;)</div><div class="line">    &lt;/insert&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<p><code>数据库创建表</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><code>Test测试样例</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class AdminTest &#123;</div><div class="line">   private static final SqlSessionFactory sqlSessionFactory = MybatisUtil.getSqlSessionFactory();</div><div class="line">   AdminDao adminDao = new AdminDaoImpl();</div><div class="line"></div><div class="line">   @Test</div><div class="line">   public void saveAdmin()&#123;</div><div class="line">      Admin admin = new Admin();</div><div class="line">      admin.setUsername(&quot;吴芳&quot;);</div><div class="line">      admin.setPassword(&quot;123456&quot;);</div><div class="line">      SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">      adminDao.saveAdmin(sqlSession,admin);</div><div class="line">      sqlSession.commit();</div><div class="line">      sqlSession.close();</div><div class="line">      System.out.println(&quot;INSERT ADMIN&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Test</div><div class="line">   public void getAdminById()&#123;</div><div class="line">      Integer id = 1;</div><div class="line">      SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">      Admin admin = adminDao.getAdminById(sqlSession,id);</div><div class="line">      System.out.println(new Gson().toJson(admin));</div><div class="line">      sqlSession.close();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照以上步骤，我们已经把Mybatis的运行环境搭建起来了，后续将研究MyBatis的特性。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/MyBatis" target="_blank" rel="external">Mybatis维基百科</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis之动态SQL]]></title>
      <url>http://jianwl.com/2016/08/27/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81SQL/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章<a href="http://jianwl.com/2016/08/28/Mybatis%E5%85%A5%E9%97%A8/">MyBatis入门</a>，已经搭建好了<code>Mybatis</code>的运行环境，这一章主要学习动态SQL。文章只贴出主要SQL。</p>
<p><code>修改数据模型为：Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Admin &#123;</div><div class="line">    private Integer id;</div><div class="line">    private String username;</div><div class="line">    private String password;</div><div class="line">    private String nickName;</div><div class="line">    private String address;</div><div class="line">    private Integer isDel;</div><div class="line">    private Date createdTime;</div><div class="line">    private Date updatedTime;</div><div class="line">    </div><div class="line">    //此处省略 Getter &amp; Setter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>创建数据表admin</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `nick_name` varchar(20) DEFAULT NULL,</div><div class="line">  `address` varchar(20) DEFAULT NULL,</div><div class="line">  `is_del` int(11) DEFAULT &apos;0&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>场景1:查询条件有多个字段,根据不为空的字段查询记录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByUserNameOrNickname&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">    SELECT * FROM admin</div><div class="line">    WHERE 1=1</div><div class="line">    &lt;if test=&quot;nickName != null&quot;&gt;</div><div class="line">        AND nick_name = #&#123;nickName&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">    &lt;if test=&quot;username != null&quot;&gt;</div><div class="line">        AND username = #&#123;username&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>查询条件为多个字段，且字段可能存在也可能不存在，该场景下适用<code>if 判断语句</code></p>
<p><strong>场景2：有多个查询条件，只想执行其中某一个执行条件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByAnyOneCondition&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">    SELECT * FROM admin</div><div class="line">    WHERE 1=1</div><div class="line">    &lt;choose&gt;</div><div class="line">        &lt;when test=&quot;username != null&quot;&gt;</div><div class="line">            AND username = #&#123;username&#125;</div><div class="line">        &lt;/when&gt;</div><div class="line">        &lt;when test=&quot;nickName != null&quot;&gt;</div><div class="line">            AND nick_name = #&#123;nickName&#125;</div><div class="line">        &lt;/when&gt;</div><div class="line">        &lt;otherwise&gt;</div><div class="line">            AND is_del = 0</div><div class="line">        &lt;/otherwise&gt;</div><div class="line">    &lt;/choose&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>思想类似于<code>Java</code>中的<code>switch case default</code>，只能选择其中一个条件执行。</p>
<p><strong>场景3：不存在匹配条件时，消除多余WHERE导致的错误</strong></p>
<p><code>样例</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByUserNameOrNickname&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT * FROM admin</div><div class="line">        WHERE </div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;</div><div class="line">             nick_name = #&#123;nickName&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;</div><div class="line">            AND username = #&#123;username&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure>
<p>上述<code>SQL</code>是有问题的，当<code>nickName不存在，username存在时，多余一个AND关键字；当nickName和username均不存在时多余一个WHERE关键字</code>,如何解决？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByUserNameOrNickname&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT * FROM admin</div><div class="line">        &lt;where&gt;</div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;</div><div class="line">             nick_name = #&#123;nickName&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;</div><div class="line">            AND username = #&#123;username&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>通过<code>&lt;where&gt;&lt;/where&gt;,它能够识别如果nickName不存在，username存在时，将AND关键字剔除，当nickName和username均不存在时，将where字段剔除</code></p>
<p><strong>场景4：用于剔除不必要的关键字或字符串</strong></p>
<p><code>样例</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> &lt;update id=&quot;updateById&quot; parameterType=&quot;domain.Admin&quot;&gt;</div><div class="line">    UPDATE admin</div><div class="line">    &lt;set&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;address != null&quot;&gt;address=#&#123;address&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;nick_name=#&#123;nickName&#125;&lt;/if&gt;</div><div class="line">    &lt;/set&gt;</div><div class="line">    WHERE id = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<p>上述<code>SQL</code>按理说是有问题的，<code>当nickName不存在时，其他字段均存在时，多余逗号将导致SQL错误</code>，但实际执行却不报错，这点还没搞清楚为何？</p>
<p>官方文档说通过<code>trim可以剔除多余的关键字标签</code>,故进行以下实验</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;update id=&quot;updateById&quot; parameterType=&quot;domain.Admin&quot;&gt;</div><div class="line">    UPDATE admin</div><div class="line">    &lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;password != null&quot;&gt;,password=#&#123;password&#125;&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;address != null&quot;&gt;,address=#&#123;address&#125;&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;,nick_name=#&#123;nickName&#125;&lt;/if&gt;</div><div class="line">    &lt;/trim&gt;</div><div class="line">    WHERE id = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<p><code>当username不存在，其余字段均存在时，trim并不能剔除多余的逗号，导致SQL报错,故trim字段不能剔除多余逗号</code>，也许是我操作有误，这点之后继续研究。</p>
<p><strong>场景5：遍历</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByAdmins&quot; parameterType=&quot;java.util.List&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM admin</div><div class="line">        WHERE id in</div><div class="line">            &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; </div><div class="line">            open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</div><div class="line">                #&#123;item.id&#125;</div><div class="line">            &lt;/foreach&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p><code>open为前缀，close为后缀,separator为每个参数分隔符故遍历的结果为:(id1,id2,id3,id4)这种形式的结果</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="external">Dynamic SQL</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot集成Swagger]]></title>
      <url>http://jianwl.com/2016/08/24/SpringBoot%E9%9B%86%E6%88%90Swagger/</url>
      <content type="html"><![CDATA[<h3 id="Swagger是什么？"><a href="#Swagger是什么？" class="headerlink" title="Swagger是什么？"></a>Swagger是什么？</h3><p><code>swagger</code> 是最早也是最成熟的 API 接口设计工具。它可以使用 <code>json/yaml</code> 来描述 API 的接口，使用 <code>swagger</code> 来设计和描述 API 有很多好处：API 的文档化，API 的接口的可视化，各种语言的客户端类库的自动生成，甚至服务端代码也能够自动生成。包括代码生成工具在内的完整而成熟的工具链是 <code>swagger</code> 的杀手锏，也是众多 API 厂商优先选择 <code>swagger</code> 的一个重要因素。</p>
<h3 id="实战集成Swagger"><a href="#实战集成Swagger" class="headerlink" title="实战集成Swagger"></a>实战集成Swagger</h3><p><strong>1、修改pom.xml，添加maven依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!--springboot--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">	&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;!--swagger--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.5.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.5.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p><strong>2、添加Swagger配置类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableSwagger2</div><div class="line">public class SwaggerConfig &#123;</div><div class="line">    /**</div><div class="line">     * 可以定义多个组，比如本类中定义把hello1和hello2区分开了</div><div class="line">     * （访问页面就可以看到效果了）</div><div class="line">     */</div><div class="line">    @Bean</div><div class="line">    public Docket helloApi1() &#123;</div><div class="line">        return new Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .groupName(&quot;hello1&quot;)</div><div class="line">                .genericModelSubstitutes(DeferredResult.class)</div><div class="line">                .useDefaultResponseMessages(false)</div><div class="line">                .forCodeGeneration(true)</div><div class="line">                .pathMapping(&quot;/&quot;)// base，最终调用接口后会和paths拼接在一起</div><div class="line">                .select()</div><div class="line">                .paths(or(regex(&quot;/hello1/.*&quot;)))//过滤的接口</div><div class="line">                .build()</div><div class="line">                .apiInfo(getInfo1());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private ApiInfo getInfo1() &#123;</div><div class="line">        return new ApiInfo(&quot;标题 -- 记录点滴成长&quot;,</div><div class="line">                &quot;描述 -- 记录平时所学&quot;,</div><div class="line">                &quot;版本 -- 1.00&quot;,</div><div class="line">                &quot;网址 -- www.jianwl.com&quot;,</div><div class="line">                new Contact(&quot;jianwl --姓名&quot;, &quot;jianwl.com --url&quot;, &quot;soso_jwl@163.com--邮箱&quot;),</div><div class="line">                &quot;证书 -- no license&quot;,</div><div class="line">                &quot;证书链接 -- no&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public Docket helloApi2() &#123;</div><div class="line">        return new Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .groupName(&quot;hello2&quot;)</div><div class="line">                .genericModelSubstitutes(DeferredResult.class)</div><div class="line">                .useDefaultResponseMessages(false)</div><div class="line">                .forCodeGeneration(true)</div><div class="line">                .pathMapping(&quot;/&quot;)// base，最终调用接口后会和paths拼接在一起</div><div class="line">                .select()</div><div class="line">                .paths(or(regex(&quot;/hello2/.*&quot;)))//过滤的接口</div><div class="line">                .build()</div><div class="line">                .apiInfo(getInfo2());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private ApiInfo getInfo2() &#123;</div><div class="line">        return new ApiInfo(&quot;标题 -- 记录点滴成长&quot;,</div><div class="line">                &quot;描述 -- 记录平时所学&quot;,</div><div class="line">                &quot;版本 -- 2.00&quot;,</div><div class="line">                &quot;网址 -- www.jianwl.com&quot;,</div><div class="line">                new Contact(&quot;jianwl --姓名&quot;, &quot;jianwl.com --url&quot;, &quot;soso_jwl@163.com--邮箱&quot;),</div><div class="line">                &quot;证书 -- no license&quot;,</div><div class="line">                &quot;证书链接 -- no&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>创建Controller</strong></p>
<p><code>HelloController1</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/8/24.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/hello1/api&quot;)</div><div class="line">public class HelloController1 &#123;</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/put&quot;, method = RequestMethod.PUT, consumes = &quot;application/text&quot;, produces = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value = &quot;推送数据&quot;, notes = &quot;将BI数据推送到服务端&quot;)</div><div class="line">    public String push(@ApiParam(required = true, name = &quot;username&quot;, value = &quot;用户名&quot;) @RequestParam String username) &#123;</div><div class="line">        return &quot;push data to server&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST, consumes = &quot;application/json&quot;, produces = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value = &quot;登录&quot;, notes = &quot;用户登录网站&quot;)</div><div class="line">    public String login(@ApiParam(required = true, name = &quot;user&quot;, value = &quot;用户对象&quot;) @RequestBody User user) &#123;</div><div class="line">        return &quot;login&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/user/list&quot;, method = RequestMethod.GET, produces = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value = &quot;获取信息&quot;, notes = &quot;获取用户信息&quot;)</div><div class="line">    public String list(@ApiParam(required = true, name = &quot;username&quot;, value = &quot;姓名&quot;) @RequestParam String username,</div><div class="line">                       @ApiParam(required = true, name = &quot;password&quot;, value = &quot;密码&quot;) @RequestParam String password,</div><div class="line">                       @ApiParam(required = true, name = &quot;address&quot;, value = &quot;地址&quot;) @RequestParam String address) &#123;</div><div class="line">        return username + &quot; : &quot; + password + &quot; : &quot; + address;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>HelloController2</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/8/24.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/hello2/api&quot;)</div><div class="line">public class HelloController2 &#123;</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/put&quot;,method = RequestMethod.PUT,consumes = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value=&quot;推送数据&quot;,notes=&quot;将BI数据推送到服务端&quot;)</div><div class="line">    public String push(@ApiParam(required = true,name = &quot;username&quot;,value = &quot;用户名&quot;)</div><div class="line">                       @RequestParam String username)&#123;</div><div class="line">        return &quot;push data2 to server&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Swagger2</code>默认将所有的<code>Controller</code>中<code>RequestMapping</code>方法都会暴露出来，然而在实际开发中，我们并不一定所有API都体现出来，可以通过<code>@ApiIgnore</code>来解决，如果应用在<code>Controller</code>范围上，则当前<code>Controller</code>的所有方法都会被忽略。</p>
<p>最后，启动<code>SpringBoot</code>服务，访问<code>http://localhost:8080/swagger-ui.html#/</code>就可以访问到swagger页面了。<img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-25/98283651.jpg" alt=""></p>
<h3 id="Swagger-常用注解"><a href="#Swagger-常用注解" class="headerlink" title="Swagger 常用注解"></a>Swagger 常用注解</h3><table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@Api</code></td>
<td><code>修饰整个类，描述Controller的作用</code></td>
</tr>
<tr>
<td><code>@ApiOperation</code></td>
<td><code>描述一个接口</code></td>
</tr>
<tr>
<td><code>@ApiParam</code></td>
<td><code>单个参数描述</code></td>
</tr>
<tr>
<td><code>@ApiModel</code></td>
<td><code>用对象来接受参数</code></td>
</tr>
<tr>
<td><code>@ApiProperty</code></td>
<td><code>用对象接受参数时，描述对象的一个字段</code></td>
</tr>
<tr>
<td><code>@ApiResponses</code></td>
<td><code>HTTP响应整体描述</code></td>
</tr>
<tr>
<td><code>@ApiResponse</code></td>
<td><code>HTTP响应其中一个描述</code></td>
</tr>
<tr>
<td><code>ApiErrors</code></td>
<td></td>
</tr>
<tr>
<td><code>@ApiParamsImplicit</code></td>
</tr>
</tbody>
</table>
<p>未完待续…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6常见的坑]]></title>
      <url>http://jianwl.com/2016/08/22/ES6%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ECMAScript6.0（简称ES6）是JavaScript语言的标准。</p>
<p>推荐资源</p>
<ul>
<li><a href="[https://babeljs.io/docs/learn-es2015/](https://babeljs.io/docs/learn-es2015/">ES2015学习</a> </li>
<li><a href="[https://babeljs.io/repl/](https://babeljs.io/repl/">在线编辑器</a></li>
</ul>
<h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><p><strong>var示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var a = &apos;永和&apos;,</div><div class="line">    b = &apos;新马泰&apos;;</div><div class="line">function fn()&#123;</div><div class="line">  console.log(a); //1</div><div class="line">  console.log(b);// 2</div><div class="line">  var a = &apos;真功夫&apos;; //3</div><div class="line">  console.log(a); // 4</div><div class="line">&#125;</div><div class="line">fn();</div><div class="line">console.log(a); //5</div><div class="line"></div><div class="line">//示例2</div><div class="line">for(var i=0;i&lt;10;i++)&#123;&#125;</div><div class="line">console.log(i);//?</div></pre></td></tr></table></figure>
<p>你知道示例1和示例2会输出什么答案么？示例1的答案是<code>undefined、新马泰、真功夫、永和</code>为何？<code>//3定义a为var变量，当//1访问a变量时，变量a会提升至函数开始位置，定义变量a但未赋值，故//1为undefined;函数中定义的变量，之作用域块级域中，故//5为永和</code>示例2的答案为<code>10</code>，因为非块级元素的定义，在块级之外是有效的。</p>
<p><strong>let示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      let a = 1;</div><div class="line">      &#123;</div><div class="line">          console.log(a);//?</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  console.log(a);//?</div></pre></td></tr></table></figure>
<p>结果为<code>1 、undefined</code>因为变量a的作用域在块级域内。</p>
<p><strong>let不存在变量提升</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">function fn()&#123;</div><div class="line">    console.log(a);</div><div class="line">    let a = 1;</div><div class="line">&#125;</div><div class="line">fn();//?</div><div class="line">//示例2</div><div class="line">var a = 123;</div><div class="line">if (true) &#123;</div><div class="line">  a = &apos;abc&apos;;//?</div><div class="line">  let a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果为<code>均报引用错误</code>，为何？示例1中，由于在函数中let声明的变量a，变量不能提升，其在使用之后声明故出现引用错误。示例2中，由于在块级作用域中用let声明了a变量，变量不能被提升且因为声明在块内声明了变量a，故不能访问块外的变量a，所以报引用错误。</p>
<p><strong>let不允许重复声明</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//ES5 示例1</div><div class="line">   var a = 1;</div><div class="line">   var a = 2;</div><div class="line">   </div><div class="line">   //ES6 示例2</div><div class="line">   let b = 1;</div><div class="line">   let b = 2;//或者var b = 2;</div><div class="line">  </div><div class="line">  //Switch 示例3</div><div class="line">   let a = 1;</div><div class="line">   switch(a)&#123;</div><div class="line">       case 1:</div><div class="line">           let a = 1;</div><div class="line">           break;</div><div class="line">       case 2:</div><div class="line">           let a = 2;</div><div class="line">           break;</div><div class="line">       default:</div><div class="line">           let a = 0;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述示例1、2、3是否会报错呢？<code>示例1正确、示例2、3错误</code>，let变量不允许重复声明，特别注意在switch cast中，即使仅能执行一个case，示例3仍会报错，编译器把其看成重复声明。</p>
<p><strong>const示例</strong></p>
<p>块级变量 + 常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">  const weipeng = &apos;真功夫&apos;;</div><div class="line">  //?</div><div class="line">  weipeng = &apos;张伟鹏&apos;;</div><div class="line">  //示例2</div><div class="line">  const weipeng;</div><div class="line">  //示例3</div><div class="line">  &#123;</div><div class="line">      const a = 1；</div><div class="line">  &#125;</div><div class="line">  //?</div><div class="line">  console.log(a);</div><div class="line">  </div><div class="line">  //示例4</div><div class="line">  const array = [1, 2, 3];</div><div class="line">  //？</div><div class="line">  array.push(4);</div><div class="line">  //？</div><div class="line">  array.length = 0;</div><div class="line">  //？</div><div class="line">  array = [1, 2, 3, 4];</div></pre></td></tr></table></figure>
<p>结果<code>示例1、示例2、示例3均报错，示例1，const声明的为常量，不能改变其引用。示例2，声明常量要有初始值。示例3，常量a作用域为块内</code>；示例4会出现什么结果呢？<code>push、length设为0均可成功，将数组指向另外一个引用错误。</code></p>
<p><strong>从属关系</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var a = 1; </div><div class="line">b = 2; //1</div><div class="line">window.c = 3;//2</div><div class="line">console.log(a, b, c);//?</div><div class="line">//示例2</div><div class="line">let a = 1;</div><div class="line">const b= 2;</div><div class="line">console.log(window.a, window.b);</div></pre></td></tr></table></figure>
<p>结果为<code>示例1结果为1，2，3；示例2结果为undefined,undefined</code>为何？示例1中<code>//1</code>声明的变量b相当于<code>window.b全局变量</code>而示例2中<code>window.a和window.b</code>都没有被声明</p>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">   var a = 1,</div><div class="line">       b = 2,</div><div class="line">       c = 3;</div><div class="line">   var [a, b, c] = [1, 2, 3];</div><div class="line">   </div><div class="line">   //示例2</div><div class="line">   var [a, , c] = [1, 2, 3];</div><div class="line">   console.log(a, c); // 1,3</div><div class="line">   </div><div class="line">   //示例3</div><div class="line">   var [a, ...other] = [1, 2, 3, 4, 5, 6];</div><div class="line">   console.log(a, other); // 1 ,[2,3,4,5,6]</div><div class="line">   </div><div class="line">   //示例4</div><div class="line">   var [a, b] = [&apos;真功夫&apos;];</div><div class="line">   console.log(a, b); // 真功夫，undefined</div><div class="line">   </div><div class="line">   //示例5</div><div class="line">   var [a, b=&apos;伟鹏&apos;] = [&apos;真功夫&apos;];</div><div class="line">   console.log(a, b);// 真功夫，伟鹏</div><div class="line">   </div><div class="line">   //示例7</div><div class="line">   var [a, b=&apos;永和&apos;, ...other] = [&apos;蒸功夫&apos;];</div><div class="line">   console.log(a, b, other);// 蒸功夫,永和,[]</div></pre></td></tr></table></figure>
<p><strong>数组合并</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">let arr1 = [1, 2, 3];</div><div class="line">let arr2 = [4, 5, 6];</div><div class="line">let arr = [...arr1, ...arr2];</div><div class="line">console.log(arr); //[1,2,3,4,5,6]</div></pre></td></tr></table></figure>
<p><strong>对象解构</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var &#123; name, age, sex &#125; = &#123; name: &apos;郎平&apos;, age: 53&#125;;</div><div class="line">console.log(name, age, sex); // 郎平,53,undefined</div><div class="line"></div><div class="line">//示例2</div><div class="line">var &#123; name, ...others &#125; = &#123; name: &apos;郎平&apos;&#125;;</div><div class="line">console.log(name, others);//郎平,&#123;&#125;</div><div class="line"></div><div class="line">//示例3</div><div class="line">var &#123; name: value &#125; = &#123;name : &apos;郎平&apos;&#125;;</div><div class="line">console.log(name, value);// 郎平,郎平</div><div class="line"></div><div class="line">//示例4</div><div class="line">var &#123; name=&quot;郎平&quot; &#125; = &#123;&#125;;</div><div class="line">console.log(name);//郎平</div></pre></td></tr></table></figure>
<p>对象合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let obj1 = &#123;</div><div class="line">     name: &apos;郎平&apos;</div><div class="line"> &#125;;</div><div class="line"> let obj2 = &#123;</div><div class="line">     age: 53</div><div class="line"> &#125;</div><div class="line"> let obj = &#123;</div><div class="line">     ...obj1,</div><div class="line">     ...obj2</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>解构扩展</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let &#123; length &#125; = &apos;hello&apos;; // 等价于 var _hello = &quot;hello&quot;; var length = _hello.length;</div><div class="line"> let &#123; toString &#125; = 123;</div><div class="line"> let &#123; toString &#125; = true;</div><div class="line"> let [a, b, c] = &apos;hello&apos;;</div><div class="line"> let array = [...&apos;hello&apos;];</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line"> fn(&#123;</div><div class="line">     name: &apos;fn&apos;,</div><div class="line">     id: 1</div><div class="line"> &#125;);</div><div class="line"> function fn(&#123; name, id &#125;)&#123;</div><div class="line">     do something...</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> //示例2</div><div class="line"> fuction fn(&#123; name=&apos;真功夫&apos;, id &#125;)&#123;</div><div class="line">     do something...</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"> //示例3</div><div class="line"> fn(1, 2, 3);</div><div class="line"> function fn(...params)&#123;</div><div class="line">     console.log(params);//[1，2，3]</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> //示例4</div><div class="line"> fn([1, 2, 3]);//怎么做?</div><div class="line"> function fn(a, b, c)&#123;</div><div class="line">     console.log(a, b, c); //[1,2,3]</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>默认参数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">function fn(page=1, pageNo=10)&#123;</div><div class="line">    do something...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参数作用域</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var a = 1;</div><div class="line">function fn(a, b=a)&#123;</div><div class="line">    console.log(a, b);</div><div class="line">&#125;</div><div class="line">fn(5);// 5,5</div></pre></td></tr></table></figure>
<p><strong>箭头函数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let fn = () =&gt; &#123;</div><div class="line">        do something...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>默认return</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line"> let fn = (name) =&gt; name;</div><div class="line"> let result = fn(&apos;hello&apos;);</div><div class="line"> console.log(result)//hello</div><div class="line"> </div><div class="line"> //示例2</div><div class="line"> let fn = name =&gt; name;</div><div class="line"> let result = fn(&apos;hello&apos;);</div><div class="line"> console.log(result)//hello</div></pre></td></tr></table></figure>
<p><strong>不能作为构造函数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//示例1(✅)</div><div class="line">  function Person(name, age)&#123;</div><div class="line">      this.name = name;</div><div class="line">      this.age = age;</div><div class="line">  &#125;</div><div class="line">  let p1 = new Person(&apos;郎平&apos;, 53);</div><div class="line">  </div><div class="line">  //示例2(❌)</div><div class="line">  const Person = (name ,age) =&gt; &#123;</div><div class="line">      this.name = name;</div><div class="line">      this.age = age;</div><div class="line">  &#125;</div><div class="line">  let p1 = new Person(&apos;郎平&apos;, 53);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之枚举]]></title>
      <url>http://jianwl.com/2016/08/21/Java%E4%B9%8B%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<h3 id="引入枚举的背景"><a href="#引入枚举的背景" class="headerlink" title="引入枚举的背景"></a>引入枚举的背景</h3><p><strong>场景</strong></p>
<p>为彩虹描绘出其中颜色，通常可以通过定义常量的方式来实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class RainbowColor &#123;</div><div class="line">    public static final int RED = 0;</div><div class="line">    public static final int ORANGE = 1;</div><div class="line">    public static final int YELLOW = 2;</div><div class="line">    public static final int GREEN = 3;</div><div class="line">    public static final int CYAN = 4;</div><div class="line">    public static final int BLUE = 5;</div><div class="line">    public static final int PURPLE = 6;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但这种方式会存在以下这几个问题：</p>
<p><strong>类型不安全</strong></p>
<p>由于颜色常量的对应值是整数型，所以程序执行过程中很有可能给颜色变量传入一个任意的整数值，导致出现错误。</p>
<p><strong>类型无指意性</strong></p>
<p>由于颜色变量值仅仅是一些无包含任何含义的整数值，如果在运行期调试时候，你就会发现日志中有很多魔术数字，但除了程序员本身，其他人很难明白其中奥秘。</p>
<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>为了改进Java语言在这方面的不足，<code>JDK1.5</code>之后，增加了枚举类型。<code>枚举是限定有限种可能值的一种手段，使用枚举可以降低程序出错的几率，并可以提高代码的可读性和可维护性</code></p>
<p><strong>枚举定义</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum  RainbowEnum &#123;</div><div class="line">    RED, ORANGE, YELLOW, GREEN, CYAN, BLUE, PURPLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>常规用法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class EnumDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        RainbowEnum color = RainbowEnum.GREEN;</div><div class="line">        switch (color)&#123;</div><div class="line">            case GREEN:</div><div class="line">                System.out.println(&quot;this is GREEN&quot;);</div><div class="line">                break;</div><div class="line">            case CYAN:</div><div class="line">                System.out.println(&quot;this is CYAN&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                System.out.println(&quot;other color&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>枚举提供了几个方法供开发者在需要时调用。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>vlaues()</td>
<td><code>返回当前枚举中所有枚举项的集合</code></td>
</tr>
<tr>
<td>oridinal()</td>
<td><code>返回枚举项在枚举对象中的序号</code></td>
</tr>
<tr>
<td>name()</td>
<td><code>返回枚举项的名称，与toString()效果相同</code></td>
</tr>
<tr>
<td>getDeclaringClass()</td>
<td><code>取得当前枚举值所在类的完整名称</code></td>
</tr>
<tr>
<td>valueOf(“xx”)</td>
<td><code>返回名称为xx的枚举项</code></td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class EnumDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        for (RainbowEnum colorEnum : RainbowEnum.values()) &#123;</div><div class="line">            System.out.println(colorEnum);</div><div class="line">            System.out.println(colorEnum.ordinal());</div><div class="line">            System.out.println(colorEnum.name());</div><div class="line">            System.out.println(colorEnum.getDeclaringClass() + &quot;\n&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(&quot;&lt;h5&gt;BLUE&lt;/h5&gt;&quot;);</div><div class="line">        RainbowEnum red = RainbowEnum.valueOf(&quot;BLUE&quot;);</div><div class="line">        System.out.println(red.ordinal());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>为枚举添加构造器和成员方法</strong></p>
<p><code>RainBowEnum.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public enum RainbowEnum &#123;</div><div class="line">    RED(1, &quot;red&quot;),</div><div class="line">    ORANGE(2, &quot;orange&quot;),</div><div class="line">    YELLOW(3, &quot;yellow&quot;),</div><div class="line">    GREEN(4, &quot;green&quot;),</div><div class="line">    CYAN(5, &quot;cyan&quot;),</div><div class="line">    BLUE(6, &quot;blue&quot;),</div><div class="line">    PURPLE(7, &quot;purple&quot;);</div><div class="line"></div><div class="line">    private Integer code;</div><div class="line">    private String desc;</div><div class="line"></div><div class="line">    RainbowEnum(Integer code, String desc) &#123;</div><div class="line">        this.code = code;</div><div class="line">        this.desc = desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getCode() &#123;</div><div class="line">        return code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCode(Integer code) &#123;</div><div class="line">        this.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDesc() &#123;</div><div class="line">        return desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDesc(String desc) &#123;</div><div class="line">        this.desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>EnumDemo.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class EnumDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        for (RainbowEnum colorEnum : RainbowEnum.values()) &#123;</div><div class="line">            System.out.println(&quot;code = &quot; + colorEnum.getCode());</div><div class="line">            System.out.println(&quot;desc = &quot; + colorEnum.getDesc());</div><div class="line">        &#125;</div><div class="line">        RainbowEnum color = RainbowEnum.valueOf(&quot;RED&quot;); //非red,故valueOf(&quot;枚举名称&quot;)</div><div class="line">        System.out.println(&quot;code = &quot; + color.getCode());</div><div class="line">        System.out.println(&quot;desc = &quot; + color.getDesc());</div><div class="line">        System.out.println(&quot;name = &quot; + color.name());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="枚举集合"><a href="#枚举集合" class="headerlink" title="枚举集合"></a>枚举集合</h3><table>
<thead>
<tr>
<th>集合对象</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>EnumSet</code></td>
<td><code>EnumSet用于保存枚举项的集合，在枚举项本身并不互斥的情况下特别有用。例如，一个应用系统通常会有多种角色，而某些人在系统中可能承担不止一种角色。如果这些角色是通过枚举定义的，则此时EnumSet将可以将多种角色保存在一起，标识特定用户承担的全部角色</code></td>
</tr>
<tr>
<td><code>EnumMap</code></td>
<td><code>EnumMap是必须使用枚举项作为其KEY的Map，其法与普通Map类似</code></td>
</tr>
</tbody>
</table>
<p><strong>EnumSet</strong></p>
<p><code>RoleEnum.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum RoleEnum &#123;</div><div class="line">    SYSADMIN,ROLEA,ROLEB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>EnumSetDemo.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class EnumSetDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        EnumSet&lt;RoleEnum&gt; es = EnumSet.of(RoleEnum.ROLEA,RoleEnum.ROLEB);</div><div class="line">        es.add(RoleEnum.SYSADMIN);</div><div class="line">        es.add(RoleEnum.ROLEA); // 重复元素自动去重</div><div class="line">        for(RoleEnum role: es)&#123;</div><div class="line">            System.out.println(role);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>EnumMap</strong></p>
<p><code>RoleEnum.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum RoleEnum &#123;</div><div class="line">    SYSADMIN,ROLEA,ROLEB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>EnumMapDemo.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class EnumMapDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        EnumMap&lt;RoleEnum,String&gt; em = new EnumMap&lt;RoleEnum, String&gt;(RoleEnum.class);</div><div class="line">        em.put(RoleEnum.SYSADMIN,&quot;系统管理员&quot;);</div><div class="line">        em.put(RoleEnum.ROLEA,&quot;角色A&quot;);</div><div class="line">        System.out.println(&quot; size = &quot;+em.size());</div><div class="line">        System.out.println(em.get(RoleEnum.SYSADMIN));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.csdn.net/ishallwin/article/details/9440251" target="_blank" rel="external">Java枚举</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-enum/" target="_blank" rel="external">Java 语言中 Enum 类型的使用介绍</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac技巧之指令篇]]></title>
      <url>http://jianwl.com/2016/08/21/Mac%E6%8A%80%E5%B7%A7%E4%B9%8B%E6%8C%87%E4%BB%A4%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>1、查看每个目录的所占空间</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/16550157.jpg" alt=""></p>
<hr>
<p>2、定位某个命令所在文件路径</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/70271327.jpg" alt=""></p>
<hr>
<p>3、尝试根据文件内容输出文件类型</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/90832702.jpg" alt=""></p>
<hr>
<p>4、清除内存和硬盘的缓存，与重启Mac的效果差不多</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/34745593.jpg" alt=""></p>
<hr>
<p>5、查看服务列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/85445991.jpg" alt=""></p>
<hr>
<p>6、语音功能</p>
<p>场景：<code>say命令可以让Mac说英文单词</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/97540405.jpg" alt=""></p>
<hr>
<h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之泛型]]></title>
      <url>http://jianwl.com/2016/08/21/Java%E4%B9%8B%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>泛型是<code>JDK1.5</code>之后增加的特性，其作用是<code>告诉编译器可接受哪些对象</code>；泛型这一块知识点，之前了解的比较浅，故重新学习，并记录于此文。</p>
<h3 id="为什么需要泛型？"><a href="#为什么需要泛型？" class="headerlink" title="为什么需要泛型？"></a>为什么需要泛型？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List list = new ArrayList();</div><div class="line">        list.add(&quot;Lucy&quot;);</div><div class="line">        list.add(&quot;Tracy&quot;);</div><div class="line">        list.add(22);</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; list.size(); i++) &#123;</div><div class="line">            String name = (String) list.get(i);</div><div class="line">            System.out.println(&quot; name: &quot; + name); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码，在编译阶段正常，在运行时会出现<code>java.lang.ClassCastException</code>的异常，为何？观察代码，发现存在两个问题。</p>
<ol>
<li>将对象放入集合中，集合不会检验对象类型，换句话说，任何对象都可以放到这个集合中。</li>
<li>从集合取出元素时，强制类型转换为<code>目标类型String</code>,故出现<code>java.lang.ClassCastException</code>异常</li>
</ol>
<p>有什么办法可以让集合记住元素类型，即集合存储的对象均为同一类型对象，答案是使用泛型。</p>
<h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><p>泛型程序设计是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。</p>
<p>看起来好像有点复杂，通过例子来演示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;String&gt; list = new ArrayList();</div><div class="line">        list.add(&quot;Lucy&quot;);</div><div class="line">        list.add(&quot;Tracy&quot;);</div><div class="line">        //list.add(22); //1 提示编译错误</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; list.size(); i++) &#123;</div><div class="line">            String name = (String) list.get(i);</div><div class="line">            System.out.println(&quot;name: &quot; + name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>采用泛型写法后，在<code>//1</code>处想加入一个Integer类型的对象会出现编译错误。<code>List&lt;String&gt;中</code>，<code>String</code>是<code>类型实参</code>，也就是<code>List</code>接口中肯定包含<code>类型形参</code>，看下<code>List</code>接口的部分源码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public interface List&lt;E&gt; extends Collection&lt;E&gt; &#123;</div><div class="line">    &lt;T&gt; T[] toArray(T[] a);</div><div class="line"></div><div class="line">    boolean addAll(Collection&lt;? extends E&gt; c);</div><div class="line"></div><div class="line">    boolean removeAll(Collection&lt;?&gt; c);</div><div class="line"></div><div class="line">    void add(int index, E element);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>观察源码，我们发现源码中有一些特殊参数如<code>T 、E 、？</code>，泛型命名有其规范，具体如下</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>E</td>
<td><code>Element，元素 如：List&lt;E&gt;,Iterator&lt;E&gt;,Set&lt;E&gt;</code></td>
</tr>
<tr>
<td>K、V</td>
<td><code>Key，Value，代表Map的键值对</code></td>
</tr>
<tr>
<td>N</td>
<td><code>Number，数字</code></td>
</tr>
<tr>
<td>T</td>
<td><code>Type，类型，如String，Integer等等</code></td>
</tr>
<tr>
<td>？</td>
<td><code>类型通配符，用于替代具体的类型实参</code></td>
</tr>
</tbody>
</table>
<h3 id="自定义泛型接口、类、方法"><a href="#自定义泛型接口、类、方法" class="headerlink" title="自定义泛型接口、类、方法"></a>自定义泛型接口、类、方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User&lt;String&gt; username = new User&lt;String&gt;(&quot;tracy&quot;);</div><div class="line">        User&lt;Integer&gt; age = new User&lt;Integer&gt;(24);</div><div class="line">        User&lt;String&gt; country = new User&lt;String&gt;(&quot;China&quot;);</div><div class="line">        System.out.println(&quot;info = &quot; + username.getInfo());</div><div class="line">        System.out.println(&quot;info = &quot; + age.getClass());</div><div class="line">        System.out.println(&quot;info = &quot; + country.getClass());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class User&lt;T&gt; &#123;</div><div class="line">    private T info;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(T info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getInfo() &#123;</div><div class="line">        return info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用泛型类时，虽然传入了不同的泛型参数，但实际生产的是相同的类型。究其原因，在于Java的泛型概念提出的目的，只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型相关信息擦除。换句话说，成功编译过后的class文件中是不包含任何泛型信息的，泛型信息不回进入到运行时阶段。总结为一句话就是，<code>泛型类型在逻辑上可以看成是多个不同的类型，实际上都是相同的基本类型。</code></p>
<p><strong>类型通配符</strong></p>
<p>场景：<code>User&lt;Integer&gt;和User&lt;Number&gt;实际上都是User类型，那么是否可以实现把它们看成具有父子关系的泛型呢？</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User&lt;String&gt; username = new User&lt;String&gt;(&quot;tracy&quot;);</div><div class="line">        User&lt;Integer&gt; age = new User&lt;Integer&gt;(24);</div><div class="line">        User&lt;Number&gt; ageN = new User&lt;Number&gt;(24);</div><div class="line"></div><div class="line">        getInfo(ageN);</div><div class="line">        getInfo(age); //编译错误</div><div class="line">    &#125;</div><div class="line">    public static void getInfo(User&lt;Number&gt; user)&#123;</div><div class="line">        System.out.println(user.getInfo());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class User&lt;T&gt; &#123;</div><div class="line">    private T info;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(T info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getInfo() &#123;</div><div class="line">        return info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码会出现编译错误，通过提示信息，了解到<code>User&lt;Number&gt;</code>不能视为<code>User&lt;Integer&gt;</code>的父类。通过<code>？类型通配符，可以解决这个问题</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User&lt;String&gt; username = new User&lt;String&gt;(&quot;tracy&quot;);</div><div class="line">        User&lt;Integer&gt; age = new User&lt;Integer&gt;(24);</div><div class="line">        User&lt;Number&gt; ageN = new User&lt;Number&gt;(24);</div><div class="line"></div><div class="line">        getInfo(ageN);</div><div class="line">        getInfo(age); </div><div class="line">    &#125;</div><div class="line">    public static void getInfo(User&lt;? extends Number&gt; user)&#123;</div><div class="line">        System.out.println(user.getInfo());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class User&lt;T&gt; &#123;</div><div class="line">    private T info;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(T info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getInfo() &#123;</div><div class="line">        return info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B3%9B%E5%9E%8B" target="_blank" rel="external">泛型 - 维基百科</a></li>
<li><a href="http://www.cnblogs.com/lwbqqyumidi/p/3837629.html" target="_blank" rel="external">Java泛型</a></li>
<li>Effective Java(第2版)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之类与继承]]></title>
      <url>http://jianwl.com/2016/08/20/Python%E4%B9%8B%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文延续上文<a href="http://jianwl.com/2016/08/20/Python%E4%B9%8B%E5%88%97%E8%A1%A8%E5%92%8C%E9%9B%86%E5%90%88/">Python之列表和集合</a>的场景，为了让数据结构与数据相匹配，先后采用了变量、字典、类、继承这几种方式来实现对数据结构和数据的关联。通过对比，可以加深对它们的理解。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>虽然教练可以获取到运动员的成绩，但不知道该成绩属于谁，故向各个数据文件添加了姓名和出生年月属性。读取文件数据，并获取运动员前三名的成绩。</li>
</ol>
<p><strong>数据文件<code>sarah2.txt</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sarah Sweeney,2002-6-17,2:58,2.58,2:39,2-25,2-55,2:54,2.18,2:55,2:55,2:22,2-21,2.22</div></pre></td></tr></table></figure>
<p><strong>获取运动员前三名成绩</strong></p>
<p><code>变量</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline()</div><div class="line">        return data.strip().split(&quot;,&quot;)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return(None)</div><div class="line"></div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line">(sarah_name, sarah_bob) = sarah.pop(0), sarah.pop(0)</div><div class="line">print(sarah_name + &quot;&apos;s fastest time are&quot; + str(sorted([sanitize(t) for t in sarah])[0:3]))</div></pre></td></tr></table></figure>
<p>观察以上代码，发现需要为每个运动员定义三个变量，那如果需要处理100，1000个运动员，就会到处充斥着变量，显然不可取，要进行优化。观察数据，发现数据由三部分组成姓名、出生年月、成绩。可以通过字典，将数据结构和数据进行关联。<code>字典是将数据值和键关联的数据结构</code>，优化代码如下：</p>
<p><code>字典</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline().strip().split(&quot;,&quot;)</div><div class="line">        return &#123;&quot;name&quot;: data.pop(0), &quot;dob&quot;: data.pop(0), &quot;scores&quot;: sorted(set([sanitize(t) for t in data]))[0:3]&#125;</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return (None)</div><div class="line">        </div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line">print (sarah[&quot;name&quot;] + &quot;&apos;s fastest  time are&quot; + str(sarah[&quot;scores&quot;]))</div></pre></td></tr></table></figure>
<p>除了用字典，有么有一种更加简便的方法，可以将数据结构和数据关联在一起呢？与其他语言一样，Python允许创建并定义面向对象。</p>
<p><code>类</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class Athlete:</div><div class="line">    def __init__(self,name,dob=None,times=[]):</div><div class="line">        self.name = name</div><div class="line">        self.dob = dob</div><div class="line">        self.times = times</div><div class="line"></div><div class="line">    def __top3__(self):</div><div class="line">        return sorted([sanitize(t) for t in self.times])[0:3]</div><div class="line"></div><div class="line">    def add_time(self,addtimes):</div><div class="line">        if isinstance(addtimes,list):</div><div class="line">            self.times.extend(addtimes)</div><div class="line">        else:</div><div class="line">            self.times.append(addtimes)</div><div class="line"></div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline().strip().split(&quot;,&quot;)</div><div class="line">            return Athlete(data.pop(0),data.pop(0),data)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return (None)</div><div class="line"></div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line">print (sarah.name + &quot;&apos;s fastest time are&quot; + str(sarah.__top3__()))</div></pre></td></tr></table></figure>
<p><code>Athlete</code>有点像列表，它提供了一些列表的功能，比如add_time(),可以通过继承list，来获取他的方法。具体实现如下：</p>
<p><code>继承</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># 继承list类</div><div class="line">class AthleteList(list):</div><div class="line">    def __init__(self,name,dob=None,times=[]):</div><div class="line">        list.__init__([])</div><div class="line">        self.name = name</div><div class="line">        self.dob = dob</div><div class="line">        self.extend(times)</div><div class="line"></div><div class="line">    def __top3__(self):</div><div class="line">        return sorted([sanitize(t) for t in self])[0:3]</div><div class="line"></div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline().strip().split(&quot;,&quot;)</div><div class="line">            return AthleteList(data.pop(0),data.pop(0),data)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return (None)</div><div class="line">        </div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line"></div><div class="line"># 继承了list,使用其extend方法 </div><div class="line">sarah.extend([&quot;2.1333333&quot;,&quot;2.111111&quot;])</div><div class="line">print (str(sarah))</div><div class="line">print (sarah.name + &quot;&apos;s fastest  time are&quot; + str(sarah.__top3__()))</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>使用dict()或{}创建空字典</li>
<li>类似于列表和集合，Python的字典会随着新数据增加到这个数据结构而动态扩大</li>
<li>类定义<code>__init__()</code> 来初始化对象实例</li>
<li>类定义的每个方法都必须提供<code>self</code>作为第一参数</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之列表和集合]]></title>
      <url>http://jianwl.com/2016/08/20/Python%E4%B9%8B%E5%88%97%E8%A1%A8%E5%92%8C%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文章从场景实例出发，先采用常规做法，之后通过采用列表和集合的特性来解决问题，通过比较可以很清晰的了解到列表和集合特性的好处，加深对其的了解。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>教练手上有<code>James</code>、<code>Julie</code>、<code>Mikey</code>、<code>Sarah</code> 这四名运动员的训练成绩,将他们的成绩分别放到四个列表中</li>
<li>运动员的成绩，有些格式有点问题，需要将其转换成正确的格式</li>
<li>需要将每名运动员的各次训练成绩从低到高排序</li>
<li>取出每名运动员成绩最好的3次，且不包含重复的成绩</li>
</ol>
<p><strong>运动员成绩</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># james.txt</div><div class="line">2-34,3:21,2.34,2.45,3.01,2:01,2:01,3:10,2-22</div><div class="line"></div><div class="line"># julie.txt</div><div class="line">2.59,2.11,2:11,2:23,3-10,2-23,3:10,3.21,3-21</div><div class="line"></div><div class="line"># mikey.txt</div><div class="line">2:22,3.01,3:01,3.02,3:02,3.02,3:22,2.49,2:38</div><div class="line"></div><div class="line"># sarah.txt</div><div class="line">2:58,2.58,2:39,2-25,2-55,2:54,2.18,2:55,2:55</div></pre></td></tr></table></figure>
<p><strong>将成绩存于四个列表</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">with open(&quot;james.txt&quot;) as james:</div><div class="line">    james_score = james.readline().strip().split(&quot;,&quot;)</div><div class="line"></div><div class="line">with open(&quot;julie.txt&quot;) as julie:</div><div class="line">    julie_score = julie.readline().strip().split(&quot;,&quot;)</div><div class="line"></div><div class="line">with open(&quot;mikey.txt&quot;) as mikey:</div><div class="line">    mikey_score = mikey.readline().strip().split(&quot;,&quot;)</div><div class="line">    </div><div class="line">with open(&quot;sarah.txt&quot;) as sarah:</div><div class="line">    sarah_score = sarah.readline().strip().split(&quot;,&quot;)</div><div class="line">    </div><div class="line">print(james_score)</div><div class="line">print(julie_score)</div><div class="line">print(mikey_score)</div><div class="line">print(sarah_score)</div></pre></td></tr></table></figure>
<p>观察以上代码，发现有重复代码，可以将重复代码抽到一个小函数中，且没有对文件不存在进行处理，可以优化代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline()</div><div class="line">        return data.strip().split(&quot;,&quot;)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return(None)</div><div class="line"></div><div class="line">james_score = get_coach_data(&quot;james.txt&quot;)</div><div class="line">julie_score = get_coach_data(&quot;julie.txt&quot;)</div><div class="line">mikey_score = get_coach_data(&quot;mikey.txt&quot;)</div><div class="line">sarah_score = get_coach_data(&quot;sarah.txt&quot;)</div><div class="line"></div><div class="line">print(james_score)</div><div class="line">print(julie_score)</div><div class="line">print(mikey_score)</div><div class="line">print(sarah_score)</div></pre></td></tr></table></figure>
<p><strong>成绩排序</strong></p>
<p>Python有两种排序排序方式，一种是<code>原地排序,按你指定的顺序排列数据，用排序后的数据替换原来的数据，原来的顺序会丢失</code>，另一种是<code>复制排序,原数据依然保留，只是对一个副本进行排序</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">data1 = [1,8,3,4,2]</div><div class="line"></div><div class="line"># in-space sort</div><div class="line">data1.sort()</div><div class="line">print (data1)</div><div class="line"></div><div class="line"># copies sort</div><div class="line">data2 = [1,8,3,4,2]</div><div class="line">data3 = sorted(data2)</div><div class="line">print (data2)</div><div class="line">print (data3)</div></pre></td></tr></table></figure>
<p>对其中一名运动员成绩排序<code>print(sorted(james_score))</code>其结果为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&apos;2-22&apos;, &apos;2-34&apos;, &apos;2.34&apos;, &apos;2.45&apos;, &apos;2:01&apos;, &apos;2:01&apos;, &apos;3.01&apos;, &apos;3:10&apos;, &apos;3:21&apos;]</div></pre></td></tr></table></figure>
<p>这个数据排序有问题，观察数据，发现是部分数据格式有问题，需要将<code>-</code>和<code>:</code>改为<code>.</code> 定义一个函数<code>sanitize</code>，实现对脏数据处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div></pre></td></tr></table></figure>
<p>但仅仅定义函数还不够，需要对每个运动员成绩都进行处理。具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">james_arr = []</div><div class="line">julie_arr = []</div><div class="line">mikey_arr = []</div><div class="line">sarah_arr = []</div><div class="line">for score in james_score:</div><div class="line">    james_arr.append(sanitize(score))</div><div class="line"></div><div class="line">for score in julie_score:</div><div class="line">    julie_arr.append(sanitize(score))</div><div class="line"></div><div class="line">for score in mikey_score:</div><div class="line">    mikey_arr.append(sanitize(score))</div><div class="line"></div><div class="line">for score in sarah_score:</div><div class="line">    sarah_arr.append(sanitize(score))</div><div class="line"></div><div class="line">print(sorted(james_arr))</div><div class="line">print(sorted(julie_arr))</div><div class="line">print(sorted(mikey_arr))</div><div class="line">print(sorted(sarah_arr))</div></pre></td></tr></table></figure>
<p>通过以上代码确实可以实现对运动员成绩的排序，但有没发现其中包含重复代码。<code>代码创建4个列表来保存数据文件读取的数据，然后再创建4个列表保存经过清理的数据。</code></p>
<p>Python提供了一个工具<code>列表推导</code>可以毫不费力的完成这种转换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mins = [1, 2, 3]</div><div class="line"></div><div class="line"># 列表推导</div><div class="line">secs = [m * 60 for m in mins]</div><div class="line"></div><div class="line"># 结果：[60，120，180]</div><div class="line">print (secs)</div></pre></td></tr></table></figure>
<p>故优化排序后代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">james_arr = [sanitize(score) for score in james_score]</div><div class="line">julie_arr = [sanitize(score) for score in julie_score]</div><div class="line">mikey_arr = [sanitize(score) for score in mikey_score]</div><div class="line">sarah_arr = [sanitize(score) for score in sarah_score]</div><div class="line"></div><div class="line">print(sorted(james_arr))</div><div class="line">print(sorted(julie_arr))</div><div class="line">print(sorted(mikey_arr))</div><div class="line">print(sorted(sarah_arr))</div></pre></td></tr></table></figure>
<p><strong>对成绩去重,取前三名成绩</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">james_uni = []</div><div class="line">julie_uni = []</div><div class="line">mikey_uni = []</div><div class="line">sarah_uni = []</div><div class="line">for score in james_arr:</div><div class="line">    if score not in james_uni:</div><div class="line">        james_uni.append(score)</div><div class="line"></div><div class="line">for score in julie_arr:</div><div class="line">    if score not in julie_uni:</div><div class="line">        julie_uni.append(score)</div><div class="line"></div><div class="line">for score in mikey_arr:</div><div class="line">    if score not in mikey_uni:</div><div class="line">        mikey_uni.append(score)</div><div class="line"></div><div class="line">for score in sarah_arr:</div><div class="line">    if score not in sarah_uni:</div><div class="line">        sarah_uni.append(score)</div><div class="line"></div><div class="line">print(sorted(james_uni)[0:3])</div><div class="line">print(sorted(julie_uni)[0:3])</div><div class="line">print(sorted(mikey_uni)[0:3])</div><div class="line">print(sorted(sarah_uni)[0:3])</div></pre></td></tr></table></figure>
<p>Python中提供了集合数据结构<code>set</code>，集合最突出的特征就是数据项无序，且不允许重复。优化去重代码，以下是其实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(sorted(set(james_arr))[0:3])</div><div class="line">print(sorted(set(julie_arr))[0:3])</div><div class="line">print(sorted(set(mikey_arr))[0:3])</div><div class="line">print(sorted(set(sarah_arr))[0:3])</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>方法/关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>sort()</td>
<td><code>原地改变列表顺序 如:data.sort()</code></td>
</tr>
<tr>
<td>sorted()</td>
<td><code>对列表副本进行排序 如:data;data1 = sorted(data)</code></td>
</tr>
<tr>
<td>my_list[0:3]</td>
<td><code>返回列表第0、1、2个元素的列表，可以访问列表的多个数据项</code></td>
</tr>
<tr>
<td>set()</td>
<td><code>使用set()工厂创建一个集合，集合不允许重复元素</code></td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之保存数据到文件]]></title>
      <url>http://jianwl.com/2016/08/20/Python%E4%B9%8B%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>这篇文章是<a href="http://jianwl.com/2016/08/19/Python%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8E%E5%BC%82%E5%B8%B8/">Python之文件与异常</a>场景的延续，若是之前没有接触过Python文件读取操作,可以先看一下上一篇文章。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>读取数据文件<code>data.txt</code>  ，将<code>Man</code>和<code>Other Man</code>这两个人的对话,分别存入<code>man</code>列表和<code>other</code>列表</li>
<li>将<code>man</code>、<code>other</code>列表以一定的格式分别存入<code>man_data.txt</code>和<code>other_data.txt</code>文件</li>
</ol>
<p><strong>数据文件<code>data.txt</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Man :Is this the right room for an argument?</div><div class="line">Other Man :I&apos;ve told you once.</div><div class="line">Man :No you haven&apos;t</div><div class="line">Other Man :Yea I have.</div><div class="line">Man : You most certainly did not!</div><div class="line">Other Man : Now let&apos;s get one thing quite clear: I most definityly toly you!</div><div class="line">pause</div><div class="line">pause</div></pre></td></tr></table></figure>
<p><strong>读取文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">try:</div><div class="line">    data = open(&quot;../resource/data.txt&quot;)</div><div class="line">    man = []</div><div class="line">    other = []</div><div class="line">    for each_line in data:</div><div class="line">        try:</div><div class="line">            (role, line_spoken) = each_line.split(&apos;:&apos;, 1)</div><div class="line">            line_spoken = line_spoken.strip()</div><div class="line">            role = role.strip()</div><div class="line">            if role == &apos;Man&apos;:</div><div class="line">                man.append(line_spoken)</div><div class="line">            elif role == &apos;Other Man&apos;:</div><div class="line">                other.append(line_spoken)</div><div class="line">        except ValueError:</div><div class="line">            pass</div><div class="line">    print(man)</div><div class="line">    print(other)</div><div class="line">except IOError as err:</div><div class="line">    print(&quot;the data file is missing!&quot; + str(err))</div><div class="line">finally:</div><div class="line">	# locals() 返回当前作用域中定义名的集合</div><div class="line">    if &apos;data&apos; in locals():</div><div class="line">        data.close()</div></pre></td></tr></table></figure>
<p><strong>存储文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    with open(&quot;../resource/man_data.txt&quot;, &quot;w&quot;) as man_data:</div><div class="line">        print(man, file=man_data)</div><div class="line">    with open(&quot;../resource/other_data.txt&quot;, &quot;w&quot;) as other_data:</div><div class="line">        print(other, file=other_data)</div><div class="line">except IOError as err:</div><div class="line">	# err与字符串类型不兼容，故需强转为字符串str(err)</div><div class="line">    print(&quot;File Error:&quot; + str(err))</div></pre></td></tr></table></figure>
<p>使用<code>w</code>模式，如果文件已存在，会清空文件的数据。要追加一个文件，要使用<code>a</code>模式。使用<code>with</code>不需要担心关闭打开的文件，等同于读取文件中<code>finally部分</code>。运行代码，可得<code>man_data.txt</code>和<code>other_data.txt</code>的数据分别为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># man_data.txt</div><div class="line">[&apos;Is this the right room for an argument?&apos;, &quot;No you haven&apos;t&quot;, &apos;You most certainly did not!&apos;]</div><div class="line"></div><div class="line"># other_data.txt</div><div class="line">[&quot;I&apos;ve told you once.&quot;, &apos;Yea I have.&apos;, &quot;Now let&apos;s get one thing quite clear: I most definityly toly you!&quot;]</div></pre></td></tr></table></figure>
<p>如果我想让列表中的数据一行一行的显示，该如何做呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def print_lol(the_list,indent=False,level=0,fn=sys.stdout):</div><div class="line">    for each_item in the_list:</div><div class="line">        if isinstance(each_item, list):</div><div class="line">            print_lol(each_item,indent,level+1,fn)</div><div class="line">        else:</div><div class="line">            if indent:</div><div class="line">                for tab_stop in range(level):</div><div class="line">                    print (&quot;\t&quot;,end=&apos;&apos;,file=fn)</div><div class="line">            print (each_item,file=fn)</div></pre></td></tr></table></figure>
<p>定义函数<code>print_lol</code>,该函数能够将列表的数据一行一行打印出来，且可以控制数据的缩进。修改之后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    with open(&quot;../resource/man_data.txt&quot;,&quot;w&quot;) as man_data:</div><div class="line">        print_lol(man,True,2,man_data)</div><div class="line">    with open(&quot;../resource/other_data.txt&quot;,&quot;w&quot;) as other_data:</div><div class="line">        print_lol(other,False,0,other_data)</div><div class="line">except IOError as err:</div><div class="line">    print (&quot;File Error &quot; + str(err))</div></pre></td></tr></table></figure>
<p><code>man_data.txt</code>和<code>other_data.txt</code>文件存入的数据一个是有缩进的，一个是没有缩进的。运行实例可看到效果。</p>
<p>最后，介绍一下，Python中一个可供保存和加载数据对象的通用库<code>pickle</code>.其思想是，将Python内存中的数据存入到pickle引擎，输出腌制后的数据。若要读取数据文件，则将持久存储的腌制数据解除腌制，在Python内存中，用原来的数据形式重新创建数据。具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import pickle</div><div class="line"># &quot;b&quot;,Python以二进制模式打开文件</div><div class="line">with open(&apos;mydata.pickle&apos;,&apos;wb&apos;) as mysavedata:</div><div class="line">	# dump 保存数据</div><div class="line">    pickle.dump([1,2,&apos;three&apos;],mysavedata)</div><div class="line">with open(&apos;mydata.pickle&apos;,&apos;rb&apos;) as myrestoredata:</div><div class="line">	# load 从文件恢复数据</div><div class="line">    a_list = pickle.load(myrestoredata)</div><div class="line">print (a_list)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>方法/关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>strip()</td>
<td><code>从字符串中去除左右两边的空白符</code></td>
</tr>
<tr>
<td>print()</td>
<td><code>BIF的file参数控制将文件保存到哪里，如print([1,2,&quot;three&quot;,file=data.txt])</code></td>
</tr>
<tr>
<td>finally</td>
<td><code>不论try/except语法是否出现异常，总会执行finally组</code></td>
</tr>
<tr>
<td>as</td>
<td><code>向except组传入异常对象，使用as赋至另一个标识符，如except IOError as err</code></td>
</tr>
<tr>
<td>str()</td>
<td><code>任何数据对象字符串的转换</code></td>
</tr>
<tr>
<td>locals()</td>
<td><code>返回当前作用域中的变量集合</code></td>
</tr>
<tr>
<td>with</td>
<td><code>会自动处理所有已打开文件的关闭工作</code></td>
</tr>
<tr>
<td>pickle.dump()</td>
<td><code>数据保存到磁盘</code></td>
</tr>
<tr>
<td>pickle.load()</td>
<td><code>从磁盘恢复数据</code></td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之文件与异常]]></title>
      <url>http://jianwl.com/2016/08/19/Python%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8E%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节，主要用代码来增强对Python文件读取和异常处理的理解。</p>
<h3 id="Python文件输入"><a href="#Python文件输入" class="headerlink" title="Python文件输入"></a>Python文件输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># This allows you to use the Python 3.0 style print function </div><div class="line">from __future__ import print_function</div><div class="line"></div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">print(data.readline(), end=&apos;&apos;)</div><div class="line">print(data.readline(), end=&apos;&apos;)</div><div class="line">print(data.readline(), end=&apos;&apos;)</div><div class="line">print (&quot;&lt;/br&gt;&quot;)</div><div class="line"></div><div class="line"># 返回文件的起始位置</div><div class="line">data.seek(0)</div><div class="line">for each_line in data:</div><div class="line">    print(each_line,end=&apos;&apos;)</div><div class="line"></div><div class="line"># 关闭文件</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<h3 id="数据文件内容data-txt"><a href="#数据文件内容data-txt" class="headerlink" title="数据文件内容data.txt"></a>数据文件内容<code>data.txt</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Man :Is this the right room for an argument?</div><div class="line">Other Man :I&apos;ve told you once.</div><div class="line">Man :No you haven&apos;t</div><div class="line">Other Man :Yea I have.</div><div class="line">Man : You most certainly did not!</div><div class="line">Other Man : Now let&apos;s get one thing quite clear: I most definityly toly you!</div><div class="line">pause</div><div class="line">pause</div></pre></td></tr></table></figure>
<h3 id="抽取数据行中的各部分"><a href="#抽取数据行中的各部分" class="headerlink" title="抽取数据行中的各部分"></a>抽取数据行中的各部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># This allows you to use the Python 3.0 style print function</div><div class="line">from __future__ import print_function</div><div class="line"></div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    (role, line_spoken) = each_line.split(&apos;:&apos;)</div><div class="line">    print(role, end=&apos;&apos;)</div><div class="line">    print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">    print(line_spoken, end=&apos;&apos;)</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p>运行程序，发现一个运行时错误,为何？原因在于<code>Other Man : Now let&#39;s get one thing quite clear: I most definityly toly you!</code>这行数据有两个冒号，split()方法将这一行为3部分。代码没有告诉split()如何处理第3部分，所以Python解释器会产生ValueError，抱怨值过多，然后终止。如何处理呢？<code>split(&#39;:&#39;,1)</code>这个方法只会处理第一个为冒号的分割字符。修改之后的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># This allows you to use the Python 3.0 style print function</div><div class="line">from __future__ import print_function</div><div class="line"></div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    (role, line_spoken) = each_line.split(&apos;:&apos;,1)</div><div class="line">    print(role, end=&apos;&apos;)</div><div class="line">    print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">    print(line_spoken, end=&apos;&apos;)</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p>运行之后，仍然有错，为何？原因在于<code>pause</code>这一行数据中没有冒号，故Python解释器在抱怨没有足够的数据来处理。如何处理呢？两种方案</p>
<ol>
<li>增加额外的逻辑来处理意外的情况</li>
<li>允许这些错误发生，然后只需在各个错误发生时，相应处理即可。</li>
</ol>
<p><strong>方案1</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    if not each_line.find(&quot;:&quot;) == -1:</div><div class="line">        (role, line_spoken) = each_line.split(&apos;:&apos;)</div><div class="line">        print(role, end=&apos;&apos;)</div><div class="line">        print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">        print(line_spoken, end=&apos;&apos;)</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p><strong>方案2</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    try:</div><div class="line">        (role, line_spoken) = each_line.split(&apos;:&apos;, 1)</div><div class="line">        print(role, end=&apos;&apos;)</div><div class="line">        print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">        print(line_spoken, end=&apos;&apos;)</div><div class="line">    except ValueError:</div><div class="line">        pass</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p><strong>方案1和方案2哪种方案好呢？</strong></p>
<p>使用方案1，随着考虑的情况越来越多，增加额外的逻辑代码也会越来越多，方案的复杂性随之增加，之后最后可能掩盖程序本来的作用。</p>
<p>使用方案2，你可以关注代码真正需要什么，而不必操心哪里出现问题。</p>
<p><strong>附上完整代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">try:</div><div class="line">    data = open(&apos;../resource/data.txt&apos;)</div><div class="line">    for each_line in data:</div><div class="line">        try:</div><div class="line">            (role, line_spoken) = each_line.split(&apos;:&apos;, 1)</div><div class="line">            print(role, end=&apos;&apos;)</div><div class="line">            print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">            print(line_spoken, end=&apos;&apos;)</div><div class="line">        except ValueError:</div><div class="line">            print(&quot;inner error&quot;)</div><div class="line">            pass</div><div class="line">    data.close()</div><div class="line">except IOError:</div><div class="line">    print(&apos;the data file is missing!&apos;)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th style="text-align:left">方法/关键字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">open()</td>
<td style="text-align:left"><code>打开一个磁盘文件</code></td>
</tr>
<tr>
<td style="text-align:left">readline()</td>
<td style="text-align:left"><code>从一个打开文件中读取一行数据</code></td>
</tr>
<tr>
<td style="text-align:left">seek()</td>
<td style="text-align:left"><code>将文件退回到起始位置</code></td>
</tr>
<tr>
<td style="text-align:left">close()</td>
<td style="text-align:left"><code>关闭之前打开的文件</code></td>
</tr>
<tr>
<td style="text-align:left">split()</td>
<td style="text-align:left"><code>将一个字符串分解为子串列表</code></td>
</tr>
<tr>
<td style="text-align:left">find()</td>
<td style="text-align:left"><code>方法会在一个字符串中查找特定子串</code></td>
</tr>
<tr>
<td style="text-align:left">not</td>
<td style="text-align:left"><code>将条件取反</code></td>
</tr>
<tr>
<td style="text-align:left">try/except</td>
<td style="text-align:left"><code>提供异常处理机制</code></td>
</tr>
<tr>
<td style="text-align:left">pass</td>
<td style="text-align:left"><code>Python的空语句或null语句，它什么也不做</code></td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之正则表达式]]></title>
      <url>http://jianwl.com/2016/08/19/JAVA%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很早之前就接触过正则表达式，但因其难以理解而浅尝辄止，网络上很多关于正则表达式的资料，但往往过于偏重语法。重要的不是你记住了多少个特殊字符，而是你会不会运用它们去解决实际问题。最近面试，问到了关于正则表达式的一些问题，深知这一块知识点处于空白区域，故重新学起，以入门级的心态来学习之。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>正则表达式是一些用来匹配和处理的字符串，其是内置于其他语言的”迷你”语言。</p>
<h3 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h3><p>正则表达式是人们为了解决某一类专门的问题而发明的，要想理解正则表达式，最好的办法就是了解他们能够解决什么样的问题？请考虑以下场景</p>
<ol>
<li>你正在搜索一个文件，这个文件里包含单词car(不区分大小写)，但你不想把包含着字符串car的其他单词(比如scar、carry等)也找出来。</li>
<li>你创建了一份包含着一张表单的Web页面，这张表单用来收集用户信息，但其中包括一个用户姓名。你需要检查用户姓名中是否存在”张”这个字。</li>
<li>你正在编辑一段源代码并且要把所有的size都替换成isize，但这种替换仅限于单词size本身而不涉及那些包含着字符串size的其他单词。</li>
</ol>
<p>以上场景大家在编写程序时都会遇到，但任何一种支持条件处理和字符串操作的语言都能解决他们，但问题是解决方案会变得十分复杂。比较容易想到的方案是：<code>遍历那些单词在循环体总用if语句来进行测试，用大量的标记来记录你已经找到了什么，你还没有找到什么，还需要检查空白字符串和特殊字符等等</code></p>
<p>另一种解决方案是使用正则表达式,比如说场景一的解决方案<code>\b[Cc][Aa][Rr]\b</code></p>
<h3 id="正则表达式用途"><a href="#正则表达式用途" class="headerlink" title="正则表达式用途"></a>正则表达式用途</h3><p>认真思考一下那些问题场景，归纳起来，正则表达式的用途无非就是<code>搜索</code>和<code>替换</code></p>
<h3 id="JAVA正则表达式"><a href="#JAVA正则表达式" class="headerlink" title="JAVA正则表达式"></a>JAVA正则表达式</h3><p><strong>包&amp;类</strong></p>
<p>java.util.regex包提供以下三个类用于处理正则表达式</p>
<table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Pattern</td>
<td style="text-align:left">pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。</td>
</tr>
<tr>
<td style="text-align:left">Matcher</td>
<td style="text-align:left">Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。</td>
</tr>
<tr>
<td style="text-align:left">PatternSyntaxException</td>
<td style="text-align:left">一个非强制异常类，它表示一个正则表达式模式中的语法错误。</td>
</tr>
</tbody>
</table>
<p><strong>JAVA实战</strong></p>
<p>场景1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class RegexMatches &#123;</div><div class="line">    private static final String REGEX = &quot;\\b[Cc][Aa][Rr]\\b&quot;;</div><div class="line">    private static final String INPUT = &quot;car cAr CaR cartie CAr&quot;;</div><div class="line"></div><div class="line">    public static void main(String args[]) &#123;</div><div class="line">        Pattern p = Pattern.compile(REGEX);</div><div class="line">        Matcher m = p.matcher(INPUT); // 获取 matcher 对象</div><div class="line">        int count = 0;</div><div class="line"></div><div class="line">        while (m.find()) &#123;</div><div class="line">            count++;</div><div class="line">            // 匹配的个数</div><div class="line">            System.out.println(&quot;Match number &quot; + count);</div><div class="line"></div><div class="line">            // 匹配元素的起始下标</div><div class="line">            System.out.println(&quot;start(): &quot; + m.start());</div><div class="line"></div><div class="line">            // 匹配元素的终止下标</div><div class="line">            System.out.println(&quot;end(): &quot; + m.end());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>场景2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RegexMatches &#123;</div><div class="line">    private static final String REGEX = &quot;张&quot;;</div><div class="line">    private static final String INPUT = &quot;张成四&quot;;</div><div class="line">    private static Pattern pattern;</div><div class="line">    private static Matcher matcher;</div><div class="line"></div><div class="line">    public static void main(String args[]) &#123;</div><div class="line">        pattern = Pattern.compile(REGEX);</div><div class="line">        matcher = pattern.matcher(INPUT);</div><div class="line"></div><div class="line">        System.out.println(&quot;Current REGEX is: &quot; + REGEX);</div><div class="line">        System.out.println(&quot;Current INPUT is: &quot; + INPUT);</div><div class="line"></div><div class="line">        //lookingAt不需要整个序列都匹配，存在匹配的项即可</div><div class="line">        System.out.println(&quot;lookingAt(): &quot; + matcher.lookingAt());</div><div class="line"></div><div class="line">        //matcher要求整个序列都匹配</div><div class="line">        System.out.println(&quot;matches(): &quot; + matcher.matches());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>场景3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class RegexMatches &#123;</div><div class="line">    private static String REGEX = &quot;\\bsize\\b&quot;;</div><div class="line">    private static String INPUT = &quot;the size of the array is three! testsize,thissize,size&quot;;</div><div class="line">    private static String REPLACE = &quot;isize&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Pattern p = Pattern.compile(REGEX);</div><div class="line">        Matcher m = p.matcher(INPUT);</div><div class="line"></div><div class="line">        // 替换字符串</div><div class="line">        INPUT = m.replaceAll(REPLACE);</div><div class="line">        System.out.println(INPUT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>正则表达式必知必会(修订版)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python入门篇]]></title>
      <url>http://jianwl.com/2016/08/18/Python%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="什么是Python"><a href="#什么是Python" class="headerlink" title="什么是Python?"></a>什么是Python?</h3><p>Python是一种解释型的、面向对象的、带有动态语义的高级程序设计语言。</p>
<h3 id="Python相对Java的优劣之处"><a href="#Python相对Java的优劣之处" class="headerlink" title="Python相对Java的优劣之处"></a>Python相对Java的优劣之处</h3><p><strong>优点</strong></p>
<ul>
<li>Python作为动态语言更适合初学编程者，Python可以让初学者把精力集中在编程对象和思维方法上，而不用去担心语法、类型等等外在因素。</li>
<li>Python清晰简洁的语法使得它调试起来比Java简单的多</li>
<li>Python有一些Java没有的强大的架构，可以表达非常复杂的逻辑；比如<a href="http://www.scipy-lectures.org/advanced/advanced_python/" target="_blank" rel="external">Advanced Python Constructs</a></li>
<li>Python有非常强大的支持异步的框架，如<a href="http://eventlet.net/" target="_blank" rel="external">Eventlet Networking Library</a>，而Java要实现这些功能要麻烦的多。</li>
<li>Python作为脚本语言，更适合开发小的应用，而且极其适合在应用发展初期时用来做原型。</li>
</ul>
<p><strong>不足</strong></p>
<ul>
<li>由于是动态语言，所以比Java慢，可以想象一下，Python编译器对于没有类型的变量，需要一个个去check具体是什么类型所消耗的时间，Java相比起C++等等本来就不快，可想而知更慢的效果。</li>
<li>Java很适合发展跨平台应用，而Python不适合</li>
</ul>
<h3 id="Python入门示例"><a href="#Python入门示例" class="headerlink" title="Python入门示例"></a>Python入门示例</h3><p><strong>创建列表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">movies = [&quot;movies-1&quot;,1975,&quot;movies-2&quot;,1979,&quot;movies-3&quot;,1983]</div><div class="line">print(movies)</div></pre></td></tr></table></figure></p>
<p>Python变量标识符没有类型，且列表可以包含混合类型的数据</p>
<p><strong>遍历列表数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">movies = [&quot;movies-1&quot;,1975,&quot;movies-2&quot;,1979,&quot;movies-3&quot;,1983]</div><div class="line">for each_movies in movies :	</div><div class="line">    print(each_movies)</div></pre></td></tr></table></figure></p>
<p>for循环的结构为<code>for 目标标识符  in  列表 :</code>  in将目标标识符和列表分开，冒号表示列表处理开始</p>
<p><strong>定义函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 函数定义</div><div class="line">def print_arr(arrs) :</div><div class="line">	for arr in arrs :</div><div class="line">		if isinstance(arr,list) :</div><div class="line">			print_arr(arr)</div><div class="line">		else :</div><div class="line">			print(arr)</div><div class="line">            </div><div class="line"># 函数调用</div><div class="line">movies = [&quot;movies-1&quot;,&quot;movies-2&quot;,[&quot;movies-3&quot;,[&quot;movies-4&quot;,&quot;movies-5&quot;]]];</div><div class="line">print_arr(movies);</div></pre></td></tr></table></figure></p>
<p>函数定义的结构<code>def 函数名 (参数) ：</code>，参数表是可选的，但括号不可少，括号后的冒号，表示函数代码组开始</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>标识符没有类型，用于表示数据对象的名字，但标识符所指示的数据对象有类型</li>
<li>列表可以存放任意数据，且数据可以是混合类型</li>
<li>isinstance() 用于判断一个标识符是否是指定的某个类型的数据对象。</li>
<li>用def来定义一个函数</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.zhihu.com/question/23111456" target="_blank" rel="external">Python相比Java的优势和劣势</a></li>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之异常]]></title>
      <url>http://jianwl.com/2016/08/16/JAVA%E4%B9%8B%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h3 id="异常机制设计初衷"><a href="#异常机制设计初衷" class="headerlink" title="异常机制设计初衷"></a>异常机制设计初衷</h3><p>顾名思义，异常应该只用于异常的情况，永远不应该用于正常的流程控制。</p>
<h3 id="异常类层次结构"><a href="#异常类层次结构" class="headerlink" title="异常类层次结构"></a>异常类层次结构</h3><p><img src="../images/JAVA异常.jpg" alt=""><br>  在 Java 中，所有的异常都有一个共同的祖先 <code>Throwable</code>。<code>Throwable</code> 指定代码中可用异常传播机制通过 Java 应用程序传输的任何问题的共性。</p>
<p><strong>Throwable</strong><br>有两个重要的子类：<code>Exception</code> 和 <code>Error</code>，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p>
<p><strong>Error</strong><br><code>Error</code>是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误<code>Virtual MachineError</code>，当 JVM 不再有继续执行操作所需的内存资源时，将出现<code>OutOfMemoryError</code>。这些异常发生时，JVM一般会选择线程终止。这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如JVM运行错误<code>Virtual MachineError</code>、类定义错误<code>NoClassDefFoundError</code>等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</p>
<p><strong>Exception</strong><br><code>Exception</code>是程序本身可以处理的异常，其有一个重要的子类 <code>RuntimeException</code>。<code>RuntimeException</code> 类及其子类表示“JVM 常用操作”引发的错误。例如，若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（<code>NullPointerException</code>、<code>ArithmeticException</code>）和 <code>ArrayIndexOutOfBoundException</code>。</p>
<p><strong>Exception和Error的区别</strong><br><code>Exception</code>能被程序本身可以处理，<code>Error</code>是无法处理。</p>
<h3 id="JAVA异常类型"><a href="#JAVA异常类型" class="headerlink" title="JAVA异常类型"></a>JAVA异常类型</h3><p>Java的异常分为可查的异常(编译器要求必须处置的异常)和不可查的异常((编译器不要求强制处置的异常)。</p>
<p><strong>可查的异常</strong><br> 除了<code>RuntimeException</code>及其子类以外，其他的<code>Exception</code>类及其子类都属于可查异常。正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用<code>try-catch</code>语句捕获它，要么用<code>throws</code>子句声明抛出它，否则编译不会通过。</p>
<p><strong>不可查异常</strong><br><code>RuntimeException</code>与其子类和<code>Error</code>都属于不可查异常。运行时异常，如<code>NullPointerException</code>(空指针异常)、<code>IndexOutOfBoundsException</code>(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用<code>try-catch</code>语句捕获它，也没有用<code>throws</code>子句声明抛出它，也会编译通过</p>
<h3 id="处理异常机制"><a href="#处理异常机制" class="headerlink" title="处理异常机制"></a>处理异常机制</h3><p>异常处理机制为抛出异常、捕捉异常</p>
<p><strong>抛出异常</strong><br>当一个方法出现错误引发异常时，方法创建异常对象并交付运行时系统，异常对象中包含了异常类型和异常出现时的程序状态等异常信息。运行时系统负责寻找处置异常的代码并执行</p>
<p><strong>捕获异常</strong><br>在方法抛出异常之后，运行时系统将转为寻找合适的异常处理器（exception handler）。潜在的异常处理器是异常发生时依次存留在调用栈中的方法的集合。当异常处理器所能处理的异常类型与方法抛出的异常类型相符时，即为合适 的异常处理器。运行时系统从发生异常的方法开始，依次回查调用栈中的方法，直至找到含有合适异常处理器的方法并执行。当运行时系统遍历调用栈而未找到合适 的异常处理器，则运行时系统终止。同时，意味着Java程序的终止。</p>
<h3 id="JAVA常见异常"><a href="#JAVA常见异常" class="headerlink" title="JAVA常见异常"></a>JAVA常见异常</h3><p><strong> RuntimeException子类</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>java.lang.ArrayIndexOutOfBoundsException</code></td>
<td style="text-align:left">数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.ArithmeticException</code></td>
<td style="text-align:left">算术条件异常。譬如：整数除零等</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.NullPointerException</code></td>
<td style="text-align:left">空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.ClassNotFoundException</code></td>
<td style="text-align:left">找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.NegativeArraySizeException</code></td>
<td style="text-align:left">数组长度为负异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.ArrayStoreException</code></td>
<td style="text-align:left">数组中包含不兼容的值抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.SecurityException</code></td>
<td style="text-align:left">安全性异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.IllegalArgumentException</code></td>
<td style="text-align:left">非法参数异常</td>
</tr>
</tbody>
</table>
<p><strong>IOException</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>IOException</code></td>
<td style="text-align:left">操作输入流和输出流时可能出现的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>EOFException</code></td>
<td style="text-align:left">文件已结束异常</td>
</tr>
<tr>
<td style="text-align:left"><code>FileNotFoundException</code></td>
<td style="text-align:left">文件未找到异常</td>
</tr>
</tbody>
</table>
<p><strong>其他</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>ClassCastException</code></td>
<td style="text-align:left">类型转换异常类</td>
</tr>
<tr>
<td style="text-align:left"><code>ArrayStoreException</code></td>
<td style="text-align:left">数组中包含不兼容的值抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>SQLException</code></td>
<td style="text-align:left">操作数据库异常类</td>
</tr>
<tr>
<td style="text-align:left"><code>NoSuchFieldException</code></td>
<td style="text-align:left">字段未找到异常</td>
</tr>
<tr>
<td style="text-align:left"><code>NoSuchMethodException</code></td>
<td style="text-align:left">方法未找到抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>NumberFormatException</code></td>
<td style="text-align:left">字符串转换为数字抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>StringIndexOutOfBoundsException</code></td>
<td style="text-align:left">字符串索引超出范围抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>IllegalAccessException</code></td>
<td style="text-align:left">不允许访问某类异常</td>
</tr>
<tr>
<td style="text-align:left"><code>InstantiationException</code></td>
<td style="text-align:left">当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</td>
</tr>
</tbody>
</table>
<h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><p>用户自定义异常类，只需继承Exception类即可</p>
<p><strong>使用自定义异常类步骤</strong></p>
<ol>
<li>创建自定义异常类。</li>
<li>在方法中通过<code>throw</code>关键字抛出异常对象。</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用<code>try-catch</code>语句捕获并处理；否则在方法的声明处通过<code>throws</code>关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调用者中捕获并处理异常。</li>
</ol>
<h3 id="JAVA实战-未完待续…"><a href="#JAVA实战-未完待续…" class="headerlink" title="JAVA实战 未完待续….."></a>JAVA实战 未完待续…..</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Effective Java 第2版</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA线程池]]></title>
      <url>http://jianwl.com/2016/08/14/JAVA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。</p>
<h3 id="线程池的作用"><a href="#线程池的作用" class="headerlink" title="线程池的作用"></a>线程池的作用</h3><p>限制系统中执行线程的数量，根据系统环境情况，自动/手动设置线程数量，达到最佳效果。</p>
<h3 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h3><ol>
<li>减少创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>
<li>可以根据系统的承受能力，调整线程池中工作线程的数量，防止因为消耗过多内存，而把服务器拖垮。</li>
</ol>
<h3 id="线程池介绍"><a href="#线程池介绍" class="headerlink" title="线程池介绍"></a>线程池介绍</h3><p><strong>线程池中比较重要的类</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>ExecutorService</code></td>
<td style="text-align:left">真正的线程池接口</td>
</tr>
<tr>
<td style="text-align:left"><code>ScheduledExecutorService</code></td>
<td style="text-align:left">定时任务</td>
</tr>
<tr>
<td style="text-align:left"><code>ThreadPoolExecutor</code></td>
<td style="text-align:left"><code>ExecutorService默认实现</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ScheduledThreadPoolExecutor</code></td>
<td style="text-align:left">继承<code>ThreadPoolExecutor</code>的<code>ScheduledExecutorService</code>接口实现周期性任务调度</td>
</tr>
</tbody>
</table>
<p><strong>常用的线程池</strong><br>利用Executors中的静态方法来创建线程池</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>newFixedThreadPool</code></td>
<td style="text-align:left">创建一个固定长度的线程池</td>
</tr>
<tr>
<td style="text-align:left"><code>newCacheThreadPool</code></td>
<td style="text-align:left">创建一个可缓存的线程池，如果线程池当前规模超过处理需求，将回收空闲线程</td>
</tr>
<tr>
<td style="text-align:left"><code>newSingleThreadExecutor</code></td>
<td style="text-align:left">创建一个单线程的<code>Executor</code> ,</td>
</tr>
<tr>
<td style="text-align:left"><code>newScheduledThreadPool</code></td>
<td style="text-align:left">创建一个固定长度的线程池，以延迟/定时的方式来执行任务</td>
</tr>
</tbody>
</table>
<h3 id="JAVA-实战"><a href="#JAVA-实战" class="headerlink" title="JAVA 实战"></a>JAVA 实战</h3><p><strong>创建定时任务线程池</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ScheduledDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1);</div><div class="line">        executor.scheduleAtFixedRate(() -&gt; System.out.println(&quot;============&quot;),1000,5000, TimeUnit.MILLISECONDS);</div><div class="line">        </div><div class="line">        //每隔一段时间打印系统时间，证明两者是互不影响的</div><div class="line">        executor.scheduleAtFixedRate(() -&gt; System.out.println(OffsetDateTime.now()),1000,2000,TimeUnit.MILLISECONDS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>创建固定长度的线程池</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class FixedThreadDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ExecutorService pool = Executors.newFixedThreadPool(2);</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        // 关闭线程池</div><div class="line">        pool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B%E6%B1%A0" target="_blank" rel="external">线程池定义</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生产者-消费者模式]]></title>
      <url>http://jianwl.com/2016/08/14/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在实际的开发过程中，经常会碰到如下场景，某个某块负责生成数据，这些数据由另一个模块来负责处理，产生数据的模块，就形象地称为生产者，而处理数据的模块就称为消费者。</p>
<p>单单抽象出生产者和消费者，还谈不上生产者/消费者模式，该模式还需要有一个缓冲区处于生产者和消费之间，作为一个中介。生产者把数据放入缓冲区，而消费者从缓冲区取出数据。大概的结构如下图：<br><img src="../images/producer_consumer.jpg" alt=""></p>
<p><strong>场景示例</strong><br>为了不至于太抽象，我们举一个寄信的例子，假设你要寄一封平信，大致过程如下：</p>
<ol>
<li>你把信写好 – 相当于生成者生产数据</li>
<li>你把信放入邮筒 – 相当于生产者把数据放到缓冲区</li>
<li>邮递员把信从邮筒取出 – 相当于消费者把数据取出缓冲区</li>
<li>邮递员把信拿去邮局做响应的处理 – 相当于消费者处理数据</li>
</ol>
<h3 id="缓存区有何作用？"><a href="#缓存区有何作用？" class="headerlink" title="缓存区有何作用？"></a>缓存区有何作用？</h3><p><strong>解耦</strong><br>如果让生产者直接调用消费者的消费方法，那么生产者对于消费者就会产生依赖(即耦合)，将来如果消费者代码变化了，可能会影响到生产者，如果两者都依赖于缓冲区，两者之间不直接依赖，耦合也就相应降低了。</p>
<p><strong>支持并发</strong><br>如果生产者直接调用消费者的消费方法，由于函数调用时同步的，在消费者的方法没有返回之前，生产者只好一直等待，万一消费者处理数据很慢，生产者就白白浪费大好时光了。</p>
<p>使用了生产者/消费者模式之后，生产者生产出来的数据往缓存区一丢，就可以再去生产下一个数据了，基本上不依赖消费者的处理速度。</p>
<p><strong>支持忙闲不均</strong><br>如果生产数据的速度时快时慢，缓冲区的好处就体现出来了，当数据生产快的时候，消费者来不及处理，未处理的数据可以暂时存在缓冲区，等生产者生产速度慢下来，消费者再慢慢处理。</p>
<h3 id="JAVA实现"><a href="#JAVA实现" class="headerlink" title="JAVA实现"></a>JAVA实现</h3><p><strong>方法1：阻塞队列方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class ProducerConsumer &#123;</div><div class="line">    // 建立一个阻塞队列</div><div class="line">    private LinkedBlockingQueue&lt;Object&gt; queue = new LinkedBlockingQueue&lt;Object&gt;(10);</div><div class="line"></div><div class="line">    public ProducerConsumer() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void start() &#123;</div><div class="line">        new Producer().start();</div><div class="line">        new Consumer().start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        ProducerConsumer bootstrap = new ProducerConsumer();</div><div class="line">        bootstrap.start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //生产者</div><div class="line">    class Producer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                try &#123;</div><div class="line">                    Object o = new Object();</div><div class="line">                    // 存入一个对象</div><div class="line">                    queue.put(o);</div><div class="line">                    System.out.println(&quot;Producer: &quot; + o);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    System.out.println(&quot;producer is interrupted!&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //消费者</div><div class="line">    class Consumer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                try &#123;</div><div class="line">                    // 取出一个对象</div><div class="line">                    Object o = queue.take();</div><div class="line">                    System.out.println(&quot;Consumer: &quot; + o);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    System.out.println(&quot;producer is interrupted!&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>方法2：线程锁方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">public class ProducerConsumer &#123;</div><div class="line">    private LinkedList&lt;Object&gt; myList = new LinkedList&lt;Object&gt;();</div><div class="line">    private int MAX = 10;</div><div class="line">    private final Lock lock = new ReentrantLock();</div><div class="line">    private final Condition full = lock.newCondition();</div><div class="line">    private final Condition empty = lock.newCondition();</div><div class="line"></div><div class="line">    public ProducerConsumer() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void start() &#123;</div><div class="line">        new Producer().start();</div><div class="line">        new Consumer().start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        ProducerConsumer s2 = new ProducerConsumer();</div><div class="line">        s2.start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //生产者</div><div class="line">    class Producer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                lock.lock();</div><div class="line">                try &#123;</div><div class="line">                    while (myList.size() == MAX) &#123;</div><div class="line">                        System.out.println(&quot;warning: it&apos;s full!&quot;);</div><div class="line">                        full.await();</div><div class="line">                    &#125;</div><div class="line">                    Object o = new Object();</div><div class="line">                    if (myList.add(o)) &#123;</div><div class="line">                        System.out.println(&quot;Producer: &quot; + o);</div><div class="line">                        empty.signal();</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (InterruptedException ie) &#123;</div><div class="line">                    System.out.println(&quot;producer is interrupted!&quot;);</div><div class="line">                &#125; finally &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    // 消费者</div><div class="line">    class Consumer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                lock.lock();</div><div class="line">                try &#123;</div><div class="line">                    while (myList.size() == 0) &#123;</div><div class="line">                        System.out.println(&quot;warning: it&apos;s empty!&quot;);</div><div class="line">                        empty.await();</div><div class="line">                    &#125;</div><div class="line">                    Object o = myList.removeLast();</div><div class="line">                    System.out.println(&quot;Consumer: &quot; + o);</div><div class="line">                    full.signal();</div><div class="line">                &#125; catch (InterruptedException ie) &#123;</div><div class="line">                    System.out.println(&quot;consumer is interrupted!&quot;);</div><div class="line">                &#125; finally &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.csdn.net/kaiwii/article/details/6758942" target="_blank" rel="external">生产者/消费者模式</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>http://jianwl.com/2016/08/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><p><strong>时间复杂度</strong><br>算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。</p>
<p><strong>空间复杂度</strong><br>空间复杂度是算法运行过程中所需辅助空间的度量</p>
<p><strong>等差数列公式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S(n) = n(a1 + an)/2</div></pre></td></tr></table></figure></p>
<p><strong>等比数列公式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S(n) = a1(1-q^n)/1-q (q为等比系数不等于1)</div></pre></td></tr></table></figure></p>
<h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><p><strong>前置条件</strong><br>待查找的数组有序</p>
<p><strong>算法思想</strong><br>查找的元素时,首先与数组中间的元素进行比较,如果大于这个元素,则在当前数组的后半部分继续查找,如果小于这个元素,则在当前数组的前半部分继续查找,直到找到相同的元素,或者所查找的数组范围为空为止.</p>
<p><strong>时间复杂度</strong><br>O(lgn)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static int binarySearch0(long[] a, int fromIndex, int toIndex,</div><div class="line">                                 long key) &#123;</div><div class="line">    int low = fromIndex;</div><div class="line">    int high = toIndex - 1;</div><div class="line"></div><div class="line">    while (low &lt;= high) &#123;</div><div class="line">        int mid = (low + high) &gt;&gt;&gt; 1;</div><div class="line">        long midVal = a[mid];</div><div class="line"></div><div class="line">        if (midVal &lt; key)</div><div class="line">            low = mid + 1;</div><div class="line">        else if (midVal &gt; key)</div><div class="line">            high = mid - 1;</div><div class="line">        else</div><div class="line">            return mid; // key found</div><div class="line">    &#125;</div><div class="line">    return -(low + 1);  // key not found.</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>算法思想</strong><br>在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，至此选择排序完成。</p>
<p><strong>空间复杂度</strong><br>O(1)</p>
<p><strong>时间复杂度</strong><br>O(n^2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 比较次数</div><div class="line">n + (n-1) + (n-2) + .... + 1 = n*(n+1)/2</div></pre></td></tr></table></figure></p>
<p><strong>稳定性</strong><br>不稳定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 举个栗子</div><div class="line">数组[5, 5, 3]，用选择排序法进行升序排列[3,5,5]，相等数值5的前后顺序颠倒了。故该算法不稳定</div></pre></td></tr></table></figure></p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static int[] chooseSort(int[] intArr)&#123;</div><div class="line">    for(int i=0;i&lt;intArr.length;i++)&#123;</div><div class="line">        int lowIndex = i;</div><div class="line">        for(int j=i+1;j&lt;intArr.length;j++)&#123;</div><div class="line">            if(intArr[j]&lt;intArr[lowIndex])&#123;</div><div class="line">                lowIndex = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //将最小元素与第i个元素交换</div><div class="line">        int temp = intArr[i];</div><div class="line">        intArr[i] = intArr[lowIndex];</div><div class="line">        intArr[lowIndex] = temp;</div><div class="line">    &#125;</div><div class="line">    return intArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>算法思想</strong></p>
<p><img src="../images/插入排序.jpg" alt=""><br>插入排序，首次默认下标0位元素为已排序列表，后面元素相对于已排序列表由后往前，找到合适位置即插入，然后下标递增继续进行。</p>
<p><strong>时间复杂度</strong><br>O(n^2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n + (n-1) + (n-2) + .... + 1 = n*(n+1) / 2</div></pre></td></tr></table></figure></p>
<p><strong>空间复杂度</strong><br>O(1)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static void insertionSort(int[] array) &#123;</div><div class="line">        if (array == null || array.length &lt; 2) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (int i = 1; i &lt; array.length; i++) &#123;</div><div class="line">            int currentValue = array[i];</div><div class="line">            int position = i;</div><div class="line">            for (int j = i - 1; j &gt;= 0; j--) &#123;</div><div class="line">                if (array[j] &gt; currentValue) &#123;</div><div class="line">                    array[j + 1] = array[j];</div><div class="line">                    position -= 1;</div><div class="line">                &#125; else &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            array[position] = currentValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><strong>插入排序和选择排序对比</strong><br>插入排序和选择排序的时间复杂度是一样的，但两种算法还是有区别的。在任何条件下，选择排序只会移动元素O(n)次,而插入排序的元素的移动次数可能达到O(n^2)</p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>算法思想</strong><br><img src="../images/归并算法.jpg" alt=""><br>归并排序采用分治法，算法涉及三个步骤 </p>
<ol>
<li>分解: 把待排序的 n 个元素的序列分解成两个子序列, 每个子序列包括 n/2 个元素. </li>
<li>治理: 对每个子序列分别调用归并排序MergeSort, 进行递归操作 </li>
<li>合并: 合并两个排好序的子序列,生成排序结果. </li>
</ol>
<p><strong>时间复杂度</strong><br>O(nlgn)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public static void mergeSort(int[] data) &#123;</div><div class="line">        sort(data, 0, data.length - 1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void sort(int[] data, int left, int right) &#123;</div><div class="line">        if (left &gt;= right)</div><div class="line">            return;</div><div class="line">        // 找出中间索引</div><div class="line">        int center = (left + right) / 2;</div><div class="line">        // 对左边数组进行递归</div><div class="line">        sort(data, left, center);</div><div class="line">        // 对右边数组进行递归</div><div class="line">        sort(data, center + 1, right);</div><div class="line">        // 合并</div><div class="line">        merge(data, left, center, right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将两个数组进行归并，归并前面2个数组已有序，归并后依然有序</div><div class="line">     *</div><div class="line">     * @param data   数组对象</div><div class="line">     * @param left   左数组的第一个元素的索引</div><div class="line">     * @param center 左数组的最后一个元素的索引，center+1是右数组第一个元素的索引</div><div class="line">     * @param right  右数组最后一个元素的索引</div><div class="line">     */</div><div class="line">    public static void merge(int[] data, int left, int center, int right) &#123;</div><div class="line">        // 临时数组</div><div class="line">        int[] tmpArr = new int[data.length];</div><div class="line">        // 右数组第一个元素索引</div><div class="line">        int mid = center + 1;</div><div class="line">        // third 记录临时数组的索引</div><div class="line">        int third = left;</div><div class="line">        // 缓存左数组第一个元素的索引</div><div class="line">        int tmp = left;</div><div class="line">        while (left &lt;= center &amp;&amp; mid &lt;= right) &#123;</div><div class="line">            // 从两个数组中取出最小的放入临时数组</div><div class="line">            if (data[left] &lt;= data[mid]) &#123;</div><div class="line">                tmpArr[third++] = data[left++];</div><div class="line">            &#125; else &#123;</div><div class="line">                tmpArr[third++] = data[mid++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // 剩余部分依次放入临时数组（实际上两个while只会执行其中一个）</div><div class="line">        while (mid &lt;= right) &#123;</div><div class="line">            tmpArr[third++] = data[mid++];</div><div class="line">        &#125;</div><div class="line">        while (left &lt;= center) &#123;</div><div class="line">            tmpArr[third++] = data[left++];</div><div class="line">        &#125;</div><div class="line">        // 将临时数组中的内容拷贝回原数组中</div><div class="line">        // （原left-right范围的内容被复制回原数组）</div><div class="line">        while (tmp &lt;= right) &#123;</div><div class="line">            data[tmp] = tmpArr[tmp++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>算法思想</strong><br>快速排序采用了一种分治的策略,算法涉及三个步骤 :</p>
<ol>
<li>先从数列中取出一个数作为基准数。</li>
<li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li>
<li>再对左右区间重复第二步，直到各区间只有一个数。</li>
</ol>
<p><strong>插图解释</strong><br>对下面这个数组快排，随意选择一个数作为基准数(此处选6),有两个变量哨兵i和哨兵j，分别指向最左边和最右边。<br><img src="../images/快排-1.jpg" alt=""><br>哨兵j先出动，一步一步的向左挪动，找到一个小于6的数停下来，接下来哨兵i再一步一步地向右挪，直到找到大于6的数停下来。交换两个数字的位置。<br><img src="../images/快排-2.jpg" alt=""><br>到此第一次交换结束，接下来哨兵j继续向左挪动，发现了4就停下来了(特别注意，每次必须哨兵j先出发)，哨兵i也jx向右挪动，发现了9就停下来了，交换两数的位置<br><img src="../images/快排-3.jpg" alt=""><br>第二次交换结束。哨兵j继续向左挪动，发现了3，哨兵i继续向右挪动，糟啦，哨兵i和哨兵j相遇了，此时说明探测结束了，我们将基数6和3进行交换。<br><img src="../images/快排-4.jpg" alt=""><br>至此我们完成了以6为分界点拆分成两个数组。接下来安装刚刚的方法，分别处理左右两边的数组即可。最后附上快速排序的流程图。<br><img src="../images/快排-5.jpg" alt=""></p>
<p><strong>示例中为何要哨兵j先出发</strong><br>因为如果哨兵i先出发，当探测结束时，哨兵i和哨兵j相遇的数据将会是大于6的，无法完成相遇数据与第一个数组的交换。</p>
<p><strong>时间复杂度</strong><br>O(n^2)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  public void quick(Integer[] str) &#123;</div><div class="line">    if (str.length &gt; 0) &#123;    //查看数组是否为空</div><div class="line">        _quickSort(str, 0, str.length - 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void _quickSort(Integer[] list, int low, int high) &#123;</div><div class="line">    if (low &lt; high) &#123;</div><div class="line">        int middle = _getMiddle(list, low, high);  //将list数组进行一分为二</div><div class="line">        _quickSort(list, low, middle - 1);        //对低字表进行递归排序</div><div class="line">        _quickSort(list, middle + 1, high);       //对高字表进行递归排序</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private int _getMiddle(Integer[] list, int low, int high) &#123;</div><div class="line">    int tmp = list[low];   //数组的第一个作为中轴</div><div class="line">    while (low &lt; high) &#123;</div><div class="line">        while (low &lt; high &amp;&amp; list[high] &gt; tmp) &#123;</div><div class="line">            high--;</div><div class="line">        &#125;</div><div class="line">        list[low] = list[high];   //比中轴小的记录移到低端</div><div class="line">        while (low &lt; high &amp;&amp; list[low] &lt; tmp) &#123;</div><div class="line">            low++;</div><div class="line">        &#125;</div><div class="line">        list[high] = list[low];   //比中轴大的记录移到高端</div><div class="line">    &#125;</div><div class="line">    list[low] = tmp;              //中轴记录到尾</div><div class="line">    return low;                   //返回中轴的位置</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>查找算法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">最坏情况下运行时间</th>
<th style="text-align:center">最好情况下运行时间</th>
<th style="text-align:center">需要保证是有序数组吗?</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">线性查找</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">二分查找</td>
<td style="text-align:center">O(lgn)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<p><strong>排序算法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">最坏情况下运行时间</th>
<th style="text-align:center">最好情况下运行时间</th>
<th style="text-align:center">最坏情况下交换次数</th>
<th style="text-align:center">是否原址？</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/zh-hans/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" target="_blank" rel="external">时间复杂度 - 维基百科</a></li>
<li><a href="http://baike.baidu.com/view/540497.htm" target="_blank" rel="external">空间复杂度</a></li>
<li><a href="http://book.51cto.com/art/201405/441264.htm" target="_blank" rel="external">快速排序的插图示例-理解起来相对容易些</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法入门篇]]></title>
      <url>http://jianwl.com/2016/08/13/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h3><p>算法是完成一个任务所需的一系列步骤，且这些步骤需要足够精确的描述，使得计算机能够运行它。</p>
<h3 id="算法有什么作用？"><a href="#算法有什么作用？" class="headerlink" title="算法有什么作用？"></a>算法有什么作用？</h3><p>算法是计算机的核心，那么使用算法，我们能得到什么？下面将使用示例来说明其作用。</p>
<blockquote>
<p>假设我们在一个较快的计算机A上执行一个运行时间为n^2的排序算法，而在一个运行速度较慢的计算机B上执行一个运行时间为nlgn的排序算法，并让他们均对一个包含着1千万个数字的数组进行排序。<br>假设计算机A每秒执行的顺序是100亿条指令，而计算机B每秒仅能执行1千万条指令，即计算机A的性能比计算机B的性能快1000倍，为了使得这个差异更明显，假定世界上具有最精湛技术的程序员为计算机A使用机器语言进行编码，并且结果的代码会需要2n^2条指令来实现对n个数字的排序，而计算机B进行编码的仅仅是一个普通程序员，会使用一个带有低效编译器的高级语言，使得最终编码需要50nlgn条指令。</p>
</blockquote>
<p>计算机A所需花费的时间为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2*(10^7)^2 条指令 / 10^10 条指令/秒 = 20 000 秒 = 超过5.5个小时</div></pre></td></tr></table></figure></p>
<p>计算机B所需花费的时间为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">50*10^7lg10^7 条指令 / 10^7 条指令/秒 = 1163秒 = 不足20分钟</div></pre></td></tr></table></figure></p>
<p>通过以上这个例子，我们可以看到使用一个运行时间增长缓慢的算法，即使是使用一个较次的编译器，计算机B的运行速度也会比计算机A的运行速度快17倍。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>即使我们看到了计算机硬件方面的不断改进和发展，但是整个系统的性能不仅仅依靠选择运行较快的硬件或高效的操作系统，<strong>选择高效的算法</strong>对提升系统的性能也同样重要。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>算法基础 打开算法之门</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL逻辑架构]]></title>
      <url>http://jianwl.com/2016/08/13/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="MySQL逻辑架构图"><a href="#MySQL逻辑架构图" class="headerlink" title="MySQL逻辑架构图"></a>MySQL逻辑架构图</h3><p><img src="../images/mysql架构.png" alt=""></p>
<p><strong>最上层</strong><br>最上层服务并不是MySQL独有的，是基于网络的客户端/服务端的工具</p>
<p><strong>第二层架构</strong><br>大多数MySQL的核心服务功能都在这一层，包括查询解析、分析、优化、缓存以及所有的内置函数（例如，日期、时间、数学和加密函数），所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。</p>
<p><strong>第三层架构</strong><br>第三层包含了存储引擎，存储引擎负责MySQL中数据的存储和提取。服务器通过API与存储引擎进行通信，这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。存储引擎API包含几十个底层函数，用于执行诸如“开始一个事务”或者“根据主键提取一行记录”等操作，但存储引擎不会去解析SQL，不同存储引擎之间也不会互相通信，而只是简单地响应上层服务器的请求。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之事务隔离级别]]></title>
      <url>http://jianwl.com/2016/08/13/MYSQL%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="事务隔离级别的作用"><a href="#事务隔离级别的作用" class="headerlink" title="事务隔离级别的作用"></a>事务隔离级别的作用</h3><p>在SQL标准中定义了4种隔离级别，每一种级别都规定了一个事务所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。较低级别的隔离，通常可以执行更高的并发，系统的开销也更低。</p>
<h3 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h3><p><strong>READ UNCOMMITTED(未提交读)</strong><br>一个事务的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，也被称为脏读(Dirty Read)</p>
<p><strong>READ COMMITTED(提交读)</strong><br>一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的，这个级别有时候也被称为不可重复读(nonrepeatable read),因为两次执行同样的查询，可能会得到不一样的结果。</p>
<p><strong>REPEATABLE READ(可重复读) – MySQL的默认事务隔离级别</strong><br>这个级别解决了脏读的问题，保证了在同一个事务中多次读取同样记录的结果是一致的。但是…..无法解决幻读(Phantom Read)的问题，所谓幻读是指当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行(Phantom Row)。</p>
<p><strong>SERIALIZABLE(可串行化)</strong><br>这个级别是最高的隔离级别，它通过强制事务串行执行，避免了前面说的幻读问题，简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题。实际中很少用到，只有在非常需要保证数据的一致性而且可以接受没有并发情况下，才会采用。</p>
<h3 id="设置事务隔离级别"><a href="#设置事务隔离级别" class="headerlink" title="设置事务隔离级别"></a>设置事务隔离级别</h3><p><strong>查看隔离级别</strong></p>
<p><img src="../images/transaction-1.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查看全局的事务级别</div><div class="line">SELECT @@global.tx_isolation;</div><div class="line"></div><div class="line"># 查看当前连接上的事务级别</div><div class="line">SELECT @@session.tx_isolation;</div><div class="line"></div><div class="line"># 查看下一个（未开始）事务的隔离级别</div><div class="line">SELECT @@tx_isolation;</div></pre></td></tr></table></figure></p>
<p><strong>设置隔离级别</strong></p>
<p><img src="../images/transaction-2.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set global|session transaction isolation level read uncommitted | read committed | repeatable read | serializable</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th style="text-align:left">隔离级别</th>
<th style="text-align:center">脏读可能性</th>
<th style="text-align:center">不可重复读可能性</th>
<th style="text-align:right">幻读可能性</th>
<th style="text-align:center">加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">READ UNCOMMITTED</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:right">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:left">READ COMMITTED</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:right">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:left">REPEATABLE READ</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:right">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:left">SERIALIZABLE</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:right">NO</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.itpub.net/195110/viewspace-1080777" target="_blank" rel="external">mysql修改事务隔离级别 </a></li>
<li>高性能MySQL第三版</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之事务]]></title>
      <url>http://jianwl.com/2016/08/13/MYSQL%E4%B9%8B%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>一组原子性的SQL查询，事务内的语句要么全部执行成功，要么全部执行失败。</p>
<h3 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h3><p>假设一个银行的数据库有两张表:支票(checking)表和储蓄(savings)表，现在用户Jane的支票账户转移200美元到她的储蓄账户，那么需要至少三个步骤：</p>
<ol>
<li>检查支票账户的余额高于200美元</li>
<li>从支票账户余额中减去200美元</li>
<li>在储蓄账户余额中增加200美元</li>
</ol>
<p>上述三个步骤必须打包在一个事务中，任何一个步骤失败，则必须回滚所有的步骤。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">START TRANSACTION;</div><div class="line">SELECT balance FROM checking where customer_id =  10233276;</div><div class="line">UPDATE checking SET balance = balance - 200.00 WHERE customer_id = 10233276;</div><div class="line">UPDATE savings SET balance = balance + 200.00  WHERE customer_id = 10233276;</div><div class="line">COMMIT</div></pre></td></tr></table></figure></p>
<p>但是….. 单纯的事务概念并不是故事的全部，可能会出现以下场景….</p>
<blockquote>
<ol>
<li>执行第4条语句时，服务器崩溃了 – 可能用户会损失200美金</li>
<li>在执行第3条语句和第4条语句之间，另外一个进程要删除支票账户的所有余额 – 银行在不知道这个逻辑的情况下， 可能白白给了Jane200美金。</li>
</ol>
</blockquote>
<h3 id="如何保障事务"><a href="#如何保障事务" class="headerlink" title="如何保障事务"></a>如何保障事务</h3><p>除非系统通过严格的ACID测试，否则空谈事务的概念是远远不够的。ACID分别表示原子性、一致性、隔离性、持久性。</p>
<p><strong>原子性(atomicity)</strong><br>一个事务必须被视为一个不可分割的最小工作单元，整个事务要么全部提交成功，要么全部失败回滚。</p>
<p><strong>一致性(consistency)</strong><br>数据库总是从一个一致性的状态转换到另外一个一致性的状态。例如：在前面的例子中，即使在执行第3、4条语句之间系统崩溃了，支票账户也不会损失200美元，因为事务最终没有被提交，事务中所做的修改也不会保存到数据库中。</p>
<p><strong>隔离性(isolation)</strong><br>一个事务所做的修改在最终提交以前，对其他事务是不可见的。例如：在前面的例子中，当执行完第3条语句，第4条语句还没有开始时，此时另外一个账号汇总程序开始运行，则其看到的支票账户的余额并没有被减去200美元。</p>
<p><strong>持久性(durability)</strong><br>一旦事务提交，则其所作的修改就会永久保存到数据库中，此时即使系统崩溃，修改的数据也不会丢失。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之单例模式]]></title>
      <url>http://jianwl.com/2016/08/12/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><p>确保一个类只有一个实例，并提供一个全局访问点。</p>
<h3 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//在多线程模式下，用这种方法获取单例对象是有问题的。</div><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton uniqueInstance;</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        if(uniqueInstance == null)&#123;</div><div class="line">            uniqueInstance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多线程模式下，正确获取单例的方法"><a href="#多线程模式下，正确获取单例的方法" class="headerlink" title="多线程模式下，正确获取单例的方法"></a>多线程模式下，正确获取单例的方法</h3><p><strong>方法1</strong>：获取单例的性能不高，但简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton uniqueInstance;</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line">    public static synchronized Singleton getInstance()&#123;</div><div class="line">        if(uniqueInstance == null)&#123;</div><div class="line">            uniqueInstance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong>： 使用“急切”创建实例，而不是延迟实例化的做法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton uniqueInstance = new Singleton();</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line">    public static  Singleton getInstance()&#123;</div><div class="line">      return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>方法3</strong>：使用双重加锁，在getInstance中减少使用同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    // volatile关键词确保，uniqueInstance初始化为singleton实例时，多个线程能够正确处理uniqueInstance变量。</div><div class="line">    private volatile static Singleton uniqueInstance;</div><div class="line">    private Singleton() &#123;</div><div class="line">    &#125;</div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">        if (uniqueInstance == null) &#123;</div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (uniqueInstance == null) &#123;</div><div class="line">                    uniqueInstance = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="多线程模式下，单例测试"><a href="#多线程模式下，单例测试" class="headerlink" title="多线程模式下，单例测试"></a>多线程模式下，单例测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//在多线程模式下，创建单例，若hashCode相等则为同一实例。</div><div class="line">public class SingletonTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        for(int i=0;i&lt;100;i++) &#123;</div><div class="line">            new Thread(() -&gt; &#123;</div><div class="line">                Singleton instanceOne = Singleton.getInstance();</div><div class="line">                System.out.println(instanceOne.hashCode());</div><div class="line">            &#125;).start();</div><div class="line">            new Thread(() -&gt; &#123;</div><div class="line">                Singleton instanceTwo = Singleton.getInstance();</div><div class="line">                System.out.println(instanceTwo.hashCode());</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka介绍]]></title>
      <url>http://jianwl.com/2016/08/12/Kafka%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>之前工作中用到Kafka项目，近来面试，问到kafka的概念性部分，有些模糊，特写下此文，梳理知识点，备忘。</p>
<h3 id="什么是Kafka？"><a href="#什么是Kafka？" class="headerlink" title="什么是Kafka？"></a>什么是Kafka？</h3><p>Kafka是一个分布式(distributed)，可划分（partitioned）,冗余备份的持久化的日志服务(replicated committ log service),提供消息系统（messaging system）的功能。</p>
<p><strong>消息的基本术语</strong></p>
<ul>
<li><code>topics</code>  特指Kafka处理的消息源(feeds of messages)的不同分类</li>
<li><code>producers</code> 向Kafka的一个topic发布消息的过程叫producers</li>
<li><code>consumers</code>订阅topics并处理其发布的消息的过程叫consumers</li>
<li><code>broker</code> Kafka集群中的一台或多台服务器统称为broker</li>
</ul>
<p>所以，从总体来说，producers通过网络想Kafka的集群发送消息并转由consumers来处理，这个过程如图所示<br><img src="../images/producer_consumer.png" alt=""><br>客户端和服务端的通信，是基于简单、高性能且与编程语言无关的TCP协议</p>
<h3 id="Topic与日志"><a href="#Topic与日志" class="headerlink" title="Topic与日志"></a>Topic与日志</h3><p>一个Topic是指发布的消息的一个类别或消息源的名字，Kafka集群为每一个Topic划分一个日志(partitioned log)如下图所示<br><img src="../images/partitions.png" alt=""><br>每一个partition是一个排好序的，不可变的消息序列。新的消息不断的追加到序列的尾部。–即持久性日志（commit log）。每一个分区（partition）中的消息，有一个名叫offset 的顺序编号，作为这条消息在partition中的标识。</p>
<p>Kafka集群将在设定的时间范围内，保存所有被发布的消息，不论该消息是否被处理完成。例如，如果一个日志被设置为保存2天，那么在它发布的两天之内，它都是可以被处理的，而在2天之后，它就会被系统销毁并释放掉。</p>
<p>实际上，每个consumer中仅有的元数据（metadata）的主要部分是该consumer在日志中的位置信息，叫做offset（偏移量）。这个offset由consumer控制，在一般情况下，consumer按照offset的顺序读取消息，但事实上consumer可以控制位置，可以以任何想要的顺序处理消息。例如一个consumer可以重置并重新处理一个已经处理过的offset。</p>
<p>这些特点的组合使Kafka的consumers变得特别的廉价–它们能来去自如而不会对集群或者其它的consumers造成多大影响。比如，你可以使用我们的命令行工具来“tail”任意topic中的内容，而不会改变任何被已有consumers处理过的内容。</p>
<p>日志服务的分区有几个目的。首先，它允许日志扩展到超过单台服务器允许的大小。因为虽然每一个单独的分区必须适应承载它们的服务器，但是一个topic可以包含多个分区，所以能处理任意大小的数据。其次，它们作为并行单元–一会儿我们会了解更多</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>日志的分区partitions分布式地部署在Kafka服务器集群上，每个服务器为一个共享的分区处理数据和请求。每一个分区的数据被冗余的备份在多台服务器上用于容错，可以通过配置来设定用于备份的服务器的数量。</p>
<p>每个分区有一台服务器扮演“领导”的角色，有0或多台服务器扮演“随从”。领导负责所有对分区的读写请求，同时随从们被作为领导的备份。一旦领导挂掉，随从中的一个会自动变成新的领导。每一台服务器都同时在一些分区里扮演领导而在另外一些分区中充当随从，这让集群拥有良好的负载均衡。</p>
<h3 id="Producers-（生产者）"><a href="#Producers-（生产者）" class="headerlink" title="Producers （生产者）"></a>Producers （生产者）</h3><p>producers向他们选择的topics发布数据。每个producer负责在topic中选择将哪些消息分配给哪些分区。这可以通过简单的“循环赛”的方式来或是根据一些语义划分的方法（比如根据一些消息中的键）来实现负载均衡。我们会在之后介绍如何使用分区时提供更多的信息。</p>
<h3 id="Consumers-（消费者）"><a href="#Consumers-（消费者）" class="headerlink" title="Consumers （消费者）"></a>Consumers （消费者）</h3><p>传统的消息系统有两种模式：消息队列和发布/订阅。在消息队列模式中，一池子的consumers可能从一个服务器上读取数据，每个消息被分发给其中一个consumer；而在发布订阅模式中，消息被以广播的方式发给所有的consumers。Kafka通过提供了一个叫做消费者群组（consumer group）的抽象概念涵盖以上两种模式。</p>
<p>Consumers上标记有他们所属的consumer group的名字，每个被发布到topic上的消息消息会被分发到所有订阅该topic的consumer group内部的一个consumer实例上。Consumer实例可以是一个单独的进程也可以是一个单独的机器。</p>
<p>如果所有的consumer实例都具有相同的群组，那么就像传统的队列模式一样平衡着各个consumer的负载。</p>
<p>如果所有的consumer实例均有不同的群组，那么这就如同发布/订阅模式，所有的消息被广播给所有的消费者。</p>
<p>更常见的情况是，我们发现topics一般只有很少的消费者群组，一个群组一般对应一个“逻辑订阅”单元。而每一个群组由大量的consumer实例构成，用来提供可扩展性和容错性。这其实就是发布/订阅模式的一种特殊情况，只不过订阅者是一个consumers的集群而非一个单独的进程而已。<br><img src="../images/consumer-groups.png" alt=""><br>同时，Kafka具有比传统消息系统更强大的顺序保障。</p>
<p>传统的队列在服务器上按照一定的顺序存储消息，然后当多个consumers从队列中处理消息时，系统按照消息存储的顺序分发消息。然而，虽然系统是按照顺序送出消息的，但是是按异步的方式送达到consumer手中，所以当消息到达不同consumer手中的时候，已经没有顺序可言了。这意味着消息的顺序在并行处理中不复存在了。消息系统常常有一个权宜之计来应对这种情况，就是使用了一个叫做“独家消费”的概念，就是只允许一个进程处理队列，不过这么做的话，并行处理当然也就不复存在了。</p>
<p>Kafka在这一点上做的比较好。通过一个叫做“排比(parallelism)”的概念–即并行–在topics中， Kafka能够同时提供顺序保证和一池子消费进程间的负载均衡。</p>
<p>Kafka只能保证每个分区内部的消息的总体顺序，而保证同一个topic在不同分区中消息的顺序。这种每个分区有序并可以按照数据的键去分区的特性对于大多数应用都已经足够。但是，如果你需要保证所有消息的总体顺序，可以通过使用只有一个分区的topic去完成，不过这样做就意味着只有一个consumer进程了。</p>
<h3 id="保障"><a href="#保障" class="headerlink" title="保障"></a>保障</h3><p>在高层次上Kafka提供如下保障：</p>
<ul>
<li>由producer发送给特点topic分区的消息按照发送的先后顺序排序。也就是说，如果同一个producer发送了消息M1和M2，M1先被发送，那么M1的offset比M2的小，且M1先出现在日志中。</li>
<li>一个consumer实例按照消息在日志中存储的顺序收到消息。</li>
<li>对于一个有N个备份的topic，我们允许其中N-1个服务器挂掉，依然能保证不丢失任何持久性日志中的消息。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Kafka 0.8.1官方文档</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[锋利的JQuery -- DOM操作]]></title>
      <url>http://jianwl.com/2016/08/11/%E9%94%8B%E5%88%A9%E7%9A%84JQuery-DOM%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">var $li = $(“ul  li:eq(1)”)</td>
<td style="text-align:left">查找元素节点</td>
</tr>
<tr>
<td style="text-align:left">var p_text = $(“p”).attr(“title”)</td>
<td style="text-align:left">查找属性节点</td>
</tr>
</tbody>
</table>
<h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">B.append(A)</td>
<td style="text-align:left">向B内部追加A</td>
</tr>
<tr>
<td style="text-align:left">A.append(B)</td>
<td style="text-align:left">把A追加到B内部</td>
</tr>
<tr>
<td style="text-align:left">B.prepend(A)</td>
<td style="text-align:left">把B内部最前面添加A</td>
</tr>
<tr>
<td style="text-align:left">B.after(A)</td>
<td style="text-align:left">在B后面添加A</td>
</tr>
<tr>
<td style="text-align:left">A.insertAfter(B)</td>
<td style="text-align:left">把A插入B的后面</td>
</tr>
<tr>
<td style="text-align:left">B.before(A)</td>
<td style="text-align:left">在B的前面插入A</td>
</tr>
<tr>
<td style="text-align:left">A.insertBefore(B)</td>
<td style="text-align:left">在B的前面添加A</td>
</tr>
</tbody>
</table>
<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">remove()</td>
<td style="text-align:left">返回的是删除的元素</td>
</tr>
<tr>
<td style="text-align:left">detach()</td>
<td style="text-align:left">与remove类似，但元素的事件和数据都保留</td>
</tr>
<tr>
<td style="text-align:left">empty</td>
<td style="text-align:left">清空节点，清空内部的对象</td>
</tr>
</tbody>
</table>
<h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">clone()</td>
<td style="text-align:left">复制当前的节点</td>
</tr>
<tr>
<td style="text-align:left">clone(true)</td>
<td style="text-align:left">复制当前的节点以及绑定的事件</td>
</tr>
</tbody>
</table>
<h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">replaceWith()</td>
<td style="text-align:left">替换标签</td>
</tr>
</tbody>
</table>
<h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">attr(“title”,”xxxx”)</td>
<td style="text-align:left">设置参数值</td>
</tr>
<tr>
<td style="text-align:left">attr(“title”)</td>
<td style="text-align:left">获取属性值</td>
</tr>
<tr>
<td style="text-align:left">removeAttr(“title”)</td>
<td style="text-align:left">删除属性值</td>
</tr>
</tbody>
</table>
<h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">attr(“class”,”xxx”)</td>
<td style="text-align:left">设置样式</td>
</tr>
<tr>
<td style="text-align:left">addClass(“xxx”)</td>
<td style="text-align:left">追加样式</td>
</tr>
<tr>
<td style="text-align:left">removeClass(“xxx”)</td>
<td style="text-align:left">移除样式</td>
</tr>
<tr>
<td style="text-align:left">removeClass()</td>
<td style="text-align:left">移除所有样式</td>
</tr>
<tr>
<td style="text-align:left">toggleClass(“xxx”)</td>
<td style="text-align:left">切换样式</td>
</tr>
<tr>
<td style="text-align:left">hasClass(“xxx”)</td>
<td style="text-align:left">判断是否有样式</td>
</tr>
</tbody>
</table>
<h3 id="设置、获取HTML、文本和值"><a href="#设置、获取HTML、文本和值" class="headerlink" title="设置、获取HTML、文本和值"></a>设置、获取HTML、文本和值</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">html()</td>
<td style="text-align:left">设置或者获取HTML</td>
</tr>
<tr>
<td style="text-align:left">text()</td>
<td style="text-align:left">设置或者获取文本</td>
</tr>
<tr>
<td style="text-align:left">val()</td>
<td style="text-align:left">设置获取值</td>
</tr>
</tbody>
</table>
<h3 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">children()</td>
<td style="text-align:left">取得匹配元素的子元素集合</td>
</tr>
<tr>
<td style="text-align:left">next()</td>
<td style="text-align:left">取得匹配元素的下一个同辈元素</td>
</tr>
<tr>
<td style="text-align:left">prev()</td>
<td style="text-align:left">取得匹配元素的前一个同辈元素</td>
</tr>
<tr>
<td style="text-align:left">siblings()</td>
<td style="text-align:left">取得匹配元素的所有同辈元素</td>
</tr>
<tr>
<td style="text-align:left">parent()</td>
<td style="text-align:left">获得集合中每个元素的祖先元素</td>
</tr>
<tr>
<td style="text-align:left">parents()</td>
<td style="text-align:left">获得每个元素的祖先元素</td>
</tr>
<tr>
<td style="text-align:left">closest()</td>
<td style="text-align:left">从本身开始，返回最先匹配的祖先元素</td>
</tr>
</tbody>
</table>
<h3 id="CSS-DOM操作"><a href="#CSS-DOM操作" class="headerlink" title="CSS-DOM操作"></a>CSS-DOM操作</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">css(“color”)</td>
<td style="text-align:left">获得指定的样式值</td>
</tr>
<tr>
<td style="text-align:left">css(“color”,”red”)</td>
<td style="text-align:left">设置指定样式</td>
</tr>
<tr>
<td style="text-align:left">width() height()</td>
<td style="text-align:left">设置获取宽度和高度</td>
</tr>
<tr>
<td style="text-align:left">offset()</td>
<td style="text-align:left">视窗的偏移值</td>
</tr>
<tr>
<td style="text-align:left">position()</td>
<td style="text-align:left">获取定对于最近的position样式元素的位置</td>
</tr>
<tr>
<td style="text-align:left">scrollTop</td>
<td style="text-align:left">滚动条顶端距离</td>
</tr>
<tr>
<td style="text-align:left">scrollLeft()</td>
<td style="text-align:left">滚动条左端距离</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[锋利的JQuery -- Ajax]]></title>
      <url>http://jianwl.com/2016/08/11/%E9%94%8B%E5%88%A9%E7%9A%84JQuery-Ajax/</url>
      <content type="html"><![CDATA[<h3 id="Ajax的优劣"><a href="#Ajax的优劣" class="headerlink" title="Ajax的优劣"></a>Ajax的优劣</h3><p>优点</p>
<ul>
<li>不需要插件支持</li>
<li>优秀的用户体验</li>
<li>提高web程序的性能</li>
<li>减轻服务器和带宽的压力</li>
</ul>
<p>缺点</p>
<ul>
<li>浏览器对XHLHttpRequest支持度不够</li>
<li>破坏浏览器的前进、后退按钮</li>
<li>对搜索引擎的支持不足</li>
<li>开发和调试工具的匮乏</li>
</ul>
<h3 id="Ajax方法"><a href="#Ajax方法" class="headerlink" title="Ajax方法"></a>Ajax方法</h3><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">示例</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">load()</td>
<td style="text-align:left">load(url,data,callback)</td>
<td style="text-align:left">载入HTML文档</td>
</tr>
<tr>
<td style="text-align:left">get()</td>
<td style="text-align:left">$.get(url,data,callback,type)</td>
<td style="text-align:left">GET方式发送请求</td>
</tr>
<tr>
<td style="text-align:left">post</td>
<td style="text-align:left">$.post(url,data,callback,type)</td>
<td style="text-align:left">POST方式发送请求</td>
</tr>
<tr>
<td style="text-align:left">getScript</td>
<td style="text-align:left">$.getScript(‘test.js’,callback)</td>
<td style="text-align:left">动态加载js</td>
</tr>
<tr>
<td style="text-align:left">getJSON()</td>
<td style="text-align:left">$.getJSON(‘test.json’,function(data){})</td>
<td style="text-align:left">加载JSON,data为JSON内容</td>
</tr>
</tbody>
</table>
<p><strong>ajax()为最常用、最基本的方法，常用参数:</strong></p>
<ul>
<li><code>url</code> 请求的地址</li>
<li><code>type</code> 请求的类型，默认GET</li>
<li><code>timeout</code> 超时时间</li>
<li><code>data</code> 请求的数据</li>
<li><code>dataType</code> 返回数据类型</li>
<li><code>success</code> 成功回调</li>
<li><code>error</code> 失败回调</li>
<li><code>complete</code> 完成回调</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[锋利的Query -- 选择器]]></title>
      <url>http://jianwl.com/2016/08/11/%E9%94%8B%E5%88%A9%E7%9A%84Query-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">E{CSS}</td>
<td style="text-align:left">标签选择器</td>
</tr>
<tr>
<td style="text-align:left">#ID{CSS}</td>
<td style="text-align:left">id选择器</td>
</tr>
<tr>
<td style="text-align:left">E.className{CSS}</td>
<td style="text-align:left">类选择器</td>
</tr>
<tr>
<td style="text-align:left">E1，E2，E3{CSS}</td>
<td style="text-align:left">群组选择器</td>
</tr>
<tr>
<td style="text-align:left">E F{CSS}</td>
<td style="text-align:left">后代选择器</td>
</tr>
<tr>
<td style="text-align:left">*{CSS}</td>
<td style="text-align:left">统配选择器</td>
</tr>
</tbody>
</table>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“#one”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变id为one的元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“.one”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变class为one的元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变元素名为div的元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“*”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变所有元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“span. #one”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变所有span和id为one的元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“body div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变<body>内所有div的背景色</body></td>
</tr>
<tr>
<td style="text-align:left">$(“body &gt;div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变<body>内子div的背景色</body></td>
</tr>
<tr>
<td style="text-align:left">$(“.one + div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变class为one的下一个div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“#two ~ div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变id为two的后面的所有同辈div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div:contains(di)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变 含有文本di的div元素背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:empty”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变不包含子元素的div的空元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:has(“.mini”)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变class为mini元素的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:parent”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有子元素的div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div:visible”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变所有可见的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:hidden”).show(3000)</td>
<td style="text-align:left">显示所有隐藏的div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div[title]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title!=test]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title不等于test的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title^=te]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title以te开头的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title$=est]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title以est结尾的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title*=es]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title含有es的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[id][title*=es]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性id,并且title含有es的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title=’en’]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title等于en或者以en为前缀(en-xxx)的的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title~=’uk’]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title用空格分隔的值中包含字符uk的div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div.one:nth-child(2)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素下的第二个子元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div.one:first-child)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素中的第一个子元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div.one:last-child)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素中的最后一个子元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div.one:only-child)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素下只有一个子元素，则改变该子元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="表单对象属性过滤选择器"><a href="#表单对象属性过滤选择器" class="headerlink" title="表单对象属性过滤选择器"></a>表单对象属性过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“form1 input:enabled”).val(“这里变化了!”)</td>
<td style="text-align:left">改变表单内可用input元素的值</td>
</tr>
<tr>
<td style="text-align:left">$(“form1 input:disabled”).val(“这里变化了!”)</td>
<td style="text-align:left">改变表单内不可用input元素的值</td>
</tr>
<tr>
<td style="text-align:left">$(“input:checked”).length</td>
<td style="text-align:left">改变多选框中的个数</td>
</tr>
<tr>
<td style="text-align:left">$(“select:selected”).text()</td>
<td style="text-align:left">获取下拉框选中的内容</td>
</tr>
</tbody>
</table>
<h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“#form1 :input”)</td>
<td style="text-align:left">获得表单中所有的input、textarea、select、button元素</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :text”)</td>
<td style="text-align:left">获得所有的单行文本框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :password”)</td>
<td style="text-align:left">获得所有的密码框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :radio”)</td>
<td style="text-align:left">获得所有的单选框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :checkbox”)</td>
<td style="text-align:left">获得所有的多选框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :submit”)</td>
<td style="text-align:left">获得所有的提交按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :image”)</td>
<td style="text-align:left">获得所有的图片按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :reset”)</td>
<td style="text-align:left">获得所有的重置按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :button”)</td>
<td style="text-align:left">获得所有的按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :file”)</td>
<td style="text-align:left">获得所有的上传域</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :hidden”)</td>
<td style="text-align:left">获得所有的不可见元素</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>锋利的JQuery（第2版）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之模板方法模式]]></title>
      <url>http://jianwl.com/2016/08/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="场景定义"><a href="#场景定义" class="headerlink" title="场景定义"></a>场景定义</h3><p>星巴克咖啡师傅训练手册，饮料的冲泡方法。<br><strong>星巴玆咖啡冲泡法</strong></p>
<ol>
<li>把水煮沸</li>
<li>把沸水冲泡咖啡</li>
<li>把咖啡倒进杯子</li>
<li>加糖和牛奶</li>
</ol>
<p><strong>星巴玆茶冲泡法</strong></p>
<ol>
<li>把水煮沸</li>
<li>用沸水浸泡茶叶</li>
<li>把茶倒进杯子</li>
<li>加柠檬</li>
</ol>
<h3 id="不考虑设计模式的做法"><a href="#不考虑设计模式的做法" class="headerlink" title="不考虑设计模式的做法"></a>不考虑设计模式的做法</h3><p>Coffee.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Coffee &#123;</div><div class="line">    //咖啡冲泡法</div><div class="line">    void prepareRecipe() &#123;</div><div class="line">        boilWater();</div><div class="line">        brewCoffeeCrinds();</div><div class="line">        pourInCup();</div><div class="line">        addSugarAndMilk();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void brewCoffeeCrinds() &#123;</div><div class="line">        System.out.println(&quot;Dripping Coffee through filter&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addSugarAndMilk() &#123;</div><div class="line">        System.out.println(&quot;Adding sugar and milk&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Tea.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Tea &#123;</div><div class="line">    //茶冲泡法</div><div class="line">    void prepareRecipe() &#123;</div><div class="line">        boilWater();</div><div class="line">        steepTeaBag();</div><div class="line">        pourInCup();</div><div class="line">        addLemon();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void steepTeaBag() &#123;</div><div class="line">        System.out.println(&quot;Steeping the tea&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addLemon() &#123;</div><div class="line">        System.out.println(&quot;Adding Lemon&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Coffee和Tea两个类的实现很像，除了第2和第4个步骤不一样，基本上是相同的，出现了重复的代码，我们将通过模板方法模式来删除重复代码。</p>
<h3 id="使用设计模式的做法"><a href="#使用设计模式的做法" class="headerlink" title="使用设计模式的做法"></a>使用设计模式的做法</h3><ol>
<li><p>两份冲泡法都采用相同的算法，我们将抽象化prepareReceipe方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void prepareRecipe() &#123;</div><div class="line">    boilWater();</div><div class="line">    brew();</div><div class="line">    pourInCup();</div><div class="line">    addCondiments();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义一个抽象类CaffeineBeverage，相同的模块有具体实现，不同的模块定义为抽象方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public abstract class CoffeineBeverage &#123;</div><div class="line">    //子类不能覆盖这个方法</div><div class="line">    final void prepareRecipe()&#123;</div><div class="line">        boilWater();</div><div class="line">        brew();</div><div class="line">        pourInCup();</div><div class="line">        addCondiments();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void brew() ;</div><div class="line"></div><div class="line">    public abstract void addCondiments();</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Coffee和Tea继承抽象类，自行处理冲泡和添加调料部分<br>Coffee.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Coffee extends CoffeineBeverage&#123;</div><div class="line">    @Override</div><div class="line">    public void brew() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addCondiments() &#123;</div><div class="line">        System.out.println(&quot;Adding sugar and milk&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Tea.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Tea extends CoffeineBeverage&#123;</div><div class="line">    @Override</div><div class="line">    public void brew() &#123;</div><div class="line">        System.out.println(&quot;Steeping the tea&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addCondiments() &#123;</div><div class="line">        System.out.println(&quot;Add Lemon&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="什么是模板方法模式？"><a href="#什么是模板方法模式？" class="headerlink" title="什么是模板方法模式？"></a>什么是模板方法模式？</h3><p>至此你已经了解如何使用模板方法模式了，接下来让我们了解一下，模板方法的定义。<br><strong>模板方法定义</strong><br>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
<p><strong>使用场景</strong><br>这个模式是用来创建一个算法模板，什么是模板？模板是一个方法，这个方法将算法定义成一组步骤，其中的任何步骤都可以是抽象的，由子类负责实现，这可以确保算法的结构保持不变，同时由子类提供部分实现。</p>
<h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p><strong>如果我不想要在饮料中添加调料，怎么做呢？</strong> 可以对模板方法进行挂钩，在抽象方法中声明钩子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public abstract class CoffeineBeverage &#123;</div><div class="line">    //子类不能覆盖这个方法</div><div class="line">    final void prepareRecipe()&#123;</div><div class="line">        boilWater();</div><div class="line">        brew();</div><div class="line">        pourInCup();</div><div class="line">        if(customerWantsCondiments()) &#123;</div><div class="line">            addCondiments();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 子类可以覆盖这个方法</div><div class="line">    public  boolean customerWantsCondiments()&#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void brew() ;</div><div class="line"></div><div class="line">    public abstract void addCondiments();</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First 设计模式</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java IO: 文件]]></title>
      <url>http://jianwl.com/2016/08/10/Java-IO-%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>如果你需要在不同端之间读取文件，你可以根据该文件是二进制文件/文本文件来选择使用<code>FileInputStream</code>/<code>FileReader</code>。这两个类允许你从文件开始到文件末尾读取一个字节/字符，或者将读取到的字节/字符。你不必一次性读取整个文件，你可以按顺序读取文件中的字节和字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class FileInputStreamDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            //新建一个FileInputStream对象</div><div class="line">            FileInputStream input = new FileInputStream(new File(&quot;D:\\input.txt&quot;));</div><div class="line"></div><div class="line">            // 文件的字节数</div><div class="line">            Integer size = input.available(); </div><div class="line">            byte[] b = new byte[size];</div><div class="line">            </div><div class="line">            //将文件中的内容读取到数组中</div><div class="line">            input.read(b);</div><div class="line">            input.close();</div><div class="line">            System.out.println(new String(b));</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>如果你需要在不同端之间读取文件，你可以根据该文件是二进制文件/文本文件来选择使用<code>FileInputStream</code>/<code>FileReader</code>。这两个类允许你从文件开始到文件末尾读取一个字节/字符，或者将读取到的字节/字符。你不必一次性读取整个文件，你可以按顺序读取文件中的字节和字符。</p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java IO概述]]></title>
      <url>http://jianwl.com/2016/08/10/Java-IO%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h3 id="JAVA-IO-是什么？"><a href="#JAVA-IO-是什么？" class="headerlink" title="JAVA IO 是什么？"></a>JAVA IO 是什么？</h3><p>Java IO是一套Java用来读写数据的API，大部分程序都需要处理一些输入并由输入产生一些输出，为此Java提供了java.io包。</p>
<h3 id="Java-io包的范围"><a href="#Java-io包的范围" class="headerlink" title="Java.io包的范围"></a>Java.io包的范围</h3><p>java.io包并没有涵盖所有输入输出类型，例如不包含GUI或网页上的读写。其主要涉及文件、网络数据流、内存缓冲等的读写。</p>
<h3 id="Java-IO的用途和特征"><a href="#Java-IO的用途和特征" class="headerlink" title="Java IO的用途和特征"></a>Java IO的用途和特征</h3><p>Java IO中包含许多InputStream、OutputStream、Reader、Writer的子类，这样设计的原因是让每一个类都负责不同的功能，各类用途汇总如下：</p>
<ul>
<li>文件访问</li>
<li>网络访问</li>
<li>内存缓冲访问</li>
<li>线程内部通信（管道）</li>
<li>缓冲</li>
<li>解析</li>
<li>读写文本（Readers/Writers）</li>
<li>读写基本类型数据</li>
<li>读写对象</li>
</ul>
<h3 id="Java-IO类概述表"><a href="#Java-IO类概述表" class="headerlink" title="Java IO类概述表"></a>Java IO类概述表</h3><p><img src="../images/java-io.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Test单元测试]]></title>
      <url>http://jianwl.com/2016/08/07/Spring-Test%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h3 id="单元测试的好处？"><a href="#单元测试的好处？" class="headerlink" title="单元测试的好处？"></a>单元测试的好处？</h3><ul>
<li>缩短发现问题到解决问题的速度</li>
<li>验证程序修改后是否正确</li>
<li>如果是开源软件，通过单元测试可以了解软件是怎么使用的</li>
</ul>
<h3 id="Spring-Boot-Test常用注解"><a href="#Spring-Boot-Test常用注解" class="headerlink" title="Spring Boot Test常用注解"></a>Spring Boot Test常用注解</h3><p>当前使用SpringBoot的版本为1.4.0 Release</p>
<ul>
<li>@RunWith(SpringRunner.class) <code>运行Junit并支持Spring-test特性</code></li>
<li><p>@SpringBootTest  <code>为springApplication创建上下文并支持SpringBoot特性</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@SpringBootTest的webEnvironment属性有以下4种</div><div class="line">1、Mock —— 加载WebApplicationContext并提供Mock Servlet环境</div><div class="line">2、RANDOOM_PORT —— 加载EmbeddedWebApplicationContext并提供servlet环境，内嵌服务的监听端口是随机的</div><div class="line">3、DEFINED_PORT —— 加载EmbeddedWebApplicationContext并提供servlet环境，内容服务的监听端口是定义好的。默认端口是8080</div><div class="line">4、NONE —— 加载ApplicationContext，启动SpringApplication时，不支持Servlet环境</div></pre></td></tr></table></figure>
</li>
<li><p>@MockBean <code>声明需要模拟的服务</code></p>
</li>
<li><p>@SpyBean <code>定制化需要模拟服务的某个方法，即部分方法可以mock，部分方法可以调用真实方法</code></p>
</li>
<li><p>@WebMvcTest <code>自动加载Spring MVC配置、MockMvc配置、并扫描注解类</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在没有@WebMvcTest注解时，使用@AutoConfiureMockMvc可以自动配置MockMvc;</div></pre></td></tr></table></figure>
</li>
<li><p>@Transaction <code>开启事务，回滚测试方法对数据库的改变</code></p>
</li>
</ul>
<h3 id="SpringBoot-Test-实战"><a href="#SpringBoot-Test-实战" class="headerlink" title="SpringBoot Test 实战"></a>SpringBoot Test 实战</h3><ul>
<li><p>使用Mock，对Controller层接口进行测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@WebMvcTest(UserController.class)</div><div class="line">public class UserControllerTest &#123;</div><div class="line">    @Autowired</div><div class="line">    private MockMvc mockMvc;</div><div class="line"></div><div class="line">    @MockBean</div><div class="line">    private UserService userService;</div><div class="line"></div><div class="line">    @Before</div><div class="line">    public void mockUserService()&#123;</div><div class="line">        User user = new User(1,&quot;liuyun&quot;,&quot;123456&quot;);</div><div class="line">        given(userService.add(user)).willReturn(true);</div><div class="line">        given(userService.selectById(1)).willReturn(user);</div><div class="line">     given(userService.selectAll()).willReturn(Arrays.asList(user));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 用户列表</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void listTest() throws Exception &#123;</div><div class="line">        mockMvc.perform(get(&quot;/list&quot;)</div><div class="line">                .accept(MediaType.APPLICATION_JSON))</div><div class="line">                .andDo(print())</div><div class="line">                .andExpect(status().isOk());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用mock，模拟对数据库的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class UserServiceTest &#123;</div><div class="line"></div><div class="line">    @MockBean</div><div class="line">    private UserDao userDao;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private UserService userService;</div><div class="line"></div><div class="line">    @Before</div><div class="line">    public void initUserDao()&#123;</div><div class="line">        given(this.userDao.selectAll()).willReturn(Arrays.asList(new User(12231,&quot;zhangsan&quot;,&quot;234&quot;)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void listTest()&#123;</div><div class="line">        List&lt;User&gt; users = userService.selectAll();</div><div class="line">        log.info(new Gson().toJson(users));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>回滚测试方法对数据库状态的影响</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class TransactionTest &#123;</div><div class="line">    @Autowired</div><div class="line">    private UserService userSerivce;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    @Transactional</div><div class="line">    public void add() throws Exception &#123;</div><div class="line">        //初始化用户表</div><div class="line">        userSerivce.deleteAll();</div><div class="line"></div><div class="line">        // 新增2个用户</div><div class="line">        userSerivce.add(new User(1,&quot;liuyun&quot;,&quot;123456&quot;));</div><div class="line">        userSerivce.add(new User(2,&quot;xiaofeng&quot;,&quot;123456&quot;));</div><div class="line">        Assert.assertEquals(2, userSerivce.selectAll().size());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试方法的功能是，往数据库中添加两条记录，加上@Transaction注解后，执行完测试方法，数据库状态将自动回滚到执行这个方法前的状态。</p>
</li>
</ul>
<h3 id="JUnit常用注解"><a href="#JUnit常用注解" class="headerlink" title="JUnit常用注解"></a>JUnit常用注解</h3><ul>
<li>@Before 、@After <code>测试方法前/后运行</code></li>
<li>@BeforeClass 、@AfterClass <code>测试类前/后运行，为静态方法</code></li>
<li>@Test @ignore(“reason”) <code>忽略此测试方法</code></li>
<li>@Test(timeout=1) <code>测试方法运行时间超过1毫秒，则自动失败</code></li>
</ul>
<h3 id="JUnit常用注解实战"><a href="#JUnit常用注解实战" class="headerlink" title="JUnit常用注解实战"></a>JUnit常用注解实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)</div><div class="line">public class CommonAnnatationTest &#123;</div><div class="line">    @Before</div><div class="line">    public void before() &#123;</div><div class="line">        log.info(&quot;before&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @After</div><div class="line">    public void after() &#123;</div><div class="line">        log.info(&quot;after&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @BeforeClass</div><div class="line">    public static void beforeClass() &#123;</div><div class="line">        log.info(&quot;beforeClass&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterClass</div><div class="line">    public static void afterClass() &#123;</div><div class="line">        log.info(&quot;afterClass&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_a() &#123;</div><div class="line">        log.info(&quot;test_a&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Ignore(&quot;废弃方法&quot;)</div><div class="line">    @Test</div><div class="line">    public void test_ignore() &#123;</div><div class="line">        log.info(&quot;ignore&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test(timeout = 1)</div><div class="line">    public void test_timeout() &#123;</div><div class="line">        Integer count = 0;</div><div class="line">        do &#123;</div><div class="line">            count++;</div><div class="line">        &#125; while (count &gt; 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JUnit常用测试类型"><a href="#JUnit常用测试类型" class="headerlink" title="JUnit常用测试类型"></a>JUnit常用测试类型</h3><ul>
<li><p>集合测试 </p>
<p>SuiteA.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteA &#123;</div><div class="line">    @Test</div><div class="line">    public void test_a()&#123;</div><div class="line">        log.info(&quot;A&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_b()&#123;</div><div class="line">        log.info(&quot;B&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SuiteB.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteB &#123;</div><div class="line">    @Test</div><div class="line">    public void test_c()&#123;</div><div class="line">        log.info(&quot;C&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_d()&#123;</div><div class="line">        log.info(&quot;D&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SuiteTest.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@RunWith(Suite.class)</div><div class="line">@Suite.SuiteClasses(&#123;SuiteA.class,SuiteB.class&#125;)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteTest &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行SuiteTest,将测试SuiteA、SuiteB的所有测试方法</p>
</li>
<li><p>单元目录测试</p>
<p>目录1：Fruit.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public interface Drinking &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目录2：Drinking.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public interface Drinking &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CategoryTest.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class CategoryTest &#123;</div><div class="line">    @Test</div><div class="line">    @Category(Fruit.class)</div><div class="line">    public void getFruitName() &#123;</div><div class="line">        log.info(&quot;I am Banana!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    @Category(Drinking.class)</div><div class="line">    public void getDrinkingName() &#123;</div><div class="line">        log.info(&quot;I am water!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SuiteCategoriesTest.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@RunWith(Categories.class)</div><div class="line">@Suite.SuiteClasses(&#123;CategoryTest.class&#125;)</div><div class="line">@Categories.IncludeCategory(Fruit.class)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteCategoriesTest &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行SuiteCategoriesTest,将会运行CategoryTest测试类下，getFruitName()方法。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij IDEA常用技巧]]></title>
      <url>http://jianwl.com/2016/08/07/Intellij-IDEA%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="1-自动import包"><a href="#1-自动import包" class="headerlink" title="1. 自动import包"></a>1. 自动import包</h3><p>在工程维护中，代码改动常常会产生一些无用的import或者需要import新的包，Intellij中提供自动import或移除无用包的功能；</p>
<ul>
<li>Optimize import on the fly 主动移除无用的import</li>
<li>Add unambiguous imports on the fly  主动导入所需的包</li>
</ul>
<p><img src="../images/IDEA技巧.png" alt=""></p>
<h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[retrofit2入门篇]]></title>
      <url>http://jianwl.com/2016/06/24/retrofit2%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h4 id="Retrofit是什么？"><a href="#Retrofit是什么？" class="headerlink" title="Retrofit是什么？"></a>Retrofit是什么？</h4><blockquote>
<p>A type-safe HTTP client for Android and Java</p>
</blockquote>
<p>你将会用注解去描述HTTP请求，同时Retrofit默认集成URL参数替换和参数查询，并支持Multipart请求和文件上传。</p>
<h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.squareup.retrofit2&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;retrofit&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;2.1.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><ul>
<li><p>创建Retrofit实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.example.xingren;</div><div class="line"></div><div class="line">import retrofit2.Call;</div><div class="line">import retrofit2.Retrofit;</div><div class="line">import retrofit2.converter.gson.GsonConverterFactory;</div><div class="line">import java.io.IOException;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by weilin on 29/6/2016.</div><div class="line"> */</div><div class="line">public class RetrofitDemo &#123;</div><div class="line">    private static final String BASE_URL = &quot;https://api.github.com&quot;;</div><div class="line">    public static void main(String[] args) throws IOException &#123;</div><div class="line">        Retrofit retrofit = new Retrofit.Builder()</div><div class="line">                .baseUrl(BASE_URL)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        // create instance for githubApi</div><div class="line">        GithubAPI github = retrofit.create(GithubAPI.class);</div><div class="line">        Call&lt;List&lt;ContributorsQO&gt;&gt; call = github.contributors(&quot;shuangziliuyun&quot;,&quot;spring-boot-thymeleaf&quot;);</div><div class="line">        List&lt;ContributorsQO&gt; all = call.execute().body();</div><div class="line">        all.forEach(contributor -&gt; &#123;</div><div class="line">            System.out.println(&quot;name = &quot; + contributor.getLogin() + &quot; starts = &quot; + contributor.getContributions());</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.example.xingren;</div><div class="line"></div><div class="line">import retrofit2.Call;</div><div class="line">import retrofit2.http.GET;</div><div class="line">import retrofit2.http.Path;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by weilin on 29/6/2016.</div><div class="line"> */</div><div class="line">public interface GithubAPI &#123;</div><div class="line">    @GET(&quot;/repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;)</div><div class="line">    Call&lt;List&lt;ContributorsQO&gt;&gt; contributors(</div><div class="line">            @Path(&quot;owner&quot;) String owner,</div><div class="line">            @Path(&quot;repo&quot;) String repo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>模型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.example.xingren;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by weilin on 29/6/2016.</div><div class="line"> */</div><div class="line">public class ContributorsQO &#123;</div><div class="line">    private String login;</div><div class="line">    private Integer contributions;</div><div class="line"></div><div class="line">    public Integer getContributions() &#123;</div><div class="line">        return contributions;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContributions(Integer contributions) &#123;</div><div class="line">        this.contributions = contributions;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLogin() &#123;</div><div class="line">        return login;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLogin(String login) &#123;</div><div class="line">        this.login = login;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><p><a href="http://yaohepeng.com/2016/03/31/Retrofit%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">Retrofit入门使用教程</a></p>
</li>
<li><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit官网</a></p>
<p>​</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hystrix入门篇]]></title>
      <url>http://jianwl.com/2016/06/24/Hystrix%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h4 id="Hystrix是什么？"><a href="#Hystrix是什么？" class="headerlink" title="Hystrix是什么？"></a>Hystrix是什么？</h4><p>Hystrix是Netflix针对微服务分布式系统的熔断保护中间件，在分布式环境中，难免有些服务依赖会失败，通过Hystrix可以添加延迟容忍和容错逻辑，控制这些分布式服务之间的交互。同时设计隔离访问远程服务端点，防止级联爆炸式的失败，能够让复杂的分布式系统更加灵活具有弹性。</p>
<h4 id="Hystrix能够做些什么？"><a href="#Hystrix能够做些什么？" class="headerlink" title="Hystrix能够做些什么？"></a>Hystrix能够做些什么？</h4><ul>
<li>通过第三方客户端库对访问的依赖关系的延迟和失败给予保护和控制（通过是网络上）</li>
<li>在复杂的分布式系统中停止级联故障</li>
<li>快速失败和快速恢复</li>
<li>回退和优雅的降级</li>
<li>近实时监控、报警和操作控制</li>
</ul>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Lambda表达式入门]]></title>
      <url>http://jianwl.com/2016/06/22/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h4 id="Lambda表达式语法"><a href="#Lambda表达式语法" class="headerlink" title="Lambda表达式语法"></a>Lambda表达式语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. (parameters) -&gt; expression</div><div class="line"></div><div class="line">2. (parameters) -&gt; &#123;statements;&#125;</div></pre></td></tr></table></figure>
<h4 id="Lambda作用域"><a href="#Lambda作用域" class="headerlink" title="Lambda作用域"></a>Lambda作用域</h4><p>Lambda表达式可以访问 外部作用域带有final修饰符的变量、实例变量和静态变量</p>
<ul>
<li><p>访问本地变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int tempNum = 5; //tempNum将被隐式地转换为final类型；</div><div class="line">List&lt;Integer&gt; nums = Arrays.asList(1,2,3);</div><div class="line">nums.stream.map(num -&gt; num + tempNum);</div></pre></td></tr></table></figure>
</li>
<li><p>访问域变量和静态变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class LambdaTest &#123;</div><div class="line">    static int outStaticNum;</div><div class="line">    int outNum;</div><div class="line"></div><div class="line">    void testScope() &#123;</div><div class="line">        List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);</div><div class="line">        nums.stream().forEach(num -&gt; &#123;</div><div class="line">            outNum = 33;</div><div class="line">            outNum = outNum + num; //outNum值可以改变，非final</div><div class="line">            System.out.println(outNum + num);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        System.out.println(&quot; =================== &quot;);</div><div class="line">        nums.stream().forEach(num -&gt; &#123;</div><div class="line">            outStaticNum = 73;</div><div class="line">            System.out.println(outStaticNum + num);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比本地变量，对于实例变量和静态变量，lambda表达式既有读的权限，也有写的权限；</p>
</li>
</ul>
<h4 id="内置函数式接口"><a href="#内置函数式接口" class="headerlink" title="内置函数式接口"></a>内置函数式接口</h4><ul>
<li><p>Predicates</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Predicate接口是返回boolean值的接口；</div><div class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;</div></pre></td></tr></table></figure>
</li>
<li><p>Functions</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//接收一个参数，返回一个结果</div><div class="line">Function&lt;String,Integer&gt; toInteger = Integer::valueOf;</div><div class="line">Function&lt;String,String&gt; backToString = toInteger.andThen(String::valueOf);</div><div class="line"></div><div class="line">backToString.apply(&quot;123&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>Suppliers</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 根据给定的范型返回一个结果，不需要传入参数</div><div class="line">Supplier&lt;Person&gt; personSupplier = Person::new;</div><div class="line">personSupplier.get(); //new Person</div></pre></td></tr></table></figure>
</li>
<li><p>Consumers</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//Consumer接口代表一类只接收一个参数的操作</div><div class="line">Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(&quot;Hello&quot; + p.getFirstName());</div><div class="line">greeter.accept(new Person(&quot;Lucy&quot;,&quot;Tom&quot;));</div></pre></td></tr></table></figure>
</li>
<li><p>Comparators</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</div><div class="line"></div><div class="line">Person p1 = new Person(&quot;John&quot;, &quot;Doe&quot;);</div><div class="line">Person p2 = new Person(&quot;Alice&quot;, &quot;Wonderland&quot;);</div><div class="line"></div><div class="line">comparator.compare(p1, p2);             // &gt; 0</div><div class="line">comparator.reversed().compare(p1, p2);  // &lt; 0</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Lambda表达式简单例子"><a href="#Lambda表达式简单例子" class="headerlink" title="Lambda表达式简单例子"></a>Lambda表达式简单例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. () -&gt; 5 //不需要参数，返回值为5；</div><div class="line"></div><div class="line">2. x -&gt; 2 * x //接收一个参数(数字类型)，返回其2倍的值</div><div class="line"></div><div class="line">3. (x,y) -&gt; x - y //接收2个参数，并返回他们的差值</div><div class="line"></div><div class="line">4. (String s) -&gt; System.out.println(s) //接收一个string对象，并在控制台打印，不返回任何值</div></pre></td></tr></table></figure>
<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String str[] = [&quot;KUFA&quot;,&quot;LINDA&quot;,&quot;DAVID&quot;];</div><div class="line">List&lt;String&gt; strs = Arrays.asList(str);</div><div class="line"></div><div class="line">//以前遍历方式</div><div class="line">for(String s : strs)&#123;</div><div class="line">  System.out.println(s + &quot; , &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//lambda表达式</div><div class="line">strs.forEach((s) -&gt; System.out.println(s + &quot;,&quot;));</div></pre></td></tr></table></figure>
<h4 id="使用Lambda排序集合"><a href="#使用Lambda排序集合" class="headerlink" title="使用Lambda排序集合"></a>使用Lambda排序集合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">//从小到大排序</div><div class="line">names.stream().sorted((name1,name2) -&gt; name1.compareTo(name2)).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">names.stream().filter(name -&gt;!name.equals(&quot;Tom&quot;)).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="使用转换函数，对Stream流中的元素，进行转换操作"><a href="#使用转换函数，对Stream流中的元素，进行转换操作" class="headerlink" title="使用转换函数，对Stream流中的元素，进行转换操作"></a>使用转换函数，对Stream流中的元素，进行转换操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">names.stream().map( name -&gt; name.concat(&quot; -- &quot;)).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">//Reduce操作 类似于(A,B,C,D) -&gt; A = A + B； A = A + C； A = A + D；最后输出A</div><div class="line">String reduceName = names.stream().reduce((name1,name2) -&gt; name1 = name1.concat(&quot;-&quot;+name2)).orElseThrow(() -&gt; new IllegalArgumentException(&quot;无法输出结果!&quot;));</div><div class="line"></div><div class="line">System.out.println(reduceName);</div></pre></td></tr></table></figure>
<h4 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line">//任意匹配其中一个</div><div class="line">Boolean isExistAny = names.stream().anyMatch(name -&gt; name.equals(&quot;Tom&quot;));</div><div class="line"></div><div class="line">//所有元素均匹配</div><div class="line">Boolean isExistAll = names.stream().allMatch(name -&gt; name.equals(&quot;Tom&quot;));</div><div class="line"></div><div class="line">//没有一个元素匹配</div><div class="line">Boolean isExistNone = names.stream().noneMatch(name -&gt; name.equals(&quot;Tom&quot;));</div><div class="line">System.out.println(&quot;isExistAny = &quot; + isExistAny + &quot; isExistAll = &quot; + isExistAll + &quot; isExistNone = &quot; +isExistNone);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JOOQ之CURD语法]]></title>
      <url>http://jianwl.com/2016/06/18/JOOQ%E4%B9%8BCURD%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近，刚接触JOOQ，对于JOOQ增删该查的语法做一个归纳，以便查询。</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li>常用查询样例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">DSLContext create = DSL.using(connection, dialect);</div><div class="line">create.select(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME, count())</div><div class="line">      .from(AUTHOR)</div><div class="line">      .join(BOOK).on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))  //内联结</div><div class="line">      .where(AUTHOR.ID.in(select(BOOK.TITLE).from(BOOK))) </div><div class="line">      .and(BOOK.PUBLISHED.greaterThan(&quot;2008-01-01&quot;))</div><div class="line">      .groupBy(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)  //分组</div><div class="line">      .having(count().greaterThan(5))  //分组过滤</div><div class="line">      .orderBy(AUTHOR.LAST_NAME.asc().nullsFirst()) //排序</div><div class="line">      .limit(2) // 分页</div><div class="line">      .offset(1) // 偏移量</div><div class="line">      .forUpdate()</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<ul>
<li>selectQuery拼接查询条件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//实例1</div><div class="line">DSLContext create = DSL.using(connection,dialect);</div><div class="line">SelectQuery&lt;Record&gt; query = create.selectQuery();</div><div class="line">query.addFrom(AUTHOR);</div><div class="line">query.addJoin(BOOK,BOOK.AUTHOR_ID.equal(AUTHOR.ID));</div><div class="line"></div><div class="line">//执行查询条件</div><div class="line">Result&lt;?&gt; result = query.fetch();</div><div class="line"></div><div class="line">//实例2</div><div class="line">DSLContext create = DSL.using(connection,dialect);</div><div class="line">SelectFinalStep&lt;?&gt; select = create.select().from(AUTHOR);</div><div class="line">SelectQuery&lt;?&gt; query = select.getQuery();</div><div class="line">query.addJoin(BOOK,BOOK.AUTHOR_ID.equal(AUTHOR.ID));</div><div class="line"></div><div class="line">//执行查询条件</div><div class="line">Result&lt;?&gt; result = query.fetch();</div></pre></td></tr></table></figure>
<ul>
<li>单表查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BookRecord book = create.selectFrom(BOOK)</div><div class="line">                        .where(BOOK.LANGUAGE.equal(&quot;DE&quot;))</div><div class="line">                        .orderBy(BOOK.TITLE)</div><div class="line">                        .fetchAny();</div></pre></td></tr></table></figure>
<ul>
<li>去重查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Select&lt;?&gt; select1 = create.selectDistinct(BOOK.TITLE).fetch();</div><div class="line">等价SQL</div><div class="line">SELECT DISTINCT BOOK.TITLE;</div></pre></td></tr></table></figure>
<ul>
<li>外联结查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//左外联结查询：以左表为基准，右表没有的显示为NULL；</div><div class="line">create.select()</div><div class="line">      .from(AUTHOR)</div><div class="line">      .leftOuterJoin(BOOK)</div><div class="line">      .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID)))</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<ul>
<li>外键约束为联结条件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> //BOOK.AUTHOR_ID的外键是参考AUTHOR.ID的主键的，则联结条件是符合外键约束。（有多个外键约束时，是否成立？）</div><div class="line">create.select()</div><div class="line">      .from(AUTHOR)</div><div class="line">      .join(BOOK).onKey()</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<ul>
<li>事务锁定查询记录 - 即查询这几条记录时，这几条记录不能更改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">create.select()</div><div class="line">      .from(BOOK)</div><div class="line">      .where(BOOK.ID.equal(3))</div><div class="line">      .forUpdate()</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ul>
<li>新增一条记录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">create.insertInto(AUTHOR,</div><div class="line">        AUTHOR.ID, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</div><div class="line">      .values(100, &quot;Hermann&quot;, &quot;Hesse&quot;)</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<ul>
<li>新增多条记录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//方式1：</div><div class="line">create.insertInto(AUTHOR,</div><div class="line">        AUTHOR.ID, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</div><div class="line">      .values(100, &quot;Hermann&quot;, &quot;Hesse&quot;)</div><div class="line">      .values(101, &quot;Alfred&quot;, &quot;Döblin&quot;)</div><div class="line">      .execute();  </div><div class="line">//方式2：</div><div class="line">create.insertInto(AUTHOR)</div><div class="line">      .set(AUTHOR.ID, 100)</div><div class="line">      .set(AUTHOR.FIRST_NAME, &quot;Hermann&quot;)</div><div class="line">      .set(AUTHOR.LAST_NAME, &quot;Hesse&quot;)</div><div class="line">      .newRecord()</div><div class="line">      .set(AUTHOR.ID, 101)</div><div class="line">      .set(AUTHOR.FIRST_NAME, &quot;Alfred&quot;)</div><div class="line">      .set(AUTHOR.LAST_NAME, &quot;Döblin&quot;)</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<ul>
<li>将查询结果，新增到数据表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create.insertInto(AUTHOR_ARCHIVE)</div><div class="line">      .select(selectFrom(AUTHOR).where(AUTHOR.DECEASED.isTrue()))</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul>
<li>更新一条数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 方式1：</div><div class="line">create.update(AUTHOR)</div><div class="line">      .set(AUTHOR.FIRST_NAME, &quot;Hermann&quot;)</div><div class="line">      .set(AUTHOR.LAST_NAME, &quot;Hesse&quot;)</div><div class="line">      .where(AUTHOR.ID.equal(3))</div><div class="line">      .execute();      </div><div class="line">// 方式2：</div><div class="line">create.update(AUTHOR)</div><div class="line">      .set(AUTHOR.FIRST_NAME,</div><div class="line">         select(PERSON.FIRST_NAME)</div><div class="line">        .from(PERSON)</div><div class="line">        .where(PERSON.ID.equal(AUTHOR.ID))</div><div class="line">      )</div><div class="line">      .where(AUTHOR.ID.equal(3))</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除一条数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create.delete(AUTHOR)</div><div class="line">      .where(AUTHOR.ID.equal(100))</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot入门篇]]></title>
      <url>http://jianwl.com/2016/06/18/SpringBoot%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="SpringBoot是什么？"><a href="#SpringBoot是什么？" class="headerlink" title="SpringBoot是什么？"></a>SpringBoot是什么？</h3><p>SpringBoot是为了解决Java开发，繁琐的配置、低下的开发效率，复杂的部署流程；它使用“习惯优于配置”的理念让你的项目快速运行起来，使用SpringBoot很容易创建一个独立（运行jar、内嵌Servlet容器）准生产级别的基于Spring的项目，使用SpringBoot可以不用或者只需很少的Spring配置。</p>
<h3 id="SpringBoot的优点"><a href="#SpringBoot的优点" class="headerlink" title="SpringBoot的优点"></a>SpringBoot的优点</h3><ul>
<li>快速构建项目</li>
<li>对主流开发框架的无配置集成</li>
<li>项目可独立运行，无须外部依赖Servlet容器</li>
<li>提供运行时的应用监控</li>
<li>极大地提高了开发、部署效率</li>
<li>与云计算的天然集成</li>
</ul>
<h3 id="SpringBoot的缺点"><a href="#SpringBoot的缺点" class="headerlink" title="SpringBoot的缺点"></a>SpringBoot的缺点</h3><ul>
<li>书籍文档较少且不够深入</li>
</ul>
<h3 id="SpringBoot运行"><a href="#SpringBoot运行" class="headerlink" title="SpringBoot运行"></a>SpringBoot运行</h3><p>Spring Boot通常有一个名为Application的入口类，入口类里有一个main方法，这个main方法其实就是一个标准的Java应用入口。在main方法中使用SpringApplication.run( Application.class,args)来启动SpringBoot项目。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package org.jooq.example.spring;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author jianwl</div><div class="line"> */</div><div class="line">@SpringBootApplication</div><div class="line">public class Application &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SpringBoot-常用注解"><a href="#SpringBoot-常用注解" class="headerlink" title="SpringBoot 常用注解"></a>SpringBoot 常用注解</h3><ul>
<li><p>@Value <code>注入application.properties中定义的属性值</code></p>
</li>
<li><p>@ResponseBody <code>将结果直接填充到HTTP的响应提中，一般用于构建Restful的API</code></p>
</li>
<li><p>@Controller <code>用于定义控制类，spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口</code></p>
</li>
<li><p>@RestController<code>@ResponseBody和@Controller的合集</code></p>
</li>
<li><p>@RequestMapping <code>提供路由信息，负责URL到Controller中的具体函数映射</code></p>
</li>
<li><p>@EnableAutoConfiguration <code>Spring Boot自动配置,尝试根据你添加的jar依赖自动配置你的Spring应用</code></p>
</li>
<li><p>@ComponentScan <code>将该类自动扫描并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类</code></p>
</li>
<li><p>@Configuration <code>相对于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类，可以通过@ImportResource加载xml配置文件</code></p>
</li>
<li><p>@SpringBootApplication <code>@EnableAutoConfiguration @ComponentScan @Configuration的合集</code></p>
</li>
<li><p>@Import <code>导入其他配置类</code></p>
</li>
<li><p>@ImportResource<code>用来加载xml配置文件</code></p>
</li>
<li><p>@Autowired <code>自动导入依赖的bean</code></p>
</li>
<li><p>@Service <code>用于修饰service层的组件</code></p>
</li>
<li><p>@Reponsitory <code>用于修饰DAO层的组件</code></p>
</li>
<li><p>@Component <code>当组件不好归类时，使用这个注解进行标注</code></p>
</li>
<li><p>@Profile <code>为不同环境下，使用不同的配置提供了支持</code></p>
</li>
<li><p>@ConfigurationProperties <code>注入属性</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@ConfigurationProperties(locations = &quot;classpath:mail.properties&quot;, </div><div class="line">                         ignoreUnknownFields = false, </div><div class="line">                         prefix = &quot;mail&quot;)</div><div class="line">public class MailProperties &#123; </div><div class="line">  public static class Smtp &#123;  </div><div class="line">    private boolean auth;  </div><div class="line">    private boolean starttlsEnable;  </div><div class="line">    // ... getters and setters </div><div class="line">  &#125;</div><div class="line">  @NotBlank private String host;</div><div class="line">  private int port;  </div><div class="line">  private String from; </div><div class="line">  private String username;</div><div class="line">  private String password; </div><div class="line">  @NotNull private Smtp smtp; </div><div class="line">  // ... getters and setters</div><div class="line">&#125;</div><div class="line"></div><div class="line">// mail.properties</div><div class="line">mail.host=localhost</div><div class="line">mail.port=25</div><div class="line">mail.smtp.auth=false</div><div class="line">mail.smtp.starttlsEnable=false</div><div class="line">mail.from=me@localhost</div><div class="line">mail.username=</div><div class="line">mail.password=</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Thymeleaf入门篇]]></title>
      <url>http://jianwl.com/2016/06/15/Thymeleaf%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="Thymeleaf是什么？"><a href="#Thymeleaf是什么？" class="headerlink" title="Thymeleaf是什么？"></a>Thymeleaf是什么？</h3><p>Thymeleaf是一个跟Volecity、FreeMarker类似的模板引擎，它可以完全替代JSP，跟其他模板引擎，有如下三个吸引人的特点。</p>
<ol>
<li>Thymeleaf 在有网络和无网络的环境下皆可运行，它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持html原型，然后在html里增加额外的属性来叨叨模板、数据的展现方式。浏览器解释html时会忽略未定义的标签属性，所以thymeleaf的模板可以静态地运行，当有数据返回到页面时，Thymeleaf标签会动态替换掉静态内容，使页面动态显示。</li>
<li>Thymeleaf开箱即用的特性，它提供标准和spring标准两套方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套用模板，该标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li>
<li>Thymeleaf提供spring标准方言和一个与SpringMVC完美基础的可选模块。可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>
</ol>
<h3 id="Thymeleaf常用语法"><a href="#Thymeleaf常用语法" class="headerlink" title="Thymeleaf常用语法"></a>Thymeleaf常用语法</h3><p>1、访问数据的四种模式</p>
<ul>
<li><code>${}</code>变量表示式，用于访问容器上下文的变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//HomeController.class</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.ui.Model;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line">@Controller</div><div class="line">class HomeController &#123;</div><div class="line">    @RequestMapping(&quot;/home&quot;)</div><div class="line">    String home(Model model) &#123;</div><div class="line">        model.addAttribute(&quot;msg&quot;, &quot;welcome to thymeleaf&quot;);</div><div class="line">        return &quot;home&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//home.html (主要代码)</div><div class="line"> &lt;p th:text=&quot;$msg&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>*{}</code>选择表达式，选择表达式获取的是选定对象的变量。通过<code>th:object</code>绑定对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div th:object=&quot;$session.user&quot;&gt; </div><div class="line">&lt;p&gt; name: &lt;span th:text=&quot; *&#123;name&#125; &quot;&gt; &lt;/span&gt; &lt;/p&gt;</div><div class="line">&lt;p&gt; age: &lt;span th:text=&quot; *&#123;age&#125; &quot;&gt; &lt;/span&gt; &lt;/p&gt;</div><div class="line">&lt;p&gt; address: &lt;span th:text=&quot; *&#123;address&#125; &quot;&gt; &lt;/span&gt; &lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>#{}</code> 消息表达式，通常与<code>th:text</code>属性一起使用，指明了<code>#{}</code>中key所对应的value。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// WEB-INF/templates/home.html</div><div class="line"> &lt;p th: text=&quot; #&#123;home. welcome&#125;&quot; &gt;This text will not be show! &lt;/p&gt;</div><div class="line"></div><div class="line">// WEB-INF/templates/home.properties</div><div class="line">home.welcome=this messages is from home.properties!</div></pre></td></tr></table></figure>
<ul>
<li><code>@{}</code>超链接URL表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">script th:src=&quot;@&#123;/resource/js/jquery/juqery.json-2.4.min.js&#125;&quot;</div></pre></td></tr></table></figure>
<p>2、文本处理</p>
<ul>
<li>数字相加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//输入结果：In two years, it will be 2018</div><div class="line"> &lt;p&gt;In two years, it will be &lt;span th:text=&quot;2016 + 2&quot;&gt;1494&lt;/span&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure>
<ul>
<li>遍历列表内容 <code>th:each</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// persons为后端传过来的模型数据,List&lt;Person&gt;; Person包含&#123;name,age,address&#125;三个属性</div><div class="line"> &lt;table&gt;</div><div class="line"> &lt;tr th:each=&quot;person : $&#123;persons&#125;&quot;&gt;</div><div class="line"> 	&lt;td th:text=&quot;$&#123;person.name&#125;&quot;&gt;&lt;/td&gt;</div><div class="line"> 	&lt;td th:text=&quot;$&#123;person.age&#125;&quot;&gt;&lt;/td&gt;</div><div class="line"> 	&lt;td th:text=&quot;$&#123;person.address&#125;&quot;&gt;&lt;/td&gt;</div><div class="line"> &lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<ul>
<li>条件判断</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">th:if</div><div class="line">th:unless</div><div class="line">th:switch</div><div class="line">th:case</div></pre></td></tr></table></figure>
<ul>
<li>本地变量声明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">th:object</div><div class="line">th:with</div></pre></td></tr></table></figure>
<ul>
<li>内联文本 <code>[[ ]]</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Hello,[[ $&#123;session.user.name&#125; ]] &lt;/p&gt;</div><div class="line"></div><div class="line">等价于</div><div class="line"></div><div class="line">&lt;p&gt;Hello,&lt;span th:text=&quot;$&#123;session.user.name&#125;&quot;&gt;&lt;/span&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>3、 设置Attribute</p>
<ul>
<li>th:src=”@{/images/xxx.png}”  设置图片URL 等价于 th:attribute=”src=@{/images/xxx.png}”</li>
<li>th:value 设置属性值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;submit&quot; value=&quot;Subscribe me!&quot; th:value=&quot;#&#123;subscribe.submit&#125;&quot;/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>th:action 等价于 form 的action属性</li>
<li>th:href 设置超链接地址</li>
<li>追加属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">th:attrprepend</div><div class="line">th:attrappend</div></pre></td></tr></table></figure>
<p>4、模板</p>
<ul>
<li>引用模板,引用footer.html的copy模块<code>th:include=&quot;footer :: copy&quot;</code>或<code>th:replace=&quot;footer :: copy&quot;</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// footer.html</div><div class="line">&lt;!DOCTYPE html SYSTEM &quot;http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;</div><div class="line">      xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</div><div class="line"></div><div class="line"> &lt;body&gt;</div><div class="line">   &lt;div th:fragment=&quot;copy&quot;&gt;</div><div class="line">     &amp;copy; 2011 The Good Thymes Virtual Grocery</div><div class="line">   &lt;/div&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line"> </div><div class="line"> &lt;/html&gt;</div></pre></td></tr></table></figure>
<p>5、常用的工具类</p>
<ul>
<li><a href="http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#arrays" target="_blank" rel="external">Dates、String、Arrays、Lists、Sets、Maps工具类</a></li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.cnblogs.com/vinphy/p/4674247.html" target="_blank" rel="external">thymeleaf 学习笔记-基础篇(中文教程)</a></li>
<li><a href="http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html" target="_blank" rel="external">Tutorial: Using Thymeleaf</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JOOQ入门篇]]></title>
      <url>http://jianwl.com/2016/06/14/JOOQ%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="什么是JOOQ？"><a href="#什么是JOOQ？" class="headerlink" title="什么是JOOQ？"></a>什么是JOOQ？</h3><p><a href="http://www.jooq.org/" target="_blank" rel="external">JOOQ</a>,全称是Java Object Oriented Querying,即面向Java对象查询，它是<a href="http://www.datageekery.com/" target="_blank" rel="external">Data Geekery</a>公司研发的DA方案(Data AccessLayer)主要解决两个问题。</p>
<ol>
<li>Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱</li>
<li>JDBC又过于嘈杂，需要干的事情太多</li>
</ol>
<p>JOOQ希望做的就是在上述两者中寻找一个最佳的平衡，它依据数据库中的表生产DA相关代码，开发者将生产的代码引入项目中使用。</p>
<p>有好几个版本</p>
<ul>
<li>OpenSource</li>
<li>Express</li>
<li>Professional</li>
<li>Enterprise</li>
</ul>
<p>OpenSource版本针对开源数据库，其他的几个版本针对非开源项目。</p>
<h3 id="JOOQ框架原理"><a href="#JOOQ框架原理" class="headerlink" title="JOOQ框架原理"></a>JOOQ框架原理</h3><p>在DAO层使用Java语言编写SQL语句，在Intellij IDEA帮助下，复杂SQL的维护变得很容易，通过内部SQL Builder转换成数据库可执行的SQL文本，使用数据库驱动，提交SQL到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。</p>
<h3 id="JOOQ-vs-Hibernate-优势"><a href="#JOOQ-vs-Hibernate-优势" class="headerlink" title="JOOQ vs Hibernate 优势"></a>JOOQ vs Hibernate 优势</h3><p>它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句，在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，简直是噩梦，而Hibernate饱受诟病的连续查询配置复杂以及HQL语法的问题，在JOOQ不复存在。</p>
<h3 id="JOOQ-vs-Mybatis-优势"><a href="#JOOQ-vs-Mybatis-优势" class="headerlink" title="JOOQ vs Mybatis 优势"></a>JOOQ vs Mybatis 优势</h3><p>它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时，带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转化问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决，又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。</p>
<h3 id="JOOQ-优势"><a href="#JOOQ-优势" class="headerlink" title="JOOQ 优势"></a>JOOQ 优势</h3><p>JOOQ提供原生的类型安全转化，以及POJO维护，免去大量一次性代码的编写(通过Maven Plugin实现)；使用这种DAO模式，可以通过类的方式来进行数据库访问，而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>Github下载链接：<code>git@github.com:shuangziliuyun/JOOQ-Study.git</code></p>
<h4 id="With-Mysql"><a href="#With-Mysql" class="headerlink" title="With Mysql"></a>With Mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--MySQL JDBC driver, 数据库迁移等情况下需要. --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.36&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!--数据库代码生成的插件 --&gt;</div><div class="line">           &lt;plugin&gt;</div><div class="line">               &lt;!-- Specify the maven code generator plugin --&gt;</div><div class="line">               &lt;groupId&gt;org.jooq&lt;/groupId&gt;</div><div class="line">               &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</div><div class="line">               &lt;version&gt;3.8.2&lt;/version&gt;</div><div class="line">               &lt;!-- The plugin should hook into the generate goal --&gt;</div><div class="line">               &lt;executions&gt;</div><div class="line">                   &lt;execution&gt;</div><div class="line">                       &lt;goals&gt;</div><div class="line">                           &lt;goal&gt;generate&lt;/goal&gt;</div><div class="line">                       &lt;/goals&gt;</div><div class="line">                   &lt;/execution&gt;</div><div class="line">               &lt;/executions&gt;</div><div class="line">               &lt;configuration&gt;</div><div class="line">                   &lt;!-- JDBC connection parameters --&gt;</div><div class="line">                   &lt;jdbc&gt;</div><div class="line">                       &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;</div><div class="line">                       &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</div><div class="line">                       &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</div><div class="line">                       &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</div><div class="line">                   &lt;/jdbc&gt;</div><div class="line">                   &lt;!-- Generator parameters --&gt;</div><div class="line">                   &lt;generator&gt;</div><div class="line">                       &lt;database&gt;</div><div class="line">                           &lt;name&gt;org.jooq.util.mysql.MySQLDatabase&lt;/name&gt;</div><div class="line">                           &lt;includes&gt;.*&lt;/includes&gt;</div><div class="line">                           &lt;inputSchema&gt;$&#123;db.schema&#125;&lt;/inputSchema&gt;</div><div class="line">                           &lt;forcedTypes&gt;</div><div class="line">                               &lt;forcedType&gt;</div><div class="line">                                   &lt;name&gt;BOOLEAN&lt;/name&gt;</div><div class="line">                                   &lt;expression&gt;.*\.HANDMADE&lt;/expression&gt;</div><div class="line">                                   &lt;types&gt;.*&lt;/types&gt;</div><div class="line">                               &lt;/forcedType&gt;</div><div class="line">                           &lt;/forcedTypes&gt;</div><div class="line">                       &lt;/database&gt;</div><div class="line">                       &lt;target&gt;</div><div class="line">                           &lt;packageName&gt;com.study.jooq.common.generated&lt;/packageName&gt;</div><div class="line">                           &lt;directory&gt;src/main/java&lt;/directory&gt;</div><div class="line">                       &lt;/target&gt;</div><div class="line">                   &lt;/generator&gt;</div><div class="line">               &lt;/configuration&gt;</div><div class="line">           &lt;/plugin&gt;</div></pre></td></tr></table></figure>
<h4 id="With-Flyway"><a href="#With-Flyway" class="headerlink" title="With Flyway"></a>With Flyway</h4><p>Flyway 是独立于数据库的应用，管理并跟踪数据库变更的数据库版本管理工具</p>
<p><a href="http://www.cnblogs.com/huang0925/p/4409506.html" target="_blank" rel="external">Flyway，数据库Schema管理利器</a></p>
<p>在pom.xml的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line"></div><div class="line">    &lt;!--防止maven改动IDE的language level --&gt;</div><div class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</div><div class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</div><div class="line"></div><div class="line">    &lt;!--数据库迁移所用的参数 --&gt;</div><div class="line">    &lt;db.url&gt;jdbc:mysql://localhost:3306&lt;/db.url&gt;</div><div class="line">    &lt;db.username&gt;root&lt;/db.username&gt;</div><div class="line">    &lt;db.password&gt;root&lt;/db.password&gt;</div><div class="line">    &lt;db.schema&gt;study&lt;/db.schema&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line"></div><div class="line">&lt;!--数据库迁移, 同步的插件 --&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;3.0&lt;/version&gt;</div><div class="line">            &lt;!-- Note that we&apos;re executing the Flyway plugin in the &quot;generate-sources&quot; phase --&gt;</div><div class="line">            &lt;executions&gt;</div><div class="line">                &lt;execution&gt;</div><div class="line">                    &lt;phase&gt;generate-sources&lt;/phase&gt;</div><div class="line">                    &lt;goals&gt;</div><div class="line">                        &lt;goal&gt;migrate&lt;/goal&gt;</div><div class="line">                    &lt;/goals&gt;</div><div class="line">                &lt;/execution&gt;</div><div class="line">            &lt;/executions&gt;</div><div class="line">            &lt;!-- Note that we need to prefix the db/migration path with filesystem:</div><div class="line">            to prevent Flyway from looking for our migration scripts only on the classpath --&gt;</div><div class="line">            &lt;configuration&gt;</div><div class="line">                &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</div><div class="line">                &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</div><div class="line">                &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</div><div class="line">                &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</div><div class="line">                &lt;schemas&gt;</div><div class="line">                    &lt;schema&gt;$&#123;db.schema&#125;&lt;/schema&gt;</div><div class="line">                &lt;/schemas&gt;</div><div class="line">                &lt;locations&gt;</div><div class="line">                    &lt;location&gt;filesystem:src/main/resources/db/migration&lt;/location&gt;</div><div class="line">                &lt;/locations&gt;</div><div class="line">            &lt;/configuration&gt;</div><div class="line">        &lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p>在工程：src/main/resources/db/migration目录下，没有目录文件夹时，需要先创建文件夹，放入数据库初始化SQL脚本V1_init_database.sql。注意在maven中配置的db.schema=study,表明需要使用的数据库名称是study，study需要实现不存在。</p>
<p>在执行maven clean、maven install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生产的，维护数据库版本升级时的信息，对应的在代码中，生产了三个POJO。</p>
<p>代码生成示例：<br><img src="/images/generate code.png" alt=""></p>
<h4 id="With-HikariCP"><a href="#With-HikariCP" class="headerlink" title="With HikariCP"></a>With HikariCP</h4><p>HikariCP号称是现在性能最好的JDBC连接池组件，从它现在的发展看来，其可能确实如它宣称的那样，性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP、这三者中BoneCP的性能最好，C3P0的性能现在来说确实非常差，而且很久没有更新了。HikariCP毕竟才出来不久，其性能如何，也需要实践检验，若是担心新东西有坑，推荐使用BoneCP.Spring现在也集成了HikaiCP，所以可以尝试用下它。</p>
<p>如何配置使用呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--JDBC连接池 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="简单的CURD"><a href="#简单的CURD" class="headerlink" title="简单的CURD"></a>简单的CURD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">try (ScopedContext scopedContext = new ScopedContext()) &#123;//try with resource</div><div class="line">            DSLContext create = scopedContext.getDSLContext();</div><div class="line">            //add</div><div class="line">            UserRecord userRecord = create.newRecord(USER);</div><div class="line">            userRecord.setAge((byte) 18);</div><div class="line">            userRecord.setMobile(&quot;15985236985&quot;);</div><div class="line">            userRecord.setName(&quot;赵六&quot;);</div><div class="line">            userRecord.setSex((byte) 1);</div><div class="line">            userRecord.setPassword(String.valueOf(System.nanoTime()));</div><div class="line">            userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</div><div class="line">            int insertRet = userRecord.insert();//执行insert sql</div><div class="line">            userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰</div><div class="line">            //userRecord.refresh();//从数据库重新加载该记录</div><div class="line">            log.info(&quot;insertRet:&#123;&#125;&quot;, insertRet);</div><div class="line">            log.info(&quot;自增长的uid:&#123;&#125;&quot;, userRecord.getUid());</div><div class="line"></div><div class="line">            //index</div><div class="line">            int createIndexRet = create.createIndex(&quot;user_index_mobile_unique&quot;)</div><div class="line">                    .on(USER, USER.MOBILE)</div><div class="line">                    .execute();//为手机号码字段创建唯一索引</div><div class="line">            int dropIndexRet = create.dropIndex(&quot;user_index_mobile_unique&quot;)</div><div class="line">                    .on(USER)</div><div class="line">                    .execute();//删除索引</div><div class="line">            log.info(&quot;dropIndexRet:&#123;&#125;,createIndexRet:&#123;&#125;&quot;, dropIndexRet, createIndexRet);</div><div class="line"></div><div class="line">            //select</div><div class="line">            Record record = create.select(USER.NAME, USER.UID)</div><div class="line">                    .from(USER)</div><div class="line">                    .where(USER.MOBILE.eq(&quot;15985236985&quot;))</div><div class="line">                    .limit(1)</div><div class="line">                    .fetchOne();</div><div class="line">            log.info(&quot;姓名:&#123;&#125;，uid:&#123;&#125;&quot;, record.getValue(USER.NAME), record.getValue(USER.UID));</div><div class="line"></div><div class="line">            Result&lt;UserRecord&gt; userRecords = create.selectFrom(USER)</div><div class="line">                    .where(USER.SEX.eq((byte) 1).and(USER.MOBILE.like(&quot;159%&quot;)))</div><div class="line">                    .orderBy(USER.MOBILE.asc()).limit(0, 20).fetch();</div><div class="line"></div><div class="line">            for (UserRecord ur : userRecords) &#123;</div><div class="line">                log.info(&quot;mobile:&#123;&#125;,uid:&#123;&#125;,registerTime:&#123;&#125;&quot;, ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //delete</div><div class="line">            int deleteRecordRet = create.deleteFrom(USER).where(USER.UID.eq(userRecord.getUid())).execute();</div><div class="line">            log.info(&quot;deleteRecordRet:&#123;&#125;&quot;, deleteRecordRet);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/" target="_blank" rel="external">jOOQ vs. Hibernate: When to Choose Which</a></li>
<li><a href="https://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/" target="_blank" rel="external">SQL Templating with jOOQ or MyBatis</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之特性]]></title>
      <url>http://jianwl.com/2016/06/13/Java8%E4%B9%8B%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>Java8为Java语言、编译器、类库、开发工具与JVM带来了大量新的特性，在本教程中，我们将一一探索这些变化，并用真实的例子说明其适用场景。</p>
<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>lambda表达式是整个Java8发行版中最受期待的Java语言层面上的改变，最简单的lambda表达式可以由逗号分隔的参数列表、-&gt;符号和函数体三部分组成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//参数e的类型是由编译器推测出来的,等价于 (String e) -&gt; System.out.println(e);</div><div class="line"></div><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).forEach( e -&gt; System.out.println( e ));</div></pre></td></tr></table></figure>
<p>如果lambda的函数体比较复杂，可以将函数体放到花括号中；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).forEach( e -&gt; &#123;</div><div class="line">    System.out.println( e );</div><div class="line">    System.out.println( e );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>lambda引用类的成员或局部变量，如果变量不是final，会隐式转换为final，这样效率更高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// String separator 会被隐式转换为 final String separator</div><div class="line">String separator = &quot;,&quot;;</div><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).forEach ( e -&gt; System.out.println( e + separator ));</div></pre></td></tr></table></figure>
<p>lambda可能会返回一个值，返回值的类型是由编译器推测出来的，lambda的函数体只有一行的话，那么没有必要显式使用return语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).sort((e1, e2) -&gt; e1.compareTo(e2) );</div><div class="line"></div><div class="line">//等价于</div><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).sort((e1, e2) -&gt; &#123;</div><div class="line"> 	int result = e1.compareTo(e2) ;</div><div class="line">	return result;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用提供了非常有用的语法，可以直接引用已有Java类和对象的方法或构造器，与lambda联合使用。</p>
<ol>
<li>无参构造器引用，<code>Class::new</code></li>
<li>静态方法引用，<code>Class::static_method</code></li>
<li>特定类的方法引用 <code>Class::method</code></li>
<li>特定对象的方法引用<code>instance::method</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.xingren.java8;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.List;</div><div class="line">import java.util.function.Supplier;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by xingren on 14/6/16.</div><div class="line"> */</div><div class="line">public class CarDemo &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        final Car car = Car.create(Car::new); // 1</div><div class="line">        final List&lt;Car&gt; cars = Arrays.asList(car);</div><div class="line">        </div><div class="line">        cars.forEach(Car::collide); // 2</div><div class="line">        cars.forEach(Car::repair); // 3</div><div class="line">        cars.forEach(car::follow); // 4</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class Car &#123;</div><div class="line">        public static Car create( final Supplier&lt;Car&gt; supplier ) &#123;</div><div class="line">            return supplier.get();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void collide( final Car car ) &#123;</div><div class="line">            System.out.println( &quot;Collided &quot; + car.toString() );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void follow( final Car another ) &#123;</div><div class="line">            System.out.println( &quot;Following the &quot; + another.toString() );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void repair() &#123;</div><div class="line">            System.out.println( &quot;Repaired &quot; + this.toString() );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>Optional的引入是为了解决空指针异常，Optional实际上是个容器，它可以保存类型T的值，或保存Null，Optional提供了很多方法，这样我们不用显式进行空指针检测。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.xingren.java8;</div><div class="line"></div><div class="line">import java.util.Optional;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by xingren on 14/6/16.</div><div class="line"> */</div><div class="line">public class OptionalTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Optional&lt; String &gt; fullName = Optional.ofNullable( null );</div><div class="line">        System.out.println( &quot;Full Name is set? &quot; + fullName.isPresent() ); </div><div class="line">        System.out.println( &quot;Full Name: &quot; + fullName.orElseGet( () -&gt; &quot;[none]&quot; ) );</div><div class="line">        System.out.println( fullName.map( s -&gt; &quot;Hey &quot; + s + &quot;!&quot; ).orElse( &quot;Hey Stranger!&quot; ) );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>Stream API把真正的函数式编程风格引入到Java中，极大简化了集合框架的处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">package com.xingren.java8;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collection;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by xingren on 14/6/16.</div><div class="line"> */</div><div class="line">public class StreamsDemo &#123;</div><div class="line">    private enum Status &#123;</div><div class="line">        OPEN, CLOSED</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    private static final class Task &#123;</div><div class="line">        private final Status status;</div><div class="line">        private final Integer points;</div><div class="line"></div><div class="line">        Task( final Status status, final Integer points ) &#123;</div><div class="line">            this.status = status;</div><div class="line">            this.points = points;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Integer getPoints() &#123;</div><div class="line">            return points;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Status getStatus() &#123;</div><div class="line">            return status;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public String toString() &#123;</div><div class="line">            return String.format( &quot;[%s, %d]&quot;, status, points );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        final Collection&lt; Task &gt; tasks = Arrays.asList(</div><div class="line">                new Task(Status.OPEN, 5),</div><div class="line">                new Task(Status.OPEN, 13),</div><div class="line">                new Task(Status.CLOSED, 8)</div><div class="line">        );</div><div class="line"></div><div class="line">        // Calculate total points of all active tasks using sum()</div><div class="line">        final long totalPointsOfOpenTasks = tasks</div><div class="line">                .stream()</div><div class="line">                .filter( task -&gt; task.getStatus() == Status.OPEN )</div><div class="line">                .mapToInt( Task::getPoints )</div><div class="line">                .sum();</div><div class="line"></div><div class="line">        System.out.println( &quot;Total points: &quot; + totalPointsOfOpenTasks );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数做了哪些事？tasks集合被转化为其相应的stream表示，然后过滤掉状态为CLOSED的task；mapToInt操作通过Task::getPoints这种方式调用每个task实例的getPoints方法把Task的stream转化为Integer的stream；最后用sum函数把所有分数加起来。</p>
<p>Stream另一个亮点是，能够原生支持并行处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">final double totalPoints = tasks</div><div class="line">   .stream()</div><div class="line">   .parallel()</div><div class="line">   .map( task -&gt; task.getPoints() ) // or map( Task::getPoints ) </div><div class="line">   .reduce( 0, Integer::sum );</div><div class="line">     </div><div class="line">System.out.println( &quot;Total points (all tasks): &quot; + totalPoints );</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git命令之使用场景]]></title>
      <url>http://jianwl.com/2016/06/10/Git%E5%91%BD%E4%BB%A4%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      <content type="html"><![CDATA[<p>这篇文章主要是给自己做一个备忘，本文主要结合使用场景介绍常用的Git指令。</p>
<h3 id="如何安装Git"><a href="#如何安装Git" class="headerlink" title="如何安装Git"></a>如何安装Git</h3><ol>
<li>Mac:安装<a href="http://brew.sh" target="_blank" rel="external">Homebrew</a>: <code>brew install git</code></li>
<li>Linux(Debian): <code>apt-get install git-core</code></li>
<li>Linux(Fedora): <code>yum install git-core</code></li>
</ol>
<h3 id="如何设定Git"><a href="#如何设定Git" class="headerlink" title="如何设定Git"></a>如何设定Git</h3><ol>
<li>Mac: <a href="https://help.github.com/articles/set-up-git/#platform-mac" target="_blank" rel="external">Set Up Git on Mac</a></li>
<li>Linux:<a href="https://help.github.com/articles/set-up-git/#platform-linux" target="_blank" rel="external">Set Up Git on Linux</a></li>
</ol>
<h3 id="如何创建一个Git-Repository"><a href="#如何创建一个Git-Repository" class="headerlink" title="如何创建一个Git Repository"></a>如何创建一个Git Repository</h3><ol>
<li>在本机任意路径下使用<code>git init</code> 初始化一个新的Git repo</li>
<li>使用<code>git clone</code> 拷贝远程机器上的项目到本机</li>
</ol>
<h3 id="如何将文件加入暂存区-Stage"><a href="#如何将文件加入暂存区-Stage" class="headerlink" title="如何将文件加入暂存区(Stage)"></a>如何将文件加入暂存区(Stage)</h3><ol>
<li>使用<code>git add</code>将新建文件加入Stage.</li>
<li><code>git add .</code>会将所有修改过的文件加入Stage</li>
</ol>
<h3 id="如何将文件从暂存区中移除（取消add）"><a href="#如何将文件从暂存区中移除（取消add）" class="headerlink" title="如何将文件从暂存区中移除（取消add）"></a>如何将文件从暂存区中移除（取消add）</h3><ol>
<li><code>git reset HEAD &quot;文件名&quot;</code></li>
</ol>
<h3 id="如何将暂存区文件提交到本地工作区"><a href="#如何将暂存区文件提交到本地工作区" class="headerlink" title="如何将暂存区文件提交到本地工作区"></a>如何将暂存区文件提交到本地工作区</h3><ol>
<li>使用<code>git commit</code> 会将暂存区中的文件添加到本地工作区</li>
<li><code>git commit -m &quot;commit信息&quot;</code> 使用commit的前提是，文件已经放到暂存区了。</li>
<li><code>git commit -am &quot;commit信息&quot;</code> 等同于先<code>git add .</code>后<code>git commit -m &quot;commit信息&quot;</code></li>
</ol>
<h3 id="如何修改-取消上一次的commit"><a href="#如何修改-取消上一次的commit" class="headerlink" title="如何修改/取消上一次的commit"></a>如何修改/取消上一次的commit</h3><ol>
<li><code>git commit --amend</code>修改上一次的commit信息</li>
<li><code>git reset HEAD^ --soft</code>取消刚刚的commit，但保留修改过的文件(<code>-- soft</code>保留暂存区和工作区不变)</li>
<li><code>git reset HEAD^ --hard</code>取消刚刚的commit，回到上一次commit的干净状态。(<code>--hard</code>重置暂存区和工作区) </li>
</ol>
<h3 id="分支基本操作-branch"><a href="#分支基本操作-branch" class="headerlink" title="分支基本操作(branch)"></a>分支基本操作(branch)</h3><ol>
<li><code>git branch</code>列出所有本地分支</li>
<li><code>git branch -r</code>列出所有远端分支</li>
<li><code>git branch -a</code>列出所有本地及远端分支</li>
<li><code>git branch &quot;新分支名称&quot;</code>创建新的本地分支</li>
<li><code>git checkout -b &quot;新分支名称&quot;</code>创建新分支并切换到该分支(仅仅创建一个分支，不会改变stage文件，也不会改变当前工作目录)</li>
<li><code>git checkout -b develop origin/develop</code>下载远程develop分支到本地develop分支，并切换到本地develop分支</li>
<li><code>git branch -d &quot;已存在的分支名称&quot;</code>删除本地分支</li>
<li><code>git push origin :远端分支</code>删除远端分支</li>
<li><code>git checkout “分支名称”</code>切换到另一个branch</li>
</ol>
<h3 id="远端操作-remote"><a href="#远端操作-remote" class="headerlink" title="远端操作(remote)"></a>远端操作(remote)</h3><ol>
<li><code>git push origin :远端分支</code> 删除远端分支</li>
<li><code>git pull origin 远端分支</code> 下载远端分支并合并到当前目录所在分支</li>
<li><code>git push origin 远端分支</code> 将本地的分支上传到远端</li>
</ol>
<h3 id="合并操作-merge"><a href="#合并操作-merge" class="headerlink" title="合并操作(merge)"></a>合并操作(merge)</h3><ol>
<li><code>git merge &quot;本地分支&quot;</code>合并指定分支到目前的分支</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>代码改动了，我想全部重来，如何快速回到干净的目录。<code>git reset --hard</code>这个指令会清除所有最近一次commit不同的修改。</li>
<li>merge过程中发生冲突，我想放弃merge，要如何取消merge？<code>git reset --hard</code>可以取消这次merge</li>
<li>如何取消这次merge会到merge前的状态？<code>git reset --hard ORIG_HEAD</code>这个指令会取消最近一次成功的merge以及所有你在这次merge后所做的修改。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后，梳理一下整个流程。</p>
<pre><code>1.git init //初始化本地仓库
2.git clone git@git.oschina.net:shuangziliuyun/Hexo.git //拷贝远程项目到本地，这里只是举个栗子，把项目地址改成自己的即可。
3.touch README.md //新建文件
4.git add . //提交新建文件到暂存区(Stage)
5.git commit -m &quot;新增README.md文件&quot;//将暂存区的文件提交到工作区
6.git pull origin master //下载远端主分支，并合并到本地主分支。
7.git push origin master //提交本地分支到远端
</code></pre><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>1.在push前必须pull并合并代码，以便在最新的代码上进行开发。<br>ß</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://docs.google.com/presentation/d/1JbKIKOO7szXR5TnEVyn5JFGAimgq4OXTyteX5aRstYU/edit?pref=2&amp;pli=1#slide=id.g1e072dff_3_57" target="_blank" rel="external">Git版本控制</a></li>
<li><a href="http://gogojimmy.net/2012/02/29/git-scenario/" target="_blank" rel="external">Git情景剧</a></li>
<li><a href="https://git-scm.com/book/zh/v1/Git-分支-远程分支" target="_blank" rel="external">Git 分支 - 远程分支</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql for Mac 安装和基本操作]]></title>
      <url>http://jianwl.com/2016/06/09/Mysql-for-Mac-%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h3><p><a href="http://pan.baidu.com/s/1kVNb7bp" target="_blank" rel="external">mysql for mac 百度云下载链接</a></p>
<h3 id="mysql启动"><a href="#mysql启动" class="headerlink" title="mysql启动"></a>mysql启动</h3><p><img src="/images/mysql启动.png" alt="image"></p>
<h3 id="mysql关闭"><a href="#mysql关闭" class="headerlink" title="mysql关闭"></a>mysql关闭</h3><p><img src="/images/mysql关闭.png" alt="image"></p>
<h3 id="修改初始密码"><a href="#修改初始密码" class="headerlink" title="修改初始密码"></a>修改初始密码</h3><pre><code>／usr/local/mysql/bin/mysqladmin -u root password &quot;新密码&quot;
</code></pre><h3 id="卸载mysql"><a href="#卸载mysql" class="headerlink" title="卸载mysql"></a>卸载mysql</h3><pre><code>sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
vim /etc/hostconfig  (and removed the line MYSQLCOM=-YES-)
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
</code></pre><h3 id="将mysql-server的路径添加到PATH路径下"><a href="#将mysql-server的路径添加到PATH路径下" class="headerlink" title="将mysql.server的路径添加到PATH路径下"></a>将mysql.server的路径添加到PATH路径下</h3><pre><code>vi /etc/bashrc
# 在bashrc文件下增加以下内容
export PATH=/usr/local/mysql/support-files:$PATH
</code></pre><h3 id="保存只读文件bashrc"><a href="#保存只读文件bashrc" class="headerlink" title="保存只读文件bashrc"></a>保存只读文件bashrc</h3><p>向只读文件中添加内容，用wq保存出现以下错误</p>
<pre><code>E45: &apos;readonly&apos; option is set (add ! to override)
</code></pre><p>解决的方法：</p>
<pre><code>:w !sudo tee %

＃解释
:w – write
!sudo – call shell sudo command
tee – the output of write (:w) command is redirected using tee
% – current file name
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP之重定向和请求转发]]></title>
      <url>http://jianwl.com/2016/06/05/HTTP%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/</url>
      <content type="html"><![CDATA[<h6 id="重定向、请求转发是什么？举例说明"><a href="#重定向、请求转发是什么？举例说明" class="headerlink" title="重定向、请求转发是什么？举例说明"></a>重定向、请求转发是什么？举例说明</h6><p>假设你去办执照。</p>
<p><strong>重定向：</strong>你先去了A局，A局的人说：”这事不归我们管，去B局”，然后你就从A退了回来，自己乘车去了B局。</p>
<p><strong>请求转发：</strong>你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B局的人，让他们办好后，送过来。</p>
<p>重定向是客户端行为，其实是两次Request请求，第一次，客户端Request A，服务器响应，并Response回来，告诉浏览器，你应该去找B。这个时候可以看到浏览器地址变了。重定向可以访问自己Web应用以外的资源。在重定向的过程中，传输的信息会被丢失。</p>
<p>请求转发是服务器行为，服务器内部把一个Request的处理权，转发给同一个Web容器下的其他URL。(注意，不能转发到其他的Web容器的资源)对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B、C、D，传输的信息不会丢失。</p>
<h6 id="Servlet中调用请求转发和重定向"><a href="#Servlet中调用请求转发和重定向" class="headerlink" title="Servlet中调用请求转发和重定向"></a>Servlet中调用请求转发和重定向</h6><ul>
<li>请求转发到welcome.jsp页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getRequestDispatcher(&quot;welcome.jsp&quot;).forward(request,response);</div></pre></td></tr></table></figure>
<ul>
<li>重定向到success.jsp页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.sendRedirect(&quot;success.jsp&quot;);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Simplest SpringMVC教程]]></title>
      <url>http://jianwl.com/2016/06/05/Simplest-SpringMVC%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h6 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h6><p>Spring MVC框架已经近1年没有接触了，以前的基础也忘的差不多了。既然如此，那就忘去过去所学Spring MVC的知识，一切重新学起。创建第一个Spring MVC项目，网上有很多教程，但感觉都过于复杂，也不够简单明了。</p>
<h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><p>IntelliJ IDEA – (IDE)<br>Maven – (项目Jar包管理构建工具 3.2.x版本)<br>Tomcat – (Web容器 7.x版本)</p>
<h6 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h6><p>1、创建Maven项目<br><img src="/images/创建maven项目.png" alt=""><br><img src="/images/创建maven项目02.png" alt=""><br><img src="/images/创建maven项目03.png" alt=""><br><img src="/images/maven配置.png" alt=""><br><img src="/images/创建maven项目04.png" alt=""><br>2、配置pom.xml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">  &lt;groupId&gt;com.youzu&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;springmvc&lt;/artifactId&gt;</div><div class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class="line">  &lt;name&gt;mvc-demo Maven Webapp&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">  &lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;1.2&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;commons-logging&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;1.1.3&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div><div class="line"></div><div class="line">  &lt;build&gt;</div><div class="line">      &lt;plugins&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">          &lt;configuration&gt;</div><div class="line">            &lt;source&gt;1.7&lt;/source&gt;</div><div class="line">            &lt;target&gt;1.7&lt;/target&gt;</div><div class="line">          &lt;/configuration&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">      &lt;/plugins&gt;</div><div class="line">  &lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>3、新建Spring配置文件<code>/webapp/WEB-INF/springmvc-servlet.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;</div><div class="line">        http://www.springframework.org/schema/beans     </div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/mvc </div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</div><div class="line">        http://www.springframework.org/schema/context </div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</div><div class="line"> </div><div class="line">	&lt;context:component-scan base-package=&quot;com.youzu.controller&quot; /&gt;</div><div class="line"> </div><div class="line">	&lt;bean id=&quot;viewResolver&quot;</div><div class="line">		class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt;</div><div class="line">		&lt;property name=&quot;viewClass&quot;</div><div class="line">			value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;</div><div class="line">		&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</div><div class="line">		&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>在springmvc-servlet.xml配置文件中，我们定义了<code>&lt;context:component-scan&gt;</code>,这个配置允许spring扫描<code>com.youzu.controller</code>这个目录和其子目录下的所有注解,将注解类注册为Bean。同时定义了视图解析类viewResolver，这个类将会解析视图名(增加前缀<code>/WEB-INF/jsp/</code>和后缀<code>.jsp</code>)。<br>4、配置web.xml文件：webapp/WEB-INF/web.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; version=&quot;3.0&quot;&gt;</div><div class="line">    &lt;display-name&gt;spring mvc&lt;/display-name&gt;</div><div class="line">    &lt;welcome-file-list&gt;</div><div class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">    &lt;/welcome-file-list&gt;</div><div class="line"></div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;</div><div class="line">            org.springframework.web.servlet.DispatcherServlet</div><div class="line">        &lt;/servlet-class&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>特别注意在web.xml中定义了servlet-name,当DispatcherServlet初始化时，它将自动加载WEB-INF文件夹下文件名为[servlet-name]-servlet.xml的文件。即：本例中步骤3定义的springmvc-servlet.xml文件<br>5、创建StudentAction.class文件<code>com.youzu.controller.StudentAction.class</code></p>
<ul>
<li>在main文件夹下，新建一个名为“java”的文件夹<br><img src="/images/创建java文件夹.png" alt=""></li>
<li>将java文件夹设为源文件目录<br><img src="/images/java设为源文件夹.png" alt=""></li>
<li>在java文件夹下创建com.youzu.controller文件夹<br><img src="/images/创建文件夹.png" alt=""></li>
<li>创建类StudentAction.class</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.youzu.controller;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line">/**</div><div class="line"> * User: jianwl</div><div class="line"> * Date: 2016/6/5</div><div class="line"> * Time: 16:29</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">public class StudentAction &#123;</div><div class="line">    @RequestMapping(&quot;/info&quot;)</div><div class="line">    public ModelAndView info()&#123;</div><div class="line">        String stuInfo = &quot;my name is zhangsan,i am 13 years old,i am come from china&quot;;</div><div class="line">        return new ModelAndView(&quot;info&quot;,&quot;stuInfo&quot;,stuInfo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Controller的作用是，当spring扫描文件夹时，会将StudentAction视为Controller Bean类。<br>@RequestMapping的作用是，告知spring，当请求访问的URL地址以/info开头时，该控制器将会执行该请求。<br>6、创建info.jsp文件<code>/webapp/WEB-INF/jsp/info.jsp</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Spring MVC 教程&lt;/title&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">        body &#123;</div><div class="line">            background-image: url(&apos;http://crunchify.com/bg.png&apos;);</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">$&#123;stuInfo&#125;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>7、maven打包<br><img src="/images/maven打包.png" alt=""><br>8、配置Tomcat</p>
<ul>
<li>编辑配置<br><img src="/images/配置tomcat01.png" alt=""></li>
<li>新增本地Tomcat配置<br><img src="/images/配置tomcat02.png" alt=""></li>
<li>Tomcat配置详情<br><img src="/images/配置tomcat03.png" alt=""></li>
<li>在Tomcat中添加需要发布的war包<br><img src="/images/配置tomcat04.png" alt=""></li>
<li>运行Tomcat<br><img src="/images/启动tomcat.png" alt=""></li>
</ul>
<p>9、浏览器成功访问/info地址：<code>localhost:8080/info</code><br><img src="/images/springmvc成功访问.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客的云端备份和迁移]]></title>
      <url>http://jianwl.com/2016/06/04/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BA%91%E7%AB%AF%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<h6 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h6><p>使用Hexo写博客，在一台电脑上写博客，更新博客倒没什么问题，可是如果你要换一台电脑然后更新博客发现就比较麻烦了。网上类似的源码迁移也有提到，不过我个人感觉操作过于复杂，我自己用了一个比较简单的方法，用Oschina的代码托管做了一个Hexo的源码的备份。下次你要在其他的电脑上写博客也很简单。利用Git实现同步源码，当然这其中需要相关的Git和Hexo环境配置。</p>
<h6 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h6><p>1、Oschina注册账号，建立私有代码库。为何选用Oschina而不是Github做代码托管呢，因为Github上建立私有库不是免费的，而Oschina没有限制。(备忘：Oschina git上注册的邮箱：jianwl999@gmail.com)<br>2、在你的电脑上创建一个文件夹，随意命名。然后git init初始化git环境，创建仓库。git clone你的Oschina上的分支，特别注意：在Oschina创建私有库的时候，最少要添加一个README文件，否则空的仓库同步过程会有问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git clone git@git.oschina.net:shuangziliuyun/Hexo.git</div><div class="line">touch README.md</div><div class="line">git add -A</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">git pull origin master</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<p>3、将你的Hexo源码拷贝到该文件夹下，public不用拷贝，这个是由Hexo编译自动生成的。并在Git bash客户端中执行以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git status   //查看本地代码库和云端代码库的差异</div><div class="line">git add -A //添加修改的文件到本地分支，跟踪修改</div><div class="line">git commit -m &quot;commit hexo source to oschina&quot; //提交跟踪修改的文件到本地仓库分支</div><div class="line">git pull origin master //从云端代码库拉取最新的分支代码</div><div class="line">git push origin master //提交本地仓库的代码到云端仓库</div></pre></td></tr></table></figure></p>
<p>4、提交代码成功后表示你备份已经完成了，现在假设你在另外一个电脑上要编辑hexo博客并部署到github上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1、在本机上创建一个文件夹</div><div class="line">2、git init</div><div class="line">3、git clone git@git.oschina.net:shuangziliuyun/Hexo.git</div><div class="line">4、安装Node.js，[下载链接](http://pan.baidu.com/s/1pK9fHR9)</div><div class="line">5、在Hexo文件下，执行npm install hexo</div><div class="line">6、npm install</div><div class="line">7、npm install hexo-deployer-git (注意，不需要hexo init这条指令)</div></pre></td></tr></table></figure></p>
<p>5、至此完成了Hexo博客的迁移，可以在另一台电脑上的Hexo目录下，对博客进行更新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;新文章&quot;</div><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<h6 id="遇见的坑"><a href="#遇见的坑" class="headerlink" title="遇见的坑"></a>遇见的坑</h6><p>在执行 hexo deploy发布指令时，总是报以下的错误。将发布项目的地址改为ssh的地址之后，仍旧报错。最后发现是Node.js版本不一致造成的。原先那台电脑上安装的node.js版本，和要迁移到的这电脑上的node.js版本不一致，最后同步以下版本，解决了这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</div><div class="line">at ChildProcess.&lt;anonymous&gt; (D:\software\Git\Hexo\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:42:17)</div><div class="line">    at ChildProcess.emit (events.js:110:17)</div><div class="line">    at maybeClose (child_process.js:1015:16)</div><div class="line">    at Socket.&lt;anonymous&gt; (child_process.js:1183:11)</div><div class="line">    at Socket.emit (events.js:107:17)</div><div class="line">    at Pipe.close (net.js:485:12)</div></pre></td></tr></table></figure></p>
<p>参考资料：<br>1、<a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">使用hexo，如果换了电脑怎么更新博客？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PlayFramework调试]]></title>
      <url>http://jianwl.com/2016/05/31/PlayFramework%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>在Intellij Idea的IDE下，调试PlayFramework的步骤:</p>
<ul>
<li><p>启动play debug模式，监听端口9999<br><img src="/images/play调试.jpg" alt=""></p>
</li>
<li><p>Intellij Idea新建Remote监听<br><img src="/images/idea创建监听端口.jpg" alt=""></p>
</li>
<li><p>Intellij Idea创建远程Socket监听<br><img src="/images/Idea创建监听socket连接端口.png" alt=""></p>
</li>
<li><p>运行play<br><img src="/images/运行play.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[翻墙教程之VPS搭建Shadowsocks代理]]></title>
      <url>http://jianwl.com/2016/05/20/%E7%BF%BB%E5%A2%99%E6%95%99%E7%A8%8B%E4%B9%8BVPS%E6%90%AD%E5%BB%BAShadowsocks%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>做为一个开发人员，具备翻墙的能力，是最基本的；最近打算在VPS上搭建一个shadowsocks代理来实现翻墙，将操作步骤记录下来，备忘。</p>
<h6 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买VPS</h6><p>到vultr的<a href="https://www.vultr.com/freetrial/" target="_blank" rel="external">官网</a>注册账户，目前注册的新用户给你$50,用2个月，超给力的。需要注意的是，你得有支持外币支付的信用卡，并且这个优惠活动不支持paypal，反正我用民生银行的VISA信用卡是没有注册成功，最后采用了paypal的方式支付的。</p>
<h6 id="vps部署"><a href="#vps部署" class="headerlink" title="vps部署"></a>vps部署</h6><p>选择日本或者美国西海岸的服务器，速度相对比较快，我选的是日本的。操作系统是CentOS 6 x64,选择的硬件是$5/month的；以下截图是购买成功之后的VPS服务器实例;<br><img src="/images/vultr服务器.png" alt=""></p>
<h6 id="下载并安装Xshell5"><a href="#下载并安装Xshell5" class="headerlink" title="下载并安装Xshell5"></a>下载并安装Xshell5</h6><p><a href="http://pan.baidu.com/s/1eRRETaU" target="_blank" rel="external">Xshell5百度云下载链接</a></p>
<h6 id="Xshell5连接vps"><a href="#Xshell5连接vps" class="headerlink" title="Xshell5连接vps"></a>Xshell5连接vps</h6><p><img src="/images/vultr服务器详情.png" alt="vps的详情"><br>打开Xshell5,新建会话，输入IP地址,点击确定<br><img src="/images/xshell连接vps.png" alt=""><br>输入用户名<br><img src="/images/vultr输入用户名.png" alt=""><br>输入密码<br><img src="/images/vultr输入密码.png" alt=""><br>xshell5成功登陆vps服务器<br><img src="/images/xshell成功登陆vps.png" alt=""></p>
<h6 id="部署shadowsocks"><a href="#部署shadowsocks" class="headerlink" title="部署shadowsocks"></a>部署shadowsocks</h6><p>1、用Shadowsocks Python版一键安装脚本,<a href="https://teddysun.com/342.html" target="_blank" rel="external">原文链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</div><div class="line">chmod +x shadowsocks.sh</div><div class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</div></pre></td></tr></table></figure></p>
<p>执行后需要输入密码(shadowsocks的密码)<br><img src="/images/ss01.png" alt=""><br>2、输入shadowsocks的端口,我喜欢用8388<br><img src="/images/ss输入端口.png" alt=""><br>3、看到这句时，按任意键(比如回车)<br><img src="/images/ss成功.png" alt=""><br>4、等待安装结束，出现下图就表示安装成功了.<br><img src="/images/ss安装成功.png" alt=""></p>
<h6 id="开启TFO-TCP-Fast-Open"><a href="#开启TFO-TCP-Fast-Open" class="headerlink" title="开启TFO(TCP Fast Open)"></a>开启TFO(TCP Fast Open)</h6><p>编辑rc.local<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local</div></pre></td></tr></table></figure></p>
<p>在rc.local最后一行添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen</div></pre></td></tr></table></figure></p>
<p>编辑sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysctl.conf</div></pre></td></tr></table></figure></p>
<p>在sysctl.conf中输入并保存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.tcp_fastopen = 3</div></pre></td></tr></table></figure></p>
<p>打开ss配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure></p>
<p>修改fast_open的值为true并保存。<br>重启shadowsocks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/shadowsocks restart</div></pre></td></tr></table></figure></p>
<h6 id="windows端运行shadowsocks客户端"><a href="#windows端运行shadowsocks客户端" class="headerlink" title="windows端运行shadowsocks客户端"></a>windows端运行shadowsocks客户端</h6><p><a href="http://pan.baidu.com/s/1hrFz8uo" target="_blank" rel="external">shadowsocks客户端百度云下载链接</a><br>解压后运行shadowsocks.exe,并配置shadowsocks<br><img src="/images/ss客户端配置.png" alt=""></p>
<h6 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h6><p>使用代理，虽然可以访问国外的网站，但网速会比较慢。理想的情况下，我们想要在访问国外网站的时候使用代理，访问国内的网站的时候不使用代理,保证效率最大化。</p>
<p>我们使用SwitchyOmega来消除shadowsocks全局代理的副作用，<a href="http://pan.baidu.com/s/1mhX8r7i" target="_blank" rel="external">SwitchyOmega</a>是Chrome下非常好用的代理管理插件(.crx是插件,.bak是备份文件);</p>
<h6 id="安装SwitchyOmega"><a href="#安装SwitchyOmega" class="headerlink" title="安装SwitchyOmega"></a>安装SwitchyOmega</h6><p>将SwitchyOmega.crx插件直接拖到扩展程序中，即可实现安装<br><img src="/images/安装SwitchyOmega.png" alt=""></p>
<h6 id="配置SwitchyOmega"><a href="#配置SwitchyOmega" class="headerlink" title="配置SwitchyOmega"></a>配置SwitchyOmega</h6><p><img src="/images/配置SwitchyOmega01.png" alt=""><br><img src="/images/配置SwitchyOmega02.png" alt=""><br><img src="/images/配置SwitchyOmega03.png" alt=""><br><img src="/images/配置SwitchyOmega04.png" alt=""><br><img src="/images/配置SwitchyOmega05.png" alt=""><br>至此，把Shadowsocks客户端的模式改为了自动模式，<strong>通过Chrome访问的网址都会经过代理服务器;通过其他浏览器如：FireFox访问的网址则不经过代理服务器</strong>;说明了局部代理成功。</p>
<h6 id="Shadowsocks原理"><a href="#Shadowsocks原理" class="headerlink" title="Shadowsocks原理"></a>Shadowsocks原理</h6><p>简单理解的话，Shadowsocks是将以前通过SSH创建的Socks5协议拆分成Server端和Client端，下面这个原理图能简单介绍其翻墙原理，基本上和利用SSH tunnel大致类似：<br><img src="/images/shadowsocks原理.jpg" alt=""><br>PC客户端发出请求基于Socks5协议跟SS-Local端进行通讯，由于这个SS-Local一般是本机或路由器等局域网的其他机器，不经过GFW,所以解决GFW通过特征分析进行干扰的问题。</p>
<p>SS-Local和SS-Server两端通过多种可选的加密方法进行通讯，经过GFW的时候因为是常规的TCP包，没有明显特征码GFW也无法对通讯进行解密，因此通讯放行。</p>
<p>SS-Server将收到的加密数据进行解密，还原初始请求，在发送用户需要访问的服务网站，响应原路返回SS-04,返回途中依然使用了加密，使得流量是普通的TCP包，并成功穿过GFW防火墙。</p>
<p>因此，Shadowsocks的优点在于它解决了GFW通过分析流量特征从而干扰的问题，这是它优于SSH和VPN的地方。</p>
<p>参考资料：<br>1、<a href="http://mpc2008cn.github.io/2015/10/22/vps/" target="_blank" rel="external">Vultr的vps搭建shadowsocks翻墙</a><br>2、<a href="https://teddysun.com/342.html" target="_blank" rel="external">Shadowsocks Python版一键安装脚本</a><br>3、<a href="http://www.shadowsocks.co.uk/shadowsocks-tcp-fast-open/" target="_blank" rel="external">Shadowsocks设置:ShadowSocks 服务器开启TCP Fast Open</a><br>4、<a href="http://shadowsocks.blogspot.tw/" target="_blank" rel="external">shadowsocks搭建教程</a><br>5、<a href="http://www.jianshu.com/p/37ef0b9ecc08" target="_blank" rel="external">shadowsocks配合SwitchyOmega科学上网</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP报文详解]]></title>
      <url>http://jianwl.com/2016/05/17/HTTP%E6%8A%A5%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h6 id="Http协议通用首部字段："><a href="#Http协议通用首部字段：" class="headerlink" title="Http协议通用首部字段："></a>Http协议通用首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cache-Control  控制缓存行为</div><div class="line">Connection 控制不再转发给代理的首部字段、管理持久连接</div><div class="line">Date 创建报文的日期时间</div><div class="line">Pragma 报文指令</div><div class="line">Trailer 报文末端的首部一览</div><div class="line">Transfer-Encoding 指定报文主体的传输编码方式</div><div class="line">Upgrade 升级为其他协议</div><div class="line">Via 代理服务器相关信息</div><div class="line">Warning 错误通知</div></pre></td></tr></table></figure>
<h6 id="Http请求首部字段："><a href="#Http请求首部字段：" class="headerlink" title="Http请求首部字段："></a>Http请求首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Accept 用户代理可处理的媒体类型</div><div class="line">Accept-Charset 优先的字符集</div><div class="line">Accept-Encoding 优先的内容编码</div><div class="line">Accept-Language 优先的语言</div><div class="line">Authrization Web认证信息</div><div class="line">Expect 期待服务器的特定行为</div><div class="line">From 用户的电子邮箱地址</div><div class="line">Host 请求资源所在服务器</div><div class="line">If-Match 比较实体标记(Etag)</div><div class="line">If-Modified-Since 比较资源的更新时间</div><div class="line">if-None-Match 比较实体标记(与If-Match相反)</div><div class="line">If-Range 资源未更新时发送实体Byte的范围请求</div><div class="line">If-Unmodified-Since 比较资源的更新时间</div><div class="line">Max-forwards 最大传输逐跳数</div><div class="line">Proxy-Authorization 代理服务器要求客户端的认证信息</div><div class="line">Range 实体的字节范围请求</div><div class="line">Referer 对请求中的URI的原始获取方</div><div class="line">TE 传输编码的优先级</div><div class="line">User-Agent HTTP客户端程序的信息</div><div class="line">Cookie 服务器接收到的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="Http响应首部字段："><a href="#Http响应首部字段：" class="headerlink" title="Http响应首部字段："></a>Http响应首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Accept-Ranges 是否接受字节范围</div><div class="line">Age 推算资源创建经过时间</div><div class="line">Etag 资源匹配信息</div><div class="line">Location 令客户端重定向至指定URI</div><div class="line">Proxy-Authenticate 代理服务器对客户端的认证信息</div><div class="line">Retry-After 对再次发起请求的时机要求</div><div class="line">Server HTTP服务器的安装信息</div><div class="line">Vary 代理服务器缓存的管理信息</div><div class="line">WWW-Authenticate 服务器对客户端的认证信息</div><div class="line">Set-Cookie 开始状态管理所使用的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="实体首部字段："><a href="#实体首部字段：" class="headerlink" title="实体首部字段："></a>实体首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Allow 资源可支持的HTTP方法</div><div class="line">Content-Encoding 实体主体适用的编码方式</div><div class="line">Content-Length 实体主体的自然语言</div><div class="line">Content-Location 替代对应资源的URI</div><div class="line">Content-MD5 实体主体的报文摘要</div><div class="line">Content-Range 实体主体的位置范围</div><div class="line">Content-Type 实体主体的媒体类型</div><div class="line">Expires 实体主体的过期时间</div><div class="line">Last-Modified 资源的最后修改时间</div></pre></td></tr></table></figure>
<h6 id="为Cookie服务的首部字段"><a href="#为Cookie服务的首部字段" class="headerlink" title="为Cookie服务的首部字段"></a>为Cookie服务的首部字段</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set-Cookie</div><div class="line">Cookie</div></pre></td></tr></table></figure>
<h6 id="请求和响应报文的组成"><a href="#请求和响应报文的组成" class="headerlink" title="请求和响应报文的组成"></a>请求和响应报文的组成</h6><p>请求报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">请求报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：请求行+ 请求首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
<p>响应报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">响应报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：状态行+ 响应首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP请求报文详解]]></title>
      <url>http://jianwl.com/2016/05/17/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h6 id="Http协议通用首部字段："><a href="#Http协议通用首部字段：" class="headerlink" title="Http协议通用首部字段："></a>Http协议通用首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cache-Control  控制缓存行为</div><div class="line">Connection 控制不再转发给代理的首部字段、管理持久连接</div><div class="line">Date 创建报文的日期时间</div><div class="line">Pragma 报文指令</div><div class="line">Trailer 报文末端的首部一览</div><div class="line">Transfer-Encoding 指定报文主体的传输编码方式</div><div class="line">Upgrade 升级为其他协议</div><div class="line">Via 代理服务器相关信息</div><div class="line">Warning 错误通知</div></pre></td></tr></table></figure>
<h6 id="Http请求首部字段："><a href="#Http请求首部字段：" class="headerlink" title="Http请求首部字段："></a>Http请求首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Accept 用户代理可处理的媒体类型</div><div class="line">Accept-Charset 优先的字符集</div><div class="line">Accept-Encoding 优先的内容编码</div><div class="line">Accept-Language 优先的语言</div><div class="line">Authrization Web认证信息</div><div class="line">Expect 期待服务器的特定行为</div><div class="line">From 用户的电子邮箱地址</div><div class="line">Host 请求资源所在服务器</div><div class="line">If-Match 比较实体标记(Etag)</div><div class="line">If-Modified-Since 比较资源的更新时间</div><div class="line">if-None-Match 比较实体标记(与If-Match相反)</div><div class="line">If-Range 资源未更新时发送实体Byte的范围请求</div><div class="line">If-Unmodified-Since 比较资源的更新时间</div><div class="line">Max-forwards 最大传输逐跳数</div><div class="line">Proxy-Authorization 代理服务器要求客户端的认证信息</div><div class="line">Range 实体的字节范围请求</div><div class="line">Referer 对请求中的URI的原始获取方</div><div class="line">TE 传输编码的优先级</div><div class="line">User-Agent HTTP客户端程序的信息</div><div class="line">Cookie 服务器接收到的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="Http响应首部字段："><a href="#Http响应首部字段：" class="headerlink" title="Http响应首部字段："></a>Http响应首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Accept-Ranges 是否接受字节范围</div><div class="line">Age 推算资源创建经过时间</div><div class="line">Etag 资源匹配信息</div><div class="line">Location 令客户端重定向至指定URI</div><div class="line">Proxy-Authenticate 代理服务器对客户端的认证信息</div><div class="line">Retry-After 对再次发起请求的时机要求</div><div class="line">Server HTTP服务器的安装信息</div><div class="line">Vary 代理服务器缓存的管理信息</div><div class="line">WWW-Authenticate 服务器对客户端的认证信息</div><div class="line">Set-Cookie 开始状态管理所使用的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="实体首部字段："><a href="#实体首部字段：" class="headerlink" title="实体首部字段："></a>实体首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Allow 资源可支持的HTTP方法</div><div class="line">Content-Encoding 实体主体适用的编码方式</div><div class="line">Content-Length 实体主体的自然语言</div><div class="line">Content-Location 替代对应资源的URI</div><div class="line">Content-MD5 实体主体的报文摘要</div><div class="line">Content-Range 实体主体的位置范围</div><div class="line">Content-Type 实体主体的媒体类型</div><div class="line">Expires 实体主体的过期时间</div><div class="line">Last-Modified 资源的最后修改时间</div></pre></td></tr></table></figure>
<h6 id="为Cookie服务的首部字段"><a href="#为Cookie服务的首部字段" class="headerlink" title="为Cookie服务的首部字段"></a>为Cookie服务的首部字段</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set-Cookie</div><div class="line">Cookie</div></pre></td></tr></table></figure>
<h6 id="请求和响应报文的组成"><a href="#请求和响应报文的组成" class="headerlink" title="请求和响应报文的组成"></a>请求和响应报文的组成</h6><p>请求报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">请求报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：请求行+ 请求首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
<p>响应报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">响应报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：状态行+ 响应首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL存储引擎优化]]></title>
      <url>http://jianwl.com/2016/05/17/MYSQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h5 id="MySQL常用的搜索引擎"><a href="#MySQL常用的搜索引擎" class="headerlink" title="MySQL常用的搜索引擎"></a>MySQL常用的搜索引擎</h5><ul>
<li>MyISAM</li>
<li>InnoDB</li>
</ul>
<h6 id="MyISAM特性"><a href="#MyISAM特性" class="headerlink" title="MyISAM特性"></a>MyISAM特性</h6><p>MyISAM存储引擎不支持事务，支持全文检索,其锁定机制是表级索引，虽然可以让锁定的实现成本变得很小，但同时也大大降低了其并发性能。</p>
<p>不仅会在写入的时候阻塞读取，MyISAM还会在读取的时候阻塞写入，但读本身并不会阻塞另外的读。MyISAM可以通过key_buffer缓存以大大提高访问性能减少磁盘IO，但是这个缓存区只会缓存索引，而不会缓存数据。</p>
<h6 id="MyISAM适用场景"><a href="#MyISAM适用场景" class="headerlink" title="MyISAM适用场景"></a>MyISAM适用场景</h6><p>MyISAM适用于不需要事务支持，并发性相对较低，数据修改相对较少的场景，一般这类的系统会以读为主，对数据一致性要求不是很高</p>
<h6 id="InnoDB特性"><a href="#InnoDB特性" class="headerlink" title="InnoDB特性"></a>InnoDB特性</h6><p>InnoDB完全支持4个事务隔离级别，但不支持全文检索,通过索引实现了行级锁定，但全表扫描仍然会表锁，使用的时候注意间隙锁的影响。并且读写阻塞与事务隔离级别相关，具有非常高效的缓存特性，能够缓存索引，也能缓存数据。整个表和主键以CLUSTER方式存储；</p>
<h6 id="InnoDB适用场景"><a href="#InnoDB适用场景" class="headerlink" title="InnoDB适用场景"></a>InnoDB适用场景</h6><p>InnoDB具有较好的事务特性，也就是事务支持，其行级锁定机制对高并发有很好的适应能力，但需要确保查询是通过索引来完成。能够很好地适应于数据更新较为频繁的场景，但是对数据一致性要求较高，如果硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，尽可能减少磁盘IO。</p>
<h5 id="4个事务隔离级别"><a href="#4个事务隔离级别" class="headerlink" title="4个事务隔离级别"></a>4个事务隔离级别</h5><ol>
<li>未授权读取（Read Uncommitted）: 读未提交数据，这是事务最低的隔离级别，在并发的事务中，它允许一个事务可以读到另一个事务未提交的更新数据。（会出现脏读，不可重复读和幻读）</li>
<li>授权读取(Read Committed)：读已提交数据，保证并发的事务中，一个事务修改的数据提交后才能被另外一个事务读取到。（会出现不可重复读和幻读）</li>
<li>可重复读取(Repeatable Read):可重复读，这种事务隔离级别可以防止脏读，不可重复读，但是可能出现幻读。一般是使用“快照”的方式来实现。</li>
<li>序列化(Serializable):事务被处理为顺序执行，这是花费最高的，但也是最可靠的事务隔离级别，能够有效避免脏读、不可重复读、幻读。</li>
</ol>
<h5 id="脏读、不可重复读、幻读的概念"><a href="#脏读、不可重复读、幻读的概念" class="headerlink" title="脏读、不可重复读、幻读的概念"></a>脏读、不可重复读、幻读的概念</h5><h6 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h6><p>一个事务读取到另一事务未提交的更新新据。当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有<br>提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另<br>外一个事务读到的这个数据是脏数据，依据脏数据所做的操作也可能是不正确的</p>
<h6 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h6><p>在同一事务中，多次读取同一数据返回的结果有所不同。换句话说就是，后续读取可以读到另一事务已提交的<br>更新数据。相反，“可重复读”在同一事务中多次读取数据时，能够保证所读数据一样，也就是，后续读取不能读到另一事务<br>已提交的更新数据。</p>
<h6 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h6><p>事务T1执行一次查询，然后事务T2新插入一行记录，这行记录恰好可以满足T1所使用的查询的条件。然后T1又使用相同<br>的查询再次对表进行检索，但是此时却看到了事务T2刚才插入的新行。这个新行就称为“幻像”，因为对T1来说这一行就像突然<br>出现的一样。</p>
<h5 id="数据库事务的4个特性"><a href="#数据库事务的4个特性" class="headerlink" title="数据库事务的4个特性"></a>数据库事务的4个特性</h5><h6 id="原子性-Atomic"><a href="#原子性-Atomic" class="headerlink" title="原子性(Atomic)"></a>原子性(Atomic)</h6><p>组成一个事务的多个数据库操作是一个不可分割的原子单元；只有所有操作执行成功，整个事务才提交，其中一个操作失败，都必须回滚到初始状态。</p>
<h6 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性(Consistency)"></a>一致性(Consistency)</h6><p>事务操作成功后数据库所处的状态和它的业务规则是一致的；（即数据总额不会被破坏。如A账户转账100到B账户，无论操作成功与否，A和B的存款总额是不变的）</p>
<h6 id="隔离性（Isolation"><a href="#隔离性（Isolation" class="headerlink" title="隔离性（Isolation)"></a>隔离性（Isolation)</h6><p>在并发数据操作时，不同的事务拥有各自的数据空间，它们的操作不会对彼此产生干扰。（并非是完全无干扰，<br>根据数据库的隔离级别，会产生不同程度的干扰）</p>
<h6 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h6><p>一旦事务提交成功，事务中的数据操作都必须持久化到数据库中；就算数据库崩溃，也必须保证有某种机制恢复。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL存储引擎]]></title>
      <url>http://jianwl.com/2016/05/17/MYSQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<p>MySQL支持很多存储引擎，常用的有InnoDB、MyISAM存储引擎。</p>
<h3 id="InnoDB概述"><a href="#InnoDB概述" class="headerlink" title="InnoDB概述"></a>InnoDB概述</h3><p><strong>事务</strong><br>InnoDB是MySQL默认事务型引擎，采用MVCC来支持高并发，并且实现了四个标准的隔离级别，其默认级别是REPAEATABLE READ(可重复读)，并且通过间隙锁(next-key locking)策略防止幻读的出现，间隙锁使得InnoDB不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定，以防止幻影行的插入。</p>
<p><strong>索引</strong><br>InnoDB表是基于聚簇索引建立的，与MySQL其他存储引擎有很大的不同，聚簇索引对主键查询有很高的性能，不过他的二级索引(secondary index,非主键索引)中必须包含主键列，所以主键列很大的话，其他的所有索引都会很大。</p>
<p><strong>其他</strong></p>
<ul>
<li>从磁盘读取数据时，采用的可预测预读，能够自动在内存中创建hash索引以加速读操作的自适应哈希索引。</li>
<li>支持热备份，MySQL其他存储引擎不支持。</li>
</ul>
<h3 id="InnoDB适用场景"><a href="#InnoDB适用场景" class="headerlink" title="InnoDB适用场景"></a>InnoDB适用场景</h3><p>InnoDB具有较好的事务支持，其行级锁定机制对高并发有很好的适应能力，但需要确保查询是通过索引来完成。能够很好地适应于数据更新较为频繁的场景，但是对数据一致性要求较高，如果硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，尽可能减少磁盘IO。</p>
<h3 id="MyISAM概述"><a href="#MyISAM概述" class="headerlink" title="MyISAM概述"></a>MyISAM概述</h3><p><strong>特性</strong><br>MyISAM提供了大量的特性包括全文索引、压缩、空间函数(GIS)等，但是….MyISAM不支持事务和行级锁，还有一个毫无疑问的缺陷就是崩溃后无法恢复。</p>
<h3 id="MyISAM适用场景"><a href="#MyISAM适用场景" class="headerlink" title="MyISAM适用场景"></a>MyISAM适用场景</h3><p>MyISAM适用于不需要事务支持，并发性相对较低，数据修改相对较少的场景，一般这类的系统会以读为主，对数据一致性要求不是很高</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PlayFramework入门介绍]]></title>
      <url>http://jianwl.com/2016/05/16/PlayFramework%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h6 id="什么是PlayFramework"><a href="#什么是PlayFramework" class="headerlink" title="什么是PlayFramework?"></a>什么是PlayFramework?</h6><p>Play Framework 是一个轻量级，无状态，网络友好的框架，使用Java和Scala来写的开源Web应用程序框架，采用了MVC(Model View  Controller)的体系结构，它意在通过使用协议由于配置，以及在浏览器显示错误来提高开发者的工作效率。</p>
<h6 id="PlayFramework和传统的SpringMVC框架相比优势在哪？"><a href="#PlayFramework和传统的SpringMVC框架相比优势在哪？" class="headerlink" title="PlayFramework和传统的SpringMVC框架相比优势在哪？"></a>PlayFramework和传统的SpringMVC框架相比优势在哪？</h6><ul>
<li>实现了热加载，就是无需重启JVM就可以加载修改过的类，更新运行时的class行为;</li>
<li>内嵌Jetty容器</li>
<li>采用MVC结构</li>
<li>强调协议优于配置的设计,通过Http路由得到具体的接口，不需要通过XML来配置Action接口；</li>
<li>优秀的错误报告功能，当错误出现时，Play Framework会在浏览器上将错误的代码位置，甚至模板给显示出来。</li>
</ul>
<h6 id="Java类的加载"><a href="#Java类的加载" class="headerlink" title="Java类的加载"></a>Java类的加载</h6><p>Java类是通过Java虚拟机加载的，某个类的class文件被classloader加载后，会生成对应的Class对象，之后就可以创建该类的实例了。默认的虚拟机行为只会在启动时加载类，如果后期有一个类需要更新的话，单纯替换编译的class文件，Java虚拟机是不会更新正在运行的class。</p>
<h6 id="如何实现热加载？"><a href="#如何实现热加载？" class="headerlink" title="如何实现热加载？"></a>如何实现热加载？</h6><ol>
<li>最直接的方式是修改虚拟机的源代码，改变classloader的加载行为，使虚拟机能监听class文件的更新，重新加载class文件，这样的行为破坏性极大，为后续的JVM升级埋下一个大坑。</li>
<li>实现自己的classLoader，并且创建对象的行为，指定为用自定义的classLoader加载class，playFramework就是这么干的。以下是其源码实现，从源码上看play会遍历所有发生改变的class然后重新加载，因为是放在用户请求的过程中，所以，我们的直观感觉就是刷新页面就热加载了一切，这就是play的hotswap.</li>
</ol>
<h6 id="热加载具体源码"><a href="#热加载具体源码" class="headerlink" title="热加载具体源码"></a>热加载具体源码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Init the call (especially usefull in DEV mode to detect changes)</div><div class="line">public boolean init() &#123;</div><div class="line">    Thread.currentThread().setContextClassLoader(Play.classloader);</div><div class="line">    Play.detectChanges();</div><div class="line">    if (!Play.started) &#123;</div><div class="line">        if (Play.mode == Mode.PROD) &#123;</div><div class="line">            throw new UnexpectedException(&quot;Application is not started&quot;);</div><div class="line">        &#125;</div><div class="line">        Play.start();</div><div class="line">    &#125;</div><div class="line">    InvocationContext.current.set(getInvocationContext());</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Play.detectChanges()方法实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Detect Java changes</div><div class="line">     */</div><div class="line">    public void detectChanges() &#123;</div><div class="line">        // Now check for file modification</div><div class="line">        List&lt;ApplicationClass&gt; modifieds = new ArrayList&lt;ApplicationClass&gt;();</div><div class="line">        for (ApplicationClass applicationClass : Play.classes.all()) &#123;</div><div class="line">            if (applicationClass.timestamp &lt; applicationClass.javaFile.lastModified()) &#123;</div><div class="line">                applicationClass.refresh();</div><div class="line">                modifieds.add(applicationClass);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Set&lt;ApplicationClass&gt; modifiedWithDependencies = new HashSet&lt;ApplicationClass&gt;();</div><div class="line">        modifiedWithDependencies.addAll(modifieds);</div><div class="line">        if (modifieds.size() &gt; 0) &#123;</div><div class="line">            modifiedWithDependencies.addAll(Play.pluginCollection.onClassesChange(modifieds));</div><div class="line">        &#125;</div><div class="line">        List&lt;ClassDefinition&gt; newDefinitions = new ArrayList&lt;ClassDefinition&gt;();</div><div class="line">        boolean dirtySig = false;</div><div class="line">        for (ApplicationClass applicationClass : modifiedWithDependencies) &#123;</div><div class="line">            if (applicationClass.compile() == null) &#123;</div><div class="line">                Play.classes.classes.remove(applicationClass.name);</div><div class="line">                currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">            &#125; else &#123;</div><div class="line">                int sigChecksum = applicationClass.sigChecksum;</div><div class="line">                applicationClass.enhance();</div><div class="line">                if (sigChecksum != applicationClass.sigChecksum) &#123;</div><div class="line">                    dirtySig = true;</div><div class="line">                &#125;</div><div class="line">                BytecodeCache.cacheBytecode(applicationClass.enhancedByteCode, applicationClass.name, applicationClass.javaSource);</div><div class="line">                newDefinitions.add(new ClassDefinition(applicationClass.javaClass, applicationClass.enhancedByteCode));</div><div class="line">                currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (newDefinitions.size() &gt; 0) &#123;</div><div class="line">            Cache.clear();</div><div class="line">            if (HotswapAgent.enabled) &#123;</div><div class="line">                try &#123;</div><div class="line">                    HotswapAgent.reload(newDefinitions.toArray(new          ClassDefinition[newDefinitions.size()]));</div><div class="line">                &#125; catch (Throwable e) &#123;</div><div class="line">                    throw new RuntimeException(&quot;Need reload&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                throw new RuntimeException(&quot;Need reload&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // Check signature (variable name &amp; annotations aware !)</div><div class="line">        if (dirtySig) &#123;</div><div class="line">            throw new RuntimeException(&quot;Signature change !&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Now check if there is new classes or removed classes</div><div class="line">        int hash = computePathHash();</div><div class="line">        if (hash != this.pathHash) &#123;</div><div class="line">            // Remove class for deleted files !!</div><div class="line">            for (ApplicationClass applicationClass : Play.classes.all()) &#123;</div><div class="line">                if (!applicationClass.javaFile.exists()) &#123;</div><div class="line">                    Play.classes.classes.remove(applicationClass.name);</div><div class="line">                    currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">                &#125;</div><div class="line">                if (applicationClass.name.contains(&quot;$&quot;)) &#123;</div><div class="line">                    Play.classes.classes.remove(applicationClass.name);</div><div class="line">                    currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">                    // Ok we have to remove all classes from the same file ...</div><div class="line">                    VirtualFile vf = applicationClass.javaFile;</div><div class="line">                    for (ApplicationClass ac : Play.classes.all()) &#123;</div><div class="line">                        if (ac.javaFile.equals(vf)) &#123;</div><div class="line">                            Play.classes.classes.remove(ac.name);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            throw new RuntimeException(&quot;Path has changed&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>参考文章：</p>
<ol>
<li><a href="http://itindex.net/detail/47223-playframework-%E6%BA%90%E7%A0%81" target="_blank" rel="external">playframework拦截器和热加载 源码浅析</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-hotdeploy/index.html?ca=drs-" target="_blank" rel="external">深入探索 Java 热部署</a></li>
<li><a href="http://www.adaplay.org/index.php/break-the-traditional-java-frameworks-play-framework/" target="_blank" rel="external">打破传统的JAVA框架－PLAY FRAMEWORK</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之装饰者模式]]></title>
      <url>http://jianwl.com/2016/05/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之观察者模式]]></title>
      <url>http://jianwl.com/2016/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h6 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h6><p>观察者模式(ObservePattern),用于实时监测某些Object的动态，只要Object一改变，那么他的所有观察者Observer都会被通知到，之后观察者会根据Object的改变进行下一步操作。</p>
<h6 id="问题的引出"><a href="#问题的引出" class="headerlink" title="问题的引出"></a>问题的引出</h6><p>要实现一个天气预报的功能，当天气的数据发生变化的时候，会实时的以三种形式来显示天气，当前天气情况、统计分析情况、天气预报。这里我们不管数据如何来，就假设我们已经能够获取到数据了，在程序中通过调用被观察的对象的notifyObserver()方法来通知所有观察者；</p>
<h6 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h6><ol>
<li>通过分析我们得出一个简单的结论，天气数据一旦更新，那么就要实时的改变显示，观察者模式可以很好的解决这种模型问题。</li>
<li>既然确定观察者模型，就要定位出谁是观察者、谁是被观察者、这里有个简单的原则、观察者和被观察者之间的关系是多对一的关系，也就是说被观察者只有一个就是我们的天气数据信息，观察者则是三种要显示不同的终端;</li>
<li>每个观察者都要动态的显示信息，所以我们应该</li>
<li>考虑到可扩展性、低耦合性、灵活性和对扩展开放、对修改关闭的原则和面向接口编程，我们下面具体类的设计</li>
<li>根据角色我们可以抽象三个接口：<br> a) 所有被观察者的接口 Subject<br> b) 所有观察者的接口 Observer<br> c) 显示信息的接口 DisplayElement</li>
<li>Subject拥有三个关于Observer的方法、注册、移除和通知Observer的方法(观察者肯定要和被观察者集合起来)</li>
<li>对于Observer肯定要有一个udpate方法，一旦监测要Subject有变动，就要更新信息，所以还要实现DisplayElement接口。</li>
</ol>
<h6 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h6><p>1、设计Subject接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface Subject &#123;</div><div class="line">    public void registerObserver(Observer observer);</div><div class="line">    public void removeObserver(Observer observer);</div><div class="line">    public void notifyObserver();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、设计Observer接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Observer &#123;</div><div class="line">    public void update(float temperature,float humidity,float pressure);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、设计DisplayElement接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface DisplayElement&#123;</div><div class="line"> 	public void display();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、Subject接口的被观察者  — WeatherDate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class WeatherDate implements Subject &#123;</div><div class="line">    private List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();</div><div class="line">    private float temperate;</div><div class="line">    private float humidity;</div><div class="line">    private float pressure;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void registerObserver(Observer observer) &#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void removeObserver(Observer observer) &#123;</div><div class="line">        int index = observers.indexOf(observer);</div><div class="line">        if(index &gt; 0)&#123;</div><div class="line">            observers.remove(observer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void notifyObserver() &#123;</div><div class="line">        for(int i=0; i &lt; observers.size(); i++)&#123;</div><div class="line">            Observer o = (Observer) observers.get(i);</div><div class="line">            o.update(temperate,humidity,pressure);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 模仿数据变动时，自动触发notifyObserver函数</div><div class="line">     */</div><div class="line">    public void measurementsChanged()&#123;</div><div class="line">        notifyObserver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 模仿数据变动、即当我们调用这个方法时就说明数据有变化，这样所有的观察者都会被通知；</div><div class="line">     */</div><div class="line">    public void setMeasurements(float temperate,float humidity,float pressure)&#123;</div><div class="line">        this.temperate = temperate;</div><div class="line">        this.humidity = humidity;</div><div class="line">        this.pressure = pressure;</div><div class="line">        measurementsChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、观察者Observer的具体实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class CurrentConditionDisplay implements DisplayElement,Observer &#123;</div><div class="line">    private float temperature;</div><div class="line">    private float humidity;</div><div class="line">    private float pressure;</div><div class="line">    private Subject weatherDate;</div><div class="line"></div><div class="line">    public CurrentConditionDisplay(Subject weatherDate)&#123;</div><div class="line">        this.weatherDate = weatherDate;</div><div class="line">        this.weatherDate.registerObserver(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println( CurrentConditionDisplay.class.getName() + &quot; temperature = &quot; + temperature + &quot;  humidity =   &quot; + humidity + &quot; pressure = &quot; + pressure);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void update(float temperature, float humidity, float pressure) &#123;</div><div class="line">        this.temperature = temperature;</div><div class="line">        this.humidity = humidity;</div><div class="line">        this.pressure = pressure;</div><div class="line">        display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>6、ForecastConditionDisplay 与CurrentConditionDisplay实现类似<br>7、Client测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        WeatherDate subject = new WeatherDate();</div><div class="line"></div><div class="line">        ForecastConditionDisplay condition1 = new ForecastConditionDisplay(subject);</div><div class="line">        CurrentConditionDisplay condition2 = new CurrentConditionDisplay(subject);</div><div class="line">        subject.setMeasurements(10,20,30);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="Java内置观察者模式"><a href="#Java内置观察者模式" class="headerlink" title="Java内置观察者模式"></a>Java内置观察者模式</h6><p>WeatherData类似于自己实现观察者模式中的的Subject的具体实现，继承了java提供的java.util.Observable，Observable封装了之前subject提供的所有方法;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import java.util.Observable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Subject</div><div class="line"> * User: jianwl</div><div class="line"> * Date: 2016/5/11</div><div class="line"> * Time: 11:16</div><div class="line"> */</div><div class="line">public class WeatherData extends Observable&#123;</div><div class="line">    private float temperature;</div><div class="line">    private float humidity;</div><div class="line">    private float pressure;</div><div class="line"></div><div class="line">    public  WeatherData()&#123;&#125;</div><div class="line"></div><div class="line">    public void messureChanged()&#123;</div><div class="line">        setChanged();</div><div class="line">        notifyObservers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public  void setMessurements(float temperature,float humidity,float pressure)&#123;</div><div class="line">        this.temperature = temperature;</div><div class="line">        this.humidity = humidity;</div><div class="line">        this.pressure = pressure;</div><div class="line">        messureChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getTemperature() &#123;</div><div class="line">        return temperature;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getHumidity() &#123;</div><div class="line">        return humidity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getPressure() &#123;</div><div class="line">        return pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CurrentConditionsDisplay,类似于自己实现观察者模式中的Observer的具体实现，实现了java提供的java.util.Observer的接口和另一个自己创建的DisplayElement接口;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public interface DisplayElement &#123;</div><div class="line">    public void display();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">import java.util.Observable;</div><div class="line">import java.util.Observer;</div><div class="line"></div><div class="line">/**</div><div class="line"> * User: jianwl</div><div class="line"> * Date: 2016/5/11</div><div class="line"> * Time: 11:23</div><div class="line"> */</div><div class="line">public class CurrentConditionsDisplay implements Observer,DisplayElement &#123;</div><div class="line">    Observable observable;</div><div class="line">    private float temperature;</div><div class="line">    private float humidity;</div><div class="line"></div><div class="line">    public CurrentConditionsDisplay(Observable observable) &#123;</div><div class="line">        this.observable = observable;</div><div class="line">        observable.addObserver(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println(&quot;CurrentConditionsDisplay  temperature = &quot; + temperature + &quot; humidity = &quot; + humidity );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void update(Observable o, Object arg) &#123;</div><div class="line">        if(o instanceof WeatherData)&#123;</div><div class="line">            WeatherData weatherData = (WeatherData)o;</div><div class="line">            this.temperature = weatherData.getTemperature();</div><div class="line">            this.humidity = weatherData.getHumidity();</div><div class="line">            display();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试Java内置的观察者模式,XFireConditionsDisplay、ForeConditionsDisplay这两个类的实现和CurrentConditionsDisplay类似;<br>同时通过测试结果可知，Java内置的观察者模式，通知的顺序是先入后出的；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    //通知的顺序是先入后出的；</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        WeatherData weatherData = new WeatherData();</div><div class="line">        CurrentConditionsDisplay condition1 = new CurrentConditionsDisplay(weatherData);</div><div class="line"></div><div class="line">        XFireConditionsDisplay condition2 = new XFireConditionsDisplay(weatherData);</div><div class="line">        ForeConditionsDisplay condition3 = new ForeConditionsDisplay(weatherData);</div><div class="line"></div><div class="line">        weatherData.setMessurements(22,11,11);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>Java内置的观察者模式有什么问题？<br>1、Observable是一个“类”，你必须设计一个类继承它，如果某类想同时具有Observable类和另一个超类的行为，就会陷入两难，毕竟Java不支持多重继承。限制了Observable的复用的能力；<br>2、Observable将关键的方法保护起来了，setChanged()方法被保护起来了（被定义成protected）,意味着除非你继承自Obserable，否则你无法创建Obserable实例并组合到自己的对象中来；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之策略模式]]></title>
      <url>http://jianwl.com/2016/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h6 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h6><blockquote>
<p>1、逻辑代码独立到单独的方法中,注重封装性-易读，易复用;<br>2、写类、写方法、写功能时，应考虑其移植性，复用性，防止一次性代码；<br>3、熟练运用继承的思想:找出应用中相同之处，且不容易发生变化的东西，把它们抽取到抽象类中，让子类去继承它们；<br>4、熟练运用接口的思想：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起;</p>
</blockquote>
<p>通过以下示例，我们来感受一下设计模式的好处;<br><strong>场景：</strong><br>模拟鸭子游戏的应用程序，要求，游戏中的会出现各种颜色外形的鸭子，一边游戏洗水，一边呱呱叫。</p>
<h6 id="实现1：一次性代码"><a href="#实现1：一次性代码" class="headerlink" title="实现1：一次性代码"></a>实现1：一次性代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">直接编写出各种鸭子的类：MallardDuck,RedHeadDuck各个类有三个方法：</div><div class="line">quack() 叫的方法；</div><div class="line">swim()  游水的方法；</div><div class="line">display()： 外形的方法;</div></pre></td></tr></table></figure>
<h6 id="实现2：继承"><a href="#实现2：继承" class="headerlink" title="实现2：继承"></a>实现2：继承</h6><p>设计一个鸭子的超类，并让各个鸭子继承这个超类,将其中共同的部分提取出来，避免重复编程;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public abstract class Duck&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">    public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    public abstract display(); //外观不一样，由子类决定</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MallardDuck extends Duck&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;野鸭的颜色是绿色的&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class RedHeadDuc extends Duck&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;红头鸭的颜色是红色的&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不幸的是，现在客户又提出了新的需求，想让鸭子飞起来。这个对于OO程序员，在简单不过了，在超类中在加一个方法就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Duck&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">    public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    public void fly()&#123;</div><div class="line">    	System.out.println(&quot;飞啦&quot;);</div><div class="line">    &#125;</div><div class="line">    public abstract display(); //外观不一样，由子类决定</div><div class="line">&#125;</div><div class="line"></div><div class="line">//对于不能飞的鸭子，在子类中只需简单覆盖</div><div class="line">public class DisabledDuck extends Duck&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;残废鸭的颜色.&quot;);</div><div class="line">    &#125;</div><div class="line">    public void fly()&#123;</div><div class="line">		//覆盖，什么事都不做</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现2点评<br>对于上面的设计，你可能会发现一些弊端，如果超类有新的特性，子类都必须变动，这是我们开发最不喜欢看到的，故继承耦合性太高了。</p>
<h6 id="实现3-接口"><a href="#实现3-接口" class="headerlink" title="实现3:接口"></a>实现3:接口</h6><p>我们把容易变化的部分提取出来并封装，来应付以后的变化，虽然代码量加大了，但可用性提高了，耦合度也降低了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public interface Flyable()&#123;</div><div class="line">	public void fly();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface Quackable()&#123;</div><div class="line">	public void quack();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Duck()&#123;</div><div class="line">	public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    public abstract void display();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MallardDuck extends Duck implements Flyable,Quackable&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;野鸭的颜色是绿色的&quot;);</div><div class="line">    &#125;</div><div class="line">    public void fly()&#123;</div><div class="line">    	System.out.println(&quot;飞啦&quot;);</div><div class="line">    &#125;</div><div class="line">    public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class DisabledDuck extends Duck implements Quackable&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;能叫不能飞的残废鸭颜色....&quot;);</div><div class="line">    &#125;</div><div class="line">    public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现3接口点评<br>好处是，这样的设计，降低了程序之间的耦合度；<br>缺点是，Flyable和Quackable接口一开始似乎还挺不错的，解决了问题，只有会飞的鸭子才实现Flyable,但是Java接口不具有实现代码，所以实现接口无法达到的复用。</p>
<h6 id="实现四，策略模式"><a href="#实现四，策略模式" class="headerlink" title="实现四，策略模式"></a>实现四，策略模式</h6><p>为了要分开变化和不变化的部分，准备建立两组类,一个是Fly相关的，另一个是Quack相关的，每组类实现各自的动作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public interface FlyBehavior&#123;</div><div class="line">	public void fly();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface QuackBehavior&#123;</div><div class="line">	public void quack();</div><div class="line">&#125;</div><div class="line">public class FlyWithWings implements FlyBehavior&#123;</div><div class="line">	public void fly()&#123;</div><div class="line">    	System.out.println(&quot;飞啦&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class FlyNoWay implements FlyBehavior&#123;</div><div class="line">	public void fly()&#123;</div><div class="line">    	System.out.println(&quot;什么都不做，不会飞啊&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Quack implements QuackBehavior&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MuteQuack implements QuackBehavior&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;什么都不做，不会叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样的设计可以让飞行和呱呱叫的动作被其他的对象复用，因为这些行为已经和鸭子类无关了，而我们增加一些新的行为，不会影响到既有的行为类，也不会影响使用到的飞行行为的鸭子类；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public abstract class Duck &#123;</div><div class="line">	FlyBehavior flyBehavior;</div><div class="line">    QuackBehavior quackBehavior;</div><div class="line">    </div><div class="line">    public Duck()&#123;&#125;</div><div class="line">   </div><div class="line">    public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public abstract void display();</div><div class="line">    </div><div class="line">    public void performFly()&#123;</div><div class="line">    	flyBehavior.fly();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void performQuack()&#123;</div><div class="line">    	quackBehavior.quack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public MallardDuck extends Duck&#123;</div><div class="line">	public MallardDuck()&#123;</div><div class="line">    	this.flyBehavior = new FlyWithWings();</div><div class="line">        this.quackBehavior = new MuteQuack();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void display()&#123;</div><div class="line">    	System.out.println(&quot;鸭子是绿色的&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现4点评<br>即实现了解耦又实现了代码的复用；</p>
<h6 id="策略模式定义"><a href="#策略模式定义" class="headerlink" title="策略模式定义"></a>策略模式定义</h6><p>定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis之集合并集、交集、差集]]></title>
      <url>http://jianwl.com/2016/05/09/Redis%E4%B9%8B%E9%9B%86%E5%90%88%E5%B9%B6%E9%9B%86%E3%80%81%E4%BA%A4%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/</url>
      <content type="html"><![CDATA[<h6 id="Redis交集、并集、差集应用场景"><a href="#Redis交集、并集、差集应用场景" class="headerlink" title="Redis交集、并集、差集应用场景"></a>Redis交集、并集、差集应用场景</h6><ul>
<li>微博的共同和非共同好友显示;</li>
</ul>
<h6 id="实战操作（备忘…-）"><a href="#实战操作（备忘…-）" class="headerlink" title="实战操作（备忘….）"></a>实战操作（备忘….）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 创建集合</div><div class="line">SADD priceA 1 2 3 4 5</div><div class="line">SADD priceB 1 2 3 7 8</div><div class="line"></div><div class="line"># 显示集合所有元素</div><div class="line">SMEMBERS priceA</div><div class="line">SMEMBERS priceB</div><div class="line"></div><div class="line"># 交集</div><div class="line">SINTER priceA priceB  //结果 1 2 3</div><div class="line"></div><div class="line"># 差集</div><div class="line">SDIFF priceA priceB   //结果 4 5</div><div class="line"></div><div class="line"># 并集</div><div class="line">SUNION priceA priceB  //结果 1 2 3 4 5 7 8</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis持久化RDB和AOF]]></title>
      <url>http://jianwl.com/2016/05/09/Redis%E6%8C%81%E4%B9%85%E5%8C%96RDB%E5%92%8CAOF/</url>
      <content type="html"><![CDATA[<p>Redis提供了两种不同级别的持久化方式</p>
<ul>
<li>RDB</li>
<li>AOF</li>
</ul>
<h6 id="RDB、AOF概念"><a href="#RDB、AOF概念" class="headerlink" title="RDB、AOF概念"></a>RDB、AOF概念</h6><p>RDB持久化可以在指定的时间间隔内生成数据集的时间点快照。</p>
<p>AOF持久化记录服务器执行的所有写操作命令，在服务器启动时，通过执行这些命令来还原数据集。</p>
<h6 id="RDB的优点"><a href="#RDB的优点" class="headerlink" title="RDB的优点"></a>RDB的优点</h6><ol>
<li>紧凑易于备份，就一个文件</li>
<li>RDB可以最大化Redis性能，父进程无需做任何操作，只需fork一个子进程；</li>
<li>恢复比AOF快</li>
</ol>
<h6 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h6><ol>
<li>数据完整性，如果非常注重数据的完整性，RDB就不行了，虽然是时间点的快照方式，但在快照过程中，Redis重启了，那么快照中的这些数据将会丢失。</li>
<li>数据非常庞大后，非常耗CPU和时间，REDIS服务可能DOWN掉1秒甚至更长；</li>
</ol>
<h6 id="AOF的优点"><a href="#AOF的优点" class="headerlink" title="AOF的优点"></a>AOF的优点</h6><ol>
<li>AOF持久化让Redis变得更加耐久，AOF默认每一秒追加一次，也可以修改它的方式每执行一次追加一次，所以你最多丢失1秒钟的数据；</li>
<li>AOF文件是一个只进行追加操作的日志文件;</li>
<li>Redis可以在AOF文件体积变得过大时，自动地在后台对AOF重写</li>
</ol>
<h6 id="AOF缺点"><a href="#AOF缺点" class="headerlink" title="AOF缺点"></a>AOF缺点</h6><ol>
<li>对于相同的数据集来说，AOF文件的体积大于RDB文件的体积；</li>
<li>根据所使用的fsync策略，AOF的速度可能会慢于RDB；</li>
</ol>
<h6 id="RDB持久化原理"><a href="#RDB持久化原理" class="headerlink" title="RDB持久化原理"></a>RDB持久化原理</h6><p>当Redis需要保存dump.rdb文件时，服务器执行以下操作：</p>
<ol>
<li>Redis调用fork(),同时拥有父进程和子进程；</li>
<li>子进程将数据集写入到一个临时RDB文件中；</li>
<li>当子进程完成对RDB文件的写入时，Redis用新RDB文件替换原来的RDB文件，并删除旧的RDB文件；</li>
<li>这种方式使得Redis可以从写时复制机制中获益</li>
</ol>
<h5 id="AOF持久化原理"><a href="#AOF持久化原理" class="headerlink" title="AOF持久化原理"></a>AOF持久化原理</h5><ol>
<li>Redis执行fork()，现在同时拥有父进程和子进程；</li>
<li>子进程开始将AOF文件的内容写入到临时文件。</li>
<li>对于所有新执行的写入命令，父进程一边将他们累积到一个内存缓存中，一边将这些改动追加到现有AOF文件的末尾，这样即使在重写的中途发生宕机，现有AOF文件也是安全的</li>
<li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新的AOF文件的末尾。</li>
<li>现在Redis原子地用新文件替换旧文件，之后所有命令都会追加到新的AOF文件</li>
</ol>
<h5 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h5><ul>
<li>AOF的运作方式是不断将命令追加到文件的末尾，所以随着写入命令的不断增加，AOF文件的体积也变得越来越大。举个例子，如果你对计数器调用100次INCR，那么仅仅是为了保存这个计数器的当前值，AOF文件就需要使用100条记录，然而实际上只需一条SET命令就可以保存当前值；为了处理这种情况Redis会对AOF文件进行重写，执行beginWriteAof命令，Redis将生成一个新的AOF文件，这个文件将重建当前数据集所需的最少命令；</li>
</ul>
<p>参考资料：<br><a href="http://www.cnblogs.com/luotianshuai/p/4969379.html" target="_blank" rel="external">Redis-cluster集群【第二篇】：redis持久化</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP对数据库的增删改查]]></title>
      <url>http://jianwl.com/2016/05/06/PHP%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      <content type="html"><![CDATA[<p>对于PHP和前端HTML的CURD交互操作的详情请参考链接资料，写的非常详细，这里主要总结一下，PHP的CURD的操作;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">//数据库配置</div><div class="line">$ip = &apos;localhost&apos;;</div><div class="line">$user = &apos;root&apos;;</div><div class="line">$password = &apos;root&apos;;</div><div class="line">$database = &apos;test&apos;;</div><div class="line"></div><div class="line">//增</div><div class="line">$isbn = &quot;A001&quot;;</div><div class="line">$author = &quot;jianwl&quot;;</div><div class="line">$title = &quot;PHP&quot;;</div><div class="line">$price = 222;</div><div class="line"></div><div class="line">@$db = new mysqli($ip,$user,$password,$database);</div><div class="line">if(mysqli_connect_errno())&#123;</div><div class="line">	echo &quot;mysql connected error&quot;;</div><div class="line">    exit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$sql_insert = &quot;INSERT INTO books(isbn,author,title,price) VALUES(&apos;$isbn&apos;,&apos;$author&apos;,&apos;$title&apos;,&apos;$price&apos;)&quot;;</div><div class="line">mysql_query($sql_insert);</div><div class="line">echo &quot;insert into db 1 data.....&quot;;</div><div class="line"></div><div class="line">//查</div><div class="line"></div><div class="line">$sql_select = &quot;SELECT * FROM books&quot;;</div><div class="line">$result_set = mysql_query($sql_select);</div><div class="line">while($row=mysql_fetch_row($result_set))&#123;</div><div class="line">echo &quot;isbn = &quot;.$row[&apos;isbn&apos;].&quot; author = &quot;.$row[&apos;author&apos;].&quot; title = &quot;.$row[&apos;title&apos;].&quot; price = &quot;.$row[&apos;price&apos;].&quot;&lt;br/&gt;&quot; ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//改</div><div class="line">$sql_update = &quot;update books SET title=&quot;MYSQL PHP CONNECT WHERE isbn=&apos;$isbn&apos;&quot;;</div><div class="line">mysql_query($sql_update);</div><div class="line">echo &quot;data has updated&quot;;</div><div class="line"></div><div class="line">//删</div><div class="line">$sql_delete = &quot;delete books where isbn=dd&quot;;</div><div class="line">mysql_query($sql_delete);</div><div class="line">echo &quot;data has deleted&quot;;</div></pre></td></tr></table></figure></p>
<p>参考资料：<br><a href="http://www.codingcage.com/2014/12/simple-php-crud-operations-with-mysql.html" target="_blank" rel="external">Simple PHP CRUD Operations with MySQL</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP常用类和接口的判断方法]]></title>
      <url>http://jianwl.com/2016/05/06/PHP%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">        class Computer &#123;</div><div class="line">                public function _run() &#123;&#125;</div><div class="line">                private function _go() &#123;&#125;</div><div class="line">                public $_name = &apos;dell&apos;;</div><div class="line">                private $_model = &apos;i7&apos;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        class NoteComputer extends Computer &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        interface Person &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        $computer = new Computer();</div><div class="line">        $notecomputer = new NoteComputer();</div><div class="line"></div><div class="line">        //1.检查类是否存在</div><div class="line">        echo class_exists(&apos;Computer&apos;);</div><div class="line">        //2.获取对象的类名</div><div class="line">        echo get_class($computer);</div><div class="line">        //3.获取类中公共的方法</div><div class="line">        print_r(get_class_methods($computer));</div><div class="line">        //4.获取类中的字段</div><div class="line">        print_r(get_class_vars(&apos;Computer&apos;));</div><div class="line">        //5.获取子类的父类</div><div class="line">        echo get_parent_class($notecomputer);</div><div class="line">        //6.判断接口是否存在</div><div class="line">        echo interface_exists(&apos;Person&apos;);</div><div class="line">        //7.判断对象是否是这个类，$notecomputer的类的父类是Computer</div><div class="line">        echo is_a($notecomputer,&apos;Computer&apos;);</div><div class="line">        //8.判断对象是否是类的子类。</div><div class="line">        echo is_subclass_of($notecomputer,&apos;Computer&apos;);</div><div class="line">        //9.判断对象是否有这个方法</div><div class="line">        echo method_exists($computer,&apos;_run&apos;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP面向对象特性]]></title>
      <url>http://jianwl.com/2016/05/05/PHP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>常量声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//特别注意 PI没有$,同时不用声明访问权限，声明为public时，会报错；</div><div class="line">class Fruit&#123;</div><div class="line">  const PI =3.14;</div><div class="line">&#125;</div><div class="line">echo Fruit::PI;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>define和const的区别？</p>
<ol>
<li>编译器处理方式不同，define宏是预处理阶段展开，const常量是编译运行阶段使用;</li>
<li>类型和安全检查不同；define宏没有类型，不做任何类型检查，仅仅是展开；const常量有具体的类型，编译阶段会执行类型检查；</li>
<li>存储方式不同，define宏仅仅是展开，有多少地方使用，就展开多少次，不分配内存，宏定义不分配内存，定义变量分配内存；const常量会在内存中分配；</li>
<li>const可以节省空间，避免不必要的内存分配；</li>
</ol>
<p>静态类成员和方法的调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Fruit&#123;</div><div class="line">public static $count = 0;</div><div class="line"></div><div class="line">public static function add()&#123;</div><div class="line">   self::$count++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static function get()&#123;</div><div class="line">  return self::$count;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//注意调用静态方法不需要用$符号；</div><div class="line">Fruit::add();</div><div class="line">echo Fruit::get();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>getter和setter方法;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Fruit &#123;</div><div class="line">  private $name;</div><div class="line">  private $price;</div><div class="line"> </div><div class="line">  //为private访问权限也能访问，因为拦截于类内</div><div class="line">  public function __set($_key,$_value)&#123;</div><div class="line">        $this-&gt;$_key = $_value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public function __get($_key)&#123;</div><div class="line">    return $this-&gt;$_key;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$fruit = new Fruit();</div><div class="line">$fruit-&gt;name = &quot;apple&quot;;</div><div class="line">$fruit-&gt;price = 2.0;</div><div class="line">echo $fruit-&gt;name. &quot; -&gt; &quot;. $fruit-&gt;price;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>多态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">interface Computer&#123;</div><div class="line">   public function name();</div><div class="line">   public function version();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Tcomputer implements Computer&#123;</div><div class="line">  public function name()&#123;</div><div class="line">   echo &quot;apple&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public function version()&#123;</div><div class="line">     echo &quot;windowxp&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Person&#123;</div><div class="line"> public function run($type)&#123;</div><div class="line">     $type-&gt;name();</div><div class="line"></div><div class="line">     $type-&gt;version();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$person = new Person();</div><div class="line">$computer = new Tcomputer();</div><div class="line"></div><div class="line">$person-&gt;run($computer);</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>自动引入多个类文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">        //引入类文件即可</div><div class="line">        //require &apos;computer.class.php&apos;;</div><div class="line">        //1.如果要包含多个类文件，是不是要一一引入。</div><div class="line">        //2.引入多个类文件，如果有用不到的，就会产生浪费</div><div class="line">        //3.引入了类文件，可能会遗漏，比如说，创建了一个对象，而这个对象的类文件没有引入。就会产生错误</div><div class="line"></div><div class="line">        //$_className = 类名</div><div class="line">        //只要实例化了，那么 $_className = &apos;Computer&apos;;</div><div class="line"></div><div class="line">        function __autoload($_className) &#123;</div><div class="line">                require strtolower($_className).&apos;.class.php&apos;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        $computer = new Computer();</div><div class="line">        $person = new Person();</div><div class="line">        echo $computer-&gt;_name;</div><div class="line">        $computer-&gt;_run();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>__toString<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// 设置__toString()的访问权限为private,仍然能够访问__toString()访问；类内拦截访问该方法；</div><div class="line">        class Computer &#123;</div><div class="line">                public function _run() &#123;</div><div class="line">                        echo &apos;run&apos;;</div><div class="line">                &#125;</div><div class="line">                private function __toString() &#123;</div><div class="line">                        return &apos;i am string&apos;;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        echo new Computer();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu安装Apache+PHP+MySQL]]></title>
      <url>http://jianwl.com/2016/05/04/Ubuntu%E5%AE%89%E8%A3%85Apache-PHP-MySQL/</url>
      <content type="html"><![CDATA[<p>我在ubuntu下配置了一个Apache服务器，通过Apache我们可以学习php网络编程，可以用它来部署自己的hexo博客。以下是安装步骤和其中踩得一些坑。</p>
<h5 id="步骤一，安装apache2"><a href="#步骤一，安装apache2" class="headerlink" title="步骤一，安装apache2"></a>步骤一，安装apache2</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure>
<p>安装完成。<br>运行如下命令重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure></p>
<p>出现这个问题<br><img src="/images/apache-01.png" alt=""><br>ServerName没有配置好IP,编辑/var/apache2/apache2.conf如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /var/apache2/apache2.conf</div></pre></td></tr></table></figure></p>
<p>在apaache2.conf增加一个属性 ServerName为本机IP<br><img src="/images/apache-02.png" alt=""><br>重启apache2 不会出现刚刚的问题了。</p>
<h5 id="步骤二，安装PHP"><a href="#步骤二，安装PHP" class="headerlink" title="步骤二，安装PHP"></a>步骤二，安装PHP</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libapache2-mod-php5 php5</div><div class="line">sudo apt-get install php5-gd php5-MySQL</div></pre></td></tr></table></figure>
<p>安装完后，重新启动Apache，让它加载PHP模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure></p>
<p>接下来测试Web目录下面新建一个test.php文件来测试PHP是否正常运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /var/www/html/test.php</div></pre></td></tr></table></figure></p>
<p>然后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php echo &apos;&lt;p&gt;Order processed.&lt;/p&gt;&apos;; ?&gt;</div></pre></td></tr></table></figure></p>
<p>接着保存文件，在浏览器里输入<a href="http://139.196.243.225/test.php,如果在网页中显示Order" target="_blank" rel="external">http://139.196.243.225/test.php,如果在网页中显示Order</a> processed，就表示正常运行了。如果出现错误，请查看日志信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f /var/log/apache2/error.log</div></pre></td></tr></table></figure></p>
<h5 id="步骤三，安装Mysql数据库"><a href="#步骤三，安装Mysql数据库" class="headerlink" title="步骤三，安装Mysql数据库"></a>步骤三，安装Mysql数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server mysql-client</div></pre></td></tr></table></figure>
<p>安装不成功，出现以下报错信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql-server depends on mysql-server-5.5; however: Package mysql-server-5.5 is not configured yet. dpkg: error processing mysql-server (--configure)</div></pre></td></tr></table></figure></p>
<p>在stackoverflow查到解决方案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo apt-get --yes autoremove --purge mysql-server-5.5</div><div class="line">sudo apt-get --yes autoremove --purge mysql-client-5.5</div><div class="line">sudo apt-get --yes autoremove --purge mysql-common</div><div class="line">sudo rm -rf /var/lib/mysql /etc/mysql ~/.mysql</div><div class="line"></div><div class="line">sudo deluser mysql</div><div class="line">sudo apt-get autoclean</div><div class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</div><div class="line">sudo apt-get install mysql-server-5.5 mysql-client-5.5</div></pre></td></tr></table></figure></p>
<p>安装过程中，会要求输入root的密码，注意这里的root密码可不是ubuntu的root密码，是mysql设定的root密码，成功安装mysql。</p>
<h5 id="步骤四，安装phpmyadmin-mysql数据库管理"><a href="#步骤四，安装phpmyadmin-mysql数据库管理" class="headerlink" title="步骤四，安装phpmyadmin-mysql数据库管理"></a>步骤四，安装phpmyadmin-mysql数据库管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo-get install phpmyadmin</div></pre></td></tr></table></figure>
<p>在安装过程中会要求选择Web server：apache2或lighttpd，使用空格键选定apache2，按tab键然后确定。然后会要求输入设置的Mysql数据库密码连接密码Password of the database’s administrative user。<br>然后将phpmyadmin与apache2建立连接，以我的为例：html目录在/var/www/html，phpmyadmin在/usr/share /phpmyadmin目录，所以就用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /usr/share/phpmyadmin /var/www/html</div></pre></td></tr></table></figure></p>
<p>创建软连接。<br>phpmyadmin测试：在浏览器地址栏中打开<a href="http://139.196.243.225/phpmyadmin" target="_blank" rel="external">http://139.196.243.225/phpmyadmin</a>.<br>以上ALMP的基本组件就安装完毕了；</p>
<h5 id="步骤五，设置ubuntu文件执行读写权限"><a href="#步骤五，设置ubuntu文件执行读写权限" class="headerlink" title="步骤五，设置ubuntu文件执行读写权限"></a>步骤五，设置ubuntu文件执行读写权限</h5><p>PHP网络服务器跟目录默认设置在：/var/www/html修改/var/www/html目录的读写权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 777 /var/www/html</div></pre></td></tr></table></figure></p>
<p>然后就可以写入php文件了。<br>参考资料：<br><a href="http://www.cnblogs.com/ada-zheng/p/3974963.html" target="_blank" rel="external">ubuntu下安装Apache+PHP+Mysql</a><br><a href="http://stackoverflow.com/questions/13276088/cant-start-mysql5-5-on-ubuntu-12-04-dpkg-dependency-problems" target="_blank" rel="external">Can’t start MySQL5.5 on Ubuntu 12.04 - “dpkg: dependency problems”</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP字符串]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h6 id="字符串常见的函数"><a href="#字符串常见的函数" class="headerlink" title="字符串常见的函数"></a>字符串常见的函数</h6><p>chop(); 移除右端字符<br>trim()；移除左右两端字符<br>ltirm(); 移除左端字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$msg = &quot;hello world \r\n&quot;;</div><div class="line">$name = trim($msg);</div></pre></td></tr></table></figure></p>
<p>printf();格式化字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$total = &quot;222&quot;;</div><div class="line">printf(&quot;total amount of order is %s.&quot;,$total);</div></pre></td></tr></table></figure></p>
<p>strtoupper();将字符串转换为大写；<br>strtolower;将字符串转为小写；<br>ucfirst(); 将字符串的第一个字符转换成大写；<br>unwords()；将字符串的每个单词的第一个字符转换为大写；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$total = 111;</div><div class="line">$msg = &quot;hello wORld&quot;;</div><div class="line">echo strtoupper($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">echo strtolower($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">echo ucfirst($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">echo ucwords($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>explode() 分割字符串；<br>strok(); 分割字符串，但一次只返回一个片段；<br>implode() 指定连接符连接数组中的每个元素组成字符串；<br>join() 指定连接符连接数组中的每个元素组成字符串;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">$array = explode(&quot; &quot;,$msg);</div><div class="line">$msg3 = join(&quot;===&quot;,$array);</div><div class="line">echo $msg3;</div><div class="line"></div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line"></div><div class="line">#测试strtok();</div><div class="line">$array = strtok($msg,&quot;o&quot;);</div><div class="line">echo $array;</div><div class="line">while($array != &quot;&quot;)&#123;</div><div class="line">  $array = strtok(&quot;o&quot;);</div><div class="line">  echo &quot;====&quot;.$array;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>substr(); 返回部分字符串;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo &quot;count = &quot;.strlen($msg);</div><div class="line">echo substr($msg,0,-1).&quot;&lt;/br&gt;&quot;; //得到 hello world</div><div class="line">echo substr($msg,-5).&quot;&lt;/br&gt;&quot;; //得到 orld!</div><div class="line">echo substr($msg,0,strlen($msg)); //得到hello world!</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>字符串比较<br>strcmp();//按字典排序，2大于12<br>strcasecmp();//忽略大小写，按字典排序<br>strnatcmp(); //按自然排序字符串，2小于12；</p>
<p>strlen(); //获取字符串长度<br>strstr();//查找字符串,返回从匹配关键字起的内容；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo strstr($msg,&quot;llo&quot;); //结果为llo world！</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>str_replace(string new_str,string replacement,string info); //字符串替换<br>substr_replace(string string, string replace,int start);//用字符串替换指定位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo substr_replace($msg,&quot;==&quot;,-1);//结果为hello world==</div><div class="line"></div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo str_replace(&quot;o&quot;,&quot;===&quot;,$msg); //结果为hell===w===rld!</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="转义和反转义函数"><a href="#转义和反转义函数" class="headerlink" title="转义和反转义函数"></a>转义和反转义函数</h5><p>addslashes($str); //将单引号和双引号等需要转义的字符，用反斜杠转义<br>strislashes($str);//将字符串中的转义反斜杠去掉</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP语法基础]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h5 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a>PHP数据类型</h5><ul>
<li>Integer  – 整数</li>
<li>Float  – 浮点数，也叫Double，双精度值，用来表示实数；</li>
<li>String – 字符串，</li>
<li>Boolean – 布尔值，表示true或者false</li>
<li>Array – 数组，用来保存有相同类型的多个数据项</li>
<li>Object – 对象，用来保存类的实例</li>
<li>NULL – 没有被赋值，已经被重置或者被赋值为特殊值NULL的变量</li>
<li>resource – 特定的内置函数（例如数据库函数）将返回resource类型变量，代表外部资源（如数据库连接）</li>
</ul>
<h5 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h5><p>define(‘PRICE ‘, 10);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo PRICE;</div></pre></td></tr></table></figure></p>
<h5 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h5><p>一个点号 (.)，可以将极端文本连接成一个字符串。<br><code>echo $.msg. &#39;try do it &lt;br/&gt;&#39; ;</code></p>
<h5 id="单引号和双引号的区别？"><a href="#单引号和双引号的区别？" class="headerlink" title="单引号和双引号的区别？"></a>单引号和双引号的区别？</h5><p>单引号中，变量名称或者其他任何文本都会不经修改，发送给浏览器；<br>双引号中，变量名称会被解析，然后发给浏览器；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//假设$msg = &quot;info&quot;</div><div class="line">echo &quot;msg = $msg&quot;  #结果为 msg = info;</div><div class="line">echo &apos;msg = $msg&apos;  #结果为 msg = $msg;</div></pre></td></tr></table></figure></p>
<h5 id="引用操作符"><a href="#引用操作符" class="headerlink" title="引用操作符"></a>引用操作符</h5><p>引用操作符&amp;可以在关联赋值中使用，通常，在一个变量赋值给另外一个变量的时候，先产生原变量的一个副本，然后再将它保存在内存的其他地方，使用操作符&amp;可以避免产生这样的副本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$a = 5;</div><div class="line">$b = $a;</div><div class="line">$a = 7;</div><div class="line">echo &quot;a = $a, b = $b&quot;; //结果为a = 5, b = 7;</div><div class="line"></div><div class="line">$a = 5;</div><div class="line">$b = &amp;$a;</div><div class="line">$a = 7;</div><div class="line">echo &quot;a = $a, b = $b&quot;; //结果为a = 7, b = 7;</div></pre></td></tr></table></figure></p>
<h5 id="错误抑制操作符"><a href="#错误抑制操作符" class="headerlink" title="错误抑制操作符"></a>错误抑制操作符</h5><p>错误抑制操作符@可以在任何表达式面前使用，可以抑制一些警告，但要写一些错误处理的代码；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$a = @(57/0);</div></pre></td></tr></table></figure></p>
<p>如果在php配置文件中的track_errors特性，错误信息将会被保存在$php_errormsg中。</p>
<h5 id="执行操作符"><a href="#执行操作符" class="headerlink" title="执行操作符"></a>执行操作符</h5><p>一对反向单引号(<code> </code>  )，将反向单引号之间的命令当做服务器端的命令来执行；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$out = `ls -la`  ;</div><div class="line">echo &apos;&lt;pre&gt;&apos; .$out. &apos;&lt;/pre&gt;&apos;;</div></pre></td></tr></table></figure></p>
<h5 id="类型操作符"><a href="#类型操作符" class="headerlink" title="类型操作符"></a>类型操作符</h5><p>类型操作符instanceof，用来检查一个对象是否是特定类的实例；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class sampleClass&#123;&#125;;</div><div class="line">$myObject = new sampleClass();</div><div class="line">if ($myObject instanceof sampleClass) &#123;</div><div class="line">  echo “myObject is an instance of sampleClass”；</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="测试变量状态"><a href="#测试变量状态" class="headerlink" title="测试变量状态"></a>测试变量状态</h5><p>bool isset(mixed var);如果变量存在，则返回true，如果不存在则返回false；<br>void unset(mixed var);销毁变量；<br>bool empty(mixed var);检查变量，为null,为空字符串，为0，均返回true，其余返回false；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$msg = &quot;msg&quot;;</div><div class="line">if(isset($msg))</div><div class="line">  echo &quot;isset function return true&quot;;</div><div class="line">else</div><div class="line">  echo &quot;isset function return false&quot;;</div><div class="line">unset($msg);</div><div class="line">if(isset($msg))</div><div class="line">  echo &quot;isset function return true&quot;;</div><div class="line">else</div><div class="line">  echo &quot;isset function return false&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="访问表单数据的几种方式："><a href="#访问表单数据的几种方式：" class="headerlink" title="访问表单数据的几种方式："></a>访问表单数据的几种方式：</h5><ul>
<li>$name    //简短风格，需要将register_globals配置设为on，默认是off，有安全问题；</li>
<li>$_POST[“name”] ,$_GET[“name”]  //推荐使用，没有安全问题</li>
<li>$HTTP_POST_VARS[“name”]  //冗长风格，性能不好；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//hello.php</div><div class="line">&lt;form action=&quot;hello.php&quot; method=&quot;post&quot;&gt;</div><div class="line">      enter your name:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</div><div class="line">      enter your age:&lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</div><div class="line">     &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">Welcome &lt;?php echo$_POST[&quot;name&quot;];?&gt;  &lt;br/&gt;</div><div class="line">You are &lt;?php echo $_POST[&quot;age&quot;];?&gt; years old!</div></pre></td></tr></table></figure>
<h5 id="当函数返回值为false时，需要用“-”来判断"><a href="#当函数返回值为false时，需要用“-”来判断" class="headerlink" title="当函数返回值为false时，需要用“===”来判断"></a>当函数返回值为false时，需要用“===”来判断</h5><p>因为布尔值“true”和”false”可以分别用整数“1”和“0”来表示；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">function large($x,$y)&#123;</div><div class="line">  if((!isset($x)) || (!isset($y)))&#123;</div><div class="line">      return false;</div><div class="line">  &#125; else if ($x &gt; $y)&#123;</div><div class="line">      return $x;</div><div class="line">  &#125; else &#123;</div><div class="line">     return $y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$x = 0;</div><div class="line">$y = -1 ;</div><div class="line">$result = large($x,$y);</div><div class="line">echo &quot;return = $result &lt;br/&gt;&quot; ;</div><div class="line">#因为布尔值false可以用0来表示，所以为了确保0和false不混淆，用&quot;===&quot;</div><div class="line">if($result === &quot;false&quot;)&#123;</div><div class="line">  echo &quot;false&quot;;</div><div class="line">&#125; else &#123;</div><div class="line">  echo $result;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP数组]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h5 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//初始化数组</div><div class="line">$products = array(&apos;tires&apos;,&apos;oil&apos;,&apos;spark&apos;);</div><div class="line">//初始化关联数组</div><div class="line">$prices = array(&apos;tires&apos;=&gt;100,&apos;oil&apos;=&gt;10,&apos;spark&apos;=&gt;4);</div><div class="line">foreach($products as $product)&#123;</div><div class="line">  echo &quot;product = &quot; . $product. &quot; - price = &quot; . $prices[$product] . &quot;&lt;/br&gt; &quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//初始化数组</div><div class="line">$products = array(&apos;tires&apos;,&apos;oil&apos;,&apos;spark&apos;);</div><div class="line">//初始化关联数组</div><div class="line">$prices = array(&apos;tires&apos;=&gt;100,&apos;oil&apos;=&gt;10,&apos;spark&apos;=&gt;4);</div><div class="line"></div><div class="line">#关系型数组循环方式1</div><div class="line">while(list($product,$price) = each($prices)) &#123;</div><div class="line">  echo &quot;(1) - $product - $price &lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line">#关系型数组循环方式2</div><div class="line">foreach($prices as $key =&gt; $value) &#123;</div><div class="line">  echo &quot; (2) - &quot;. $key.&quot; - &quot;.$value.&quot; &lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#关系型数组循环方式3</div><div class="line">reset($prices);</div><div class="line">while($element = each($prices))&#123;</div><div class="line">   echo &quot; (3)- &quot;. $element[&apos;key&apos;].&apos; - &apos; .$element[&apos;value&apos;].&apos;&lt;/br&gt;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#特别注意，使用each函数将记录当前元素，如果脚本中两次使用该数组，应该使用reset（）重置元素至开始处</div><div class="line">reset($prices);</div><div class="line">while($element = each($prices))&#123;</div><div class="line">   echo &quot; (4) -&quot;. $element[&apos;key&apos;].&apos; - &apos; . $element[&apos;value&apos;].&apos;&lt;/br&gt;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 数组循环</div><div class="line">foreach($products as $product)&#123;</div><div class="line">  echo &quot;[1] - product = &quot;.$product .&quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$products = array(</div><div class="line">	array(&apos;code&apos; =&gt;&apos;CODE&apos;),</div><div class="line">    array(&quot;price&quot;=&gt;10)</div><div class="line">);</div><div class="line"></div><div class="line">for($row = 0; $row &lt; 3; $row ++) &#123;</div><div class="line">   while( list($key,$value) = each($products[$row])) &#123;</div><div class="line">   		echo $key .&quot;  - &quot; .$value .&quot;&lt;/br&gt;&quot;;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数组排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$products = array(&apos;fruit&apos;,&apos;apple&apos;,&apos;banana&apos;);</div><div class="line">$prices = array(100,79,88);</div><div class="line"></div><div class="line">#字符串升序</div><div class="line">sort($products);</div><div class="line">foreach($products as $product)&#123;</div><div class="line"> echo  $product.&quot; &quot;;</div><div class="line">&#125;</div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line"></div><div class="line">#数字升序</div><div class="line">sort($prices);</div><div class="line">foreach($prices as $price)&#123;</div><div class="line">  echo $price.&quot; &quot; ;</div><div class="line">&#125;</div><div class="line"># 反向排序 rsort($products);</div><div class="line"></div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line"></div><div class="line">#关联数组排序</div><div class="line">$prices = array(&apos;fruit&apos;=&gt; 5,&apos;apple&apos;=&gt;20,&apos;banana&apos;=&gt;3);</div><div class="line"></div><div class="line">#按价格升序排序</div><div class="line">asort($prices);</div><div class="line">while(list($product,$price) = each($prices))&#123;</div><div class="line">  echo $product . &apos; - &apos; .$price . &quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#按水果名升序排序</div><div class="line">ksort($prices);</div><div class="line">while(list($product,$price) = each($prices))&#123;</div><div class="line">  echo $product . &apos; - &apos; .$price . &quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line">#降序排 arsort($price)、 krsort($price)</div><div class="line"></div><div class="line">echo &quot;&lt;==&gt;&lt;/br&gt;&quot;;</div><div class="line">#多维数组排序,按价格升序</div><div class="line">$products = array(</div><div class="line">array(&apos;fruit&apos;,&apos;FRUIT&apos;,20),</div><div class="line">array(&apos;apple&apos;,&apos;APPLE&apos;,5),</div><div class="line">array(&apos;banana&apos;,&apos;BANANA&apos;,3)</div><div class="line">);</div><div class="line">function compare($x,$y) &#123;</div><div class="line">  if($x[2] == $y[2])&#123;</div><div class="line">    return 0;</div><div class="line">  &#125; else if($x[2] &lt; $y[2])&#123;</div><div class="line">    return -1;</div><div class="line">  &#125; else &#123;</div><div class="line">    return 1;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">usort($products,&apos;compare&apos;);</div><div class="line">for($row = 0;$row &lt; 3;$row ++)&#123;</div><div class="line">for($column = 0; $column &lt; 3; $column ++)&#123;</div><div class="line">    echo $products[$row][$column] . &apos; &apos;;</div><div class="line">  &#125;</div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#对数组重新排序</div><div class="line">$numbers = array(1,2,3,4,5,6,7,8,9);</div><div class="line">#对数组重新排序,应用场景每次登陆时，看到不一样的三张图片;</div><div class="line">shuffle($numbers);</div><div class="line">foreach($numbers as $number)&#123;</div><div class="line"> echo $number.&quot; &quot;;</div><div class="line">&#125;</div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">#对数组反序</div><div class="line">$numbers = array(1,3,5,7,4);</div><div class="line">$numbers = array_reverse($numbers);</div><div class="line">foreach($numbers as $number)&#123;</div><div class="line"> echo $number.&apos; &apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">#产生1-10,步长为2，数组;</div><div class="line">$numbers = range(1,10,2);</div><div class="line">foreach($numbers as $number)&#123;</div><div class="line"> echo $number.&apos; &apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">$products = file(&quot;./fruit.txt&quot;);</div><div class="line">echo &quot;count = &quot;. count($products).&apos;&lt;/br&gt;&apos;;</div><div class="line">foreach($products as $product)&#123;</div><div class="line">   #分割字符串</div><div class="line">   $array = explode(&quot;\t&quot;,$product);</div><div class="line">   echo &apos;price = &apos;.$array[2].&apos;&lt;/br&gt;&apos;;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">#对每个元素应用任何函数</div><div class="line">$numbers = array(1,2,3,4);</div><div class="line">function my_print($value)&#123;</div><div class="line">  echo &quot;$value &lt;br/&gt;&quot;;</div><div class="line">&#125;</div><div class="line">array_walk($numbers,&apos;my_print&apos;);</div><div class="line"></div><div class="line">#统计数组元素个数count\sizeof()</div><div class="line">$array = array(1,2,3,2,1,1,1,1,1,1,6,7);</div><div class="line">echo &quot;count = &quot; . count($array).&apos; sizeof = &apos; .sizeof($array).&quot;&lt;/br&gt;&quot;;</div><div class="line"></div><div class="line">#统计数组中，每个元素出现的次数;</div><div class="line">$array = array_count_values($array);</div><div class="line">while(list($key,$value) = each($array))&#123;</div><div class="line">  echo $key . &apos; - &apos;.$value.&quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#将数组转换成标量变量，输出变量的名称，必须是数组中变量的名称；</div><div class="line">$products = array(&apos;apple&apos;=&gt;5,&apos;banana&apos;=&gt;3);</div><div class="line">extract($products,EXTR_OVERWRITE);</div><div class="line">echo &quot;apple_price = $apple , banana_price = $banana&quot;;</div><div class="line"></div><div class="line">extract($products,EXTR_PREFIX_ALL,&quot;my_prefix&quot;);</div><div class="line">echo &quot;apple_price = $my_prefix_apple,banana_price = $my_prefix_banana&quot;;</div><div class="line"></div><div class="line">#extract_type常用值</div><div class="line">#EXTR_OVERWRITE 当关键字发生冲突时，覆盖已有的关键字；</div><div class="line">#EXTR_PREFIX_ALL 给关键字加前缀;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="踩坑提示"><a href="#踩坑提示" class="headerlink" title="踩坑提示"></a>踩坑提示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一行代码结束，别忘了分号（；）</div><div class="line">引用变量，别忘了$</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP读写文件]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h5 id="写文件步骤"><a href="#写文件步骤" class="headerlink" title="写文件步骤"></a>写文件步骤</h5><ol>
<li>打开文件，如果文件不存在，需要先创建它；</li>
<li>将数据写入这个文件；</li>
<li>关闭这个文件；</li>
</ol>
<h5 id="读文件步骤"><a href="#读文件步骤" class="headerlink" title="读文件步骤"></a>读文件步骤</h5><ol>
<li>打开这个文件，如果文件不能打开，说明文件不存在就正确地退出;</li>
<li>从文件中读出数据</li>
<li>关闭文件;</li>
</ol>
<h5 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># $_SERVER[&apos;DOCUMENT_ROOT&apos;] 表示当前文件的路径；</div><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;w&apos; ); </div><div class="line"></div><div class="line">//如果文件不能正确地打开则退出；</div><div class="line">if($fp) &#123;</div><div class="line">	echo &quot;&lt;p&gt;Your Order could not be processed at this time.Please try again later.&lt;/p&gt; &quot;;</div><div class="line">    exit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;w&apos; ); </div><div class="line">$outputstring = &quot;msg&quot;;</div><div class="line"></div><div class="line"># 使用二进制模式执行写操作，第三个参数可以避免一些跨平台的兼容问题；</div><div class="line">fwrite($fp,$outputstring,strlen($outputstring)); //写到字符串末尾或已经输入length字节就停止写入。</div></pre></td></tr></table></figure>
<h5 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;w&apos; );</div><div class="line">fclose($fp);  //正确关闭文件返回true，否则返回false;</div></pre></td></tr></table></figure>
<h5 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;rb&apos; );</div><div class="line">#判断文件何时读完</div><div class="line">while(!feof($fp))&#123;</div><div class="line">	$order = fgets($fp,999); //从文件中每次读取一行的内容；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="单行读取方式"><a href="#单行读取方式" class="headerlink" title="单行读取方式"></a>单行读取方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;rb&apos; );</div><div class="line"></div><div class="line">1、fgets($fp,999); //从文件中每次读取一行内容；</div><div class="line"></div><div class="line">2、fgetss($fp,999,tags); //每次读取一行内容，并且过滤字符串中包含的PHP或HTML特殊标记; tags为字符串数组表示，需要过滤的一些标记,如，html、body</div><div class="line"></div><div class="line">3、$order = fgetcsv($fp,100,&quot;\t&quot;)；//从文件从读取一行，并且在有制表符（\t）的地方将文件内容分行。</div><div class="line"></div><div class="line">4、fread($fp,length),从文件中读取length字节内容；</div></pre></td></tr></table></figure>
<h5 id="读取整个文件-（经过测试，发现读取整个文件的方法均不能实现，为何？）"><a href="#读取整个文件-（经过测试，发现读取整个文件的方法均不能实现，为何？）" class="headerlink" title="读取整个文件 （经过测试，发现读取整个文件的方法均不能实现，为何？）"></a>读取整个文件 （经过测试，发现读取整个文件的方法均不能实现，为何？）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$filename =$_SERVER[&apos;DOCUMENT_ROOT&apos;]/orders/order.txt;</div><div class="line">1、readfile（$filename）; //读取整个文件：</div><div class="line">2、file($filename);//读取整个文件，将结果发送到一个数组，每一行为一个元素；</div></pre></td></tr></table></figure>
<h5 id="文件的定位"><a href="#文件的定位" class="headerlink" title="文件的定位"></a>文件的定位</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;rb&apos; );</div><div class="line">1、rewind($fp); //将文件制定复位到文件的开始；</div><div class="line">2、ftell($fp); //报告文件指针在当前文件中的位置；</div><div class="line">3、fseek($fp,offset,current),//文件指针从current位置，移动offset个字节；</div></pre></td></tr></table></figure>
<h5 id="文件锁"><a href="#文件锁" class="headerlink" title="文件锁"></a>文件锁</h5><p><strong>使用文件锁的目的？</strong><br>假设两个用户试图同时订购同一件商品，那么生成的订单是第一个用户的还是第二个用户的；为了避免这样的情况，可以使用文件锁；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;ab&apos; );</div><div class="line">flock($fp,LOCK_EX)；//锁定文件的写操作；</div><div class="line">$outputstring = &quot;msg&quot;;</div><div class="line">fwrite($fp,$outputstring);</div><div class="line">flock($fp,LOCK_UN);//释放锁；</div><div class="line">fclose($fp);</div></pre></td></tr></table></figure></p>
<h5 id="flock操作值"><a href="#flock操作值" class="headerlink" title="flock操作值"></a>flock操作值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LOCK_SH 读操作锁定，文件可以共享，其他人可以读该文件；</div><div class="line">LOCK_EX 写操作，互斥，文件不能被共享</div><div class="line">LOCK_UN 释放已有的锁定</div><div class="line">LOCK_NB 防止在请求加锁时发生阻塞</div></pre></td></tr></table></figure>
<h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$DOCUMENT_ROOT=$_SERVER[&apos;DOCUMENT_ROOT&apos;];</div><div class="line">$fp = fopen(&quot;$DOCUMENT_ROOT/../orders/orders.txt&quot;,&apos;ab&apos;);</div><div class="line">flock($fp,LOCK_EX);</div><div class="line">fwrite($fp,&quot;write the file twice&quot;);</div><div class="line">flock($fp,LOCK_UN);</div><div class="line">$fp = fopen(&quot;$DOCUMENT_ROOT/../orders/orders.txt&quot;,&apos;rb&apos;);</div><div class="line">while(!feof($fp))&#123;</div><div class="line">   $content = fgets($fp,999);</div><div class="line">   echo &quot;content = &quot;.$content;</div><div class="line">&#125;</div><div class="line">fclose($fp);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP编码准则]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E7%BC%96%E7%A0%81%E5%87%86%E5%88%99/</url>
      <content type="html"><![CDATA[<ol>
<li>重用代码，一个新项目是这样创建的，将可重新利用的组件进行组合，将开发难度降低到最小；</li>
<li>用成熟的代码，增加可靠性；</li>
<li>系统的外部接口应该一致，其中包括用户接口和系统的外部接口；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL权限系统介绍]]></title>
      <url>http://jianwl.com/2016/05/04/MySQL%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//创建用户流云</div><div class="line">CREATE USER  &quot;liuyun&quot;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;</div></pre></td></tr></table></figure>
<h5 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">注：privileges -用户操作权限如SELECT、INSERT、UPDATE、DELETE，如果要授予所有权限则使用ALL</div><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;；</div><div class="line"></div><div class="line"># 对 test数据库的所有表具有增删改查的权限；</div><div class="line">GRANT SELECT,INSERT,UPDATE,DELETE  ON test.* TO &apos;liuyun&apos; @ &apos;localhost&apos;;</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">exit;</div><div class="line">mysql -u liuyun -p liuyun</div></pre></td></tr></table></figure>
<h4 id="更改用户密码"><a href="#更改用户密码" class="headerlink" title="更改用户密码"></a>更改用户密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#更改其他用户</div><div class="line">SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(&apos;newpassword&apos;);</div><div class="line"></div><div class="line">#当前用户修改密码</div><div class="line">SET PASSWORD = PASSWORD(&apos;newpassword&apos;);</div></pre></td></tr></table></figure>
<h4 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REVOKE SELECT,INSERT,UPDATE,DELETE ON test.*  FROM  &apos;liuyun&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>
<h5 id="查看某个用户有哪些权限"><a href="#查看某个用户有哪些权限" class="headerlink" title="查看某个用户有哪些权限"></a>查看某个用户有哪些权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW GRANTS FOR &apos;liuyun&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>
<h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP USER &quot;liuyun&quot; @ &quot;localhost&quot;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL练习]]></title>
      <url>http://jianwl.com/2016/05/04/MYSQL%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><blockquote>
<p>表student:stu_id、stu_name、stu_age、company   – 主键 stu_id<br>表class:class_id、class_name  – 主键 class_id<br>表result: stu_id、class_id、score – 组合主键 stu_id、class_id  外键 stu_id、class_id</p>
</blockquote>
<p>1、使用标准SQL嵌套语句查询选修课程名称为’math’的学员学号和姓名?<br>2、使用标准SQL嵌套语句查询选修课程编号为‘c_3’的学员姓名和所属单位?<br>3、使用标准SQL嵌套语句查询不选修课程编号为’c_3’的学员姓名和所属单位?<br>4、查询选修了课程的学员人数<br>5、查询选修课程超过2门的学员学号和所属单位?<br>6、查询每个学生所选的课程数，显示学号、学生名字、和所选课程的数目；</p>
<p>1、<br>result:<br>方法1：子查询<br>select class_id from class where class_name=’math’;<br>select student_id from result where class_id  in ()<br>select stu_id,stu_name from student where stu_id in ();<br>==&gt;<br>select stu_id,stu_name from student where stu_id in (select stu_id from result where class_id  in (select class_id from class where class_name=’math’));</p>
<p>方法2：等值联结<br>select student.stu_id,stu_name from student,class,result where class_name=’math’ AND class.class_id = result.class_id AND result.stu_id = student.stu_id;</p>
<p>2、<br>方法1：子查询<br>select stu_id from result where class_id = ‘c_3’;<br>select stu_name,company from student where stu_id in ();<br>==&gt;<br>select stu_name,company from student where stu_id in (select stu_id from result where class_id = ‘c_3’);<br>方法2：内联结<br>SELECT stu_name,company FROM student INNER JOIN result ON class_id = ‘c_3’ AND result.stu_id = student.stu_id;</p>
<p>3、<br>select stu_id from result where class_id = ‘c_3’;<br>select stu_name,company from student where stu_id NOT in();<br>==&gt;<br>select stu_name,company from student where stu_id NOT in(select stu_id from result where class_id = ‘c_3’);</p>
<p>4、<br>select  COUNT(DISTINCT stu_id) AS count from result;</p>
<p>5、<br>select stu_id from result group by stu_id having count(<em>) &gt;=2;<br>select stu_id ,company from student where stu_id in ();<br>==&gt;<br>select stu_id ,company from student where stu_id in (select stu_id from result group by stu_id having count(</em>) &gt;=2);</p>
<p>6、<br>create view course_count as select stu_id,count(*) as num from result group by stu_id;</p>
<p>select student.stu_id,stu_name,course_count.num from student,course_count where student.stu_id=course_count.stu_id;</p>
<h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p>查询A(ID,Name)表中第31至40条记录，ID作为主键可能是不是连续增长的列<br>SELECT * FROM A LIMIT 30,10；<br>Tips: 分页查询的下标索引是从0开始。</p>
<h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p>查询表B中存在ID重复三次以上的记录<br>select id,count(*) as num from B group by id having  num &gt; 3;</p>
<h4 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h4><blockquote>
<p>表 customers:   customerid、name、city、address<br>表 orders :   customerid、orderid、amount、date</p>
</blockquote>
<h6 id="每个用户买个几本书，注意是没有买过书的用户显示数量为0；"><a href="#每个用户买个几本书，注意是没有买过书的用户显示数量为0；" class="headerlink" title="每个用户买个几本书，注意是没有买过书的用户显示数量为0；"></a>每个用户买个几本书，注意是没有买过书的用户显示数量为0；</h6><p>select customers,count(orders.orderid) from customers left join orderid on customers.customerid = order.customerid group by customerid;</p>
<h6 id="检索出消费超过100元的vip用户"><a href="#检索出消费超过100元的vip用户" class="headerlink" title="检索出消费超过100元的vip用户;"></a>检索出消费超过100元的vip用户;</h6><p>select customerid,sum(orders.amount)  as sum from customers left join orders on customers.customerid = orders.customerid group by customerid  having sum &gt;= 100;</p>
<h6 id="统计每个用户每个订单消费超过50的总和"><a href="#统计每个用户每个订单消费超过50的总和" class="headerlink" title="统计每个用户每个订单消费超过50的总和"></a>统计每个用户每个订单消费超过50的总和</h6><p>select customerid,ifnull(sum(orders.amount),0)  as sum from customers left join orders on customers.customerid = orders.customerid and orders.amount &gt;= 50 group by customerid ;</p>
<h6 id="统计这个月每个用户的消费金额"><a href="#统计这个月每个用户的消费金额" class="headerlink" title="统计这个月每个用户的消费金额"></a>统计这个月每个用户的消费金额</h6><p>select customerid,ifnull(sum(orders.amount),0)  as sum from customers left join orders on customers.customerid = orders.customerid and  date between date(“2016-05-01”) and date(“2016-05-31”) group by customerid ;</p>
<h6 id="统计每个用户的消费金额"><a href="#统计每个用户的消费金额" class="headerlink" title="统计每个用户的消费金额"></a>统计每个用户的消费金额</h6><p>select customerid,ifnull(sum(orders.amount),0)  as sum from customers left join orders on customers.customerid = orders.customerid group by customerid ;</p>
<h5 id="ISNULL-IFNULL、NULLIF函数"><a href="#ISNULL-IFNULL、NULLIF函数" class="headerlink" title="ISNULL IFNULL、NULLIF函数"></a>ISNULL IFNULL、NULLIF函数</h5><p>1、isnull(expr)  expr为null，为1，不为空为0；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT ISNULL(null)     # 结果为 1</div><div class="line">SELECT ISNULL(1) #结果为0</div></pre></td></tr></table></figure></p>
<p>2、ifnull(expr1,expr2)，expr1为空,值等于expr2,不为空则为expr1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT userid,ifnull(item.itemid,0) from user left join item on item.userid = user.userid ; #结果为当用户没有下单订时，该用户检索出的订单将默认为0，而不是空；</div></pre></td></tr></table></figure></p>
<p>3、nullif(expr1,expr2), expr1不等于expr2，值为expr1，否则为空；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT NULLIF(201,111)    #结果为 201，因为201！=111,所以结果为201，否则为null；</div></pre></td></tr></table></figure></p>
<h5 id="WHERE-、HAVING、ON的区别是什么？"><a href="#WHERE-、HAVING、ON的区别是什么？" class="headerlink" title="WHERE 、HAVING、ON的区别是什么？"></a>WHERE 、HAVING、ON的区别是什么？</h5><p>ON，是表联结的条件；<br>WHERE，定义表行记录的过滤条件,<br>HAVING，定义分组的过滤条件；</p>
<h5 id="WHERE和HAVING的区别"><a href="#WHERE和HAVING的区别" class="headerlink" title="WHERE和HAVING的区别"></a>WHERE和HAVING的区别</h5><p>HAVING子句可以引用总计函数，而WHERE子句不能引用；<br>HAVING必须引用GROUP BY子句中的列或总计函数的列；<br>HVING位于GROUP BY 和ORDER BY之间；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL配置文件设置my.ini]]></title>
      <url>http://jianwl.com/2016/05/04/MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AEmy-ini/</url>
      <content type="html"><![CDATA[<p>//客户端设置<br>[client]</p>
<p>//设置mysql客户端连接服务器时默认使用端口<br>port = 3306</p>
<p>[mysql]</p>
<p>//设置mysql客户端默认字符集<br>default-character-set=utf8</p>
<p>//服务器端设置<br>[mysqld]</p>
<p>//mysql服务器默认监听(listen on)的TCP/IP端口<br>port=3306</p>
<p>//基准路径<br>basedir=”D:/software/MYSQL5.6”</p>
<p>//mysql数据库文件所在目录<br>datadir=”D:/software/MYSQL5.6/Data”</p>
<p>//服务端使用的字符集默认为latin1字符集，设置为utf8<br>character-set-server=utf8</p>
<p>//默认存储引擎为INNODB<br>default-storage-engine=INNODB</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL数据库设计准则]]></title>
      <url>http://jianwl.com/2016/05/03/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%87%86%E5%88%99/</url>
      <content type="html"><![CDATA[<p>设计数据库基本准则</p>
<ol>
<li>将同一类型的数据放于同一张表中;</li>
<li>避免保存冗余数据</li>
<li>避免修改、插入、删除不规则;</li>
<li>使用原子列表即对每一行的每一个属性只存一个数据;</li>
<li>避免多个空属性的设计</li>
<li>尽量避免使用可变长度列(varchar、text)，如果字段长度固定(char),速度更快一点，但要多占点空间。</li>
<li>通过简化权限，来提高查询速度</li>
<li>表的优化，随着更新和删除操作的发生，数据将变得支离破碎，通过OPTIMIZE TABLE tablename命令来修复表</li>
<li>不要创建不必要的索引；</li>
<li>在尽可能多的地方使用列的默认值，这样可以减少执行INSERT语句所花的时间。</li>
</ol>
<p>举例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">设计4张表</div><div class="line">CUSTOMERS: customerid、name、address、city</div><div class="line">ORDERS：orderid、customerid、amount、date</div><div class="line">BOOKS:isbn、author、title、price</div><div class="line">ORDER_ITEMS：orderid、isbn、quatity</div><div class="line"></div><div class="line">#为何不将address放于orders表中？</div><div class="line">1、假设一个用户下了多个订单，那么每个订单中都会出现用户的地址，重复存储，浪费空间;(冗余数据)</div><div class="line">2、假设用户换了地址，需要将每个订单中用户的地址进行更改；（修改不规则）</div><div class="line">3、每次在处理订单时，都需要插入julia的信息，当用户搬家出现两个地址时，不知道以哪个为准；（插入不规则）</div><div class="line">4、当用户收到货时，将订单从数据库中删除，那么意味着我们没有用户的地址记录不能再为它提供服务了;(删除不规则)</div><div class="line"></div><div class="line"># 假设我们需要记录每本书的书评;</div><div class="line">有两种方式:假设这家书店，只有一个书评员</div><div class="line">1、BOOKS表中添加一个字段，Review;</div><div class="line">2、创建一个新表BOOKS_REVIEWS:isbn、review</div><div class="line"></div><div class="line">假设书库太大，评书员只评论了一部分书籍，使用第一种方式，会出现大量书评为空的记录；而使用第二种方式，只存储有书评的书籍;</div></pre></td></tr></table></figure></p>
<p>Web数据库架构<br><img src="/images/Web服务器架构.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP错误和异常处理]]></title>
      <url>http://jianwl.com/2016/05/03/PHP%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h6 id="异常处理的思想"><a href="#异常处理的思想" class="headerlink" title="异常处理的思想"></a>异常处理的思想</h6><p>当try代码中出现异常后，catch块代码对异常进行处理;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">try&#123;</div><div class="line">  throw new Exception(&quot;A terrible error has occured&quot;,42);</div><div class="line">&#125;catch(Exception $e)&#123;</div><div class="line">   echo &quot; exception &quot;.$e-&gt;getCode().&quot; ：&quot;.$e-&gt;getMessage().&quot; &lt;/br&gt;&quot;.&quot; in &quot;.$e-&gt;getFile().&quot; on line &quot;.$e-&gt;getLine().&quot;&lt;br/&gt;&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h6 id="Exception类内置方法"><a href="#Exception类内置方法" class="headerlink" title="Exception类内置方法"></a>Exception类内置方法</h6><ul>
<li>getCode() 返回传递给构造器的代码号,不可重构</li>
<li>getMessage() 返回传递给构造器的消息，不可重构</li>
<li>getFile() 返回产生异常的代码文件的完整路径，不可重构</li>
<li>getLine() 返回代码文件中产生异常的代码行号，不可重构</li>
<li>getTrace() 返回一个包含产生异常的代码回退路径的数组，不可重构</li>
<li>__toString() 允许简单地显示一个Exception对象，并给出以上所有方法可以提供的信息，可以重构</li>
</ul>
<p>####### 自定义异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class myexception extends Exception&#123;</div><div class="line">  function __toString()&#123;</div><div class="line">     return &quot;&lt;table border=\&quot;1\&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Exception &quot;.$this-&gt;getCode().&quot;&lt;/strong&gt;: &quot;.$this-&gt;getMessage().&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">try &#123;</div><div class="line">  throw new myexception(&quot;happen error,parse error&quot;,405);</div><div class="line">&#125;catch(myexception $e)&#123;</div><div class="line">  echo $e;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis介绍]]></title>
      <url>http://jianwl.com/2016/05/03/Redis%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h5 id="Redis是什么？"><a href="#Redis是什么？" class="headerlink" title="Redis是什么？"></a>Redis是什么？</h5><ul>
<li><p>Redis是REmote DIctionary Server(远程字典服务器)的缩写，它以字典结构存储数据，并允许其他应用通过TCP协议读写字典中的内容。</p>
</li>
<li><p>Redis是一个开源的、高性能的基于键值对的缓存与存储系统，通过提供多种键值数据类型来适应不同的场景与存储需求；同时Redis的诸多高层级功能使其可以胜任消息队列、任务队列等不同的角色。</p>
</li>
</ul>
<h5 id="Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？"><a href="#Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？" class="headerlink" title="Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？"></a>Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？</h5><h6 id="内存存储与持久化"><a href="#内存存储与持久化" class="headerlink" title="内存存储与持久化"></a>内存存储与持久化</h6><p>Redis数据库中所有的数据都存在于内存中，内存的读写速度远快于硬盘，因此Redis在性能上对比其他基于硬盘存储的数据库有非常明显的优势。将数据存储在内存也有一定的问题，比如程序退出后，内存中的数据会丢失，不过Redis提供了对持久化的支持，即可以将内存中的数据异步写入硬盘中，同时不影响继续提供服务。</p>
<h6 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h6><p>Redis可以为每个键设置生存时间(Time To Live,TTL),生存时间到期后会自动被删除，同时Redis支持丰富的数据类型和持久化的功能，让Redis可以作为缓存系统来使用；作为缓存系统，Redis还可以限制数据占用的最大内存，在数据达到空间限制后，可以按一定的规则，淘汰不需要的键。</p>
<h6 id="简单稳定"><a href="#简单稳定" class="headerlink" title="简单稳定"></a>简单稳定</h6>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP浅拷贝和深拷贝分析]]></title>
      <url>http://jianwl.com/2016/05/03/PHP%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>在PHP中，对象的赋值实际上是引用操作，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class person&#123;</div><div class="line"> public $name;</div><div class="line">&#125;</div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person2 = $person1;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;person1-&gt;name = &quot;.$person1-&gt;name.&quot; person2-&gt;name = &quot;.$person2-&gt;name;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>因为person1和person2都只是指向同一个内存区的引用,所以修改任何一个对象都会同时修改另外一个对象.</p>
<p>在有些时候，我们其实并不希望这种引用的赋值方式，我们希望能完全复制一个对象，这时候就需要用到php中的clone（对象的复制);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class person&#123;</div><div class="line"> public $name;</div><div class="line">&#125;</div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person2 = clone $person1;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;person1-&gt;name = &quot;.$person1-&gt;name.&quot; person2-&gt;name = &quot;.$person2-&gt;name;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>因为clone的方式实际上是对整个对象的内存区域，进行了一次复制并用新的对象变量指向新的内存，因此赋值后的对象和源对象之间基本上说是独立的。</p>
<p>这是什么意思？因为PHP中的对象拷贝采用的是浅拷贝的方法，如果对象里的属性成员本身就是引用类型的，clone以后这些成员并没有真正被复制，仍然是引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class address&#123;</div><div class="line"> public $palace;</div><div class="line"> public $no;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class person&#123;</div><div class="line">public $name;</div><div class="line">public $address;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$address = new address();</div><div class="line">$address-&gt;palace = &quot;shanghai&quot;;</div><div class="line">$address-&gt;no = 21;</div><div class="line"></div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person1-&gt;address = $address;</div><div class="line"></div><div class="line">$person2 = clone $person1;</div><div class="line"></div><div class="line">echo &quot;before modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">echo &quot;=====================================&lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">$person2-&gt;address-&gt;no = 33;</div><div class="line">$person2-&gt;address-&gt;palace = &quot;beijing&quot;;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;aflter modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;; //结果为 person1-&gt;address-&gt;palace = &quot;beijing&quot;, person2-&gt;address-&gt;palace = &quot;beijing&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>一般来讲，你用clone来复制对象，希望把两个对象彻底分开，不希望他们之间有任何关联，但由于clone的浅拷贝的特性，有时候会出现非期望的结果，就像上面的例子那样。<br>$person1 -&gt;address = $address;这句话是引用类型的赋值，person1-&gt;address和person2-&gt;address 实际上是指向同一个内存区对象的数据引用，因此修改其中任何一个都会影响其他两个。</p>
<p>如何解决这个问题呢？以下采用两种方法来解决：</p>
<ul>
<li>在上面的代码中，添加address的对象拷贝即可，但治标不治本;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$person2-&gt;address = clone $person1-&gt;address;</div></pre></td></tr></table></figure>
<ul>
<li>采用PHP中的__clone方法把浅拷贝转换为深拷贝</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class address&#123;</div><div class="line"> public $palace;</div><div class="line"> public $no;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class person&#123;</div><div class="line">public $name;</div><div class="line">public $address;</div><div class="line"></div><div class="line">public function __clone()&#123;</div><div class="line"> $this-&gt;address = clone $this-&gt;address; //深拷贝的引用;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$address = new address();</div><div class="line">$address-&gt;palace = &quot;shanghai&quot;;</div><div class="line">$address-&gt;no = 21;</div><div class="line"></div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person1-&gt;address = $address;</div><div class="line"></div><div class="line">$person2 = clone $person1;</div><div class="line">echo &quot;before modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">echo &quot;=====================================&lt;br/&gt;&quot;;</div><div class="line">$person2-&gt;address-&gt;no = 33;</div><div class="line">$person2-&gt;address-&gt;palace = &quot;beijing&quot;;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;aflter modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP面向对象基础知识]]></title>
      <url>http://jianwl.com/2016/05/03/PHP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>对象直接彼此互不相同，但具有一些共同点的对象集合</p>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>举个例子，我的自行车可以被认为自行车类的一个对象，他拥有所有自行车的共同特征；</p>
<h5 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h5><p>不同的类对同一个操作可以有不同的行为；</p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>在已有类的基础上创建新类，新类包含已有类的所有的方法和属性且可以添加新的方法；PHP中只支持单重继承类，不支持多重继承类；要实现多次继承可以通过接口；</p>
<h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>初始化对象和属性,其名称必须是 __constructor().<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class classname</div><div class="line">	function __construct($param)&#123;</div><div class="line">       echo &quot;Constructor called with parameter&quot;.$param.&quot;&lt;/br&gt;&quot;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h5 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h5><p>在销毁一个类之前执行的操作，在类的引用被重置或者超出作用域时<strong>自动发生</strong>。</p>
<h5 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h5><ul>
<li>public ,设置为public的属性和方法，可以在类的内部和外部使用；</li>
<li>private,设置为private的属性和方法，只能在类的内部进行访问,方法和属性将不会被继承；</li>
<li>protected,设置为protected的属性和方法，在类的子类和类的内部中可以进行访问；<br>注：未指明方法默认为public权限，属性一定要声明访问权限否则会报错;</li>
</ul>
<h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><ul>
<li>在函数前加final，这个函数将不能被在子类中被重载；</li>
<li>在类前加final，这个类将不能被继承;</li>
</ul>
<h5 id="Per-class常量"><a href="#Per-class常量" class="headerlink" title="Per-class常量"></a>Per-class常量</h5><p>使用操作符::指定常量所属的类来访问Per-class变量;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  class Math&#123;</div><div class="line">  	const pi = 3.14;</div><div class="line">  &#125;</div><div class="line">  echo &quot;Math :: pi = &quot;.Math::pi.&quot;\n&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>在方法前添加static关键字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Math&#123;</div><div class="line">   static function squared($input)&#123;</div><div class="line">   	return $input *$input;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">echo Math::squared(8);</div></pre></td></tr></table></figure></p>
<h5 id="检查类的类型和类型提示"><a href="#检查类的类型和类型提示" class="headerlink" title="检查类的类型和类型提示"></a>检查类的类型和类型提示</h5><p>instanceof可以检查一个对象是否是特定类的实例;是否实现了某个接口；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line"> public function method1()&#123;</div><div class="line">   echo &quot;method1&quot;;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">interface C &#123;</div><div class="line">  public function method3();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extends A implements C&#123;</div><div class="line"> function method2()&#123;</div><div class="line">    echo &quot;method2&quot;;</div><div class="line"> &#125;</div><div class="line"> function method3()&#123;</div><div class="line">     echo &quot;method3&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$b = new B();</div><div class="line">$a = new A();</div><div class="line"></div><div class="line">if($b instanceof A)&#123;</div><div class="line">   echo &quot;\$a is an object of B &lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">&#125;else&#123;</div><div class="line">   echo &quot;\$a is not an object of B&lt;br/&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if($b instanceof C)&#123;</div><div class="line">   echo &quot;\$b implements interface c&quot;;</div><div class="line">&#125;else &#123;</div><div class="line">   echo &quot;\$b don&apos;t implements interface c&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="类提示的思想"><a href="#类提示的思想" class="headerlink" title="类提示的思想"></a>类提示的思想</h5><p>指定参数传入的类型，如果不是传入该类型参数将报错；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function check_hint(B $someclass)&#123;&#125;; //如果传入的参数类型不是B的实例，将报错;</div></pre></td></tr></table></figure></p>
<h5 id="延迟静态绑定"><a href="#延迟静态绑定" class="headerlink" title="延迟静态绑定"></a>延迟静态绑定</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//输出的结果为 who method of class B;</div><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line">   public static function who()&#123;</div><div class="line">     echo &quot;who method of class A&quot;;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public static function test()&#123;</div><div class="line">     echo static::who(); //here comes later static binding;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extends A&#123;</div><div class="line">   public static function who()&#123;</div><div class="line">     echo &quot;who method of class B&quot;;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">B::test();</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h5 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h5><p> call方法用来监控一个对象中的其他方法，如果试着调用一个对象中不存在或被权限控制中的方法，__call方法将被自动调用;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line">  public function __call($name,$arguments)&#123;</div><div class="line">     echo &quot;call of method is =&gt;&quot;.$name.&quot; &lt;br/&gt;&quot;;</div><div class="line">     echo &quot;arguments is&quot;.implode(&quot;,&quot;,$arguments).&quot;&lt;br/&gt;&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$a = new A();</div><div class="line">$a-&gt;callMe(&quot;bac&quot;,&quot;123&quot;,&quot;www&quot;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="类转换为字符串"><a href="#类转换为字符串" class="headerlink" title="类转换为字符串"></a>类转换为字符串</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class A&#123;</div><div class="line">public $name;</div><div class="line">function __toString()&#123;</div><div class="line"> return (var_export($this,TRUE));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$a = new A();</div><div class="line">$a-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$a-&gt;__toString();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL数据类型]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CHAR		1~255个字符的定长字符串，它的长度必须在创建时规定</div><div class="line">NCHAR		CHAR的特殊形式，用来支持多字节或Unicode字符</div><div class="line">NVARCHAR	TEXT的特殊形式，用来支持多字节或Unicode字符</div><div class="line">TEXT(也称 VARCHAR) 边长文本</div></pre></td></tr></table></figure>
<h5 id="变长字符串和定长字符串的区别？"><a href="#变长字符串和定长字符串的区别？" class="headerlink" title="变长字符串和定长字符串的区别？"></a>变长字符串和定长字符串的区别？</h5><p>边长字符串存储任意长度的文本，其最大长度随不同的数据类型和DBSM而变化<br>定长字符串接收长度固定的字符串，其长度是在创建表时指定的</p>
<h5 id="为何不全用变长字符串？"><a href="#为何不全用变长字符串？" class="headerlink" title="为何不全用变长字符串？"></a>为何不全用变长字符串？</h5><p>DBSM处理定长字符串的速度比处理变长的快，所以许多DBSM不允许对变长列进行索引。</p>
<h5 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BIT		 单个二进制位值，或者为0或者为1</div><div class="line">DECIMAL	 定点或精读可变的浮点值</div><div class="line">FLOAT    浮点值</div><div class="line">INT	     4字节整数值	支持-2147483648~2147483647的值</div><div class="line">REAL     4字节浮点值</div><div class="line">SMALLINT 2字节整数值，支持-32768~32767的值</div><div class="line">TINYINT  1字节整数值，支持0~255的值</div></pre></td></tr></table></figure>
<h5 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DATE	      日期值</div><div class="line">DATETIME      日期时间值</div><div class="line">SMALLDATETIME 日期时间，精确到分</div><div class="line">TIME	      时间值</div></pre></td></tr></table></figure>
<h5 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BINARY 		定长二进制数据，最大长度255B到8000B</div><div class="line">LONG RAW	变长二进制数据,最长2GB</div><div class="line">RAW			定长二进制数据，最多255B</div><div class="line">VARBINARY   变长二进制数据，最大长度255B到8000B</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL事务处理]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h5 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h5><p>事务，可以保证一组操作中，不会中途停止，它们要么全部执行，要么就不执行。</p>
<h1 id="事务处理的术语"><a href="#事务处理的术语" class="headerlink" title="事务处理的术语"></a>事务处理的术语</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">事务(transaction) 指一组SQL语句</div><div class="line">回退(rollback) 指撤销指定SQL语句的过程</div><div class="line">提交(commit) 指将未存储的SQL语句结果写入到数据库表</div><div class="line">保存点(savepoint) 指事务处理中设置的临时占位符，可以对它发布回退。</div></pre></td></tr></table></figure>
<h5 id="可以回退哪些语句？"><a href="#可以回退哪些语句？" class="headerlink" title="可以回退哪些语句？"></a>可以回退哪些语句？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事务处理用来管理INSERT、UPDATE、DELETE语句，不能回退SELECT、CREATE、DROP操作。</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL存储过程]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>用户定义的一系列SQL语句的集合，设计特定表和其他对象的任务，用户可以调用存储过程。</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>通常是数据库已定义的方法，它接收参数并返回魔种类型的值并不涉及特定用户表.</p>
<h4 id="存储过程和函数的区别"><a href="#存储过程和函数的区别" class="headerlink" title="存储过程和函数的区别"></a>存储过程和函数的区别</h4><ol>
<li>函数只能通过RETURN语句返回单个值或对象，而存储过程不允许执行RETURN，它通过OUT参数返回多个值</li>
<li>函数可以嵌入SQL中使用，可以在SELECT中调用，而存储过程不行</li>
<li>存储过程实现的功能复杂一些，而函数的实现功能针对性更强一些</li>
<li>函数限制比较多，比如不能用临时表，只能用表变量，而存储过程的限制相对少一些。</li>
</ol>
<h4 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h4><ul>
<li>通过把处理封装在容易使用的单元中，简化复杂的操作</li>
<li>多个开发人员使用同一存储过程，保证了数据的一致性；</li>
<li>简化对变动的管理，如果业务逻辑有变化，只需要改动存储过程的代码，使用它的人员甚至都不需要知道这些变化。</li>
<li>因为存储过程通常以编译过的形式存储，而且性能更高；</li>
</ul>
<h4 id="存储过程的缺点"><a href="#存储过程的缺点" class="headerlink" title="存储过程的缺点"></a>存储过程的缺点</h4><ul>
<li>不同DBMS的存储过程语法不同，移植性较差；</li>
<li>编写存储过程比编写简单SQL语句复杂，要求比较高；</li>
</ul>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"># 创建存储过程</div><div class="line">CREATE PROCEDURE productpricing()</div><div class="line">BEGIN</div><div class="line">	SELECT AVG(prod_price) AS priceaverage</div><div class="line">    FROM products;</div><div class="line">END;</div><div class="line"></div><div class="line"># 调用存储过程</div><div class="line">CALL productpricing();</div><div class="line"></div><div class="line"># 删除存储过程</div><div class="line"></div><div class="line">DROP PROCEDURE productpricing();</div><div class="line"></div><div class="line"># 使用参数</div><div class="line">CREATE PROCEDURE productpricing(</div><div class="line">	OUT pl DECIMAL(8,2),</div><div class="line">    OUT ph DECIMAL(8,2),</div><div class="line">    OUT pa DECIMAL(8,2)</div><div class="line">)</div><div class="line">BEGIN</div><div class="line">	SELECT Min(prod_price)</div><div class="line">    INTO pl</div><div class="line">    FROM products;</div><div class="line">    SELECT Max(prod_price)</div><div class="line">    INTO ph</div><div class="line">    FROM products;</div><div class="line">	SELECT AVG(prod_price)</div><div class="line">    INTO pa</div><div class="line">    FROM products;</div><div class="line">END;</div><div class="line"></div><div class="line">提示：DECIMAL(8,2)表示输出的数总共有8位，小数点有2位；</div><div class="line"></div><div class="line"># 调用，所有MYSQL变量名都必须以@开始</div><div class="line">CALL productpricing(@pricelow,@pricehigh,@priceaverage);</div><div class="line"></div><div class="line"># 显示</div><div class="line">SELECT @pricelow,@pricehigh,@priceaverage;</div><div class="line"></div><div class="line"># IN、OUT 参数</div><div class="line">CREATE PROCEDURE ordertotal(</div><div class="line">	IN onumber INT,</div><div class="line">    OUT ototal DECIMAL(8,2)</div><div class="line">)</div><div class="line">BEGIN</div><div class="line">	SELECT SUM(item_price * quantity)</div><div class="line">    FROM orderitems</div><div class="line">    WHERE order_num = onumber;</div><div class="line">    INTO ototal;</div><div class="line">END;</div><div class="line"></div><div class="line"># 调用</div><div class="line">CALL ordertotal(20005,@ototal);</div><div class="line"></div><div class="line"># 显示</div><div class="line">SELECT @ototal;</div><div class="line"></div><div class="line">提示：</div><div class="line">IN、OUT参数相当于高级语言中的函数的传值和传引用</div><div class="line">DECLARE定义局部变量</div><div class="line">SHOW PROCEDURE STATUS 可以查看存储过程列表</div></pre></td></tr></table></figure>
<p>参考资料：<br><a href="http://fqk.io/mysql-proceduce-function-diff/" target="_blank" rel="external">MySQL 存储过程和函数区别</a><br><a href="http://fqk.io/note-mysql-5/" target="_blank" rel="external">MySQL 笔记 5</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL视图]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h4 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h4><p>视图是虚拟的表，只包含使用时动态检索的查询，同时视图本身是不包含数据的，返回的数据是从其他表检索出来的。</p>
<h4 id="使用视图的好处？"><a href="#使用视图的好处？" class="headerlink" title="使用视图的好处？"></a>使用视图的好处？</h4><ul>
<li>保护数据，只让开发者看到表中的部分数据；</li>
<li>更改数据格式和表示，视图可返回与底层数据表的表示和格式不同的数据；</li>
<li>重用SQL；</li>
<li>简化复杂的SQL,在编写查询后，可以方便的重写它而不必知道其他查询细节</li>
<li>可以嵌套查询，支持子查询；</li>
</ul>
<h4 id="视图的规则"><a href="#视图的规则" class="headerlink" title="视图的规则"></a>视图的规则</h4><ol>
<li>视图需唯一命名</li>
<li>创建视图，必须具有足够的权限</li>
<li>视图不能索引，也不能关联触发器或默认值</li>
<li>视图可以和表一起使用</li>
<li>创建视图的数目没有限制</li>
<li>ORDER BY 可以用在视图中，若SELECT语句中也有ORDER BY，则会覆盖视图中的ORDER BY</li>
<li>视图可以嵌套</li>
<li>视图只做只读查询，不能将数据写回底层表；</li>
</ol>
<h4 id="视图的缺点"><a href="#视图的缺点" class="headerlink" title="视图的缺点"></a>视图的缺点</h4><p>因为视图不包含数据，所以每次使用视图是，都必须处理查询执行时的所有检索。如果使用多个联结和过滤创建了复杂的视图或者嵌套视图，性能可能下降的很厉害。</p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>视图一般只用于检索，而不用于更新</p>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 创建视图</div><div class="line">CREATE VIEW ProductCustomers AS</div><div class="line">SELECT cust_name,cust_contact,prod_id</div><div class="line">FROM Customers,Orders,OrderItems</div><div class="line">WHERE Customers.cust_id = Orders.cust_id</div><div class="line">AND OrderItems.order_num = Orders.order_num ;</div><div class="line"></div><div class="line"># 查询视图数据</div><div class="line">SELECT * FROM ProductCustomers;</div><div class="line"></div><div class="line"># 移除视图</div><div class="line">DROP VIEW ProductCustomers;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL创建表]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E5%88%9B%E5%BB%BA%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># 创建表</div><div class="line">CREATE TABLE Products(</div><div class="line"> prod_id	CHAR(10)	NOT NULL,</div><div class="line"> vend_id	CHAR(10) 	NOT NULL,</div><div class="line"> prod_name	CHAR(254)	DEFAULT &apos;xxx&apos;,</div><div class="line"> PRIMARY KEY  (prod_id)</div><div class="line">)ENGINE=InnoDB;</div><div class="line"></div><div class="line"># 创建索引</div><div class="line">CREATE INDEX indexname ON Products(prod_name);</div><div class="line"></div><div class="line"># 索引的作用</div><div class="line">1、索引用于数据过滤和数据排序</div><div class="line">2、索引改善检索操作性能，但降低了数据插入、修改、删除的性能；</div><div class="line">3、索引要占大量的存储空间</div><div class="line"></div><div class="line"></div><div class="line"># 添加列</div><div class="line">ALTER TABLE Products ADD prod_price INT;</div><div class="line"></div><div class="line"># 删除列</div><div class="line">ALTER TABLE Products DROP COLUMN prod_price;</div><div class="line"></div><div class="line">特别注意：更新/删除表之前最好做一个完整的备份，数据库的更改不能撤销;</div><div class="line"></div><div class="line">#定义外键</div><div class="line">ALTER TABLE Products</div><div class="line">ADD CONSTRAINT vend_id</div><div class="line">FOREIGN KEY(vend_id) REFERENCES Vendor(vend_id);</div><div class="line"></div><div class="line">#定义外键的好处</div><div class="line">两张表关联,保证数据的一致性</div><div class="line"></div><div class="line">#创建外键的条件</div><div class="line">外键是表中的一列，其值必须列在另一表的主键中；</div><div class="line"></div><div class="line">#重命名表</div><div class="line">RENAME TABLE Customers TO customers;</div></pre></td></tr></table></figure>
<h5 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h5><p>唯一标识表示表中的每一行的列；</p>
<h5 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h5><p>指定列名不为空；</p>
<h5 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h5><p>插入时，如果不给出值，自动采用默认值,MYSQL中默认值只支持常量，不允许使用函数</p>
<h5 id="引擎类型"><a href="#引擎类型" class="headerlink" title="引擎类型"></a>引擎类型</h5><ul>
<li>InnoDB是一个可靠的事务处理引擎，它不支持全文搜索</li>
<li>MEMORY在功能等同于MYISAM，但由于数据存储在内存中，速度很快(适合创建临时表)</li>
<li>MyISAM是一个性能极高的引擎，它支持全文搜索，但不支持事务处理</li>
<li>引擎可以混用，但外键不能跨引擎</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL更新删除数据]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>UPDATE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 更新一条数据</div><div class="line">UPDATE Customers SET cust_email = &quot;kim@163.com&quot; WHERE cust_id = &quot;10005&quot;;</div><div class="line"></div><div class="line">特别注意：别忘了WHERE条件，否则将影响整张表;</div></pre></td></tr></table></figure></p>
<p>DELETE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 删除一条记录</div><div class="line">DELETE FROM Customers WHERE cust_id = &quot;10006&quot;;</div><div class="line"></div><div class="line">特别注意：别忘了WHERE条件，否则将删除整张表,推荐先用SELECT查询需要删除的记录，再执行删除操作;</div><div class="line"></div><div class="line">#删除整个表</div><div class="line">DROP TABLE Customers;</div><div class="line"></div><div class="line"># 外键的好处</div><div class="line">使用外键确保完整性的好处是，可以防止删除某个关系需要用到的行。</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL插入数据]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>INSERT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">INSERT INTO Customers VALUES(NULL, &apos;张三&apos;);</div><div class="line"></div><div class="line"># 推荐更安全、扩展性更好的方式</div><div class="line">INSERT INTO Customers(cust_id, cust_name) VALUES(NULL, &apos;张三&apos;);</div><div class="line"></div><div class="line"># 进一步，无需插入 AUTO_INCREMENT属性的列</div><div class="line">INSERT INTO Customers(cust_name) VALUES(&apos;张三&apos;);</div><div class="line"></div><div class="line"># 插入多条数据，单条语句插入比多次语句性能更高</div><div class="line">INSERT INTO Customers(cust_name) VALUES(&apos;张三&apos;),(&apos;李四&apos;);</div><div class="line"></div><div class="line"># 插入检索出来的数据</div><div class="line">INSERT INTO Customers(cust_id,cust_name) SELECT cust_id,cust_name FROM Old_Customers;</div><div class="line"></div><div class="line"># 从一个表复制到另外一个表</div><div class="line">CREATE TABLE CustCopy AS SELECT * FROM Customers;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL数据库无法插入中文]]></title>
      <url>http://jianwl.com/2016/04/29/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%B3%95%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87/</url>
      <content type="html"><![CDATA[<h5 id="MYSQL无法插入中文，报Incorrect-string-value-‘-xD5-xC5-xC8-xFD’错误"><a href="#MYSQL无法插入中文，报Incorrect-string-value-‘-xD5-xC5-xC8-xFD’错误" class="headerlink" title="MYSQL无法插入中文，报Incorrect string value: ‘\xD5\xC5\xC8\xFD’错误"></a>MYSQL无法插入中文，报Incorrect string value: ‘\xD5\xC5\xC8\xFD’错误</h5><p><code>mysql&gt; status;</code><br><img src="/images/mysql中文无法插入.png" alt=""></p>
<h5 id="使用的库的字符集是latin1，该字符集不支持中文字符"><a href="#使用的库的字符集是latin1，该字符集不支持中文字符" class="headerlink" title="使用的库的字符集是latin1，该字符集不支持中文字符"></a>使用的库的字符集是latin1，该字符集不支持中文字符</h5><p><code>mysql&gt; show CREATE TABLE person1;</code><br><img src="/images/mysql中文无法插入2.png" alt=""></p>
<h5 id="修改表字符集"><a href="#修改表字符集" class="headerlink" title="修改表字符集"></a>修改表字符集</h5><p><code>mysql&gt; ALTER TABLE person1 character set utf8;</code></p>
<p><code>mysql&gt; show CREATE TABLE person1;</code><br><img src="/images/mysql中文无法插入3.png" alt=""></p>
<h5 id="修改字段字符集"><a href="#修改字段字符集" class="headerlink" title="修改字段字符集"></a>修改字段字符集</h5><p><code>mysql&gt; ALTER TABLE person1 modify name varchar(20) character set utf8;</code><br><img src="/images/mysql中文无法插入4.png" alt=""></p>
<h5 id="这时在windows下的CMD控制台的MYSQL中执行"><a href="#这时在windows下的CMD控制台的MYSQL中执行" class="headerlink" title="这时在windows下的CMD控制台的MYSQL中执行"></a>这时在windows下的CMD控制台的MYSQL中执行</h5><p><code>mysql&gt;INSERT INTO person1(id,name,age) VALUES (7,&#39;张三&#39;,21);</code><br><img src="/images/mysql中文无法插入5.png" alt=""></p>
<h5 id="发现仍然报错，什么原因呢？"><a href="#发现仍然报错，什么原因呢？" class="headerlink" title="发现仍然报错，什么原因呢？"></a>发现仍然报错，什么原因呢？</h5><p><img src="/images/mysql中文无法插入6.png" alt=""><br>因为CMD控制台的编码是GBK的，但MYSQL的编码是UTF8所以出错;最后，用第三方软件navicate，在person1表中，执行刚刚的插入操作是可以成功.</p>
<h5 id="最后设置数据库的编码："><a href="#最后设置数据库的编码：" class="headerlink" title="最后设置数据库的编码："></a>最后设置数据库的编码：</h5><p><code>mysql&gt;show variables like &#39;character_set_%&#39;;</code><br><img src="/images/mysql中文无法插入7.png" alt=""><br><code>mysql&gt;set character_set_database=utf8;</code><br><img src="/images/mysql中文无法插入8.png" alt=""></p>
<h5 id="关于MYSQL数据库的配置"><a href="#关于MYSQL数据库的配置" class="headerlink" title="关于MYSQL数据库的配置"></a>关于MYSQL数据库的配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1、修改mysql/my.ini 配置文件</div><div class="line">[client]</div><div class="line">default-character-set=utf8</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">default-storage-engine=INNODB</div><div class="line">character-set-server=utf8</div><div class="line"></div><div class="line">2、重启MYSQL</div><div class="line">#windows下，停止MYSQL服务</div><div class="line">net stop mysql</div><div class="line"></div><div class="line">#启动服务</div><div class="line">net start mysql</div><div class="line"></div><div class="line">3、修改成功，进入MYSQL查看字符集</div><div class="line">show variables like &apos;character_set_%&apos;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL常用函数]]></title>
      <url>http://jianwl.com/2016/04/28/SQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h4 id="常用文本处理函数"><a href="#常用文本处理函数" class="headerlink" title="常用文本处理函数"></a>常用文本处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Concat(str1,str2,str3)拼接字符串</div><div class="line">Ltrim()	去掉左边的空格</div><div class="line">Trim()	去掉所有的空格</div><div class="line">Left()	返回串左边的字符</div><div class="line">Locate() 找出串的一个子串</div><div class="line">Lower() 将串转换为小写</div><div class="line">Right() 返回串右边的字符</div><div class="line">Soundex() 返回串的SOUNDEX值</div><div class="line">SubString() 返回子串的字符</div><div class="line">Upper() 将串转换为大写</div></pre></td></tr></table></figure>
<h4 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">AddDate() 增加一个日期（天、周等）</div><div class="line">AddTime() 增加一个时间（时、分等）</div><div class="line">CurDate() 返回当前日期</div><div class="line">CurTime() 返回当前时间</div><div class="line">Date()</div><div class="line">DateDiff()</div><div class="line">Date_Add()</div><div class="line">Date_Format()</div><div class="line">Day()</div><div class="line">DayOfWeek()</div><div class="line">Hour()</div><div class="line">Minute()</div><div class="line">Month()</div><div class="line">Now()</div><div class="line">Second()</div><div class="line">Time()</div><div class="line">Year()</div><div class="line"></div><div class="line"># 实战</div><div class="line">SELECT cust_id, order_num FROM orders WHERE Date(order_date) BETWEEN &apos;2005-09-01&apos; AND &apos;2005-09-30&apos;;</div><div class="line"></div><div class="line">SELECT cust_id, order_num FROM orders WHERE Year(order_date) = 2005 AND Month(order_date) = 9;</div></pre></td></tr></table></figure>
<h4 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Abs() 绝对值</div><div class="line">Cos()</div><div class="line">Exp() 指数</div><div class="line">Mod()</div><div class="line">Pi() </div><div class="line">Rand()</div><div class="line">Sin()</div><div class="line">Sqrt() 平方根</div><div class="line">Tan() 正切值</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL查询]]></title>
      <url>http://jianwl.com/2016/04/28/SQL%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h4 id="SQL注释"><a href="#SQL注释" class="headerlink" title="SQL注释"></a>SQL注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  --    行内注释</div><div class="line">/* */   多行注释</div></pre></td></tr></table></figure>
<h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"># 返回不同的值</div><div class="line">SELECT DISTINC name FROM person;</div><div class="line"></div><div class="line">特别注意：不能部分使用DISTINC，如, SELECT DISTINC name, age FROM person;查询结果显示name和age都不同的记录</div><div class="line"></div><div class="line"># 分页查询</div><div class="line">SELECT name, age FROM person LIMIT 1,4;</div><div class="line"></div><div class="line"># 排序检索数据</div><div class="line">SELECT name, age FROM person ORDER BY name DESC, age DESC;</div><div class="line"></div><div class="line"># 过滤查询</div><div class="line">SELECT name, age FROM person WHERE age BETWEEN 23 AND 30;</div><div class="line"></div><div class="line">## WHERE子句操作符</div><div class="line">    &lt;&gt;				不等于</div><div class="line">    !=				不等于</div><div class="line">    &lt;=				小于等于</div><div class="line">    &gt;=				大于等于</div><div class="line">    BETWEEN AND	    在指定两值之间</div><div class="line">    IS NULL 	    为NULL的值</div><div class="line">    OR				匹配任一条件的记录</div><div class="line">    IN				指定匹配清单的关键字，功能和OR相当,多个条件用逗号隔开如：IN(condition1,condition2)</div><div class="line">    NOT			    否定其后跟的所有条件</div><div class="line"></div><div class="line">特别注意：ORDER BY 应放于最后一条子语句，否则报错; 默认排序为升序ASC; DESC关键字只应用到直接位于其前面的列名。</div><div class="line"></div><div class="line"># 模糊查询</div><div class="line">SELECT name, age FROM person WHERE name LIKE &apos;张%&apos;;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">%  	任意0个、1个、多个字符,可以匹配任何东西，除了NULL</div><div class="line">_	有且仅匹配一个字符</div><div class="line"></div><div class="line"></div><div class="line"># 字段使用别名</div><div class="line">SELECT name AS new_name,age FROM person;</div><div class="line"></div><div class="line"># 表使用别名</div><div class="line">SELECT cust_name,cust_contact FROM Customers AS C,Orders AS O WHERE C.cust_id = O.cust_id;</div><div class="line"></div><div class="line"># 分组</div><div class="line">SELECT age, name,COUNT(*) AS numbers FROM person GROUP BY age,name;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">1、分组中如果包含具有NULL值的行，则NULL将作为一个分组返回，如果列中包含多个NULL，将它们分为同一组；</div><div class="line">2、除聚集计算外(如：COUNT()、MAX()等)，SELECT语句中的每一列都必须在GROUP BY 子句中给出；</div><div class="line">3、GROUP BY 子句可以包含任意数目的列</div><div class="line"></div><div class="line"># 分组过滤</div><div class="line">SELECT age, name, COUNT(*) AS numbers FROM person GROUP BY age,name HAVING COUNT(*) &gt; 2;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">HAVING等同于WHERE，唯一的区别是，HAVING可用于分组过滤，WHERE不可以。WHERE是分组前的过滤，HAVING是分组后的过滤；</div><div class="line"></div><div class="line"># 子查询练习</div><div class="line">查询所有购买order_item = 1的用户信息；</div><div class="line">SELECT order_num FROM orderitems where order_item=1;</div><div class="line"></div><div class="line">Select cust_id from orders where order_num in (SELECT order_num FROM orderitems where order_item=1);</div><div class="line"></div><div class="line">SELECT cust_name,cust_address,cust_city FROM customer WHERE cust_id in (Select cust_id from orders where order_num in (SELECT order_num FROM orderitems where order_item=1));</div><div class="line"></div><div class="line"># 等值联结查询</div><div class="line">SELECT vend_name, prod_name, prod_price FROM Vendors, Products WHERE Vendors.vend_id = Products.vend_id;</div><div class="line"></div><div class="line">特别注意：联结两表时，实际要做的是将第一个表的每一行和第二个表的每一行进行配对;如果没有联结条件，检索出行的数目将是两个表行数的乘积；</div><div class="line"></div><div class="line"># 内联查询</div><div class="line">SELECT vend_name, prod_name, prod_price FROM Vendors INNER JOIN Products ON Vendors.vend_id = Products.vend_id;</div><div class="line"></div><div class="line">特别注意：内联条件用特定的ON而不是WHERE; 匹配两表都包含的记录，不包含列为NULL记录；</div><div class="line"></div><div class="line"># 自联结查询</div><div class="line">SELECT c1.cust_id,c1.cust_name,c1.cust_contact FROM Custormer AS c1,Custormer AS c2 WHERE c1.cust_name = c2.cust_name AND c2.cust_contact = &quot;JIM jones&quot;;</div><div class="line"></div><div class="line">特别注意：别忘了c1.cust_name = c2.cust_name的条件！两表联结时，检索出行的数目是两表行数的乘积；</div><div class="line"></div><div class="line"># 外联结查询</div><div class="line">左外联：SELECT c.cust_id,o.order_num FROM Custormers AS c LEFT OUTER JOIN Orders AS o ON c.cust_id = o.cust_id;</div><div class="line"></div><div class="line">右外联：SELECT c.cust_id,o.order_num FROM Custormers AS c RIGHT OUTER JOIN Orders AS o ON c.cust_id = o.cust_id;</div><div class="line"></div><div class="line">特别注意：外联包含没有关联的行，RIGHT或LEFT指定了包含其所有行的表,RIGHT指出使用右边表的所有行，LEFT则反之；且，如果包含匹配项为NULL的记录；</div><div class="line"></div><div class="line"># 带聚合函数的联结</div><div class="line">SELECT c.cust_id,COUNT(*) AS num FROM Customers AS c INNER JOIN Orders AS o ON c.cust_id = o.cust_id GROUP BY c.cust_id;</div><div class="line"></div><div class="line"># 组合查询</div><div class="line">SELECT cust_name,cust_city FROM Customers WHERE cust_name = &apos;张三&apos; UNION SELECT cust_name,cust_city FROM Customers WHERE cust_city = &quot;shangHai&quot;;</div><div class="line"></div><div class="line">等价于 SELECT cust_name,cust_city FROM Customers WHERE cust_name = &apos;张三&apos; OR cust_city = &apos;shangHai&apos;;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">1、组合查询各个查询，查询列名应相同，且顺序也要一致；</div><div class="line">2、UNION必须由两条或以上的SELECT语句组成</div><div class="line">3、默认去除重复行，使用UNION ALL可以返回所有行</div></pre></td></tr></table></figure>
<h1 id="总结回顾"><a href="#总结回顾" class="headerlink" title="总结回顾"></a>总结回顾</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># SELECT子句及其顺序</div><div class="line"></div><div class="line">SELECT		要返回的列或表达式</div><div class="line">FROM        从中检索数据的表</div><div class="line">WHERE	    行级过滤</div><div class="line">GROUP BY	分组说明</div><div class="line">HAVING		分组过滤</div><div class="line">ORDER BY	输出排序顺序</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优化SQL性能小结]]></title>
      <url>http://jianwl.com/2016/04/28/%E4%BC%98%E5%8C%96SQL%E6%80%A7%E8%83%BD%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h6 id="应用层面优化技巧"><a href="#应用层面优化技巧" class="headerlink" title="应用层面优化技巧"></a>应用层面优化技巧</h6><p>1、注意LIKE模糊查询的使用，避免%%，可以使用后面带% ，双%是不走索引的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句： select * from admin where admin_name like ‘%de%&apos;</div><div class="line"></div><div class="line">优化为： select * from admin where admin_name &gt;=&apos;de&apos; and admin_nam &lt;&apos;df&apos; （注意不是等效的这里试试提供优化的思路）</div></pre></td></tr></table></figure></p>
<p>2、尽量避免在列上进行运算，这样会导致索引失效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原语句： select * from admin where year(admin_time)&gt;2014</div><div class="line"></div><div class="line">优化为： select * from admin where admin_time&gt; &apos;2014-01-01′</div></pre></td></tr></table></figure></p>
<p>3、仅列出需要查询的字段，这对速度不会有明显影响，主要考虑节省内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句： select * from admin</div><div class="line"></div><div class="line">优化为： select admin_id,admin_name,admin_password from admin</div></pre></td></tr></table></figure></p>
<p>4、使用批量插入语句节省交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">原来语句：insert into admin(admin_name,admin_password) values (‘test1′,&apos;pass1′);</div><div class="line"></div><div class="line">insert into admin(admin_name,admin_password) values (‘test2′,&apos;pass2′);</div><div class="line"></div><div class="line">insert into admin(admin_name,admin_password) values (‘test3′,&apos;pass3′)</div><div class="line"></div><div class="line">优化为： insert into admin(admin_name,admin_password) values(‘test1′,&apos;pass1′),(‘test2′,&apos;pass2′),(‘test3′,&apos;pass3′)</div></pre></td></tr></table></figure></p>
<p>5、limit的基数比较大时使用between。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句：select * from admin order by admin_id limit 100000,10</div><div class="line"></div><div class="line">优化为：  select * from admin where admin_id between 100000 admin 100010 order by admin_id</div></pre></td></tr></table></figure></p>
<p>6、不要使用rand函数获取多条随机记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句： select * from admin order by rand() limit 20</div><div class="line"></div><div class="line">优化为： select * from admin as t1 Join(select round(rand()*((select max(admin_id) from admin)-(select min(id) from admin))+(select min(id) from admin)) as id) as t2 where t1.id&gt;=t2.id order by t1.id limit</div></pre></td></tr></table></figure></p>
<p>7、避免使用NULL<br>8、不要做无谓的排序操作，而应尽可能在索引中完成排序<br>9、不要使用count(col)，而应该是count(*)</p>
<h6 id="count-col-和count-有什么区别？"><a href="#count-col-和count-有什么区别？" class="headerlink" title="count(col)和count(*)有什么区别？"></a>count(col)和count(*)有什么区别？</h6><p>count(*)通常是对主键进行索引扫描，统计表中所有符合的记录总数;而count(col)是对某个字段进行扫描，统计表中所有符合COL的记录总数;顺便提一下，count(col)统计记录总数时，是不包含col值为NULL的记录的；</p>
<h6 id="count时的WHERE执行原理？"><a href="#count时的WHERE执行原理？" class="headerlink" title="count时的WHERE执行原理？"></a>count时的WHERE执行原理？</h6><p>count的时候，如果有WHERE限制的情况，总是需要对MYSQL进行全表遍历，然后返回所得记录的总数；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Web攻击技术]]></title>
      <url>http://jianwl.com/2016/04/28/Web%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>Web攻击模式主要有以下两种：</p>
<ul>
<li>主动攻击</li>
<li>被动攻击</li>
</ul>
<h3 id="主动攻击"><a href="#主动攻击" class="headerlink" title="主动攻击"></a>主动攻击</h3><p>攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问这些资源。主动攻击力最具代表性的就是SQL注入攻击和OS命令注入工具。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//跨站脚本攻击</div><div class="line">比如修改用户信息时，将用户名字改为“ 张三 &lt;script&gt; ”,经浏览器解析后，造成意想不到的灾难。</div><div class="line"></div><div class="line">//SQL注入攻击</div><div class="line">假设需要查询参数为name=张三 &amp; state=1， 正常的输入URL是这样的http://xxx/get?name=张三&amp;state=1，如果在张三后面加上 &apos;--&apos; 就会导致 state=1的条件将被注释掉，类似于SQL --&gt; SELECT * FROM person WHERE name=张三 -- AND state=1</div></pre></td></tr></table></figure></p>
<h3 id="被动攻击"><a href="#被动攻击" class="headerlink" title="被动攻击"></a>被动攻击</h3><p>利用圈套策略执行攻击代码的攻击模式，在被动攻击过程中，攻击者不直接对目标web应用访问发起攻击。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket协议]]></title>
      <url>http://jianwl.com/2016/04/28/WebSocket%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h3 id="WebSocket技术为何出现？"><a href="#WebSocket技术为何出现？" class="headerlink" title="WebSocket技术为何出现？"></a>WebSocket技术为何出现？</h3><p>WebSocket技术的出现是为了解决HTTP协议的瓶颈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、一条连接只可发送一个请求</div><div class="line">2、请求只能从客户端开始，客户端不能接收除响应以外的指令。</div><div class="line">3、请求/响应首部未经压缩就发送，首部信息越大，延时越高。</div><div class="line">4、发送冗长的首部，每次互相发送相同的首部造成资源的浪费。</div><div class="line">5、可任意选择压缩格式，非强制压缩发送。</div></pre></td></tr></table></figure></p>
<h3 id="WebSocket技术的主要特点"><a href="#WebSocket技术的主要特点" class="headerlink" title="WebSocket技术的主要特点"></a>WebSocket技术的主要特点</h3><h4 id="推送功能"><a href="#推送功能" class="headerlink" title="推送功能"></a>推送功能</h4><p>支持服务端向客户端推送数据的推送功能，这样服务器可直接发送数据，不必等待客户端的请求。</p>
<h4 id="减少通信量"><a href="#减少通信量" class="headerlink" title="减少通信量"></a>减少通信量</h4><p>只要建立起Socket连接，就希望一直保持连接状态，和HTTP相比，不但每次连接时的总开销小了，而且WebSocket首部信息也很小，通信量也相应减小了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP使用的认证方式]]></title>
      <url>http://jianwl.com/2016/04/28/HTTP%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>Http使用的认证方式如下所示：</p>
<ol>
<li>BASIC认证</li>
<li>DIGEST认证</li>
<li>SSL客户端认证</li>
<li>基于表单的认证</li>
</ol>
<h3 id="BASIC认证"><a href="#BASIC认证" class="headerlink" title="BASIC认证"></a>BASIC认证</h3><p>1、当请求资源需要BASIC认证时，服务器会随状态码401，返回带WWW-Authenticate首部字段响应<br>2、接收到状态码401，需要将用户ID和密码发送给服务器。发送密码由用户ID和密码组成，中间用”:”连接，后经过BASE64编码处理。<br>3、接收到首部字段你Authticate请求的服务器，会认证信息的正确性进行验证，通过验证，则返回Request-URI的响应。</p>
<p>缺点：<br>BASIC认证虽然采用BASE64编码，但这并不是加密，不需要附加任何信息就能将其解码。在认证过程中被窃听，泄露账号密码的可能性较高</p>
<h3 id="DIGEST认证"><a href="#DIGEST认证" class="headerlink" title="DIGEST认证"></a>DIGEST认证</h3><p>1、客户端发送请求给服务端<br>2、服务端发送临时的咨询码(随机数，nonce)以及告知需要认证的状态码401<br>3、客户端接收到状态码401，发送摘要以及由咨询码算出来的响应码<br>4、认证成功返回200，失败再次发送状态码401</p>
<p>缺点：<br>虽然可以提供防止密码被盗的保护机制，但无法防止伪装用户。</p>
<h3 id="SSL客户端认证"><a href="#SSL客户端认证" class="headerlink" title="SSL客户端认证"></a>SSL客户端认证</h3><p>1、接收到认证资源的请求，服务端会发送Certificate Request报文，要求客户端提供客户端证书。<br>2、客户端会把客户端证书信息以Client Certificate报文方式发送给服务器。<br>3、服务器验证客户端证书，验证通过后方可领取证书内客户端的公开密钥。</p>
<p>缺点：<br>导入和维护的费用昂贵</p>
<h3 id="基于表单认证"><a href="#基于表单认证" class="headerlink" title="基于表单认证"></a>基于表单认证</h3><p>1、客户端向服务器端发送用户信息（ID和密码）；<br>2、服务端想用户发放SessionID，将包含SessionId的cookie放到响应首部字段Set-Cookie中<br>3、客户端得到Cookie，之后再次请求该资源时，会将Cookie信息带入到请求中<br>4、服务器得到Cookie信息，通过SessionId来判断对方是否为真实用户。</p>
<h3 id="安全的做法"><a href="#安全的做法" class="headerlink" title="安全的做法"></a>安全的做法</h3><p>1、给密码加盐（salt）的方式增加额外的信息，在使用散列（hash）函数计算出散列值后保存。</p>
<p>盐(salt):由服务器随机生成的一个字符串，把和密码拼接后生成散列值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTPS通信机制]]></title>
      <url>http://jianwl.com/2016/04/28/HTTPS%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>为了更好的理解HTTPS，总结一下HTTPS的通信步骤。</p>
<p><img src="/images/HTTPS通信机制.jpg" alt=""><br>1、客户端通过发送Client Hello报文开始SSL通信，报文中包含客户端支持的SSL的指定版本，加密组件（Cipher Suite）列表</p>
<p>2、服务端进行SSL通信时，会以Server Hello报文作为应答，和客户端一样，在报文中包含SSL版本，加密组件。服务器的加密组件内容是从接收到的客户端机密组件内筛选出来的。</p>
<p>3、服务器发送Certificate报文，报文中包含公开密钥证书。</p>
<p>4、服务器发送ServerHelloDone报文通知客户端，最初阶段的SSL握手协商部分结束了</p>
<p>5、SSL第一次握手结束之后，客户端以Client Key Exchange报文作为回应，报文中包含通信加密中使用的一种被称为Pre-master secret的随机密码串。该报文已用步骤3中的公钥进行加密</p>
<p>6、客户端继续发送Change Ciper Spec报文，该报文会提示服务器，在此报文之后的通信会采用Pre-master-secret密钥加密</p>
<p>7、客户端发送Finished报文，该报文包含连接至今全部报文的整体校验值，这次握手协议能否成功，要以服务器是否能够正确解密该报文作为判定标准。</p>
<p>8、服务器同样发送Change Cipher Spec报文。</p>
<p>9、服务器同样发送Finished报文</p>
<p>10、服务器和客户端的Finished报文交换完毕之后，SSL连接就算建立完成，当然，通信会受到SSL的保护，从此处开始进行应用层协议的通信，即发送HTTP请求。</p>
<p>11、应用层协议通信，即发送HTTP响应</p>
<p>12、最后由客户端断开连接，断开连接时，发送close_notify报文。</p>
<h3 id="使用服务端的公开密码证书建立HTTPS通信的整个过程"><a href="#使用服务端的公开密码证书建立HTTPS通信的整个过程" class="headerlink" title="使用服务端的公开密码证书建立HTTPS通信的整个过程"></a>使用服务端的公开密码证书建立HTTPS通信的整个过程</h3><p>1、服务端将公开密钥证书下发给客户端 （公开密钥证书包含服务器的公钥和认证机构的证书）</p>
<p>2、客户端取出证书确认其有效性，取出公开密钥，用公开密钥对随机密码串pre-master-secret进行加密,并发送给服务端</p>
<p>3、服务端用私钥解密客户端发送过来的加密信息，得到随机密码串pre-master-secret。</p>
<p>4、这样在客户端和服务端都拥有了共享密钥pre-master-secret，之后的通信就可以用这个共享密钥进行加密通信。</p>
<h3 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h3><p>使用HTTPS存在一些问题，它的处理速度会变慢，SSL的慢分两种，一种是服务器和客户端都需要做加密和解密操作大量消耗CPU及内存等资源，另一种是通信慢，因为SSL通信部分消耗网络资源。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP基础]]></title>
      <url>http://jianwl.com/2016/04/27/HTTP%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>1、HTTP协议规定，先从客户端开始建立通信，服务端在没有收到请求之前不会发送响应。</p>
<p>2、请求报文由请求方法，请求URI、协议版本、可选的请求首部字段和内容实体构成的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">POST(请求方法)    /form/query(请求URI)   HTTP/1.1(协议版本)</div><div class="line"></div><div class="line">(请求首部字段)</div><div class="line">Host:jianwl.com</div><div class="line">Connection: keep-alive</div><div class="line">Content-Type: appliation/x-www-form-urlencoded</div><div class="line">Content-Length: 16</div><div class="line"></div><div class="line">(内容实体)</div><div class="line">name=zhangsan&amp;age=21</div></pre></td></tr></table></figure></p>
<p>3、HTTP协议的特点</p>
<ul>
<li>支持客户端/服务端模式</li>
<li>简单快速，客户端向服务器请求服务时，只需传送请求方法和路径。</li>
<li>灵活，HTTP允许传输任意的数据对象，传输类型由Content-Type来标记</li>
<li>HTTP 0.9和1.0使用非持续连接，限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户的应答后，即断开连接，采用这种方式节省传输的时间.HTTP1.1使用持续连接，创建TCP连接后，只要任意一方没有明确提出断开连接，则保持TCP连接状态。</li>
<li>无状态：HTTP协议是无状态协议，无状态是指对事物处理没有记忆能力，缺乏状态以为着如果后续处理需要前面的信息，必须重传，这样会导致每次连接传送数据量大，引入Cookie，可以将对象的状态记录下来。</li>
</ul>
<p>HTTP协议的缺点：<br>1、通信使用明文（不加密），内容可能会被窃听；<br>2、不验证通信方的身份，因此有可能遭遇伪装；<br>3、无法证明报文的完整性，所以有可能已遭篡改；</p>
<p>4、TCP断开连接要四次握手，服务端发送带有FIN的首部字段数据包，客户端收到数据包后先发送带有ACK字段的数据包，然后在发送带有FIN字段的数据包，服务端收到后，返回ACK的数据包，断开连接；</p>
<p>5、持久化连接：<br>持久化连接的特点：只要任意一方没有明确提出断开连接，则保持TCP连接状态。</p>
<p>持久化连接的好处，减少了TCP连接重复建立和断开所造成的额外开销，减轻服务器端的负载。</p>
<p>6、管线化<br>持久连接使得多数请求以管线化方式发送成为可能，从前发送请求后需等待并收到响应才能发送下一个请求，管线化技术出现后，不用等待响应也可直接发送下一个请求。</p>
<p>7、Http使用cookie来管理状态<br>Cookie会根据服务端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie，当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中的加入Cookie值后发送出去。服务器发现客户端发送过来的Cookie后，会去检查究竟是从哪一个客户端发过来的连接请求，然后对比服务器的记录，最后得到之前的状态。<br><img src="/images/Cookie交互场景.jpg" alt=""></p>
<p>8、编码提升传输效率<br>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩，内容编码后的实体由客户端接收并负责解码；<br>常见的内容编码有：<br>gzip<br>compress（unix系统标准压缩）<br>deflate（zlib）<br>identify(不进行编码)</p>
<p>9、分块传输<br>分块传输编码会将实体主体分成多个部分块，每一块都会用十六进制来标记块的大小，而实体主体的最后一块会用“0（CR+LF）来标记”</p>
<p>10、报文主体和实体主体的差异？<br>报文(message)：<br>HTTP通信中的基本单位，由8位组字节流组成，通过HTTP通信传输。</p>
<p>实体(Entity):<br>作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成。</p>
<p>HTTP报文的主体用于传输请求或响应的实体主体，通常报文主体等于实体主体，只有当传输中进行编码操作是，实体主体内容才会变化。</p>
<p>11、HTTP返回状态码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">状态码    描述</div><div class="line"></div><div class="line"> 2xx	请求正常处理完毕</div><div class="line"> 200	请求被正常处理了</div><div class="line"> 204	请求被服务端正常处理，但返回的响应报文中不含实体的主体部分。</div><div class="line"> 206	客户端进行范围请求，客户端成功执行了这部分的GET请求。</div><div class="line"></div><div class="line"> 3xx	重定向状态码</div><div class="line"> 301    永久重定向，请求资源已被分配了新的URI，以后应使用现在的URI</div><div class="line"> 302	临时性重定向，请求资源已被分配新的URI，希望用户本次能够使用新的URI访问</div><div class="line"> 303	303和302状态码有相同的功能，但要求客户端以GET方法获取资源</div><div class="line"> 304	客户端发送附带条件的请求时，服务器端允许访问，但因请求未满足条件，直接返回304.（如：服务端资源未变可使用客户端未过期的缓存）</div><div class="line"> 307	和302有着相同的含义</div><div class="line"> </div><div class="line"> 4xx	客户端错误</div><div class="line"> 400	请求报文中存在语法错误</div><div class="line"> 401	发送请求需要通过HTTP认证（BASIC认证 DIGST认证）的认证信息</div><div class="line"> 403	对请求资源的访问被服务器拒绝了</div><div class="line"> 404	服务器上没有找到请求资源</div><div class="line"> </div><div class="line"> 5xx	服务器错误</div><div class="line"> 500	服务端执行请求时，发生错误。</div><div class="line"> 503 	服务器暂时处于超负荷或者正在进行停机维护</div></pre></td></tr></table></figure></p>
<p>12、通信数据转发程序：代理、网关、隧道概念</p>
<h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h5><p>一种具有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发客户端。</p>
<h5 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h5><p>转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。</p>
<h5 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h5><p>在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序，使用隧道的目的是确保客户端能与服务器进行安全的通信。</p>
<p>13、使用代理服务器的好处？<br>利用缓存技术减少网络带宽的流量，使用代理的两个基准，一种是是否使用缓存，另一种是是否会修改报文。</p>
<p>14、缓存代理<br>代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上，当代理再次接收到相同的资源的请求时，就可以不用从源服务器哪里获取资源了，将之前的缓存资源直接作为响应返回。</p>
<p>15、4种HTTP首部字段类型<br>HTTP首部字段根据实际用途被分为以下4种：<br>通用首部字段(General Heaher Fields) – 请求报文和响应报文都会用到的首部<br>请求首部字段(Request Header Fields) – 客户端向服务端发送请求报文时使用的首部<br>响应首部字段（Response Header Fields） – 服务端向客户端响应报文时使用的字段<br>实体首部字段(Entity Header Fields) – 请求报文和响应报文都会用到的首部</p>
<p>16、缓存的工作机制<br>Cache-Control: private, max-age=60, no-cache</p>
<h6 id="常用的缓存指令"><a href="#常用的缓存指令" class="headerlink" title="常用的缓存指令"></a>常用的缓存指令</h6><p>private: 缓存服务器只给特定的用户提供资源缓存的服务；<br>public: 缓存服务给所有的用户提供资源缓存服务；<br>max-age=60,当服务器返回响应中包含max-age指令，缓存过期没有超过60秒，缓存服务器将不对资源的有效性进行确认，直接将缓存响应给客户端。<br>no-cache,表示缓存服务器会向源服务器进行有效期确认后处理资源;<br>no-store,不缓存资源<br>min-fresh:缓存服务器返回至少还未过指定时间的缓存资源。</p>
<p>应用HTTP/1.1版本的缓存服务器遇到同时存在Expires首部字段的情况时，会有限处理max-age指令，而忽略掉Expires首部字段。</p>
<p>17、实体标记Etag是与特定资源关联的确定值，资源更新后ETag也会随之而更新。</p>
<p>18、  加密的两种方式：</p>
<h6 id="通信的加密"><a href="#通信的加密" class="headerlink" title="通信的加密"></a>通信的加密</h6><p>HTTP协议中没有加密的机制，但可以通过和SSL（Secure Socket Layer,安全套接层）和TLS（Transport Layer Security,安全传输层协议）的组合使用。用SSL建立安全通信线路之后，就可以在这条线路上进行HTTP通信了，与SSL组合使用的HTTP被称为HTTPS。</p>
<h6 id="内容加密"><a href="#内容加密" class="headerlink" title="内容加密"></a>内容加密</h6><p>由于HTTP协议中没有加密机制，那么就对HTTP协议传输的内容本身加密，在这种情况下，客户端要对HTTP报文进行加密处理后再发送请求。仅仅被报文的主体进行加密，对报文的首部不加密，但这样做也会出现一个问题，虽然内容加密了，但仍有被篡改的风险。</p>
<p>19、HTTP的隐患？<br>1、无法确定请求发送至目标的Web服务器是否按真实意图返回响应的那台服务器，有可能是已伪装的Web服务器。<br>2、无法确定响应返回到的客户端是否是按真实意图接受响应的那个客户端，有可能是已伪装的客户端。<br>3、无法确定正在通信的对方是否具备访问权限，因为某些Web服务器上保存着重要的信息，只想发给特定用户通信的权限。<br>4、无法判定请求是来自何方，出自谁手。<br>5、即使是无意义的请求也会照单全收，无法阻止海量请求下的DOS攻击（Denial of Service,拒绝服务攻击）行为</p>
<p>20、常见的几种加密技术</p>
<h6 id="共享秘钥加密"><a href="#共享秘钥加密" class="headerlink" title="共享秘钥加密"></a>共享秘钥加密</h6><p>加密和解密用同一个密钥的方式，也称为对称加密；</p>
<p>缺点是发送密钥，有可能被窃听，对方得到密钥，就能够机密，不安全。</p>
<h6 id="公开密钥加密"><a href="#公开密钥加密" class="headerlink" title="公开密钥加密"></a>公开密钥加密</h6><p>使用一把非对称的密钥，一把叫做私有密钥，另一把叫做公开密钥。发送密文的一方，使用对方的公开密钥进行加密，对方收到被加密的信息后，用私有密钥进行解密。</p>
<p>缺点是，无法证明公开密钥本身就是货真价实的公开密钥，比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或者在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。</p>
<h6 id="混合加密机制"><a href="#混合加密机制" class="headerlink" title="混合加密机制"></a>混合加密机制</h6><p>1、使用公开密钥加密方式安全地交换稍后共享密钥中要使用的密钥；<br>2、确保交换的密钥是安全的前提下，使用共享密钥加密的方式进行加密；</p>
<p>这样做的理由？<br>公开密钥机密比共享密钥复杂，处理速度慢，所以利用各自的优势，增加效率。</p>
<h6 id="证明公开密钥正确性的证书"><a href="#证明公开密钥正确性的证书" class="headerlink" title="证明公开密钥正确性的证书"></a>证明公开密钥正确性的证书</h6><p><img src="/images/确认公钥的真实性.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP常见面试题]]></title>
      <url>http://jianwl.com/2016/04/27/HTTP%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h5 id="HTTP-的方法中GET和POST方法的区别？"><a href="#HTTP-的方法中GET和POST方法的区别？" class="headerlink" title="HTTP 的方法中GET和POST方法的区别？"></a>HTTP 的方法中GET和POST方法的区别？</h5><ul>
<li>GET 用于从服务器获得资源，POST用于向服务器发送数据的，</li>
<li>GET 提交请求时，将参数放到URL中，用户可以从URL中看到传输的参数，POST是将参数填到一个表单中，然后发送给服务器，参数在URL中不可见。</li>
<li>GET 提交的数据上限是1024字节，POST方式没有数据长度的限制。</li>
</ul>
<h5 id="HTTP-的方法中PUT和POST方法的区别？"><a href="#HTTP-的方法中PUT和POST方法的区别？" class="headerlink" title="HTTP 的方法中PUT和POST方法的区别？"></a>HTTP 的方法中PUT和POST方法的区别？</h5><ul>
<li>POST用于提交请求，可以更新或者创建资源，是非幂等的,举个例子，一个接口的功能是将当前余额减一个值，每次提交指定该值为100，调用一次余额减100，二次减200，这个时候就用POST</li>
<li>PUT用于向指定的URI传送更新资源，是幂等的，举个例子，更新某个blog文章，因为该文章具有单一的具体URI，所以每次更新提交相同的内容，结果都一致，这个时候就用PUT</li>
</ul>
<p>幂等性：幂等是数学的一个用语，对于单个输入的运算方法，如果传入值相同，结果也相同，则称其为幂等的。</p>
<h5 id="HTTP-的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？"><a href="#HTTP-的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？" class="headerlink" title="HTTP 的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？"></a>HTTP 的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？</h5><p>GET: 向服务器获取某个资源，发送GET请求一般会附带一些参数，这些参数会附在请求链接的后面。</p>
<p>POST: 向服务器发送数据，数据不会被附加在请求链接之后的，常用于表单提交。</p>
<p>PUT: 向服务器传输文件，要求在请求报文的主体中包含文件内容，然后保存到请求URI指定的位置，但由于HTTP/1.1自身不带验证机制，任何人都可以上传文件，存在安全问题。</p>
<p>TRACE: 让Web服务器将之前的请求通信环回给客户端，容易引发XST（Cross-Site Tracing）跨站追踪攻击，通常不会用到。</p>
<p>HEAD: 与GET类似，但服务器在响应中只返回首部，不返回实体的主体部分。</p>
<p>OPTIONS: 请求Web服务器告知其支持的各种功能。</p>
<p>DELETE: 请求服务器删除请求URL指定的资源。</p>
<p>CONNECT:在代理服务器通信时，建立隧道，实现将隧道协议进行TCP通信，主要使用SSL(Secure Socket Layer 安全套接层)和TLS（Transport Layer Security 传输层安全）协议把通信内容加密后经网络隧道传输。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP协议介绍]]></title>
      <url>http://jianwl.com/2016/04/27/TCP%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>为了了解HTTP，有必要事先了解一下TCP/IP协议簇，TCP/IP协议族最重要的一点就是分层，按层次可分为应用层、传输层、网络层和数据链路层。</p>
<blockquote>
<p>分层优点：<br>把TCP/IP分层是有好处的，比如，如果互联网只由一个协议统筹，某个地方需要改变设计时，就必须把所有部分整体换掉，而分层之后，只需要把变动的层换掉即可；分层之后，设计也变得简单了，处于应用层上的应用只考虑分派给自己的任务就可以了，不用弄清楚对方在地球上哪个地方，对方的传输线路是怎么样的传输送达的问题。</p>
</blockquote>
<h5 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h5><p>应用层决定了向用户提供应用服务时通信的活动。TCP/IP协议族内预存了各类通用的应用服务，比如FTP(File Transfer Protocol,文本传输协议)、DNS(Domain Name System 域名系统)服务、HTTP(HyperText Transfer Protocol,超文本传输协议)</p>
<h5 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h5><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议：TCP(Transmission Control Protocol 传输控制协议)和UDP（User Data Protocol,用户数据报协议）。</p>
<h5 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h5><p>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据包传给对方。与对方的计算机，通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项中，选择一条传输路线。</p>
<h5 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h5><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC(Network Interface Card,网络适配器，即网卡),及光纤等物理可见部分</p>
<h3 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h3><p><img src="/images/TCP通信传输流.jpg" alt=""><br>利用TCP/IP协议簇进行通信时，会通过分层顺序与对方进行通信，发送端从应用层往下走，接收端则从应用层网上走。</p>
<blockquote>
<p>举例说明<br>作为发送端的客户端在应用层发出一个想看某个Web页面的HTTP请求，为了方便传输，在传输层把从应用层处收到的数据进行分割，并在报文上打上标记和序号及端口后转发给网络层。在网络层(IP协议)，增加作为通信目的地的MAC地址后转发给链路层，接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层，当传输到应用层，才能算真正接收到客户端发送过来的HTTP请求。</p>
</blockquote>
<h3 id="TCP协议的可靠性"><a href="#TCP协议的可靠性" class="headerlink" title="TCP协议的可靠性"></a>TCP协议的可靠性</h3><p>TCP协议采用三次握手策略，来保证可靠性。发送端首先先发送一个带SYN标志的数据传给对方，接收端收到后，回传一个带用SYN/ACK标志的数据包以示传达确认消息，最后，发送端在回传一个带ACK标志的数据包，代表“握手”结束。若在握手过程中，某个阶段莫名中断，TCP协议会再次以相同的顺序发送数据包。<br><img src="/images/TCP三次握手.jpg" alt="TCP三次握手"></p>
<h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP协议位于网络层，它的作用是把各种数据包传递给对方，要保证确实传送到对方那里，需要两个重要的条件IP地址和MAC地址。IP地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址可以和MAC地址进行配对，IP地址可变换，但MAC地址基本不会变。</p>
<blockquote>
<p>//IP通信是如何依赖MAC地址的？<br>通信双方经过多台计算机和网络设备中转才能连接到对方，在中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标，利用ARP协议(Address Resolution Protocol 解析地址协议)，根据通信方的IP地址，可以得到对应的MAC地址，所以当中转设备的MAC地址为该通信方的MAC地址时，表示双方已经连接上了。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过一张图来解释，IP协议，TCP协议，DNS服务在使用HTTP协议通信过程中各自发挥了什么作用？</p>
<p><img src="/images/完整HTTP请求.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浮躁的环境，浮躁的我]]></title>
      <url>http://jianwl.com/2016/04/20/%E6%B5%AE%E8%BA%81%E7%9A%84%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%B5%AE%E8%BA%81%E7%9A%84%E6%88%91/</url>
      <content type="html"><![CDATA[<p><strong>前序</strong>：总是羡慕别人过得比自己好，想要努力奋斗，赶超他们，计划实施了几天，热情骤减；想要高薪，却不付出努力，想不劳而获；想要承担更多的责任，却又担心能力不足。觉得能力不足，却又不行动起来。这样的状态持续下去，我即将看到一个抱怨现实却又对改变现状无能无力的自己；我并不想成为这样的人，将目前所拥有的坏习惯和不好状态，<strong>以文字的方式记录下来，警示自己</strong>。</p>
<h2 id="习惯即刻回报"><a href="#习惯即刻回报" class="headerlink" title="习惯即刻回报"></a>习惯即刻回报</h2><p>春天播种，秋天才会有收获。刚刚付出一点点，甚至还没有付出，就想要得到回报。技术刚刚掌握，能一边谷歌一边干活了就觉得该拿到多少多少钱了。找工作先想着多少多少钱，入职了没干几个月就想着要加多少多少钱，干了没几个月，薪水要是没涨，就放弃了，准备通过跳槽加薪，不跳槽的话，往往也会因为没加薪而牢骚满腹，工作敷衍了事。</p>
<p>一个程序员的价值，是通过他带给公司的价值体现的。先给公司带来了价值，然后才会反过来在薪水上体现出自己的价值。公司都很现实，很少会为你的潜力买单，在你还没有体现出价值时就给你很高的薪水。</p>
<p>在生活和工作中，一定要懂得付出，不要那么急功近利，马上想得到回报。天下没有白吃的午餐，你想获得什么，就得先付出什么。唯有种下种子，然后浇水、施肥、除草、杀虫，然后才能等来收获。</p>
<h2 id="缺乏学习热情"><a href="#缺乏学习热情" class="headerlink" title="缺乏学习热情"></a>缺乏学习热情</h2><p>软件开发的技术日新月异，而每一项技术又往往博大精深，不持续、深入钻研是很难掌握的，更别谈精通了。如果你对一项技术不能深刻理解熟练应用，表现出来的水准仅仅是能干活、还行，那很难说会有公司愿意为“还行”付出大的代价，只有脱颖而出，才可能备受重视。</p>
<p>假如你对学习、掌握、精通技术没有兴趣，面对不断涌现的新语言新技术新框架没有学习欲望，那但就软件开发这个工作而言，你不但眼下不太可能拿到高薪，将来也不会。在这样一个快速变化的时代，只有不断地学习才不会被抛弃。</p>
<h2 id="不够努力"><a href="#不够努力" class="headerlink" title="不够努力"></a>不够努力</h2><p>虽然我们都知道努力学习可以改变我们的技能水平，持续努力不懈坚持可以让自己有所建树，可还是有很多人浅尝辄止，三天打鱼两天晒网，搞两下能Run就放下了。</p>
<p>人和人在聪明才智上的差距并没有想象中大，甚至很多时候，从大多数人的努力程度之低来看，根本还轮不到拼天赋。如果两个人的实力半斤八两的话，热情工作努力坚持的人，一定比较容易成功。</p>
<h2 id="畏难"><a href="#畏难" class="headerlink" title="畏难"></a>畏难</h2><p>做事拈轻怕重，不愿挑战。殊不知能力就是在不断挑战不断突破自己的过程中历练出来的。在一个公司里面，经常承担高难度任务的程序员，一定是成长比较快的，薪水增长也一定是比较快的。越是困难的事情，越能体现出个人价值，也越能带给个人成长。万事起头难，不要害怕困难。事情做不好往往不是因为没有能力，大都是由于缺乏恒心。只要不怕困难，坚持前行，一定会有不一样的收获。</p>
<h2 id="缺乏责任心"><a href="#缺乏责任心" class="headerlink" title="缺乏责任心"></a>缺乏责任心</h2><p>工作上不管什么事儿，反正不是自己的事儿，缺乏责任心，干好干不好都无所谓，对交付承诺、对产品质量都不在意，没什么事儿上心。一个人的责任心如何，决定着他在工作中的态度，决定着其事业的好坏和成败。如果一个人没有责任心，即使他有再大的能耐，也不一定能做出好的成绩来。</p>
<h2 id="消极，抱怨"><a href="#消极，抱怨" class="headerlink" title="消极，抱怨"></a>消极，抱怨</h2><p>工作稍有不顺，就怨气沸腾，这个怎么怎么样，那个怎么怎么样，而我怎么就这样，任务不公平，资源不公平，那谁谁不支持我，那谁谁不配合……</p>
<p>抱怨不能使事情变好，反之，它会让负面情绪蔓延，蚕食你的精力和时间，让你产出更低。成功者永不抱怨，抱怨者永不成功。立刻停止抱怨，早一分钟停止，你就离目标近一分钟。</p>
<h2 id="没有时间管理观念"><a href="#没有时间管理观念" class="headerlink" title="没有时间管理观念"></a>没有时间管理观念</h2><p>每个人的一天都只有24小时，人和人的差别就在于如何利用时间上。</p>
<p>有的人每周都有目标，每天都有计划，早上起来会想今天要做的几件重要的事，晚上会回顾今天完成的事，总结干成了什么干坏了什么，还会有计划的学习新知识新技能，这样日积月累不断坚持，每一天都是高效的，每一天都朝着更丰富更完美的自己前进。</p>
<p>而有的人则漫无目的，走哪算哪，到了公司，上午基本做不成事儿，到下午了还不知道要做什么，晚上也发愁如何消磨时间……</p>
<h2 id="为薪水工作"><a href="#为薪水工作" class="headerlink" title="为薪水工作"></a>为薪水工作</h2><p>虽然工作的一大目的是获取薪水，养活自己以及供给家庭所需；但是，这只是工作最直接的报偿，同时也是最低级的目标。</p>
<p>如果我们为薪水而工作，将注定我们是短视的，也将注定受到最深的伤害。假如你看不到工资以外的东西，斤斤计较于薪水、福利、职位等，那外界的些微风吹草动就可能让你像浮萍一样飘来荡去，你很快就会失去平衡，失去信心，失去热情，失去平和，进而在工作时总是采取一种应付了事的态度，能少做就少做，能躲避就躲避，觉得只要对得起自己的那份薪水就成了。长此以往，你追求的高薪水反倒得不到。</p>
<p>我们进入一个公司工作，是为了自己，不是薪水也不是别人，比薪水更重要的，是成长和成就自己的机会。我们一定要明白，公司、企业、组织，都是我们锻炼自己、修炼自我的平台，我们不是为薪水工作、不是为老板工作、不是为家人工作，是为实现自我而工作，是为更完美的自己而工作。</p>
<p>参考资料：<br><a href="http://http://www.codeceo.com/article/programmer-hole.html" target="_blank" rel="external">月薪3万的程序员都避开了哪些坑？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java注解]]></title>
      <url>http://jianwl.com/2016/04/20/Java%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><blockquote>
<p>Annotations, a form of metadata, provide data about a program that is not part of the program itself. Annotations have no direct effect on the operation of the code they annotate.</p>
</blockquote>
<p>注解是JAVA 5的一个新特性，它相当于是一种嵌入在程序中的元数据</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote>
<ul>
<li>Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings.</li>
<li>Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth.</li>
<li>Runtime processing — Some annotations are available to be examined at runtime.</li>
</ul>
</blockquote>
<p>运用场景主要是三个方面：</p>
<ul>
<li>内置注解，用于告诉编译器，哪些方法被覆盖，哪些方法忽略警告；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//内置注解举例说明</div><div class="line">@Override</div><div class="line">当我们想要覆盖父类的一个方法时，需要使用该注解告知编译器，我们正在覆盖一个方法。这样的话，当父类的方法被删除或修改了，编译器会提示错误信息。</div><div class="line"></div><div class="line">@Deprecated</div><div class="line">当我们想要让编译器知道一个方法已经被弃用时，应该使用这个注解。</div><div class="line"></div><div class="line">@SuppressWarning</div><div class="line">告知编译器，忽略他们产生的特殊警告</div></pre></td></tr></table></figure>
<ul>
<li>用注解解析工具对其进行解析</li>
<li>注解可以指定在运行时有效</li>
</ul>
<h2 id="Java自定义注解"><a href="#Java自定义注解" class="headerlink" title="Java自定义注解"></a>Java自定义注解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.annotations;</div><div class="line">import java.lang.annotation.Documented;</div><div class="line">import java.lang.annotation.ElementType;</div><div class="line">import java.lang.annotation.Inherited;</div><div class="line">import java.lang.annotation.Retention;</div><div class="line">import java.lang.annotation.RetentionPolicy;</div><div class="line">import java.lang.annotation.Target;</div><div class="line"></div><div class="line">@Documented</div><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Inherited</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface MethodInfo&#123;</div><div class="line">    String author() default &quot;Pankaj&quot;;</div><div class="line">    String date();</div><div class="line">    int revision() default 1;</div><div class="line">    String comments();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注解方法不能有参数</li>
<li>注解方法的返回类型局限于基本类型，字符串，枚举</li>
<li>注解方法可以包含默认值</li>
<li>注解可以包含与其绑定的元注解，元注解为注解提供信息，有四种元注解类型</li>
</ul>
<ol>
<li>@Documented – 表示使用该注解的元素应被javadoc或类似工具文档化，它应用于类型声明，类型声明的注解会影响客户端对注解元素的使用。如果一个类型声明添加了Documented注解，那么它的注解会成为被注解元素的公共API的一部分。</li>
<li>@Target – 表示支持注解的程序元素的种类，一些可能的值有TYPE, METHOD, CONSTRUCTOR, FIELD等等。如果Target元注解不存在，那么该注解就可以使用在任何程序元素之上。</li>
<li>@Inherited – 表示一个注解类型会被自动继承，如果用户在类声明的时候查询注解类型，同时类声明中也没有这个类型的注解，那么注解类型会自动查询该类的父类，这个过程将会不停地重复，直到该类型的注解被找到为止，或是到达类结构的顶层（Object）。</li>
<li>@Retention – 表示注解类型保留时间的长短，它接收RetentionPolicy参数，可能的值有SOURCE, CLASS, 以及RUNTIME。</li>
</ol>
<h2 id="Java注解解析"><a href="#Java注解解析" class="headerlink" title="Java注解解析"></a>Java注解解析</h2><p>我们将使用Java反射机制从一个类中解析注解，请记住，注解保持性策略应该是RUNTIME，否则它的信息在运行期无效，我们也不能从中获取任何数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.annotations;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line">public class AnnotationExample &#123;</div><div class="line">    @Override</div><div class="line">    @MethodInfo(author = &quot;Pankaj&quot;, comments = &quot;Main method&quot;, date = &quot;Nov 17 2012&quot;, revision = 1)</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Overriden toString method&quot;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Deprecated</div><div class="line">    @MethodInfo(comments = &quot;deprecated method&quot;, date = &quot;Nov 17 2012&quot;)</div><div class="line">    public static void oldMethod() &#123;</div><div class="line">        System.out.println(&quot;old method, don&apos;t use it.&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;deprecation&quot; &#125;)</div><div class="line">    @MethodInfo(author = &quot;Pankaj&quot;, comments = &quot;Main method&quot;, date = &quot;Nov 17 2012&quot;, revision = 10)</div><div class="line">    public static void genericsTest() throws FileNotFoundException &#123;</div><div class="line">        List l = new ArrayList();</div><div class="line">        l.add(&quot;abc&quot;);</div><div class="line">        oldMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">package com.journaldev.annotations;</div><div class="line"></div><div class="line">import java.lang.annotation.Annotation;</div><div class="line">import java.lang.reflect.Method;</div><div class="line">public class AnnotationParsing &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            for (Method method : AnnotationParsing.class</div><div class="line">                    .getClassLoader()</div><div class="line">                    .loadClass((&quot;com.journaldev.annotations.AnnotationExample&quot;))</div><div class="line">                    .getMethods()) &#123;</div><div class="line">                // checks if MethodInfo annotation is present for the method</div><div class="line">                if (method.isAnnotationPresent(com.journaldev.annotations.MethodInfo.class)) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        // iterates all the annotations available in the method</div><div class="line">                        for (Annotation anno : method.getDeclaredAnnotations()) &#123;</div><div class="line">                            System.out.println(&quot;Annotation in Method &apos;&quot;</div><div class="line">                                    + method + &quot;&apos; : &quot; + anno);</div><div class="line">                        &#125;</div><div class="line">                        MethodInfo methodAnno = method.getAnnotation(MethodInfo.class);</div><div class="line">                        if (methodAnno.revision() == 1) &#123;</div><div class="line">                            System.out.println(&quot;Method with revision no 1 = &quot;+ method);</div><div class="line">                        &#125;</div><div class="line">                    &#125; catch (Throwable ex) &#123;</div><div class="line">                        ex.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (SecurityException | ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis之RDB持久化]]></title>
      <url>http://jianwl.com/2016/04/18/Redis%E4%B9%8BRDB%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="为何要持久化？"><a href="#为何要持久化？" class="headerlink" title="为何要持久化？"></a>为何要持久化？</h2><p>Redis是内存数据库，它将自己的数据库状态存在内存里面，如果不想办法将储存在内存中的数据库状态保存到磁盘里面，那么一旦服务器进程退出，服务器中的数据库状态也会消失不见。</p>
<p>为了解决这个问题，Redis提供了RDB的功能，RDB持久化生成的RDB文件是一个经过压缩的二进制文件，通过二进制文件可以还原生成RDB文件时的数据库状态。</p>
<h2 id="RDB文件的创建"><a href="#RDB文件的创建" class="headerlink" title="RDB文件的创建"></a>RDB文件的创建</h2><p>生成RDB文件的两种命令：</p>
<ol>
<li>SAVE</li>
<li>BGSAVE</li>
</ol>
<p>SAVE命令会<strong>阻塞</strong>Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求。</p>
<p>BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程(父进程)继续处理命令请求。</p>
<h2 id="自动间隔性保存"><a href="#自动间隔性保存" class="headerlink" title="自动间隔性保存"></a>自动间隔性保存</h2><p>用户可以通过设置服务器配置的save选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行BGSAVE操作。</p>
<p>举个例子，如果我们向服务器提供以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save  900  1    //服务器在900秒之内，对数据库进行了至少一次修改</div><div class="line">save  300  10  </div><div class="line">save  60    10000</div></pre></td></tr></table></figure></p>
<p>只要满足以上三个条件中任意之一，BGSAVE命令就会被执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis过期键删除策略]]></title>
      <url>http://jianwl.com/2016/04/18/Redis%E8%BF%87%E6%9C%9F%E9%94%AE%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</url>
      <content type="html"><![CDATA[<p>Redis过期键删除有三种策略：</p>
<ol>
<li>定时删除：在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作。（主动删除）</li>
<li>惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有，就返回该键。（被动删除）</li>
<li>定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则有算法决定。（主动删除）</li>
</ol>
<h2 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h2><p>定时删除策略对内存是最友好的，通过定时器，定时删除策略可以保证过期键会尽可能地被删除，并释放过期键所占用的内存。另外一方面，定时删除策略的缺点是，它对CPU时间是最不友好的，在过期键比较多的情况下，删除过期键这一行为可能会占用相当一部分CPU时间，在内存不紧张但是CPU时间非常紧张的情况下，将CPU时间用在删除和当前任务无关的过期键上，对服务器的响应时间和吞吐量造成影响。</p>
<h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>惰性删除策略对CPU是最友好的：程序只会在取出键时才对键进行过期检查，这可以保证删除过期键的操作只会在非做不可的情况下进行，并且删除的目标仅限于当前处理的键，这个策略并不会在删除其他无关的过期键上花费任何CPU时间。<br>惰性删除策略的缺点是，它对内存是最不友好的，过期键保留在数据库中，那么只要它没有被访问到的话，那么他们永远不会被删除（除非用户手动执行FLUSHDB），我们可以将这种情况看做是内存泄漏 —-无用的垃圾数据占用了大量的内存，而服务器却不释放它们</p>
<h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><p>定期删除策略每个一段时间执行一次删除过期操作，并通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响;期删除过期键，还能减少过期键带来的内存浪费</p>
<p>定期删除的难点：</p>
<ol>
<li>如果删除太频繁，或者执行时间过程，定期删除就会退化到定时删除；</li>
<li>如果删除操作执行太少，或者执行时间太短，定期删除就会和惰性删除策略一样，出现浪费内存的情况。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>定时删除，耗CPU但对内存友好，高并发时，影响服务器的响应时间和吞吐量。</li>
<li>惰性删除，耗内存，对CPU友好；</li>
<li>定期删除，是定时删除和惰性删除的折中。</li>
</ul>
<p>参考资料：<br>Redis设计与实现  –黄健宏</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis对象类型介绍]]></title>
      <url>http://jianwl.com/2016/04/15/Redis%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>对象的类型</p>
<ol>
<li>字符串对象 – REDIS_STRING</li>
<li>列表对象 – REDIS_LIST</li>
<li>哈希对象 – REDIS_HASH</li>
<li>集合对象 – REDIS_SET</li>
<li>有序集合对象 – REDIS_ZSET</li>
</ol>
<p>实战操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># 键为字符串对象，值为字符串对象</div><div class="line">redis&gt; SET msg &quot;hello world&quot;</div><div class="line">OK</div><div class="line"></div><div class="line">redis&gt; TYPE msg</div><div class="line">string</div><div class="line"></div><div class="line">#键为字符串对象，值为列表对象</div><div class="line">redis&gt; RPUSH numbers 1 3 5</div><div class="line">3</div><div class="line"></div><div class="line">redis&gt; TYPE numbers</div><div class="line">list</div><div class="line"></div><div class="line">#键为字符串对象，值为哈希对象</div><div class="line">redis&gt; HMSET profile name Tom age 25 career programmer</div><div class="line">OK</div><div class="line"></div><div class="line">redis&gt; TYPE profile</div><div class="line">hash</div><div class="line"></div><div class="line">#键为集合对象，值为集合对象</div><div class="line">redis&gt; SADD fruits apples banana cherry</div><div class="line">3</div><div class="line"></div><div class="line">redis&gt; TYPE fruits</div><div class="line">set</div><div class="line"></div><div class="line">#键为字符串对象，值为有序集合对象</div><div class="line">redis&gt; ZADD price 8.5 apple 5.0 banana 6.0 cherry</div><div class="line">3</div><div class="line"></div><div class="line">redis&gt; TYPE price</div><div class="line">zset</div></pre></td></tr></table></figure></p>
<p>集合和列表的区别</p>
<ul>
<li>集合中的元素是唯一的，但列表中的元素是不唯一</li>
<li>集合中的元素是没有顺序的，底层实现是散列表，列表中的元素是有顺序的，列表的底层实现是双向链表，所以获取两端的数据的速度快，但获取中间的数据速度慢，时间复杂度是O(N);</li>
<li>相同点是存储内容都是至多为2^32-1个字符串;</li>
</ul>
<p>有序集合和列表的共同点和区别？</p>
<h6 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h6><ul>
<li>两者均有序；</li>
<li>两者均可获得某一范围的元素</li>
</ul>
<h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><ul>
<li>列表是通过链表来实现的，获取靠近两端的数据速度极快，而当元素增多后，访问中间速度的速度会较慢，常用场景，适合实现如“新鲜事”、“日志”这样访问中间元素少的应用；</li>
<li>有序集合是通过散列表和跳跃表来实现的，所以读取位于中间部分的数据速度也很快(时间复杂度是O(logN))</li>
<li>列表不能简单地调整某个元素的位置，但有序集合可以，通过改变这个元素的分数</li>
<li>有序集合比列表更消耗内存</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Github Pages和Hexo搭建个人博客]]></title>
      <url>http://jianwl.com/2016/04/14/%E5%88%A9%E7%94%A8Github-Pages%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>喜欢写Blog的人，会经历三个阶段<br>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费的空间来写。<br>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。<br>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>
</blockquote>
<p>的确，大多数Blog作者，都停留在第一阶段和第二阶段，因为第三阶段太不容易到达，你很难找到俯首听命，愿意为你管理服务器的人。但是，现在情况发生了变化，我们可以在github搭建个人博客。主要是以下步骤：</p>
<ol>
<li>在Github 上注册账号；</li>
<li>在Godaddy上买域名；</li>
<li>在DNSPOD上设置域名解析；</li>
<li>在Github创建username.github.io项目；</li>
<li>Hexo生成静态博客框架并部署到github上；</li>
</ol>
<p>具体操作步骤，参考以下资料<br>参考资料：<br><a href="http://sunwhut.com/2015/10/30/buildBlog/" target="_blank" rel="external">如何利用GitHub Pages和Hexo快速搭建个人博客</a><br><a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客——简明 Github Pages与 jekyll 教程</a><br><a href="http://http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo免输入密码部署到Github]]></title>
      <url>http://jianwl.com/2016/04/14/Hexo%E5%85%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%83%A8%E7%BD%B2%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<p>在使用hexo deploy命令部署hexo到github时，每次都要输入用户名和密码，这种重复机械的流程，让人感觉很烦躁。以下是介绍如何解决这个问题：<br>方案一：在本机新建文本，明文存储github的账号和密码<br>1、在系统环境变量中新增一个环境变量<br><img src="/images/env.png" alt=""><br>2、接着在你的用户目录(C:\Users\username)下新建一个叫_netrc的文件，在文件中添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">machine github.com</div><div class="line">login username //username为github账户名 （ps：请将注释内容去掉）</div><div class="line">password password //password为github账户的密码</div></pre></td></tr></table></figure></p>
<p>3、设置好这些之后，当你再次部署时，就不用再输入用户名和密码了。</p>
<p>方案二：本机生成SSH密钥，配置到github中<br>1、设置Git的user name和email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;shuangziliuyun&quot;</div><div class="line">git config --global user.email &quot;1515970958@qq.com&quot;</div></pre></td></tr></table></figure></p>
<p>2、生成SSH密钥</p>
<ul>
<li>查看是否已经有了ssh密钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果没有密钥则不会有此文件夹，有则备份删除</p>
<ul>
<li>生成密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -f rsa -C &quot;1515970958@qq.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>按3个回车，密码为空，得到两个文件id_rsa和id_rsa.pub</p>
<p>3、在github上添加ssh密钥，这里添加的是id_rsa.pub里面的公钥<br><img src="/images/ssh配置.png" alt=""></p>
<p>4、修改_config.yml中deploy的参数，部署仓库以SSH的方式发布不需输入密码，反之如果以HTTPS的方式发布则需要密码。<br><img src="/images/hexo的deploy参数.png" alt=""><br>参考资料：<br><a href="http://www.foreverpx.cn/2014/09/25/Hexo%E5%85%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%83%A8%E7%BD%B2%E5%88%B0github/" target="_blank" rel="external">Hexo免输入密码部署到Github</a></p>
]]></content>
    </entry>
    
  
  
</search>
