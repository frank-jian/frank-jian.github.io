<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2017-04-17T10:42:15.000Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8之不常用却很有用的知识点</title>
    <link href="http://jianwl.com/2017/04/17/Java8%E4%B9%8B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%B4%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://jianwl.com/2017/04/17/Java8之不常用却很有用的知识点/</id>
    <published>2017-04-17T06:07:13.000Z</published>
    <updated>2017-04-17T10:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="1-forEach-VS-forEachOrdered"><a href="#1-forEach-VS-forEachOrdered" class="headerlink" title="1. forEach VS forEachOrdered"></a>1. forEach VS forEachOrdered</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_005()&#123;</div><div class="line">    List&lt;String&gt; strs = Arrays.asList(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;);</div><div class="line">    strs.stream().parallel().forEach(str -&gt; System.out.println(&quot;forEach =&gt; &quot; + str));</div><div class="line">    strs.stream().parallel().forEachOrdered(str -&gt; System.out.println(&quot;forEachOrdered =&gt; &quot; + str));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-11/96792814-file_1481436578266_14fcc.png" alt=""></p>
<p><code>分析</code></p>
<p>并行处理数据时，<code>forEach</code>处理的数据是无序的，而<code>forEachOrdered</code>处理数据是按照输入流的顺序处理的。</p>
<h4 id="2-合并Map"><a href="#2-合并Map" class="headerlink" title="2. 合并Map"></a>2. 合并Map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@RunWith(JUnit4.class)</div><div class="line">public class BasicTest &#123;</div><div class="line">    /**</div><div class="line">     * 将sub合并至total,若在total中存在该键(key),则键值合并;</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void test_001()&#123;</div><div class="line">        Map&lt;String,List&lt;Integer&gt;&gt; total = Maps.newHashMap();</div><div class="line">        Map&lt;String,List&lt;Integer&gt;&gt; sub = Maps.newHashMap();</div><div class="line"></div><div class="line">        total.put(&quot;num1&quot;, Arrays.asList(1,2,3,4,11));</div><div class="line">        total.put(&quot;num2&quot;,Arrays.asList(1,2,3,4));</div><div class="line">        total.put(&quot;num3&quot;,Arrays.asList(1,2,3,4));</div><div class="line">        total.put(&quot;num4&quot;,Arrays.asList(1,2,3,4));</div><div class="line"></div><div class="line">        sub.put(&quot;num1&quot;,Arrays.asList(1,2,3,4,5,6,7));</div><div class="line">        sub.put(&quot;num2&quot;,Arrays.asList(1,2,3,4,4,5,6,7));</div><div class="line"></div><div class="line">        sub.keySet().forEach(key -&gt; total.merge(key,sub.get(key),(v1,v2) -&gt; Arrays.asList(v1,v2).stream().flatMap(Collection::stream).distinct().collect(Collectors.toList())));</div><div class="line"></div><div class="line">        System.out.println(&quot;total =&gt; &quot; + JSON.toJSONString(total));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-21/83737621-file_1487691562243_10db7.png" alt=""></p>
<h4 id="3-排序Map"><a href="#3-排序Map" class="headerlink" title="3. 排序Map"></a>3. 排序Map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_033() &#123;</div><div class="line">    Map&lt;String,Integer&gt; map = Maps.newHashMap();</div><div class="line">    map.put(&quot;key1&quot;,9);</div><div class="line">    map.put(&quot;key2&quot;,1);</div><div class="line">    map.put(&quot;key3&quot;,3);</div><div class="line">    map.put(&quot;key4&quot;,2);</div><div class="line">    LinkedHashMap&lt;String,Integer&gt; linkedHashMap = map.entrySet().stream().sorted(Map.Entry.comparingByValue((v1,v2) -&gt; v2.compareTo(v1))).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2) -&gt; e1,LinkedHashMap::new));</div><div class="line">    System.out.println(linkedHashMap);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-17/80305570-file_1492423465236_f04f.png" alt=""></p>
<h4 id="4-Collections-toMap重复key的处理方式"><a href="#4-Collections-toMap重复key的处理方式" class="headerlink" title="4. Collections.toMap重复key的处理方式"></a>4. <code>Collections.toMap</code>重复key的处理方式</h4><p><code>声明User对象</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class User&#123;</div><div class="line">    private Integer id;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public User(Integer id, String name) &#123;</div><div class="line">        this.id = id;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(Integer id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>测试类：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">  public void test_034() &#123;</div><div class="line">      User u1 = new User(1,&quot;张三&quot;);</div><div class="line">      User u2 = new User(1,&quot;王武&quot;);</div><div class="line">      User u3 = new User(2,&quot;李四&quot;);</div><div class="line">      Map&lt;Integer,String&gt; map = Arrays.asList(u1,u2,u3).stream().collect(Collectors.toMap(User::getId, User::getName,(v1,v2) -&gt; v1,HashMap::new));</div><div class="line">      System.out.println(map);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-17/80087753-file_1492425664414_3370.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h3&gt;&lt;h4 id=&quot;1-forEach-VS-forEachOrdered&quot;&gt;&lt;a href=&quot;#1-forEach-VS-forEachOr
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Redux入门</title>
    <link href="http://jianwl.com/2017/04/11/Redux%E5%85%A5%E9%97%A8/"/>
    <id>http://jianwl.com/2017/04/11/Redux入门/</id>
    <published>2017-04-11T00:01:49.000Z</published>
    <updated>2017-04-11T05:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Redux</code>是参考<code>Flux</code>架构思想的库，对<code>Flux</code>许多冗余的部分做了简化。<code>Redux</code>本身只把自己定位成一个<code>可预测的状态容器</code>，接下来学习<code>Redux</code>的三大原则、并实战<code>Redux</code>和<code>React</code>如何结合使用。</p>
<h3 id="Redux运行流程"><a href="#Redux运行流程" class="headerlink" title="Redux运行流程"></a>Redux运行流程</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-11/53696420-file_1491870916439_e756.png" alt=""></p>
<h3 id="Redux三大原则"><a href="#Redux三大原则" class="headerlink" title="Redux三大原则"></a>Redux三大原则</h3><h4 id="1-单一数据源"><a href="#1-单一数据源" class="headerlink" title="1. 单一数据源"></a>1. 单一数据源</h4><p>在<code>Redux</code>中，一个应用永远只有唯一的数据源，这样做的好处在于整个应用状态都保存在一个对象中，这样我们随时可以提取出整个应用的状态进行持久化。同时<code>Redux</code>提供工具函数<code>combineReducers</code>化解数据源对象过于庞大的问题。后文将会介绍。</p>
<h4 id="2-状态是只读的"><a href="#2-状态是只读的" class="headerlink" title="2. 状态是只读的"></a>2. 状态是只读的</h4><p>在<code>Redux</code>中，会定义一个<code>reducer</code>，他的功能是根据当前触发的action对当前应用的状态来进行迭代，并没有直接修改应用的状态，而是返回一份全新的状态。<code>Redux</code>提供的<code>createStore</code>方法会根据reducer生产store，最后可以利用<code>store.dispatch</code>来修改状态。</p>
<h4 id="3-状态修改均由纯函数完成"><a href="#3-状态修改均由纯函数完成" class="headerlink" title="3. 状态修改均由纯函数完成"></a>3. 状态修改均由纯函数完成</h4><p>在<code>Redux</code>中，通过定义<code>reducer</code>来确定状态的修改，而每一个reducer都是纯函数，这样做的好处是，在<code>reducer</code>里对状态的修改变得简单、纯粹、可测试。</p>
<h3 id="Redux核心API"><a href="#Redux核心API" class="headerlink" title="Redux核心API"></a>Redux核心API</h3><p>在<code>Redux</code>中负责响应<code>action</code>并修改数据的角色就是reducer，reducer本质上是一个函数，其函数签名为<code>reducer(previousState,action) =&gt; newState</code>, 可以看出，<code>reducer</code>在处理<code>action</code>的同时，还需要接受一个<code>previousState</code>参数。所以，<code>render</code>的职责是根据<code>previousState</code>和<code>action</code>计算出<code>newState</code>。</p>
<p><code>reduce范例：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const initialState = &#123;</div><div class="line">	todos: []</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义的todos 这个render 在第一次执行的时候，会返回&#123;todos:[]&#125;作为初始化状态</div><div class="line">function todos(previousState = initialState,action) &#123;</div><div class="line">	switch(action.type) &#123;</div><div class="line">	 	case &apos;XXX&apos;: &#123;</div><div class="line">	 		// 具体的业务逻辑</div><div class="line">	 		return newState;</div><div class="line">	 	&#125;</div><div class="line">	 	</div><div class="line">	 	default:</div><div class="line">	 		return previousState;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>getState</td>
<td>获取store中当前的状态</td>
</tr>
<tr>
<td>dispatch(action)</td>
<td>分发一个action，并返回这个action，这是唯一能改变store中数据的方式。</td>
</tr>
<tr>
<td>subscribe(listener)</td>
<td>注册一个监听者，它在store发生变化时被调用</td>
</tr>
<tr>
<td>replaceReducer(nextReducer)</td>
<td>更新当前state里的reducer</td>
</tr>
</tbody>
</table>
<h3 id="Redux与组件"><a href="#Redux与组件" class="headerlink" title="Redux与组件"></a>Redux与组件</h3><p>Redux有两种组件 1️⃣ 容器型组件，表示组件是怎么工作的。 2️⃣ 展示型组件表示组件是怎么渲染的。它包含<code>Virtutal DOM</code>的修改和组合或组件的样式，不依赖任何形式的<code>store</code>。</p>
<p>容器型组件与展示型组件的对比：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>展示型组件「标签、样式」</th>
<th>容器型组件「获取数据、更新状态」</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否感知Redux</td>
<td>否</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>要获取数据</td>
<td>从<code>this.props</code>中获取</td>
<td>使用<code>connect</code>从<code>Redux</code>状态树中获取</td>
</tr>
<tr>
<td>要改变数据</td>
<td>调用从<code>props</code>中传入的<code>action creator</code></td>
<td>直接分发任意<code>action</code></td>
</tr>
<tr>
<td>实际创建于</td>
<td>开发者自身</td>
<td>由<code>React Redux</code>创建</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Redux&lt;/code&gt;是参考&lt;code&gt;Flux&lt;/code&gt;架构思想的库，对&lt;code&gt;Flux&lt;/code&gt;许多冗余的部分
    
    </summary>
    
      <category term="React" scheme="http://jianwl.com/categories/React/"/>
    
    
      <category term="React" scheme="http://jianwl.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React入门实战(二)</title>
    <link href="http://jianwl.com/2017/04/09/React%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98-%E4%BA%8C/"/>
    <id>http://jianwl.com/2017/04/09/React入门实战-二/</id>
    <published>2017-04-09T05:02:42.000Z</published>
    <updated>2017-04-09T09:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以来都很想去学习React，前一段时间因为业务的需要先去学习<code>Python</code>，Python已基本入门，未来一段时间将会来持续学习React技术栈。</p>
<h3 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h3><p>在<code>React</code>中，数据是自顶向下单向流动的，即从父组件到子组件。<code>state</code>和<code>props</code>是<code>React</code>组件中最重要的概念。<code>state</code>只关心每个组件自己内部的状态，这些状态只能在组件内改变。<code>props</code>是<code>React</code>用来让组件之间互相联系的一种机制。</p>
<h3 id="React组件生命周期"><a href="#React组件生命周期" class="headerlink" title="React组件生命周期"></a>React组件生命周期</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/62453041-file_1491716351303_165d7.png" alt="React生命周期整体流程图"></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-state范例"><a href="#1-state范例" class="headerlink" title="1. state范例"></a>1. <code>state</code>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class App03 extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;date: new Date()&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        this.timerID = setInterval(</div><div class="line">            () =&gt; this.tick(),</div><div class="line">            1000</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        clearInterval(this.timerID);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tick() &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            date: new Date()</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;h1&gt;Hello, world!&lt;/h1&gt;</div><div class="line">                &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(&lt;App03/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/36837049-file_1491716947107_15e99.png" alt=""></p>
<h4 id="2-props范例"><a href="#2-props范例" class="headerlink" title="2. props范例"></a>2. <code>props</code>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component,PropTypes &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class App04 extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        name : PropTypes.string,</div><div class="line">    &#125;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                Hello &#123;this.props.name&#125;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;App04 name=&quot;Judy&quot;/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/62676968-file_1491716985916_8d8d.png" alt=""></p>
<h4 id="3-绑定事件"><a href="#3-绑定事件" class="headerlink" title="3. 绑定事件"></a>3. 绑定事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component,PropTypes &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class App09 extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line"></div><div class="line">        this.handleChange = this.handleChange.bind(this);</div><div class="line"></div><div class="line">        this.state = &#123;</div><div class="line">            coffee : [],</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleChange(e) &#123;</div><div class="line">        const &#123;checked, value &#125; = e.target;</div><div class="line">        let &#123; coffee &#125; = this.state;</div><div class="line"></div><div class="line">        if(checked &amp;&amp; coffee.indexOf(value) === -1) &#123;</div><div class="line">            coffee.push(value);</div><div class="line">        &#125; else &#123;</div><div class="line">            coffee = coffee.filter(i =&gt; i !== value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        this.setState(&#123;</div><div class="line">            coffee,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123;coffee&#125; = this.state;</div><div class="line">        const coffeeItems = coffee.map((c =&gt; &lt;li&gt;&#123;c&#125;&lt;/li&gt;));</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;p&gt;请选择你最喜欢的咖啡:&lt;/p&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_1&quot; checked=&#123;coffee.indexOf(&apos;coffee_1&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_1</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_2&quot; checked=&#123;coffee.indexOf(&apos;coffee_2&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_2</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_3&quot; checked=&#123;coffee.indexOf(&apos;coffee_3&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_3</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_4&quot; checked=&#123;coffee.indexOf(&apos;coffee_4&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_4</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;div&gt;</div><div class="line">                    最后选择的咖啡:</div><div class="line">                    &lt;ul&gt;&#123;coffeeItems&#125;&lt;/ul&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;App09/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/44022370-file_1491724470762_50b0.png" alt=""></p>
<h4 id="4-组件间的通信"><a href="#4-组件间的通信" class="headerlink" title="4. 组件间的通信"></a>4. 组件间的通信</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component,PropTypes &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class ListItem extends Component &#123;</div><div class="line">    static defaultProps = &#123;</div><div class="line">        text : &apos;&apos;,</div><div class="line">        checked: false,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">           &lt;li&gt;</div><div class="line">               &lt;input type=&quot;checkbox&quot; checked=&#123;this.props.checked&#125; onChange=&#123;this.props.onChange&#125;/&gt;</div><div class="line">               &lt;span&gt;&#123;this.props.value&#125;&lt;/span&gt;</div><div class="line">           &lt;/li&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class List extends Component &#123;</div><div class="line">    static defaultProps = &#123;</div><div class="line">        list: [],</div><div class="line">        handleItemChange: () =&gt; &#123;&#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line"></div><div class="line">        this.state = &#123;</div><div class="line">            list : this.props.list.map(entry =&gt; (&#123;</div><div class="line">                text: entry.text,</div><div class="line">                checked: entry.checked,</div><div class="line">            &#125;)),</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onItemChange(entry)&#123;</div><div class="line">        const &#123; list &#125; = this.state ;</div><div class="line"></div><div class="line">        this.setState(&#123;</div><div class="line">            list: list.map(prevEntry =&gt; (&#123;</div><div class="line">                text: prevEntry.text,</div><div class="line">                checked: prevEntry.text === entry.text ?</div><div class="line">                    !prevEntry.checked : prevEntry.checked,</div><div class="line">            &#125;)),</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        this.props.handleItemChange(entry);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &#123;this.state.list.map((entry,index) =&gt; (</div><div class="line">                        &lt;ListItem key=&#123;`list-$&#123;index&#125;`&#125; value=&#123;entry.text&#125; checked=&#123;entry.checked&#125; onChange=&#123;this.onItemChange.bind(this,entry)&#125;/&gt;</div><div class="line">                    ))&#125;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class App10 extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line"></div><div class="line">        this.handleItemChange = this.handleItemChange.bind(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleItemChange(item) &#123;</div><div class="line">        console.log(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;List list=&#123;[&#123;text: 1&#125;,&#123;text: 2&#125;]&#125; handleItemChange=&#123;this.handleItemChange&#125;/&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;App10/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/45259056-file_1491729802101_13081.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="external">React官方文档</a></li>
<li>深入React技术栈</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一直以来都很想去学习React，前一段时间因为业务的需要先去学习&lt;code&gt;Python&lt;/code&gt;，Python已基本入门，未来一段时间
    
    </summary>
    
      <category term="React" scheme="http://jianwl.com/categories/React/"/>
    
    
      <category term="React" scheme="http://jianwl.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Intellij 常用快捷键</title>
    <link href="http://jianwl.com/2017/04/05/Intellij-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://jianwl.com/2017/04/05/Intellij-常用快捷键/</id>
    <published>2017-04-05T14:15:36.000Z</published>
    <updated>2017-04-06T00:24:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>IntelliJ在业界被公认为最好的java开发工具之一,了解其常用快捷键对于工作效率会有一定提升。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>查询最近的文件</strong></p>
<p>应用场景：可以快速跳转到之前刚刚查看过的文件。</p>
<p>快捷键：<code>command + E</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/51543212.jpg" alt=""></p>
<p><strong>查看最近编辑的文件</strong></p>
<p>应用场景：可以快速跳转到之前刚刚编辑过的文件。</p>
<p>快捷键：<code>command + shift +  E</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/51543212.jpg" alt=""></p>
<p><strong>快速定位到大括号的开头或结尾</strong></p>
<p>快捷键：<code>command + ]</code> 或 <code>command + [</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/97015680.jpg" alt=""></p>
<p><strong>快速查找类</strong></p>
<p>快捷键：<code>command + N</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/42335832.jpg" alt=""></p>
<p><strong>格式化代码</strong></p>
<p>快捷键：<code>command + alt + L</code></p>
<p><strong>文本替换</strong></p>
<p>快捷键：<code>command + R</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/60502414.jpg" alt=""></p>
<p><strong>全局查找</strong></p>
<p>快捷键： <code>control + shift + F</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/85182590.jpg" alt=""></p>
<p><strong>删除行</strong></p>
<p>快捷键：<code>command + X</code></p>
<p><strong>复制行</strong></p>
<p>快捷键：<code>command + D</code></p>
<p><strong>跳到方法实现处</strong></p>
<p>使用场景：通常我们会声明一个接口，然后让一个类实现这个接口。那么怎么从接口，跳到方法实现处呢？可以用这个快捷键</p>
<p>快捷键： <code>command + alt + B</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/41820209.jpg" alt=""></p>
<p><strong>隐藏工具窗口</strong></p>
<p>快捷键： <code>shift + esc</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/75772825.jpg" alt=""></p>
<p><strong>定位到具体某一行</strong></p>
<p>快捷键：<code>command + G</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/99125758.jpg" alt=""></p>
<p><strong>复制当前文件的路径</strong></p>
<p>快捷键：<code>command + shift + C</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/26431733.jpg" alt=""></p>
<p><strong>重命名</strong></p>
<p>快捷键：<code>shift + fn + F6</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/88468445.jpg" alt=""></p>
<p><strong>根据接口或抽象类找到实现/继承类</strong></p>
<p>快捷键：<code>alt + command + B</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-6/32445215-file_1491438185245_a538.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;IntelliJ在业界被公认为最好的java开发工具之一,了解其常用快捷键对于工作效率会有一定提升。&lt;/p&gt;
&lt;h3 id=&quot;场景&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="Intellij IDEA" scheme="http://jianwl.com/categories/Intellij-IDEA/"/>
    
    
      <category term="Intellij IDEA" scheme="http://jianwl.com/tags/Intellij-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>TCP之网络基础知识</title>
    <link href="http://jianwl.com/2017/04/04/TCP%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://jianwl.com/2017/04/04/TCP之网络基础知识/</id>
    <published>2017-04-04T03:38:28.000Z</published>
    <updated>2017-04-04T07:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>TCP</code>是网络编程的基础，这一节我们主要来学习<code>协议分层</code>、<code>ARP</code>、<code>RARP</code>、<code>IP</code> 、<code>Mac地址</code>、<code>OSPF路由协议</code>、<code>硬件设备介绍</code>。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="1-OSI-7层协议-amp-各层的作用"><a href="#1-OSI-7层协议-amp-各层的作用" class="headerlink" title="1. OSI 7层协议 &amp; 各层的作用"></a>1. OSI 7层协议 &amp; 各层的作用</h4><p><code>OSI</code>参考模型分为7层，上下层之间进行交互时所遵循的约定叫<code>接口</code>，同一层之间的交互所遵循的约定叫<code>协议</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">层</th>
<th style="text-align:center">分层名称</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">每层功能概览</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">应用层</td>
<td style="text-align:center">针对特定应用的协议</td>
<td style="text-align:center">如：电子邮件 → 电子邮箱协议；文件传输 → 文件传输协议</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">表示层</td>
<td style="text-align:center">设备固有数据格式和网络标准数据格式的转换</td>
<td style="text-align:center">接收不同表现形式的信息，如文字流、图像、声音等</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">会话层</td>
<td style="text-align:center">负责建立和断开通讯，以及<strong>数据的分割</strong>等数据传输相关的管理</td>
<td style="text-align:center">何时建立连接，何时断开连接以及保持多久的连接？</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">传输层</td>
<td style="text-align:center">只在通信双方的节点上进行处理，而无需再路由器上处理，起着可靠传输的作用。</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/76951531-file_1491280215483_aa6e.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">网络层</td>
<td style="text-align:center">将数据传输到目标地址，目标地址可以是多个网络通过路由器连接而成的某一个地址。这一层主要<strong>负责寻址</strong>和<strong>路由选择</strong>。</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/17373754-file_1491280668058_18508.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">数据链路层</td>
<td style="text-align:center">负责物理层面上的互联、节点之间的通信传输，将<code>0</code>、<code>1</code>序列划分为具有意义的数据帧传给对端</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/4389953-file_1491281059377_14847.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">物理层</td>
<td style="text-align:center">负责<code>0</code>、<code>1</code>比特流与电压高低、光的闪灭之间的互换</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/80710941-file_1491281893820_70a6.png" alt=""></td>
</tr>
</tbody>
</table>
<h4 id="2-一个请求的从发送到返回都经历了什么？"><a href="#2-一个请求的从发送到返回都经历了什么？" class="headerlink" title="2. 一个请求的从发送到返回都经历了什么？"></a>2. 一个请求的从发送到返回都经历了什么？</h4><p><code>HTTP请求「应用层」</code> → <code>DNS协议，域名映射IP</code> → <code>HTTP基于TCP/IP协议「传输层」</code> → <code>ARP协议获取接收端Mac地址 通过OSPF路由协议找到目标主机「网络层」</code> → <code>传输数据帧「数据链路层」</code> → <code>将计算机二进制 0、1信号 转换为电压的高低电平「物理层」</code></p>
<h4 id="3-ARP"><a href="#3-ARP" class="headerlink" title="3. ARP"></a>3. ARP</h4><p>只要确定<code>IP</code>地址，就可以向这个目标地址发送<code>IP</code>数据报，然后在<strong>数据链路层</strong>，进行实际通信时需要每个IP地址所对应的<code>MAC</code>地址。</p>
<p><code>ARP</code>是一个解决地址问题的协议，以目标<code>IP</code>地址作为线索，用来定位下一个应该接收数据分包的网络对应的<code>MAC</code>地址。如果目标主机不在同一个链路上，可以<strong>通过代理ARP的路由器</strong>将<code>ARP</code>请求转发给相邻网段。「注：<code>ARP</code>包会被路由器隔离，<code>ARP</code>只适用于<code>IPv4</code>,<code>IPv6</code>用<code>ICMpv6</code>」</p>
<p>举例：</p>
<p><code>主机A</code>为了获取<code>主机B</code>的<code>Mac</code>地址，通过广播发送一个<code>ARP</code>请求包「请求中包含<code>主机B</code>的<code>IP</code>地址」，由于广播的包可以被同一个链路上所有的主机或路由器接收，如果<code>ARP</code>请求包中的目标<code>IP</code>与自己的<code>IP</code>地址一致，那么这个节点就将自己的<code>Mac</code>地址塞入<code>ARP</code>响应包返回给<code>主机A</code>。</p>
<h4 id="4-RARP"><a href="#4-RARP" class="headerlink" title="4. RARP"></a>4. RARP</h4><p><code>RARP</code>是将<code>ARP</code>反过来，从<code>MAC</code>地址定位IP地址的一种协议。</p>
<h4 id="5-IP地址"><a href="#5-IP地址" class="headerlink" title="5. IP地址"></a>5. IP地址</h4><p><code>IP地址</code>处于网络层， 用于在<strong>连接到网络中的所有主机识别出进行通信的目标地址；</strong> <code>IP地址</code>由32位正整数来表示，每8位为一组，分4组，每组以<code>.</code>隔开；<code>IP地址</code>由<strong>网络标识</strong>和<strong>主机标识</strong>两部分组成。相同网段内的主机必须有相同的网络标识，主机标识不允许在同一个网段内重复出现。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/15647844-file_1491288228515_fbc6.png" alt=""></p>
<p>目前引入子网以后，一个IP地址有了两种识别码，一个是<code>IP</code>本身，另一个是<code>子网掩码</code>。子网掩码对应<code>IP网络标识</code>部分的位全部为<code>1</code>，对应<code>IP地址主机识别</code>的部分则全部为<code>0</code>。</p>
<p>举例：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/84217771-file_1491288982288_790d.png" alt=""></p>
<h4 id="6-MAC地址"><a href="#6-MAC地址" class="headerlink" title="6. MAC地址"></a>6. MAC地址</h4><p><code>Mac</code>地址用于识别数据链路中的互连的节点，<code>Mac</code>地址长48比特，每个<strong>网卡</strong>都有一个唯一的<code>Mac</code>地址。</p>
<h4 id="7-OSPF"><a href="#7-OSPF" class="headerlink" title="7. OSPF"></a>7. OSPF</h4><p><code>OSPF</code>为链路状态型路由器，相邻路由器之间交换链路状态生成网络拓扑信息，然后在根据这个拓扑信息生成路由控制表。<code>OSPF</code>给每条链路赋予一个权重，并始终选择一个权重最小的路径作为最终路由。「注：连接到同一个链路的路由器称作相邻路由器」</p>
<h4 id="8-硬件设备"><a href="#8-硬件设备" class="headerlink" title="8. 硬件设备"></a>8. 硬件设备</h4><table>
<thead>
<tr>
<th style="text-align:center">设备</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">网卡</td>
<td style="text-align:center">使计算机连网的设备</td>
</tr>
<tr>
<td style="text-align:center">中继器</td>
<td style="text-align:center">从物理上延长网络的设备，由电缆传过来的电信号或光信号经由中继放大器的波形调整和放大再传给另外一个电缆。</td>
</tr>
<tr>
<td style="text-align:center">网桥/2层交换机</td>
<td style="text-align:center">从数据链路层上延长网络的设备，它能识别数据链路层中的数据帧，并将这些数据帧临时存储于内存中，在重新生成信号作为一个全新帧给相连的另一个网段。</td>
</tr>
<tr>
<td style="text-align:center">路由器/3层交换机</td>
<td style="text-align:center">通过网络层转发分组数据的设备，路由器用于连接不同的数据链路。</td>
</tr>
<tr>
<td style="text-align:center">4~7层交换机</td>
<td style="text-align:center">处理传输层以上各层网络传输的设备</td>
</tr>
<tr>
<td style="text-align:center">网关</td>
<td style="text-align:center">转换协议的设备，例子：电脑和手机之间设置了一道网关，是的电脑和手机间可以互发邮件。</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>图解TCP/IP - 竹下隆史</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;TCP&lt;/code&gt;是网络编程的基础，这一节我们主要来学习&lt;code&gt;协议分层&lt;/code&gt;、&lt;code&gt;ARP&lt;/code&gt;、
    
    </summary>
    
      <category term="HTTP" scheme="http://jianwl.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://jianwl.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Vim之常用快捷键</title>
    <link href="http://jianwl.com/2017/04/04/Vim%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://jianwl.com/2017/04/04/Vim之常用快捷键/</id>
    <published>2017-04-04T00:18:21.000Z</published>
    <updated>2017-04-04T00:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Vim</code>是最常用的文本编辑器，掌握常用的快捷键，可以极大的增强工作效率。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="1-移动光标"><a href="#1-移动光标" class="headerlink" title="1. 移动光标"></a>1. 移动光标</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gg 光标移动文本首行</div><div class="line">G 光标移到文本末行</div><div class="line">nG 光标移动到第n行</div><div class="line">nEnter 光标下移n行</div><div class="line">0 光标移到本行开头</div><div class="line">$ 光标移到本行末尾</div><div class="line">CTRL+F 下一页</div><div class="line">CTRL+B 上一页</div></pre></td></tr></table></figure>
<h4 id="2-查找-amp-替换"><a href="#2-查找-amp-替换" class="headerlink" title="2. 查找&amp;替换"></a>2. 查找&amp;替换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/word 向下查找word</div><div class="line">n 重复上一个查找</div><div class="line">N 反向查找</div><div class="line">:1,$s/word1/word2/gc 把word1替换成word2</div></pre></td></tr></table></figure>
<h4 id="3-编辑操作"><a href="#3-编辑操作" class="headerlink" title="3. 编辑操作"></a>3. 编辑操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dd 删除光标所在行</div><div class="line">ndd 向下删除n行</div><div class="line">x 删除一个字符</div><div class="line">nx 删除n个字符</div><div class="line">yy 复制光标所在行</div><div class="line">nyy 向下复制n行</div><div class="line">p 粘贴到光标下一行</div></pre></td></tr></table></figure>
<h4 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">u 撤销上一个操作</div><div class="line">CTRL+R 恢复之前的操作</div><div class="line">. 重复上一个操作</div><div class="line">:set nu 显示行号</div><div class="line">:set nonu 不显示行号</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://fqk.io/page/29/" target="_blank" rel="external">vi快捷键备忘</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Vim&lt;/code&gt;是最常用的文本编辑器，掌握常用的快捷键，可以极大的增强工作效率。&lt;/p&gt;
&lt;h3 id=&quot;理论&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之正则表达式实战</title>
    <link href="http://jianwl.com/2017/04/02/JAVA%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E6%88%98/"/>
    <id>http://jianwl.com/2017/04/02/JAVA之正则表达式实战/</id>
    <published>2017-04-02T11:35:48.000Z</published>
    <updated>2017-04-02T12:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节主要来学习，正则表达式在<code>JAVA</code>中的运用。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-获取匹配值"><a href="#1-获取匹配值" class="headerlink" title="1. 获取匹配值"></a>1. 获取匹配值</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/59243831-file_1491135662906_16f46.png" alt=""></p>
<h4 id="2-查找与替换"><a href="#2-查找与替换" class="headerlink" title="2. 查找与替换"></a>2. 查找与替换</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/44125256-file_1491136420354_158ed.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>精通正则表达式 - 余晟</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这一节主要来学习，正则表达式在&lt;code&gt;JAVA&lt;/code&gt;中的运用。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; cl
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式入门(二)</title>
    <link href="http://jianwl.com/2017/04/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <id>http://jianwl.com/2017/04/02/正则表达式入门-二/</id>
    <published>2017-04-02T03:50:41.000Z</published>
    <updated>2017-04-02T11:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="http://jianwl.com/2017/04/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/#more">上一节正则表达式入门</a>,学习了正则表达的基本功，这一节将继续深入学习正则表达式。</p>
<h3 id="正则表达式语法进阶"><a href="#正则表达式语法进阶" class="headerlink" title="正则表达式语法进阶"></a>正则表达式语法进阶</h3><h4 id="1-常用的字符"><a href="#1-常用的字符" class="headerlink" title="1) 常用的字符"></a>1) 常用的字符</h4><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\s</td>
<td>任何”空白”字符「空格符、制表符、进制符等」</td>
</tr>
<tr>
<td>\S</td>
<td>除<code>\s</code>之外的任何字符</td>
</tr>
<tr>
<td>\w</td>
<td><code>[a-zA-Z0-9]</code>在<code>\w+</code>中很有用，可以用来匹配一个单词</td>
</tr>
<tr>
<td>\W</td>
<td>除<code>\w</code>之外的任何字符，也就是<code>[^a-zA-Z0-9]</code></td>
</tr>
<tr>
<td>\d</td>
<td><code>[0-9]</code>,即数字</td>
</tr>
<tr>
<td>\D</td>
<td>除<code>\d</code>外的任何字符，即<code>[^0-9]</code></td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界，只是一个位置，这个位置的一侧是构成单词的字符，另一侧为非单词字符、字符串的开始或结束位置。<code>\b</code>是零宽度的。</td>
</tr>
</tbody>
</table>
<p>实战</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/33870462-file_1491108739351_155aa.png" alt=""></p>
<h4 id="2-输入正整数"><a href="#2-输入正整数" class="headerlink" title="2) 输入正整数"></a>2) 输入正整数</h4><p><code>perl</code>简单语法介绍，<code>=~</code>用来连接正则表达式和待搜索的目标字符串。<code>m/.../</code>告诉<code>Perl</code>该对这个正则表达式进行什么操作。<code>m</code>代表尝试进行<code>正则表达式匹配</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/57253842-file_1491115515846_f21d.png" alt=""></p>
<h4 id="3-输入正-amp-负小数、正-amp-负整数"><a href="#3-输入正-amp-负小数、正-amp-负整数" class="headerlink" title="3) 输入正&amp;负小数、正&amp;负整数"></a>3) 输入正&amp;负小数、正&amp;负整数</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/34044067-file_1491116256845_4c73.png" alt=""></p>
<h4 id="4-使用正则表达式修改文本"><a href="#4-使用正则表达式修改文本" class="headerlink" title="4) 使用正则表达式修改文本"></a>4) 使用正则表达式修改文本</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/231628-file_1491117893226_1375.png" alt=""></p>
<h4 id="5）-四种类型的环视-难点"><a href="#5）-四种类型的环视-难点" class="headerlink" title="5） 四种类型的环视(难点)"></a>5） 四种类型的环视(难点)</h4><table>
<thead>
<tr>
<th>类型</th>
<th>正则表达式</th>
<th>匹配成功的条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>肯定逆序环视</td>
<td><code>?&lt;=...</code></td>
<td>子表达式能够成功匹配<strong>左侧</strong>文本</td>
</tr>
<tr>
<td>肯定顺序环视</td>
<td><code>?=...</code></td>
<td>子表达式能够匹配<strong>右侧</strong>文本 </td>
</tr>
<tr>
<td>否定逆序环视</td>
<td><code>?&lt;!...</code></td>
<td>子表达式不能匹配<strong>左侧</strong>文本</td>
</tr>
<tr>
<td>否定顺序环视</td>
<td><code>?!...</code></td>
<td>子表达式不能匹配<strong>右侧</strong>文本</td>
</tr>
</tbody>
</table>
<p>注意： 环视不消耗正则表达式的匹配字符。</p>
<h5 id="（1）-环视概念与匹配过程示例"><a href="#（1）-环视概念与匹配过程示例" class="headerlink" title="（1）. 环视概念与匹配过程示例"></a>（1）. 环视概念与匹配过程示例</h5><p>对于源字符串<code>ABC</code>，正则<code>(?=A)[A-Z]</code>匹配的是：</p>
<p>1、 <code>(?=A)</code>所在的位置，后面是<code>A</code> </p>
<p>2、 表达式<code>[A-Z]</code>匹配<code>A-Z</code>中任意一个字母，根据两个的先后位置关系，组合在一起，那就是<code>(?=A)</code>所在的位置，后面是A，而且是<code>A-Z</code>中任意一个字母，因此上面正则表达式匹配一个大写字母<code>A</code></p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/29664732-file_1491122472393_140ae.png" alt=""></p>
<h5 id="2-肯定顺序实战："><a href="#2-肯定顺序实战：" class="headerlink" title="(2) . 肯定顺序实战："></a>(2) . 肯定顺序实战：</h5><p><code>[A-Za-z]+(?=;)</code>,字母序列后面跟着<code>；</code></p>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/93389675-file_1491123341579_f721.png" alt=""></p>
<h5 id="3-肯定逆序实战"><a href="#3-肯定逆序实战" class="headerlink" title="(3) . 肯定逆序实战"></a>(3) . 肯定逆序实战</h5><p><code>\b[0-9]\b(?&lt;=[13579])</code>，0-9中的基数;</p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/64931704-file_1491124392441_14979.png" alt=""></p>
<h5 id="4-否定顺序实战"><a href="#4-否定顺序实战" class="headerlink" title="(4) . 否定顺序实战"></a>(4) . 否定顺序实战</h5><p><code>(?!.*?[0h])\b[a-z0-9]+\b</code>，不包含<code>0</code>和<code>h</code>的字母和数字系列</p>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/58656792-file_1491125331588_15359.png" alt=""></p>
<h5 id="5-否定逆序实战"><a href="#5-否定逆序实战" class="headerlink" title="(5) . 否定逆序实战"></a>(5) . 否定逆序实战</h5><p><code>\b[a-z]+(?&lt;!z)\b</code>, 不以<code>z</code>结尾的单词</p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/28220906-file_1491125753738_94b.png" alt=""></p>
<h5 id="6-进阶的练习"><a href="#6-进阶的练习" class="headerlink" title="(6) . 进阶的练习"></a>(6) . 进阶的练习</h5><p>给一组数字从右到左，每三位加一个逗号;</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/43300392-file_1491131531371_d909.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.cnblogs.com/Zjmainstay/p/regexp-lookaround.html" target="_blank" rel="external">环视的用法</a></li>
<li><a href="http://blog.csdn.net/lxcnn/article/details/4355364" target="_blank" rel="external">\b 单词边界</a></li>
<li>精通正则表达式 - 余晟</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://jianwl.com/2017/04/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%B
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式入门</title>
    <link href="http://jianwl.com/2017/04/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://jianwl.com/2017/04/01/正则表达式入门/</id>
    <published>2017-04-01T15:00:58.000Z</published>
    <updated>2017-04-02T03:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>正则表达式是文本处理&amp;数据爬取的神器，但由于语法难记且在日常工作中用到的机会较少，所以对这一神器知之甚少，这节来学习正则表达式的简单用法。</p>
<h3 id="egrep用法"><a href="#egrep用法" class="headerlink" title="egrep用法"></a>egrep用法</h3><p>文本检索是正则表达式最简单的应用之一 – Mac系统下<code>egrep</code>提供了文本正则表达式的检索功能。举个简单的例子:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-1/87069959-file_1491061667712_8d09.png" alt=""></p>
<h3 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h3><h4 id="1-行的开始和结束"><a href="#1-行的开始和结束" class="headerlink" title="1. 行的开始和结束"></a>1. 行的开始和结束</h4><p><code>^</code>代表一行的开始，<code>$</code>代表结束</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-1/71581110-file_1491061994393_b0fa.png" alt=""></p>
<h4 id="2-字符组"><a href="#2-字符组" class="headerlink" title="2. 字符组"></a>2. 字符组</h4><h5 id="1-范围型字符组"><a href="#1-范围型字符组" class="headerlink" title="1) 范围型字符组"></a>1) 范围型字符组</h5><p>匹配若干字符之一，可以使用结构体<code>[...]</code>,在字符组内部，<strong>字符组元字符</strong><code>-</code>表示一个范围比如<code>[0-9]</code>。特别注意：<strong>连字符</strong><code>-</code>只有在字符组内部才能表示范围，否则就是普通字符。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/54684166-file_1491062598112_9911.png" alt=""></p>
<h5 id="2）排除型字符组"><a href="#2）排除型字符组" class="headerlink" title="2）排除型字符组"></a>2）排除型字符组</h5><p>字符组会匹配任何未列出的字符，可以用结构体<code>[^...]</code>表示，<code>^</code>在字符组的开头表示排除。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/72090159-file_1491095085321_162c1.png" alt=""></p>
<h4 id="3-用点号匹配任意字符"><a href="#3-用点号匹配任意字符" class="headerlink" title="3. 用点号匹配任意字符"></a>3. 用点号匹配任意字符</h4><p>元字符<code>.</code>是用来匹配任意字符的字符组。例如我们要搜索<code>92/06/02</code>、<code>92-06-02</code>、<code>92.06.02</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/77946479-file_1491096549681_13890.png" alt=""></p>
<h4 id="4-匹配任意子表达式"><a href="#4-匹配任意子表达式" class="headerlink" title="4. 匹配任意子表达式"></a>4. 匹配任意子表达式</h4><p><code>|</code>表示或，能够匹配多个子表达式。比如<code>First</code>和<code>1st</code>是两个表达式，用正则表达式匹配<code>(Fir|1)st</code>,括号是必须的。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/9589231-file_1491097579389_ae64.png" alt=""></p>
<h4 id="5-egrep-忽略大小写"><a href="#5-egrep-忽略大小写" class="headerlink" title="5. egrep 忽略大小写"></a>5. egrep 忽略大小写</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/76759955-file_1491097883322_b1d9.png" alt=""></p>
<h4 id="6-可选元素"><a href="#6-可选元素" class="headerlink" title="6. 可选元素"></a>6. 可选元素</h4><p><code>?</code>代表可选项，把它加在一个字符的后面，就表示此处容许出现这个字符。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/34841121-file_1491098454865_70b6.png" alt=""></p>
<h4 id="7-重复元素"><a href="#7-重复元素" class="headerlink" title="7. 重复元素"></a>7. 重复元素</h4><table>
<thead>
<tr>
<th>符号</th>
<th>次数下限</th>
<th>次数上限</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>？</code></td>
<td>无</td>
<td>1</td>
<td><strong>在<code>?</code>之前的元素</strong>可以不出现，也可以只出现一次</td>
</tr>
<tr>
<td><code>*</code></td>
<td>无</td>
<td>无</td>
<td><strong>在<code>*</code>之前出现的元素</strong>可以出现无数次，也可以不出现</td>
</tr>
<tr>
<td><code>+</code></td>
<td>1</td>
<td>无</td>
<td><strong>在<code>+</code>之前出现的元素</strong>可以出现无数次，但至少要出现一次</td>
</tr>
</tbody>
</table>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/93512234-file_1491099677438_125b8.png" alt=""></p>
<p>规定重复出现的次数<code>{min,max}</code> </p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/58020717-file_1491101398884_a930.png" alt=""></p>
<h4 id="8-神奇的转义字符"><a href="#8-神奇的转义字符" class="headerlink" title="8. 神奇的转义字符\"></a>8. 神奇的转义字符<code>\</code></h4><p>使用转义符<code>\</code>，元字符就会失去特殊含义，比如匹配<code>90.06.02</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/35875132-file_1491101901364_14a1a.png" alt=""></p>
<h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p>匹配24小时制<code>HH:MM</code>,特别注意以2开头的时间如 <code>21:59</code></p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/1904614-file_1491103167597_9411.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>符号</th>
<th>元字符</th>
<th>匹配对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>  <code>.</code></td>
<td>点号</td>
<td>匹配单个任意字符</td>
</tr>
<tr>
<td>  <code>[...]</code></td>
<td>字符组</td>
<td>匹配单个列出的字符</td>
</tr>
<tr>
<td><code>[^...]</code></td>
<td>排除型字符组</td>
<td>匹配单个未列出的字符</td>
</tr>
<tr>
<td><code>\char</code></td>
<td>转义字符</td>
<td>若char是元字符，匹配char对应的普通字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>问号</td>
<td>容许匹配一次，但非必需</td>
</tr>
<tr>
<td><code>*</code></td>
<td>星号</td>
<td>容许匹配多次，但也可不匹配</td>
</tr>
<tr>
<td><code>+</code></td>
<td>加号</td>
<td>至少匹配一次，至多可以任意次</td>
</tr>
<tr>
<td><code>{min,max}</code></td>
<td>区间量词</td>
<td>至少需要min次，至多可能任意次「不是所有egrep版本都支持」</td>
</tr>
<tr>
<td><code>^</code></td>
<td>脱字符</td>
<td>匹配一行的开头位置</td>
</tr>
<tr>
<td><code>$</code></td>
<td>美元符</td>
<td>匹配一行的结束位置</td>
</tr>
<tr>
<td><code>(...)</code></td>
<td>括号</td>
<td>限定多选结构的范围</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://item.jd.com/11070361.html" target="_blank" rel="external">精通正则表达式- 余晟</a> </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;正则表达式是文本处理&amp;amp;数据爬取的神器，但由于语法难记且在日常工作中用到的机会较少，所以对这一神器知之甚少，这节来学习正则表达式的简单
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Mac下效率神器之autojump</title>
    <link href="http://jianwl.com/2017/04/01/Mac%E4%B8%8B%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E4%B9%8Bautojump/"/>
    <id>http://jianwl.com/2017/04/01/Mac下效率神器之autojump/</id>
    <published>2017-04-01T12:59:10.000Z</published>
    <updated>2017-04-01T14:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>过去常用到的一些命令，习惯在<code>.zshrc</code>文件中添加几行快捷键命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias dada = cd /Users/jianweilin/Work/Java/dada</div><div class="line">alias test = cd /Users/jianweilin/Work/Java/test</div></pre></td></tr></table></figure>
<p>发现一个跳转神器<code>autojump</code>，举个例子</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-1/74960136-file_1491052275484_549a.png" alt=""></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、 建议安装<code>zsh</code></p>
<p>2、建议安装<code>homebrew</code></p>
<p>3、 <code>brew install autojump</code></p>
<p>4、 <code>vim ~/.zshrc</code>找到<code>plugins=</code>，在后面添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(git autojump)</div></pre></td></tr></table></figure>
<p>5、然后继续在上述文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure>
<p>6、 <code>source ~/.zshrc</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://barretlee.com/blog/2015/03/30/autojump-in-mac/" target="_blank" rel="external">Mac下的效率工具autojump –阿里小胡子哥</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;过去常用到的一些命令，习惯在&lt;code&gt;.zshrc&lt;/code&gt;文件中添加几行快捷键命令:&lt;/p&gt;
&lt;figure class=&quot;high
    
    </summary>
    
      <category term="Mac" scheme="http://jianwl.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://jianwl.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>关于代码阅读的思考</title>
    <link href="http://jianwl.com/2017/04/01/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://jianwl.com/2017/04/01/关于代码阅读的思考/</id>
    <published>2017-04-01T06:04:49.000Z</published>
    <updated>2017-04-02T00:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个工程师，你的价值如何体现？不是掌握了多少知识，而是体现在创造出的系统，否则空有满腹经纶，最后也只是纸上谈兵。学习编写优秀代码的最佳方式，就是阅读高品质的代码，学习别人的高明之处。这一节我们将来学习阅读优秀源码的技巧。</p>
<h3 id="阅读代码"><a href="#阅读代码" class="headerlink" title="阅读代码"></a>阅读代码</h3><h4 id="1-为什么阅读代码"><a href="#1-为什么阅读代码" class="headerlink" title="1. 为什么阅读代码"></a>1. 为什么阅读代码</h4><p>经常花时间阅读别人编写的高质量代码，就像阅读高品质的散文能够丰富词汇，激发想象力，扩展思维一样，分析设计良好的软件系统的内部结构可以学到<code>新的架构模式</code>、<code>数据结构</code>、<code>编码方法</code>、<code>算法</code>、<code>风格</code>和<code>文档规范</code>、<code>应用程序编程接口(API)</code>，同时可以提高编写代码的水准。</p>
<p>阅读代码的过程中，不可避免地会遇到一些在实践中应该尽量避免的代码，能够快速地从坏代码中区分出好代码是一项有价值的技能；接触一些编码的反面例子有助于提高这种能力，通过下面这些征兆，可以很容易识别出低品质的代码：1️⃣ 编码风格不一致 2️⃣ 结构不必要地复杂或难以理解 3️⃣ 明显的逻辑错误或疏忽 4️⃣ 过度使用不可移植的构造 5️⃣ 缺乏维护</p>
<p>大型、有组织体制之下的项目都会采纳一套编码规范、指导原则或约定，代码规范提供风格上的指导，目标是增强代码的可靠性、易读性和可维护性。关注优秀源码的<code>类命名</code>、<code>变量命名</code>、<code>代码缩进</code>、<code>代码编排</code>、<code>命名约定</code>、<code>文档</code>；</p>
<p>通过阅读优秀源码，我们可以学习到<code>分层架构的设计</code>、<code>更加合理的抽象面向对象的结构</code>、<code>如何更加合理的拆分模块</code>、<code>代码重用</code></p>
<h4 id="2-如何阅读代码"><a href="#2-如何阅读代码" class="headerlink" title="2. 如何阅读代码"></a>2. 如何阅读代码</h4><p>有选择地阅读代码，同时还有<code>有自己的目标</code>。想学习新的模式、编码风格还是满足某些需求的方法？或者只是浏览代码，获取其中的某些亮点。</p>
<p>从小型的程序开始阅读，不要立即陷入对大型系统的研究中，编译研究的程序并运行他们，这样可以得到即时的反馈，了解代码预想的工作方式，同时可以获得成就感。</p>
<p>积极介入现实的代码，能够快速从中了解到一些情况，当觉得已经掌握了他们之后，再采取更有组织的方式来学习，比如：阅读相关书籍、文档、手册、参加培训课程。</p>
<h4 id="3-实战"><a href="#3-实战" class="headerlink" title="3. 实战"></a>3. 实战</h4><p>比如：想要了解一个特定的功能是如何实现的。首先使用该系统，得到他的外部接口，根据外部接口，定位目标代码，针对它进行研究分析，忽略不相关的部分。如果觉得在原来的上下文中，理解代码有困难，就将他复制到一个历史文件中，删除所有不相关的部分。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、养成一个习惯，经常花时间阅读别人编写的高品质代码</p>
<p>2、要有选择地阅读代码，同时还要有自己的目标，想学习新的模式、编码风格、还是满足某些需求的方法</p>
<p>3、对于那些大型且组织良好的系统，只需要最低限度地了解它的全部功能，就能够对它做出修改。</p>
<p>4、向系统中增加新功能时，首先的任务就是找到类似特性的代码，将它作为待实现功能的模板。</p>
<p>5、阅读代码寻找重构机会时，先从系统的架构开始，然后逐步细化，能够获得最大的效益。</p>
<p>6、不需要为了效率，牺牲代码的可读性</p>
<p>7、通过浏览项目的源代码树 – 包含项目源代码的层次目录结构，来分析一个项目的组织方式，源码树常常能够反映出项目在架构和软件过程上的结构。</p>
<p>8、<strong>阅读代码时，应该尽可能利用任何能够得到的文档。</strong></p>
<p>9、<strong>阅读一个小时代码所得到的信息只不过相当于阅读一分钟文档</strong></p>
<p>10、可以将系统的设计规格说明作为认知代码结构的路线图，阅读具体代码的指引</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>代码阅读方法与实践</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一个工程师，你的价值如何体现？不是掌握了多少知识，而是体现在创造出的系统，否则空有满腹经纶，最后也只是纸上谈兵。学习编写优秀代码的最佳方
    
    </summary>
    
      <category term="思绪" scheme="http://jianwl.com/categories/%E6%80%9D%E7%BB%AA/"/>
    
    
      <category term="思绪" scheme="http://jianwl.com/tags/%E6%80%9D%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>Python之易出错语法</title>
    <link href="http://jianwl.com/2017/03/31/Python%E4%B9%8B%E6%98%93%E5%87%BA%E9%94%99%E8%AF%AD%E6%B3%95/"/>
    <id>http://jianwl.com/2017/03/31/Python之易出错语法/</id>
    <published>2017-03-31T06:36:34.000Z</published>
    <updated>2017-03-31T09:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要记录<code>Python</code>和<code>Java</code>不一样的语法，用于备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-三目运算"><a href="#1-三目运算" class="headerlink" title="1. 三目运算"></a>1. 三目运算</h4><p>语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">为真的结果  if 判断条件 else 为假的结果</div></pre></td></tr></table></figure>
<p>实战</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/68640470-file_1490942427899_33c0.png" alt=""></p>
<h5 id="2-flask-josnify与json-dumps的区别"><a href="#2-flask-josnify与json-dumps的区别" class="headerlink" title="2. flask.josnify与json.dumps的区别"></a>2. flask.josnify与json.dumps的区别</h5><p>json操作：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/98569674-file_1490945276911_e3be.png" alt=""></p>
<p>jsonify操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def render_success(content=None):</div><div class="line">    data = dict(</div><div class="line">        status=u&apos;ok&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    if content is not None:</div><div class="line">        data.update(</div><div class="line">            content=content</div><div class="line">        )</div><div class="line"></div><div class="line">    return jsonify(data)</div></pre></td></tr></table></figure>
<p>区别：</p>
<p>jsonify在flask中返回<code>flask.Response()</code>已经在返回的对象的<code>Header</code>中塞入<code>content-type: application/json</code>，而<code>json.dumps()</code>仅仅是返回一个编码后的字符串。</p>
<h4 id="3-判断是否是某一类型"><a href="#3-判断是否是某一类型" class="headerlink" title="3. 判断是否是某一类型"></a>3. 判断是否是某一类型</h4><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(object,classinfo)</div></pre></td></tr></table></figure>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/9606019-file_1490947230781_fc6f.png" alt=""></p>
<h4 id="4-args和-kwargs区别？"><a href="#4-args和-kwargs区别？" class="headerlink" title="4. *args和**kwargs区别？"></a>4. <code>*args</code>和<code>**kwargs</code>区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*args 元组,特别注意入参的方式</div><div class="line">**kwargs 字典,特别注意入参的方式</div></pre></td></tr></table></figure>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/7333141-file_1490950330464_129f0.png" alt=""></p>
<h4 id="5-set取交集"><a href="#5-set取交集" class="headerlink" title="5. set取交集"></a>5. <code>set</code>取交集</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/57928855-file_1490953364605_13cda.png" alt=""></p>
<h4 id="6-xrange数据集"><a href="#6-xrange数据集" class="headerlink" title="6. xrange数据集"></a>6. <code>xrange</code>数据集</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/86398939-file_1490953813150_14023.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://stackoverflow.com/questions/7907596/json-dumps-vs-flask-jsonify" target="_blank" rel="external">json-dumps-vs-flask-jsonify</a></li>
<li><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">python官方文档</a></li>
<li><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs" target="_blank" rel="external">args-and-kwargs - stackoverflow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本节主要记录&lt;code&gt;Python&lt;/code&gt;和&lt;code&gt;Java&lt;/code&gt;不一样的语法，用于备忘。&lt;/p&gt;
&lt;h3 id=&quot;实战
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之时间模块</title>
    <link href="http://jianwl.com/2017/03/31/Python%E4%B9%8B%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9D%97/"/>
    <id>http://jianwl.com/2017/03/31/Python之时间模块/</id>
    <published>2017-03-31T04:23:43.000Z</published>
    <updated>2017-03-31T05:44:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Python</code>自带的时间工具，不支持对月、年的加减，找到一个好用的时间工具包<a href="http://labix.org/python-dateutil#head-1443e0f14ad5dff07efd465e080d1110920673d8" target="_blank" rel="external">python-dateutil</a>，这节主要来学习常用的时间操作。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><h4 id="安装python-deteutil"><a href="#安装python-deteutil" class="headerlink" title="安装python-deteutil"></a>安装<code>python-deteutil</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install python-deteutil==1.5</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1、时间的加减法"><a href="#1、时间的加减法" class="headerlink" title="1、时间的加减法"></a>1、时间的加减法</h4><h5 id="1-获取当前的时间"><a href="#1-获取当前的时间" class="headerlink" title="1) 获取当前的时间"></a>1) 获取当前的时间</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/9612647-file_1490939019028_d0df.png" alt=""></p>
<h5 id="2-加减天数"><a href="#2-加减天数" class="headerlink" title="2) 加减天数"></a>2) 加减天数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/61445044-file_1490936471089_d50a.png" alt=""></p>
<h5 id="3-加减周数"><a href="#3-加减周数" class="headerlink" title="3) 加减周数"></a>3) 加减周数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/38513613-file_1490936606422_331d.png" alt=""></p>
<h5 id="4-加减月份"><a href="#4-加减月份" class="headerlink" title="4) 加减月份"></a>4) 加减月份</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/2357238-file_1490936532659_681e.png" alt=""></p>
<h5 id="5-加减年"><a href="#5-加减年" class="headerlink" title="5) 加减年"></a>5) 加减年</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/14156409-file_1490936660756_134ee.png" alt=""></p>
<h4 id="2-时间转换"><a href="#2-时间转换" class="headerlink" title="2. 时间转换"></a>2. 时间转换</h4><h5 id="1-转换为固定格式的时间字符串"><a href="#1-转换为固定格式的时间字符串" class="headerlink" title="1) 转换为固定格式的时间字符串"></a>1) 转换为固定格式的时间字符串</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/56887950-file_1490937015674_46a9.png" alt=""></p>
<table>
<thead>
<tr>
<th>日期格式化符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%y</td>
<td>两位数的年份表示</td>
</tr>
<tr>
<td>%Y</td>
<td>四位数的年份表示</td>
</tr>
<tr>
<td>%m</td>
<td>月份</td>
</tr>
<tr>
<td>%d</td>
<td>月内的一天</td>
</tr>
<tr>
<td>%H</td>
<td>24小时制</td>
</tr>
<tr>
<td>%l</td>
<td>12小时制</td>
</tr>
<tr>
<td>%M</td>
<td>分钟数</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
</tr>
</tbody>
</table>
<h5 id="2-固定格式的字符串转化为秒级时间戳"><a href="#2-固定格式的字符串转化为秒级时间戳" class="headerlink" title="2) 固定格式的字符串转化为秒级时间戳"></a>2) 固定格式的字符串转化为秒级时间戳</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/15983829-file_1490937862570_b897.png" alt=""></p>
<h5 id="3-Float类型时间戳转换为固定格式的字符串"><a href="#3-Float类型时间戳转换为固定格式的字符串" class="headerlink" title="3) Float类型时间戳转换为固定格式的字符串"></a>3) <code>Float</code>类型时间戳转换为固定格式的字符串</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/25777888-file_1490938652461_80e1.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.runoob.com/python/python-date-time.html" target="_blank" rel="external">Python 日期和时间</a></li>
<li><a href="http://labix.org/python-dateutil#head-1443e0f14ad5dff07efd465e080d1110920673d8" target="_blank" rel="external">python-dateutil 教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;自带的时间工具，不支持对月、年的加减，找到一个好用的时间工具包&lt;a href=&quot;http://labi
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之SQLAlchemy增删改查</title>
    <link href="http://jianwl.com/2017/03/30/Python%E4%B9%8BSQLAlchemy%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://jianwl.com/2017/03/30/Python之SQLAlchemy增删改查/</id>
    <published>2017-03-30T15:59:39.000Z</published>
    <updated>2017-03-31T08:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚接触Python对于DB操作不熟练，简单写了个Demo，用来学习<code>SQLAlchemy</code>的增删改查操作。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-数据库创建表"><a href="#1-数据库创建表" class="headerlink" title="1. 数据库创建表"></a>1. 数据库创建表</h4><p><code>MYSQL</code>的test数据库创建一张表<code>daojia_audit_info</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `daojia_audit_info` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `bd_id` bigint(11) NOT NULL COMMENT &apos;BD编号&apos;,</div><div class="line">  `audit_type` int(11) NOT NULL COMMENT &apos;1 招商审核 2 续签审核&apos;,</div><div class="line">  `collection_id` varchar(11) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;招商审核主键标识，招商审核时一定不为空&apos;,</div><div class="line">  `org_code` varchar(11) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;商家编码，续签审核时肯定不为空&apos;,</div><div class="line">  `left_time` bigint(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;审核剩余时间&apos;,</div><div class="line">  `is_read` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;0 未读 1 已读&apos;,</div><div class="line">  `is_del` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;0 未删除 1 已删除&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h4 id="2-增删改查操作"><a href="#2-增删改查操作" class="headerlink" title="2. 增删改查操作"></a>2. 增删改查操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"># _*_ coding:UTF-8 _*_</div><div class="line">from sqlalchemy import BIGINT</div><div class="line">from sqlalchemy import Column</div><div class="line">from sqlalchemy import Integer</div><div class="line">from sqlalchemy import String</div><div class="line">from sqlalchemy import TIMESTAMP</div><div class="line">from sqlalchemy import create_engine</div><div class="line">from sqlalchemy.ext.declarative import declarative_base</div><div class="line">from sqlalchemy.orm import sessionmaker</div><div class="line"></div><div class="line">DB_CONNECT_STRING = &quot;mysql://root:root@localhost/test&quot;</div><div class="line">engine = create_engine(DB_CONNECT_STRING, echo=False)</div><div class="line"></div><div class="line">DB_Session = sessionmaker(bind=engine)</div><div class="line">session = DB_Session()</div><div class="line"></div><div class="line">BaseModel = declarative_base()</div><div class="line"></div><div class="line">def init_db():</div><div class="line">    BaseModel.metadata.create_all(engine)</div><div class="line"></div><div class="line">def drop_db():</div><div class="line">    BaseModel.metadata.drop_all(engine)</div><div class="line"></div><div class="line">class DaoJiaAuditInfo(BaseModel):</div><div class="line">    __tablename__ = &apos;daojia_audit_info&apos;</div><div class="line">    __table_args__ = &#123;&quot;mysql_engine&quot;: &quot;InnoDB&quot;, &quot;mysql_charset&quot;: &quot;utf8&quot;&#125;</div><div class="line"></div><div class="line">    id = Column(Integer, primary_key=True, nullable=False)</div><div class="line">    bd_id = Column(BIGINT, nullable=False)</div><div class="line">    audit_type = Column(Integer, nullable=False)</div><div class="line">    collection_id = Column(String(11, collation=&quot;utf8_unicode_ci&quot;))</div><div class="line">    org_code = Column(String(11, collation=&quot;utf8_unicode_ci&quot;))</div><div class="line">    is_read = Column(Integer, default=0)</div><div class="line">    is_del = Column(Integer, default=0)</div><div class="line">    left_time = Column(BIGINT, default=0)</div><div class="line">    create_time = Column(TIMESTAMP)</div><div class="line">    update_time = Column(TIMESTAMP)</div><div class="line"></div><div class="line">    db = init_db()</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def select(bd_id):</div><div class="line">        # 获取第一个记录的第一个元素</div><div class="line">        print &quot;return the first row of the first column =&gt; %d &quot; % session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.collection_id).filter(DaoJiaAuditInfo.bd_id == bd_id).scalar()</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    def save(cls,org_code,collection_id,bd_id,left_time,audit_type):</div><div class="line">        obj = cls()</div><div class="line">        obj.org_code = org_code</div><div class="line">        obj.collection_id = collection_id</div><div class="line">        obj.bd_id = bd_id</div><div class="line">        obj.left_time = left_time</div><div class="line">        obj.audit_type = audit_type</div><div class="line">        session.add(obj)</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish save&quot;</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def update(org_code,bd_id):</div><div class="line">        print &quot;before update =&gt; %s &quot; % str(session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.org_code).first())</div><div class="line">        session.query(DaoJiaAuditInfo).filter(DaoJiaAuditInfo.bd_id == bd_id).update(&#123;DaoJiaAuditInfo.org_code : org_code&#125;)</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish update  =&gt; %s &quot; % str(session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.org_code).first())</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def delete(bd_id):</div><div class="line">        session.query(DaoJiaAuditInfo).filter(DaoJiaAuditInfo.bd_id == bd_id).delete()</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish delete&quot;</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    # 增</div><div class="line">    DaoJiaAuditInfo.save(&quot;xxx_2&quot;, &quot;xxxx_2&quot;, 1010, 22222, 1)</div><div class="line"></div><div class="line">    # 查</div><div class="line">    DaoJiaAuditInfo.select(1010)</div><div class="line"></div><div class="line">    # 改</div><div class="line">    DaoJiaAuditInfo.update(&quot;xxxx_5&quot;,1010);</div><div class="line"></div><div class="line">    # 删</div><div class="line">    DaoJiaAuditInfo.delete(1010)</div><div class="line">    </div><div class="line">    # 主键查询</div><div class="line">    # DaoJiaAuditInfo.query.get(主键ID)</div></pre></td></tr></table></figure>
<h4 id="3-运行结果"><a href="#3-运行结果" class="headerlink" title="3. 运行结果"></a>3. 运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/22646587-file_1490889902432_a8d0.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://itindex.net/detail/40939-sqlalchemy-%E7%BB%8F%E9%AA%8C" target="_blank" rel="external">SQLAlchemy使用经验 - IT瘾 </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;刚接触Python对于DB操作不熟练，简单写了个Demo，用来学习&lt;code&gt;SQLAlchemy&lt;/code&gt;的增删改查操作。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Maven设置JDK版本</title>
    <link href="http://jianwl.com/2017/03/29/Maven%E8%AE%BE%E7%BD%AEJDK%E7%89%88%E6%9C%AC/"/>
    <id>http://jianwl.com/2017/03/29/Maven设置JDK版本/</id>
    <published>2017-03-29T07:29:14.000Z</published>
    <updated>2017-03-29T07:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>pom</code>文件中设置<code>JDK</code>的版本号，一个很常用的配置。记录下来，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>pom.xml</code>文件配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;  </div><div class="line">    &lt;plugins&gt;  </div><div class="line">        &lt;plugin&gt;  </div><div class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  </div><div class="line">            &lt;configuration&gt;  </div><div class="line">                &lt;source&gt;1.8&lt;/source&gt;  </div><div class="line">                &lt;target&gt;1.8&lt;/target&gt;  </div><div class="line">            &lt;/configuration&gt;  </div><div class="line">        &lt;/plugin&gt;  </div><div class="line">    &lt;/plugins&gt;  </div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pom&lt;/code&gt;文件中设置&lt;code&gt;JDK&lt;/code&gt;的版本号，一个很常用的配置。记录下来，备忘。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之并发问题</title>
    <link href="http://jianwl.com/2017/03/27/MYSQL%E4%B9%8B%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    <id>http://jianwl.com/2017/03/27/MYSQL之并发问题/</id>
    <published>2017-03-27T14:48:19.000Z</published>
    <updated>2017-03-28T10:38:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MYSQL</code>很少在单用户环境下使用，通常它会同时处理很多的连接线程，这些线程来自不同的用户，执行不同的任务。这些并行连接可能访问同样的数据库和表，所以当某个连接发生问题的时候，很难判断数据库的状态。</p>
<p><code>MYSQL</code>服务器有内部机制来避免其他用户损坏其他用户的数据，其使<strong>锁</strong>和<strong>事务</strong>来处理对表的并发访问，接下来将会学习<code>锁的类型</code>和<code>事务处理</code>，然后介绍排错的技术。</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><code>MYSQL</code>服务器和独立存储引擎都可以设置锁，<code>读锁(共享锁)</code>允许并发线程读取加锁的数据，但禁止写数据；<code>写锁</code>阻止其他线程读写操作。</p>
<h4 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h4><p><code>MYSQL</code>有四种类型的锁：1️⃣ 表锁，会锁住整个表，没有人可以访问表中任何行，直到持有锁解锁该表；2️⃣ 行锁，仅会锁住一行或者正在被线程访问的任何几行，因此同一个表中的其他行可以并发线程访问；3️⃣ 页锁，会锁住一页，仅在比较少见的<code>BDB存储引擎</code>存在。 4️⃣ 元数据锁是<code>MYSQL 5.5</code>版本中的新特性。仅对表中的元数据启用，当有线程使用表的时候，元数据锁会锁住表的所有元数据。<strong>元数据是DDL语句的更改信息，如CREATE、DROP、ALTER等修改方案的语句</strong>，引入元数据锁是为了解决线程可以在其他线程的并发事务使用相同表的情况下修改表定义或是删除表的问题。</p>
<h5 id="1）表锁"><a href="#1）表锁" class="headerlink" title="1）表锁"></a>1）表锁</h5><p>定义：触发表锁时，整个表会被锁住。</p>
<p>在<code>MyISAM</code>存储引擎创建一张表&amp;初始化数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 建表</div><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE= MyISAM DEFAULT CHARSET=latin1;</div><div class="line"></div><div class="line"># 插入数据</div><div class="line">INSERT INTO `user` (`id`) VALUES (&apos;1&apos;),(&apos;2&apos;),(&apos;3&apos;),(&apos;4&apos;);</div></pre></td></tr></table></figure>
<p>模拟表锁场景:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 用一个客户端，更新数据并休眠</div><div class="line">UPDATE user set id = sleep(60) where id = 1</div><div class="line"></div><div class="line"># 另一个客户端，查询数据user表</div><div class="line">SELECT * FROM user</div></pre></td></tr></table></figure>
<p>为何同样一个查询，一个花了<strong>51s</strong>，另一个是<strong>秒查</strong>呢？</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/39621214-file_1490662837316_7505.png" alt=""></p>
<p>在<strong>查询正在进行中</strong>时，在MYSQL客户端执行<code>SHOW PROCESSLIST \G</code>，观察如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/88029875-file_1490662629751_e877.png" alt=""></p>
<p>在查询<code>user</code>表时，另一个<code>MYSQL</code>客户端对<code>user</code>表执行更新操作，将整个表锁住，其他用户此时不可读写<code>user</code>表，等待<code>user</code>表释放锁。</p>
<p>调试技巧 1️⃣ ：当你怀疑是并发线程影响了查询的时候，使用<code>SHOW PROCESSLIST</code>命令查看状态.</p>
<h5 id="2-行锁"><a href="#2-行锁" class="headerlink" title="2) 行锁"></a>2) 行锁</h5><p>定义：触发行锁时，会锁住一些行而不是整个表；</p>
<p>在<code>InnoDB</code>存储引擎中创建表&amp;初始化表数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 建表</div><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</div><div class="line"></div><div class="line"># 插入数据</div><div class="line">INSERT INTO `user` (`id`) VALUES (&apos;1&apos;),(&apos;2&apos;),(&apos;3&apos;),(&apos;4&apos;);</div></pre></td></tr></table></figure>
<p>模拟行锁场景:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 用一个客户端，更新数据并休眠</div><div class="line">UPDATE user set id = sleep(60) where id = 1</div><div class="line"></div><div class="line"># 另一个客户端</div><div class="line">SELECT * FROM user;</div><div class="line"></div><div class="line">SELECT * FROM user where id = 1;</div><div class="line"></div><div class="line">update user set id = 111 where id = 1;</div></pre></td></tr></table></figure>
<p>操作1: 更新并休眠</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/98337967-file_1490675424759_11f2c.png" alt=""></p>
<p>操作2: 另一个客户端，查询<code>user</code>表，<strong>行锁</strong>在此处为<strong>读锁</strong>，不影响其他用户的<code>读操作</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/29004933-file_1490675511078_d6f8.png" alt=""></p>
<p>操作3: 另一个客户端，更新<code>操作1</code>相同的行, 触发行锁，需要等待读锁释放，才能更新数据。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/69956688-file_1490675659555_e2ed.png" alt=""></p>
<p>在<strong>查询正在进行中</strong>时，在MYSQL客户端执行<code>SHOW PROCESSLIST \G</code>，观察如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/34057315-file_1490675865544_4f11.png" alt=""></p>
<p>调试技巧 2️⃣ : 分析并发语句事务用<code>SHOW ENGINE INNODB STATUS \G</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/25021109-file_1490696658342_b8d.png" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>MYSQL排错指南</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;MYSQL&lt;/code&gt;很少在单用户环境下使用，通常它会同时处理很多的连接线程，这些线程来自不同的用户，执行不同的任务。这些并行
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>关于刻意练习的思考</title>
    <link href="http://jianwl.com/2017/03/26/%E5%85%B3%E4%BA%8E%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://jianwl.com/2017/03/26/关于刻意练习的思考/</id>
    <published>2017-03-26T03:01:26.000Z</published>
    <updated>2017-03-26T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>没有充分的练习，你不可能精通任何脑力活</p>
</blockquote>
<p>如果带球的同时还要思考踢球的角度和速度，你不太可能成为一个优秀的足球选手。像这样的<strong>低层次过程必须不假思索，才能给更高层次的过程，比如战术策略提供足够的空间。</strong> 这一节主要来解释为何<code>刻意练习</code>如此重要、哪些内容值得练习、怎么安排练习可以增加练习的趣味性。</p>
<h3 id="为什么要刻意练习"><a href="#为什么要刻意练习" class="headerlink" title="为什么要刻意练习"></a>为什么要刻意练习</h3><p>一个职业网球选手每次都能将球打到对方的场地上，但他还是不停练习以求提高球的速度和落点的准确度，通过不断地<code>刻意练习</code>可以加强基础技能，为学习更先进的技能做准备，防止遗忘和改善迁移。</p>
<h3 id="练习是为了日后更好地学习"><a href="#练习是为了日后更好地学习" class="headerlink" title="练习是为了日后更好地学习"></a>练习是为了日后更好地学习</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/93014436-file_1490498430054_180b8.png" alt=""></p>
<p>如图显示工作记忆是思考的空间，思考在你重新组合信息时产生，这一信息可能来自于环境，也可能来自于长期记忆，或者两者都有。</p>
<p>工作记忆的一个显著特点是它的空间有限，如果你同时放入太多东西或者他们的太多方面，你会失去正在思考的线索。比如我问: 蝴蝶、蜻蜓、筷子、药盒和稻草人有什么共同点，那么要同时比较的东西太多了，当你在思考药盒和筷子的关系时，你已经忘记其他物品是什么了。</p>
<p>据我们所知，工作记忆的大小是固定不变的 – 得到多少就是多少，练习不会改变它。但还是有窍门的，可以通过<strong>压缩信息</strong>来维持工作记忆中更多的信息，通过<strong>合并，你将几个独立的事物看做一个单元。</strong></p>
<h3 id="刻意练习的优点"><a href="#刻意练习的优点" class="headerlink" title="刻意练习的优点"></a>刻意练习的优点</h3><p>1️⃣ 形成最基本的本领(比如青少年用手动档练习开车，直到完全掌握为止) 2️⃣ 达到精通(比如高尔夫选手挥杆以提高准确性) 3️⃣ 让思考过程变得省力 4️⃣ 让记忆更持久 5️⃣ 增加知识迁移的几率</p>
<h3 id="该练习什么"><a href="#该练习什么" class="headerlink" title="该练习什么"></a>该练习什么</h3><p>不是每件事都需要无限度地练习的，首先没有这么多时间给你练习，更重要的是，不是每件事情都需要练习，我所说的练习的好处是能够给我们一些选择上的提示。如果练习可以让思考过程变得更加省力，我们就要问，哪些过程需要自动化？从记忆中取出关于数字的要点和字母的发音就可以入选。科学课的教师一般还会要求学生熟练掌握化学元素的基本特征，总的来说就是，需要自动化的过程往往是自动化后效益能达到最大值的技能的基础。所谓基础也就是人在某一个领域一遍又一遍重复的事情，它们为日后更高级的工作奠定了基础。</p>
<h3 id="分散练习时间"><a href="#分散练习时间" class="headerlink" title="分散练习时间"></a>分散练习时间</h3><p>没有必要把关于一个概念的所有练习集中在很短的一段时间里完成。分散练习后记忆会更持久，持续不断地练习同一项技能是很无聊的事，最好能有点变化。还有就是有更多的时间思考如何将所学到的东西加以应用。</p>
<h3 id="在进阶环境中练习"><a href="#在进阶环境中练习" class="headerlink" title="在进阶环境中练习"></a>在进阶环境中练习</h3><p>基本技能是需要练习直到熟练掌握的，但这不代表不能够在更高阶的环境中练习它，比如需要练习找到字母相对应的发音，在条件允许的情况下，为什么不将这一练习与有趣的阅读相结合呢？会玩桥牌的人要先算手里的牌点才能叫牌，如果我是桥牌教练，我会让学生一直数点数，直到他们能脱口而出为止。自动化需要很多练习，聪明的办法是<strong>既分散练习的时间，又分散练习的环境。</strong>尽量多设计有创意的方法来练习最关键的技巧，同时能够在更高阶的环境中学到基本技能。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>为什么学生不喜欢上学？ </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;没有充分的练习，你不可能精通任何脑力活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果带球的同时还要思考踢球的角度
    
    </summary>
    
      <category term="思绪" scheme="http://jianwl.com/categories/%E6%80%9D%E7%BB%AA/"/>
    
    
      <category term="思绪" scheme="http://jianwl.com/tags/%E6%80%9D%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL主从服务搭建</title>
    <link href="http://jianwl.com/2017/03/25/MYSQL%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>http://jianwl.com/2017/03/25/MYSQL主从服务搭建/</id>
    <published>2017-03-25T11:21:55.000Z</published>
    <updated>2017-03-25T16:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MYSQL</code>主从服务器，主服务器用于<strong>写操作</strong>，从服务器用于<strong>读操作</strong>，从服务器通过<code>bin-log</code>日志，与主服务器数据完全同步。对于主从服务的搭建，之前处于空白状态，这一节主要来学习，主从服务器搭建，实现从服务器<strong>实时复制</strong>主服务器的数据。</p>
<h3 id="主服务器配置"><a href="#主服务器配置" class="headerlink" title="主服务器配置"></a>主服务器配置</h3><p>1、 打开主服务器配置文件<code>/etc/my.cnf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/my.cnf</div></pre></td></tr></table></figure>
<p>2、 在<code>/etc/my.cnf</code>配置文件中，配置服务器为本机IP</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind-address=192.168.1.102</div></pre></td></tr></table></figure>
<p>本机IP查看</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/87553736-file_1490453723082_127f2.png" alt=""></p>
<p>3、 在<code>/etc/my.cnf</code>配置文件中,设置<code>server-id</code>,你可以选择任意一个数字(这里设定为1)，但这个数字必须是唯一的，不能和集群中的其他的<code>server-id</code>相同</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service-id=1</div></pre></td></tr></table></figure>
<p>4、 在<code>/etc/my.cnf</code>配置文件中,开启<code>bin-log</code>日志，从服务器将会同步主服务器的改变，通过<code>bin-log</code>日志。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log_bin = mysql-bin</div></pre></td></tr></table></figure>
<p>5、 在<code>/etc/my.cnf</code>配置文件中,配置主服务器中需要同步到从服务器的数据库。可以设置多个数据库，重复以下配置即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binlog_do_db=test</div></pre></td></tr></table></figure>
<p>6、重启MYSQL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
<p>主服务器MYSQL配置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/90687897-file_1490454303385_14e6e.png" alt=""></p>
<h3 id="登录主服务器MYSQL的操作"><a href="#登录主服务器MYSQL的操作" class="headerlink" title="登录主服务器MYSQL的操作"></a>登录主服务器MYSQL的操作</h3><h4 id="1-登录MYSQL"><a href="#1-登录MYSQL" class="headerlink" title="1. 登录MYSQL"></a>1. 登录MYSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h4 id="2-创建一个账号，允许从服务器复制主服务器"><a href="#2-创建一个账号，允许从服务器复制主服务器" class="headerlink" title="2. 创建一个账号，允许从服务器复制主服务器"></a>2. 创建一个账号，允许从服务器复制主服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GRANT REPLICATION SLAVE ON *.* TO &apos;slave_user&apos;@&apos;%&apos; IDENTIFIED BY &apos;slave_user&apos;;</div><div class="line"></div><div class="line"># 只有刷新之后，该账号才生效</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h4 id="3-切换到需要同步的库"><a href="#3-切换到需要同步的库" class="headerlink" title="3. 切换到需要同步的库"></a>3. 切换到需要同步的库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">USER test;</div></pre></td></tr></table></figure>
<h4 id="4-锁住test数据库，防止新的写入操作。"><a href="#4-锁住test数据库，防止新的写入操作。" class="headerlink" title="4. 锁住test数据库，防止新的写入操作。"></a>4. 锁住<code>test</code>数据库，防止新的写入操作。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLUSH TABLES WITH READ LOCK;</div></pre></td></tr></table></figure>
<h4 id="5-查看主服务器的状态"><a href="#5-查看主服务器的状态" class="headerlink" title="5. 查看主服务器的状态"></a>5. 查看主服务器的状态</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/30036109-file_1490454974982_11ad4.png" alt=""></p>
<h4 id="6-用mysqldump导出test数据库-此操作是在Shell中执行，不是在MYSQL命令行"><a href="#6-用mysqldump导出test数据库-此操作是在Shell中执行，不是在MYSQL命令行" class="headerlink" title="6. 用mysqldump导出test数据库(此操作是在Shell中执行，不是在MYSQL命令行)"></a>6. 用<code>mysqldump</code>导出test数据库(此操作是在Shell中执行，不是在MYSQL命令行)</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/25607642-file_1490459549608_10bb9.png" alt=""></p>
<h4 id="7-回到原来MYSQL的命令行窗口，解锁数据库"><a href="#7-回到原来MYSQL的命令行窗口，解锁数据库" class="headerlink" title="7. 回到原来MYSQL的命令行窗口，解锁数据库"></a>7. 回到原来MYSQL的命令行窗口，解锁数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UNLOCK TABLES;</div><div class="line">QUIT;</div></pre></td></tr></table></figure>
<h3 id="配置从服务器"><a href="#配置从服务器" class="headerlink" title="配置从服务器"></a>配置从服务器</h3><h4 id="1-登录从服务器，并创建需要同步的数据库"><a href="#1-登录从服务器，并创建需要同步的数据库" class="headerlink" title="1. 登录从服务器，并创建需要同步的数据库"></a>1. 登录从服务器，并创建需要同步的数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE test;</div><div class="line">EXIT</div></pre></td></tr></table></figure>
<h4 id="2-远程复制主服务器的test-sql到从服务器"><a href="#2-远程复制主服务器的test-sql到从服务器" class="headerlink" title="2. 远程复制主服务器的test.sql到从服务器"></a>2. 远程复制主服务器的<code>test.sql</code>到从服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/30040145-file_1490455882333_f6a2.png" alt=""></p>
<h4 id="3-将test-sql导入到从服务器"><a href="#3-将test-sql导入到从服务器" class="headerlink" title="3. 将test.sql导入到从服务器"></a>3. 将<code>test.sql</code>导入到从服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/61737716-file_1490456057973_8831.png" alt=""></p>
<h4 id="4-配置从服务器-etc-my-cnf文件"><a href="#4-配置从服务器-etc-my-cnf文件" class="headerlink" title="4. 配置从服务器/etc/my.cnf文件"></a>4. 配置从服务器<code>/etc/my.cnf</code>文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server-id = 2</div><div class="line">relay-log = mysql-relay</div><div class="line">log-bin=mysql-bin</div><div class="line">binlog_do_db</div></pre></td></tr></table></figure>
<p>从服务器的配置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/74025224-file_1490456239753_4f5b.png" alt=""></p>
<h4 id="5-重启从服务器服务"><a href="#5-重启从服务器服务" class="headerlink" title="5. 重启从服务器服务"></a>5. 重启从服务器服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
<h4 id="6-登录从服务器-更改以下配置"><a href="#6-登录从服务器-更改以下配置" class="headerlink" title="6. 登录从服务器,更改以下配置"></a>6. 登录从服务器,更改以下配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CHANGE MASTER TO MASTER_HOST=&apos;192.168.1.102&apos;,MASTER_USER=&apos;slave_user&apos;, MASTER_PASSWORD=&apos;slave_user&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000006&apos;, MASTER_LOG_POS=637;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/71580385-file_1490457323447_5f79.png" alt=""></p>
<p>完成以上配置则实现以下几个功能点：1️⃣ 指定当前服务器为主数据库的从库；2️⃣ 提供<code>从库</code>登录<code>主库</code>的账号，可以复制bin-log，实现数据同步; 3️⃣ 从服务器知道从哪里开始同步主库，主库的<code>bin-log</code>日志文件和<code>position</code>位置都已知。</p>
<h4 id="7-激活从库"><a href="#7-激活从库" class="headerlink" title="7. 激活从库"></a>7. 激活从库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">START SLAVE</div></pre></td></tr></table></figure>
<h4 id="8-查看从库状态，-G让信息更加可读"><a href="#8-查看从库状态，-G让信息更加可读" class="headerlink" title="8. 查看从库状态，\G让信息更加可读"></a>8. 查看从库状态，<code>\G</code>让信息更加可读</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/74608681-file_1490457653091_134b8.png" alt=""></p>
<h3 id="验证主从是否同步"><a href="#验证主从是否同步" class="headerlink" title="验证主从是否同步"></a>验证主从是否同步</h3><h4 id="1-主库中person表的数据"><a href="#1-主库中person表的数据" class="headerlink" title="1. 主库中person表的数据"></a>1. 主库中<code>person</code>表的数据</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/97547013-file_1490457820526_1585e.png" alt=""></p>
<h4 id="2-从库中person表的数据"><a href="#2-从库中person表的数据" class="headerlink" title="2. 从库中person表的数据"></a>2. 从库中<code>person</code>表的数据</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/14095639-file_1490457857983_118.png" alt=""></p>
<h4 id="3-主库对person表新增一条记录"><a href="#3-主库对person表新增一条记录" class="headerlink" title="3. 主库对person表新增一条记录"></a>3. 主库对<code>person</code>表新增一条记录</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/68583068-file_1490457930231_9fa.png" alt=""></p>
<h4 id="4-查看从库person表，是否同步新增了一条记录"><a href="#4-查看从库person表，是否同步新增了一条记录" class="headerlink" title="4. 查看从库person表，是否同步新增了一条记录"></a>4. 查看从库<code>person</code>表，是否同步新增了一条记录</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/45737952-file_1490457975198_ef73.png" alt=""></p>
<p>从库同步主库数据，至此完成主从库的配置。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql" target="_blank" rel="external">How To Set Up Master Slave Replication in MySQL</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;MYSQL&lt;/code&gt;主从服务器，主服务器用于&lt;strong&gt;写操作&lt;/strong&gt;，从服务器用于&lt;strong&gt;读操作&lt;/
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>客户端免密码登录服务器</title>
    <link href="http://jianwl.com/2017/03/25/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://jianwl.com/2017/03/25/客户端免密码登录服务器/</id>
    <published>2017-03-25T08:30:45.000Z</published>
    <updated>2017-03-25T08:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节主要来学习使用public key免密登录服务器。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-客户端生成公钥"><a href="#1-客户端生成公钥" class="headerlink" title="1. 客户端生成公钥"></a>1. 客户端生成公钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/83784257-file_1490425255076_ce1b.png" alt=""></p>
<h4 id="2-将客户端公钥id-rsa-pub的内容，添加服务器的authorized-keys中"><a href="#2-将客户端公钥id-rsa-pub的内容，添加服务器的authorized-keys中" class="headerlink" title="2. 将客户端公钥id_rsa.pub的内容，添加服务器的authorized_keys中"></a>2. 将客户端公钥<code>id_rsa.pub</code>的内容，添加服务器的<code>authorized_keys</code>中</h4><p>查看公钥id_rsa.pub</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/31140109-file_1490425420722_d9e0.png" alt=""></p>
<p>将客户端公钥内容添加到服务器<code>authorized_keys</code>，此处显示添加后的结果。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/97597421-file_1490426288907_118ad.png" alt=""></p>
<h4 id="3-客户端免密码登录服务器"><a href="#3-客户端免密码登录服务器" class="headerlink" title="3. 客户端免密码登录服务器"></a>3. 客户端免密码登录服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/10331226-file_1490426155457_f122.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这一节主要来学习使用public key免密登录服务器。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;head
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL允许远程登录</title>
    <link href="http://jianwl.com/2017/03/25/MYSQL%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>http://jianwl.com/2017/03/25/MYSQL允许远程登录/</id>
    <published>2017-03-25T07:27:58.000Z</published>
    <updated>2017-03-25T08:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在虚拟机安装了<code>MYSQL</code>并启动服务，在虚拟机中能够登录到<code>MYSQL</code>,但通过<code>Sequal Pro</code>远程登录虚拟机中的MYSQL却始终连不上。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-防火墙对外增加3306端口"><a href="#1-防火墙对外增加3306端口" class="headerlink" title="1. 防火墙对外增加3306端口"></a>1. 防火墙对外增加<code>3306端口</code></h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/76701170-file_1490427451254_f1e7.png" alt=""></p>
<h4 id="2-重启防火墙"><a href="#2-重启防火墙" class="headerlink" title="2. 重启防火墙"></a>2. 重启防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure>
<h4 id="3-测试本地能否连上服务器的3306端口"><a href="#3-测试本地能否连上服务器的3306端口" class="headerlink" title="3. 测试本地能否连上服务器的3306端口"></a>3. 测试本地能否连上服务器的<code>3306</code>端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 10.211.55.3为服务端的IP,3306为MYSQL服务的端口</div><div class="line">telnet 10.211.55.3 3306</div></pre></td></tr></table></figure>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/72064355-file_1490429141344_8010.png" alt=""></p>
<h4 id="4-配置MYSQL允许远程登录"><a href="#4-配置MYSQL允许远程登录" class="headerlink" title="4. 配置MYSQL允许远程登录"></a>4. 配置MYSQL允许远程登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 登录MYSQL</div><div class="line">mysql -u root -p</div><div class="line"></div><div class="line"># 允许MYSQL远程登录</div><div class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</div><div class="line"></div><div class="line"># 刷新权限</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/82480994-file_1490428841050_fdc5.png" alt=""></p>
<h4 id="5-本机Sequel-Pro登录远程MYSQL"><a href="#5-本机Sequel-Pro登录远程MYSQL" class="headerlink" title="5. 本机Sequel Pro登录远程MYSQL"></a>5. 本机<code>Sequel Pro</code>登录远程MYSQL</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/43607247-file_1490430126336_10444.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.cnblogs.com/yjdcoder/p/5927358.html" target="_blank" rel="external">navicat连接虚拟机(centos)中的mysql</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在虚拟机安装了&lt;code&gt;MYSQL&lt;/code&gt;并启动服务，在虚拟机中能够登录到&lt;code&gt;MYSQL&lt;/code&gt;,但通过&lt;code&gt;S
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
</feed>
