<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2017-04-01T07:52:05.000Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于代码阅读的思考</title>
    <link href="http://jianwl.com/2017/04/01/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://jianwl.com/2017/04/01/关于代码阅读的思考/</id>
    <published>2017-04-01T06:04:49.000Z</published>
    <updated>2017-04-01T07:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个工程师，你的价值如何体现？不是掌握了多少知识，而是体现在创造出的系统，否则空有满腹经纶，最后也只是纸上谈兵。学习编写优秀代码的最佳方式，就是阅读高品质的代码，学习别人的高明之处。这一节我们将来学习阅读优秀源码的技巧，先简单抛出阅读代码的几个好处。</p>
<ol>
<li>阅读代码，学习别人高明的技巧实现方式；</li>
<li>发现惊喜，通过简明优雅的结构实现了极为复杂的功能，看完代码后，受到激励，想着如何同样整洁构造自己的代码。</li>
<li>批判地阅读代码，不断向自己提问比如：<code>为什么要这样写</code>或<code>作者背景中的什么东西使他做出这种选择。</code></li>
</ol>
<h3 id="阅读代码"><a href="#阅读代码" class="headerlink" title="阅读代码"></a>阅读代码</h3><h4 id="1-为什么阅读代码"><a href="#1-为什么阅读代码" class="headerlink" title="1. 为什么阅读代码"></a>1. 为什么阅读代码</h4><p>经常花时间阅读别人编写的高质量代码，就想阅读高品质的散文能够丰富词汇，激发想象力，扩展思维一样，分析设计良好的软件系统的内部结构可以学到<code>新的架构模式</code>、<code>数据结构</code>、<code>编码方法</code>、<code>算法</code>、<code>风格</code>和<code>文档规范</code>、<code>应用程序编程接口(API)</code>，同时可以提高编写代码的水准。</p>
<p>阅读代码的过程中，不可避免地会遇到一些在实践中应该尽量避免的代码，能够快速地从坏代码中区分出好代码是一项有价值的技能；接触一些编码的反面例子有助于提高这种能力，通过下面这些征兆，可以很容易识别出低品质的代码：1️⃣ 编码风格不一致 2️⃣ 结构不必要地复杂或难以理解 3️⃣ 明显的逻辑错误或疏忽 4️⃣ 过度使用不可移植的构造 5️⃣ 缺乏维护</p>
<p>大型、有组织体制之下的项目都会采纳一套编码规范、指导原则或约定，代码规范提供风格上的指导，目标是增强代码的可靠性、易读性和可维护性。关注优秀源码的<code>类命名</code>、<code>变量命名</code>、<code>代码缩进</code>、<code>代码编排</code>、<code>命名约定</code>、<code>文档</code>；</p>
<p>通过阅读优秀源码，我们可以学习到<code>分层架构的设计</code>、<code>更加合理的抽象面向对象的结构</code>、<code>如何更加合理的拆分模块</code>、<code>代码重用</code></p>
<h4 id="2-如何阅读代码"><a href="#2-如何阅读代码" class="headerlink" title="2. 如何阅读代码"></a>2. 如何阅读代码</h4><p>有选择地阅读代码，同时还有<code>有自己的目标</code>。想学习新的模式、编码风格还是满足某些需求的方法？或者只是浏览代码，获取其中的某些亮点。</p>
<p>从小型的程序开始阅读，不要立即陷入对大型系统的研究中，编译研究的程序并运行他们，这样可以得到即时的反馈，了解代码预想的工作方式，同时可以获得成就感。</p>
<p>积极介入现实的代码，能够快速从中了解到一些情况，当觉得已经掌握了他们之后，再采取更有组织的方式来学习，比如：阅读相关书籍、文档、手册、参加培训课程。</p>
<h4 id="3-实战"><a href="#3-实战" class="headerlink" title="3. 实战"></a>3. 实战</h4><p>比如：想要了解一个特定的功能是如何实现的。首先使用该系统，得到他的外部接口，根据外部接口，定位目标代码，针对它进行研究分析，忽略不相关的部分。如果觉得在原来的上下文中，理解代码有困难，就将他复制到一个历史文件中，删除所有不相关的部分。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、养成一个习惯，经常花时间阅读别人编写的高品质代码</p>
<p>2、要有选择地阅读代码，同时还要有自己的目标，想学习新的模式、编码风格、还是满足某些需求的方法</p>
<p>3、对于那些大型且组织良好的系统，只需要最低限度地了解它的全部贡呢过，就能够对它做出修改。</p>
<p>4、向系统中增加新功能时，首先的任务就是找到类型特性的代码，将它作为待实现功能的模板。</p>
<p>5、阅读代码寻找重构机会时，先从系统的架构开始，然后逐步细化，能够获得最大的效益。</p>
<p>6、不需要为了效率，牺牲代码的可读性</p>
<p>7、通过浏览项目的源代码树 – 包含项目源代码的层次目录结构，来分析一个项目的组织方式，源码树常常能够反映出项目在架构和软件过程上的结构。</p>
<p>8、<strong>阅读代码时，应该尽可能利用任何能够得到的文档。</strong></p>
<p>9、<strong>阅读一个小时代码所得到的信息只不过相当于阅读一分钟文档</strong></p>
<p>10、可以将系统的设计规格说明作为认知代码结构的路线图，阅读具体代码的指引</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>代码阅读方法与实践</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一个工程师，你的价值如何体现？不是掌握了多少知识，而是体现在创造出的系统，否则空有满腹经纶，最后也只是纸上谈兵。学习编写优秀代码的最佳方
    
    </summary>
    
      <category term="思绪" scheme="http://jianwl.com/categories/%E6%80%9D%E7%BB%AA/"/>
    
    
      <category term="思绪" scheme="http://jianwl.com/tags/%E6%80%9D%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>Python之易出错语法</title>
    <link href="http://jianwl.com/2017/03/31/Python%E4%B9%8B%E6%98%93%E5%87%BA%E9%94%99%E8%AF%AD%E6%B3%95/"/>
    <id>http://jianwl.com/2017/03/31/Python之易出错语法/</id>
    <published>2017-03-31T06:36:34.000Z</published>
    <updated>2017-03-31T09:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要记录<code>Python</code>和<code>Java</code>不一样的语法，用于备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-三目运算"><a href="#1-三目运算" class="headerlink" title="1. 三目运算"></a>1. 三目运算</h4><p>语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">为真的结果  if 判断条件 else 为假的结果</div></pre></td></tr></table></figure>
<p>实战</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/68640470-file_1490942427899_33c0.png" alt=""></p>
<h5 id="2-flask-josnify与json-dumps的区别"><a href="#2-flask-josnify与json-dumps的区别" class="headerlink" title="2. flask.josnify与json.dumps的区别"></a>2. flask.josnify与json.dumps的区别</h5><p>json操作：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/98569674-file_1490945276911_e3be.png" alt=""></p>
<p>jsonify操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def render_success(content=None):</div><div class="line">    data = dict(</div><div class="line">        status=u&apos;ok&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    if content is not None:</div><div class="line">        data.update(</div><div class="line">            content=content</div><div class="line">        )</div><div class="line"></div><div class="line">    return jsonify(data)</div></pre></td></tr></table></figure>
<p>区别：</p>
<p>jsonify在flask中返回<code>flask.Response()</code>已经在返回的对象的<code>Header</code>中塞入<code>content-type: application/json</code>，而<code>json.dumps()</code>仅仅是返回一个编码后的字符串。</p>
<h4 id="3-判断是否是某一类型"><a href="#3-判断是否是某一类型" class="headerlink" title="3. 判断是否是某一类型"></a>3. 判断是否是某一类型</h4><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(object,classinfo)</div></pre></td></tr></table></figure>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/9606019-file_1490947230781_fc6f.png" alt=""></p>
<h4 id="4-args和-kwargs区别？"><a href="#4-args和-kwargs区别？" class="headerlink" title="4. *args和**kwargs区别？"></a>4. <code>*args</code>和<code>**kwargs</code>区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*args 元组,特别注意入参的方式</div><div class="line">**kwargs 字典,特别注意入参的方式</div></pre></td></tr></table></figure>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/7333141-file_1490950330464_129f0.png" alt=""></p>
<h4 id="5-set取交集"><a href="#5-set取交集" class="headerlink" title="5. set取交集"></a>5. <code>set</code>取交集</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/57928855-file_1490953364605_13cda.png" alt=""></p>
<h4 id="6-xrange数据集"><a href="#6-xrange数据集" class="headerlink" title="6. xrange数据集"></a>6. <code>xrange</code>数据集</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/86398939-file_1490953813150_14023.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://stackoverflow.com/questions/7907596/json-dumps-vs-flask-jsonify" target="_blank" rel="external">json-dumps-vs-flask-jsonify</a></li>
<li><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">python官方文档</a></li>
<li><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs" target="_blank" rel="external">args-and-kwargs - stackoverflow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本节主要记录&lt;code&gt;Python&lt;/code&gt;和&lt;code&gt;Java&lt;/code&gt;不一样的语法，用于备忘。&lt;/p&gt;
&lt;h3 id=&quot;实战
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之时间模块</title>
    <link href="http://jianwl.com/2017/03/31/Python%E4%B9%8B%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9D%97/"/>
    <id>http://jianwl.com/2017/03/31/Python之时间模块/</id>
    <published>2017-03-31T04:23:43.000Z</published>
    <updated>2017-03-31T05:44:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Python</code>自带的时间工具，不支持对月、年的加减，找到一个好用的时间工具包<a href="http://labix.org/python-dateutil#head-1443e0f14ad5dff07efd465e080d1110920673d8" target="_blank" rel="external">python-dateutil</a>，这节主要来学习常用的时间操作。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><h4 id="安装python-deteutil"><a href="#安装python-deteutil" class="headerlink" title="安装python-deteutil"></a>安装<code>python-deteutil</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install python-deteutil==1.5</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1、时间的加减法"><a href="#1、时间的加减法" class="headerlink" title="1、时间的加减法"></a>1、时间的加减法</h4><h5 id="1-获取当前的时间"><a href="#1-获取当前的时间" class="headerlink" title="1) 获取当前的时间"></a>1) 获取当前的时间</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/9612647-file_1490939019028_d0df.png" alt=""></p>
<h5 id="2-加减天数"><a href="#2-加减天数" class="headerlink" title="2) 加减天数"></a>2) 加减天数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/61445044-file_1490936471089_d50a.png" alt=""></p>
<h5 id="3-加减周数"><a href="#3-加减周数" class="headerlink" title="3) 加减周数"></a>3) 加减周数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/38513613-file_1490936606422_331d.png" alt=""></p>
<h5 id="4-加减月份"><a href="#4-加减月份" class="headerlink" title="4) 加减月份"></a>4) 加减月份</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/2357238-file_1490936532659_681e.png" alt=""></p>
<h5 id="5-加减年"><a href="#5-加减年" class="headerlink" title="5) 加减年"></a>5) 加减年</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/14156409-file_1490936660756_134ee.png" alt=""></p>
<h4 id="2-时间转换"><a href="#2-时间转换" class="headerlink" title="2. 时间转换"></a>2. 时间转换</h4><h5 id="1-转换为固定格式的时间字符串"><a href="#1-转换为固定格式的时间字符串" class="headerlink" title="1) 转换为固定格式的时间字符串"></a>1) 转换为固定格式的时间字符串</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/56887950-file_1490937015674_46a9.png" alt=""></p>
<table>
<thead>
<tr>
<th>日期格式化符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%y</td>
<td>两位数的年份表示</td>
</tr>
<tr>
<td>%Y</td>
<td>四位数的年份表示</td>
</tr>
<tr>
<td>%m</td>
<td>月份</td>
</tr>
<tr>
<td>%d</td>
<td>月内的一天</td>
</tr>
<tr>
<td>%H</td>
<td>24小时制</td>
</tr>
<tr>
<td>%l</td>
<td>12小时制</td>
</tr>
<tr>
<td>%M</td>
<td>分钟数</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
</tr>
</tbody>
</table>
<h5 id="2-固定格式的字符串转化为秒级时间戳"><a href="#2-固定格式的字符串转化为秒级时间戳" class="headerlink" title="2) 固定格式的字符串转化为秒级时间戳"></a>2) 固定格式的字符串转化为秒级时间戳</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/15983829-file_1490937862570_b897.png" alt=""></p>
<h5 id="3-Float类型时间戳转换为固定格式的字符串"><a href="#3-Float类型时间戳转换为固定格式的字符串" class="headerlink" title="3) Float类型时间戳转换为固定格式的字符串"></a>3) <code>Float</code>类型时间戳转换为固定格式的字符串</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/25777888-file_1490938652461_80e1.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.runoob.com/python/python-date-time.html" target="_blank" rel="external">Python 日期和时间</a></li>
<li><a href="http://labix.org/python-dateutil#head-1443e0f14ad5dff07efd465e080d1110920673d8" target="_blank" rel="external">python-dateutil 教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;自带的时间工具，不支持对月、年的加减，找到一个好用的时间工具包&lt;a href=&quot;http://labi
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之SQLAlchemy增删改查</title>
    <link href="http://jianwl.com/2017/03/30/Python%E4%B9%8BSQLAlchemy%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://jianwl.com/2017/03/30/Python之SQLAlchemy增删改查/</id>
    <published>2017-03-30T15:59:39.000Z</published>
    <updated>2017-03-31T08:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚接触Python对于DB操作不熟练，简单写了个Demo，用来学习<code>SQLAlchemy</code>的增删改查操作。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-数据库创建表"><a href="#1-数据库创建表" class="headerlink" title="1. 数据库创建表"></a>1. 数据库创建表</h4><p><code>MYSQL</code>的test数据库创建一张表<code>daojia_audit_info</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `daojia_audit_info` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `bd_id` bigint(11) NOT NULL COMMENT &apos;BD编号&apos;,</div><div class="line">  `audit_type` int(11) NOT NULL COMMENT &apos;1 招商审核 2 续签审核&apos;,</div><div class="line">  `collection_id` varchar(11) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;招商审核主键标识，招商审核时一定不为空&apos;,</div><div class="line">  `org_code` varchar(11) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;商家编码，续签审核时肯定不为空&apos;,</div><div class="line">  `left_time` bigint(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;审核剩余时间&apos;,</div><div class="line">  `is_read` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;0 未读 1 已读&apos;,</div><div class="line">  `is_del` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;0 未删除 1 已删除&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h4 id="2-增删改查操作"><a href="#2-增删改查操作" class="headerlink" title="2. 增删改查操作"></a>2. 增删改查操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"># _*_ coding:UTF-8 _*_</div><div class="line">from sqlalchemy import BIGINT</div><div class="line">from sqlalchemy import Column</div><div class="line">from sqlalchemy import Integer</div><div class="line">from sqlalchemy import String</div><div class="line">from sqlalchemy import TIMESTAMP</div><div class="line">from sqlalchemy import create_engine</div><div class="line">from sqlalchemy.ext.declarative import declarative_base</div><div class="line">from sqlalchemy.orm import sessionmaker</div><div class="line"></div><div class="line">DB_CONNECT_STRING = &quot;mysql://root:root@localhost/test&quot;</div><div class="line">engine = create_engine(DB_CONNECT_STRING, echo=False)</div><div class="line"></div><div class="line">DB_Session = sessionmaker(bind=engine)</div><div class="line">session = DB_Session()</div><div class="line"></div><div class="line">BaseModel = declarative_base()</div><div class="line"></div><div class="line">def init_db():</div><div class="line">    BaseModel.metadata.create_all(engine)</div><div class="line"></div><div class="line">def drop_db():</div><div class="line">    BaseModel.metadata.drop_all(engine)</div><div class="line"></div><div class="line">class DaoJiaAuditInfo(BaseModel):</div><div class="line">    __tablename__ = &apos;daojia_audit_info&apos;</div><div class="line">    __table_args__ = &#123;&quot;mysql_engine&quot;: &quot;InnoDB&quot;, &quot;mysql_charset&quot;: &quot;utf8&quot;&#125;</div><div class="line"></div><div class="line">    id = Column(Integer, primary_key=True, nullable=False)</div><div class="line">    bd_id = Column(BIGINT, nullable=False)</div><div class="line">    audit_type = Column(Integer, nullable=False)</div><div class="line">    collection_id = Column(String(11, collation=&quot;utf8_unicode_ci&quot;))</div><div class="line">    org_code = Column(String(11, collation=&quot;utf8_unicode_ci&quot;))</div><div class="line">    is_read = Column(Integer, default=0)</div><div class="line">    is_del = Column(Integer, default=0)</div><div class="line">    left_time = Column(BIGINT, default=0)</div><div class="line">    create_time = Column(TIMESTAMP)</div><div class="line">    update_time = Column(TIMESTAMP)</div><div class="line"></div><div class="line">    db = init_db()</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def select(bd_id):</div><div class="line">        # 获取第一个记录的第一个元素</div><div class="line">        print &quot;return the first row of the first column =&gt; %d &quot; % session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.collection_id).filter(DaoJiaAuditInfo.bd_id == bd_id).scalar()</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    def save(cls,org_code,collection_id,bd_id,left_time,audit_type):</div><div class="line">        obj = cls()</div><div class="line">        obj.org_code = org_code</div><div class="line">        obj.collection_id = collection_id</div><div class="line">        obj.bd_id = bd_id</div><div class="line">        obj.left_time = left_time</div><div class="line">        obj.audit_type = audit_type</div><div class="line">        session.add(obj)</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish save&quot;</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def update(org_code,bd_id):</div><div class="line">        print &quot;before update =&gt; %s &quot; % str(session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.org_code).first())</div><div class="line">        session.query(DaoJiaAuditInfo).filter(DaoJiaAuditInfo.bd_id == bd_id).update(&#123;DaoJiaAuditInfo.org_code : org_code&#125;)</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish update  =&gt; %s &quot; % str(session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.org_code).first())</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def delete(bd_id):</div><div class="line">        session.query(DaoJiaAuditInfo).filter(DaoJiaAuditInfo.bd_id == bd_id).delete()</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish delete&quot;</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    # 增</div><div class="line">    DaoJiaAuditInfo.save(&quot;xxx_2&quot;, &quot;xxxx_2&quot;, 1010, 22222, 1)</div><div class="line"></div><div class="line">    # 查</div><div class="line">    DaoJiaAuditInfo.select(1010)</div><div class="line"></div><div class="line">    # 改</div><div class="line">    DaoJiaAuditInfo.update(&quot;xxxx_5&quot;,1010);</div><div class="line"></div><div class="line">    # 删</div><div class="line">    DaoJiaAuditInfo.delete(1010)</div><div class="line">    </div><div class="line">    # 主键查询</div><div class="line">    # DaoJiaAuditInfo.query.get(主键ID)</div></pre></td></tr></table></figure>
<h4 id="3-运行结果"><a href="#3-运行结果" class="headerlink" title="3. 运行结果"></a>3. 运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/22646587-file_1490889902432_a8d0.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://itindex.net/detail/40939-sqlalchemy-%E7%BB%8F%E9%AA%8C" target="_blank" rel="external">SQLAlchemy使用经验 - IT瘾 </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;刚接触Python对于DB操作不熟练，简单写了个Demo，用来学习&lt;code&gt;SQLAlchemy&lt;/code&gt;的增删改查操作。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Maven设置JDK版本</title>
    <link href="http://jianwl.com/2017/03/29/Maven%E8%AE%BE%E7%BD%AEJDK%E7%89%88%E6%9C%AC/"/>
    <id>http://jianwl.com/2017/03/29/Maven设置JDK版本/</id>
    <published>2017-03-29T07:29:14.000Z</published>
    <updated>2017-03-29T07:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>pom</code>文件中设置<code>JDK</code>的版本号，一个很常用的配置。记录下来，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>pom.xml</code>文件配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;  </div><div class="line">    &lt;plugins&gt;  </div><div class="line">        &lt;plugin&gt;  </div><div class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  </div><div class="line">            &lt;configuration&gt;  </div><div class="line">                &lt;source&gt;1.8&lt;/source&gt;  </div><div class="line">                &lt;target&gt;1.8&lt;/target&gt;  </div><div class="line">            &lt;/configuration&gt;  </div><div class="line">        &lt;/plugin&gt;  </div><div class="line">    &lt;/plugins&gt;  </div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pom&lt;/code&gt;文件中设置&lt;code&gt;JDK&lt;/code&gt;的版本号，一个很常用的配置。记录下来，备忘。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之并发问题</title>
    <link href="http://jianwl.com/2017/03/27/MYSQL%E4%B9%8B%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    <id>http://jianwl.com/2017/03/27/MYSQL之并发问题/</id>
    <published>2017-03-27T14:48:19.000Z</published>
    <updated>2017-03-28T10:38:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MYSQL</code>很少在单用户环境下使用，通常它会同时处理很多的连接线程，这些线程来自不同的用户，执行不同的任务。这些并行连接可能访问同样的数据库和表，所以当某个连接发生问题的时候，很难判断数据库的状态。</p>
<p><code>MYSQL</code>服务器有内部机制来避免其他用户损坏其他用户的数据，其使<strong>锁</strong>和<strong>事务</strong>来处理对表的并发访问，接下来将会学习<code>锁的类型</code>和<code>事务处理</code>，然后介绍排错的技术。</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><code>MYSQL</code>服务器和独立存储引擎都可以设置锁，<code>读锁(共享锁)</code>允许并发线程读取加锁的数据，但禁止写数据；<code>写锁</code>阻止其他线程读写操作。</p>
<h4 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h4><p><code>MYSQL</code>有四种类型的锁：1️⃣ 表锁，会锁住整个表，没有人可以访问表中任何行，直到持有锁解锁该表；2️⃣ 行锁，仅会锁住一行或者正在被线程访问的任何几行，因此同一个表中的其他行可以并发线程访问；3️⃣ 页锁，会锁住一页，仅在比较少见的<code>BDB存储引擎</code>存在。 4️⃣ 元数据锁是<code>MYSQL 5.5</code>版本中的新特性。仅对表中的元数据启用，当有线程使用表的时候，元数据锁会锁住表的所有元数据。<strong>元数据是DDL语句的更改信息，如CREATE、DROP、ALTER等修改方案的语句</strong>，引入元数据锁是为了解决线程可以在其他线程的并发事务使用相同表的情况下修改表定义或是删除表的问题。</p>
<h5 id="1）表锁"><a href="#1）表锁" class="headerlink" title="1）表锁"></a>1）表锁</h5><p>定义：触发表锁时，整个表会被锁住。</p>
<p>在<code>MyISAM</code>存储引擎创建一张表&amp;初始化数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 建表</div><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE= MyISAM DEFAULT CHARSET=latin1;</div><div class="line"></div><div class="line"># 插入数据</div><div class="line">INSERT INTO `user` (`id`) VALUES (&apos;1&apos;),(&apos;2&apos;),(&apos;3&apos;),(&apos;4&apos;);</div></pre></td></tr></table></figure>
<p>模拟表锁场景:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 用一个客户端，更新数据并休眠</div><div class="line">UPDATE user set id = sleep(60) where id = 1</div><div class="line"></div><div class="line"># 另一个客户端，查询数据user表</div><div class="line">SELECT * FROM user</div></pre></td></tr></table></figure>
<p>为何同样一个查询，一个花了<strong>51s</strong>，另一个是<strong>秒查</strong>呢？</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/39621214-file_1490662837316_7505.png" alt=""></p>
<p>在<strong>查询正在进行中</strong>时，在MYSQL客户端执行<code>SHOW PROCESSLIST \G</code>，观察如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/88029875-file_1490662629751_e877.png" alt=""></p>
<p>在查询<code>user</code>表时，另一个<code>MYSQL</code>客户端对<code>user</code>表执行更新操作，将整个表锁住，其他用户此时不可读写<code>user</code>表，等待<code>user</code>表释放锁。</p>
<p>调试技巧 1️⃣ ：当你怀疑是并发线程影响了查询的时候，使用<code>SHOW PROCESSLIST</code>命令查看状态.</p>
<h5 id="2-行锁"><a href="#2-行锁" class="headerlink" title="2) 行锁"></a>2) 行锁</h5><p>定义：触发行锁时，会锁住一些行而不是整个表；</p>
<p>在<code>InnoDB</code>存储引擎中创建表&amp;初始化表数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 建表</div><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</div><div class="line"></div><div class="line"># 插入数据</div><div class="line">INSERT INTO `user` (`id`) VALUES (&apos;1&apos;),(&apos;2&apos;),(&apos;3&apos;),(&apos;4&apos;);</div></pre></td></tr></table></figure>
<p>模拟行锁场景:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 用一个客户端，更新数据并休眠</div><div class="line">UPDATE user set id = sleep(60) where id = 1</div><div class="line"></div><div class="line"># 另一个客户端</div><div class="line">SELECT * FROM user;</div><div class="line"></div><div class="line">SELECT * FROM user where id = 1;</div><div class="line"></div><div class="line">update user set id = 111 where id = 1;</div></pre></td></tr></table></figure>
<p>操作1: 更新并休眠</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/98337967-file_1490675424759_11f2c.png" alt=""></p>
<p>操作2: 另一个客户端，查询<code>user</code>表，<strong>行锁</strong>在此处为<strong>读锁</strong>，不影响其他用户的<code>读操作</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/29004933-file_1490675511078_d6f8.png" alt=""></p>
<p>操作3: 另一个客户端，更新<code>操作1</code>相同的行, 触发行锁，需要等待读锁释放，才能更新数据。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/69956688-file_1490675659555_e2ed.png" alt=""></p>
<p>在<strong>查询正在进行中</strong>时，在MYSQL客户端执行<code>SHOW PROCESSLIST \G</code>，观察如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/34057315-file_1490675865544_4f11.png" alt=""></p>
<p>调试技巧 2️⃣ : 分析并发语句事务用<code>SHOW ENGINE INNODB STATUS \G</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/25021109-file_1490696658342_b8d.png" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>MYSQL排错指南</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;MYSQL&lt;/code&gt;很少在单用户环境下使用，通常它会同时处理很多的连接线程，这些线程来自不同的用户，执行不同的任务。这些并行
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>关于刻意练习的思考</title>
    <link href="http://jianwl.com/2017/03/26/%E5%85%B3%E4%BA%8E%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://jianwl.com/2017/03/26/关于刻意练习的思考/</id>
    <published>2017-03-26T03:01:26.000Z</published>
    <updated>2017-03-26T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>没有充分的练习，你不可能精通任何脑力活</p>
</blockquote>
<p>如果带球的同时还要思考踢球的角度和速度，你不太可能成为一个优秀的足球选手。像这样的<strong>低层次过程必须不假思索，才能给更高层次的过程，比如战术策略提供足够的空间。</strong> 这一节主要来解释为何<code>刻意练习</code>如此重要、哪些内容值得练习、怎么安排练习可以增加练习的趣味性。</p>
<h3 id="为什么要刻意练习"><a href="#为什么要刻意练习" class="headerlink" title="为什么要刻意练习"></a>为什么要刻意练习</h3><p>一个职业网球选手每次都能将球打到对方的场地上，但他还是不停练习以求提高球的速度和落点的准确度，通过不断地<code>刻意练习</code>可以加强基础技能，为学习更先进的技能做准备，防止遗忘和改善迁移。</p>
<h3 id="练习是为了日后更好地学习"><a href="#练习是为了日后更好地学习" class="headerlink" title="练习是为了日后更好地学习"></a>练习是为了日后更好地学习</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/93014436-file_1490498430054_180b8.png" alt=""></p>
<p>如图显示工作记忆是思考的空间，思考在你重新组合信息时产生，这一信息可能来自于环境，也可能来自于长期记忆，或者两者都有。</p>
<p>工作记忆的一个显著特点是它的空间有限，如果你同时放入太多东西或者他们的太多方面，你会失去正在思考的线索。比如我问: 蝴蝶、蜻蜓、筷子、药盒和稻草人有什么共同点，那么要同时比较的东西太多了，当你在思考药盒和筷子的关系时，你已经忘记其他物品是什么了。</p>
<p>据我们所知，工作记忆的大小是固定不变的 – 得到多少就是多少，练习不会改变它。但还是有窍门的，可以通过<strong>压缩信息</strong>来维持工作记忆中更多的信息，通过<strong>合并，你将几个独立的事物看做一个单元。</strong></p>
<h3 id="刻意练习的优点"><a href="#刻意练习的优点" class="headerlink" title="刻意练习的优点"></a>刻意练习的优点</h3><p>1️⃣ 形成最基本的本领(比如青少年用手动档练习开车，直到完全掌握为止) 2️⃣ 达到精通(比如高尔夫选手挥杆以提高准确性) 3️⃣ 让思考过程变得省力 4️⃣ 让记忆更持久 5️⃣ 增加知识迁移的几率</p>
<h3 id="该练习什么"><a href="#该练习什么" class="headerlink" title="该练习什么"></a>该练习什么</h3><p>不是每件事都需要无限度地练习的，首先没有这么多时间给你练习，更重要的是，不是每件事情都需要练习，我所说的练习的好处是能够给我们一些选择上的提示。如果练习可以让思考过程变得更加省力，我们就要问，哪些过程需要自动化？从记忆中取出关于数字的要点和字母的发音就可以入选。科学课的教师一般还会要求学生熟练掌握化学元素的基本特征，总的来说就是，需要自动化的过程往往是自动化后效益能达到最大值的技能的基础。所谓基础也就是人在某一个领域一遍又一遍重复的事情，它们为日后更高级的工作奠定了基础。</p>
<h3 id="分散练习时间"><a href="#分散练习时间" class="headerlink" title="分散练习时间"></a>分散练习时间</h3><p>没有必要把关于一个概念的所有练习集中在很短的一段时间里完成。分散练习后记忆会更持久，持续不断地练习同一项技能是很无聊的事，最好能有点变化。还有就是有更多的时间思考如何将所学到的东西加以应用。</p>
<h3 id="在进阶环境中练习"><a href="#在进阶环境中练习" class="headerlink" title="在进阶环境中练习"></a>在进阶环境中练习</h3><p>基本技能是需要练习直到熟练掌握的，但这不代表不能够在更高阶的环境中练习它，比如需要练习找到字母相对应的发音，在条件允许的情况下，为什么不将这一练习与有趣的阅读相结合呢？会玩桥牌的人要先算手里的牌点才能叫牌，如果我是桥牌教练，我会让学生一直数点数，直到他们能脱口而出为止。自动化需要很多练习，聪明的办法是<strong>既分散练习的时间，又分散练习的环境。</strong>尽量多设计有创意的方法来练习最关键的技巧，同时能够在更高阶的环境中学到基本技能。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>为什么学生不喜欢上学？ </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;没有充分的练习，你不可能精通任何脑力活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果带球的同时还要思考踢球的角度
    
    </summary>
    
      <category term="思绪" scheme="http://jianwl.com/categories/%E6%80%9D%E7%BB%AA/"/>
    
    
      <category term="思绪" scheme="http://jianwl.com/tags/%E6%80%9D%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL主从服务搭建</title>
    <link href="http://jianwl.com/2017/03/25/MYSQL%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>http://jianwl.com/2017/03/25/MYSQL主从服务搭建/</id>
    <published>2017-03-25T11:21:55.000Z</published>
    <updated>2017-03-25T16:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MYSQL</code>主从服务器，主服务器用于<strong>写操作</strong>，从服务器用于<strong>读操作</strong>，从服务器通过<code>bin-log</code>日志，与主服务器数据完全同步。对于主从服务的搭建，之前处于空白状态，这一节主要来学习，主从服务器搭建，实现从服务器<strong>实时复制</strong>主服务器的数据。</p>
<h3 id="主服务器配置"><a href="#主服务器配置" class="headerlink" title="主服务器配置"></a>主服务器配置</h3><p>1、 打开主服务器配置文件<code>/etc/my.cnf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/my.cnf</div></pre></td></tr></table></figure>
<p>2、 在<code>/etc/my.cnf</code>配置文件中，配置服务器为本机IP</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind-address=192.168.1.102</div></pre></td></tr></table></figure>
<p>本机IP查看</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/87553736-file_1490453723082_127f2.png" alt=""></p>
<p>3、 在<code>/etc/my.cnf</code>配置文件中,设置<code>server-id</code>,你可以选择任意一个数字(这里设定为1)，但这个数字必须是唯一的，不能和集群中的其他的<code>server-id</code>相同</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service-id=1</div></pre></td></tr></table></figure>
<p>4、 在<code>/etc/my.cnf</code>配置文件中,开启<code>bin-log</code>日志，从服务器将会同步主服务器的改变，通过<code>bin-log</code>日志。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log_bin = mysql-bin</div></pre></td></tr></table></figure>
<p>5、 在<code>/etc/my.cnf</code>配置文件中,配置主服务器中需要同步到从服务器的数据库。可以设置多个数据库，重复以下配置即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binlog_do_db=test</div></pre></td></tr></table></figure>
<p>6、重启MYSQL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
<p>主服务器MYSQL配置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/90687897-file_1490454303385_14e6e.png" alt=""></p>
<h3 id="登录主服务器MYSQL的操作"><a href="#登录主服务器MYSQL的操作" class="headerlink" title="登录主服务器MYSQL的操作"></a>登录主服务器MYSQL的操作</h3><h4 id="1-登录MYSQL"><a href="#1-登录MYSQL" class="headerlink" title="1. 登录MYSQL"></a>1. 登录MYSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h4 id="2-创建一个账号，允许从服务器复制主服务器"><a href="#2-创建一个账号，允许从服务器复制主服务器" class="headerlink" title="2. 创建一个账号，允许从服务器复制主服务器"></a>2. 创建一个账号，允许从服务器复制主服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GRANT REPLICATION SLAVE ON *.* TO &apos;slave_user&apos;@&apos;%&apos; IDENTIFIED BY &apos;slave_user&apos;;</div><div class="line"></div><div class="line"># 只有刷新之后，该账号才生效</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h4 id="3-切换到需要同步的库"><a href="#3-切换到需要同步的库" class="headerlink" title="3. 切换到需要同步的库"></a>3. 切换到需要同步的库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">USER test;</div></pre></td></tr></table></figure>
<h4 id="4-锁住test数据库，防止新的写入操作。"><a href="#4-锁住test数据库，防止新的写入操作。" class="headerlink" title="4. 锁住test数据库，防止新的写入操作。"></a>4. 锁住<code>test</code>数据库，防止新的写入操作。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLUSH TABLES WITH READ LOCK;</div></pre></td></tr></table></figure>
<h4 id="5-查看主服务器的状态"><a href="#5-查看主服务器的状态" class="headerlink" title="5. 查看主服务器的状态"></a>5. 查看主服务器的状态</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/30036109-file_1490454974982_11ad4.png" alt=""></p>
<h4 id="6-用mysqldump导出test数据库-此操作是在Shell中执行，不是在MYSQL命令行"><a href="#6-用mysqldump导出test数据库-此操作是在Shell中执行，不是在MYSQL命令行" class="headerlink" title="6. 用mysqldump导出test数据库(此操作是在Shell中执行，不是在MYSQL命令行)"></a>6. 用<code>mysqldump</code>导出test数据库(此操作是在Shell中执行，不是在MYSQL命令行)</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/25607642-file_1490459549608_10bb9.png" alt=""></p>
<h4 id="7-回到原来MYSQL的命令行窗口，解锁数据库"><a href="#7-回到原来MYSQL的命令行窗口，解锁数据库" class="headerlink" title="7. 回到原来MYSQL的命令行窗口，解锁数据库"></a>7. 回到原来MYSQL的命令行窗口，解锁数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UNLOCK TABLES;</div><div class="line">QUIT;</div></pre></td></tr></table></figure>
<h3 id="配置从服务器"><a href="#配置从服务器" class="headerlink" title="配置从服务器"></a>配置从服务器</h3><h4 id="1-登录从服务器，并创建需要同步的数据库"><a href="#1-登录从服务器，并创建需要同步的数据库" class="headerlink" title="1. 登录从服务器，并创建需要同步的数据库"></a>1. 登录从服务器，并创建需要同步的数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE test;</div><div class="line">EXIT</div></pre></td></tr></table></figure>
<h4 id="2-远程复制主服务器的test-sql到从服务器"><a href="#2-远程复制主服务器的test-sql到从服务器" class="headerlink" title="2. 远程复制主服务器的test.sql到从服务器"></a>2. 远程复制主服务器的<code>test.sql</code>到从服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/30040145-file_1490455882333_f6a2.png" alt=""></p>
<h4 id="3-将test-sql导入到从服务器"><a href="#3-将test-sql导入到从服务器" class="headerlink" title="3. 将test.sql导入到从服务器"></a>3. 将<code>test.sql</code>导入到从服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/61737716-file_1490456057973_8831.png" alt=""></p>
<h4 id="4-配置从服务器-etc-my-cnf文件"><a href="#4-配置从服务器-etc-my-cnf文件" class="headerlink" title="4. 配置从服务器/etc/my.cnf文件"></a>4. 配置从服务器<code>/etc/my.cnf</code>文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server-id = 2</div><div class="line">relay-log = mysql-relay</div><div class="line">log-bin=mysql-bin</div><div class="line">binlog_do_db</div></pre></td></tr></table></figure>
<p>从服务器的配置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/74025224-file_1490456239753_4f5b.png" alt=""></p>
<h4 id="5-重启从服务器服务"><a href="#5-重启从服务器服务" class="headerlink" title="5. 重启从服务器服务"></a>5. 重启从服务器服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
<h4 id="6-登录从服务器-更改以下配置"><a href="#6-登录从服务器-更改以下配置" class="headerlink" title="6. 登录从服务器,更改以下配置"></a>6. 登录从服务器,更改以下配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CHANGE MASTER TO MASTER_HOST=&apos;192.168.1.102&apos;,MASTER_USER=&apos;slave_user&apos;, MASTER_PASSWORD=&apos;slave_user&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000006&apos;, MASTER_LOG_POS=637;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/71580385-file_1490457323447_5f79.png" alt=""></p>
<p>完成以上配置则实现以下几个功能点：1️⃣ 指定当前服务器为主数据库的从库；2️⃣ 提供<code>从库</code>登录<code>主库</code>的账号，可以复制bin-log，实现数据同步; 3️⃣ 从服务器知道从哪里开始同步主库，主库的<code>bin-log</code>日志文件和<code>position</code>位置都已知。</p>
<h4 id="7-激活从库"><a href="#7-激活从库" class="headerlink" title="7. 激活从库"></a>7. 激活从库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">START SLAVE</div></pre></td></tr></table></figure>
<h4 id="8-查看从库状态，-G让信息更加可读"><a href="#8-查看从库状态，-G让信息更加可读" class="headerlink" title="8. 查看从库状态，\G让信息更加可读"></a>8. 查看从库状态，<code>\G</code>让信息更加可读</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/74608681-file_1490457653091_134b8.png" alt=""></p>
<h3 id="验证主从是否同步"><a href="#验证主从是否同步" class="headerlink" title="验证主从是否同步"></a>验证主从是否同步</h3><h4 id="1-主库中person表的数据"><a href="#1-主库中person表的数据" class="headerlink" title="1. 主库中person表的数据"></a>1. 主库中<code>person</code>表的数据</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/97547013-file_1490457820526_1585e.png" alt=""></p>
<h4 id="2-从库中person表的数据"><a href="#2-从库中person表的数据" class="headerlink" title="2. 从库中person表的数据"></a>2. 从库中<code>person</code>表的数据</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/14095639-file_1490457857983_118.png" alt=""></p>
<h4 id="3-主库对person表新增一条记录"><a href="#3-主库对person表新增一条记录" class="headerlink" title="3. 主库对person表新增一条记录"></a>3. 主库对<code>person</code>表新增一条记录</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/68583068-file_1490457930231_9fa.png" alt=""></p>
<h4 id="4-查看从库person表，是否同步新增了一条记录"><a href="#4-查看从库person表，是否同步新增了一条记录" class="headerlink" title="4. 查看从库person表，是否同步新增了一条记录"></a>4. 查看从库<code>person</code>表，是否同步新增了一条记录</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/45737952-file_1490457975198_ef73.png" alt=""></p>
<p>从库同步主库数据，至此完成主从库的配置。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql" target="_blank" rel="external">How To Set Up Master Slave Replication in MySQL</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;MYSQL&lt;/code&gt;主从服务器，主服务器用于&lt;strong&gt;写操作&lt;/strong&gt;，从服务器用于&lt;strong&gt;读操作&lt;/
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>客户端免密码登录服务器</title>
    <link href="http://jianwl.com/2017/03/25/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://jianwl.com/2017/03/25/客户端免密码登录服务器/</id>
    <published>2017-03-25T08:30:45.000Z</published>
    <updated>2017-03-25T08:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节主要来学习使用public key免密登录服务器。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-客户端生成公钥"><a href="#1-客户端生成公钥" class="headerlink" title="1. 客户端生成公钥"></a>1. 客户端生成公钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/83784257-file_1490425255076_ce1b.png" alt=""></p>
<h4 id="2-将客户端公钥id-rsa-pub的内容，添加服务器的authorized-keys中"><a href="#2-将客户端公钥id-rsa-pub的内容，添加服务器的authorized-keys中" class="headerlink" title="2. 将客户端公钥id_rsa.pub的内容，添加服务器的authorized_keys中"></a>2. 将客户端公钥<code>id_rsa.pub</code>的内容，添加服务器的<code>authorized_keys</code>中</h4><p>查看公钥id_rsa.pub</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/31140109-file_1490425420722_d9e0.png" alt=""></p>
<p>将客户端公钥内容添加到服务器<code>authorized_keys</code>，此处显示添加后的结果。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/97597421-file_1490426288907_118ad.png" alt=""></p>
<h4 id="3-客户端免密码登录服务器"><a href="#3-客户端免密码登录服务器" class="headerlink" title="3. 客户端免密码登录服务器"></a>3. 客户端免密码登录服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/10331226-file_1490426155457_f122.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这一节主要来学习使用public key免密登录服务器。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;head
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL允许远程登录</title>
    <link href="http://jianwl.com/2017/03/25/MYSQL%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>http://jianwl.com/2017/03/25/MYSQL允许远程登录/</id>
    <published>2017-03-25T07:27:58.000Z</published>
    <updated>2017-03-25T08:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在虚拟机安装了<code>MYSQL</code>并启动服务，在虚拟机中能够登录到<code>MYSQL</code>,但通过<code>Sequal Pro</code>远程登录虚拟机中的MYSQL却始终连不上。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-防火墙对外增加3306端口"><a href="#1-防火墙对外增加3306端口" class="headerlink" title="1. 防火墙对外增加3306端口"></a>1. 防火墙对外增加<code>3306端口</code></h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/76701170-file_1490427451254_f1e7.png" alt=""></p>
<h4 id="2-重启防火墙"><a href="#2-重启防火墙" class="headerlink" title="2. 重启防火墙"></a>2. 重启防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure>
<h4 id="3-测试本地能否连上服务器的3306端口"><a href="#3-测试本地能否连上服务器的3306端口" class="headerlink" title="3. 测试本地能否连上服务器的3306端口"></a>3. 测试本地能否连上服务器的<code>3306</code>端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 10.211.55.3为服务端的IP,3306为MYSQL服务的端口</div><div class="line">telnet 10.211.55.3 3306</div></pre></td></tr></table></figure>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/72064355-file_1490429141344_8010.png" alt=""></p>
<h4 id="4-配置MYSQL允许远程登录"><a href="#4-配置MYSQL允许远程登录" class="headerlink" title="4. 配置MYSQL允许远程登录"></a>4. 配置MYSQL允许远程登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 登录MYSQL</div><div class="line">mysql -u root -p</div><div class="line"></div><div class="line"># 允许MYSQL远程登录</div><div class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</div><div class="line"></div><div class="line"># 刷新权限</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/82480994-file_1490428841050_fdc5.png" alt=""></p>
<h4 id="5-本机Sequel-Pro登录远程MYSQL"><a href="#5-本机Sequel-Pro登录远程MYSQL" class="headerlink" title="5. 本机Sequel Pro登录远程MYSQL"></a>5. 本机<code>Sequel Pro</code>登录远程MYSQL</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/43607247-file_1490430126336_10444.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.cnblogs.com/yjdcoder/p/5927358.html" target="_blank" rel="external">navicat连接虚拟机(centos)中的mysql</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在虚拟机安装了&lt;code&gt;MYSQL&lt;/code&gt;并启动服务，在虚拟机中能够登录到&lt;code&gt;MYSQL&lt;/code&gt;,但通过&lt;code&gt;S
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>install mysql on centos7</title>
    <link href="http://jianwl.com/2017/03/23/install-mysql-on-centos7/"/>
    <id>http://jianwl.com/2017/03/23/install-mysql-on-centos7/</id>
    <published>2017-03-23T15:09:52.000Z</published>
    <updated>2017-03-23T15:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前只在<code>Window</code>和<code>Mac</code>环境下安装过<code>MYSQL</code>，这一节主要来学习在<code>CentOS7</code>上安装<code>MYSQL</code>。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-下载-amp-添加库-amp-更新"><a href="#1-下载-amp-添加库-amp-更新" class="headerlink" title="1. 下载 &amp; 添加库 &amp; 更新"></a>1. 下载 &amp; 添加库 &amp; 更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</div><div class="line">sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line">yum update</div></pre></td></tr></table></figure>
<h4 id="2-安装MYSQL"><a href="#2-安装MYSQL" class="headerlink" title="2. 安装MYSQL"></a>2. 安装MYSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install mysql-server</div></pre></td></tr></table></figure>
<h4 id="3-两种方式启动服务"><a href="#3-两种方式启动服务" class="headerlink" title="3. 两种方式启动服务"></a>3. 两种方式启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 方式1</div><div class="line">sudo systemctl start mysqld</div><div class="line"></div><div class="line"># 方式2</div><div class="line">service mysqld start</div></pre></td></tr></table></figure>
<h4 id="4-登录数据库"><a href="#4-登录数据库" class="headerlink" title="4. 登录数据库"></a>4. 登录数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h4 id="5-关闭服务"><a href="#5-关闭服务" class="headerlink" title="5. 关闭服务"></a>5. 关闭服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl stop mysqld</div></pre></td></tr></table></figure>
<h4 id="6-重置密码"><a href="#6-重置密码" class="headerlink" title="6. 重置密码"></a>6. 重置密码</h4><h5 id="1-以不需要登录密码的方式，重启服务"><a href="#1-以不需要登录密码的方式，重启服务" class="headerlink" title="1) 以不需要登录密码的方式，重启服务"></a>1) 以不需要登录密码的方式，重启服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mysqld_safe --skip-grant-tables &amp;</div></pre></td></tr></table></figure>
<h5 id="2-重连上MYSQL-Server的Root账号"><a href="#2-重连上MYSQL-Server的Root账号" class="headerlink" title="2) 重连上MYSQL-Server的Root账号"></a>2) 重连上MYSQL-Server的Root账号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root</div></pre></td></tr></table></figure>
<h5 id="3-重置密码"><a href="#3-重置密码" class="headerlink" title="3) 重置密码"></a>3) 重置密码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">update user SET PASSWORD=PASSWORD(&quot;root&quot;) WHERE USER=&quot;root&quot;;</div><div class="line">flush privileges;</div><div class="line">exit</div></pre></td></tr></table></figure>
<h5 id="4-重启MYSQL"><a href="#4-重启MYSQL" class="headerlink" title="4) 重启MYSQL"></a>4) 重启MYSQL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start mysqld</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.linode.com/docs/databases/mysql/how-to-install-mysql-on-centos-7" target="_blank" rel="external">How to Install MySQL on CentOS 7</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前只在&lt;code&gt;Window&lt;/code&gt;和&lt;code&gt;Mac&lt;/code&gt;环境下安装过&lt;code&gt;MYSQL&lt;/code&gt;，这一节主要
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Python之基础教程&amp;实战</title>
    <link href="http://jianwl.com/2017/03/23/Python%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-%E5%AE%9E%E6%88%98/"/>
    <id>http://jianwl.com/2017/03/23/Python之基础教程-实战/</id>
    <published>2017-03-23T12:56:47.000Z</published>
    <updated>2017-03-23T12:59:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要是用来练习Python基本功，参考这篇文章<a href="http://www.runoob.com/python/python-tutorial.html" target="_blank" rel="external">Python基础教程</a>，另外根据教程，写了些小练习<a href="http://git.oschina.net/shuangziliuyun/Python_Basic" target="_blank" rel="external">在这个项目中的chapter_02</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本节主要是用来练习Python基本功，参考这篇文章&lt;a href=&quot;http://www.runoob.com/python/python-
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之变量类型</title>
    <link href="http://jianwl.com/2017/03/20/Python%E4%B9%8B%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <id>http://jianwl.com/2017/03/20/Python之变量类型/</id>
    <published>2017-03-20T14:55:46.000Z</published>
    <updated>2017-03-23T12:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节我们来学习Python变量的基本类型以及其常用方法,<a href="http://git.oschina.net/shuangziliuyun/Python_Basic" target="_blank" rel="external">本节实战的代码请查看这里chapter_01</a>；</p>
<h3 id="理论-amp-实战"><a href="#理论-amp-实战" class="headerlink" title="理论 &amp; 实战"></a>理论 &amp; 实战</h3><h4 id="1-变量赋值"><a href="#1-变量赋值" class="headerlink" title="1. 变量赋值"></a>1. 变量赋值</h4><p><code>Python</code>中的变量赋值不需要类型声明，每个变量在内存中创建，在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/63585377-file_1490022387614_5327.png" alt=""></p>
<h4 id="2-多变量赋值"><a href="#2-多变量赋值" class="headerlink" title="2. 多变量赋值"></a>2. 多变量赋值</h4><p>Python允许你同时为多个变量赋值；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/61524509-file_1490022684600_9741.png" alt=""></p>
<h4 id="3-标准数据类型"><a href="#3-标准数据类型" class="headerlink" title="3. 标准数据类型"></a>3. 标准数据类型</h4><p>Python有五个标准的数据类型：Number(数字)、String(字符串)、List(列表)、Tuple(元组)、Dictionary(字典)</p>
<h5 id="1）数字"><a href="#1）数字" class="headerlink" title="1）数字"></a>1）数字</h5><p>Python支持4种不同的数字类型：1️⃣ int(有符号整型) 2️⃣ long(长整形)  3️⃣ float(浮点型) 4️⃣ complex(复数)</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/61536331-file_1490023177580_6fdf.png" alt=""></p>
<h5 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2) 字符串"></a>2) 字符串</h5><p>字符串是由数字、字母、下划线组成的，有两种取值的顺序1️⃣ 从左到右默认从0开始 2️⃣ 从右到左默认-1开始</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/10908781-file_1490023740462_7a8f.png" alt=""></p>
<h5 id="3-列表"><a href="#3-列表" class="headerlink" title="3) 列表"></a>3) 列表</h5><p>List(列表)是Python中使用最频繁的数据结构，加号(+)是列表运算符，星号(*)是重复操作。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/12281863-file_1490024341078_15a2f.png" alt=""></p>
<h5 id="4-元组"><a href="#4-元组" class="headerlink" title="4) 元组"></a>4) 元组</h5><p>元组类似于列表，但元组不能二次赋值，相当于只读列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/70503194-file_1490025007659_e7e1.png" alt=""></p>
<h5 id="5-字典"><a href="#5-字典" class="headerlink" title="5) 字典"></a>5) 字典</h5><p>字典是除列表以外最灵活的内置数据结构类型，列表是有序的对象结合，字典是无序的对象集合。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/3467668-file_1490025356039_5bab.png" alt=""></p>
<h4 id="4-Python数据类型转换"><a href="#4-Python数据类型转换" class="headerlink" title="4. Python数据类型转换"></a>4. Python数据类型转换</h4><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>int(x[,base])</td>
<td>将x转化为一个整数</td>
</tr>
<tr>
<td>long(x[,base])</td>
<td>将x转化为一个长整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转化为一个浮点数</td>
</tr>
<tr>
<td>complex(real[,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象x转化为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象x转化为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式，并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列s转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列s转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典，d必须是一个序列(key,value)元组</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>创建不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x)</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转化为他的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转化为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转化为一个八进制字符串</td>
</tr>
</tbody>
</table>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-21/39388905-file_1490026722871_148f8.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.<a href="http://www.runoob.com/python/python-variable-types.html" target="_blank" rel="external">Python变量类型</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这一节我们来学习Python变量的基本类型以及其常用方法,&lt;a href=&quot;http://git.oschina.net/shuangzil
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用Git命令清单</title>
    <link href="http://jianwl.com/2017/03/19/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>http://jianwl.com/2017/03/19/常用Git命令清单/</id>
    <published>2017-03-19T04:03:22.000Z</published>
    <updated>2017-03-19T06:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>发现一个非常好的Git总结，基本上涵盖了所有日常用到的Git命令，记录下来，备忘。</p>
<h3 id="常用Git命令清单"><a href="#常用Git命令清单" class="headerlink" title="常用Git命令清单"></a>常用Git命令清单</h3><p>Git中有几个专有名词的译名如下：</p>
<ol>
<li>Workspace:工作区</li>
<li>Index/Stage:暂存区</li>
<li>Repository: 仓库区</li>
<li>Remote: 远程仓库</li>
</ol>
<h4 id="1-新建代码库"><a href="#1-新建代码库" class="headerlink" title="1.新建代码库"></a>1.新建代码库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 在当前目录新建一个Git代码库</div><div class="line">$ git init</div><div class="line"></div><div class="line"># 新建一个目录，将其初始化为Git代码库</div><div class="line">$ git init「project-name」</div><div class="line"></div><div class="line"># 下载一个项目和他的整个代码历史</div><div class="line">$ git clone「url」</div></pre></td></tr></table></figure>
<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><p>Git的设置文件为<code>.gitconfig</code>,它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 显示当前的Git配置</div><div class="line">$ git config --list</div><div class="line"></div><div class="line"># 编辑Git配置文件</div><div class="line">$ git config -e [--global]</div><div class="line"></div><div class="line"># 设置提交代码时的用户信息</div><div class="line">$ git config [--global] user.name &quot;[name]&quot;</div><div class="line">$ git config [--global] user.email &quot;[email address]&quot;</div></pre></td></tr></table></figure>
<h4 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3. 增加/删除文件"></a>3. 增加/删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 添加指定文件到暂存区</div><div class="line">$ git add [file1] [file2] ....</div><div class="line"></div><div class="line"># 添加指定目录到暂存区，包括子目录</div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"># 添加当前目录的所有文件到暂存区</div><div class="line">$ git add .</div><div class="line"></div><div class="line"># 删除工作区文件，并且将这次删除放入暂存区</div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"># 停止追踪指定文件，但该文件会保留在工作区</div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"># 该名文件，并且将这个改名放入暂存区</div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h4 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 提交暂存区到仓库区</div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"># 提交暂存区的指定文件到仓库区</div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"># 提交时显示所有diff信息</div><div class="line">$ git commit -v</div></pre></td></tr></table></figure>
<h4 id="5-分支"><a href="#5-分支" class="headerlink" title="5. 分支"></a>5. 分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># 列出所有本地分支</div><div class="line">$ git branch</div><div class="line"></div><div class="line"># 列出所有远程分支</div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"># 列出所有本地分支和远程分支</div><div class="line">$ git branch -a</div><div class="line"></div><div class="line"># 新建一个分支，但依旧停留在当前分支</div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"># 新建一个分支，并切换到该分支</div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"># 新建一个分支，指向指定commit</div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"># 新建一个分支，与指定的远程分支建立追踪关系</div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"># 切换到指定分支，并更新工作区</div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"># 建立追踪关系，与现有分支与指定的远程分支之间</div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"># 合并指定分支到当前分支</div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"># 删除分支</div><div class="line">$ git branch -d [branch-name]</div><div class="line"></div><div class="line"># 删除远程分支</div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote-branch]</div></pre></td></tr></table></figure>
<h4 id="6-标签"><a href="#6-标签" class="headerlink" title="6.标签"></a>6.标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 列出所有tag</div><div class="line">$ git tag</div><div class="line"></div><div class="line"># 新建一个tag在当前commit</div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"># 新建一个tag在指定commit</div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"># 查看tag信息</div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"># 提交指定tag</div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"># 提交所有tag</div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"># 新建一个分支，指向某个tag</div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h4 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 显示有变更的文件</div><div class="line">$ git status</div><div class="line"></div><div class="line"># 显示当前分支的版本历史</div><div class="line">$ git log</div><div class="line"></div><div class="line"># 显示commit历史，以及每次commit发生变更的文件</div><div class="line">$ git log --stat</div><div class="line"></div><div class="line"># 显示某个文件的版本历史，包括文件改名</div><div class="line">$ git log --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"># 显示指定文件相关的每一次diff</div><div class="line">$ git log -p [file]</div><div class="line"></div><div class="line"># 显示指定文件时什么人什么时间修改过的</div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"># 显示暂存区和工作区的差异</div><div class="line">$ git diff</div><div class="line"></div><div class="line"># 显示暂存区和上一个commit的差异</div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"># 显示工作区与当前分支最新commit之间的差异</div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"># 显示两次提交之间的差异</div><div class="line">$ git diff [first-branch] [second-branch]</div><div class="line"></div><div class="line"># 显示某次提交的元数据和内容变化</div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"># 显示某次提交发生变化的文件</div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"># 显示某次提交时，某个文件的内容</div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"># 显示当前分支的最近几次提交</div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h4 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8. 远程同步"></a>8. 远程同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 下载远程仓库的所有变动</div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"># 显示所有远程仓库</div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"># 显示某个远程仓库的信息</div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"># 增加一个新的远程仓库，并命名</div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line"># 取回远程仓库的变化，并与本地分支合并</div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"># 上传本地指定分支到远程仓库</div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"># 强行推送当前分支到远程仓库，即使有冲突</div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"># 推送所有分支到远程仓库</div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h4 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9. 撤销"></a>9. 撤销</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 恢复暂存区的指定文件到工作区</div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"># 恢复某个commit的指定文件到工作区</div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"># 恢复上一个commit的所有文件到工作区</div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"># 重置暂存区的指定文件，与上次commit保持一致，但工作区不变</div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"># 重置暂存区与工作区，与上一次commit保持一致</div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</div><div class="line">$ git reset --keep [commit]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;发现一个非常好的Git总结，基本上涵盖了所有日常用到的Git命令，记录下来，备忘。&lt;/p&gt;
&lt;h3 id=&quot;常用Git命令清单&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Git" scheme="http://jianwl.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jianwl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git读书笔记</title>
    <link href="http://jianwl.com/2017/03/18/Git%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://jianwl.com/2017/03/18/Git读书笔记/</id>
    <published>2017-03-18T05:20:23.000Z</published>
    <updated>2017-03-18T09:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Git非常强大，本节主要记录些常用，但之前不知道的技巧；在此之前Git操作基本按照以下这个套路：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.git init //初始化本地仓库</div><div class="line">2.git clone git@git.oschina.net:shuangziliuyun/Hexo.git //拷贝远程项目到本地</div><div class="line">3.touch README.md //新建文件</div><div class="line">4.git add . //提交新建文件到暂存区(Stage)</div><div class="line">5.git commit -m &quot;新增README.md文件&quot;//将暂存区的文件提交到本地仓库</div><div class="line">6.git pull origin master //下载远端主分支，并合并到本地主分支。</div><div class="line">7.git push origin master //提交本地分支到远端</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-删除索引中的文件-但在工作区中保留它"><a href="#1-删除索引中的文件-但在工作区中保留它" class="headerlink" title="1. 删除索引中的文件,但在工作区中保留它"></a>1. 删除索引中的文件,但在工作区中保留它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached</div></pre></td></tr></table></figure>
<p>场景：Git项目一开始没有新增<code>.gitignore</code>文件，后续增加<code>.gitignore文件</code>无法忽略已存在的文件，需要将这些文件标记为未追踪。– 以a.txt文件为例；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git rm --cached a.txt 「暂存区的a.txt文件删除，并将a.txt文件退回到工作区」</div><div class="line">git commit -m &quot;将暂存区的内容提交到本地仓库&quot;</div><div class="line">git add a.txt 「将工作区的a.txt文件提交到暂存区」</div><div class="line">git commit -m &quot;将a.txt文件重新放到本地仓库&quot;</div><div class="line">git push origin master  「将本地仓库提交到远程仓库，此时.gitignore文件将生效，会忽略a.txt文件」</div></pre></td></tr></table></figure>
<p>本地<code>.gitignore</code>文件和本地文件</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/38737859-file_1489819916053_1297a.png" alt=""></p>
<p>远端分支：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/73891144-file_1489820008800_eb7b.png" alt=""></p>
<h4 id="2-查看某个文件修改的全部历史记录"><a href="#2-查看某个文件修改的全部历史记录" class="headerlink" title="2. 查看某个文件修改的全部历史记录"></a>2. 查看某个文件修改的全部历史记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --follow 文件名</div></pre></td></tr></table></figure>
<p>修改<code>index.html文件的提交记录</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline --follow index.html</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/15470718-file_1489820728948_b196.png" alt=""></p>
<p>全量提交记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/77055950-file_1489820652429_231a.png" alt=""></p>
<h4 id="3-GIT用于特定目的的特殊符号引用"><a href="#3-GIT用于特定目的的特殊符号引用" class="headerlink" title="3. GIT用于特定目的的特殊符号引用"></a>3. GIT用于特定目的的特殊符号引用</h4><table>
<thead>
<tr>
<th style="text-align:center">特殊符号</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">HEAD始终指向当前分支的最新提交，当切换分支时，HEAD会更新为指向新分支的最近提交</td>
</tr>
<tr>
<td style="text-align:center">ORIG_HEAD</td>
<td style="text-align:center">某些操作，例如合并(merge)和复位(reset)，会把调整为新值之前的先前版本的HEAD记录到ORIG_HEAD中。可以使用ORIG_HEAD来恢复或回滚到之前的状态或者做一个比较</td>
</tr>
<tr>
<td style="text-align:center">FETCH_HEAD</td>
<td style="text-align:center">当使用远程库时，git fetch命令将所有抓取分支的头记录到<code>.git/FETCH_HEAD</code>中。FETCH_HEAD是最近抓取的分支HEAD的简写，并且仅在刚刚抓取操作之后才有效。</td>
</tr>
<tr>
<td style="text-align:center">MERGE_HEAD</td>
<td style="text-align:center">当一个合并操作正在进行时，其他分支的头暂时记录在MERGE_HEAD中。换言之，MERGE_HEAD是正在合并进HEAD的提交</td>
</tr>
</tbody>
</table>
<h4 id="4-当版本出现问题时，用于查找版本的工具"><a href="#4-当版本出现问题时，用于查找版本的工具" class="headerlink" title="4. 当版本出现问题时，用于查找版本的工具"></a>4. 当版本出现问题时，用于查找版本的工具</h4><p>操作1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git bisect start 「从干净的工作中启动bisect」</div><div class="line">git bisect bad 「默认当前版本是有问题的版本」</div><div class="line">git bisect good 版本SHA-A值 「设定认为一定没有问题的版本，此时HEAD会跳到**当前版本**和**认为是一定是好的版本的中间**」</div></pre></td></tr></table></figure>
<p>图示1：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/14250483-file_1489822730415_9bf1.png" alt=""></p>
<p>结果1：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/7113223-file_1489822865951_3b76.png" alt=""></p>
<hr>
<p>操作2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git bisect good 「认为版本是好的，HEAD会向前进一个提交的记录，知道找到有问题的版本」</div><div class="line"></div><div class="line">或</div><div class="line"></div><div class="line">git bisect bad 「认为版本是坏的，HEAD会向后退一个提交的记录，知道找到有问题的版本」</div></pre></td></tr></table></figure>
<p>图示2：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/93829162-file_1489823104402_15067.png" alt=""></p>
<p>结果2：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/2013385-file_1489823069103_6c3b.png" alt=""></p>
<h4 id="5-变基提交"><a href="#5-变基提交" class="headerlink" title="5. 变基提交"></a>5. 变基提交</h4><p>什么是变基呢？用一个图来说明：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/46864201-file_1489824210279_245c.png" alt=""></p>
<p>实战：</p>
<p>dev 分支的提交记录</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/62076278-file_1489826998750_1802.png" alt=""></p>
<p>topic 分支的提交记录</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/78783161-file_1489827077268_253f.png" alt=""></p>
<p>所在分支是topic分支，执行变基：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/29230732-file_1489827178578_16545.png" alt=""></p>
<p>变基后topic分支的提交记录：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/60646943-file_1489827247580_2db0.png" alt=""></p>
<p>提示：</p>
<p>执行变基的过程，有很大概率会出现冲突。如果多个开发人员，更改同一文件时，将会出现</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Git版本控制管理 – 王迪 丁彦 译</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Git非常强大，本节主要记录些常用，但之前不知道的技巧；在此之前Git操作基本按照以下这个套路：&lt;/p&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="Git" scheme="http://jianwl.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jianwl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot之下载文件&amp;下载zip文件</title>
    <link href="http://jianwl.com/2017/03/18/SpringBoot%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6-%E4%B8%8B%E8%BD%BDzip%E6%96%87%E4%BB%B6/"/>
    <id>http://jianwl.com/2017/03/18/SpringBoot之下载文件-下载zip文件/</id>
    <published>2017-03-18T04:33:21.000Z</published>
    <updated>2017-03-18T04:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>下载文件这一块之前都没接触过，话不多说直接贴出代码，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-下载文件"><a href="#1-下载文件" class="headerlink" title="1. 下载文件"></a>1. 下载文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/download&quot;,method = RequestMethod.POST)</div><div class="line">public ResponseEntity&lt;InputStreamResource&gt; downloadFile(@RequestParam String gifUrl) throws IOException &#123;</div><div class="line">    InputStream inputStream = new URL(gifUrl).openStream();</div><div class="line">    HttpHeaders headers = new HttpHeaders();</div><div class="line">    headers.add(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</div><div class="line">    headers.add(&quot;Content-Disposition&quot;, String.format(&quot;attachment; filename=\&quot;%s\&quot;.gif&quot;, UUID.randomUUID().toString()));</div><div class="line">    headers.add(&quot;Pragma&quot;, &quot;no-cache&quot;);</div><div class="line">    headers.add(&quot;Expires&quot;, &quot;0&quot;);</div><div class="line"></div><div class="line">    return ResponseEntity</div><div class="line">            .ok()</div><div class="line">            .headers(headers)</div><div class="line">            .contentType(MediaType.parseMediaType(&quot;application/octet-stream&quot;))</div><div class="line">            .body(new InputStreamResource(inputStream));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-下载zip文件"><a href="#2-下载zip文件" class="headerlink" title="2. 下载zip文件"></a>2. 下载zip文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/batch/download&quot;,method = RequestMethod.POST,produces=&quot;application/zip&quot;)</div><div class="line">    public void batchDownload(@RequestParam String gifUrls,HttpServletResponse response) throws IOException &#123;</div><div class="line">        response.setStatus(HttpServletResponse.SC_OK);</div><div class="line">        response.addHeader(&quot;Content-Disposition&quot;,String.format(&quot;attachment; filename=\&quot;%s\&quot;.zip&quot;, UUID.randomUUID().toString()));</div><div class="line"></div><div class="line">        ZipOutputStream zipOutputStream = new ZipOutputStream(response.getOutputStream());</div><div class="line">        List&lt;String&gt; gifs = Arrays.asList(gifUrls.split(&quot;,&quot;));</div><div class="line">        System.out.println(&quot;gifs =&gt; &quot; + gifs.size());</div><div class="line">        if(gifs.size() == 0)&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for(String gif : gifs)&#123;</div><div class="line">            zipOutputStream.putNextEntry(new ZipEntry(UUID.randomUUID().toString().concat(&quot;.gif&quot;)));</div><div class="line">            InputStream inputStream = new URL(gif).openStream();</div><div class="line">            IOUtils.copy(inputStream, zipOutputStream);</div><div class="line">            inputStream.close();</div><div class="line">            zipOutputStream.closeEntry();</div><div class="line">        &#125;</div><div class="line">        zipOutputStream.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;下载文件这一块之前都没接触过，话不多说直接贴出代码，备忘。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;hea
    
    </summary>
    
      <category term="SpringBoot" scheme="http://jianwl.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://jianwl.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之IO</title>
    <link href="http://jianwl.com/2017/03/18/JAVA%E4%B9%8BIO/"/>
    <id>http://jianwl.com/2017/03/18/JAVA之IO/</id>
    <published>2017-03-18T02:02:58.000Z</published>
    <updated>2017-03-18T04:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以来对JAVA IO这一块都很陌生，最近接触的项目涉及到这一块，因为不熟悉所以做起来稍微花了点时间，这一节，主要学习<code>JAVA IO</code>的基础知识点；</p>
<h3 id="本节目标"><a href="#本节目标" class="headerlink" title="本节目标"></a>本节目标</h3><ul>
<li>了解 java.io.File类的主要用途</li>
<li>了解如何使用字节流和字符流</li>
<li>理解如何从文件读取数据和向其中写入数据</li>
</ul>
<h3 id="JAVA-IO基础"><a href="#JAVA-IO基础" class="headerlink" title="JAVA IO基础"></a>JAVA IO基础</h3><h4 id="1-流的概念"><a href="#1-流的概念" class="headerlink" title="1. 流的概念"></a>1. 流的概念</h4><p><code>JAVA</code>中将输入输出抽象成流，流通过输入输出系统与物理设备连接，尽管与他们连接的物理设备不尽相同，所有流的行为具有同样的方式。将数据从外部（包括磁盘文件、键盘、套接字）读入到内存中的流称为输入流，将从内存写入到外部设备（控制台、磁盘文件或网络）的称为输出流。</p>
<h4 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2. 流的分类"></a>2. 流的分类</h4><p>流序列中的数据既可以是未加工的原始二进制数据，也可以是经一定编码处理后符合某种规格的特定数据，因此Java中的流分为两种:</p>
<ul>
<li>字节流(8bits) : 用于读取或写二进制数据</li>
<li>字符流(16bits) : JAVA中的字符是Unicode编码，一个字符占两个字节。</li>
</ul>
<p>提示：</p>
<p>在最底层，所有的输入、输出都是字节形式的，基于字符的流只为处理字符提供方便有效的方法。</p>
<h4 id="3-字节流"><a href="#3-字节流" class="headerlink" title="3. 字节流"></a>3. 字节流</h4><p>字节流的最顶层是两个抽象类：InputStream和OutputStream,其他关于处理字节的类都是他们的子类，这些子类对不同的外设进行处理，例如磁盘、网络连接、甚至是内存缓冲区。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BufferedInputStream</td>
<td style="text-align:center">缓冲输入流</td>
</tr>
<tr>
<td style="text-align:center">BufferedOutputStream</td>
<td style="text-align:center">缓冲输出流</td>
</tr>
<tr>
<td style="text-align:center">ByteArrayInputStream</td>
<td style="text-align:center">从字节数组读取的输入流</td>
</tr>
<tr>
<td style="text-align:center">DataInputStream</td>
<td style="text-align:center">包含读取Java标准数据类型方法的输入流</td>
</tr>
<tr>
<td style="text-align:center">DataOutputStream</td>
<td style="text-align:center">包含编写Java 标准数据类型方法的输出流</td>
</tr>
<tr>
<td style="text-align:center">FileInputStream</td>
<td style="text-align:center">读取文件的输入流</td>
</tr>
<tr>
<td style="text-align:center">FileOutputStream</td>
<td style="text-align:center">写文件的输出流</td>
</tr>
<tr>
<td style="text-align:center">FilterInputStream</td>
<td style="text-align:center">实现 InputStream</td>
</tr>
<tr>
<td style="text-align:center">FilterOutputStream</td>
<td style="text-align:center">实现 OutputStream</td>
</tr>
<tr>
<td style="text-align:center">InputStream</td>
<td style="text-align:center">描述流输入的抽象类</td>
</tr>
<tr>
<td style="text-align:center">OutputStream</td>
<td style="text-align:center">描述流输出的抽象类</td>
</tr>
<tr>
<td style="text-align:center">PipedInputStream</td>
<td style="text-align:center">输入管道</td>
</tr>
<tr>
<td style="text-align:center">PipedOutputStream</td>
<td style="text-align:center">输出管道</td>
</tr>
<tr>
<td style="text-align:center">PrintStream</td>
<td style="text-align:center">包含print( ) 和 println( )的输出流</td>
</tr>
<tr>
<td style="text-align:center">PushbackInputStream</td>
<td style="text-align:center">支持向输入流返回一个字节的单字节的“unget”的输入流</td>
</tr>
<tr>
<td style="text-align:center">RandomAccessFile</td>
<td style="text-align:center">支持随机文件输入/输出</td>
</tr>
<tr>
<td style="text-align:center">SequenceInputStream</td>
<td style="text-align:center">两个或两个以上顺序读取的输入流组成的输入流</td>
</tr>
</tbody>
</table>
<p>抽象类InputStream和OutputStream中定义了实现其他流类的关键方法<code>read()</code>和<code>write</code>，他们分别是对数据的字节进行读写，两种方法都是抽象方法，被子类重载。</p>
<p>文件按字节流的方式拷贝：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class CopyFileByte &#123;</div><div class="line">   public static void main(String args[]) throws IOException</div><div class="line">   &#123;</div><div class="line">      FileInputStream in = null;</div><div class="line">      FileOutputStream out = null;</div><div class="line">      try &#123;</div><div class="line">         in = new FileInputStream(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">         out = new FileOutputStream(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line">         int c;</div><div class="line">         while ((c = in.read()) != -1) &#123;</div><div class="line">            out.write(c);</div><div class="line">         &#125;</div><div class="line">      &#125;finally &#123;</div><div class="line">         if (in != null) &#123;</div><div class="line">            in.close();</div><div class="line">         &#125;</div><div class="line">         if (out != null) &#123;</div><div class="line">            out.close();</div><div class="line">         &#125;</div><div class="line">      &#125; </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/47337851-file_1489806018819_6ceb.png" alt=""></p>
<p>上面使用的是文件名来创建FileInputStream和FileOutputStream，实际上还可以使用文件对象来创建输入输出流，字节流的每次操作都是一个数据单位–字节。<code>input.txt</code>中包含<code>Hello World</code>，那么他将复制完<code>H</code>之后，再复制<code>e</code>接着是<code>l</code>,如此类推直到结束。in.read()每次从输入流中读取一个字节，如果达到文件尾部就返回-1.使用完了，还要关闭这些字节流，调用close方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File inFile = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">File outFile = new File(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line"></div><div class="line">FileInputStream in = new FileInputStream(inFile);</div><div class="line">FileOutputStream out = new FileOutputStream(outFile);</div></pre></td></tr></table></figure>
<h4 id="4-字符流"><a href="#4-字符流" class="headerlink" title="4. 字符流"></a>4. 字符流</h4><p>JAVA是使用16字节来存储字符数据的，涉及到的大多数是字符操作，在程序中使用字符流比字节流更加合适，类似于字节流，字符流的两个顶层抽象类是Reader和Writer，以下是它们的子类处理字符流。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BufferedReader</td>
<td style="text-align:center">缓冲输入字符流</td>
</tr>
<tr>
<td style="text-align:center">BufferedWriter</td>
<td style="text-align:center">缓冲输出字符流</td>
</tr>
<tr>
<td style="text-align:center">CharArrayReader</td>
<td style="text-align:center">从字符数组读取数据的输入流</td>
</tr>
<tr>
<td style="text-align:center">CharArrayWriter</td>
<td style="text-align:center">向字符数组写数据的输出流</td>
</tr>
<tr>
<td style="text-align:center">FileReader</td>
<td style="text-align:center">读取文件的输入流</td>
</tr>
<tr>
<td style="text-align:center">FileWriter</td>
<td style="text-align:center">写文件的输出流</td>
</tr>
<tr>
<td style="text-align:center">FilterReader</td>
<td style="text-align:center">过滤读</td>
</tr>
<tr>
<td style="text-align:center">FilterWriter</td>
<td style="text-align:center">过滤写</td>
</tr>
<tr>
<td style="text-align:center">InputStreamReader</td>
<td style="text-align:center">把字节转换成字符的输入流</td>
</tr>
<tr>
<td style="text-align:center">LineNumberReader</td>
<td style="text-align:center">计算行数的输入流</td>
</tr>
<tr>
<td style="text-align:center">OutputStreamWriter</td>
<td style="text-align:center">把字符转换成字节的输出流</td>
</tr>
<tr>
<td style="text-align:center">PipedReader</td>
<td style="text-align:center">输入管道</td>
</tr>
<tr>
<td style="text-align:center">PipedWriter</td>
<td style="text-align:center">输出管道</td>
</tr>
<tr>
<td style="text-align:center">PrintWriter</td>
<td style="text-align:center">包含print( )和println( )的输出流</td>
</tr>
<tr>
<td style="text-align:center">PushbackReader</td>
<td style="text-align:center">允许字符返回到输入流的输入流</td>
</tr>
<tr>
<td style="text-align:center">StringReader</td>
<td style="text-align:center">读取字符串的输入流</td>
</tr>
<tr>
<td style="text-align:center">StringWriter</td>
<td style="text-align:center">写字符串的输出流</td>
</tr>
<tr>
<td style="text-align:center">Writer</td>
<td style="text-align:center">描述字符流输出的抽象类</td>
</tr>
<tr>
<td style="text-align:center">Reader</td>
<td style="text-align:center">描述字符流输入的抽象类</td>
</tr>
</tbody>
</table>
<p>类似于字节，字符的抽象类Reader和Writer中也定义了关键方法<code>read()</code>和<code>writer()</code>，它们分别对字符进行读写，两种方法也都是抽象方法，被子类重载；</p>
<p>文件按字符流的方式拷贝</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">//Character streams are used to perform input and output for 16-bit unicode</div><div class="line">public class CopyFileCharacter &#123;</div><div class="line">   public static void main(String args[]) throws IOException</div><div class="line">   &#123;</div><div class="line">      FileReader in = null;</div><div class="line">      FileWriter out = null;</div><div class="line">      try &#123;</div><div class="line">         in = new FileReader(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">         out = new FileWriter(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line"></div><div class="line">         int c;</div><div class="line">         while ((c = in.read()) != -1) &#123;</div><div class="line">            out.write(c);</div><div class="line">         &#125;</div><div class="line">      &#125;finally &#123;</div><div class="line">         if (in != null) &#123;</div><div class="line">            in.close();</div><div class="line">         &#125;</div><div class="line">         if (out != null) &#123;</div><div class="line">            out.close();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/88832472-file_1489808155695_709d.png" alt=""></p>
<p>与字节流例子对比，只有声明的I/O流的类名不同，这里使用的FileReader和FileWriter，他们操作的最小单位是一个字符(16bits)，而FileInputStream和FileOutputStream最小单位则是一个字节(8bits)</p>
<h3 id="JAVA自定义的标准流"><a href="#JAVA自定义的标准流" class="headerlink" title="JAVA自定义的标准流"></a>JAVA自定义的标准流</h3><p>标准输入流<code>System.in</code>读取标准输入设备数据，例如键盘输入(默认)，其类型是InputStream，三个重要的读入方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int read() 从输入流中读取数据的下一个字节，返回ASCLL码，若返回值==-1，说明没有读取到任何字节，读取工作结束</div><div class="line">int read(byte[] b)  从输入流中读取一定数量的字节，并将这些数据存储到缓冲区数据b中</div><div class="line">int read(byte[] b,int off,int len) 将输入流中最多len个字节读入到字节数组b中</div></pre></td></tr></table></figure>
<p>标准输入流<code>System.out</code>向标准的输出设备写入数据，默认情况下指控制台，其类型是<code>PrintStream</code>，包含两个重要的方法：print()、println()</p>
<p>标准错误流<code>System.err</code>默认也是控制台，类型和<code>System.out</code>相同说<code>PrintStream</code></p>
<p>提示：</p>
<p>这些流都有默认的设备，但它们可以重定向到任何兼容的输入/输出设备。</p>
<h3 id="控制台的输入和输出"><a href="#控制台的输入和输出" class="headerlink" title="控制台的输入和输出"></a>控制台的输入和输出</h3><p>控制台的输入和输出是由System.in和System.out来完成的，目前，读取控制台的输入输出的首选方法的是字符流，但完成控制台输入的唯一方法是字节流，因而java提供了InputStreamReader和OutputStreamWriter将字节流转化为字符流，BufferedReader是缓冲输入字符流，正如我们在例子中看到的，Java允许使用<code>System.out</code>向控制台写数据，但在实际项目中，推荐使用PrintWriter，他是基于字符的；</p>
<p>控制台输入字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">public class ConsoleInOut&#123;</div><div class="line">    public static void main(String args[])throws IOException&#123;</div><div class="line">           char c;</div><div class="line">            InputStreamReader isr = new InputStreamReader(System.in); //①</div><div class="line">            BufferedReader br = new BufferedReader(isr); //②</div><div class="line">            System.out.println(&quot;Enter characters, &apos;q&apos; to exit.&quot;);</div><div class="line">            c=(char)br.read();</div><div class="line">            while(c != &apos;q&apos;)&#123;</div><div class="line">                System.out.println(c);</div><div class="line">                c = (char) br.read();                </div><div class="line">            &#125; ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/55041445-file_1489809083755_c258.png" alt=""></p>
<p>①和②两行创建了一个与键盘相连的BufferedReader对象，这里使用read()方法来读取字符，当到达流的末尾时返回-1，输出q退出程序，输出使用的是println()方法，每次输出后都会换行。</p>
<h3 id="文件的输入和输出"><a href="#文件的输入和输出" class="headerlink" title="文件的输入和输出"></a>文件的输入和输出</h3><p>文件File位于<code>java.io</code>包中，用于描述文件和目录的操作，创建文件对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File file = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;)</div></pre></td></tr></table></figure>
<p>File相关的方法如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">exists()</td>
<td style="text-align:center">判断文件或目录是否存在</td>
</tr>
<tr>
<td style="text-align:center">mkdir()</td>
<td style="text-align:center">创建目录</td>
</tr>
<tr>
<td style="text-align:center">createNewFile()</td>
<td style="text-align:center">创建文件</td>
</tr>
<tr>
<td style="text-align:center">isFile()/isDirectory()</td>
<td style="text-align:center">判断是文件还是目录</td>
</tr>
<tr>
<td style="text-align:center">delete()</td>
<td style="text-align:center">删除文件</td>
</tr>
<tr>
<td style="text-align:center">getPath()</td>
<td style="text-align:center">获取文件或者目录的路径</td>
</tr>
<tr>
<td style="text-align:center">list()</td>
<td style="text-align:center">将目录中所有文件名保存在字符串数组中返回</td>
</tr>
</tbody>
</table>
<p>文件相关的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">public class TestAbstract &#123;  </div><div class="line">    public static void main(String args[]) throws IOException &#123;  </div><div class="line">        File file1 = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">        if (!file1.exists())</div><div class="line">            file1.createNewFile();  </div><div class="line">        System.out.println(&quot;file1&apos;s AbsolutePath=  &quot; + file1.getAbsolutePath());</div><div class="line">        System.out.println(&quot;file1 can read=&quot; + file1.canRead());</div><div class="line">        System.out.println(&quot;file1&apos;s len= &quot; + file1.length());  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/29701927-file_1489810785272_10b66.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://zhuanlan.zhihu.com/p/21444494" target="_blank" rel="external">JAVA IO输入、输出</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-perry-io/index.html" target="_blank" rel="external">IBM:IO</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/io/streams.html" target="_blank" rel="external">IO官方教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一直以来对JAVA IO这一块都很陌生，最近接触的项目涉及到这一块，因为不熟悉所以做起来稍微花了点时间，这一节，主要学习&lt;code&gt;JAVA
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Maven依赖的有效范围</title>
    <link href="http://jianwl.com/2017/03/16/Maven%E4%BE%9D%E8%B5%96%E7%9A%84%E6%9C%89%E6%95%88%E8%8C%83%E5%9B%B4/"/>
    <id>http://jianwl.com/2017/03/16/Maven依赖的有效范围/</id>
    <published>2017-03-16T15:14:48.000Z</published>
    <updated>2017-03-16T15:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Maven项目中某些依赖，只需要在编译阶段有效，运行时不需要该依赖，该如何配置？之前对依赖的有效范围的配置理解的很模糊，这一节主要来学习Maven依赖的有效范围配置。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>声明一个依赖可以包含以下元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">	&lt;type&gt;jar&lt;/type&gt;</div><div class="line">	&lt;optional&gt;true&lt;/optional&gt;</div><div class="line">	&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">	&lt;exclusions&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">	&lt;/exclusions&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>groupId、artifactId、version：依赖的基本坐标</p>
<p>type: 依赖的类型</p>
<p>optional:标记依赖是否可选</p>
<p>exclusions: 用来排除传递性依赖</p>
<p>scope: 依赖的有效范围</p>
<table>
<thead>
<tr>
<th style="text-align:center">依赖范围</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">compile</td>
<td style="text-align:center">没有指定默认依赖范围，对于编译、测试、运行三种classpath都有效</td>
<td style="text-align:center">大部分依赖</td>
</tr>
<tr>
<td style="text-align:center">test</td>
<td style="text-align:center">只对测试classpath有效</td>
<td style="text-align:center">测试依赖</td>
</tr>
<tr>
<td style="text-align:center">provided</td>
<td style="text-align:center">对于编译和测试classpath均有效，运行时无效</td>
<td style="text-align:center">servlet-api，编译和测试项目时需要该依赖，运行时无效，因为运行时容器已提供该依赖</td>
</tr>
<tr>
<td style="text-align:center">runtime</td>
<td style="text-align:center">对测试和运行classpath有效，编译主代码时无效</td>
<td style="text-align:center">JDBC驱动实现，项目主代码的编译主需要JDK提供的接口，只有在测试或者运行时才需要实现上述接口的具体JDBC驱动</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Maven实战</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Maven项目中某些依赖，只需要在编译阶段有效，运行时不需要该依赖，该如何配置？之前对依赖的有效范围的配置理解的很模糊，这一节主要来学习Ma
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本基本功</title>
    <link href="http://jianwl.com/2017/03/15/Shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    <id>http://jianwl.com/2017/03/15/Shell脚本基本功/</id>
    <published>2017-03-15T15:49:16.000Z</published>
    <updated>2017-03-16T03:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要介绍Shell常用的命令和语法，这个章节会持续更新，<a href="http://git.oschina.net/shuangziliuyun/shell" target="_blank" rel="external">本节练习脚本请查看GIT</a></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-数值比较"><a href="#1-数值比较" class="headerlink" title="1. 数值比较"></a>1. 数值比较</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/94282744-file_1489584983851_14e8a.png" alt=""></p>
<p>数字比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>n1 -eq n2</td>
<td>n1是否与n2相等</td>
</tr>
<tr>
<td>n1 -ge n2</td>
<td>n1是否大于或等于n2</td>
</tr>
<tr>
<td>n1 -gt n2</td>
<td>n1是否大于n2</td>
</tr>
<tr>
<td>n1 -le n2</td>
<td>n1是否小于或等于n2</td>
</tr>
<tr>
<td>n1 -lt n2</td>
<td>n1是否小于n2</td>
</tr>
<tr>
<td>n1 -ne n2</td>
<td>n1是否不等于n2</td>
</tr>
</tbody>
</table>
<p>字符串比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>str1 = str2</td>
<td>str1和str2相同</td>
</tr>
<tr>
<td>str1 != str2</td>
<td>str1和str2不相等</td>
</tr>
<tr>
<td>str1 &lt; str2</td>
<td>str1是否比str2小</td>
</tr>
<tr>
<td>str1 &gt; str2</td>
<td>str1是否比str2大</td>
</tr>
<tr>
<td>-n str1</td>
<td>str1的长度是否非0</td>
</tr>
<tr>
<td>-z str1</td>
<td>str2的长度是否为0</td>
</tr>
</tbody>
</table>
<h4 id="2-文件比较"><a href="#2-文件比较" class="headerlink" title="2. 文件比较"></a>2. 文件比较</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/5842677-file_1489586826777_16d8c.png" alt=""></p>
<p>文件比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d file</td>
<td>file是否存在并是一个目录</td>
</tr>
<tr>
<td>-e file</td>
<td>file是否存在</td>
</tr>
<tr>
<td>-f file</td>
<td>file是否存在并是个文件</td>
</tr>
<tr>
<td>-r file</td>
<td>file是否存在并可读</td>
</tr>
<tr>
<td>-s file</td>
<td>file是否存在并非空</td>
</tr>
<tr>
<td>-w file</td>
<td>file是否存在并可写</td>
</tr>
<tr>
<td>-x file</td>
<td>file是否存在并可执行</td>
</tr>
<tr>
<td>-O file</td>
<td>file是否存在并属当前用户所有</td>
</tr>
<tr>
<td>-G file</td>
<td>file是否存在并且默认组与当前用户相同</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>file1是否比file2新</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>file1是否比file2旧</td>
</tr>
</tbody>
</table>
<h4 id="3-for命令"><a href="#3-for命令" class="headerlink" title="3. for命令"></a>3. for命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/79683869-file_1489587635186_1b43.png" alt=""></p>
<h4 id="4-修改分割符"><a href="#4-修改分割符" class="headerlink" title="4. 修改分割符"></a>4. 修改分割符</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/21867516-file_1489588386921_5740.png" alt=""></p>
<table>
<thead>
<tr>
<th>分割符设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>IFS=<code>$&#39;\n&#39;</code></td>
<td>设置换行符为分隔符</td>
</tr>
<tr>
<td>IFS=<code>$&#39;\n:;&quot;&#39;</code></td>
<td>设置换行符、冒号、分好、双引号为分隔符</td>
</tr>
</tbody>
</table>
<h4 id="5-while命令"><a href="#5-while命令" class="headerlink" title="5. while命令"></a>5. while命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/34656202-file_1489588951940_12c28.png" alt=""></p>
<h4 id="6-continue命令"><a href="#6-continue命令" class="headerlink" title="6. continue命令"></a>6. continue命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/19067708-file_1489589502995_10596.png" alt=""></p>
<h4 id="7-case命令"><a href="#7-case命令" class="headerlink" title="7. case命令"></a>7. case命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/50152327-file_1489591476267_3699.png" alt=""></p>
<h4 id="8-创建函数"><a href="#8-创建函数" class="headerlink" title="8. 创建函数"></a>8. 创建函数</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/31595596-file_1489590492602_f1cf.png" alt=""></p>
<p>bash shell会把函数当做小型脚本，运行结束时会返回一个退出状态码,用<code>$?</code>判断程序的运行状态。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>命令成功结束 </td>
</tr>
<tr>
<td>1</td>
<td>通用未知错误</td>
</tr>
<tr>
<td>2</td>
<td>误用shell命令</td>
</tr>
<tr>
<td>126</td>
<td>命令不可执行</td>
</tr>
</tbody>
</table>
<p>…</p>
<h4 id="9、特殊参数变量"><a href="#9、特殊参数变量" class="headerlink" title="9、特殊参数变量"></a>9、特殊参数变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`$0` 读取程序名</div><div class="line">`$#` 命令行参数个数</div><div class="line">`$&#123;!#&#125;` 最后一个参数值</div><div class="line">`$*` 单个变量中存储所有的命令行参数</div><div class="line">`$@` 单个变量中存储所有的命令行参数</div></pre></td></tr></table></figure>
<p> <code>params.sh</code></p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/19213513-file_1489592788517_3396.png" alt=""></p>
<p> 运行：</p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/3625461-file_1489592376768_13f93.png" alt=""></p>
<p> 特别注意：<code>“$*”</code>变量会将所有参数当做单个参数，<code>“$@”</code>会单独处理每个参数;而<code>$*</code>变量和<code>$@</code>变量均会将所有参数当做单个参数。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.Linux命令行与Shell脚本编程大全</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本节主要介绍Shell常用的命令和语法，这个章节会持续更新，&lt;a href=&quot;http://git.oschina.net/shuangzi
    
    </summary>
    
      <category term="Shell" scheme="http://jianwl.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://jianwl.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Python操作MYSQL数据库</title>
    <link href="http://jianwl.com/2017/03/12/Python%E6%93%8D%E4%BD%9CMYSQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://jianwl.com/2017/03/12/Python操作MYSQL数据库/</id>
    <published>2017-03-12T15:20:55.000Z</published>
    <updated>2017-03-12T15:33:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Python操作MySQL数据库是入门必须要掌握的技能，这节主要学习Python对MYSQL的增删改查操作。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装Python-MySQL</div><div class="line">pip install MySQL-python</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>mysql_test.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"># -*- coding: UTF-8 -*-</div><div class="line"></div><div class="line">import MySQLdb</div><div class="line"></div><div class="line"></div><div class="line">def init_db():</div><div class="line">    return MySQLdb.connect(&quot;localhost&quot;, &quot;root&quot;, &apos;&apos;, &quot;dada&quot;)</div><div class="line"></div><div class="line"></div><div class="line">def create(db):</div><div class="line">    print &quot;========= create start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;&quot;&quot;CREATE TABLE EMPLOYEE (</div><div class="line">                     FIRST_NAME  CHAR(20) NOT NULL,</div><div class="line">                     LAST_NAME  CHAR(20),</div><div class="line">                     AGE INT,</div><div class="line">                     SEX CHAR(1),</div><div class="line">                     INCOME FLOAT )&quot;&quot;&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        print &quot;========= create end==========&quot;</div><div class="line">    except:</div><div class="line">        print &quot;Error: unable to create table&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def select(db):</div><div class="line">    cursor = db.cursor()</div><div class="line">    sql = &quot;SELECT * FROM EMPLOYEE \</div><div class="line">           WHERE INCOME &gt; &apos;%d&apos;&quot; % (1000)</div><div class="line"></div><div class="line">    try:</div><div class="line">        print &quot;========= select start==========&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        results = cursor.fetchall()</div><div class="line">        for row in results:</div><div class="line">            fname = row[0]</div><div class="line">            lname = row[1]</div><div class="line">            age = row[2]</div><div class="line">            sex = row[3]</div><div class="line">            income = row[4]</div><div class="line">            # 打印结果</div><div class="line">            print &quot;fname=%s,lname=%s,age=%d,sex=%s,income=%d&quot; % \</div><div class="line">                  (fname, lname, age, sex, income)</div><div class="line">        print &quot;========= select end==========&quot;</div><div class="line"></div><div class="line">    except:</div><div class="line">        print &quot;Error: unable to fecth data&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def save(db):</div><div class="line">    print &quot;========= save start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">    	 # 三引号可输入多行文本</div><div class="line">        sql = &quot;&quot;&quot;INSERT INTO EMPLOYEE(FIRST_NAME,</div><div class="line">         LAST_NAME, AGE, SEX, INCOME)</div><div class="line">         VALUES (&apos;Mac&apos;, &apos;Mohan&apos;, 20, &apos;M&apos;, 2000)&quot;&quot;&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= save end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def update(db):</div><div class="line">    print &quot;========= update start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = &apos;%c&apos;&quot; % (&apos;M&apos;)</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= update end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line">def delete(db):</div><div class="line">    print &quot;========= delete start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;DELETE FROM EMPLOYEE WHERE AGE &gt; &apos;%d&apos;&quot; % (20)</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= delete end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    # 初始化db</div><div class="line">    db = init_db()</div><div class="line"></div><div class="line">    # 保存一条记录</div><div class="line">    save(db)</div><div class="line"></div><div class="line">    # 查看记录</div><div class="line">    select(db)</div><div class="line"></div><div class="line">    # 修改记录</div><div class="line">    update(db)</div><div class="line"></div><div class="line">    # 查看修改后的记录</div><div class="line">    select(db)</div><div class="line"></div><div class="line">    # 删除记录</div><div class="line">    delete(db)</div><div class="line"></div><div class="line">    # 查看删除后的记录</div><div class="line">    select(db)</div></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python mysql_test.py</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/23315645-file_1489332690876_12b7e.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Python操作MySQL数据库是入门必须要掌握的技能，这节主要学习Python对MYSQL的增删改查操作。&lt;/p&gt;
&lt;h3 id=&quot;环境准
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
</feed>
