<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2017-05-21T02:22:21.000Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式系统的基础知识</title>
    <link href="http://jianwl.com/2017/05/21/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://jianwl.com/2017/05/21/分布式系统的基础知识/</id>
    <published>2017-05-21T01:21:40.000Z</published>
    <updated>2017-05-21T02:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-用户访问网站"><a href="#1-用户访问网站" class="headerlink" title="1. 用户访问网站"></a>1. 用户访问网站</h3><h4 id="1）-用户访问单台服务器的场景"><a href="#1）-用户访问单台服务器的场景" class="headerlink" title="1） 用户访问单台服务器的场景"></a>1） 用户访问单台服务器的场景</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/35909323-file_1495331531540_101c3.png" alt=""></p>
<p>随着压力增大，我们需要变为多台服务器，例如从一台变为两台。两台服务器一起完成工作，这里面就有一个问题，用户应该去访问哪个服务器呢？</p>
<h4 id="2）用户访问集群服务器的场景-一"><a href="#2）用户访问集群服务器的场景-一" class="headerlink" title="2）用户访问集群服务器的场景(一)"></a>2）用户访问集群服务器的场景(一)</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/34398153-file_1495331435274_126a5.png" alt=""></p>
<p>通过DNS服务器进行调度和控制，在用户解析DNS的时候，就会被给予一个服务器的地址，中间没有代理设备，用户能直接知道提供服务的服务器地址。</p>
<h4 id="3）用户访问集群服务器的场景-二"><a href="#3）用户访问集群服务器的场景-二" class="headerlink" title="3）用户访问集群服务器的场景(二)"></a>3）用户访问集群服务器的场景(二)</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/54140669-file_1495331354090_1306.png" alt=""></p>
<p>在用户和网站服务器中间增加了负载均衡设备（纯硬件或者LVS等软件都可以）。DNS返回的永远是负载均衡的地址，而用户的访问都是通过负载均衡达到后面的网站服务器的。</p>
<h3 id="2-日志的处理"><a href="#2-日志的处理" class="headerlink" title="2. 日志的处理"></a>2. 日志的处理</h3><h4 id="1）单日志处理器"><a href="#1）单日志处理器" class="headerlink" title="1）单日志处理器"></a>1）单日志处理器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/11945650-file_1495332619288_15a0c.png" alt=""></p>
<p>用一台日志处理器从3台服务器上收集日志并处理，随着应用服务器的增多，单台日志处理服务器一定会遇到问题，那么，我们可以通过增加日志处理服务器的数量来提升处理日志的能力。</p>
<h4 id="2-使用Master控制日志处理服务器集群"><a href="#2-使用Master控制日志处理服务器集群" class="headerlink" title="2) 使用Master控制日志处理服务器集群"></a>2) 使用Master控制日志处理服务器集群</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/641019-file_1495333108869_a18.png" alt=""></p>
<p>使用Master + Worker方式的控制器来处理日志</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>大型网站系统与Java中间件实践 by 曾宪杰</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-用户访问网站&quot;&gt;&lt;a href=&quot;#1-用户访问网站&quot; class=&quot;headerlink&quot; title=&quot;1. 用户访问网站&quot;&gt;&lt;/a&gt;1. 用户访问网站&lt;/h3&gt;&lt;h4 id=&quot;1）-用户访问单台服务器的场景&quot;&gt;&lt;a href=&quot;#1）-用户访问单台服务器
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>在工作的前三年里快速成长</title>
    <link href="http://jianwl.com/2017/05/17/%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%89%8D%E4%B8%89%E5%B9%B4%E9%87%8C%E5%BF%AB%E9%80%9F%E6%88%90%E9%95%BF/"/>
    <id>http://jianwl.com/2017/05/17/在工作的前三年里快速成长/</id>
    <published>2017-05-17T12:19:24.000Z</published>
    <updated>2017-05-17T15:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>有人可以靠中彩票，然后一夜暴富；有人随随便便发几张自拍，就一不小心一夜成名。可技术成长，要一步一个脚印地练习，才能掌握某项特定技术。等到我们掌握了学习的技巧，才能用更短的时间，来掌握某项特定的技术。</p>
<p>而练习也不是<strong>一天里写一万行代码</strong>，也不是<strong>重复写一百行代码</strong>，而是在<strong>一百天里，每天写下一百行代码。</strong>它需要一定的技巧，不懈的坚持，还有一些休息。因此在这篇文章里，我将分享几年里的练习技巧：</p>
<ul>
<li>基础篇：正确的练习姿势，从程序员的基本技能：盲打，到练习使用快捷键、重构技能等，再到如何使用新的框架练习。</li>
<li>进阶篇：如何通过练习提高。初学时，我们可以使用Vue、React去高仿一些项目；有经验以后，高仿应用只会让我们更累。我们便需要一些更高级的技巧，从引入别的框架思想，到造各式各样的轮子。</li>
<li>找到合适的时间练习，早上，慢慢进入状态；中午，适合做一些Review；碎片时间，可以做一些知识的管理等等。</li>
<li>怎样才能持之以恒下去，分享一些特定目标的技巧，及激励自己的方式。</li>
</ul>
<p>当然，练习有一个大前提是：<strong>我们有充足的时间。</strong>时间是一种很珍惜的资源，特别是对于长期加班的开发人员来说。因为<strong>技术能力不足导致的加班，</strong>会变成恶性循环。</p>
<p>如果你还没工作，那么便相当的幸运，你有相当多的时间。工作的时候，大家都忙于实现业务时候，没有时间让你提升自己，如果你已经工作了，那么你需要每天预留一些时间，才有机会联系。每天会占用一些游戏、看电视时间，哪怕只是半个小时、一周、一个月、一年下来，帮助就很大了。</p>
<p>进行这些练习之前，请不要忘了根本 – <strong>能熟练地用框架、语言完成工作。</strong>完成工作，相当于必须达到的60分及格要求，在胜任工作之外，提高能力到80、90分，追求更好的技术能力，才是正确的路线。</p>
<p>下面，让我们开始第一部分的内容吧。</p>
<h3 id="基础篇：正确的练习姿势"><a href="#基础篇：正确的练习姿势" class="headerlink" title="基础篇：正确的练习姿势"></a>基础篇：正确的练习姿势</h3><p>编程的时候，我们只是在码字 – 编程的过程(即思路)实际上是在脑子里完成的，娴熟的码字能力，可以帮助我们更好地编程。</p>
<p>小学时，自参加了五笔打字比赛后，便开启了我的编程生涯。可当工作的时候，已经可以熟练的完成工作的我，仍然无法打对每一个字符。有一天，看到了一个名为Typing的在线打字练习工具，练习了一次之后，发现它会给出一些建议，便开始进行了一些编码练习。但是得到的反馈能表名，在打字这方面，仍然有一些提升的空间：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-17/57142401-file_1495025245549_10d78.png" alt=""></p>
<p>我的“自我解释”是：<strong>今天的编程语言设计得不合理</strong> – 使用了各种字符，导致了右手在这方面的负担比较大。在那之后，我便陆续进行了一些基础的练习，并整理他们的因果关系，便有了下面的一些练习项目：</p>
<ul>
<li>作为经常用电脑的人，应当掌握好打字的基本技巧，比如说采用正确的打字姿势，以及盲打技能。</li>
<li>作为一个程序员，应当精通使用手上各式IDE，编辑器，熟练使用它们的快捷键</li>
<li>作为一个专业的程序员，我们还要将重构代码，命名等高级的技巧掌握好。</li>
</ul>
<p>这些练习，可以让我们成长为一个更专业的程序员。</p>
<h4 id="语言与框架的练习"><a href="#语言与框架的练习" class="headerlink" title="语言与框架的练习"></a>语言与框架的练习</h4><p>对于语言与框架的练习，算是比较简单的，于我而言，这种练习过程便是：</p>
<ol>
<li>买本相关书籍，或者寻找份教程、官方指南。</li>
<li>再找个合适的Demo，熟悉基础概念，并掌握好相关基础。</li>
<li>在Demo的基础上，实现一些业务功能，了解各种功能、特性。</li>
<li>查看官方文档，查有没有漏掉了什么重要的东西。</li>
<li>写博客、日志来记录这个过程。</li>
</ol>
<p>因此，只需要找一个合适的网站、APP作为模仿的对象，一步步往下练习即可。唯一的难点在于，第一次写Web应用的时候，可能会花费更多的时间，新手期的程序员，对很多的概念都不清楚，如若能找到一个新手社区、群体，提高起来就会方便多了。</p>
<p>熟练使用语言或者框架，不能帮助我们成为一个「优秀」的成员。只能带领我们成为一个“胜任”的程序员，即我们可以凭借着这种练习，找到一份养家糊口的工作。</p>
<h4 id="模仿开源软件"><a href="#模仿开源软件" class="headerlink" title="模仿开源软件"></a>模仿开源软件</h4><p>工作的时候，写的都是业务代码，纯技术的实践并不多，这意味着，<strong>多年的工作经验，与技术能力的关系并无太大关联</strong>。如果有一天，我们看到几年前写的代码和今天写的代码并没有太大的区别，那么说明了：我们已经陷入了这样的一个瓶颈。</p>
<p>在学校写的代码，与工作写的代码，最大的区别在于：<strong>软件工程实践</strong>。单单凭借工作经验，那么在软件工程实践的提高可能不会太大。受限于上线deadline的影响，多数项目的软件工程实践，并不能做到最好，甚至可能很差劲。如我们所见，国内的大部分公司(包括BAT)在这方面的实践也很难做全。这些实践包括：</p>
<ul>
<li>使用版本管理，诸如Github上的项目采用的Git，基本已经普及；</li>
<li>使用持续集成，它可以为团队协作，提供一个可靠的帮助。</li>
<li>完整的测试用例，编写单元测试、功能测试等待</li>
<li>代码检视，用于提高整个项目的质量</li>
</ul>
<p>而对于一个优秀的开源软件来说，为了保证好项目的质量，拥有者往往付出了很多的精力，在提高软件工程的实践上，因此，对于软件工程来说，最好的练习，便是模仿开源软件，并自己去创造一些轮子。以React为例，其在首页拥有下面的几个徽章(bage):</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-17/36438562-file_1495026815302_19d9.png" alt=""></p>
<p>分别是：</p>
<ol>
<li>Circle CI,即持续集成、诸如测试是否都通过、部署是否成功等。</li>
<li>Travis CI，同上。</li>
<li>Coverage，代码的测试覆盖率，81%</li>
<li>npm, 当前版本号</li>
<li>PRs welcome,即欢迎来Pull Request</li>
</ol>
<p>那么，我们在实践的时候，就可以模仿这样的项目组成，一步步往下实践：</p>
<ol>
<li>为项目添加测试框架、如Java里的Junit，Node.js里的Mocha等</li>
<li>添加自动化测试脚本，如Java里的Gradle，Node.js里的Grunt、Gulp、NPM等</li>
<li>添加测试覆盖率工具</li>
<li>添加持续集成，如Travi CI或者Circle CI</li>
<li>添加代码质量分析工具，如Code Climate</li>
<li>指定目标，并完成。</li>
</ol>
<p>最难的实际上是最后一步，指定一个目标并实现。它可以是测试覆盖率要达到90%以上，这就需要一步步来完成，如先将目标放到60%，再慢慢地网上提升，知道90%，甚至100%，在这个过程中，会不断地原道一些挑战，如<strong>难以测试的代码，为了编写测试而修改功能代码等。</strong>但是，它能确确实实地帮助我们提高工程能力。</p>
<h4 id="基础练习：从码字到盲打"><a href="#基础练习：从码字到盲打" class="headerlink" title="基础练习：从码字到盲打"></a>基础练习：从码字到盲打</h4><p>编码的时候，如果我们心里想输入的是一个print，结果打下的字符是oront，那么我们就需要删了重来，又或者是小心翼翼地，边看键盘边输入一个个字符。虽说，编码只是一个打字的过程，但是很多时候，经常出现的错字会中断我们的思路。因此，盲打应该成为程序员的基本技能，而这里的盲打，指的并不是我们可以闭上眼睛打字聊天，而是可以完成编码工作，即能盲打下26个字母，以及各种字符，还有各种功能键。</p>
<p>而在进行这一类练习的时候，<strong>我们经常会遇到一个障碍：度量</strong>。即以某种方式来衡量练习的成果，我们做了很多的练习来提高自己，但是没有数据来支撑。它不像编码，我们写了几行代码，完成了一个功能，那么写下的这些代码的价值就是可以衡量的。因而练习的时候，我们可以寻找一些适合的工具，如Typing.io，Keybr.com这一类工具，如果Typing使用的是真实的代码片段，它能帮我们发现真实场景下：我们容易打错哪些字，容易按错哪些键，我们打字的速度是多少等等的内容。</p>
<p>对于<strong>可以衡量</strong>的打字速度，我们可以定下每天十几分钟的时间，一段时间要提升到什么水平的目标，这样它变能满足<strong>SMART原则</strong>，就能让我们看到我们在这段时间内的提升。</p>
<p>当时，我拿Typing练习的时候，差不多练习了一个月，每天大概半小时左右，因为打字速度比较快，所以容易出错，所以便将注意力放在减少错误上，而对于有些人来说，则是相反的，即打字速度比较慢，但是准确率比较高，而这个练习的主要目的是，能够熟练地做到盲打，不让它影响我们的效率。</p>
<p>掌握了熟练开关机、键盘上的各种按键后，我们就在使用工具上做一个效率的提升。</p>
<h4 id="基础练习：掌握开发工具"><a href="#基础练习：掌握开发工具" class="headerlink" title="基础练习：掌握开发工具"></a>基础练习：掌握开发工具</h4><p>刚工作的时候，发现每个有经验的程序员，几乎可以不用鼠标编程。熟练的使用各种快捷键，进行代码重构、打开新页面、开启新窗口等操作。慢慢的，我觉得自己再这方面上有相当大的提升空间。</p>
<p>这意味着，我要学习、探索开发工具的功能，也要能使用快捷键来控制。尽管在日常结对编程、代码检视、交流的时候，可以请从别人身上学习，但是理想的方式，还是自己去练习。</p>
<p>对于大部分的开发工具，他们都有对应的手册，Keymap或者cheatsheet,即”作弊表”。</p>
<p>需要注意的是：对于开发工具而言，没有必要掌握所有的快捷键，而是只掌握常用的功能，我曾陷入了一个误区，练习使用快捷键的时候，边练习一些重构的技巧，同时也花费时间在联系一些「屠龙之术」上 – 一些非常少用的功能，除了炫耀，也没有什么用，时间一久，我便忘了很多的快捷键。再举些例子：如Vim、对我而言，一般用于服务器维护及Git修改。因此，主要使用的功能辨识：快速地改几个字符，更新配置，保存并退出。如Chrome浏览器，在日常使用时，配合下Vim插件，便不需要鼠标，在进行前端开发的时候，便需要使用鼠标来调试。</p>
<p>对于大部分的工具来说，我们只需要一个CheatSheet，复杂的工具，如Vim,Emacs，则需要一本更专业的数。他们是高度可定制的，这也意味着我们需要一步步的定制这些工具，寻找合适的插件，自定义快捷键，又或者是使用别人的配置。而要衡量快捷键使用方面的提升，目前还没有看到有效的度量工具。如果有的话，那么就是编码的时候，使用鼠标的频率，因此，在某些特定的时候，可以通过禁用鼠标来提升自己在这方面的能力。</p>
<h3 id="进阶篇：如何通过练习来提高"><a href="#进阶篇：如何通过练习来提高" class="headerlink" title="进阶篇：如何通过练习来提高"></a>进阶篇：如何通过练习来提高</h3><p>尽管我在上面指出，学习新框架的最好姿势是：基于现有的业务来学习，即从工作中学习，从做中学。但是，如果一直<strong>只使用</strong>新的框架来重写旧的业务，那么你的成长就会趋于0.第一次，使用新框架时收获可能颇丰；第二次，收获的东西就更少了；第三次，你可能就学不到东西。</p>
<p>因此，在业余的练习时间里，不要一直练习新的框架，不要再拿Vue、ReactNative去高仿一些应用。<strong>当且仅当，你所处的项目正在使用新的框架，</strong>这种练习才是有意义的。</p>
<p>经过上面的练习，我们提高了我们的工作效率。同时，在别人的眼里，我们更像是一个专业的程序员，在这之上，我们还需要提高顶层的能力。下面介绍的是，我尝试过的一些，比较有效果的提升方法：</p>
<ul>
<li>阅读开源软件与重构代码</li>
<li>造自己的轮子来重写应用</li>
<li>结合设计模式</li>
<li>引入其他领域的思想</li>
</ul>
<p>总的来说，收获还是蛮多的，特别是造轮子，能有更大的提升。与其他的练习稍有不同的是，因为设计到代码设计，这里的练习有些难以衡量。这时候，我们应该是保持着<strong>练习的心态</strong>，并意识到我们是做这方面的练习。</p>
<h4 id="阅读开源软件与重构代码"><a href="#阅读开源软件与重构代码" class="headerlink" title="阅读开源软件与重构代码"></a>阅读开源软件与重构代码</h4><p>如果在工作环境中，没有代码写的比较好的人，那么我们就只能从开源代码中去学习。笔者之前写过一篇「如何以“正确的姿势”阅读开源软件代码」的文章，文中我建议的阅读开源软件代码的方式是：</p>
<ul>
<li>clone某个项目的代码到本地</li>
<li>查看这个项目的release列表</li>
<li>找到一个看得懂的release版本，如1.0或者更早的版本。</li>
<li>读懂上一个版本的代码</li>
<li>向后阅读大版本的源码</li>
<li>读最新的源码</li>
</ul>
<p>可只读这些代码，不能让我们显著的提高水平，我们应该结合「重构」这个技能来练习。从我的练习经验来看，<strong>对于重构的练习是最有意思的</strong>我们可以见证，一段不好的代码在我们的调教之下，焕发出新的光彩。当我们重构一段坏味道的代码，对比重构前后的代码，便会发现自己竟然有这样的神奇的能力。</p>
<p>如果找不到合适的练习项目，可以到Github上找一些star多，但是没有测试，缺少CI等的项目练习，这样的项目在Github上也是蛮多的。</p>
<p>有一次，我在寻找一个迷你的Markdown解析器，看到Github上有一个精巧的实现。它有100+的star，但是没有测试，四百行的代码里，有一个方法有三百多行等等的坏味道。于是，便花了几天的时间，边思考便重构这个项目，这样对编码的提升比较大，因为工作的时候，完成任务是第一优先级，然后才是质量。因此，对于我们联系来说，我们只需要：</p>
<ul>
<li>找到一个不错的开源库</li>
<li>阅读其中的代码</li>
<li>找到代码中设计不好的地方</li>
<li>对<strong>自己认为设计</strong>得不好的代码重构</li>
<li>结合「重构」一书，来改进设计。</li>
</ul>
<p>要注意的是：不同的人对于代码设计，有着不同的关店，因此，在这时如果只是因为代码的设计不好，而不是代码里有各种坏味道(code smell)，那么，就不应该去给别人的代码提Pull Request。</p>
<h4 id="造自己的轮子来重写应用"><a href="#造自己的轮子来重写应用" class="headerlink" title="造自己的轮子来重写应用"></a>造自己的轮子来重写应用</h4><p>与阅读代码、重构相比，造一个自己轮子，来实现同样的功能，便是一个更不错的选择。在Web开发领域，大部分的开发框架本身都是「通用型」的框架。即它拥有相当多的功能，其中有很多的功能都不会用到。如你使用JQuery的时候，你可能只会使用到其中的Ajax、Event功能，那么你就可以写一个新的框架，兼容这两个接口。</p>
<p>练习时间充裕的时候，便可以自己动手去做一个。上面说到的阅读框架代码，是一种好的方法。除此无论是前端还是后端，我们都可以找到从零创建框架的资料，来帮助我们理解框架的组成。</p>
<p>通过阅读诸如Python里的Flask、Ruby里的Sinatra等轻量级的框架，我们就能理解一个框架所需要的元素，并模仿他们做出一个新的系统。这些框架的关注点是：处理HTTP请求的CGI、与数据库的交互的ORM、控制逻辑的Controller层，返回HTML的View层等等，除了相关的框架，我们还能再Github上看到很多人模仿这些框架。做一个这样的后台框架，搭建自己的博客，那就能理解好这一些列的逻辑了。</p>
<p>对于前端来说，也是类似，诸如Building React From Scratch,可以让我们在250行理解React的原理，并做出一个类似的框架，除了MVC，还有模块化设计、数据请求等等的内容。在两三年前，「JavaScript框架设计」就是这方面一个不错的选择。</p>
<p>我曾经造过一个名为 Lettuce 的前端框架，它的主要目的就是用于：学习前端框架的设计，便在自己的多个业余项目上使用这个框架。而在前端领域，定制自己的 UI 框架、CSS 框架也是一个很不错的选择。再用到自己的博客上，再写上「自豪地采用xx框架」，岂不是更加的自豪？</p>
<p>在底层领域，又有各式各样的《自制操作系统》、《自制编程语言》、《自己动手设计物联网》等等的书籍，它们都能让我们从底层理解一个系统的组成。除此，还有各种各样的剖析类书籍，可以让我们理解底层机制的同时，也能让我们制作出一个框架。最后，我们只需要能不改写或少数改写代码，将我们的应用运行在上面，便是成功的一个仿造的轮子了。</p>
<h4 id="结合设计模式"><a href="#结合设计模式" class="headerlink" title="结合设计模式"></a>结合设计模式</h4><p>设计模式，不同的人有不同的看法。在我看来，一个优秀的程序是要能「看懂」的。即不一定要精通，但要能识别出来，它是一种设计模式。当我们看到了一次又一次的相似设计时，应该猜想到，其背后应该是一种设计模式。如在前端开发框架中的「双向绑定」，它实际上就是发布-订阅模式，又或者称观察者模式的一种实现。</p>
<p>在笔者看来，模式就是一种高级的语言。当别人一说「工厂模式」，多数人瞬间就明白了，不犹得会发出：原来如此，这一类的感叹。认识了一些模式后，一遇到一些特定的场景，我们就能一下子套用这种模式。</p>
<p>可只凭借Gof的「设计模式」一书，又或者「Head First设计模式」、「重构与模式」等设计模式书籍，我们所学的知识便是有限的。我们要做的是：</p>
<ul>
<li>先熟悉书本上的示例代码，来对不同的设计模式有一个大的了解。</li>
<li>识别日常代码中的设计模式</li>
<li>练习这些设计模式，并掌握常见的设计模式</li>
<li>尝试在日常的代码中，套用设计模式。</li>
<li>重构现有的代码到设计模式</li>
</ul>
<p>要对设计模式进行练习，不是一件容易的事情，并且很多时候，容易模棱两可，即适合使用A模式，又适合使用B模式，这是因为我们是在为设计而设计，因此会尽可能的贴近现有情况。</p>
<h4 id="引入其他领域的思想"><a href="#引入其他领域的思想" class="headerlink" title="引入其他领域的思想"></a>引入其他领域的思想</h4><p>不同的领域里，都有自己领域的优秀思想。如我们熟知的设计模式，便是受建筑领域的「建筑的永恒之道」中描述的 253个 建筑模式的启发。又如今天流行的精益思想，最早是来自汽车制造业，可它对软件行来说，有着令人受益匪浅的启发。好的框架、软件是会相互学习，如 iPhone 与 Android，都在不断地借鉴——通知中心，但是又在那之上做一些改进。</p>
<p>又比如，今天的前端框架里，很多思想都是从后端“借鉴”过来的。如 Angular 中采用的依赖注入，便是深受 Java 语言的影响。近一点来说，Redux，框架最初是用在 React 上，但是它已经被推广到了 React 和 Vue.js 上。</p>
<p>因此，当我们发现一个新的优秀思想产生时，便可以尝试引入到自己的领域里。又或者我们所处的领域，正遇到一些难题，答案可能就在别的领域里。可在这方面的练习，往往都是一些创新性的练习。多数时候，我们的探索可能没有结果，但是它往往能对自己有更大的启发。</p>
<h4 id="找到合适的时间练习"><a href="#找到合适的时间练习" class="headerlink" title="找到合适的时间练习"></a>找到合适的时间练习</h4><p>每天能有半小时、一小时甚至更长时间的稳定练习，比三天打鱼两天晒网的效果要好得多。清理出一些固定的时间，用于为自己腾出时间来提高自己。既然，你都有时间到这篇文章，那么你应该属于能腾出时间的人。</p>
<p>如果不能的话，那么我们也可以尝试去挤出一些时间，如从上下班去寻找空间。即使是同一公司，不同的人都有不同的上下班时间，所花费在路上的时间也有所不同。有的人，需要在几环外坐个一个多小时的地铁，再转公交才能到公司；有的人，只需要出门左转，走个十分钟就到公司了。因为在路上花费的时间不同，也在一定程度上影响了学习、练习等等的时间。</p>
<p>因此，如果可能的话，应该减少花费在上班路上的时间，才能避免继续陷入这样一个恶性循环：<strong>租不起近的房子，花费大量的时间在路上，没有时间提升技能</strong>。</p>
<p>早上</p>
<p>早上的练习，是一种慢慢进入一天工作状态的感觉。一旦上班时间到来的时候，就已经进入工作姿态了——对于“资本家”来说，可谓好事一件。早晨刚醒来，总会想不起昨天项目做到哪一步，便更容易反思哪里做得有问题。</p>
<p>如笔者已经习惯了，每天七点起床、洗漱，随后写会代码，再去上班。有时候，可以有一个半小时的练习时间，有时候会有半个小时，将这些时间浪费在梦里总是有些可惜。同时，之前为了能成功地上公交，便提前半个小时到公司，写一些开源软件的代码。毕竟，作为一家非产品公司，你无法和别人解释说，我们做了些什么、取得了哪些成就。</p>
<p>在很多地方，这是一个很好的策略：<strong>错开高峰期上下班，路上就不容易堵车</strong>。所花在路上的时间就缩短了，那么我们就有时间来练习了。</p>
<p>需要注意的是：<strong>练习的时候不要关注时间，而是关注怎么于提高</strong>。关键点在于：让每天进步一点。</p>
<p>中午</p>
<p>吃完饭后，因为米饭血糖指数高的缘故，容易犯困。对于北方的同学来说，因为主食不是米饭，所以这就不算是一个问题了。这个时候，身体会妨碍我们进行一些练习。可如果你的午休时间比较长，那么也可以做一些练习，再去休息片刻。</p>
<p>碎片时间</p>
<p>对着屏幕写代码，时间一久，集中力就会开始涣散，便应该休息会儿。刷刷资讯、朋友圈，又或者收集各种资料，开放我们的视野。接收各种新的知识，来扩大自己的视野，以便于自己了解整个市场的水平。</p>
<p>常见的方式有：</p>
<ul>
<li>阅读个人博客、微信公众号</li>
<li>维护自己的Awesome列表 – 寻找自己觉得好的开源项目</li>
<li>IT新闻、技术文章聚合网站 – 我很不喜欢聚合网站，不部分的聚合站点的行为无异于文章抄袭。</li>
<li>Github Trending</li>
</ul>
<p>将这些内容存储到 Evernote、WunderList、OneNote 等各式各样的云笔记里，然后定期清理、定期清理、定期清理。收集只是一种方式——没有啥用的方式，因此建议先读完一遍，再去收藏这样的文章。多数时候，我们会发现自己收藏了很多的内容、买了很多的书，但是却没有时间去读。</p>
<p>晚上</p>
<p>经历了漫长的加班，回到住的地方，可能就会想休息了。如果白天没时间练习，晚上也不能抽出时间练习，长期以往，一年的工作经验就要变成五年来用了。</p>
<p>晚上练习的同时，我们应该注意：在睡觉前 30~60 分钟停止编码，否则上床的时候，脑子里可能还是这些代码，就容易失眠。万一灵感一来，那就还要爬起来继续写。这个时候，可以阅读一些相关或者无关的书籍、资料。在阅读的过程中，尽管我们已经不在思考内容。但是潜意识里还在思考中，这时就能很容易就会遇到一些灵感。</p>
<p>最后，休息的时候，尽情睡觉吧~。</p>
<h3 id="怎样才能持之以恒下去"><a href="#怎样才能持之以恒下去" class="headerlink" title="怎样才能持之以恒下去"></a>怎样才能持之以恒下去</h3><p>在上文里，我们只谈论一些方法和技巧，可是它们并没有什么用。每个人都知道所谓的「一万小时理论」，但是真正要坚持下来，并没有我们想象中的那么容易。</p>
<p>我们需要从娱乐时间里抽到一部分，原本舒适的玩游戏、睡觉、刷微博时间，现在要成为另外一种「痛苦」？可是，既然这些“无聊的事情”我们都能上瘾，那么我们是不是没有找到合适的路？</p>
<h4 id="设定目标与-SMART-原则"><a href="#设定目标与-SMART-原则" class="headerlink" title="设定目标与 SMART 原则"></a>设定目标与 SMART 原则</h4><p>按上文中的分法，练习可以分为：<strong>日常固定时间的练习</strong>，及针对某一特定主题的练习等多种类型。当我们开始练习某一个具体的技术、框架、模式时，最好能制定一个简单的练习计划，如每几天练习某一内容、多少天内用某一个框架实现什么功能。</p>
<p>先设计<strong>一个小的目标，并且能在短期实现</strong>。当发现自己可以轻松地坚持下来时，再慢慢的扩大目标，直至我们能做得更好。可是，设定一个练习目标也不是一件简单的事，它也有很多考量的地方。</p>
<p>毕业的时候，在公司接受了针对于毕业生的培训，期间学习到了一个用于制定任务、目标的 SMART 原则：</p>
<ul>
<li>具体的（Specific）。即我们要有一个明确的目标，如在一周内用 Django 写一个博客系统，而不是用 Django 写个东西。</li>
<li>可度量的（Measurable）。即衡量是否达成目标，我们只需要能创建、查看、删除博客，那么我们就算完成了这样的任务。它可以用来不断地突破自己。</li>
<li>可实现性（Attainable）。即这个目标一定是可以实现的，不能实现的目标没有啥意义。与些同时，练习初期定下的目标不能困难。</li>
<li>相关性（Relevant）。即目标与其他目标的关联情况，如我们练习 Django 是为了提高 Django 或者后台的技能。如果我们的大目标是提高前端技能，那么这个目标对于当前的意义并不是太大。</li>
<li>时限（Time-based）。即时间限制，如上面提到的一周内用 Django 写一个博客系统的期限。</li>
</ul>
<p>经常能在微信朋友圈看到，朋友的 100 天英语阅读计划，这样的目标就是合理的——可实现的、具体的、有时间限制、可度量的。</p>
<p>如果我们想每天固定时间进行练习，那么我们应该做一个短暂的尝试，如七天，再慢慢的不断扩大时间目标，二十一天、两个月，随后再扩大到一个更大的目标。</p>
<h4 id="坚持与激励自己"><a href="#坚持与激励自己" class="headerlink" title="坚持与激励自己"></a>坚持与激励自己</h4><p>我们可以使用 GitHub 上的 Contributions 来激励自己，每一天的痕迹都很明显，甚至于可以拉拢一些小伙伴，与我们一起参加类似的活动。GitHub 本身具有社交属性，可以让我们看到别人做了什么，做了多久。</p>
<p>由于 GitHub 的服务器在国外，访问的时候可能会受限于网络。国内的开源中国的码云和Coding 也有类似的活跃度，建议访问 GitHub 有问题的读者，可以使用这些服务。</p>
<p>上文中提到的朋友圈 100 天英语阅读计划，也是相似的，它可以让别人监督你是否完成<br>——前提是，有人一起和你做相同的事，<strong>因此可以找个人和你一起练习，相互监督。</strong></p>
<p>刚开始练习的时候，练习的内容基本上很充实。时间一长，可能就会陷入一些瓶颈：要么找不到合适的练习内容，要么觉得练习过于乏味。因此这个时候，可以切换不同类型的练习项目——如，做一些自己觉得有意思的小项目练习。又或者，当我们完成一个目标时，给自己一些奖励，以此来鼓舞自己。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>练习完之后，还有一种很好的提高方式，就是输出、总结。整理自己练习过程中学到的知识，将之与我们需要的技能做对比，我们就会发现：在哪些地方还需要提高。我们就能制作出下一次练习的目标，不断地反复，以些来提高自己。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-17/40653819-file_1495033238660_44f8.png" alt=""></p>
<p>经常做总结，除了看到自己提高的地方，还能让阅读文章的人，鼓励你更好的前进。那么，现在让我们创建一个项目，更新一次 README，开始练习吧！</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>在工作的前三年里快速成长 by Phodal</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有人可以靠中彩票，然后一夜暴富；有人随随便便发几张自拍，就一不小心一夜成名。可技术成长，要一步一个脚印地练习，才能掌握某项特定技术。等到我们掌握了学习的技巧，才能用更短的时间，来掌握某项特定的技术。&lt;/p&gt;
&lt;p&gt;而练习也不是&lt;strong&gt;一天里写一万行代码&lt;/stron
    
    </summary>
    
      <category term="思绪" scheme="http://jianwl.com/categories/%E6%80%9D%E7%BB%AA/"/>
    
    
      <category term="思绪" scheme="http://jianwl.com/tags/%E6%80%9D%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记(二)</title>
    <link href="http://jianwl.com/2017/05/14/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://jianwl.com/2017/05/14/Linux学习笔记-二/</id>
    <published>2017-05-14T07:15:23.000Z</published>
    <updated>2017-05-14T08:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-查询已启动的网络监听服务"><a href="#1-查询已启动的网络监听服务" class="headerlink" title="1. 查询已启动的网络监听服务"></a>1. 查询已启动的网络监听服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">netstat 参数解释：</div><div class="line"></div><div class="line">-t tcp协议</div><div class="line">-u udp协议</div><div class="line">-n numeric</div><div class="line">-l listen状态</div><div class="line">-p program</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/26146003-file_1494746273274_17eb1.png" alt=""></p>
<h4 id="2-查询系统中是否安装了某软件"><a href="#2-查询系统中是否安装了某软件" class="headerlink" title="2. 查询系统中是否安装了某软件"></a>2. 查询系统中是否安装了某软件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rpm 参数详解：</div><div class="line"></div><div class="line">-q query 查询操作</div><div class="line">-a all 所有软件</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/81383025-file_1494746859638_3b28.png" alt=""></p>
<h4 id="3-host检测主机名与IP的对应关系"><a href="#3-host检测主机名与IP的对应关系" class="headerlink" title="3. host检测主机名与IP的对应关系"></a>3. host检测主机名与IP的对应关系</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/15833663-file_1494748081467_e93c.png" alt=""></p>
<h4 id="4-telnet远程连接检测端口是否启动"><a href="#4-telnet远程连接检测端口是否启动" class="headerlink" title="4. telnet远程连接检测端口是否启动"></a>4. telnet远程连接检测端口是否启动</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/35985253-file_1494748318696_110f5.png" alt=""></p>
<h4 id="5-wget网页数据的获取"><a href="#5-wget网页数据的获取" class="headerlink" title="5. wget网页数据的获取"></a>5. wget网页数据的获取</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/75884486-file_1494748586137_7e4b.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>鸟哥的Linux私房菜 - 服务器架设篇</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;1-查询已启动的网络监听服务&quot;&gt;&lt;a href=&quot;#1-查询已启动的网络监听服务&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之封装实战(一)</title>
    <link href="http://jianwl.com/2017/05/14/JAVA%E4%B9%8B%E5%B0%81%E8%A3%85%E5%AE%9E%E6%88%98-%E4%B8%80/"/>
    <id>http://jianwl.com/2017/05/14/JAVA之封装实战-一/</id>
    <published>2017-05-14T02:57:27.000Z</published>
    <updated>2017-05-14T04:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在看Spring框架的源码，发现一些好用的封装技巧，记录下来，以便模仿与提升。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-接口层"><a href="#1-接口层" class="headerlink" title="1. 接口层"></a>1. 接口层</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public interface MultiValueMap&lt;K,V&gt; extends Map&lt;K,List&lt;V&gt;&gt; &#123;</div><div class="line"></div><div class="line">    V getFirst(K key);</div><div class="line"></div><div class="line">    void add(K key, V value);</div><div class="line"></div><div class="line">    void addAll(K key,List&lt;V&gt; values);</div><div class="line"></div><div class="line">    void set(K key,V value);</div><div class="line"></div><div class="line">    void setAll(Map&lt;K,V&gt; values);</div><div class="line"></div><div class="line">    Map&lt;K,V&gt; toSingleValueMap();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获得技能：</p>
<ol>
<li>继承JAVA原生接口，实现新的接口；</li>
<li>K,V泛型的使用；</li>
</ol>
<h4 id="2-类实现接口"><a href="#2-类实现接口" class="headerlink" title="2. 类实现接口"></a>2. 类实现接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line">public class LinkedMutilValueMap&lt;K,V&gt; implements MultiValueMap&lt;K,V&gt;,Serializable,Cloneable &#123;</div><div class="line">    private static final long serialVersionUID = 3801124242820219131L;</div><div class="line"></div><div class="line">    private final Map&lt;K,List&lt;V&gt;&gt; targetMap;</div><div class="line"></div><div class="line">    public LinkedMutilValueMap() &#123;</div><div class="line">        targetMap = new LinkedHashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置初始化因子,可以减少扩容的次数; 大于inititalCapacity * 3/4扩容;</div><div class="line">     * @param inititalCapacity</div><div class="line">     */</div><div class="line">    public LinkedMutilValueMap(int inititalCapacity) &#123;</div><div class="line">        this.targetMap = new LinkedHashMap&lt;&gt;(inititalCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LinkedMutilValueMap(Map&lt;K,List&lt;V&gt;&gt; otherMap) &#123;</div><div class="line">        this.targetMap = new LinkedHashMap&lt;K, List&lt;V&gt;&gt;(otherMap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  深拷贝</div><div class="line">     */</div><div class="line">    public LinkedMutilValueMap&lt;K,V&gt; deepCopy()&#123;</div><div class="line">        LinkedMutilValueMap&lt;K,V&gt; copy = new LinkedMutilValueMap&lt;K,V&gt;(this.targetMap.size());</div><div class="line">        this.targetMap.entrySet().forEach(entry -&gt; copy.put(entry.getKey(),new LinkedList&lt;V&gt;(entry.getValue())));</div><div class="line"></div><div class="line">        return copy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  浅拷贝</div><div class="line">     */</div><div class="line">    public LinkedMutilValueMap&lt;K,V&gt; clone() &#123;</div><div class="line">        return new LinkedMutilValueMap&lt;K, V&gt;(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public V getFirst(K key) &#123;</div><div class="line">        List&lt;V&gt; values = this.targetMap.get(key);</div><div class="line">        return (values != null ? values.get(0) : null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * TODO 核心实现,后文会单独分析</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void add(K key, V value) &#123;</div><div class="line">        List&lt;V&gt; values = this.targetMap.computeIfAbsent(key, k -&gt; new LinkedList&lt;V&gt;());</div><div class="line">        values.add(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addAll(K key, List&lt;V&gt; values) &#123;</div><div class="line">        List&lt;V&gt; currentValues = this.targetMap.computeIfAbsent(key, k -&gt; new LinkedList&lt;V&gt;());</div><div class="line">        currentValues.addAll(values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void set(K key, V value) &#123;</div><div class="line">        List&lt;V&gt; values = new LinkedList&lt;V&gt;();</div><div class="line">        values.add(value);</div><div class="line">        this.targetMap.put(key,values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setAll(Map&lt;K, V&gt; values) &#123;</div><div class="line">        values.forEach(this::set);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Map&lt;K, V&gt; toSingleValueMap() &#123;</div><div class="line">        LinkedHashMap&lt;K,V&gt; singleValueMap = new LinkedHashMap&lt;K, V&gt;(this.targetMap.size());</div><div class="line">        this.targetMap.forEach((key,value) -&gt; singleValueMap.put(key,value.get(0)));</div><div class="line"></div><div class="line">        return singleValueMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int size() &#123;</div><div class="line">        return this.targetMap.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean isEmpty() &#123;</div><div class="line">        return this.targetMap.isEmpty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean containsKey(Object key) &#123;</div><div class="line">        return this.targetMap.containsKey(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean containsValue(Object value) &#123;</div><div class="line">        return this.targetMap.containsValue(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;V&gt; get(Object key) &#123;</div><div class="line">        return this.targetMap.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;V&gt; put(K key, List&lt;V&gt; value) &#123;</div><div class="line">        return this.targetMap.put(key,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;V&gt; remove(Object key) &#123;</div><div class="line">        return this.targetMap.remove(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void putAll(Map&lt;? extends K, ? extends List&lt;V&gt;&gt; m) &#123;</div><div class="line">        this.targetMap.putAll(m);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void clear() &#123;</div><div class="line">        this.targetMap.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Set&lt;K&gt; keySet() &#123;</div><div class="line">        return this.targetMap.keySet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Collection&lt;List&lt;V&gt;&gt; values() &#123;</div><div class="line">        return this.targetMap.values();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Set&lt;Entry&lt;K, List&lt;V&gt;&gt;&gt; entrySet() &#123;</div><div class="line">        return this.targetMap.entrySet();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获得技能：</p>
<ol>
<li>理解了<code>add</code>方法中的核心实现，掌握了<code>Function&lt;? super K, ? extends V&gt; mappingFunction</code>的使用；「后文会单独分析」</li>
<li>参数类型通配符<code>super</code>和<code>extends</code>的区别「后文会单独分析」</li>
</ol>
<h4 id="3-核心方法分析"><a href="#3-核心方法分析" class="headerlink" title="3. 核心方法分析"></a>3. 核心方法分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">default V computeIfAbsent(K key,Function&lt;? super K, ? extends V&gt; mappingFunction) &#123;</div><div class="line">    // Function不为空</div><div class="line">    Objects.requireNonNull(mappingFunction);</div><div class="line">    V v;</div><div class="line">    </div><div class="line">    // 获取的V为不空</div><div class="line">    if ((v = get(key)) == null) &#123;</div><div class="line">        V newValue;</div><div class="line">        </div><div class="line">        // mappingFunction.apply(key)传入key得到返回的结果newValue「k -&gt; newValue」</div><div class="line">        if ((newValue = mappingFunction.apply(key)) != null) &#123;</div><div class="line">            put(key, newValue);</div><div class="line">            return newValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/84542289-file_1494735361160_bd63.png" alt=""></p>
<p>没看源码时，我就纳闷，调用处的k并没有声明，代表的是什么呢？k代表的是入参，<code>new LinkedList&lt;V&gt;()</code>表示返回结果;类似于<code>JS</code>中的Function方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Function fn(key) &#123;</div><div class="line">	return newValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-参数类型通配符extends和super的区别？"><a href="#4-参数类型通配符extends和super的区别？" class="headerlink" title="4. 参数类型通配符extends和super的区别？"></a>4. 参数类型通配符extends和super的区别？</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/97813744-file_1494737325263_14806.png" alt=""></p>
<p>由上图可分析得出：</p>
<p><code>&lt;? extends Integer&gt;</code> 继承了<code>Integer</code>，输入的参数必须是Integer</p>
<p><code>&lt;? super Integer&gt;</code> 包含了<code>Integer</code>、<code>Number</code>、<code>Object</code>,输入的参数可以是任意类型</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://stackoverflow.com/questions/2827585/what-is-super-t-syntax" target="_blank" rel="external">What is &lt;? super T&gt; in stackoverflow</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在看Spring框架的源码，发现一些好用的封装技巧，记录下来，以便模仿与提升。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>使用POI读取|创建Excel</title>
    <link href="http://jianwl.com/2017/05/08/%E4%BD%BF%E7%94%A8POI%E8%AF%BB%E5%8F%96-%E5%88%9B%E5%BB%BAExcel/"/>
    <id>http://jianwl.com/2017/05/08/使用POI读取-创建Excel/</id>
    <published>2017-05-08T12:46:57.000Z</published>
    <updated>2017-05-08T13:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>发现一个非常实用的工具，用于对EXCEL表的读取和创建。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1) 引入依赖"></a>1) 引入依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.13&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="2-POI读取EXCEL表"><a href="#2-POI读取EXCEL表" class="headerlink" title="2) POI读取EXCEL表"></a>2) POI读取EXCEL表</h4><p>Excel表内容</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/14799072-file_1494248541870_6645.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class POITest &#123;</div><div class="line"></div><div class="line">    public static void read() throws IOException, InvalidFormatException &#123;</div><div class="line">        InputStream inputStream = new FileInputStream(&quot;/Users/jianweilin/Desktop/bd_level.xlsx&quot;);</div><div class="line">        Workbook wb = WorkbookFactory.create(inputStream);</div><div class="line">        Sheet sheet = wb.getSheetAt(0);</div><div class="line">        sheet.forEach(row -&gt; &#123;</div><div class="line">            if(row.getRowNum() &lt;= 1) &#123;</div><div class="line">                System.out.println(&quot;skiped row nums =&gt; &quot; + row.getRowNum());</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            row.forEach(cell -&gt; System.out.print(cell.toString() + &quot; &quot;));</div><div class="line">            System.out.println();</div><div class="line">        &#125;);</div><div class="line">        inputStream.close();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) throws IOException, InvalidFormatException &#123;</div><div class="line">        read();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结果:</div><div class="line">// skiped row nums =&gt; 0</div><div class="line">// skiped row nums =&gt; 1</div><div class="line">// 1.0 413.0 411526199312042613 全职 杜辉 华北大区 北京城市站 到家+物流 BD专员 16-七月-2015 北京 物流BD 物流BDM 郑琦 </div><div class="line">// 2.0 542.0 220881199103101319 全职 刘洋 华北大区 北京城市站 到家+物流 BD专员 18-八月-2015 北京 物流BD 物流BDM 郑琦 </div><div class="line">// 3.0 1618.0 230605199102222623 全职 张莹 华北大区 北京城市站 到家+物流 BD专员 14-九月-2016 北京 物流BD 物流BDM 郑琦</div></pre></td></tr></table></figure>
<h4 id="3-POI创建EXCEL表"><a href="#3-POI创建EXCEL表" class="headerlink" title="3) POI创建EXCEL表"></a>3) POI创建EXCEL表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class POITest &#123;</div><div class="line">    public static void write() throws IOException &#123;</div><div class="line">        // 创建excel工作簿</div><div class="line">        Workbook wb = new HSSFWorkbook();</div><div class="line"></div><div class="line">        // 创建第一个sheet（页），命名为 new sheet</div><div class="line">        Sheet sheet = wb.createSheet(&quot;城市经理&quot;);</div><div class="line"></div><div class="line">        // Row(行) 和 Cell(方格) 都是从0开始计数的</div><div class="line">        Row row1 = sheet.createRow((short) 0);</div><div class="line">        row1.createCell(0).setCellValue(&quot;城市经理编号&quot;);</div><div class="line">        row1.createCell(1).setCellValue(&quot;城市经理名字&quot;);</div><div class="line">        row1.createCell(2).setCellValue(&quot;城市ID&quot;);</div><div class="line">        row1.createCell(3).setCellValue(&quot;城市名称&quot;);</div><div class="line"></div><div class="line">        Row row2 = sheet.createRow((short) 1);</div><div class="line">        row2.createCell(0).setCellValue(&quot;1703&quot;);</div><div class="line">        row2.createCell(1).setCellValue(&quot;王伟鹏&quot;);</div><div class="line">        row2.createCell(2).setCellValue(&quot;1&quot;);</div><div class="line">        row2.createCell(3).setCellValue(&quot;上海&quot;);</div><div class="line"></div><div class="line">        FileOutputStream fileOut = new FileOutputStream(&quot;/Users/jianweilin/Desktop/city_manager.xlsx&quot;);</div><div class="line"></div><div class="line">        // 把上面创建的工作簿输出到文件中</div><div class="line">        wb.write(fileOut);</div><div class="line"></div><div class="line">        //关闭输出流</div><div class="line">        fileOut.close();</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) throws IOException, InvalidFormatException &#123;</div><div class="line">        write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/54636878-file_1494248703221_9bc.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;发现一个非常实用的工具，用于对EXCEL表的读取和创建。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;head
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL数据库复制概论</title>
    <link href="http://jianwl.com/2017/05/08/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E5%88%B6%E6%A6%82%E8%AE%BA/"/>
    <id>http://jianwl.com/2017/05/08/MYSQL数据库复制概论/</id>
    <published>2017-05-08T04:48:02.000Z</published>
    <updated>2017-05-08T14:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>每当我们讨论一项(新的)领域技术的时候，最好的方式通常是首先抛出一些问题，这些问题大致分为三类：这项技术又是什么玩意(Waht)？这项技术为什么会存在？我们已经有那么多解决方案(Method)了，我们为什么要用它(Why?)如果这项技术那么好且我们正好有场景可以用到这项技术，且能使我们的系统得到很乐观的优化，那么我们怎么用呢(How)?大概已经有人觉得这些问题很熟悉，是的，这就是黄金法则提出的三个问题，对于每种新鲜事物我们首先基于这三个问题去了解，更有利于弄清楚事情的本职，端正态度去了解，而不是因为新，因为大家都说好，才要去了解。</p>
</blockquote>
<p>接下来，我们带着黄金法则提出的三个问题去看看<code>MYSQL</code>数据库复制这项领域技术，然后再结合实际应用扩展一些问题。</p>
<h3 id="1-WHAT"><a href="#1-WHAT" class="headerlink" title="1. WHAT?"></a>1. WHAT?</h3><p>MySQL复制使得一台MYSQL数据库服务器的数据被拷贝到其他一台或者多台数据库服务器，前者通常被叫做<code>Master</code>,后者通常被叫做<code>Slave</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/18470249-file_1494220292824_ca12.png" alt="MySQL复制示意图"></p>
<p>复制的结果是集群(Cluster)中的所有数据库服务器得到的数据理论上都是一样的，都是同一份数据，只是有多个copy。MYSQL默认内建的复制策略是异步的，基于不同的配置，<code>Slave</code>不一定要一直和<code>Master</code>保持连接不管的复制或等待复制，我们指定复制所有的数据库，一部分数据库、甚至是某个数据库的某部分的表。</p>
<p>MYSQL复制支持多种不同的复制策略，包括同步、半同步、异步和延迟策略等。</p>
<p>1) 同步策略：Master要等待所有Slave应答之后才会提交(MYSQL对DB操作的提交通常是先对操作事件进行二进制文件写入然后再进行提交)。</p>
<p>2) 半同步策略：Master等待至少一个Slave应答就可以提交。</p>
<p>3) 异步策略：Master不要等待Slave应答就可以提交</p>
<p>4) 延迟策略：Slave要至少落后Master指定的时间</p>
<p>MySQL复制同时支持多种不同的复制模式：</p>
<p>1）基于语句的复制，<code>Statement Based Replication(SBR)</code></p>
<p>2) 基于行的复制，<code>Row Based Replication(RBR)</code></p>
<p>3) 混合复制, <code>Mixed</code></p>
<h3 id="2-WHY"><a href="#2-WHY" class="headerlink" title="2. WHY?"></a>2. WHY?</h3><p>这个问题其实也就是MYSQL复制有什么好处，我们可以将复制的好处归结于下面几类：</p>
<p>1）性能方面：MYSQL复制是一种Scale-out方案，也即“水平扩展”，将原来的单点负载扩展到多台Slave机器中去，从而提高总体的服务性能。在这种方式下，所有的写操作，当然包括UPDATE操作，都要发生在Master机器上，读操作发生在一台或多台Slave机器上。这种模型可以在一定程度上提高总体的服务性能，Master服务器专注于写和更新操作，Slave服务器专注于读操作，我们同时可以通过增加Slave服务器的数量来提高服务的性能。</p>
<p>2）防腐化：由于数据被复制到了Slave，Slave可以暂停复制进程，进行数据备份，因此可以防止数据腐化。</p>
<p>3）故障恢复：同时多台Slave如果有一台Slave挂掉之后我们还可以从其他Slave读取，如果配置了主从切换的话，当Master挂掉之后我们还可以选择一台Slave作为Master继续提供写服务，这达达增加了应用的可靠性。</p>
<p>4) 数据分析：实时数据可以存储在Master，而数据分析可以从Slave读取，这样不会影响Master的性能。</p>
<h3 id="3-HOW"><a href="#3-HOW" class="headerlink" title="3. HOW?"></a>3. HOW?</h3><p>这里我们只介绍一下MYSQL的复制是如何工作的，至于配置，网上也有很多相关的介绍，读者具体应用的时候可以再去查询。我们拿最常用的基于二进制文件的复制来看看。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/7393799-file_1494252610091_1720a.png" alt=""></p>
<p>MYSQL的复制过程大概如下：首先，主库在每次准备提交事务完成数据更新操作之前都会将数据更新操作记录到二进制日志中，这些日志是以二进制的方式记录数据更改的事件，值得一提的是二进制日志中记录的顺序实际上是事务的提交顺序，而非SQL执行语句的顺序，在记录二进制日志之后，主库会告诉存储引擎事务可以提交了。</p>
<p>然后，备库会启动一个IO线程，之所以叫做IO线程时因为这个线程专门做IO相关的工作，包括和主库建立连接，然后在主库上启动一个特殊的二进制转储线程，这个转储线程会不断的读取二进制日志中的事件，发送给备课的IO线程，备库的IO线程会将事件记录到中继日志中。</p>
<p>备库会有一个叫做SQL的线程被开启，这个线程做的事情是读取中继日志中的DB操作事件在备库执行，从而实现数据更新。</p>
<p>总的来说，在发生复制的主库服务器和备份服务器中，一共有三个线程在工作。</p>
<p>上面我们已经大概了解的什么是复制？为什么要复制？如何复制？这三个问题了，接下来我们基于上面的介绍，提出一些实际应用可能会发生的问题来思考如何解决。</p>
<h3 id="4-问答环节"><a href="#4-问答环节" class="headerlink" title="4. 问答环节"></a>4. 问答环节</h3><h4 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h4><p>通过复制模型虽然读能力可以通过扩展slave机器来达到提高，而写能力却不能，如果写达到瓶颈我们应该怎么做呢？</p>
<p>答: 我们首先会得出结论，这种复制模型对于写少读多型应用是非常有优势的，其次，当遇到这种问题的时候我们可以对数据库进行分库操作，所谓分库，就是将业务相关性比较大的表放在同一个数据库中，例如之前数据库有A，B，C，D四张表，A表和B表关系比较大，而C表和D表关系比较大，这样我们把C表和D表分离出去成为一个单独的数据库，通过这种方式，我们可以将原有的单点写变成双点写或多点些，从而降低原有主库的写负载。</p>
<h4 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h4><p>因为复制是有延迟的，肯定会发生主库写了，但是从库还没有读到的情况，遇到这种情况怎么办？</p>
<p>答: MySQL支持不同的复制策略，基于不同的复制策略达到的效果也是不一样的，如果是异步复制，MySQL不能保证从库立马能够读到主库实时写入的数据，这个时候我们要权衡选择不同复制策略的利弊来进行取舍。所谓利弊，就是我们是否对从库的读有那么高的实时性要求，如果真的有，我们可以考虑使用同步复制策略，但是这种策略相比于异步复制策略会大大降低主库的响应时间和性能。我们是否可以在应用的设计层面去避开这个问题？</p>
<h4 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h4><p>复制的不同模式有什么优缺点？我们如何选择？</p>
<p>答：基于语句的复制实际上是把主库上执行的SQL在从库上重新执行一遍，这么做的好处是实现起来简单，当前也有缺点，比如我们SQL里面使用了NOW()，当同一条SQL在从库中执行的时候显然和在主库中执行的结果是不一样的，注入此类问题可以类推。其次问题就是这种复制必须是串行的，为了保证串行执行，就需要更多的锁。</p>
<p>基于行的复制的时候二进制日志中记录的实际上是数据本身，这样从库可以得到正确的数据，这种方式缺点很明显，数据必须要存储在二进制日志文件中，这无疑增加的二进制日志文件的大小，同时增加的IO线程的负载和网络带宽消耗。而相比于基于语句的复制还有一个优点就是基于行的复制无需重放查询，省去了很多性能消耗。</p>
<p>无论哪种复制模式都不是完美的，日志如何选择，这个问题可以在理解他们的优缺点之后进行权衡。</p>
<h4 id="问题4："><a href="#问题4：" class="headerlink" title="问题4："></a>问题4：</h4><p>复制的工作过程只有三个线程来完成，对于Master来说，写是并发的，也就出现了一个IO线程要把所有并发的数据变更事件记录，这个IO线程会不会累死？当一个Master对应多个Slave的时候，其实在Master中会唤起多个IO线程，这无疑会增加Master的资源开销，如果出现事件堆积，也就是事件太多，来不及及时发送出去怎么办？另外就是Slave那边的IO线程和SQL线程也会有对应主库并发数据变更事件，而Slave方单个线程处理的问题，这个时候Slave线程会不会累死？</p>
<p>答：上面的问题确实会发生，上面第一个问题和第二个问题其实是写负载的问题，当事件堆积太多，从库时延就会变大，Slave单SQL线程问题据说有参数可以开启并行操作，这个大家可以确认一下。</p>
<h4 id="问题5："><a href="#问题5：" class="headerlink" title="问题5："></a>问题5：</h4><p>针对复制工作过程可能会出现的问题，主库写完二进制日志文件同时都会保存二进制日志的偏移量，但是当断电的时候，二进制日志文件没有刷新到磁盘，主库重新启动之后，从库尝试读该偏移量的二进制日志，会出现读不到的情况，这个问题应该怎么解决？</p>
<p>首先如果开启了sync_binlog选项，对于innodb同时设置innodb_flush_log_at_trx_commot=1，则可以保证二进制日志文件会被写入磁盘，但MyISAM引擎可能会导致数据损坏。如果没有开启这个选项，则可以通过制定从库的二进制偏移量为下一个二进制日志文件的开头，但是不能解决事件丢失问题。</p>
<h4 id="问题6"><a href="#问题6" class="headerlink" title="问题6:"></a>问题6:</h4><p>从库在非计划的关闭或重启时，回去读master.info文件去找上次停止复制的位置，这同样会有一个问题，如果master.info不正确，就会导致复制数据不一致的情况，遇到这个问题怎么办？</p>
<p>答：这个问题可以通过两种方式解决，一是控制master.info在从库非计划关闭或重启的时候让master.info能够同步到磁盘，这样下次启动的时候就不会读取错误的信息，这有助于减少错误的发生概率。另外想要找到正确的复制位置是困难的，我们也可以选择忽略错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;每当我们讨论一项(新的)领域技术的时候，最好的方式通常是首先抛出一些问题，这些问题大致分为三类：这项技术又是什么玩
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>JVM之类加载机制</title>
    <link href="http://jianwl.com/2017/05/06/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://jianwl.com/2017/05/06/JVM之类加载机制/</id>
    <published>2017-05-06T12:05:52.000Z</published>
    <updated>2017-05-06T13:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JVM的类加载机制是之前面试中被问到频率比较高的问题之一了，这一节我们来详细了解它的实现机制。</p>
<h3 id="1-JVM类加载"><a href="#1-JVM类加载" class="headerlink" title="1. JVM类加载"></a>1. JVM类加载</h3><p>JAVA虚拟机中类加载的全过程，也就是加载、验证、准备、解析和初始化这5个阶段，接下来将会详细介绍每个阶段所执行的具体动作。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/1958164-file_1494072982627_39b3.png" alt=""></p>
<h4 id="1）加载"><a href="#1）加载" class="headerlink" title="1）加载"></a>1）加载</h4><p>在加载阶段，虚拟机将会完成以下3件事情：</p>
<p>1）通过一个类的全限定名来获取定义此类的二进制字节流</p>
<p>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p>
<p>3) 在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>
<h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2) 验证"></a>2) 验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<p>验证阶段大致会完成下面4个阶段检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p>
<h5 id="2-1-文件格式验证"><a href="#2-1-文件格式验证" class="headerlink" title="2.1 文件格式验证"></a>2.1 文件格式验证</h5><ul>
<li>是否以魔数0xCAFEBABE开头</li>
<li>主、次版本号是否在当前虚拟机处理范围之内</li>
<li>常量池的常量中是否有不被支持的常量类型</li>
</ul>
<p>…</p>
<p>这阶段的是基于二进制字节流进行的，只有通过这个验证后，字节流才会进入内存的方法区进行存储，后面的3个验证全都是基于方法区的存储结构进行的。</p>
<h5 id="2-2-元数据验证"><a href="#2-2-元数据验证" class="headerlink" title="2.2 元数据验证"></a>2.2 元数据验证</h5><p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java信息规范的要求。这个阶段主要验证：</p>
<ul>
<li>这个类是否有父类</li>
<li>这个类的父类是否集成了不允许继承的类</li>
<li>如果这个类不是抽象类，是否实现了父类或接口之中要求实现的所有方法</li>
<li>类中的字段、方法是否与父类产生矛盾</li>
</ul>
<h5 id="2-3-字节码验证"><a href="#2-3-字节码验证" class="headerlink" title="2.3 字节码验证"></a>2.3 字节码验证</h5><p>第三个阶段是整个验证中最复杂的一个阶段，主要目的是通过数据流和控制流分析确定程序语义是合法的，符合逻辑的。</p>
<ul>
<li>保证任意时刻操作数据栈的数据类型与指令代码序列都能配合工作，例如不会出现类似的情况：在操作栈放置一个int类型的数据，使用时却按long类型来加载本地变量表。</li>
<li>保证跳转执行不会跳转到方法体以外的字节码指令上</li>
<li>保证方法体中的类型转换是有效的。例如可以把一个子类对象赋值给父类数据类型。</li>
</ul>
<h5 id="2-4-符号引用验证"><a href="#2-4-符号引用验证" class="headerlink" title="2.4 符号引用验证"></a>2.4 符号引用验证</h5><p>最后一个阶段的验证发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段 – 解析阶段中发生。符号引用验证可以看做是对类自身以外的信息进行匹配性校验。</p>
<ul>
<li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li>
<li>在指定类中是否存在符号方法的字段描述符以及简单名称所描述的方法和字段。</li>
<li>符号引用中的类、字段、方法的访问性(private、protect、public、default)是否可被当前类访问</li>
</ul>
<h4 id="3）准备"><a href="#3）准备" class="headerlink" title="3）准备"></a>3）准备</h4><p>准备阶段是为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段有两个特别容易混淆的概念需要强调一下，首先，这个时候进行内存分配的仅包含类变量(被static修饰的变量)，而不包括实例变量，实例变量将在对象实例化时随着对象一起分配在java堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值。假设定义一个类变量定义为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static int value = 123;</div></pre></td></tr></table></figure>
<p>那变量value在准备阶段过后的初始值为0而不是123，因为这时候尚未开始执行Java方法，而把value赋值为123的pubstatic指令是程序被编译后，存放在类构造器<clinit>()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。</clinit></p>
<h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4) 解析"></a>4) 解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，先来了解下解析阶段中直接引用与符号引用有什么关联？</p>
<ul>
<li>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义定位到目标即可。</li>
<li>直接引用：直接引用是可以直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</li>
</ul>
<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法局冰河调用点限定符7类符号引用进行</p>
<h4 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5) 初始化"></a>5) 初始化</h4><p>类初始化是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的JAVA程序代码。</p>
<h3 id="2-类加载器"><a href="#2-类加载器" class="headerlink" title="2. 类加载器"></a>2. 类加载器</h3><h4 id="1-类加载器的分类"><a href="#1-类加载器的分类" class="headerlink" title="1) 类加载器的分类"></a>1) 类加载器的分类</h4><p>JAVA提供3中类加载器，启动类加载器、扩展类加载器、应用程序类加载器。</p>
<h5 id="1-1-启动类加载器"><a href="#1-1-启动类加载器" class="headerlink" title="1.1 启动类加载器"></a>1.1 启动类加载器</h5><p>这个类加载器将存放在<code>&lt;JAVA_HOME&gt;\lib</code>目录中的，或被<code>-Xbootclasspath</code>参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机聂村中。启动类加载器无法被Java程序直接引用，用户在编写自定义加载器时，如果需要将加载器请求委派给引导类加载器，那直接使用null代替即可。</p>
<h5 id="1-2-扩展类加载器"><a href="#1-2-扩展类加载器" class="headerlink" title="1.2 扩展类加载器"></a>1.2 扩展类加载器</h5><p>这个加载器由<code>sun.misc.Lanchuer$ExtClassLoader</code>实现，它负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中的，或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</p>
<h5 id="1-3-应用程序类加载器"><a href="#1-3-应用程序类加载器" class="headerlink" title="1.3 应用程序类加载器"></a>1.3 应用程序类加载器</h5><p>它负责加载用户类路径(ClassPath)上所指定的类库，开发者直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下就是程序中默认的类加载器。</p>
<h4 id="2-类加载器之间的关系-–-双亲委派模型"><a href="#2-类加载器之间的关系-–-双亲委派模型" class="headerlink" title="2)类加载器之间的关系 – 双亲委派模型"></a>2)类加载器之间的关系 – 双亲委派模型</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/80453965-file_1494077656090_6545.png" alt=""></p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到类加载的请求，它首先不会自家去尝试加载这个类，而是把这个请求委派给父类加载器去完成，没一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时，子加载器才会尝试自己去加载。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解java虚拟机 by 周志明</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;JVM的类加载机制是之前面试中被问到频率比较高的问题之一了，这一节我们来详细了解它的实现机制。&lt;/p&gt;
&lt;h3 id=&quot;1-JVM类加载&quot;&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Fork/Join框架</title>
    <link href="http://jianwl.com/2017/05/06/Fork-Join%E6%A1%86%E6%9E%B6/"/>
    <id>http://jianwl.com/2017/05/06/Fork-Join框架/</id>
    <published>2017-05-06T07:59:14.000Z</published>
    <updated>2017-05-06T08:31:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是Fork-Join框架"><a href="#1-什么是Fork-Join框架" class="headerlink" title="1. 什么是Fork/Join框架"></a>1. 什么是Fork/Join框架</h3><p><code>Fork/Join</code>框架是<code>Java7</code>提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/59644370-file_1494058071918_c704.png" alt=""></p>
<h3 id="2-工作窃取算法"><a href="#2-工作窃取算法" class="headerlink" title="2. 工作窃取算法"></a>2. 工作窃取算法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>工作窃取(work-stealing)算法是指某个线程从其他队列里窃取任务来执行。</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>线程1负责处理4个任务，线程2负责处理4个任务，当线程1任务处理完了，但线程2还在处理任务。干完活的线程与其闲着，不如去帮其他线程干活。于是它就去其他线程的队里里窃取一个任务来执行。<strong>在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务之间的竞争，通过会使用双端队列，被窃取任务线程永远从双端队列的头部执行任务，而窃取任务线程用于从双端队列的尾部拿任务。</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/32884348-file_1494058582643_ef6c.png" alt=""></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>充分利用线程进行并行计算，减少了线程间的竞争。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>在某些情况下，还是存在竞争，比如双端队列里只有一个任务时，并且算法会消耗更多的系统资源。</p>
<h3 id="3-Fork-Join框架的设计"><a href="#3-Fork-Join框架的设计" class="headerlink" title="3. Fork/Join框架的设计"></a>3. Fork/Join框架的设计</h3><p>如果让我们来设计一个Fork/Join框架，我们该如何设计？</p>
<p>步骤1 分割任务，首先我们需要有一个Fork类来把大任务分割成子任务，有可能子任务还是很大，所以还需要不停地分割，知道分割出的子任务足够小。</p>
<p>步骤2 执行任务并合并结果，分割的子任务分别放在双端队列里，然后几个启动线程分别从双端队列里获取任务执行，子任务执行完的结果都统一放在一个队列里，启动一个线程从队列里拿数据，然后合并这些数据。</p>
<p>Fork/Join框架提供以下两个子类：</p>
<ul>
<li>RecursiveAction: 用于没有返回结果的任务</li>
<li>RecursiveTask: 用于有返回结果的任务</li>
</ul>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class CountTask extends RecursiveTask&lt;Integer&gt; &#123;</div><div class="line">    private static final int THRESHOLD = 2;</div><div class="line">    private int start;</div><div class="line">    private int end;</div><div class="line"></div><div class="line">    public CountTask(int start, int end) &#123;</div><div class="line">        this.start = start;</div><div class="line">        this.end = end;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected Integer compute() &#123;</div><div class="line">        int sum = 0;</div><div class="line"></div><div class="line">        // 如果任务足够小就计算任务</div><div class="line">        boolean canCompute = (end - start) &lt;= THRESHOLD;</div><div class="line">        if (canCompute) &#123;</div><div class="line">            for (int i = start; i &lt;= end; i++) &#123;</div><div class="line">                sum += i;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 如果任务大于阈值,就分裂成两个子任务计算</div><div class="line">            int middle = (start + end) / 2;</div><div class="line">            CountTask leftTask = new CountTask(start,middle);</div><div class="line">            CountTask rightTask = new CountTask(middle + 1,end);</div><div class="line"></div><div class="line">            // 执行子任务</div><div class="line">            leftTask.fork();</div><div class="line">            rightTask.fork();</div><div class="line"></div><div class="line">            //等待子任务执行完,并得到其结果</div><div class="line">            int leftResult = leftTask.join();</div><div class="line">            int rightReult = rightTask.join();</div><div class="line"></div><div class="line">            // 合并子任务</div><div class="line">            sum = leftResult + rightReult;</div><div class="line">        &#125;</div><div class="line">        return sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ForkJoinPool forkJoinPool = new ForkJoinPool();</div><div class="line"></div><div class="line">        // 生成一个计算任务,负责计算1+2+3+4;</div><div class="line">        CountTask countTask = new CountTask(1,4);</div><div class="line"></div><div class="line">        // 执行一个任务</div><div class="line">        Future&lt;Integer&gt; result = forkJoinPool.submit(countTask);</div><div class="line">        try &#123;</div><div class="line">            System.out.println(result.get());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">        &#125;catch (ExecutionException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 10</div></pre></td></tr></table></figure>
<h3 id="5-Fork-Join框架的异常处理"><a href="#5-Fork-Join框架的异常处理" class="headerlink" title="5. Fork/Join框架的异常处理"></a>5. Fork/Join框架的异常处理</h3><p>ForkJoinTask在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以<code>ForkJoinTask</code>提供了<code>isCompletedAbonormally()</code>方法来检查任务是否已经抛出异常或已经被取消了。并且通过<code>ForkJoinTask</code>的<code>getException</code>方法获取异常。</p>
<h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol>
<li>java并发编程的艺术 by 方腾飞</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是Fork-Join框架&quot;&gt;&lt;a href=&quot;#1-什么是Fork-Join框架&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Fork/Join框架&quot;&gt;&lt;/a&gt;1. 什么是Fork/Join框架&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Fork/J
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之线程池</title>
    <link href="http://jianwl.com/2017/05/06/JAVA%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://jianwl.com/2017/05/06/JAVA之线程池/</id>
    <published>2017-05-06T05:45:11.000Z</published>
    <updated>2017-05-06T07:42:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前面试问到最多的问题就是线程池的实现原理，这一节我们将会来学习线程池实现原理及线程池的用法。</p>
<h3 id="1-线程池的优点"><a href="#1-线程池的优点" class="headerlink" title="1. 线程池的优点"></a>1. 线程池的优点</h3><p>Java中线程池是运用场景最多的并发框架，几乎所有需要异步或并发执行任务的程序都可以使用线程池，在开发过程中，合理地使用线程池能够带来3个好处。</p>
<ol>
<li>降低资源消耗，通过重复利用已创建的线程降低线程创建和销毁造成的消耗；</li>
<li>提高响应速度，当任务达到时，任务可以不需要等到线程创建就能立即执行。</li>
<li>提高线程的可管理性，线程是稀缺资源，如果无限制地创建、不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。但是，要做到合理利用线程池，必须对其原理了如指掌。</li>
</ol>
<h3 id="2-线程池的实现原理"><a href="#2-线程池的实现原理" class="headerlink" title="2. 线程池的实现原理"></a>2. 线程池的实现原理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/30502602-file_1494052172147_1313c.png" alt=""></p>
<p>当提交一个新任务到线程池，处理流程如下：</p>
<p>1）线程池判断核心线程池里的线程是否都在执行任务，如果不是，则创建一个新的工作线程来执行任务，如果核心线程池里的线程都在执行任务，则进入下一个流程。</p>
<p>2）线程池判断工作队列是否已满，如果工作队列已满，则将新提交的任务存储在这个工作队列里如果工作队列满了，则进入下一个流程。</p>
<p>3) 线程池判断线程池的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务，如果满了，则交给饱和策略来处理这个任务。</p>
<p>ThreadPoolExecutor执行的<code>execute()</code>方法的示意图：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/10523759-file_1494053473005_d83a.png" alt=""></p>
<p>1） 如果当前运行的线程少于coorPoolSize,则创建新线程来执行任务「执行这一步骤要获取全局锁」</p>
<p>2) 如果运行的线程等于或多余corePoolSize,则将任务加入BlockingQueue；</p>
<p>3）如果无法将任务加入BlockingQueue(队列已满)，则创建新的线程来处理任务「执行这一步骤需要获取全局锁」</p>
<p>4) 如果创建新线程将使当前运行的线程超过maxPool的数量，任务将被拒绝，并调用<code>RejectedExecutionHandle.rejectedExecution()</code>方法。</p>
<h3 id="3-线程池的使用"><a href="#3-线程池的使用" class="headerlink" title="3. 线程池的使用"></a>3. 线程池的使用</h3><h4 id="1-线程池的创建"><a href="#1-线程池的创建" class="headerlink" title="1) 线程池的创建"></a>1) 线程池的创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,milliseconds,runnableTaskQueue,handler);</div></pre></td></tr></table></figure>
<p>1) corePoolSize(线程池的基本大小)：当提交一个任务到线程池时，线程池会创建一个新的线程来执行任务。等到需要执行的任务数大于线程池基本大小时就不再创建。</p>
<p>2）runnableTaskQueue(任务队列): 用于保存等待执行的任务的阻塞队列,有以下几个可供选择：</p>
<ul>
<li>ArrayBlockingQueue: 一个基于数组结构的<strong>有界</strong>阻塞队列，此队列按FIFO对元素进行排序；</li>
<li>LinkedBlockingQueue: 一个基于链表结构的阻塞队列，此队列按FIFO排序元素；</li>
<li>SynchronousQueue: 一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态</li>
<li>PriorityBlockingQueue: 一个具有优先级的<strong>无限</strong>阻塞队列</li>
</ul>
<p>3）maximumPoolSize(线程池最大数量)：线程池允许创建的最大线程数。如果队列满了，并且已经创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。<strong>如果使用无界的任务，这个参数没效果。</strong></p>
<p>4）ThreadFactory: 用于设置创建线程工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># guava提供的ThreadFactoryBuilder</div><div class="line">new ThreadFactoryBuilder().setNameFormat(&quot;XX-task-%d&quot;).build();</div></pre></td></tr></table></figure>
<p>5）RejectedExecutionHandle(饱和策略)：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。</p>
<ul>
<li>AbortPolicy: 直接抛出异常(默认处理方式）</li>
<li>CallerRunsPolicy: 只用调用者所在线程来执行任务</li>
<li>DiscardOldestPolicy: 丢弃队列里的最近一个任务，并执行当前任务；</li>
<li>DiscardPolicy: 不处理，丢弃掉</li>
</ul>
<p>6）keepAliveTime(线程活动保持时间)：线程池的工作线程空闲后，保持存活的时间。如果任务多，单个任务执行时间短，可以调大时间，提高线程的利用率。</p>
<h4 id="2-实战"><a href="#2-实战" class="headerlink" title="2) 实战"></a>2) 实战</h4><h5 id="创建线程池-amp-提交任务"><a href="#创建线程池-amp-提交任务" class="headerlink" title="创建线程池 &amp; 提交任务"></a>创建线程池 &amp; 提交任务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static final int CORE_POOL_SIZE = 1;</div><div class="line">    private static final int MAXI_MUM_POOL_SIZE = 1;</div><div class="line">    private static final long KEEP_ALIVE_TIME = 1;</div><div class="line">    private static final TimeUnit TIME_UNIT = TimeUnit.SECONDS;</div><div class="line">    private static BlockingQueue&lt;Runnable&gt; workQueue = new ArrayBlockingQueue(1);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ThreadPoolExecutor threadPools = new ThreadPoolExecutor(CORE_POOL_SIZE,MAXI_MUM_POOL_SIZE,KEEP_ALIVE_TIME,TIME_UNIT,workQueue);</div><div class="line">        threadPools.execute(() -&gt; &#123;</div><div class="line">            System.out.println(&quot;ThreadName:&quot; + Thread.currentThread().getName() + &quot; currentTime =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;);</div><div class="line">        // 关闭线程池</div><div class="line">        threadPools.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// ThreadName:pool-1-thread-1 currentTime =&gt; 1494055661705</div></pre></td></tr></table></figure>
<h5 id="提交任务过多，触发饱和策略，默认执行AbortPolicy"><a href="#提交任务过多，触发饱和策略，默认执行AbortPolicy" class="headerlink" title="提交任务过多，触发饱和策略，默认执行AbortPolicy"></a>提交任务过多，触发饱和策略，默认执行<code>AbortPolicy</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static final int CORE_POOL_SIZE = 1;</div><div class="line">    private static final int MAXI_MUM_POOL_SIZE = 1;</div><div class="line">    private static final long KEEP_ALIVE_TIME = 1;</div><div class="line">    private static final TimeUnit TIME_UNIT = TimeUnit.SECONDS;</div><div class="line">    private static BlockingQueue&lt;Runnable&gt; workQueue = new ArrayBlockingQueue(1);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ThreadPoolExecutor threadPools = new ThreadPoolExecutor(CORE_POOL_SIZE,MAXI_MUM_POOL_SIZE,KEEP_ALIVE_TIME,TIME_UNIT,workQueue);</div><div class="line"></div><div class="line">        for (int i=0; i&lt;10000; i++) &#123;</div><div class="line">            threadPools.execute(() -&gt; &#123;</div><div class="line">                System.out.println(&quot;ThreadName:&quot; + Thread.currentThread().getName() + &quot; currentTime =&gt; &quot; + System.currentTimeMillis());</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 关闭线程池</div><div class="line">        threadPools.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/77334009-file_1494055810091_46b3.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java并发编程的艺术 by 方腾飞</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前面试问到最多的问题就是线程池的实现原理，这一节我们将会来学习线程池实现原理及线程池的用法。&lt;/p&gt;
&lt;h3 id=&quot;1-线程池的优点&quot;&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Lock的使用</title>
    <link href="http://jianwl.com/2017/05/06/Lock%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://jianwl.com/2017/05/06/Lock的使用/</id>
    <published>2017-05-06T02:01:05.000Z</published>
    <updated>2017-05-06T05:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-ReentrantLock实现同步"><a href="#1-ReentrantLock实现同步" class="headerlink" title="1. ReentrantLock实现同步"></a>1. ReentrantLock实现同步</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MyService myService = new MyService();</div><div class="line">        MyThread t1 = new MyThread(myService);</div><div class="line">        MyThread t2 = new MyThread(myService);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：</div><div class="line">// ThreadName = Thread-0(0)</div><div class="line">// ThreadName = Thread-0(1)</div><div class="line">// ThreadName = Thread-1(0)</div><div class="line">// ThreadName = Thread-1(1)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private Lock lock = new ReentrantLock();</div><div class="line">    public void testMethod()&#123;</div><div class="line">        lock.lock();</div><div class="line">        for (int i=0;i &lt; 5; i++) &#123;</div><div class="line">            System.out.println(&quot;ThreadName = &quot; + Thread.currentThread().getName() + &quot;(&quot; + i + &quot;)&quot;);</div><div class="line">        &#125;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程MyThread</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class MyThread extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public MyThread(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>描述</p>
<p>当前线程打印完毕之后，将锁进行释放，其他线程才可以继续打印。线程打印的数据是分组打印，因为当前线程已持有锁，但线程之间打印的顺序是随机的。</p>
<h4 id="2-使用Condition实现通知部分线程"><a href="#2-使用Condition实现通知部分线程" class="headerlink" title="2. 使用Condition实现通知部分线程"></a>2. 使用Condition实现通知部分线程</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        MyService myService = new MyService();</div><div class="line">        ThreadA t1 = new ThreadA(myService);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(myService);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">        Thread.sleep(3000);</div><div class="line">        myService.siginalAll_A();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 运行结果</div><div class="line">// begin awaitA 时间为 1494037693605 ThreadName = A</div><div class="line">// begin awaitB 时间为 1494037693606 ThreadName = B</div><div class="line">// singalAll_A 时间为 1494037696608 ThreadName = main</div><div class="line">// end awaitA 时间为 1494037696608 ThreadName = A</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private Lock lock = new ReentrantLock();</div><div class="line">    public Condition conditionA = lock.newCondition();</div><div class="line">    public Condition conditionB = lock.newCondition();</div><div class="line"></div><div class="line">    public void awaitA() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;begin awaitA 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionA.await();</div><div class="line">            System.out.println(&quot;end awaitA 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void awaitB() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;begin awaitB 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionB.await();</div><div class="line">            System.out.println(&quot;end awaitB 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void siginalAll_A() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;singalAll_A 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionA.signalAll();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void siginalAll_B() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;singalAll_B 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionB.signalAll();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadA(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.awaitA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadB(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.awaitB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-实现生产者-消费者模式"><a href="#3-实现生产者-消费者模式" class="headerlink" title="3) 实现生产者/消费者模式"></a>3) 实现生产者/消费者模式</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">        public static void main(String[] args) &#123;</div><div class="line">            MyService myService = new MyService();</div><div class="line">            ThreadA t1 = new ThreadA(myService);</div><div class="line">            t1.start();</div><div class="line">            ThreadB t2 = new ThreadB(myService);</div><div class="line">            t2.start();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private ReentrantLock lock = new ReentrantLock();</div><div class="line">    private Condition condition = lock.newCondition();</div><div class="line">    private boolean hasValue = false;</div><div class="line"></div><div class="line">    public void set()&#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            while (hasValue == true) &#123;</div><div class="line">                condition.await();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;打印❤&quot;);</div><div class="line">            hasValue = true;</div><div class="line">            condition.signal();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void get()&#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            while (hasValue == false) &#123;</div><div class="line">                condition.await();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;打印❤❤❤❤❤❤&quot;);</div><div class="line">            hasValue = false;</div><div class="line">            condition.signal();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadA(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">            myService.set();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadB(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">            myService.get();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-使用Condition实现顺序执行"><a href="#4-使用Condition实现顺序执行" class="headerlink" title="4) 使用Condition实现顺序执行"></a>4) 使用Condition实现顺序执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static volatile int nextPrintWho = 1;</div><div class="line">    private static ReentrantLock lock = new ReentrantLock();</div><div class="line">    private static final Condition conditionA = lock.newCondition();</div><div class="line">    private static final Condition conditionB = lock.newCondition();</div><div class="line">    private static final Condition conditionC = lock.newCondition();</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        Thread t1  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 1)&#123;</div><div class="line">                    conditionA.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadA (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 2;</div><div class="line">                conditionB.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t2  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 2)&#123;</div><div class="line">                    conditionB.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadB (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 3;</div><div class="line">                conditionC.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t3  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 3)&#123;</div><div class="line">                    conditionB.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadC (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 1;</div><div class="line">                conditionA.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// ThreadA (0)</div><div class="line">// ThreadA (1)</div><div class="line">// ThreadA (2)</div><div class="line">// ThreadB (0)</div><div class="line">// ThreadB (1)</div><div class="line">// ThreadB (2)</div><div class="line">// ThreadC (0)</div><div class="line">// ThreadC (1)</div><div class="line">// ThreadC (2)</div></pre></td></tr></table></figure>
<h4 id="5-ReentrantReadWriteLock"><a href="#5-ReentrantReadWriteLock" class="headerlink" title="5) ReentrantReadWriteLock"></a>5) ReentrantReadWriteLock</h4><p>ReetrantLock具有完全互斥排他的效果，即同一时间只有一个线程在执行<code>ReentrantLock.lock()</code>方法后面的任务，这样做虽然保证了实例变量的线程安全性，但效率却非常低下。在<code>JDK</code>中提供了一种读写锁<code>ReentrantReadWriteLock</code>类，使用它可以加快效率，在某些不需要操作实例变量的方法中，完全可以使用读写锁<code>ReentrantReadWriteLock</code>来提升该方法的代码运行速度。</p>
<p>读写锁表示有两个锁，一个是读操作相关的锁，也成为共享锁；另一个是写操作相关的锁，也叫排他锁。也就是多个读取锁之间互不排斥，读锁与写锁互斥，写锁与写锁互斥。在没有线程进行写入操作时，进行读取操作的多个线程都可以获取读锁，而进行写入操作的线程只有在获取写锁后，才能进行写操作。即多个线程可以同时进行读取操作，但同一时刻只允许一个线程进行写入操作。</p>
<h5 id="读读共享"><a href="#读读共享" class="headerlink" title="读读共享"></a>读读共享</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果: 同一时刻，两个线程分别都获取了读锁</div><div class="line">// 获取读锁A 1494047926771</div><div class="line">// 获取读锁B 1494047926771</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line">    public void read() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.readLock().lock();</div><div class="line">                System.out.println(&quot;获取读锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(1000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.readLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="写写互斥"><a href="#写写互斥" class="headerlink" title="写写互斥"></a>写写互斥</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：线程A释放写锁后，线程B获取写锁，才能执行；</div><div class="line">// 获取写锁A 1494048231414</div><div class="line">// 获取写锁B 1494048241416</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line">    public void write() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.writeLock().lock();</div><div class="line">                System.out.println(&quot;获取写锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.writeLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="读写互斥"><a href="#读写互斥" class="headerlink" title="读写互斥"></a>读写互斥</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：读锁释放后，获取写锁，才能进行写操作。</div><div class="line">// 获取读锁A 1494048498737</div><div class="line">// 获取写锁B 1494048508739</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    public void read() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.readLock().lock();</div><div class="line">                System.out.println(&quot;获取读锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.readLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void write() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.writeLock().lock();</div><div class="line">                System.out.println(&quot;获取写锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.writeLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java多线程编程核心技术 by 高洪岩</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;1-ReentrantLock实现同步&quot;&gt;&lt;a href=&quot;#1-ReentrantLock实现同步&quot; class=&quot;header
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>多线程间的通信</title>
    <link href="http://jianwl.com/2017/05/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://jianwl.com/2017/05/04/多线程间的通信/</id>
    <published>2017-05-04T14:21:01.000Z</published>
    <updated>2017-05-04T23:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体。本文将会来学习使用<code>wait/notify</code>实现线程间的通信。</p>
<h3 id="1-wait-notify机制的实现"><a href="#1-wait-notify机制的实现" class="headerlink" title="1. wait/notify机制的实现"></a>1. <code>wait/notify</code>机制的实现</h3><p>方法<code>wait</code>的作用是使当前执行代码的线程进行等待，<code>wait</code>方法是<code>Object</code>类的方法，该方法用来将当前线程置入“预执行队列”中，并且在<code>wait()</code>所在的代码行处停止执行，直到接到通知或被中断为止。在调用<code>wait()</code>之前，<strong>线程必须获取该对象的对象级别的锁，即只能在synchronized方法或同步块中调用wait()方法。</strong> 在执行<code>wait()</code>方法后，当前线程释放锁，在从<code>wait()</code>放回前，线程与其他线程竞争重新获得锁。<strong>如果调用wait()时，没有持有适当的锁，则抛出illegalMonitorStateException，它是RuntimeException的子类，因此不需要try-catch语句进行捕捉。</strong></p>
<p><code>notify()</code>方法也要在<strong>synchronized或同步块中调用</strong>，即在调用前，线程也必须获得该对象的对象级别锁。如果调用<code>notify()</code>时没有持有适当的锁，也会抛出<code>illegalMonitorStateException</code>。该方法用来通知那些可能等待该对象的对象锁的其他线程，如果有多个线程等待，则由线程规划器随机挑选出其中一个呈wait状态的线程，对其发出通知notify，并使它等待获取该对象的对象锁。需要说明的是，<strong>在执行notify()方法后，当前线程不会马上释放该对象锁，呈wait状态的线程也并不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，也就是退出synchronized代码块后，当前线程才会释放锁，而呈wait状态所在的线程才可以获取对象锁。</strong> 当第一个获得该对象锁的wait线程执行完毕之后，它会释放该对象锁，如果此时该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有该对象的通知，还会继续阻塞在wait状态，直到这个对象发出一个<code>notify或notifyAll</code>。</p>
<p>用一句话来总结wait和notify: wait是线程停止运行，而notify是停止的线程继续运行。</p>
<h3 id="2-实战"><a href="#2-实战" class="headerlink" title="2. 实战"></a>2. 实战</h3><h4 id="1）不在同步方法内执行wait，报错"><a href="#1）不在同步方法内执行wait，报错" class="headerlink" title="1）不在同步方法内执行wait，报错"></a>1）不在同步方法内执行<code>wait</code>，报错</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/59950818-file_1493909988683_133c4.png" alt=""></p>
<h4 id="2）暂停线程wait"><a href="#2）暂停线程wait" class="headerlink" title="2）暂停线程wait"></a>2）暂停线程<code>wait</code></h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/39178586-file_1493910208703_13eb9.png" alt=""></p>
<h4 id="3-notify-wait"><a href="#3-notify-wait" class="headerlink" title="3) notify/wait"></a>3) <code>notify/wait</code></h4><p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Object object;</div><div class="line">    public ThreadA(Object object)&#123;</div><div class="line">        super();</div><div class="line">        this.object = object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try&#123;</div><div class="line">            synchronized (object)&#123;</div><div class="line">                System.out.println(&quot;start wait time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">                object.wait();</div><div class="line">                System.out.println(&quot;end wait time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread&#123;</div><div class="line">    private Object object;</div><div class="line">    public ThreadB(Object object)&#123;</div><div class="line">        super();</div><div class="line">        this.object = object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (object)&#123;</div><div class="line">            System.out.println(&quot;start notify time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            object.notify();</div><div class="line">            System.out.println(&quot;end notify time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try&#123;</div><div class="line">            Object object = new Object();</div><div class="line">            ThreadA t1 = new ThreadA(object);</div><div class="line">            t1.start();</div><div class="line">            Thread.sleep(3000);</div><div class="line">            ThreadB t2 = new ThreadB(object);</div><div class="line">            t2.start();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// start wait time =&gt; 1493910683445</div><div class="line">// start notify time =&gt; 1493910686449</div><div class="line">// end notify time =&gt; 1493910686449</div><div class="line">// end wait time =&gt; 1493910686449</div></pre></td></tr></table></figure>
<p>特别注意一点，执行notify方法时，需要等待执行notify的线程，退出synchronized方法，抛出对象锁，wait获取对象锁，才能唤醒被wait的线程。</p>
<h3 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h3><ol>
<li>java多线程核心技术 by 高洪岩</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体。本文将会来学习使用&lt;code&gt;wait/notify&lt;/cod
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>对象及变量的并发访问</title>
    <link href="http://jianwl.com/2017/05/03/%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/"/>
    <id>http://jianwl.com/2017/05/03/对象及变量的并发访问/</id>
    <published>2017-05-03T14:11:59.000Z</published>
    <updated>2017-05-03T16:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-线程不安全"><a href="#1-线程不安全" class="headerlink" title="1) 线程不安全"></a>1) 线程不安全</h4><p>共享变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class HasSelfPrivateNum &#123;</div><div class="line">    private int num = 0;</div><div class="line">    public void addI(String username) &#123;</div><div class="line">        try &#123;</div><div class="line">            if (username.equals(&quot;a&quot;)) &#123;</div><div class="line">                num = 100;</div><div class="line">                System.out.println(&quot;a set over!&quot;);</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125;else &#123;</div><div class="line">                num = 200;</div><div class="line">                System.out.println(&quot;b set over!&quot;);</div><div class="line">            &#125;</div><div class="line">            System.out.println(username + &quot; num = &quot; + num);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private HasSelfPrivateNum numRef;</div><div class="line"></div><div class="line">    public ThreadA(HasSelfPrivateNum numRef) &#123;</div><div class="line">        super();</div><div class="line">        this.numRef = numRef;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        numRef.addI(&quot;a&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private HasSelfPrivateNum numRef;</div><div class="line"></div><div class="line">    public ThreadB(HasSelfPrivateNum numRef) &#123;</div><div class="line">        super();</div><div class="line">        this.numRef = numRef;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        numRef.addI(&quot;b&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        HasSelfPrivateNum numRef = new HasSelfPrivateNum();</div><div class="line">        ThreadA t1 = new ThreadA(numRef);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(numRef);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结果：</div><div class="line">// a set over!</div><div class="line">// b set over!</div><div class="line">// b num = 200</div><div class="line">// a num = 200</div></pre></td></tr></table></figure>
<p>描述</p>
<p>线程A执行run方法，运行到<code>Thread.sleep(2000);</code>这个语句时，线程B也执行run方法，运行到<code>System.out.println(username + &quot; num = &quot; + num);</code>，此时共享变量已被线程B覆盖，再回到线程A时，输出的共享变量值，实际是线程B的赋值结果。</p>
<p>解决</p>
<p>共享变量<code>addI</code>方法前增加<code>synchronized</code>关键字即可。</p>
<h4 id="2-可重入锁"><a href="#2-可重入锁" class="headerlink" title="2) 可重入锁"></a>2) 可重入锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    public synchronized void service1()&#123;</div><div class="line">        System.out.println(&quot;service1&quot;);</div><div class="line">        service2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void service2()&#123;</div><div class="line">        System.out.println(&quot;service2&quot;);</div><div class="line">        service3();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void service3()&#123;</div><div class="line">        System.out.println(&quot;service3&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       new Thread(() -&gt; new Service().service1()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// service1</div><div class="line">// service2</div><div class="line">// service3</div></pre></td></tr></table></figure>
<p>描述</p>
<p>可重入锁的概念是，自己可以再次获取自己内部锁，比如有线程A获得了某个对象锁，此时对象锁还没有释放，当其再次获取这个对象的锁的时候还是可以获取的，如果<strong>不可锁重入的话</strong>，就会造成死锁。</p>
<h4 id="3）出现异常，锁自动释放"><a href="#3）出现异常，锁自动释放" class="headerlink" title="3）出现异常，锁自动释放"></a>3）出现异常，锁自动释放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    public synchronized void testMethod() &#123;</div><div class="line">        if (Thread.currentThread().getName().equals(&quot;A&quot;)) &#123;</div><div class="line">            System.out.println(&quot;ThreadName = &quot; + Thread.currentThread().getName() + &quot; run Time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            int i = 1;</div><div class="line">            while (i == 1) &#123;</div><div class="line">                if((&quot;&quot; + Math.random()).substring(0,8).equals(&quot;0.123456&quot;)) &#123;</div><div class="line">                    Integer.parseInt(&quot;A&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;else &#123;</div><div class="line">            System.out.println(&quot;ThreadName = B run Time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadA(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadB(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service,&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadA t2 = new ThreadA(service,&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/55553957-file_1493826471587_1272a.png" alt=""></p>
<p>描述</p>
<p>线程A出现异常并释放锁，线程B进入方法，正常打印，可知出现异常是锁被自动释放了。</p>
<h4 id="4-同步synchronized无限等待与解决"><a href="#4-同步synchronized无限等待与解决" class="headerlink" title="4) 同步synchronized无限等待与解决"></a>4) 同步synchronized无限等待与解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">   public synchronized void methodA()&#123;</div><div class="line">       System.out.println(&quot;methodA begin&quot;);</div><div class="line">       boolean isContinueRun = true;</div><div class="line">       while (isContinueRun) &#123;&#125;</div><div class="line">       System.out.println(&quot;methodA end&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">    public synchronized void methodB()&#123;</div><div class="line">        System.out.println(&quot;methodB begin&quot;);</div><div class="line">        System.out.println(&quot;methodB end&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadA(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.methodA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadB(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.methodB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service,&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(service,&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">methodA begin</div></pre></td></tr></table></figure>
<p>描述</p>
<p>上述情况，线程B永远也得不到运行的机会，锁死了。</p>
<p>解决</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    Object objectA = new Object();</div><div class="line">    public void methodA() &#123;</div><div class="line">        synchronized (objectA) &#123;</div><div class="line">            System.out.println(&quot;methodA begin&quot;);</div><div class="line">            boolean isContinueRun = true;</div><div class="line">            while (isContinueRun) &#123;</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;methodA end&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Object objectB = new Object();</div><div class="line">    public void methodB() &#123;</div><div class="line">        synchronized (objectB) &#123;</div><div class="line">            System.out.println(&quot;methodB begin&quot;);</div><div class="line">            System.out.println(&quot;methodB end&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用同步块，可以解决以上问题。</p>
<h4 id="5）volatile-解决异步死循环"><a href="#5）volatile-解决异步死循环" class="headerlink" title="5）volatile 解决异步死循环"></a>5）volatile 解决异步死循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RunThread extends Thread &#123;</div><div class="line">    private boolean isRunning = true;</div><div class="line"></div><div class="line">    public boolean isRunning() &#123;</div><div class="line">        return isRunning;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRunning(boolean running) &#123;</div><div class="line">        isRunning = running;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;进入run了&quot;);</div><div class="line">        while (isRunning == true)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;线程被停止了!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try&#123;</div><div class="line">            RunThread thread = new RunThread();</div><div class="line">            thread.start();</div><div class="line">            Thread.sleep(1000);</div><div class="line">            thread.setRunning(false);</div><div class="line">            System.out.println(&quot;已经赋值为false&quot;);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 进入run了</div><div class="line">// 已经赋值为false</div></pre></td></tr></table></figure>
<p>描述</p>
<p>运行后出现死循环效果，<code>System.out.println(&quot;线程被停止了!&quot;);</code> 这句代码永远不会执行。变量<code>isRunning</code>存在于公共堆栈及线程的私有堆栈中，执行<code>thread.setRunning(false);</code>只更新公共堆栈的<code>isRunning</code>，而私有堆栈中<code>isRunning</code>的值一直为<code>true</code>。</p>
<p>解决</p>
<p>设置变量<code>isRunning</code>时，加个关键字<code>volatitle</code>，它的作用就是当线程访问<code>isRunning</code>这个变量时，强制性从公共堆栈中进行取值。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/69232462-file_1493829649793_b809.png" alt=""></p>
<h4 id="6-synchronized-和-volatile区别"><a href="#6-synchronized-和-volatile区别" class="headerlink" title="6) synchronized 和 volatile区别"></a>6) synchronized 和 volatile区别</h4><ol>
<li>关键字<code>volatile</code>是线程同步的轻量级实现，所以<code>volatile</code>性能肯定比<code>synchronized</code>要好，并且<code>volatile</code>只能修饰于变量，而<code>synchronized</code>可以修饰方法、以及代码块。随着<code>JDK</code>新版本的发布，<code>synchronized</code>关键字在执行效率上得到很大的提升。</li>
<li>多线程访问volatile不会发生阻塞，而<code>synchronized</code>会出现阻塞。</li>
<li>volatile能保证数据的可见性，但不能保证原子性；而synchronized可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公共内存中的数据做同步。</li>
<li>再次重申，关键字volatile解决的是多个线程之间的可见性；而synchronized解决的是，多个线程之间访问资源的同步性。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java多线程编程核心技术 by 高洪岩</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;1-线程不安全&quot;&gt;&lt;a href=&quot;#1-线程不安全&quot; class=&quot;headerlink&quot; title=&quot;1) 线程不安全&quot;&gt;&lt;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>多线程之join</title>
    <link href="http://jianwl.com/2017/05/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bjoin/"/>
    <id>http://jianwl.com/2017/05/02/多线程之join/</id>
    <published>2017-05-02T15:16:31.000Z</published>
    <updated>2017-05-03T00:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>thread.join</code>把指定线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程，比如在线程B中调用线程A的join方法，直到线程A执行完毕后，才会继续执行线程B。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t.join(); // 线程t执行完毕之后，再执行B线程，假设当前为线程B；</div><div class="line">t.join(1000); // 等待t线程1000毫秒之后，再执行线程B，假设当前为线程B</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-thread-join"><a href="#1-thread-join" class="headerlink" title="1. thread.join()"></a>1. thread.join()</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/25776764-file_1493769433016_726d.png" alt=""></p>
<p>上述代码可能出现两种结果，主线程执行<code>System.out.println(&quot;== main ==&quot;)</code>这条语句时，子线程可能已运行也可能没有。使用<code>join</code>方法，能够让子线程，在执行主线程之前执行完毕。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/22949143-file_1493769510138_e7bf.png" alt="">   </p>
<h4 id="2-thread-join-毫秒"><a href="#2-thread-join-毫秒" class="headerlink" title="2. thread.join(毫秒)"></a>2. thread.join(毫秒)</h4><h5 id="子线程t等待100毫秒之后，再执行主线程"><a href="#子线程t等待100毫秒之后，再执行主线程" class="headerlink" title="子线程t等待100毫秒之后，再执行主线程"></a>子线程t等待100毫秒之后，再执行主线程</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/64963858-file_1493769576917_7717.png" alt=""></p>
<h5 id="子线程t等待1000毫秒之后，再执行主线程"><a href="#子线程t等待1000毫秒之后，再执行主线程" class="headerlink" title="子线程t等待1000毫秒之后，再执行主线程"></a>子线程t等待1000毫秒之后，再执行主线程</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/94693111-file_1493769617860_8412.png" alt="">                                                                                                              </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;thread.join&lt;/code&gt;把指定线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程，比如在线程B中调用线程A的join方法，直到线程A执行完毕后，才会继续执行线程B。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局入门(二)</title>
    <link href="http://jianwl.com/2017/05/01/Flex%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <id>http://jianwl.com/2017/05/01/Flex布局入门-二/</id>
    <published>2017-05-01T05:22:50.000Z</published>
    <updated>2017-05-01T11:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章介绍了Flex布局的语法，今天介绍常见布局的Flex写法。</p>
<p>你会看到，不管是什么布局，Flex往往都可以几行命令搞定。</p>
<p><img src="http://i1.piimg.com/567571/2f98d7972439d234.png" alt=""></p>
<h3 id="骰子的布局"><a href="#骰子的布局" class="headerlink" title="骰子的布局"></a>骰子的布局</h3><p>骰子的一面，最多可以放置9个点。</p>
<p><img src="http://i4.buimg.com/567571/5a8e1061daaf4aee.png" alt=""></p>
<p>下面，就来看看Flex如何实现，从1个点到9个点的布局，你可以到<a href="http://codepen.io/LandonSchropp/pen/KpzzGo" target="_blank" rel="external">codepen</a>查看Demo.</p>
<p><img src="http://i2.muimg.com/567571/111c729a8c94fa04.png" alt=""></p>
<p>如果不加说明，本机的HTML模板益率如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">	&lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，div元素(代表骰子的一个面)是Flex容器，span元素(代表一个点)是Flex项目，如果有多个项目，就要添加多个span元素。一次类推。</p>
<h4 id="1-单项目"><a href="#1-单项目" class="headerlink" title="1) 单项目"></a>1) 单项目</h4><p>首先，只有左上角1个点的情况，Flex布局默认就是首行左对齐，所以一行代码就过了。</p>
<p><img src="http://i1.piimg.com/567571/fa9f94ebcae1b9f6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置项目的对齐方式，就能实现居中对齐和右对齐。</p>
<p><img src="http://i1.piimg.com/567571/fd942caa2b481a06.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/fe59e20f993b6e11.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置交叉轴对齐方式，可以垂直移动主轴</p>
<p><img src="http://i1.piimg.com/567571/c4477f6e9d87aa13.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/fbd32760f95ab206.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/d195c044863d8f54.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/b1073016bbc8bdb6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: flex-end;</div><div class="line">	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-双项目"><a href="#2-双项目" class="headerlink" title="2) 双项目"></a>2) 双项目</h4><p><img src="http://i1.piimg.com/567571/fc13c83dc1527a55.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">  	justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/7aa8f2626292a919.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/1802864126ddaced.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">  	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/ad246ae685532521.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">  	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/2ad96bcc4bf29343.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 父元素的第二个子元素的item,居中：</div><div class="line">.item:nth-child(2) &#123;</div><div class="line">  align-self: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/fbaafaec0a26603d.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(2) &#123;</div><div class="line">  align-self: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-三项目"><a href="#3-三项目" class="headerlink" title="3) 三项目"></a>3) 三项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/29159668-file_1493621836732_7df3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(2) &#123;</div><div class="line">	align-self: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(3) &#123;</div><div class="line">	align-self: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-四项目"><a href="#4-四项目" class="headerlink" title="4) 四项目"></a>4) 四项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/94995716-file_1493621929171_60b5.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  justify-content: flex-end;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/4746522-file_1493621982783_1f7b.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.column &#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display: flex;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-六项目"><a href="#5-六项目" class="headerlink" title="5) 六项目"></a>5) 六项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/55582845-file_1493622078669_9d03.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/90816185-file_1493622163027_fa48.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/13462133-file_1493622255129_e5ad.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row&#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(2)&#123;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(3)&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-九项目"><a href="#6-九项目" class="headerlink" title="6) 九项目"></a>6) 九项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/43687614-file_1493622306258_14ec8.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>最简单的网格布局，就是平均分布，在容器里面平均分配空间，跟上面的骰子布局很像，但是需要设置项目的自动缩放。</p>
<h4 id="1-基本网格布局"><a href="#1-基本网格布局" class="headerlink" title="1) 基本网格布局"></a>1) 基本网格布局</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/61368010-file_1493635693058_8d98.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.Grid &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-百分比布局"><a href="#2-百分比布局" class="headerlink" title="2) 百分比布局"></a>2) 百分比布局</h4><p>某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/2000422-file_1493635816791_7197.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of4&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of3&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.Grid &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-full &#123;</div><div class="line">  flex: 0 0 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of2 &#123;</div><div class="line">  flex: 0 0 50%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of3 &#123;</div><div class="line">  flex: 0 0 33.3333%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of4 &#123;</div><div class="line">  flex: 0 0 25%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>圣杯布局(Holy Grail Layout)指的是一种最常见的网站布局，页面从上到下，分成三个部分：头部(header)，躯干(body)，尾部(footer)。其中躯干又水平分成三栏，从左到右为:导航、主栏、副栏。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/32149229-file_1493636028511_11eac.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body class=&quot;HolyGrail&quot;&gt;</div><div class="line">  &lt;header&gt;...&lt;/header&gt;</div><div class="line">  &lt;div class=&quot;HolyGrail-body&quot;&gt;</div><div class="line">    &lt;main class=&quot;HolyGrail-content&quot;&gt;...&lt;/main&gt;</div><div class="line">    &lt;nav class=&quot;HolyGrail-nav&quot;&gt;...&lt;/nav&gt;</div><div class="line">    &lt;aside class=&quot;HolyGrail-ads&quot;&gt;...&lt;/aside&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;footer&gt;...&lt;/footer&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.HolyGrail &#123;</div><div class="line">  display: flex;</div><div class="line">  min-height: 100vh;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line">header,</div><div class="line">footer &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-body &#123;</div><div class="line">  display: flex;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-content &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-nav, .HolyGrail-ads &#123;</div><div class="line">  /* 两个边栏的宽度设为12em */</div><div class="line">  flex: 0 0 12em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-nav &#123;</div><div class="line">  /* 导航放到最左边 */</div><div class="line">  order: -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是小屏幕，躯干的三栏会自动变为垂直叠加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@media (max-width: 768px) &#123;</div><div class="line">  .HolyGrail-body &#123;</div><div class="line">    flex-direction: column;</div><div class="line">    flex: 1;</div><div class="line">  &#125;</div><div class="line">  .HolyGrail-nav,</div><div class="line">  .HolyGrail-ads,</div><div class="line">  .HolyGrail-content &#123;</div><div class="line">    flex: auto;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输入框的布局"><a href="#输入框的布局" class="headerlink" title="输入框的布局"></a>输入框的布局</h3><p>我们常常需要在输入框的前方提示添加提示，后方添加按钮。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/93489209-file_1493636187353_b89c.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;InputAddOn&quot;&gt;</div><div class="line">  &lt;span class=&quot;InputAddOn-item&quot;&gt;...&lt;/span&gt;</div><div class="line">  &lt;input class=&quot;InputAddOn-field&quot;&gt;</div><div class="line">  &lt;button class=&quot;InputAddOn-item&quot;&gt;...&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.InputAddOn &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.InputAddOn-field &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="悬挂式布局"><a href="#悬挂式布局" class="headerlink" title="悬挂式布局"></a>悬挂式布局</h3><p>有时，主栏的左侧或右侧，需要添加一个图片栏。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/41165031-file_1493636283290_9b33.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Media&quot;&gt;</div><div class="line">  &lt;img class=&quot;Media-figure&quot; src=&quot;&quot; alt=&quot;&quot;&gt;</div><div class="line">  &lt;p class=&quot;Media-body&quot;&gt;...&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.Media &#123;</div><div class="line">  display: flex;</div><div class="line">  align-items: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Media-figure &#123;</div><div class="line">  margin-right: 1em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Media-body &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="固定的底栏"><a href="#固定的底栏" class="headerlink" title="固定的底栏"></a>固定的底栏</h3><p>有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间，这时可以采用Flex布局，让底栏总是出现在页面的底部。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/14451373-file_1493636429347_15e58.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body class=&quot;Site&quot;&gt;</div><div class="line">  &lt;header&gt;...&lt;/header&gt;</div><div class="line">  &lt;main class=&quot;Site-content&quot;&gt;...&lt;/main&gt;</div><div class="line">  &lt;footer&gt;...&lt;/footer&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.Site &#123;</div><div class="line">  display: flex;</div><div class="line">  min-height: 100vh;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Site-content &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>每行的项目数固定，会自行分行。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/51166331-file_1493636541332_edb5.png" alt=""></p>
<p>CSS的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 150px;</div><div class="line">  background-color: black;</div><div class="line">  display: flex;</div><div class="line">  flex-flow: row wrap;</div><div class="line">  align-content: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.child &#123;</div><div class="line">  box-sizing: border-box;</div><div class="line">  background-color: white;</div><div class="line">  flex: 0 0 25%;</div><div class="line">  height: 50px;</div><div class="line">  border: 1px solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇 by 阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇文章介绍了Flex布局的语法，今天介绍常见布局的Flex写法。&lt;/p&gt;
&lt;p&gt;你会看到，不管是什么布局，Flex往往都可以几行命令搞定
    
    </summary>
    
      <category term="CSS" scheme="http://jianwl.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://jianwl.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局入门(一)</title>
    <link href="http://jianwl.com/2017/05/01/Flex%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8-%E4%B8%80/"/>
    <id>http://jianwl.com/2017/05/01/Flex布局入门-一/</id>
    <published>2017-05-01T02:44:08.000Z</published>
    <updated>2017-05-01T04:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网页布局(layout)是<code>CSS</code>的一个重点应用</p>
<p><img src="http://i2.muimg.com/567571/93944116677e563b.png" alt=""></p>
<p>布局的传统解决方案，基于盒状模型，依赖<code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便。比如，垂直居中就不容易实现。</p>
<p>2009年，W3C提出一种新的方案 – Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<p>Flex布局将成为未来布局的首选方案，本文介绍它的语法，下一篇文章给出常见布局的<code>Flex</code>写法。</p>
<h3 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h3><p><code>Flex</code>是<code>Flexible Box</code>，意为“弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>行内元素也可以使用Flex布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Webkit内核浏览器，必须加上<code>-webkit</code>前缀。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: -webkit-flex; /* Safari */</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性都将失效。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>采用Flex布局的元素，称为Flex容器(flex container)，简称“容器”。它的所有子元素自动称为容器成员，称为Flex项目(flex item)，简称“项目”。</p>
<p><img src="http://i2.muimg.com/567571/288f8307e2da445e.png" alt=""></p>
<p>容器默认存在两根轴：水平的主轴(main axis)和垂直的交叉轴(crow axis)。主轴的开始位置(与边框的交叉点)叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认延主轴排序，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><p>以下6个属性值设置在容器上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flex-direction</div><div class="line">flex-wrap</div><div class="line">flex-flow</div><div class="line">jusitify-content</div><div class="line">align-items</div><div class="line">align-content</div></pre></td></tr></table></figure>
<h4 id="1-flex-direction属性"><a href="#1-flex-direction属性" class="headerlink" title="1) flex-direction属性"></a>1) flex-direction属性</h4><p><code>flex-direction</code>属性决定主轴的方向(即项目的排列方向)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/3ea0e291bfd8a635.png" alt=""></p>
<p>它可能有4个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">row(默认值)： 主轴的水平方向，起点在左端。</div><div class="line"></div><div class="line">row-reverse: 主轴的水平方向，起点在右端。</div><div class="line"></div><div class="line">column: 主轴为垂直方向，起点在上沿</div><div class="line"></div><div class="line">column-reverse: 主轴为垂直方向，起点在下沿。</div></pre></td></tr></table></figure>
<h4 id="2）flex-wrap属性"><a href="#2）flex-wrap属性" class="headerlink" title="2）flex-wrap属性"></a>2）flex-wrap属性</h4><p>默认情况下，项目都排在一条线(又称为“轴线”)上，<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p><img src="http://i4.buimg.com/567571/8572c78874a5c6b3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能取三个值:</p>
<p>(1) <code>nowrap</code>(默认)：不换行。</p>
<p><img src="http://i4.buimg.com/567571/afd3df650ad2b30d.png" alt=""></p>
<p>(2) <code>wrap</code>：换行，第一行在上方</p>
<p><img src="http://i1.piimg.com/567571/f99a004cf748aaaf.png" alt=""></p>
<p>(3) <code>wrap-reverse</code>: 换行，第一行在下方。</p>
<p><img src="http://i4.buimg.com/567571/c748e0c92c0a3fa5.png" alt=""></p>
<h4 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3) flex-flow"></a>3) flex-flow</h4><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-justify-content属性"><a href="#4-justify-content属性" class="headerlink" title="4) justify-content属性"></a>4) justify-content属性</h4><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/75861f2b490af1a7.png" alt=""></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关，下面假设主轴为从左到右。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">flex-start(默认值)： 左对齐</div><div class="line"></div><div class="line">flex-end: 右对齐</div><div class="line"></div><div class="line">center: 居中</div><div class="line"></div><div class="line">space-between: 两端对齐，项目之间的间隔都相等</div><div class="line"></div><div class="line">space-around: 每个项目两侧的间隔相等，所以项目之间的间隔比项目与边框的间隔大一倍。</div></pre></td></tr></table></figure>
<h4 id="5-align-items属性"><a href="#5-align-items属性" class="headerlink" title="5) align-items属性"></a>5) align-items属性</h4><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/6d0bc32cb1eb12fc.png" alt=""></p>
<p>它可能取5个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flex-start: 交叉轴的起点对齐。</div><div class="line">flex-end: 交叉轴的终点对齐。</div><div class="line">center: 交叉轴的中点对齐。</div><div class="line">baseline: 项目的第一行文字的基线对齐。</div><div class="line">stretch(默认值): 如果项目未设置高度或设为auto，将占满整个容器的高度。</div></pre></td></tr></table></figure>
<h4 id="6）align-content属性"><a href="#6）align-content属性" class="headerlink" title="6）align-content属性"></a>6）align-content属性</h4><p><code>align-content</code>属性定义了多跟轴线的对齐方式，如果项目只有一个轴线，该属性不起作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/f8e7c4d69794f23a.png" alt=""></p>
<p>该属性值可能取6个值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flex-start: 与交叉轴的起点对齐。</div><div class="line">flex-end: 与交叉轴的终点对齐。</div><div class="line">center: 与交叉轴的中点对齐。</div><div class="line">space-between:与交叉轴两端对齐，轴线之间的间隔平均分布</div><div class="line">space-around:每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。</div><div class="line">stretch(默认值): 轴线占满整个交叉轴。</div></pre></td></tr></table></figure>
<h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><p>以下6个属性设置在项目上.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">order</div><div class="line"></div><div class="line">flex-grow</div><div class="line"></div><div class="line">flex-shrink</div><div class="line"></div><div class="line">flex-basis</div><div class="line"></div><div class="line">flex</div><div class="line"></div><div class="line">align-self</div></pre></td></tr></table></figure>
<h4 id="1-order属性"><a href="#1-order属性" class="headerlink" title="1) order属性"></a>1) order属性</h4><p><code>order</code>属性定义项目的排列顺序，数值越小，排列越靠前，默认为0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line"> order: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/7f587ff9c90bbb53.png" alt=""></p>
<h4 id="2-flex-grow属性"><a href="#2-flex-grow属性" class="headerlink" title="2) flex-grow属性"></a>2) flex-grow属性</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-grow: &lt;number&gt;; /* default */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/1970f38cd94a26f5.png" alt=""></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间(如果有的话)，如果一个项目的<code>flex-grow</code>属性为2，其他属性都为1，则牵着占据的剩余空间将比其他项多一倍。</p>
<h4 id="3）flex-shrink属性"><a href="#3）flex-shrink属性" class="headerlink" title="3）flex-shrink属性"></a>3）flex-shrink属性</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-shrink: &lt;number&gt;; /* default 1*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/359ac6d037d1a438.png" alt=""></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小，如果一个项目的<code>flex-shrink</code>属性为0，其他项都为1，则空间不足时，前者会不断缩小。负值对该属性无效。</p>
<h4 id="4）flex-basis属性"><a href="#4）flex-basis属性" class="headerlink" title="4）flex-basis属性"></a>4）flex-basis属性</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间(main size)。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>,即项目的本来大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值(比如350px)，则项目将占据固定空间。</p>
<h4 id="5）flex属性"><a href="#5）flex属性" class="headerlink" title="5）flex属性"></a>5）flex属性</h4><p><code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>，后两个属性可选。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex: none | [&lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该属性有两个快捷键：<code>auto</code>(<code>1 1 auto</code>)和none(<code>0 0  auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="6-align-self-属性"><a href="#6-align-self-属性" class="headerlink" title="6) align-self 属性"></a>6) align-self 属性</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性，默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/ace048e9e73b8add.png" alt=""></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程 by 阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;网页布局(layout)是&lt;code&gt;CSS&lt;/code&gt;的一个重点应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.muimg.
    
    </summary>
    
      <category term="CSS" scheme="http://jianwl.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://jianwl.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS入门</title>
    <link href="http://jianwl.com/2017/04/29/CSS%E5%85%A5%E9%97%A8/"/>
    <id>http://jianwl.com/2017/04/29/CSS入门/</id>
    <published>2017-04-29T02:05:00.000Z</published>
    <updated>2017-04-29T07:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是CSS"><a href="#1-什么是CSS" class="headerlink" title="1. 什么是CSS"></a>1. 什么是CSS</h3><p><code>CSS</code>是一门指定文档该如何呈现给用户的语言。当你的浏览器请求页面时，服务器会查询数据库生成文档，将散落在众多文件中的文档碎片搜集起来。 </p>
<p><code>创建一个文档范例：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">		&lt;title&gt;Sample document&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;strong&gt;c&lt;/strong&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="2-为何使用CSS？"><a href="#2-为何使用CSS？" class="headerlink" title="2.为何使用CSS？"></a>2.为何使用CSS？</h3><p>CSS将文档信息的内容和如何展示它的细节相分离，使得避免重复、更容易维护，同时实现为了不同的目的，使用不同的样式而内容相同。</p>
<h4 id="1-连接文档和样式表"><a href="#1-连接文档和样式表" class="headerlink" title="1) 连接文档和样式表"></a>1) 连接文档和样式表</h4><p>在<code>style1.css</code>文件中保存如下行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strong &#123;color:red;&#125;</div></pre></td></tr></table></figure>
<p>在文档中引入样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">		&lt;title&gt;Sample document&lt;/title&gt;</div><div class="line">		&lt;link rel=&quot;stylesheet&quot; href=&quot;style1.css&quot;&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;strong&gt;c&lt;/strong&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="3-CSS基础知识"><a href="#3-CSS基础知识" class="headerlink" title="3. CSS基础知识"></a>3. CSS基础知识</h3><h4 id="1-盒模型"><a href="#1-盒模型" class="headerlink" title="1) 盒模型"></a>1) 盒模型</h4><p><img src="http://i2.muimg.com/567571/867bf24d7d50d14b.png" alt=""></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> width</td>
<td>内容盒的宽度</td>
</tr>
<tr>
<td> height</td>
<td>内容盒的高度</td>
</tr>
<tr>
<td> padding</td>
<td>内边距，内容盒的外边缘与边框的内边缘之间</td>
</tr>
<tr>
<td> border</td>
<td>位于内边距的外边缘以及外边距的内边缘之间</td>
</tr>
<tr>
<td> margin</td>
<td>外边距</td>
</tr>
</tbody>
</table>
<p> <code>实战</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	body &#123;</div><div class="line">	  margin: 0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	#wrapper * &#123;</div><div class="line">	  padding: 20px;</div><div class="line">	  font-size: 20px;</div><div class="line">	  border: 20px solid rgba(0,0,0,0.5);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* specific boxes */</div><div class="line"></div><div class="line">	#wrapper header, #wrapper footer &#123;</div><div class="line">	  background-color: blue;</div><div class="line">	  color: white;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	#wrapper main &#123;</div><div class="line">	  background-color: yellow;</div><div class="line">	&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div id=&quot;wrapper&quot;&gt;</div><div class="line">		  &lt;header&gt;Header&lt;/header&gt;</div><div class="line">		  &lt;main&gt;Main content&lt;/main&gt;</div><div class="line">		  &lt;footer&gt;Footer&lt;/footer&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i1.piimg.com/567571/f29c0ef1d9e3a821.png" alt=""></p>
<p><code>要点：</code></p>
<ul>
<li>当内容的宽度<strong>大于</strong>盒模型的<strong>总宽度</strong>时，<strong>溢出内容如何处理？</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># overflow属性，三种属性值</div><div class="line">auto: 溢出内容会自动隐藏，单行显示，变滚轮显示，让用户可以看到所有内容。</div><div class="line">hidden: 溢出内容自动隐藏</div><div class="line">visible: 溢出内容展示在盒模型之外，这个配置是默认的；</div></pre></td></tr></table></figure>
<ul>
<li>只有块级元素，才能设置宽度，长度等属性，CSS设置为块级元素，用<code>display</code>属性。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># display有三个属性值</div><div class="line">block 「块盒」：整个盒模型是基于块盒之上的，块盒内可以设置自己的长、宽。</div><div class="line">inline 「行内盒」：在行内盒中设置长、宽无效，border、padding是基于text的。</div><div class="line">inline-block「行内块状盒」：结合了block与inline两种属性</div></pre></td></tr></table></figure>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		p &#123;</div><div class="line">		  padding : 1em;</div><div class="line">		  border  : 1px solid black;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		span &#123;</div><div class="line">		  padding : 0.5em;</div><div class="line">		  border  : 1px solid green;</div><div class="line">		  height: 50px;</div><div class="line">		  /* That makes the box visible, regardless of its type */</div><div class="line">		  background-color: yellow;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.inline       &#123; display: inline;       &#125;</div><div class="line">		.block        &#123; display: block;        &#125;</div><div class="line">		.inline-block &#123; display: inline-block; &#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;</div><div class="line">		   Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		   &lt;span class=&quot;inline&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		   Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line"></div><div class="line">		&lt;p&gt;</div><div class="line">		  Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		  &lt;span class=&quot;block&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line"></div><div class="line">		&lt;p&gt;</div><div class="line">		  Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		  &lt;span class=&quot;inline-block&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>演示效果：</p>
<p><img src="http://i4.buimg.com/567571/f6bf997532ac0d5e.png" alt=""></p>
<h4 id="2）文本对齐"><a href="#2）文本对齐" class="headerlink" title="2）文本对齐"></a>2）文本对齐</h4><p><code>text-align</code>属性终于控制文本对齐，它有以下4个属性值；</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">left: 文本左对齐</div><div class="line">right: 文本右对齐</div><div class="line">center: 文本居中对齐</div><div class="line">justify: 文本扩展使得所有行的文本宽度一致</div></pre></td></tr></table></figure>
<p> <code>实战:</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		p &#123;</div><div class="line">		  padding : 1em;</div><div class="line">		  border  : 1px solid black;</div><div class="line">		&#125;</div><div class="line">		.right  &#123; text-align: right; &#125;</div><div class="line">		.center &#123; text-align: center;        &#125;</div><div class="line">		.left &#123; text-align: left; &#125;</div><div class="line">		.justify&#123; text-align: justify; &#125;</div><div class="line">		strong &#123;color: red;&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Learn CSS&lt;/strong&gt;&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;left&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;right&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;justify&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p> <code>运行结果:</code></p>
<p><img src="http://i4.buimg.com/567571/bd335169ff70189e.png" alt=""></p>
<h4 id="3-链接样式"><a href="#3-链接样式" class="headerlink" title="3) 链接样式"></a>3) 链接样式</h4><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a:link</code></td>
<td>未访问时的样式</td>
</tr>
<tr>
<td> <code>a:visited</code></td>
<td>已经访问过的样式</td>
</tr>
<tr>
<td><code>a:hover</code></td>
<td>浮于链接上的样式</td>
</tr>
<tr>
<td> <code>a:focus</code></td>
<td>通过<code>tab</code>选中该链接时的样式</td>
</tr>
<tr>
<td> <code>a:active</code></td>
<td>链接被触发时的样式</td>
</tr>
</tbody>
</table>
<p> <code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		body &#123;</div><div class="line">		  width: 300px;</div><div class="line">		  margin: 0 auto;</div><div class="line">		  font-size: 1.2rem;</div><div class="line">		  font-family: sans-serif;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		p &#123;</div><div class="line">		  line-height: 1.4;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a &#123;</div><div class="line">		  outline: none;</div><div class="line">		  text-decoration: none;</div><div class="line">		  padding: 2px 1px 0;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:link &#123;</div><div class="line">		  color: #265301;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:visited &#123;</div><div class="line">		  color: #437A16;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:focus &#123;</div><div class="line">		  border-bottom: 1px solid;</div><div class="line">		  background: #BAE498;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:hover &#123;</div><div class="line">		  border-bottom: 1px solid;     </div><div class="line">		  background: #CDFEAA;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:active &#123;</div><div class="line">		  background: #265301;</div><div class="line">		  color: #CDFEAA;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;There are several browsers available, such as </div><div class="line">			&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot;&gt;MozillaFirefox&lt;/a&gt;, </div><div class="line">			&lt;a href=&quot;https://www.google.com/chrome/index.html&quot;&gt;Google Chrome&lt;/a&gt;, and</div><div class="line">			&lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot;&gt;Microsoft Edge&lt;/a&gt;.</div><div class="line">		&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p>通过<code>TAB键选中：即a:focus效果：</code></p>
<p><img src="http://i4.buimg.com/567571/e32e85f5430f6c0e.png" alt=""></p>
<h4 id="4-CSS布局"><a href="#4-CSS布局" class="headerlink" title="4) CSS布局"></a>4) CSS布局</h4><h5 id="1-浮动"><a href="#1-浮动" class="headerlink" title="1 浮动"></a>1 浮动</h5><p>浮动技术允许元素浮动到另外一个元素的左侧或右侧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># float属性有4个属性值:</div><div class="line">left: 将元素浮动到左侧</div><div class="line">right: 将元素浮动到右侧</div><div class="line">none: 默认值，不浮动</div><div class="line">inherit: 继承父元素的浮动元素</div></pre></td></tr></table></figure>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		.blockA &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid;</div><div class="line">			float:left;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockB &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid red;</div><div class="line">			float: left;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockC &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid blue;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockD &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid green;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">		</div><div class="line">	&lt;body&gt;</div><div class="line">		</div><div class="line">		&lt;div&gt;</div><div class="line">			&lt;div class=&quot;blockC&quot;&gt;C&lt;/div&gt;</div><div class="line">			&lt;div class=&quot;blockD&quot;&gt;D&lt;/div&gt;	</div><div class="line">		&lt;/div&gt;</div><div class="line">		</div><div class="line">		&lt;div&gt;			</div><div class="line">			&lt;div class=&quot;blockA&quot;&gt;A&lt;/div&gt;</div><div class="line">			&lt;div class=&quot;blockB&quot;&gt;B&lt;/div&gt;</div><div class="line">		&lt;/div&gt;		</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i2.muimg.com/567571/894f4e1cd0702d00.png" alt=""></p>
<h5 id="2-定位技术"><a href="#2-定位技术" class="headerlink" title="2 定位技术"></a>2 定位技术</h5><p>定位技术允许我们将一个元素从它在页面的原始位置准确移动到另一个位置。</p>
<p>有4中主要的定位类型：</p>
<ul>
<li>静态定位(static)是每个元素默认的属性</li>
<li>相对定位(relative): 以元素自身作比较，进行移动;</li>
<li>绝对定位(absolute): 以第一个为<code>absolute</code>元素做参考，进行移动,且绝对定位是脱离文档流的； </li>
<li>固定定位(fixed)与绝对定位非常类似，除了它是将一个元素相对浏览器视口固定。</li>
</ul>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		body &#123;</div><div class="line">		  width: 500px;</div><div class="line">		  margin: 0 auto;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		p &#123;</div><div class="line">		  background: aqua;</div><div class="line">		  border: 3px solid blue;</div><div class="line">		  padding: 10px;</div><div class="line">		  margin: 10px;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.positioned &#123;</div><div class="line">		  position: relative;</div><div class="line">		  background: yellow;</div><div class="line">		  top: 30px;</div><div class="line">		  left: 30px;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		.absolute-test&#123;</div><div class="line">			position: absolute;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.abosolute_div&#123;</div><div class="line">			position: absolute;</div><div class="line">			background: red;</div><div class="line">			text-align: center;</div><div class="line">			height: 50px;</div><div class="line">			width: 50px;</div><div class="line">			top: 0px;</div><div class="line">			left: 0px;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">		</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;I am a basic block level element.&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;positioned&quot;&gt;I am a basic block level element.&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;absolute-test&quot;&gt;I am a basic block level element.&lt;/p&gt;	</div><div class="line">		&lt;p class=&quot;abosolute_div&quot;&gt;小哈&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i1.piimg.com/567571/2f91f17c3c6ceb5a.png" alt=""></p>
<h5 id="3-z-index"><a href="#3-z-index" class="headerlink" title="3 z-index"></a>3 z-index</h5><p>当元素开始重叠，什么时候决定哪些元素出现在其他元素的顶部。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">z-index:1</div></pre></td></tr></table></figure>
<h4 id="4-优先级"><a href="#4-优先级" class="headerlink" title="4) 优先级"></a>4) 优先级</h4><p>优先级就是分配指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。而当优先级与多个CSS声明中任意一个声明的优先级相等的时候，CSS中最后的那个声明将会被应用到元素上。</p>
<p><code>1. !important</code> 规则例外</p>
<p>当在一个样式上使用<code>!important</code>规则时，该样式会覆盖CSS中任何其他的声明。</p>
<p>经验法则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">永远不要在全站范围的css上使用!important</div><div class="line">只在需要覆盖全站或外展css的特定页面中使用!important</div><div class="line">永远不要在你的插件中使用!important</div><div class="line">要优化考虑使用样式规则的优先级来解决问题而不是!important</div></pre></td></tr></table></figure>
<h4 id="5-CSS简写属性"><a href="#5-CSS简写属性" class="headerlink" title="5) CSS简写属性"></a>5) CSS简写属性</h4><h5 id="1-background有以下属性"><a href="#1-background有以下属性" class="headerlink" title="1. background有以下属性"></a>1. background有以下属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">background-color: #000;</div><div class="line">background-image: url(images/bg.gif);</div><div class="line">background-repeat: no-repeat;</div><div class="line">background-position: top right;</div></pre></td></tr></table></figure>
<p>简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: #000 url(images/bg.gif) no-repeat top right;</div></pre></td></tr></table></figure>
<h5 id="2-Font属性"><a href="#2-Font属性" class="headerlink" title="2. Font属性"></a>2. Font属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">font-style: italic;</div><div class="line">font-weight: bold;</div><div class="line">font-size: .8em;</div><div class="line">line-height: 1.2;</div><div class="line">font-family: Arial, sans-serif;</div></pre></td></tr></table></figure>
<p>简写为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font: italic bold .8em/1.2 Arial, sans-serif;</div></pre></td></tr></table></figure>
<h5 id="3-Border属性"><a href="#3-Border属性" class="headerlink" title="3. Border属性"></a>3. Border属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">border-width: 1px;</div><div class="line">border-style: solid;</div><div class="line">border-color: #000;</div></pre></td></tr></table></figure>
<p>简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border: 1px solid #000;</div></pre></td></tr></table></figure>
<h5 id="4-Margin和Padding属性"><a href="#4-Margin和Padding属性" class="headerlink" title="4. Margin和Padding属性"></a>4. Margin和Padding属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">margin-top: 10px;</div><div class="line">margin-right: 5px;</div><div class="line">margin-bottom: 10px;</div><div class="line">margin-left: 5px;</div></pre></td></tr></table></figure>
<p>简写为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">margin: 10px 5px 10px 5px;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties" target="_blank" rel="external">CSS教程 by MND</a> </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是CSS&quot;&gt;&lt;a href=&quot;#1-什么是CSS&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是CSS&quot;&gt;&lt;/a&gt;1. 什么是CSS&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt;是一门指定文档该如何呈现给用户的语言。当你的浏览器请求页
    
    </summary>
    
      <category term="CSS" scheme="http://jianwl.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://jianwl.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>缓存使用规范</title>
    <link href="http://jianwl.com/2017/04/26/%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>http://jianwl.com/2017/04/26/缓存使用规范/</id>
    <published>2017-04-26T14:01:18.000Z</published>
    <updated>2017-04-27T07:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-使用规则"><a href="#1-使用规则" class="headerlink" title="1. 使用规则"></a>1. 使用规则</h3><ul>
<li>尽量不要强依赖缓存「除非有特殊需求」，参考下面的缓存使用基本方法</li>
<li>如果缓存更新丢失会导致缓存与DB中的数据不一致，<strong>如果允许数据出现短期不一致，通过设置缓存的超时时间</strong></li>
<li>如果缓存采用的Redis，由于Redis是单线程，要特别注意不要放置特别大的对象「超过1K」，避免引起堵塞。</li>
<li>在极端高并发的情况下，考虑使用本地缓存<ul>
<li><strong>针对Java的应用程序，可以考虑使用Guava Cache，Ehcache，ConcurrentHashMap。使用前要做好容量的评估。</strong></li>
<li>针对Python应用程序，要特别Python的多进程模式（本地缓存在某个进程中都有一份copy，在做容量估算，要乘以进程数）</li>
</ul>
</li>
<li>关注高并发下的缓存穿透问题</li>
</ul>
<h3 id="2-缓存使用基本写法"><a href="#2-缓存使用基本写法" class="headerlink" title="2. 缓存使用基本写法"></a>2. 缓存使用基本写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def get_city(city_id):</div><div class="line">    cache_key = &apos;city:&#123;0&#125;&apos;.format(city_id)</div><div class="line">    try:</div><div class="line">        cache_value = cache.get(cache_key)</div><div class="line">        if cache_value is not None:</div><div class="line">            return cache_value</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">     </div><div class="line">    cache_value = get_city_from_db(city_id)</div><div class="line">    try:</div><div class="line">        cache.set(cache_key, cache_value)</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">    return cache_value</div></pre></td></tr></table></figure>
<h3 id="3-高并发下缓存穿透问题"><a href="#3-高并发下缓存穿透问题" class="headerlink" title="3. 高并发下缓存穿透问题"></a>3. 高并发下缓存穿透问题</h3><p>如果因缓存不命中，导致大量的查询请求穿透到DB中，造成DB很大的压力，可能会引发雪崩效应。缓存不命中有几种情况</p>
<ul>
<li>大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID</li>
<li>某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。</li>
<li>在同一时间点有大量的缓存key过期或者被剔除</li>
</ul>
<h4 id="情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID"><a href="#情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID" class="headerlink" title="情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID"></a>情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID</h4><p>当该缓存数据不存在时，不是不设置缓存，而是通过设置某个默认值，例如：$$，来避免缓存穿透。</p>
<h4 id="情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。"><a href="#情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。" class="headerlink" title="情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。"></a>情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。</h4><ul>
<li>根据实际的业务情况，不进行缓存穿透，缓存获取不到或者获取失败的情况下，直接返回空的结果。</li>
<li>将缓存设置为永不过期（提供一个缓存有效时间单独key，或者设置一个单独的字段来标示缓存的有效时间），根据业务的实际情况，来选择是否采用过期的数据</li>
<li>通过对缓存key的进行加锁访问，来控制缓存穿透到数据库的并发。这在一定程度上会降低应用的性能，容易产生请求堆积。</li>
<li>通过定时等手段保证缓存永不过期</li>
</ul>
<h4 id="情况三：在同一时间点有大量的缓存key过期或者被剔除"><a href="#情况三：在同一时间点有大量的缓存key过期或者被剔除" class="headerlink" title="情况三：在同一时间点有大量的缓存key过期或者被剔除"></a>情况三：在同一时间点有大量的缓存key过期或者被剔除</h4><ul>
<li>尽量将缓存过期时间均匀分布，可以通过随机设置一个过期时间</li>
<li>如果因缓存服务器宕机导致的大量key过期，那么需要将缓存服务器做到高可用</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://blog.jobbole.com/83439/" target="_blank" rel="external">那些年我们一起追过的缓存写法</a></li>
<li><a href="http://www.tuicool.com/articles/7jMZFzj" target="_blank" rel="external">缓存穿透与缓存雪崩</a></li>
<li><a href="http://www.tuicool.com/articles/Y36vaib" target="_blank" rel="external">再谈缓存穿透、缓存并发、热点缓存之最佳招式</a></li>
</ol>
<p><a href="http://bdms.hylin.dev.imdada.cn/" target="_blank" rel="external">http://bdms.hylin.dev.imdada.cn/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-使用规则&quot;&gt;&lt;a href=&quot;#1-使用规则&quot; class=&quot;headerlink&quot; title=&quot;1. 使用规则&quot;&gt;&lt;/a&gt;1. 使用规则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽量不要强依赖缓存「除非有特殊需求」，参考下面的缓存使用基本方法&lt;/li&gt;
&lt;li&gt;如果缓存
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>数据库开发规范</title>
    <link href="http://jianwl.com/2017/04/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://jianwl.com/2017/04/26/数据库开发规范/</id>
    <published>2017-04-26T12:57:17.000Z</published>
    <updated>2017-04-26T13:58:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h3><h4 id="1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割"><a href="#1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割" class="headerlink" title="1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割"></a>1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割</h4><ul>
<li>MYSQL有配置参数lower_case_table_names,不可动态更改，linux默认为0，即库表名以实际情况存储，大小写敏感。如果是1，以小写存储，大小写不敏感。如果是2，以实际情况存储，但以小写比较；</li>
<li>如果大小写混用使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。</li>
<li>字段名显式区分大小写，但实际使用不区分，即不可以建立两个名字一样但大小写不一样的字段。</li>
<li>为了统一规范，库名、表名、字段名使用小写字母。</li>
</ul>
<h4 id="2）表名、字段名不超过32个字符"><a href="#2）表名、字段名不超过32个字符" class="headerlink" title="2）表名、字段名不超过32个字符"></a>2）表名、字段名不超过32个字符</h4><ul>
<li>库名、表名、字段名支持最多64个字符，但为了统一规范，易于辨识以及减少传输量，禁止超过32个字符</li>
</ul>
<h4 id="3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。"><a href="#3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。" class="headerlink" title="3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。"></a>3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。</h4><h4 id="4-索引名称采用idx-前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。"><a href="#4-索引名称采用idx-前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。" class="headerlink" title="4) 索引名称采用idx_前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。"></a>4) 索引名称采用<code>idx_</code>前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。</h4><ul>
<li>基于这些规范的正确实例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS `mall_coupon_order_map` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;id&apos;,</div><div class="line">  `coupon_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;优惠券编号&apos;,</div><div class="line">  `order_unit_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;订单号&apos;,</div><div class="line">  `bill_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;账单号&apos;,</div><div class="line">  `is_del` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;删除状态：0-正常，1-已删除&apos;,</div><div class="line">  `create_time` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_coupon_bill` (`coupon_id`, `bill_id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商城-使用优惠券与订单映射表&apos;;</div></pre></td></tr></table></figure>
<h4 id="5-不适用保留字，关键字-很重要！"><a href="#5-不适用保留字，关键字-很重要！" class="headerlink" title="5) 不适用保留字，关键字(很重要！)"></a>5) 不适用保留字，关键字(很重要！)</h4><ul>
<li>参考网址：<a href="http://dev.mysql.com/doc/refman/5.6/en/keywords.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/keywords.html</a></li>
<li>当库名、表名、字段名等属性含有保留字时，SQL语句必须用<strong>反引用</strong>属性名称，这将是的SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</li>
</ul>
<h4 id="6-对临时表、备份表的命名规则"><a href="#6-对临时表、备份表的命名规则" class="headerlink" title="6) 对临时表、备份表的命名规则"></a>6) 对临时表、备份表的命名规则</h4><ul>
<li>临时库、表必须以tmp为前缀，并已日期为后缀。例如：tmp_test01_20160704</li>
<li>备份库、表必须以bak为前缀，并以日期为后缀。例如：bak_test01_20160704</li>
</ul>
<h4 id="7-保留字使用全大写；SQL语句中，字符串使用单引号「’’」"><a href="#7-保留字使用全大写；SQL语句中，字符串使用单引号「’’」" class="headerlink" title="7) 保留字使用全大写；SQL语句中，字符串使用单引号「’’」"></a>7) 保留字使用全大写；SQL语句中，字符串使用单引号「’’」</h4><ul>
<li>典例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-- 正确</div><div class="line"> SELECT id, title FROM xiaoqu WHERE id = 1 </div><div class="line"> SELECT id, title FROM xiaoqu WHERE areacode = &apos;000100010001&apos;</div><div class="line">-- 错误</div><div class="line">select ID, title from XiaoQu where id = 1</div><div class="line">SELECT id, title FROM xiaoqu WHERE areacode = &quot;000100010001&quot;</div></pre></td></tr></table></figure>
<h4 id="8-存储实体数据的表，名称使用名词，单数"><a href="#8-存储实体数据的表，名称使用名词，单数" class="headerlink" title="8) 存储实体数据的表，名称使用名词，单数"></a>8) 存储实体数据的表，名称使用名词，单数</h4><h4 id="9-存储实体表多对多对应关系的表，名称建议采用noun-verb-noun这样的模式。例如：member-like-property、property-has-tag。"><a href="#9-存储实体表多对多对应关系的表，名称建议采用noun-verb-noun这样的模式。例如：member-like-property、property-has-tag。" class="headerlink" title="9) 存储实体表多对多对应关系的表，名称建议采用noun_verb_noun这样的模式。例如：member_like_property、property_has_tag。"></a>9) 存储实体表多对多对应关系的表，名称建议采用<code>noun_verb_noun</code>这样的模式。例如：<code>member_like_property</code>、<code>property_has_tag</code>。</h4><h3 id="表设计规范"><a href="#表设计规范" class="headerlink" title="表设计规范"></a>表设计规范</h3><h4 id="1-MYSQL存储引用使用InnoDB"><a href="#1-MYSQL存储引用使用InnoDB" class="headerlink" title="1) MYSQL存储引用使用InnoDB"></a>1) MYSQL存储引用使用InnoDB</h4><ul>
<li>不用纠结，没有特殊原因的情况下，作为在线交易系统「OLTP」的MYSQL使用InnoDB引擎</li>
<li>InnoDB有支持事务、行级锁、还有更好的数据恢复能力，更好的并发性能，同时对多核、大内存、SSD等硬件支持更好，支持数据热备份等。</li>
</ul>
<h4 id="2）表字符集使用UTF-8字符集，后续会用UTF8MB4"><a href="#2）表字符集使用UTF-8字符集，后续会用UTF8MB4" class="headerlink" title="2）表字符集使用UTF-8字符集，后续会用UTF8MB4"></a>2）表字符集使用UTF-8字符集，后续会用UTF8MB4</h4><h4 id="3）正确使用时间类型"><a href="#3）正确使用时间类型" class="headerlink" title="3）正确使用时间类型"></a>3）正确使用时间类型</h4><ul>
<li>精确到秒的时间采用<code>TIMESTAMP</code>,自动更新时间</li>
<li>精确到日期使用<code>DATE</code> </li>
<li>一般不使用<code>DATETIME</code>类型</li>
<li>不允许使用字符串类型存储时间</li>
<li>如果想对时间列建索引，还是用int类型，节省空间，效率高，适合需要大量时间范围的数据表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">`create_time` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `update_time` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_settle_order_id` (`settle_order_id`),</div><div class="line">  KEY `idx_plateform_user_type_user_id` (`plateform`,`user_type`,`user_id`),</div><div class="line">  KEY `idx_create_time` (`create_time`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=195 DEFAULT CHARSET=utf8 COMMENT=&apos;退款结算表&apos;;</div></pre></td></tr></table></figure>
<h4 id="4-字段定义为NOT-NULL，同时设置DEFAULT值。"><a href="#4-字段定义为NOT-NULL，同时设置DEFAULT值。" class="headerlink" title="4) 字段定义为NOT NULL，同时设置DEFAULT值。"></a>4) 字段定义为NOT NULL，同时设置DEFAULT值。</h4><ul>
<li>不是必须要设置NULL，就将字段设置NOT NULL</li>
<li>设置为<code>NOT NULL</code>的字段，需要设置一个缺省值</li>
<li>B树索引不会存储<code>NULL</code>值，所以如果索引字段可以为NULL，索引效率会下降。</li>
<li>建议用0、特殊值或空串代替NULL值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user_feedback` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `uid` int(11) NOT NULL COMMENT &apos;用户id&apos;,</div><div class="line">  `phone` varchar(20) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;手机号&apos;,</div><div class="line">  `feedback_status` int(11) NOT NULL DEFAULT &apos;10&apos; COMMENT &apos;反馈处理状态&apos;,</div><div class="line">  `feedback_type` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;反馈类型&apos;,</div><div class="line">  `supp_info` varchar(800) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;补充内容&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_phone` (`phone`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;意见反馈&apos;;</div></pre></td></tr></table></figure>
<h4 id="5-字段个数不超过32个"><a href="#5-字段个数不超过32个" class="headerlink" title="5) 字段个数不超过32个"></a>5) 字段个数不超过32个</h4><ul>
<li>一个表有很多很多字段，不仅占用空间，而且不方便，请在认真考虑设计是否正确</li>
</ul>
<h4 id="6）不适用浮点类型-FLOAT、DOUBLE"><a href="#6）不适用浮点类型-FLOAT、DOUBLE" class="headerlink" title="6）不适用浮点类型(FLOAT、DOUBLE)"></a>6）不适用浮点类型(FLOAT、DOUBLE)</h4><ul>
<li>没有充分的理由，不要使用浮点数</li>
<li>例如金额可以用分为单位，然后采用<code>INT</code>，如果依然要以元为单位，可以采用<code>DECIMAL</code></li>
</ul>
<h4 id="7-不直接存储图片、音频、视频等大容量内容"><a href="#7-不直接存储图片、音频、视频等大容量内容" class="headerlink" title="7) 不直接存储图片、音频、视频等大容量内容"></a>7) 不直接存储图片、音频、视频等大容量内容</h4><ul>
<li>请使用分布式文件系统来存储图片、音频、视频等内容，数据库内只存储文件位置</li>
</ul>
<h4 id="8）使用INT-UNSIGNED来存储Ipv4地址"><a href="#8）使用INT-UNSIGNED来存储Ipv4地址" class="headerlink" title="8）使用INT UNSIGNED来存储Ipv4地址"></a>8）使用INT UNSIGNED来存储Ipv4地址</h4><ul>
<li>使用 <code>INET_ATON</code> 将 IP 地址的字符串形式转换成数字形式；使用<code>INET_NTOA</code> 将 IP 地址数字形式转换成字符串形式，以便查看。</li>
<li>当程序使用自带的函数进行 IP 地址的字符串形式与数字形式之间的转换时，需要注意数字的存储类型至少应为 32 位的无符号整型（如 <code>uint32_t</code>)，并注意字节数。</li>
<li>当要查询某段的 IP 时，请参考以下示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT user_id FROM user_ip</div><div class="line">WHERE ip &gt; INET_ATON(&apos;192.168.0.0&apos;) AND ip &lt; INET_ATON(&apos;192.168.255.255&apos;)</div></pre></td></tr></table></figure>
<h4 id="9-所有表都需要添加注释，每张表数据量建议控制在5000W以内"><a href="#9-所有表都需要添加注释，每张表数据量建议控制在5000W以内" class="headerlink" title="9) 所有表都需要添加注释，每张表数据量建议控制在5000W以内"></a>9) 所有表都需要添加注释，每张表数据量建议控制在5000W以内</h4><ul>
<li>除主键外的其他字段都需要增加注释</li>
<li>推荐采用英文标点，避免出现乱码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">--错误：</div><div class="line">CREATE TABLE `push_stat_key` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</div><div class="line">  `stat_key` varchar(32) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `description` varchar(256) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `owner_mail` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `owner_phone` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `del_flag` tinyint(4) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_stat_key` (`stat_key`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line">--正确：</div><div class="line">CREATE TABLE IF NOT EXISTS `mall_coupon_order_map` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;id&apos;,</div><div class="line">  `coupon_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;优惠券编号&apos;,</div><div class="line">  `order_unit_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;订单号&apos;,</div><div class="line">  `bill_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;账单号&apos;,</div><div class="line">  `is_del` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;删除状态：0-正常，1-已删除&apos;,</div><div class="line">  `create_time` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_coupon_bill` (`coupon_id`, `bill_id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商城-使用优惠券与订单映射表&apos;;</div></pre></td></tr></table></figure>
<h4 id="10-禁止使用分区表"><a href="#10-禁止使用分区表" class="headerlink" title="10) 禁止使用分区表"></a>10) 禁止使用分区表</h4><ul>
<li>分区表对分区键有严格要求</li>
<li>分区表在表变大后，执行DDL、SHARDING、单表恢复等都变得更加困难</li>
<li>因此禁止使用分区表，并建议业务端手动SHARDING。</li>
</ul>
<h4 id="11）采用合适的分库分表策略，例如千库十表、十库表表等"><a href="#11）采用合适的分库分表策略，例如千库十表、十库表表等" class="headerlink" title="11）采用合适的分库分表策略，例如千库十表、十库表表等"></a>11）采用合适的分库分表策略，例如千库十表、十库表表等</h4><ul>
<li>采用合适的分库分表策略，有利于后期快速对数据库进行水平拆分</li>
<li>同时分库可以有效利用MYSQL的多线程复制特性</li>
</ul>
<h4 id="12-将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据"><a href="#12-将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据" class="headerlink" title="12) 将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据"></a>12) 将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据</h4><ul>
<li>分离冷热数据，有效利用缓存，防止读入无用的冷数据，较少磁盘IO</li>
<li>同时保证热数据常驻内存提高缓存命中率</li>
</ul>
<h4 id="13-强烈建议使用TINYINT来代替ENUM类型"><a href="#13-强烈建议使用TINYINT来代替ENUM类型" class="headerlink" title="13) 强烈建议使用TINYINT来代替ENUM类型"></a>13) 强烈建议使用TINYINT来代替ENUM类型</h4><ul>
<li>ENUM类型在需要修改或增加枚举值时，需要在线DDL，成本较大</li>
<li>ENUM列值如果含有数字类型，可能会引起默认值混淆</li>
</ul>
<h4 id="14-尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR-N-中的N表示字符数而非字节数"><a href="#14-尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR-N-中的N表示字符数而非字节数" class="headerlink" title="14) 尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR(N)中的N表示字符数而非字节数"></a>14) 尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR(N)中的N表示字符数而非字节数</h4><ul>
<li>没有特殊情况一般不用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">create table dj_trade_request_0</div><div class="line">(</div><div class="line">id bigint not null auto_increment comment &apos;自增id&apos;,</div><div class="line">order_type tinyInt not null comment &apos;订单类型:交易;取消交易&apos;,</div><div class="line">order_id bigint not null comment &apos;订单id&apos;,</div><div class="line">controller_scene_id int not null comment &apos;场景id&apos;,</div><div class="line">tradeIdentity bigint not null comment &apos;交易识别id&apos;,</div><div class="line">tradeIdentity_type int not null comment &apos;交易识别type&apos;,</div><div class="line">content text not null comment &apos;请求内容&apos;,</div><div class="line">status tinyInt not null comment &apos;状态&apos;,</div><div class="line">request_times int not null comment &apos;请求次数&apos;,</div><div class="line">execute_times int not null comment &apos;执行次数&apos;,</div><div class="line">identity_success_ids varchar(1024) not null comment &apos;处理成功ids&apos;,</div><div class="line">identity_fail_ids varchar(1024) not null comment &apos;处理失败ids&apos;,</div><div class="line">create_time bigint not null comment &apos;创建时间&apos;,</div><div class="line">update_time bigint not null comment &apos;更新时间&apos;,</div><div class="line">version int not null comment &apos;版本控制&apos;,</div><div class="line">primary key (id)</div><div class="line">)auto_increment = 1 ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;</div></pre></td></tr></table></figure>
<h4 id="15-区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY-UNSIGNED"><a href="#15-区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY-UNSIGNED" class="headerlink" title="15) 区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY UNSIGNED"></a>15) 区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY UNSIGNED</h4><ul>
<li>对某一列只有一两个值，例如要么是0，要么是1，可以使用tinyint</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table `supplier_contact` add column `addr_type` tinyint(4) not null default &apos;10&apos; comment &apos;地址类型，10 - 达达商家，20 - 达达快送&apos;;</div></pre></td></tr></table></figure>
<h4 id="16-使用VARBINARY存储大小写敏感的变长字符串或二进制内容"><a href="#16-使用VARBINARY存储大小写敏感的变长字符串或二进制内容" class="headerlink" title="16) 使用VARBINARY存储大小写敏感的变长字符串或二进制内容"></a>16) 使用VARBINARY存储大小写敏感的变长字符串或二进制内容</h4><ul>
<li>VARBINARY默认区分大小写,没有字符集概念,速度快</li>
</ul>
<h4 id="17-建议使用UNSIGNED存储非负数值"><a href="#17-建议使用UNSIGNED存储非负数值" class="headerlink" title="17) 建议使用UNSIGNED存储非负数值"></a>17) 建议使用UNSIGNED存储非负数值</h4><h3 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h3><h4 id="1-使用数字主键，不使用联合主键"><a href="#1-使用数字主键，不使用联合主键" class="headerlink" title="1) 使用数字主键，不使用联合主键"></a>1) 使用数字主键，不使用联合主键</h4><ul>
<li>存储实体数据的表，其主键应该是数字类型。</li>
<li>存储实体数据的表，不使用联合主键。</li>
<li>存储实体表间多对多对应关系的表（仅有两个字段）允许例外。</li>
</ul>
<h4 id="2-不使用外键"><a href="#2-不使用外键" class="headerlink" title="2) 不使用外键"></a>2) 不使用外键</h4><ul>
<li>所有的表不建立外键约束。</li>
</ul>
<h4 id="3-表必须有主键-推荐使用UNSIGNED自增列作为主键"><a href="#3-表必须有主键-推荐使用UNSIGNED自增列作为主键" class="headerlink" title="3) 表必须有主键,推荐使用UNSIGNED自增列作为主键"></a>3) 表必须有主键,推荐使用UNSIGNED自增列作为主键</h4><h4 id="4-联合索引字段数不超过-5-个（单个索引中的字段数不超过5个）"><a href="#4-联合索引字段数不超过-5-个（单个索引中的字段数不超过5个）" class="headerlink" title="4) 联合索引字段数不超过 5 个（单个索引中的字段数不超过5个）"></a>4) 联合索引字段数不超过 5 个（单个索引中的字段数不超过5个）</h4><ul>
<li>一个联合索引的字段数太多，很可能是设计得不好，还很难符合命名的规范。</li>
</ul>
<h4 id="5-前缀索引长度不超过-8-个字符，单张表中索引数量最好不超过5个"><a href="#5-前缀索引长度不超过-8-个字符，单张表中索引数量最好不超过5个" class="headerlink" title="5) 前缀索引长度不超过 8 个字符，单张表中索引数量最好不超过5个"></a>5) 前缀索引长度不超过 8 个字符，单张表中索引数量最好不超过5个</h4><ul>
<li>对字符串类型的字段建立索引，采用前缀索引，且长度不超过 8 个字符。</li>
</ul>
<h4 id="6-索引的命名规则"><a href="#6-索引的命名规则" class="headerlink" title="6) 索引的命名规则"></a>6) 索引的命名规则</h4><ul>
<li>非唯一索引按照“idx<em>字段名称[</em>字段名称]”进用行命名。例如idx_age_name</li>
<li>唯一索引按照“uniq<em>字段名称[</em>字段名称]”进用行命名。例如uniq_age_name</li>
<li>组合索引建议包含所有字段名,过长的字段名可以采用缩写形式。例如idx_age_name_add</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--错误：</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `training_id_index` (`training_id`),</div><div class="line">  KEY `site_id_index` (`training_id`,`site_id`),</div><div class="line">  KEY `training_site_id_index` (`is_valid`,`training_id`,`site_id`)</div><div class="line"> </div><div class="line">--正确：</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_settle_order_id` (`settle_order_id`),</div><div class="line">  KEY `idx_plateform_user_type_user_id` (`plateform`,`user_type`,`user_id`),</div><div class="line">  KEY `idx_create_time` (`create_time`)</div></pre></td></tr></table></figure>
<h4 id="7-禁止冗余索引"><a href="#7-禁止冗余索引" class="headerlink" title="7) 禁止冗余索引"></a>7) 禁止冗余索引</h4><ul>
<li>索引是把双刃剑,会增加维护负担,增大IO压力。(a,b,c)、(a,b),后者为冗余索引</li>
<li>可以利用前缀索引来达到加速目的,减轻维护负担</li>
</ul>
<h4 id="8-禁止重复索引"><a href="#8-禁止重复索引" class="headerlink" title="8) 禁止重复索引"></a>8) 禁止重复索引</h4><ul>
<li>例如：primary key a;uniq index a</li>
<li>重复索引增加维护负担、占用磁盘空间,同时没有任何益处</li>
</ul>
<h4 id="9-不在低基数列上建立索引-例如“性别”"><a href="#9-不在低基数列上建立索引-例如“性别”" class="headerlink" title="9) 不在低基数列上建立索引,例如“性别”"></a>9) 不在低基数列上建立索引,例如“性别”</h4><ul>
<li>大部分场景下,低基数列上建立索引的精确查找,相对于不建立索引的全表扫描没有任何优势,而且增大了IO负担</li>
</ul>
<h4 id="10-选择区分度大的列建立索引。组合索引中-区分度大的字段放在最前"><a href="#10-选择区分度大的列建立索引。组合索引中-区分度大的字段放在最前" class="headerlink" title="10) 选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前"></a>10) 选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前</h4><h4 id="11-不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引-或添加CRC32或MD5伪列并建立索引"><a href="#11-不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引-或添加CRC32或MD5伪列并建立索引" class="headerlink" title="11) 不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引"></a>11) 不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引</h4><h4 id="12-合理创建联合索引，合理使用覆盖索引减少IO-避免排序"><a href="#12-合理创建联合索引，合理使用覆盖索引减少IO-避免排序" class="headerlink" title="12) 合理创建联合索引，合理使用覆盖索引减少IO,避免排序"></a>12) 合理创建联合索引，合理使用覆盖索引减少IO,避免排序</h4><ul>
<li>例如：(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)</li>
<li>覆盖索引能从索引中获取需要的所有字段,从而避免回表进行二次查找,节省IO</li>
</ul>
<h3 id="SQL语句规范"><a href="#SQL语句规范" class="headerlink" title="SQL语句规范"></a>SQL语句规范</h3><h4 id="1-禁止在查询条件中对字段进行数学运算、函数调用"><a href="#1-禁止在查询条件中对字段进行数学运算、函数调用" class="headerlink" title="1) 禁止在查询条件中对字段进行数学运算、函数调用"></a>1) 禁止在查询条件中对字段进行数学运算、函数调用</h4><ul>
<li>这类查询语句在使用索引时将非常困难。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE NOW() - update_time &lt; 3600</div><div class="line">SELECT id FROM property WHERE update_time + 3600 &gt; NOW()</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">SELECT id FROM property WHERE update_time &gt; NOW() - 3600</div><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE CHAR_LENGTH(title) &gt; 20</div><div class="line"> </div><div class="line">-- 假设字段 property.status 的类型为 TINYINT</div><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE status = &apos;1&apos;</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">SELECT id FROM property WHERE status = 1</div></pre></td></tr></table></figure>
<h4 id="2-禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE-也不允许隐式类型转换。"><a href="#2-禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE-也不允许隐式类型转换。" class="headerlink" title="2) 禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE 也不允许隐式类型转换。"></a>2) 禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，<code>INSERT</code>，<code>UPDATE</code> 也不允许隐式类型转换。</h4><ul>
<li>典例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-- 假设字段 property.status 的类型为 TINYINT</div><div class="line">-- 禁止</div><div class="line">INSERT INTO property (..., status) VALUES (..., &apos;1&apos;)</div><div class="line">UPDATE property SET status = &apos;1&apos; WHERE id = &apos;43&apos;</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">INSERT INTO property (..., status) VALUES (..., 1)</div><div class="line">UPDATE property SET status = 1 WHERE id = 43</div></pre></td></tr></table></figure>
<h4 id="3-禁止使用-前导查询"><a href="#3-禁止使用-前导查询" class="headerlink" title="3) 禁止使用 % 前导查询"></a>3) 禁止使用 % 前导查询</h4><ul>
<li>尽量不要使用like查询，不得不用的情况下也禁止使用%前导查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE title LIKE &apos;%最%&apos;</div></pre></td></tr></table></figure>
<h4 id="4-不使用联表查询，不使用子查询，不使用负向查询"><a href="#4-不使用联表查询，不使用子查询，不使用负向查询" class="headerlink" title="4) 不使用联表查询，不使用子查询，不使用负向查询"></a>4) 不使用联表查询，不使用子查询，不使用负向查询</h4><ul>
<li>OLTP 不使用 <code>JOIN</code> 联合查询。</li>
<li>没有特别好的理由，OLTP 不允许使用子查询。必要时用join代替子查询</li>
<li>负向查询是指，如果查询条件描述的是不要什么数据，其余的都要。例如 <code>!=</code>、<code>&lt;&gt;</code>、<code>NOT EXISTS</code>、<code>NOT IN</code> 以及 <code>NOT LIKE</code> 等就是负向查询，它们利用索引将会很辛苦。</li>
</ul>
<h4 id="5-LIMIT-m-n，其中-m-应当小于-500"><a href="#5-LIMIT-m-n，其中-m-应当小于-500" class="headerlink" title="5) LIMIT m, n，其中 m 应当小于 500"></a>5) LIMIT m, n，其中 m 应当小于 500</h4><ul>
<li>使用 <code>SELECT ... LIMIT offset, row_count</code> 或者 <code>SELECT ... LIMIT row_count OFFSET offset</code> 时，当 offset 小于 500 时，允许使用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 允许</div><div class="line">SELECT ... FROM property WHERE broker_id=? ORDER BY update_time LIMIT 40, 20</div><div class="line">-- 不允许</div><div class="line">SELECT ... FROM property WHERE areacode=? ORDER BY update_time LIMIT 4000, 20</div></pre></td></tr></table></figure>
<ul>
<li>能够不使用 offset 的情况应当避免，如下面的例子（其中 id 是主键）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 建议</div><div class="line">SELECT ... FROM property WHERE broker_id=? AND id&gt;? ORDER BY id LIMIT 20</div><div class="line">-- 避免</div><div class="line">SELECT ... FROM property WHERE broker_id=? ORDER BY id LIMIT 40, 20</div></pre></td></tr></table></figure>
<h4 id="6-避免使用-COUNT-函数，其他聚合函数，例如-SUM-、AVG-、MAX-等，同样适用。"><a href="#6-避免使用-COUNT-函数，其他聚合函数，例如-SUM-、AVG-、MAX-等，同样适用。" class="headerlink" title="6) 避免使用 COUNT() 函数，其他聚合函数，例如 SUM()、AVG()、MAX() 等，同样适用。"></a>6) 避免使用 COUNT() 函数，其他聚合函数，例如 <code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code> 等，同样适用。</h4><ul>
<li>能不使用就不使用，尽量用其他方式来解决</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 避免</div><div class="line">SELECT COUNT(*) FROM propertys WHERE broker_id=?</div><div class="line">-- 正确</div><div class="line">SELECT 1 FROM propertys WHERE broker_id=? LIMIT 1</div></pre></td></tr></table></figure>
<h4 id="7-使用prepared-statement-可以提升性能并避免SQL注入"><a href="#7-使用prepared-statement-可以提升性能并避免SQL注入" class="headerlink" title="7) 使用prepared statement,可以提升性能并避免SQL注入"></a>7) 使用prepared statement,可以提升性能并避免SQL注入</h4><h4 id="8-使用IN代替OR。SQL语句中IN包含的值不应过多"><a href="#8-使用IN代替OR。SQL语句中IN包含的值不应过多" class="headerlink" title="8) 使用IN代替OR。SQL语句中IN包含的值不应过多"></a>8) 使用IN代替OR。SQL语句中IN包含的值不应过多</h4><ul>
<li>IN是范围查找,MySQL内部会对IN的列表值进行排序后查找,比OR效率更高</li>
</ul>
<h4 id="9-减少与数据库交互次数-尽量采用批量SQL语句"><a href="#9-减少与数据库交互次数-尽量采用批量SQL语句" class="headerlink" title="9) 减少与数据库交互次数,尽量采用批量SQL语句"></a>9) 减少与数据库交互次数,尽量采用批量SQL语句</h4><ul>
<li>修改同一张表的多条语句，可改为一条语句；多用于修改表结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">--错误</div><div class="line">alter table target_config modify column target_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div><div class="line">alter table target_config modify column real_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div><div class="line"> </div><div class="line">--正确</div><div class="line">alter table target_config modify column target_value decimal(12,4) DEFAULT &apos;0.0000&apos;,modify column real_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div></pre></td></tr></table></figure>
<h4 id="10-拆分复杂SQL为多个小SQL-避免大事务"><a href="#10-拆分复杂SQL为多个小SQL-避免大事务" class="headerlink" title="10) 拆分复杂SQL为多个小SQL,避免大事务"></a>10) 拆分复杂SQL为多个小SQL,避免大事务</h4><ul>
<li>转化为小SQL，并进行主键的更新</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">--错误</div><div class="line">update test.tmp_qos set feedback=1 where transport_id&lt;=24769887;</div><div class="line"> </div><div class="line">--正确</div><div class="line">update test.tmp_qos set feedback=1 where id=1;</div><div class="line">update test.tmp_qos set feedback=1 where id=2;</div><div class="line">update test.tmp_qos set feedback=1 where id=3;</div><div class="line">update test.tmp_qos set feedback=1 where id=4;</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="11-使用UNION-ALL代替UNION"><a href="#11-使用UNION-ALL代替UNION" class="headerlink" title="11)  使用UNION ALL代替UNION"></a>11)  使用UNION ALL代替UNION</h4><ul>
<li>UNION ALL不需要对结果集再进行排序</li>
</ul>
<h4 id="12-SELECT只获取必要的字段-禁止使用SELECT"><a href="#12-SELECT只获取必要的字段-禁止使用SELECT" class="headerlink" title="12 ) SELECT只获取必要的字段,禁止使用SELECT *"></a>12 ) SELECT只获取必要的字段,禁止使用SELECT <code>*</code></h4><ul>
<li>减少网络带宽消耗</li>
<li>能有效利用覆盖索引</li>
<li>表结构变更对程序基本无影响</li>
</ul>
<h4 id="13-SQL中避免出现now-、rand-、sysdate-、current-user-等不确定结果的函数"><a href="#13-SQL中避免出现now-、rand-、sysdate-、current-user-等不确定结果的函数" class="headerlink" title="13) SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数"></a>13) SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数</h4><ul>
<li>语句级复制场景下,引起主从数据不一致</li>
<li>不确定值的函数,产生的SQL语句无法利用QUERY CACHE</li>
</ul>
<h4 id="14-禁止使用order-by-rand"><a href="#14-禁止使用order-by-rand" class="headerlink" title="14) 禁止使用order by rand()"></a>14) 禁止使用order by rand()</h4><ul>
<li>order by rand()会为表增加一个伪列,然后用rand()函数为每一行数据计算出rand()值,然后基于该行排序, 这通常都会生成磁盘上的临时表,因此效率非常低。</li>
<li>建议先使用rand()函数获得随机的主键值,然后通过主键获取数据</li>
</ul>
<h4 id="15-禁止单条SQL语句同时更新多个表"><a href="#15-禁止单条SQL语句同时更新多个表" class="headerlink" title="15)  禁止单条SQL语句同时更新多个表"></a>15)  禁止单条SQL语句同时更新多个表</h4><h4 id="16-建议使用合理的分页方式以提高分页效率"><a href="#16-建议使用合理的分页方式以提高分页效率" class="headerlink" title="16) 建议使用合理的分页方式以提高分页效率"></a>16) 建议使用合理的分页方式以提高分页效率</h4><h4 id="17-禁止在从库上执行后台管理和统计类功能的QUERY-必要时申请统计类从库"><a href="#17-禁止在从库上执行后台管理和统计类功能的QUERY-必要时申请统计类从库" class="headerlink" title="17) 禁止在从库上执行后台管理和统计类功能的QUERY,必要时申请统计类从库"></a>17) 禁止在从库上执行后台管理和统计类功能的QUERY,必要时申请统计类从库</h4><h4 id="18-程序应有捕获SQL异常的处理机制-必要时通过rollback显式回滚"><a href="#18-程序应有捕获SQL异常的处理机制-必要时通过rollback显式回滚" class="headerlink" title="18) 程序应有捕获SQL异常的处理机制,必要时通过rollback显式回滚"></a>18) 程序应有捕获SQL异常的处理机制,必要时通过rollback显式回滚</h4><h4 id="19-重要SQL必须被索引-update、delete的where条件列、order-by、group-by、distinct字段、多表join字段"><a href="#19-重要SQL必须被索引-update、delete的where条件列、order-by、group-by、distinct字段、多表join字段" class="headerlink" title="19)  重要SQL必须被索引:update、delete的where条件列、order by、group by、distinct字段、多表join字段"></a>19)  重要SQL必须被索引:update、delete的where条件列、order by、group by、distinct字段、多表join字段</h4><h4 id="20）使用EXPLAIN判断SQL语句是否合理使用索引-尽量避免extra列出现-Using-File-Sort、Using-Temporary"><a href="#20）使用EXPLAIN判断SQL语句是否合理使用索引-尽量避免extra列出现-Using-File-Sort、Using-Temporary" class="headerlink" title="20）使用EXPLAIN判断SQL语句是否合理使用索引,尽量避免extra列出现:Using File Sort、Using Temporary"></a>20）使用EXPLAIN判断SQL语句是否合理使用索引,尽量避免extra列出现:Using File Sort、Using Temporary</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-命名规范&quot;&gt;&lt;a href=&quot;#1-命名规范&quot; class=&quot;headerlink&quot; title=&quot;1. 命名规范&quot;&gt;&lt;/a&gt;1. 命名规范&lt;/h3&gt;&lt;h4 id=&quot;1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Shell常用命令备忘</title>
    <link href="http://jianwl.com/2017/04/25/Shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>http://jianwl.com/2017/04/25/Shell常用命令备忘/</id>
    <published>2017-04-25T05:01:52.000Z</published>
    <updated>2017-05-06T14:33:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-ls命令"><a href="#1-ls命令" class="headerlink" title="1. ls命令"></a>1. ls命令</h3><h4 id="1-显示长格式的输出"><a href="#1-显示长格式的输出" class="headerlink" title="1) 显示长格式的输出"></a>1) 显示长格式的输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">### -R 递归显示</div><div class="line">### -A almost-all，类似「-a」，不含「.」、「..」 目录</div><div class="line">### -h --human-readable</div><div class="line">### -r --reverse</div><div class="line"></div><div class="line">$ ls -l</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div></pre></td></tr></table></figure>
<h4 id="2-显示最后访问时间"><a href="#2-显示最后访问时间" class="headerlink" title="2) 显示最后访问时间"></a>2) 显示最后访问时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lu</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff      0  3 12 23:34 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4 25 13:01 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 12:57 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67  3 12 10:02 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49  4 25 12:57 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  4 22 09:54 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  4 25 13:01 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170  4 25 13:02 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374  4 25 13:02 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  4 25 13:02 themes</div></pre></td></tr></table></figure>
<h4 id="3-显示文件的大小"><a href="#3-显示文件的大小" class="headerlink" title="3) 显示文件的大小"></a>3) 显示文件的大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lh</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff     0B 10  1  2016 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1.9K  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff   174B  4 25 13:01 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff    35B  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff    67B 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff    49B 10  1  2016 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff   9.9K  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff   759B  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff   714B  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff   170B 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff   374B 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff   238B  3 11 21:10 themes</div></pre></td></tr></table></figure>
<h4 id="4-按最近修改时间排序"><a href="#4-按最近修改时间排序" class="headerlink" title="4) 按最近修改时间排序"></a>4) 按最近修改时间排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lt</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div></pre></td></tr></table></figure>
<h4 id="5-按最近修改时间逆排序"><a href="#5-按最近修改时间逆排序" class="headerlink" title="5) 按最近修改时间逆排序"></a>5) 按最近修改时间逆排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -ltr</div><div class="line">total 48</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div></pre></td></tr></table></figure>
<h4 id="6-按文件大小排序"><a href="#6-按文件大小排序" class="headerlink" title="6) 按文件大小排序"></a>6) 按文件大小排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lS</div><div class="line">total 48</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div></pre></td></tr></table></figure>
<h4 id="7-递归显示"><a href="#7-递归显示" class="headerlink" title="7) 递归显示"></a>7) 递归显示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ls -lR</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 1.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 2.txt</div><div class="line">drwxr-xr-x  4 jianweilin  staff  136  4 25 14:51 tmp</div><div class="line"></div><div class="line">./tmp:</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 14:51 3.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 14:51 4.txt</div></pre></td></tr></table></figure>
<h3 id="2-stat命令"><a href="#2-stat命令" class="headerlink" title="2. stat命令"></a>2. stat命令</h3><h4 id="1-显示文件统计信息"><a href="#1-显示文件统计信息" class="headerlink" title="1) 显示文件统计信息"></a>1) 显示文件统计信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ stat db.json</div><div class="line">16777220 18825586 -rw-r--r-- 1 jianweilin staff 0 174 &quot;Apr 25 12:57:01 2017&quot; &quot;Apr 25 13:01:52 2017&quot; &quot;Apr 25 13:01:52 2017&quot; &quot;Apr 25 12:57:00 2017&quot; 4096 8 0 db.json</div></pre></td></tr></table></figure>
<h3 id="3-cat命令"><a href="#3-cat命令" class="headerlink" title="3. cat命令"></a>3. cat命令</h3><h4 id="1-显示行号"><a href="#1-显示行号" class="headerlink" title="1) 显示行号"></a>1) 显示行号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$ cat -n package.json</div><div class="line">     1	&#123;</div><div class="line">     2	  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class="line">     3	  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">     4	  &quot;private&quot;: true,</div><div class="line">     5	  &quot;hexo&quot;: &#123;</div><div class="line">     6	    &quot;version&quot;: &quot;3.2.2&quot;</div><div class="line">     7	  &#125;,</div><div class="line">     8	  &quot;dependencies&quot;: &#123;</div><div class="line">     9	    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class="line">    10	    &quot;hexo-deployer-git&quot;: &quot;^0.1.0&quot;,</div><div class="line">    11	    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class="line">    12	    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class="line">    13	    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class="line">    14	    &quot;hexo-generator-feed&quot;: &quot;^1.2.0&quot;,</div><div class="line">    15	    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</div><div class="line">    16	    &quot;hexo-generator-search&quot;: &quot;^1.0.2&quot;,</div><div class="line">    17	    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;,</div><div class="line">    18	    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class="line">    19	    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class="line">    20	    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</div><div class="line">    21	    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</div><div class="line">    22	    &quot;hexo-server&quot;: &quot;^0.2.0&quot;</div><div class="line">    23	  &#125;,</div><div class="line">    24	  &quot;devDependencies&quot;: &#123;</div><div class="line">    25	    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class="line">    26	    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;</div><div class="line">    27	  &#125;</div><div class="line">    28	&#125;</div></pre></td></tr></table></figure>
<h3 id="4-tar命令"><a href="#4-tar命令" class="headerlink" title="4. tar命令"></a>4. tar命令</h3><h4 id="1-显示当前目录"><a href="#1-显示当前目录" class="headerlink" title="1) 显示当前目录"></a>1) 显示当前目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">### -c 创建一个新的tar归档文件</div><div class="line">### -x 从已有tar归档文件中提取文件</div><div class="line">### -v 在处理文件时显示文件</div><div class="line">### -z 将输出重定向给gzip命令压缩内容</div><div class="line">### -t 列出已有tar归档文件的内容</div><div class="line">### -f file 输出结果到file</div><div class="line"></div><div class="line">### 压缩常用参数 cvzf</div><div class="line">### 解压常用参数 xvzf</div><div class="line"></div><div class="line">$ ls -lR</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 1.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 2.txt</div><div class="line">drwxr-xr-x  4 jianweilin  staff  136  4 25 16:50 tmp</div><div class="line"></div><div class="line">./tmp:</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 16:50 3.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 16:50 4.txt</div></pre></td></tr></table></figure>
<h4 id="2-忽略tmp目录打包"><a href="#2-忽略tmp目录打包" class="headerlink" title="2) 忽略tmp目录打包"></a>2) 忽略tmp目录打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar --exclude &quot;tmp&quot; -cvzf test.tgz test</div><div class="line">a test</div><div class="line">a test/1.txt</div><div class="line">a test/2.txt</div></pre></td></tr></table></figure>
<h4 id="3-查看tar归档文件内容"><a href="#3-查看tar归档文件内容" class="headerlink" title="3) 查看tar归档文件内容"></a>3) 查看tar归档文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar -tf test.tgz</div><div class="line">test/</div><div class="line">test/1.txt</div><div class="line">test/2.txt</div></pre></td></tr></table></figure>
<h4 id="4-解压"><a href="#4-解压" class="headerlink" title="4) 解压"></a>4) 解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar -xvzf test.tgz</div><div class="line">x test/</div><div class="line">x test/1.txt</div><div class="line">x test/2.txt</div></pre></td></tr></table></figure>
<h3 id="5-实用命令"><a href="#5-实用命令" class="headerlink" title="5. 实用命令"></a>5. 实用命令</h3><h4 id="1-列出当前目录-文件夹并按大小排序"><a href="#1-列出当前目录-文件夹并按大小排序" class="headerlink" title="1) 列出当前目录|文件夹并按大小排序"></a>1) 列出当前目录|文件夹并按大小排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ du -sh * | sort -nr</div><div class="line"> 53M	node_modules</div><div class="line"> 24M	themes</div><div class="line"> 17M	public</div><div class="line"> 12K	scaffolds</div><div class="line">5.0M	source</div><div class="line">4.0K	package.json</div><div class="line">4.0K	hexo-deploy.sh</div><div class="line">4.0K	github-backup.sh</div><div class="line">4.0K	except.txt</div><div class="line">4.0K	db.json</div><div class="line">4.0K	_config.yml</div><div class="line">  0B	README.md</div></pre></td></tr></table></figure>
<h3 id="6-查看端口是否被占用"><a href="#6-查看端口是否被占用" class="headerlink" title="6 查看端口是否被占用"></a>6 查看端口是否被占用</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/71012196-file_1494081173977_16732.png" alt=""> </p>
<h3 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h3><ol>
<li><a href="http://fqk.io/shell-some-command/" target="_blank" rel="external">Shell常用命令备忘 by fang</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-ls命令&quot;&gt;&lt;a href=&quot;#1-ls命令&quot; class=&quot;headerlink&quot; title=&quot;1. ls命令&quot;&gt;&lt;/a&gt;1. ls命令&lt;/h3&gt;&lt;h4 id=&quot;1-显示长格式的输出&quot;&gt;&lt;a href=&quot;#1-显示长格式的输出&quot; class=&quot;header
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>算法基础学习笔记</title>
    <link href="http://jianwl.com/2017/04/24/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://jianwl.com/2017/04/24/算法基础学习笔记/</id>
    <published>2017-04-24T00:35:06.000Z</published>
    <updated>2017-04-26T00:06:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>算法一篇空白，大学所学忘的差不多了，接下来几周会侧重学习算法基础。</p>
<h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h3><h4 id="1-领居好说话-–-冒泡算法"><a href="#1-领居好说话-–-冒泡算法" class="headerlink" title="1) 领居好说话 – 冒泡算法"></a>1) 领居好说话 – 冒泡算法</h4><p><code>基本思想：</code> 每次比较两个相邻的元素，如果他们的顺序错误就把他们交换过来；每一趟只能确定将一个数归位。如<code>12 35 99 18 76</code>这5个数，第一趟确定最大的数排在第1位，第二趟确定第二大的数排在第二位，5个数字，只需要5趟，就能够排好序。</p>
<p><img src="http://i4.buimg.com/567571/c604fc4bd2fa1fa5.png" alt=""></p>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001()&#123;</div><div class="line">    int[] nums = new int[]&#123;12,35,99,18,76&#125;;</div><div class="line">    // 第一层: 待排序数[0,n-2]</div><div class="line">    for (int i = 0; i &lt; nums.length - 1; i++) &#123;</div><div class="line">        // 第二层: 未排序数[i,n-1]</div><div class="line">       for (int j = i; j&lt; nums.length -1; j++) &#123;</div><div class="line">           // 待排序数 VS 未排序数, 比其小则交换</div><div class="line">           if (nums[i] &lt; nums[j+1]) &#123;</div><div class="line">               int t = nums[i];</div><div class="line">               nums[i] = nums[j+1];</div><div class="line">               nums[j+1] = t;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    System.out.println(JSON.toJSONString(nums));</div><div class="line">&#125;</div><div class="line">// 结果 [99,76,35,18,12]</div><div class="line">// 时间复杂度 O(N^2)</div></pre></td></tr></table></figure>
<h4 id="2-最常用的排序-–-快速排序"><a href="#2-最常用的排序-–-快速排序" class="headerlink" title="2) 最常用的排序 – 快速排序"></a>2) 最常用的排序 – 快速排序</h4><p><code>基本思想：</code> 以序列<code>6 1 2 7 9 3 4 5 10 8</code>为例，分别从序列两端探测，先<strong>从右到左</strong>找一个小于6的数，找到之后，停止前进的步伐，再<strong>从左到右</strong>找一个大于6的数，然后交换他们。这里可以用变量i和变量j来表示，知道变量i和变量j相遇,完成第一次排序；</p>
<p><img src="http://i2.muimg.com/567571/e31ef94b0d159921.png" alt=""></p>
<p><code>整个算法处理过程：</code></p>
<p><img src="http://i2.muimg.com/567571/1db0b8aba2e48ad7.png" alt=""></p>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public void quick(Integer[] str) &#123;</div><div class="line">    if (str.length &gt; 0) &#123;    //查看数组是否为空</div><div class="line">        _quickSort(str, 0, str.length - 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">private void _quickSort(Integer[] list, int low, int high) &#123;</div><div class="line">    if (low &lt; high) &#123;</div><div class="line">        int middle = _getMiddle(list, low, high);  //将list数组进行一分为二</div><div class="line">        _quickSort(list, low, middle - 1);        //对低字表进行递归排序</div><div class="line">        _quickSort(list, middle + 1, high);       //对高字表进行递归排序</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">private int _getMiddle(Integer[] list, int low, int high) &#123;</div><div class="line">    int tmp = list[low];   //数组的第一个作为中轴</div><div class="line">    while (low &lt; high) &#123;</div><div class="line">        while (low &lt; high &amp;&amp; list[high] &gt; tmp) &#123;</div><div class="line">            high--;</div><div class="line">        &#125;</div><div class="line">        list[low] = list[high];   //比中轴小的记录移到低端</div><div class="line">        while (low &lt; high &amp;&amp; list[low] &lt; tmp) &#123;</div><div class="line">            low++;</div><div class="line">        &#125;</div><div class="line">        list[high] = list[low];   //比中轴大的记录移到高端</div><div class="line">    &#125;</div><div class="line">    list[low] = tmp;              //中轴记录到尾</div><div class="line">    return low;                   //返回中轴的位置</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 时间复杂度: O(NlogN)</div></pre></td></tr></table></figure>
<h3 id="2-队列、栈、链表"><a href="#2-队列、栈、链表" class="headerlink" title="2. 队列、栈、链表"></a>2. 队列、栈、链表</h3><h4 id="1-解密QQ号-–-队列"><a href="#1-解密QQ号-–-队列" class="headerlink" title="1) 解密QQ号 – 队列"></a>1) 解密QQ号 – 队列</h4><p><code>基本思想：</code> <strong>先进先出</strong>的数据结构，队尾进入，队首出去。</p>
<p><code>场景：</code>新学期开始了，小哈是小哼的新同桌，小哼向小哈询问QQ号，小哈给小哼一串加密过的数字，同时告诉小哼解密规则：将第1个数删除、紧接着将第2个数放到这串数的末尾，再将第三个数删除并将第4个数放到这串数字的末尾，再将第5个数删除….直到剩下最后一个数，将最后一个数也删除。最后将删除的数连在一起就是小哈的QQ。加密的数字为「6 3 1 7 5 8 9 2 4」</p>
<p><code>解题思路：</code> 解密第一步是将第一个数删除，如何在数组中删除一个数呢？最简单的办法是将所有后面的数都往前挪一步，将前面的数覆盖，但这样的做法太耗时了。在这里我们将引入两个变量，head用来记录队列的队首，tail用来记录队列的队尾的下一个位置。为什么tail不直接记录队尾呢，却要记录队尾的下一个位置呢？因为当队列中只剩下一个元素时，队首和队尾重合会带来一些麻烦。</p>
<p><code>解密过程：</code></p>
<p><img src="http://i1.piimg.com/567571/1bb74389d2320537.png" alt=""></p>
<p><code>实战:</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_002()&#123;</div><div class="line">    // init</div><div class="line">    int nums[] = new int[102];</div><div class="line">    List&lt;Integer&gt; initNums = Arrays.asList(6,3,1,7,5,8,9,2,4);</div><div class="line">    for(int i = 0; i &lt; initNums.size(); i ++) &#123;</div><div class="line">        nums[i] = initNums.get(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int head = 0;</div><div class="line">    int tail = initNums.size();</div><div class="line">    while (head &lt; tail) &#123;</div><div class="line">        System.out.print(nums[head] + &quot; &quot;);</div><div class="line">        head ++;</div><div class="line">        nums[tail] = nums[head];</div><div class="line">        tail ++;</div><div class="line">        head ++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 输出结果：6 1 5 9 4 7 2 8 3</div></pre></td></tr></table></figure>
<h4 id="2-解密回文-–-栈"><a href="#2-解密回文-–-栈" class="headerlink" title="2) 解密回文 – 栈"></a>2) 解密回文 – 栈</h4><p><code>基本思想：</code> <strong>后进先出</strong>的数据结构，且只能在一端进行插入和删除操作。</p>
<p><code>生活上的例子：</code>我们在吃桶装薯片的时候，想要吃掉<strong>最后一片</strong>，就必须把前面的全部吃掉；在装子弹的时候，最后装入的那发子弹，是被第一个打出去的；</p>
<p><code>场景：</code> “xyzyx”是一个回文字符串，所谓回文字符串就是正读反读均相同的字符序列。通过栈这个数据结构我们很容易判断一个字符串是否为回文。</p>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">   public void test_003()&#123;</div><div class="line">       String str = &quot;xyzyx&quot;;</div><div class="line"></div><div class="line">       // 偶数一定不是回文</div><div class="line">       if(str.length() % 2 == 0)&#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       int mid = str.length() / 2;</div><div class="line">       int top = -1;</div><div class="line">       char[] strChars = str.toCharArray();</div><div class="line">       char[] firstChars = new char[mid];</div><div class="line"></div><div class="line">       for(int i = 0; i &lt; mid; i ++) &#123;</div><div class="line">           firstChars[++top] = strChars[i];</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       System.out.print(&quot;firstChars =&gt; &quot; + new String(firstChars) + “ : ”);</div><div class="line"></div><div class="line">       // xy mid yx 左右两边是对称的;</div><div class="line">       for(int i = mid + 1; i &lt; str.length()-1; i++) &#123;</div><div class="line">           if(strChars[i] != firstChars[top])&#123;</div><div class="line">               break;</div><div class="line">           &#125;</div><div class="line">           top --;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       System.out.println(top == 0 ? &quot;YES&quot; : &quot;NO&quot;);</div><div class="line">   &#125;</div><div class="line">   // 结果: firstChars =&gt; xy : YES</div></pre></td></tr></table></figure>
<h4 id="3-链表"><a href="#3-链表" class="headerlink" title="3) 链表"></a>3) 链表</h4><p><code>场景：</code> 有一串已经从小到大排好序的数<code>2 3 5 9 10 18 26 32</code>，需要往这串数中插入6，使其得到的新序列仍符合从小到大的排序。</p>
<p><code>解决思路:</code> 方式1，将8和8后面的数都往后挪一位，但这样非常耗时。方式2，采用链表插入的方式「如图」，非常快。</p>
<p><img src="http://i1.piimg.com/567571/a579c9ed51b59186.png" alt=""></p>
<p><code>模拟链表描述：</code> 两个数组，第一个数组data用来存放具体数字，另外一个数组right用来存放当前序列中每个元素右边元素在数组data中的位置。如：right[1]的值为2，表示当前序列中1号元素右边的元素存放在data[2]中。</p>
<p><img src="http://i2.muimg.com/567571/ad75760e34453fb6.png" alt=""></p>
<p>现需要在8前面插入一个6，只需要将6直接存放在数组data的末尾即data[9]=6,接着只需要将right[3]改为9，表示新序列中3号元素右边的元素放在data[9]；再将right[9]改为3，表示新序列中9号元素右边的元素存放在data[3]中。</p>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_004()&#123;</div><div class="line">        List&lt;Integer&gt; init = Arrays.asList(2,3,5,8,9,10,18,26,32);</div><div class="line">        int[] data = new int[init.size()+1];</div><div class="line">        for (int i=0; i&lt; init.size(); i++) &#123;</div><div class="line">            data[i] = init.get(i);</div><div class="line">        &#125;</div><div class="line">        // 在数组末尾加一个数</div><div class="line">        data[data.length-1] = 6;</div><div class="line">        int[] right = new int[data.length];</div><div class="line"></div><div class="line">        for(int i = 0; i &lt; init.size(); i++)&#123;</div><div class="line">            right[i] = 1+i &lt; init.size() ? 1+i : 0;</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;data =&gt; &quot; + JSON.toJSONString(init));</div><div class="line">        System.out.println(&quot;right =&gt; &quot; + JSON.toJSONString(right) + &quot;\n\n&quot;);</div><div class="line"></div><div class="line">        // 从链表头开始遍历</div><div class="line">        int t = -1;</div><div class="line">        while (t!=0) &#123;</div><div class="line">            t = t + 1;</div><div class="line">            if(data[right[t]] &gt; data[data.length-1]) &#123;</div><div class="line">                right[data.length-1] = right[t];</div><div class="line">                right[t] = data.length-1;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            t = right[t];</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;after insert data =&gt; &quot; + JSON.toJSONString(data));</div><div class="line">        System.out.println(&quot;right =&gt; &quot; + JSON.toJSONString(right));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data =&gt; [2,3,5,8,9,10,18,26,32]</div><div class="line">right =&gt; [1,2,3,4,5,6,7,8,0,0]</div><div class="line"></div><div class="line"></div><div class="line">after insert data =&gt; [2,3,5,8,9,10,18,26,32,6]</div><div class="line">right =&gt; [1,2,9,4,5,6,7,8,0,3]</div></pre></td></tr></table></figure>
<p><code>核心代码逻辑图解：</code></p>
<p><img src="http://i4.buimg.com/567571/c1957d0f1373b136.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>啊哈！算法 by 啊哈磊</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;算法一篇空白，大学所学忘的差不多了，接下来几周会侧重学习算法基础。&lt;/p&gt;
&lt;h3 id=&quot;1-排序&quot;&gt;&lt;a href=&quot;#1-排序&quot; cl
    
    </summary>
    
      <category term="算法" scheme="http://jianwl.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://jianwl.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
