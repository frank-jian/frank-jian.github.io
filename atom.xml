<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2017-10-14T07:58:28.000Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iTerm2配置代理</title>
    <link href="http://jianwl.com/2017/10/14/iTerm2%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://jianwl.com/2017/10/14/iTerm2配置代理/</id>
    <published>2017-10-14T07:45:50.000Z</published>
    <updated>2017-10-14T07:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Shadowsocks使用全局代理模式的前提下，iTerm2下载却不走代理，这一节我们将来解决这个问题；</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="Socks-proxy"><a href="#Socks-proxy" class="headerlink" title="Socks proxy"></a>Socks proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export http_proxy=sock5://127.0.0.1:1080</div></pre></td></tr></table></figure>
<h4 id="Http-proxy"><a href="#Http-proxy" class="headerlink" title="Http proxy"></a>Http proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http_proxy=http://localhost:8035/</div></pre></td></tr></table></figure>
<h4 id="Https-proxy"><a href="#Https-proxy" class="headerlink" title="Https proxy"></a>Https proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https_proxy=http://localhost:8035/</div></pre></td></tr></table></figure>
<h3 id="验证iTerm2走了代理"><a href="#验证iTerm2走了代理" class="headerlink" title="验证iTerm2走了代理"></a>验证iTerm2走了代理</h3><h4 id="1-Shadowsocks选择全局模式"><a href="#1-Shadowsocks选择全局模式" class="headerlink" title="1. Shadowsocks选择全局模式"></a>1. Shadowsocks选择全局模式</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/94978227.jpg" alt=""></p>
<h4 id="2-浏览器访问IP查询-查看当前网络IP"><a href="#2-浏览器访问IP查询-查看当前网络IP" class="headerlink" title="2. 浏览器访问IP查询,查看当前网络IP"></a>2. 浏览器访问<a href="http://ip.cn/" target="_blank" rel="external">IP查询</a>,查看当前网络IP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/16537485.jpg" alt=""></p>
<h4 id="3-查看iTerm2访问的网络IP"><a href="#3-查看iTerm2访问的网络IP" class="headerlink" title="3. 查看iTerm2访问的网络IP"></a>3. 查看iTerm2访问的网络IP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/55981155.jpg" alt=""></p>
<h4 id="4-由此可见iTerm2已经走代理了"><a href="#4-由此可见iTerm2已经走代理了" class="headerlink" title="4. 由此可见iTerm2已经走代理了"></a>4. 由此可见iTerm2已经走代理了</h4><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://skyacer.github.io/2016/03/24/iTerm2-config-proxy/" target="_blank" rel="external">iTerm2 configure proxy</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Shadowsocks使用全局代理模式的前提下，iTerm2下载却不走代理，这一节我们将来解决这个问题；&lt;/p&gt;
&lt;h3 id=&quot;解决方案
    
    </summary>
    
      <category term="Mac" scheme="http://jianwl.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://jianwl.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java常用加密算法简述</title>
    <link href="http://jianwl.com/2017/10/11/Java%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E8%BF%B0/"/>
    <id>http://jianwl.com/2017/10/11/Java常用加密算法简述/</id>
    <published>2017-10-11T02:02:24.000Z</published>
    <updated>2017-10-11T08:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在开发应用过程中，客户端与服务端经常需要进行数据传输，涉及到重要隐私安全信息时，开发者自然会想到对其进行加密，即使传输过程中被”有心人”截取，也不会将信息泄露。对于加密算法，相信很多开发者都有了解，比如MD5加密、BASE64加密，SHA-1加密、DES加密、AES加密、RSA加密等等。在这里主要总结一下常用的加密算法。</p>
<h3 id="1-MD5加密"><a href="#1-MD5加密" class="headerlink" title="1. MD5加密"></a>1. MD5加密</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><p>MD5的全称是<code>Message-Digest Algorithm 5</code>(信息-摘要算法)，在90年代初由<code>MIT Laboratory for Computer Science 和 RSA Data Security Inc</code>的<code>Ronald L.Riverst</code>开发出来，经MD2、MD3和MD4发展而来。</p>
<p>MD5用于确保信息传输完整一致，是计算机广泛使用的杂凑算法之一,MD5的作用是让大容量信息在数字签名软件签署私人秘钥前被压缩成一种保密的格式(即把一个任意长度的字节串变成一定长的十六进制数字串)。</p>
<h4 id="1-2-算法原理"><a href="#1-2-算法原理" class="headerlink" title="1.2 算法原理"></a>1.2 算法原理</h4><p>MD5以512位分组来处理输入信息，且每一分组又被划分为32位子分组，经过了一系列的处理后，算法的输出由4个32位分组组成，将4个32位分组级联后将生成一个128位散列值。</p>
<h4 id="1-3-MD5的特点"><a href="#1-3-MD5的特点" class="headerlink" title="1.3 MD5的特点"></a>1.3 MD5的特点</h4><ol>
<li>压缩性: 任意长度的数据，算出的MD5值长度都是固定的；</li>
<li>容易计算: 从原数据计算出MD5很容易</li>
<li>抗修改性: 对原始数据进行任何改动，哪怕只修改一个字节，所得到的MD5值都有很大的区别。</li>
<li>弱抗碰撞: 已知原数据和其MD5值，想找到一个相同的MD5值的数据是非常困难的；</li>
<li>强抗碰撞: 想找到两个不同的数据，使它们具有相同的MD5值是非常困难的。</li>
</ol>
<h4 id="1-4-JAVA中MD5的实现"><a href="#1-4-JAVA中MD5的实现" class="headerlink" title="1.4 JAVA中MD5的实现"></a>1.4 JAVA中MD5的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class MD5Utils &#123;</div><div class="line">    private static final String MD5_KEY = &quot;MD5&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * MD5加密 生成32位MD5码</div><div class="line">     * @param content 待加密字符串</div><div class="line">     * @return 返回32位MD5码</div><div class="line">     * @throws UnsupportedEncodingException</div><div class="line">     */</div><div class="line">    public static String md5Encode(String content) throws UnsupportedEncodingException &#123;</div><div class="line">        MessageDigest md5 = null;</div><div class="line">        try&#123;</div><div class="line">            md5 = MessageDigest.getInstance(MD5_KEY);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        byte[] byteArray = content.getBytes(&quot;UTF-8&quot;);</div><div class="line">        byte[] md5Bytes = md5.digest(byteArray);</div><div class="line">        StringBuffer hexValue = new StringBuffer();</div><div class="line">        for (int i = 0; i &lt; md5Bytes.length; i ++) &#123;</div><div class="line">            int val = ((int) md5Bytes[i]) &amp; 0xff;</div><div class="line">            if(val &lt; 16) &#123;</div><div class="line">                hexValue.append(0);</div><div class="line">            &#125;</div><div class="line">            hexValue.append(Integer.toHexString(val));</div><div class="line">        &#125;</div><div class="line">        return hexValue.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        String content = &quot;This is a MD5 Test&quot;;</div><div class="line">        String hash = md5Encode(content);</div><div class="line">        System.out.println(&quot;original: &quot; + content);</div><div class="line">        System.out.println(&quot;md5 after: &quot; + hash + &quot; length =&gt; &quot; + hash.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-SHA加密"><a href="#2-SHA加密" class="headerlink" title="2. SHA加密"></a>2. SHA加密</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h4><p>SHA是一种数据加密算法，其算法思想是，接收一段明文，然后以一种不可逆的方式将它转换成一段密文，也可以简单的理解为取出一串输入码，并把他们转化为长度较短、位数固定的输出序列即散列值。</p>
<h4 id="2-2-SHA-1和MD5的比较"><a href="#2-2-SHA-1和MD5的比较" class="headerlink" title="2.2 SHA-1和MD5的比较"></a>2.2 SHA-1和MD5的比较</h4><p>因为两者均由MD4导出，SHA-1和MD5彼此很相似，他们的强度和其他特性也相识，但有以下几点不同：</p>
<ol>
<li>对强行攻击的安全性: 最显著和最重要的区别是SHA-1摘要比MD5摘要长32位，使用强行技术，产生任何一个报文, 对MD5是2^128数据级的操作，对SHA-1是2^160数量级的操作，这样SHA-1对强行攻击有更大的强度。</li>
<li>对密码分析的安全性：由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击。</li>
<li>速度: 在相同的硬件上，SHA-A的运行速度比MD慢。</li>
</ol>
<h4 id="2-3-JAVA中SHA实现"><a href="#2-3-JAVA中SHA实现" class="headerlink" title="2.3 JAVA中SHA实现"></a>2.3 JAVA中SHA实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class SHAUtils &#123;</div><div class="line">    private static final String SHA_KEY = &quot;SHA&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * MD5加密 生成32位MD5码</div><div class="line">     * @param content 待加密字符串</div><div class="line">     * @return 返回32位MD5码</div><div class="line">     * @throws UnsupportedEncodingException</div><div class="line">     */</div><div class="line">    public static String shaEncode(String content) throws UnsupportedEncodingException &#123;</div><div class="line">        MessageDigest sha = null;</div><div class="line">        try&#123;</div><div class="line">            sha = MessageDigest.getInstance(SHA_KEY);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        byte[] byteArray = content.getBytes(&quot;UTF-8&quot;);</div><div class="line">        byte[] shaBytes = sha.digest(byteArray);</div><div class="line">        StringBuffer hexValue = new StringBuffer();</div><div class="line">        for (int i = 0; i &lt; shaBytes.length; i ++) &#123;</div><div class="line">            int val = ((int) shaBytes[i]) &amp; 0xff;</div><div class="line">            if(val &lt; 16) &#123;</div><div class="line">                hexValue.append(0);</div><div class="line">            &#125;</div><div class="line">            hexValue.append(Integer.toHexString(val));</div><div class="line">        &#125;</div><div class="line">        return hexValue.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        String content = &quot;This is a SHA Test&quot;;</div><div class="line">        String hash = shaEncode(content);</div><div class="line">        System.out.println(&quot;original: &quot; + content);</div><div class="line">        System.out.println(&quot;sha after: &quot; + hash + &quot; length =&gt; &quot; + hash.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-对称加密与非对称加密"><a href="#3-对称加密与非对称加密" class="headerlink" title="3. 对称加密与非对称加密"></a>3. 对称加密与非对称加密</h3><h4 id="3-1-对称加密算法"><a href="#3-1-对称加密算法" class="headerlink" title="3.1 对称加密算法"></a>3.1 对称加密算法</h4><blockquote>
<p>甲方选择某一种加密规则，对信息进行加密；</p>
<p>乙方使用同一种规则，对信息进行解密。</p>
</blockquote>
<p>特点: 对称加密算法的特定是算法公开、计算量下、加密速度快、加密效率高。</p>
<p>不足: 甲方必须把加密规则告诉乙方，否则无法解密。保存和传递秘钥，就成了最头疼的问题</p>
<p>常见的对称加密算法: AES DES 3DES IDEA RC4 RC5 RC6 等</p>
<h4 id="3-2-非对称加密算法"><a href="#3-2-非对称加密算法" class="headerlink" title="3.2 非对称加密算法"></a>3.2 非对称加密算法</h4><blockquote>
<p>乙方生成两把密钥(公钥和私钥)，公钥是公开的，任何人都可以获得，私钥则是保密的。</p>
<p>甲方获取乙方的公钥，然后用它对信息加密</p>
<p>乙方得到加密后的信息，用私钥解密</p>
</blockquote>
<p>特点: 公钥和私钥是一对，如果公开密钥对数据进行加密，只有对应的私钥才能解密；如果用私钥进行加密，只有对应的公钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫非对称加密算法。</p>
<h3 id="4-AES算法和RSA算法"><a href="#4-AES算法和RSA算法" class="headerlink" title="4. AES算法和RSA算法"></a>4. AES算法和RSA算法</h3><h4 id="4-1-AES算法"><a href="#4-1-AES算法" class="headerlink" title="4.1 AES算法"></a>4.1 AES算法</h4><p>高级加密标准(Advanced Encryption Standard,缩写:AES),在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。</p>
<h4 id="4-2-RSA算法"><a href="#4-2-RSA算法" class="headerlink" title="4.2 RSA算法"></a>4.2 RSA算法</h4><p>1977年，三位科学家<code>Rivest</code>、<code>Shamir</code>和<code>Adleman</code>设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，加做RSA算法。RSA属于非对称加密算法。</p>
<h4 id="4-3-两种算法使用的场景"><a href="#4-3-两种算法使用的场景" class="headerlink" title="4.3 两种算法使用的场景"></a>4.3 两种算法使用的场景</h4><ol>
<li>客户端传输重要信息给服务端，服务端返回的信息不需加密的情况，如绑定银行卡的时候，需要传递用户的银行卡号、手机号等重要信息，客户端这边就需要对这些重要信息进行加密，使用RSA公钥加密、服务端使用RSA解密，然后返回一些普通信息，比如状态码code,提示信息msg等</li>
<li>客户端传输重要的信息给服务端，服务端返回的信息需加密,如传递用户名和密码等资料，需要进行加密，服务端验证信息后，返回令牌token需要进行加密，客户端解密后保存。</li>
</ol>
<h4 id="4-4-JAVA中使用RSA加密和解密"><a href="#4-4-JAVA中使用RSA加密和解密" class="headerlink" title="4.4 JAVA中使用RSA加密和解密"></a>4.4 JAVA中使用RSA加密和解密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">import org.apache.commons.codec.binary.Base64;</div><div class="line"></div><div class="line">import javax.crypto.BadPaddingException;</div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.IllegalBlockSizeException;</div><div class="line">import javax.crypto.NoSuchPaddingException;</div><div class="line">import java.security.*;</div><div class="line">import java.security.interfaces.RSAPrivateKey;</div><div class="line">import java.security.interfaces.RSAPublicKey;</div><div class="line">import java.security.spec.InvalidKeySpecException;</div><div class="line">import java.security.spec.PKCS8EncodedKeySpec;</div><div class="line">import java.security.spec.X509EncodedKeySpec;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class RSAUtils &#123;</div><div class="line">    private static final String PUBLIC_KEY = &quot;RSAPublicKey&quot;;</div><div class="line">    private static final String PRIVATE_KEY = &quot;RSAPrivateKey&quot;;</div><div class="line">    private static final String KEY_ALGORITHM = &quot;RSA&quot;;</div><div class="line">    private static final String SIGNATHURE_ALGORITHM = &quot;MD5withRSA&quot;;</div><div class="line"></div><div class="line">    public static Map&lt;String,Object&gt; initKey() throws NoSuchAlgorithmException &#123;</div><div class="line">        // 1. 生成公钥和私钥对，基于RSA算法生成对象</div><div class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);</div><div class="line"></div><div class="line">        // 2. 初始化密钥对生成器，密钥大小为1024位</div><div class="line">        keyPairGenerator.initialize(1024);</div><div class="line"></div><div class="line">        // 3. 生成一个密钥对，保存在keyPair中</div><div class="line">        KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line"></div><div class="line">        // 4. 得到私钥和公钥</div><div class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</div><div class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</div><div class="line"></div><div class="line">        Map&lt;String,Object&gt; keyMap = new HashMap&lt;&gt;();</div><div class="line">        keyMap.put(PUBLIC_KEY,publicKey);</div><div class="line">        keyMap.put(PRIVATE_KEY,privateKey);</div><div class="line">        return keyMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取私钥</div><div class="line">     */</div><div class="line">    public static String getPrivateKey(Map&lt;String,Object&gt; keyMap)&#123;</div><div class="line">        Key key = (Key) keyMap.get(PRIVATE_KEY);</div><div class="line">        return Base64.encodeBase64String(key.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取公钥</div><div class="line">     */</div><div class="line">    public static String getPublicKey(Map&lt;String,Object&gt; keyMap) &#123;</div><div class="line">        Key key = (Key) keyMap.get(PUBLIC_KEY);</div><div class="line">        return Base64.encodeBase64String(key.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用公钥对数据加密</div><div class="line">     */</div><div class="line">    public static byte[] encryptByPublicKey(byte[] data,String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</div><div class="line">        // 对公钥解密</div><div class="line">        byte[] keyBytes = Base64.decodeBase64(key);</div><div class="line"></div><div class="line">        // 取得公钥</div><div class="line">        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(keyBytes);</div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">        Key publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line"></div><div class="line">        // 对数据加密</div><div class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE,publicKey);</div><div class="line">        return cipher.doFinal(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用私钥对数据解密</div><div class="line">     */</div><div class="line">    public static byte[] decrptByPrivateKey(byte[] data, String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</div><div class="line">        // 对私钥解密</div><div class="line">        byte[] keyBytes = Base64.decodeBase64(key);</div><div class="line"></div><div class="line">        // 取得私钥</div><div class="line">        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(keyBytes);</div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">        Key privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line"></div><div class="line">        // 对数据解密</div><div class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">        cipher.init(Cipher.DECRYPT_MODE,privateKey);</div><div class="line"></div><div class="line">        return cipher.doFinal(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        String content = &quot;Hello World&quot;;</div><div class="line"></div><div class="line">        // 1. 初始化公钥 &amp; 私钥</div><div class="line">        Map&lt;String,Object&gt; pairKey = initKey();</div><div class="line"></div><div class="line">        // 2. 获取公钥</div><div class="line">        String publicKey = getPublicKey(pairKey);</div><div class="line"></div><div class="line">        // 3. 用公钥加密内容</div><div class="line">        byte[] encodeContent = encryptByPublicKey(content.getBytes(&quot;UTF-8&quot;),publicKey);</div><div class="line"></div><div class="line">        // 4. 获取私钥</div><div class="line">        String privateKey = getPrivateKey(pairKey);</div><div class="line"></div><div class="line">        // 5. 用私钥解密内容</div><div class="line">        byte[] decodeContent = decrptByPrivateKey(encodeContent,privateKey);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + content);</div><div class="line">        System.out.print(&quot;密文：&quot;);</div><div class="line">        System.out.println(new String(encodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;明文：&quot; + new String(decodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;加密~解密历时: &quot; + (System.currentTimeMillis() - start)/1000 + &quot;秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-5-AES加密-amp-解密"><a href="#4-5-AES加密-amp-解密" class="headerlink" title="4.5 AES加密 &amp; 解密"></a>4.5 AES加密 &amp; 解密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">import sun.misc.BASE64Decoder;</div><div class="line">import sun.misc.BASE64Encoder;</div><div class="line"></div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.spec.IvParameterSpec;</div><div class="line">import javax.crypto.spec.SecretKeySpec;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class AESUtils &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  加密</div><div class="line">     */</div><div class="line">    public static String encrypt(String sSrc, String sKey) throws Exception &#123;</div><div class="line">        if (sKey == null) &#123;</div><div class="line">            System.out.print(&quot;Key为空null&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        // 判断Key是否为16位</div><div class="line">        if (sKey.length() != 16) &#123;</div><div class="line">            System.out.print(&quot;Key长度不是16位&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        byte[] raw = sKey.getBytes();</div><div class="line">        SecretKeySpec skeySpec = new SecretKeySpec(raw, &quot;AES&quot;);</div><div class="line">        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);//&quot;算法/模式/补码方式&quot;</div><div class="line">        IvParameterSpec iv = new IvParameterSpec(&quot;0102030405060708&quot;.getBytes());//使用CBC模式，需要一个向量iv，可增加加密算法的强度</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);</div><div class="line">        byte[] encrypted = cipher.doFinal(sSrc.getBytes());</div><div class="line"></div><div class="line">        return new BASE64Encoder().encode(encrypted);//此处使用BASE64做转码功能，同时能起到2次加密的作用。</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  解密</div><div class="line">     */</div><div class="line">    public static String decrypt(String sSrc, String sKey) throws Exception &#123;</div><div class="line">        try &#123;</div><div class="line">            // 判断Key是否正确</div><div class="line">            if (sKey == null) &#123;</div><div class="line">                System.out.print(&quot;Key为空null&quot;);</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            // 判断Key是否为16位</div><div class="line">            if (sKey.length() != 16) &#123;</div><div class="line">                System.out.print(&quot;Key长度不是16位&quot;);</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            byte[] raw = sKey.getBytes(&quot;ASCII&quot;);</div><div class="line">            SecretKeySpec skeySpec = new SecretKeySpec(raw, &quot;AES&quot;);</div><div class="line">            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);</div><div class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;0102030405060708&quot;</div><div class="line">                    .getBytes());</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);</div><div class="line">            byte[] encrypted1 = new BASE64Decoder().decodeBuffer(sSrc);//先用base64解密</div><div class="line">            try &#123;</div><div class="line">                byte[] original = cipher.doFinal(encrypted1);</div><div class="line">                String originalString = new String(original);</div><div class="line">                return originalString;</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                System.out.println(e.toString());</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception ex) &#123;</div><div class="line">            System.out.println(ex.toString());</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        String content = &quot;HelloWorld123456&quot;;</div><div class="line">        String password = &quot;1234567123456712&quot;;</div><div class="line"></div><div class="line">        // AES加密</div><div class="line">        String encodeContent = encrypt(content,password);</div><div class="line"></div><div class="line">        // AES解密</div><div class="line">        String decodeContent = decrypt(encodeContent,password);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + content);</div><div class="line">        System.out.println(&quot;密文：&quot; + encodeContent);</div><div class="line">        System.out.println(&quot;明文：&quot; + decodeContent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-Base64编码"><a href="#5-Base64编码" class="headerlink" title="5. Base64编码"></a>5. Base64编码</h3><h4 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h4><p>Base64内容传送编码是一种以任意8位字节序列组合的描述形式，这种形式不易被人直接识别。Base64是一种常见的编码规范，其作用是将二进制序列转换为人类可读的ASCLL字符序列，常用在需用通过文本协议(如HTTP和SMTP)来传输二进制数据下。Base64并不是加密解密算法，尽管我们有时也听到过使用Base64来加密解密的说法，但这里所有的加密和解密实际是编码和解码的过程，其变换是非常简单的，仅仅能够编码信息被直接识别。</p>
<h4 id="5-2-原理"><a href="#5-2-原理" class="headerlink" title="5.2 原理"></a>5.2 原理</h4><p>Base64算法主要是将给定的字符以字符编码(如ASCLL码，UTF-8码)对应的十进制数为基准，做编码操作。</p>
<blockquote>
<p>1、将给定的字符串以字符为单位，转换为对应的字符编码。</p>
<p>2、将获得字符编码转换为二进制</p>
<p>3、对二进制做分组转换，每3个字节为一组，转换为每4个6位二进制位为1组(不足6位时，低位补0)这是一个分组变化的过程，3个8位二进制和4个6位二进制的长度都是24位</p>
<p>4、对获得的4-6二进制码补位，向6位二进制码添加2位高位0，组成4个8位二进制码。</p>
<p>5、对获得4-8二进制码转换为十进制码。</p>
<p>6、将获得的十进制码转换为Base64字符表中的对应字符。</p>
</blockquote>
<h4 id="5-3-JAVA实现Base64编码和解码"><a href="#5-3-JAVA实现Base64编码和解码" class="headerlink" title="5.3 JAVA实现Base64编码和解码"></a>5.3 JAVA实现Base64编码和解码</h4><p>推荐使用<code>commons-codec</code>开源包，请在maven工程中添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;commons-codec&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.10&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>实战：Base64编码 &amp; 解码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import org.apache.commons.codec.binary.Base64;</div><div class="line"></div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class Base64Utils &#123;</div><div class="line">    private static final String QUERY_URL = &quot;http://localhost:8080/hello?content=sayHello&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        byte[] encodeContent = Base64.encodeBase64URLSafe(QUERY_URL.getBytes(&quot;UTF-8&quot;));</div><div class="line">        byte[] decodeContent = Base64.decodeBase64(encodeContent);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + QUERY_URL);</div><div class="line">        System.out.println(&quot;编码：&quot; + new String(encodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;解码：&quot; + new String(decodeContent,&quot;UTF-8&quot;));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.jianshu.com/p/316ce9fa083e" target="_blank" rel="external">JAVA中常用加密算法简述</a></li>
<li><a href="http://www.jianshu.com/p/d83f5be22181" target="_blank" rel="external">Java与加密解密</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在开发应用过程中，客户端与服务端经常需要进行数据传输，涉及到重要隐私安全信息时，开发者自然会想到对其进行加密，即使传输过程中被”有心人”截取
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>沉浸式学Git</title>
    <link href="http://jianwl.com/2017/09/26/%E6%B2%89%E6%B5%B8%E5%BC%8F%E5%AD%A6Git/"/>
    <id>http://jianwl.com/2017/09/26/沉浸式学Git/</id>
    <published>2017-09-26T07:12:33.000Z</published>
    <updated>2017-09-26T07:37:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>平时用SourceTree比较多，对于Git命令比较生疏，这块是个短板；找到一篇比较实用的Git科普文，这里会简单介绍下常用的场景。</p>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><code>git status</code>、<code>git add</code>、<code>git commit</code>、<code>git checkout</code>是非常常用的命令，因此对它们进行缩写十分有用。</p>
<p>MacOS系统中的git config file的在哪？可以参见这篇文章<a href="https://stackoverflow.com/questions/16283280/how-to-locate-the-git-config-file-in-mac" target="_blank" rel="external">How to locate the git config file in Mac</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  co = checkout</div><div class="line">  ci = commit</div><div class="line">  st = status</div><div class="line">  br = branch</div><div class="line">  hist = log --pretty=format:&apos;%h %ad | %s%d [%an]&apos; --graph --date=short</div><div class="line">  type = cat-file -t</div><div class="line">  dump = cat-file -p</div></pre></td></tr></table></figure>
<h3 id="撤销提交的更改"><a href="#撤销提交的更改" class="headerlink" title="撤销提交的更改"></a>撤销提交的更改</h3><p>有时候你意识到已经提交的更改不正确并想撤销该提交，有几种方式可以处理这种问题，我们在本实验中所用的方式总是安全的。</p>
<p>1、 更改文件并提交(更改hello.java文件)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world!</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add hello.java</div><div class="line">$ git commit -m &quot;init hello.java file&quot;</div></pre></td></tr></table></figure>
<p>2、创建还原提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git revert HEAD</div></pre></td></tr></table></figure>
<p>这将带你到编辑器中，你可以编辑默认的提交信息，或直接离开它。保存并关闭文件，你应该看到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git revert HEAD --no-edit</div><div class="line">[master 6b9d8af] Revert &quot;init hello.java file&quot;</div><div class="line">1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<p>因为我们将撤销我们做的最后提交，所以我们使用HEAD作为还原的参数。通过简单的指定哈希值，我们可以撤销早期历史中的任意提交。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://igit.linuxtoy.org/contents.html" target="_blank" rel="external">沉浸式学Git</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;平时用SourceTree比较多，对于Git命令比较生疏，这块是个短板；找到一篇比较实用的Git科普文，这里会简单介绍下常用的场景。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jianwl.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jianwl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java问题排查工具箱</title>
    <link href="http://jianwl.com/2017/09/21/Java%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    <id>http://jianwl.com/2017/09/21/Java问题排查工具箱/</id>
    <published>2017-09-20T16:44:29.000Z</published>
    <updated>2017-09-20T17:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在长期排查线上问题的过程中，总结了一些工具的用法和排查问题的思路，首先讲讲工具，JVM自带的一些工具是必须掌握的，例如jstack、jmap、jstat等，它可以帮我们去深入了解JVM正在做的事情，主要的使用领取有这些：</p>
<h3 id="1、jstack"><a href="#1、jstack" class="headerlink" title="1、jstack"></a>1、jstack</h3><blockquote>
<p>jstack可以告诉你当前所有JVM线程正在做什么，包括用户线程和虚拟机线程，你可以用它来查看线程，并且结合Lock信息来检测是否发生了死锁和死锁的线程。</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/88774560.jpg" alt=""></p>
<h3 id="2、jstat"><a href="#2、jstat" class="headerlink" title="2、jstat"></a>2、jstat</h3><blockquote>
<p>stat,顾明思义就是提供一些统计信息，它可以告诉你当前的GC情况，包括GC次数、时间、具体的GC还可以结合gc.log文件去分析。</p>
<p>一般来说，我们用jstat去查看GC情况，判断是否存在YGC或FGC频繁的情况，再去看gc.log和jamp dump内存，MAT分析来定位问题(后面会有一个case针对这种场景)</p>
<p>常用的用法是jstat -gcutil pid time_interval</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/72875924.jpg" alt=""></p>
<h3 id="3、jmap"><a href="#3、jmap" class="headerlink" title="3、jmap"></a>3、jmap</h3><blockquote>
<p>排查GC问题必然会用到的工具，jmap可以告诉你当前JVM内存堆中的对象分布及其关系，当你dump堆之后可以用MAT分析，看看有哪些大对象，或者哪些类的实例特别多。</p>
<p>常用用法：</p>
<p>强制FGC: -histo:live</p>
<p>dump堆:-dump:[live],format=b,file=dump.bin</p>
<p>查看各代内存占用情况: -heap</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/33702309.jpg" alt=""></p>
<p>然后我们来介绍一些开源的工具，来增强JVM工具本身的作用：</p>
<h3 id="1、MAT-Eclipse-Memory-Analyzer"><a href="#1、MAT-Eclipse-Memory-Analyzer" class="headerlink" title="1、MAT(Eclipse Memory Analyzer)"></a>1、MAT(Eclipse Memory Analyzer)</h3><blockquote>
<p>GC必备分析，用于分析jmap或OOM时dump出来的内存快照，可以看到对象和引用关系；</p>
<p>官方地址：<a href="http://www.eclipse.org/mat" target="_blank" rel="external">http://www.eclipse.org/mat</a></p>
</blockquote>
<h3 id="2、top"><a href="#2、top" class="headerlink" title="2、top"></a>2、top</h3><blockquote>
<p>这个是Linux自带的命令，查看系统资源消耗情况，可以看到CPU、内存、SWAP、I/O的消耗情况，需要特别注意有几个值：</p>
<p>ni,这个值如果特别高说明线程上下文切换开销较大，看看是不是开了太多的线程导致的</p>
<p>res，这个代表了进程实际占用的内存</p>
<p>swap，内存不足就是占用swap空间，这个时候一般应用的性能会急剧下降，需要特别关注；</p>
</blockquote>
<h3 id="3、HouseMD"><a href="#3、HouseMD" class="headerlink" title="3、HouseMD"></a>3、HouseMD</h3><blockquote>
<p>一个类似于BTrace的小工具，用于对JVM运行时的状态进行追踪和诊断，作者是中间件团队的聚石。</p>
<p>通常我们排查问题很多时候都在代码中加个日志，看看方法的参数、返回值是不是我们期望的，然后编译打包部署重启应用，十几分钟过去了。HouseMD可以直接让你可以追踪到方法的返回值和参数，以及调用次数、调用平均rt、调用栈，甚至是类的成员变量的值、Class加载的路径、对应的ClassLoader都可以用一行命令给你展现出来，堪称神器。</p>
</blockquote>
<h3 id="4、TBJMap"><a href="#4、TBJMap" class="headerlink" title="4、TBJMap"></a>4、TBJMap</h3><blockquote>
<p>通过jmap和MAT我们可以知道整个JVM堆的对象分布情况，但是有时候我们需要知道young/old/perm区分别有哪些对象的时候，就要用到TBJMap这个神器了。</p>
<p>它可以告诉你各个分代区各个Class的实例数、占用的空间、以及DirectMemory占用的空间等。</p>
</blockquote>
<h3 id="5、tsar"><a href="#5、tsar" class="headerlink" title="5、tsar"></a>5、tsar</h3><blockquote>
<p>sar是淘宝的采集工具，主要用来收集服务器的系统信息（如cpu，io，mem，tcp等）以及应用数据（如squid haproxy nginx等），tsar支持t实时查看和历史查看，方便了解应用和服务器的信息。</p>
</blockquote>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://hellojava.info/?p=517" target="_blank" rel="external">Java问题排查工具箱 - 毕玄</a></li>
<li><a href="http://colobu.com/2016/08/10/Java-Flame-Graphs/" target="_blank" rel="external">火焰图</a></li>
<li><a href="http://blog.csdn.net/fenglibing/article/details/6411951" target="_blank" rel="external">JDK内置工具使用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;在长期排查线上问题的过程中，总结了一些工具的用法和排查问题的思路，首先讲讲工具，JVM自带的一些工具是必须掌握的，例如jstack、jmap
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中文乱码排查</title>
    <link href="http://jianwl.com/2017/09/20/MySQL%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%8E%92%E6%9F%A5/"/>
    <id>http://jianwl.com/2017/09/20/MySQL中文乱码排查/</id>
    <published>2017-09-20T06:17:39.000Z</published>
    <updated>2017-09-22T04:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Github上看到别人用JAVA写了个文章管理工具，git clone到本地看看；按照教程将SQL导入MYSQL中，并启动SpringBoot项目。项目启动之后长这样：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/54860156.jpg" alt=""></p>
<p>1、新建文章(未保存)</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/43647701.jpg" alt=""></p>
<p>2、保存文章后</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/45523456.jpg" alt=""></p>
<h3 id="出现问题的反应"><a href="#出现问题的反应" class="headerlink" title="出现问题的反应"></a>出现问题的反应</h3><p>因为是git clone别人的代码，下意识认为代码层面是没有问题的。第一反应是浏览器编码的问题，尝试了Chrome、Safari、Firefox三个浏览器都是乱码；将编码设置为UTF8之后仍是乱码；于是开始调试代码；</p>
<p>保存文章的流程：① 新建文章 ② 点击保存文章 ③ 后端接收前端传过来的内容 ④ 后端将数据存入数据库，在步骤③打印日志，发现后端接收到的内容是正常的，非乱码，但存入数据库却是乱码的；将问题定位到数据库；</p>
<h3 id="解决数据库中文乱码"><a href="#解决数据库中文乱码" class="headerlink" title="解决数据库中文乱码"></a>解决数据库中文乱码</h3><p>1、根据以下这条命令查询MYSQL的字符集</p>
<blockquote>
<p>show variables like ‘character%’</p>
</blockquote>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/65176549.jpg" alt=""></p>
<p>如图可知，服务端的编码非”UTF8”，而存入的中文编码是”UTF8”，因为编码不一致导致乱码；</p>
<p>2、修改数据库my.cnf配置文件加个配置：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/68228133.jpg" alt=""></p>
<p>3、重启MYSQL服务器</p>
<h3 id="中文乱码Fixed"><a href="#中文乱码Fixed" class="headerlink" title="中文乱码Fixed"></a>中文乱码Fixed</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/6735572.jpg" alt=""></p>
<h3 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h3><p>临时改变编码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set character_set_server = utf8</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Github上看到别人用JAVA写了个文章管理工具，git clone到本地看看；按照教程将SQL导入MYSQL中，并启动SpringBo
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域学习</title>
    <link href="http://jianwl.com/2017/09/19/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jianwl.com/2017/09/19/Java内存区域学习/</id>
    <published>2017-09-19T14:25:57.000Z</published>
    <updated>2017-09-20T09:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/5113112.jpg" alt=""></p>
<p>JVM内存模型分为两部分私有内存和共享内存；如图所示，堆和方法区是所有线程共有的，而虚拟栈、本地方法栈、程序计数器则是线程私有的。接下来我们来一一分析不同区域的作用。</p>
<h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>堆内存是所有线程共有的，可分为两部分：年轻代和老年代。下图中的Perm代表的永久代，但是永久代并不属于堆内存中的一部分，同时JDK1.8之后永久代被移除了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/12946482.jpg" alt=""></p>
<p>GC(垃圾回收器)对年轻中的对象进行回收被称为Minor GC,用通俗一点的话说年轻代就是用来存放年轻的对象，年轻对象是什么意思呢?年轻对象可以简单的理解为没有经历多次垃圾回收的对象，如果一个对象经历过一定次数的Minor GC,JVM一般就会将这个对象放入到年轻代，而JVM对年老代对象回收则成为Major GC。</p>
<p>如上图所示，年轻代中还可以细分为三个部分，我们需要重点关注这几点:</p>
<p>1、 大部分对象刚创建的时候，JVM将其分布到Eden区域。</p>
<p>2、当Eden区域中的对象达到一定的数目的时候，就会进行Minor GC，经历这次垃圾回收后所有存活的对象都会进入两个 Suvivor Place中的一个。</p>
<p>3、同一时刻两个Suvivor Place,即S0和S1中总有一个总是空的。</p>
<p>4、年轻代中的对象经历过了多次的垃圾回收就会转移到年老代中。</p>
<p>5、当申请不到空间时会抛出OutOfMemoryError.下面我们简单模拟一个内存溢出的情况:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class HeapOOM &#123;</div><div class="line">    static  class  OOMObject&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;OOMObject&gt;();</div><div class="line">        while (true) &#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是执行的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</div><div class="line">	at java.util.Arrays.copyOf(Arrays.java:3210)</div><div class="line">	at java.util.Arrays.copyOf(Arrays.java:3181)</div><div class="line">	at java.util.ArrayList.grow(ArrayList.java:261)</div><div class="line">	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)</div><div class="line">	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)</div><div class="line">	at java.util.ArrayList.add(ArrayList.java:458)</div><div class="line">	at jvm.HeapOOM.main(HeapOOM.java:17)</div></pre></td></tr></table></figure>
<p>堆内存是我们平时在生产环境中进行性能调优中一个非常重要的部分，以下拓展补充几个常见的性能调优参数：</p>
<ul>
<li>PretenureSizeThreshold:直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代中分配。</li>
<li>MaxTenuringThreshold:晋升到老年代的对象年龄，每个对象在坚持过一次Minor GC之后，年龄会加1，当超过这个参数值时就进入老年代。</li>
<li>UseAdaptiveSizePolicy:动态调整Java堆中各个区域的大小以及进入年老代的年龄。</li>
<li>SurivorRatio:新生代Eden区域与Survivor区域的容量比例，默认为8，代表Eden: Suvivor = 8:1。</li>
<li>NewRatio:设置新生代(包括Eden和两个Survivor区)与老年代的比值(除去持久代)，设置为3，则新生代与年老代所占比值为1：3，新生代占整个堆栈的1/4</li>
<li>Xmx:设置JVM堆最大内存</li>
<li>Xms:设置JVM堆初始化内存</li>
<li>Xmn:参数设置年轻代内存</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区与Java堆一样，是所有线程共享的区域，它用于存储已被虚拟机加载的类信息、常量、静态常量，即时编译(JIT)后的代码等数据。</p>
<p>对于JDK1.8之前的HotSpot虚拟机而言，很多人经常将方法区称为我们上图中所描述的永久代，实际上两者并不等价，因为这仅仅是HotSpot的设计团队选择利用永久代来实现方法区而言。同时对于其他虚拟机比如IBM J9是不存在永久代概念的。</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>JVM中程序计数器和计算机组成原理中提到的程序计数器PC概念类似，线程私有，用来记录执行的字节码位置。CPU的占有时间是以分片的形式分配给每个不同线程的，从操作系统的角度讲，在不同线程之间切换的时候就是依赖程序计数器来记录上一次线程所执行到具体的代码的行数，在JVM就是字节码。</p>
<h3 id="JAVA虚拟机栈"><a href="#JAVA虚拟机栈" class="headerlink" title="JAVA虚拟机栈"></a>JAVA虚拟机栈</h3><p>与程序计数器一样，JAVA虚拟机栈也是线程私有的，用通俗的话将它就是我们常常听到堆栈中的那个“栈”内存。虚拟机栈描述的是JAVA方法执行的内存模型：每个方法在执行的时候都会创建一个栈帧(Stack Frame)用于存储局部变量表（局部变量表需要的内存，在编译期间就确定所在方法运行期间不会改变大小），操作数栈、动态链接、方法出口等信息。每一个方法从调用至出栈的过程，就是栈帧在虚拟机中从入栈到出栈的过程。</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈和JAVA虚拟机栈类似，只不过是为JVM执行Native方法服务。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解JAVA虚拟机</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oc5a5l0a0.bkt.clouddn.com/17-9-20/5113112.jpg&quot; alt=&quot;&quot;
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java8之HashMap源码学习</title>
    <link href="http://jianwl.com/2017/09/01/Java8%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jianwl.com/2017/09/01/Java8之HashMap源码学习/</id>
    <published>2017-09-01T07:20:01.000Z</published>
    <updated>2017-09-01T13:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>随着JDK的更新，JDK1.8对HashMap底层的实现进行了优化，本文想深入探讨HashMap的结构实现和功能原理。</p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/39063824.jpg" alt=""></p>
<p>Java为数据结构中的映射定义了一个接口java.util.Map，此接口有四个常用的实现类，分别为HashMap、LinkedHashMap和TreeMap，类继承关系如图；以下针对各个实现类的特定做了一些说明；</p>
<p>(1) HashMap: 它根据键的hashCode值存储数据，大多数情况可以直接定位到它的值，因而具有很快的访问速度，但遍历速度却是不确定的。HashMap最多只允许一条记录键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻多个线程同时写HashMap，可能会导致数据的不一致，如果要满足线程安全可以用Collections的synchronizedMap方法使HashMap具有线程安全的能力，或使用ConcurrentHashMap。</p>
<p>(2) Hashtable: Hashtable是遗留类，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable,并发性不如ConcurrentHashMap,因为ConcurrentHashMap引入了分段锁。Hashtable不允许键或值为null；</p>
<p>(3) LinkedHashMap: LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序;</p>
<p>(4) TreeMap: TreeMap实现了SortedMap接口，能够把它的记录根据键排序，默认按键值的升序排序，也可以指定排序的比较器；</p>
<p>上述四种Map类型的类，要求映射的key是<strong>不可变类</strong>，不可变类是该对象在创建后它的哈希值不会被改变。如果对象的哈希值改变了，Map对象很可能就定位不到映射的位置了。</p>
<h3 id="存储结构-字段"><a href="#存储结构-字段" class="headerlink" title="存储结构 - 字段"></a>存储结构 - 字段</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/44470980.jpg" alt=""></p>
<p>这里需要讲明白两个问题，数据底层具体存储的是什么？这样的存储方式有什么优点？</p>
<p>1、什么是Node?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">        final int hash; // 定位数组的索引位置</div><div class="line">        final K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next; // 链表的下一个Node</div><div class="line"></div><div class="line">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</div><div class="line"></div><div class="line">        public final K getKey()        &#123; ... &#125;</div><div class="line">        public final V getValue()      &#123; ... &#125;</div><div class="line">        public final String toString() &#123; ... &#125;</div><div class="line"></div><div class="line">        public final int hashCode() &#123; ... &#125;</div><div class="line"></div><div class="line">        public final V setValue(V newValue) &#123; ... &#125;</div><div class="line"></div><div class="line">        public final boolean equals(Object o) &#123; ... &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Node是HashMap的内部类，实现了Map.Entry接口，本质上Node是一个链表；</p>
<p>2、如何确认哈希桶索引位置?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line">static final int hash(Object key) &#123;   //jdk1.8 &amp; jdk1.7</div><div class="line">     int h;</div><div class="line">     // h = key.hashCode() 为第一步 取hashCode值</div><div class="line">     // h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</div><div class="line">     return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class="line">&#125;</div><div class="line">方法二：</div><div class="line">static int indexFor(int h, int length) &#123;  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</div><div class="line">     return h &amp; (length-1);  //第三步 取模运算</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的Hash算法本质上就三步：取key的hashCode值、高位运算、取模运算；举例说明：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/79939676.jpg" alt=""></p>
<p>这样就可以通过key来定位数组的索引位置了；</p>
<p>3、如何解决哈希冲突？</p>
<p>采用链地址法，简单来说就是数组加链表的结合，在每个数组元素上都是一个链表结构，当数据Hash后，得到数组下标，都把数据放在对应下标元素的链表上。</p>
<p>4、关于哈希冲突的调优？</p>
<p>两个Key定位到相同的位置，表示发生了哈希冲突。通过什么方式可来控制Map是的哈希碰撞概率小，哈希桶数组占用空间又小呢？有几个参数需要重点注意：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int threshold // 扩容的阈值 -- 数组length * loadFactor</div><div class="line">final float loadFactor; // 负载因子 -- 默认0.75</div><div class="line">int modCount;</div><div class="line">int size;</div></pre></td></tr></table></figure>
<p>默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。</p>
<h3 id="分析HashMap的put方法"><a href="#分析HashMap的put方法" class="headerlink" title="分析HashMap的put方法"></a>分析HashMap的put方法</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/13730914.jpg" alt=""></p>
<h3 id="JDK1-8-VS-JDK1-7-性能测试"><a href="#JDK1-8-VS-JDK1-7-性能测试" class="headerlink" title="JDK1.8 VS JDK1.7 性能测试"></a>JDK1.8 VS JDK1.7 性能测试</h3><p>1、哈希较均匀的情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class Keys &#123;</div><div class="line">    public static final int MAX_KEY = 1_000_000;</div><div class="line">    private static final Key[] KEYS_CACHE = new Key[MAX_KEY];</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        for (int i = 0; i &lt; MAX_KEY; ++i) &#123;</div><div class="line">            KEYS_CACHE[i] = new Key(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Key of(int value) &#123;</div><div class="line">        return KEYS_CACHE[value];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void test(int mapSize) &#123;</div><div class="line">        HashMap&lt;Key, Integer&gt; map = new HashMap&lt;Key, Integer&gt;(mapSize);</div><div class="line">        for (int i = 0; i &lt; mapSize; i++) &#123;</div><div class="line">            map.put(Keys.of(i), i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        long beginTime = System.nanoTime();</div><div class="line">        for (int i = 0; i &lt; mapSize; i++) &#123;</div><div class="line">            map.get(Keys.of(i));</div><div class="line">        &#125;</div><div class="line">        long endTime = System.nanoTime();</div><div class="line">        System.out.println(&quot;mapSize =&gt; &quot; + mapSize + &quot; time =&gt; &quot; + (endTime - beginTime));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        for (int i = 10; i &lt;= MAX_KEY; i *= 10) &#123;</div><div class="line">            test(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Key implements Comparable&lt;Key&gt; &#123;</div><div class="line">    private final int value;</div><div class="line"></div><div class="line">    public Key(int value) &#123;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int compareTo(Key o) &#123;</div><div class="line">        return Integer.compare(this.value, o.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean equals(Object o) &#123;</div><div class="line">        if (this == o) return true;</div><div class="line">        if (o == null || getClass() != o.getClass())</div><div class="line">            return false;</div><div class="line">        Key key = (Key) o;</div><div class="line">        return value == key.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int hashCode() &#123;</div><div class="line">        return value; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/1545958.jpg" alt=""></p>
<p>从图上可看到JDK1.8的效率远远高于JDK1.7</p>
<p>2、哈希不均匀测试</p>
<p>修改了HashCode的值，其余不变；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Key implements Comparable&lt;Key&gt; &#123;</div><div class="line">    </div><div class="line">    ....</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int hashCode() &#123;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/48441366.jpg" alt=""></p>
<p>由图中结果可知，随着size的变大，JDK1.7花费时间是增长的趋势，而JDK1.8是明显的降低趋势，并呈现对数增长稳定，当一个链表太长是，HashMap会动态将它替换为红黑树，这将时间复杂度从O(N)将为O(logn)。hash算法均匀和不均匀所花费的时间明显也不相同。</p>
<p>3、JDK1.8 哈希均匀 VS 哈希不均匀</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/40579970.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;随着JDK的更新，JDK1.8对HashMap底层的实现进行了优化，本文想深入探讨HashMap的结构实现和功能原理。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>java基础-异常</title>
    <link href="http://jianwl.com/2017/08/27/java%E5%9F%BA%E7%A1%80-%E5%BC%82%E5%B8%B8/"/>
    <id>http://jianwl.com/2017/08/27/java基础-异常/</id>
    <published>2017-08-27T14:12:18.000Z</published>
    <updated>2017-08-27T15:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-异常类图"><a href="#1-异常类图" class="headerlink" title="1. 异常类图"></a>1. 异常类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/72172724.jpg" alt=""></p>
<h3 id="2-受检异常-VS-非受检异常"><a href="#2-受检异常-VS-非受检异常" class="headerlink" title="2. 受检异常 VS 非受检异常"></a>2. 受检异常 VS 非受检异常</h3><blockquote>
<p>受检异常：继承Exception的子类，需要明确去处理异常；</p>
<p>非受检异常：继承RuntimeException的子类，不需要明确去处理异常；</p>
</blockquote>
<p>非受检异常：继承RuntimeException的子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class UncheckedException extends RuntimeException &#123;</div><div class="line">    public UncheckedException() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public UncheckedException(String message) &#123;</div><div class="line">        super(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public UncheckedException(String message, Throwable cause) &#123;</div><div class="line">        super(message, cause);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>受检异常：继承Exception的子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class CheckedException extends Exception&#123;</div><div class="line">    public CheckedException() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CheckedException(String message) &#123;</div><div class="line">        super(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CheckedException(String message, Throwable cause) &#123;</div><div class="line">        super(message, cause);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/70188955.jpg" alt=""></p>
<p>如图可知，受检异常必须要处理，否则会报错；非受检异常，可以不处理；</p>
<h3 id="3-StackOverFlowError-VS-OutOfMemoryError"><a href="#3-StackOverFlowError-VS-OutOfMemoryError" class="headerlink" title="3. StackOverFlowError VS OutOfMemoryError"></a>3. StackOverFlowError VS OutOfMemoryError</h3><blockquote>
<p>stackOverFlowError: 与栈相关，所有本地变量和方法调用都存于栈，每次方法的调用都会创建栈空间，一旦方法执行完毕栈空间将回收；</p>
<p>outOfMemoryError:与堆相关，创建的对象引用存于堆中，当JVM尝试给新对象分配内存时，没有足够的堆内存，将抛出OOM。</p>
</blockquote>
<p>stackOverFlowError举例：无限递归方法</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/23183251.jpg" alt=""></p>
<p>outOfMemoryError举例：创建超大对象</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/80401561.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror" target="_blank" rel="external">What’s the difference between StackOverflowError and OutOfMemoryError</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-异常类图&quot;&gt;&lt;a href=&quot;#1-异常类图&quot; class=&quot;headerlink&quot; title=&quot;1. 异常类图&quot;&gt;&lt;/a&gt;1. 异常类图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oc5a5l0a0.bkt.clouddn.com/17-8-27/7
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>java基础-集合梳理</title>
    <link href="http://jianwl.com/2017/08/27/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88%E6%A2%B3%E7%90%86/"/>
    <id>http://jianwl.com/2017/08/27/java基础-集合梳理/</id>
    <published>2017-08-27T06:58:37.000Z</published>
    <updated>2017-08-27T08:53:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Map类图-不包含java-util-concurrent包的类"><a href="#1-Map类图-不包含java-util-concurrent包的类" class="headerlink" title="1. Map类图(不包含java.util.concurrent包的类)"></a>1. Map类图(不包含java.util.concurrent包的类)</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/64952891.jpg" alt=""></p>
<h3 id="2-List类图-整理部分常用"><a href="#2-List类图-整理部分常用" class="headerlink" title="2. List类图(整理部分常用)"></a>2. List类图(整理部分常用)</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/83565321.jpg" alt=""></p>
<h3 id="3-Set类图整理-不包含java-util-concurrent包的类"><a href="#3-Set类图整理-不包含java-util-concurrent包的类" class="headerlink" title="3. Set类图整理(不包含java.util.concurrent包的类)"></a>3. Set类图整理(不包含java.util.concurrent包的类)</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/89594162.jpg" alt=""></p>
<h3 id="4-集合类图整理"><a href="#4-集合类图整理" class="headerlink" title="4. 集合类图整理"></a>4. 集合类图整理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/57993384.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Map类图-不包含java-util-concurrent包的类&quot;&gt;&lt;a href=&quot;#1-Map类图-不包含java-util-concurrent包的类&quot; class=&quot;headerlink&quot; title=&quot;1. Map类图(不包含java.util.co
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>泛型中extends和super的区别?</title>
    <link href="http://jianwl.com/2017/08/27/%E6%B3%9B%E5%9E%8B%E4%B8%ADextends%E5%92%8Csuper%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://jianwl.com/2017/08/27/泛型中extends和super的区别/</id>
    <published>2017-08-27T05:10:19.000Z</published>
    <updated>2017-08-27T05:11:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://itimetraveler.github.io/2016/12/27/%E3%80%90Java%E3%80%91%E6%B3%9B%E5%9E%8B%E4%B8%AD%20extends%20%E5%92%8C%20super%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/" target="_blank" rel="external">【Java】泛型中 extends 和 super 的区别？</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://itimetraveler.github.io/2016/12/27/%E3%
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>高效实用Python字典的清单</title>
    <link href="http://jianwl.com/2017/08/22/%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8Python%E5%AD%97%E5%85%B8%E7%9A%84%E6%B8%85%E5%8D%95/"/>
    <id>http://jianwl.com/2017/08/22/高效实用Python字典的清单/</id>
    <published>2017-08-22T14:22:12.000Z</published>
    <updated>2017-08-22T15:07:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>字典(dict)对象是Python最常用的数据结构，这里整理了几个关于高效实用字典的清单，希望Python开发者可以在日常应用开发中合理利用，让代码更加Pythonic。</p>
<h3 id="1、用in关键字检查key是否存在"><a href="#1、用in关键字检查key是否存在" class="headerlink" title="1、用in关键字检查key是否存在"></a>1、用in关键字检查key是否存在</h3><p>Python之禅中有一句开发哲学是:</p>
<blockquote>
<p>There should be one – and perferably only one –obvious way to do it.</p>
</blockquote>
<p>尽量找一种，最好是唯一一种显而易见的解决方案。Python2中判断某个key是否存在字典中可使用<code>has_key</code>方法，另外一种方式是使用<code>in</code>关键字。但强烈推荐后者，因为in的处理速度更快，另外一个原因是<code>has_key</code>这个方法在Python3被移除了。</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">info = dict(name=&apos;zhangsan&apos;,age=23)</div><div class="line">if info.has_key(&apos;name&apos;):</div><div class="line">   pass</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">info = dict(name=&apos;zhangsan&apos;,age=23)</div><div class="line">if &apos;name&apos; in info:</div><div class="line">   pass</div></pre></td></tr></table></figure>
<h3 id="2、用get获取字典中的值"><a href="#2、用get获取字典中的值" class="headerlink" title="2、用get获取字典中的值"></a>2、用get获取字典中的值</h3><p>关于获取字典的值，一种简单的方式就是用d[x]访问元素，但是这种情况在key不存在的情况下会报KeyError错误，当然你可以先用in操作检查key是否在字典中在获取，不过这种方式不符合Python之禅中说的：</p>
<blockquote>
<p>Simple is better then complex<br>Flat is better than nested.</p>
</blockquote>
<p>好的代码应该是简单易懂的，扁平的代码结构更加可读。所以我们可以使用get方法来替代if … else.</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = dict(name=&apos;python&apos;)</div><div class="line">if &apos;name&apos; in d:</div><div class="line">    print d[&apos;hello&apos;]</div><div class="line">else:</div><div class="line">	 print &apos;default&apos;</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print d.get(&apos;name&apos;,&apos;default&apos;)</div></pre></td></tr></table></figure>
<h3 id="3、用setdefault为字典中不存在的key设置缺省值"><a href="#3、用setdefault为字典中不存在的key设置缺省值" class="headerlink" title="3、用setdefault为字典中不存在的key设置缺省值"></a>3、用setdefault为字典中不存在的key设置缺省值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = [(&apos;animal&apos;,&apos;bear&apos;),(&apos;animal,&apos;duck&apos;),(&apos;plant&apos;,&apos;catus&apos;),(&apos;vehicle&apos;,&apos;speed boat&apos;),(&apos;vehicle&apos;,&apos;school bus&apos;)]</div></pre></td></tr></table></figure>
<p>在做分类统计时，希望把同一类型的数据归到字典中的某种类型中，比如上面代码，把相同类型的事物用列表形式重新组装，得到新字典。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = dict(animal=[&apos;bear&apos;,&apos;duck&apos;],plant=[&apos;cacuts&apos;],vehicle=[&apos;speed boat&apos;,&apos;school bus&apos;])</div></pre></td></tr></table></figure>
<p>普通的方式就是先判断key是否存在，如果不存在则要先用列表对象进行初始化，在执行后续操作。而更好的方式就是使用字典中的setdefault方法。</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">groups = &#123;&#125;</div><div class="line">for (key,value) in data:</div><div class="line">    if key in groups:</div><div class="line">       groups[key].append(value)</div><div class="line">    else:</div><div class="line">       groups[key] = [value]</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">groups = &#123;&#125;</div><div class="line">for (key,value) in data:</div><div class="line">    groups.setdefault(key,[]).append(value)</div></pre></td></tr></table></figure>
<p><code>setdefault</code>的作用是：</p>
<ol>
<li>如果key存在与字典中，那么直接返回对应的值，等效于get</li>
<li>如果key不存在字典中，则会用setdefault中的第二个参数作为该key的值，在返回该值。</li>
</ol>
<h3 id="4、用字典实现swith-…-case语句"><a href="#4、用字典实现swith-…-case语句" class="headerlink" title="4、用字典实现swith … case语句"></a>4、用字典实现swith … case语句</h3><p>Python中没有switch…case语句，这个问题Python之父龟叔表示这个语法过去没有，现在没有，以后也不会有。因为Python简洁的语法完全可以用if…elif实现。如果有太多的分支判断，还可以使用字典来代替。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if arg == 0:</div><div class="line">  return &apos;zero&apos;</div><div class="line">elif arg == 1:</div><div class="line">  return &apos;one&apos;</div><div class="line">elif arg == 2:</div><div class="line">  return &apos;two&apos;</div><div class="line">elif arg == 3:</div><div class="line">  return &apos;three&apos;</div><div class="line">else:</div><div class="line">  return &apos;nothing&apos;</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = dict(0=&apos;zero&apos;,1=&apos;one&apos;,2=&apos;two&apos;,3=&apos;three&apos;)</div><div class="line">data.get(arg,&quot;nothing&quot;)</div></pre></td></tr></table></figure>
<h3 id="5、使用items迭代字典中的元素"><a href="#5、使用items迭代字典中的元素" class="headerlink" title="5、使用items迭代字典中的元素"></a>5、使用items迭代字典中的元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data = dict(0=&apos;zero&apos;,1=&apos;one&apos;,2=&apos;two&apos;,3=&apos;three&apos;)</div><div class="line">for k,v in data.items():</div><div class="line">  print k,v</div></pre></td></tr></table></figure>
<h3 id="6、使用字典推导式"><a href="#6、使用字典推导式" class="headerlink" title="6、使用字典推导式"></a>6、使用字典推导式</h3><p>推导式是个绝妙的东西，列表推导式一出，map、filter等函数黯然失色，至python2.7以后的版本，此特性扩展到了字典和集合身上，构建字典对象无需调用dict方法。</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">numbers = [1,2,3]</div><div class="line">d = dict([(number,number*2) for number in numbers])</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">numbers = [1,2,3]</div><div class="line">d = &#123;number: number * 2 for number in numbers&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://juejin.im/post/599c03e751882511264e7428" target="_blank" rel="external">高效使用Python字典</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;字典(dict)对象是Python最常用的数据结构，这里整理了几个关于高效实用字典的清单，希望Python开发者可以在日常应用开发中合理利用
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>cp -r without hidden files</title>
    <link href="http://jianwl.com/2017/08/16/cp-r-without-hidden-files/"/>
    <id>http://jianwl.com/2017/08/16/cp-r-without-hidden-files/</id>
    <published>2017-08-16T03:56:14.000Z</published>
    <updated>2017-08-16T03:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://stackoverflow.com/questions/11557114/cp-r-without-hidden-files" target="_blank" rel="external">cp-r-without-hidden-files</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11557114/cp
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Webpack入门篇</title>
    <link href="http://jianwl.com/2017/08/15/Webpack%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>http://jianwl.com/2017/08/15/Webpack入门篇/</id>
    <published>2017-08-15T09:16:19.000Z</published>
    <updated>2017-08-15T09:26:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack，看这篇就够了</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/42e11515c10f&quot; target=&quot;
    
    </summary>
    
      <category term="Webpack" scheme="http://jianwl.com/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://jianwl.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Java服务化系统线上应急和技术攻关，你必须掌握的Linux命令</title>
    <link href="http://jianwl.com/2017/07/22/Java%E6%9C%8D%E5%8A%A1%E5%8C%96%E7%B3%BB%E7%BB%9F%E7%BA%BF%E4%B8%8A%E5%BA%94%E6%80%A5%E5%92%8C%E6%8A%80%E6%9C%AF%E6%94%BB%E5%85%B3%EF%BC%8C%E4%BD%A0%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84Linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://jianwl.com/2017/07/22/Java服务化系统线上应急和技术攻关，你必须掌握的Linux命令/</id>
    <published>2017-07-22T12:51:16.000Z</published>
    <updated>2017-07-23T03:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文并不是Linux命令的手册，而是侧重于命令在特定场景如何帮助应急人员和攻关人员定位问题并解决问题，因此，对于每个命令的介绍将直切主题，直接介绍命令的具体场景，而不是介绍命令的详细使用格式。</p>
<h3 id="1-必不可少的基础命令和工具"><a href="#1-必不可少的基础命令和工具" class="headerlink" title="1. 必不可少的基础命令和工具"></a>1. 必不可少的基础命令和工具</h3><h4 id="1-1-grep"><a href="#1-1-grep" class="headerlink" title="1.1 grep"></a>1.1 grep</h4><p><code>grep</code>是<code>Linux</code>下通用的文本内容查找命令。</p>
<p>也可以利用它打印匹配的上下几行，线上查找问题的时候，可以使用以下命令,查找关键字，显示关键字出现的后5行，并且给关键字着色。</p>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">grep -5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的前后5行</div><div class="line"></div><div class="line">grep -C 5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的前后5行</div><div class="line"></div><div class="line">grep -A 5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的后5行</div><div class="line"></div><div class="line">grep -B 5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的前5行</div></pre></td></tr></table></figure>
<h4 id="1-2-find"><a href="#1-2-find" class="headerlink" title="1.2 find"></a>1.2 find</h4><p>通过文件名称查找文件的所在位置，名称查找支持模糊匹配</p>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name FILE_NAME</div></pre></td></tr></table></figure>
<p>命令输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@10-9-179-71 ~]# find . -name GifApiApplication.java</div><div class="line">./app/Gif-Api/src/main/java/com/budong/GifApiApplication.java</div></pre></td></tr></table></figure>
<h4 id="1-3-uptime"><a href="#1-3-uptime" class="headerlink" title="1.3 uptime"></a>1.3 uptime</h4><p>查看机器的启动时间、登录用户、平均负载等情况，通常用在线上应急或者技术攻关的时候来确定操作系统的重启时间。</p>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uptime</div></pre></td></tr></table></figure>
<p>命令输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[jianweilin@login10-103-142 ~]$ uptime</div><div class="line"> 10:35:13 up 698 days, 19:30,  3 users,  load average: 0.20, 0.13, 0.04</div></pre></td></tr></table></figure>
<p>从上面输出可以看到如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1、 当前时间：10:35:13</div><div class="line"></div><div class="line">2、 系统已运行的时间：698天19个小时30分钟</div><div class="line"></div><div class="line">3、当前在线用户：3个用户</div><div class="line"></div><div class="line">4. 系统平均负载：0.20 、0.13 、 0.04，最近1分钟、5分钟、15分钟系统的负载情况</div></pre></td></tr></table></figure>
<p>系统平均负载指在特定时间间隔内队列中运行的平均进程数，如果一个进程满足一下条件，它就会位于运行队列中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、它没有在等待IO操作的结果</div><div class="line"></div><div class="line">2、它没有主动进入等待状态（也就是没有调用wait相关的系统API）</div><div class="line"></div><div class="line">3、没有被停止（例如：等待终止）</div></pre></td></tr></table></figure>
<p>一般来说，每个CPU内核对应活动进程数不大于3，则系统运行良好，换句话说，也就是活动进程数小于CPU核数的3倍。</p>
<p>举例说明，如果你的服务CPU有3个核心，那么只要uptime最后输出的一串字符数值小于9，即表示系统负载正常。但是，如果系统负载超过10，那就表示当前系统负载过重，需要定位系统执行任务负载超标的原因。</p>
<h4 id="1-4-lsof"><a href="#1-4-lsof" class="headerlink" title="1.4 lsof"></a>1.4 lsof</h4><p>列出系统当前打开的文件句柄，在Linux文件系统中，任何资源都是以文件句柄的形式管理的。例如：硬件设备、文件、网络套接字等，系统内部为每一种资源分配一个句柄，应用程序只能用操作系统分配的句柄来引用资源，因此，文件句柄为应用程序与基础操作系统之间的交互提供了通用的操作接口。</p>
<p>应用程序打开文件的描述列表包含大量的关于应用程序本身的运行信息，因此通过lsof工具查看这个文件句柄列表，对系统监控以及应急排错提供重要的帮助。</p>
<p>查看某一个进程打开的文件句柄：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@10-9-179-71 ~]# lsof -p 12988 | less</div><div class="line">COMMAND   PID USER   FD   TYPE             DEVICE SIZE/OFF     NODE NAME</div><div class="line">java    12988 root  cwd    DIR              252,1     4096   917916 /root/app/Gif-Api</div><div class="line">java    12988 root  rtd    DIR              252,1     4096        2 /</div><div class="line">java    12988 root  txt    REG              252,1     7718   400499 /usr/java/jdk1.7.0_80/bin/java</div><div class="line">java    12988 root  mem    REG              252,1 99170352   292284 /usr/lib/locale/locale-archive</div><div class="line">java    12988 root  mem    REG              252,1   111440   786852 /lib64/libresolv-2.12.so</div><div class="line">java    12988 root  mem    REG              252,1    27896   786492 /lib64/libnss_dns-2.12.so</div><div class="line">java    12988 root  mem    REG              252,1    90880   795901 /lib64/libgcc_s-4.4.7-20120601.</div><div class="line">so.1</div><div class="line">java    12988 root  mem    REG              252,1  1025172   663136 /usr/java/jdk1.7.0_80/jre/lib/e</div><div class="line">xt/localedata.jar</div><div class="line">java    12988 root  mem    REG              252,1   196468   663055 /usr/java/jdk1.7.0_80/jre/lib/e</div><div class="line">xt/sunjce_provider.jar</div></pre></td></tr></table></figure>
<h4 id="1-5-ulimit"><a href="#1-5-ulimit" class="headerlink" title="1.5 ulimit"></a>1.5 ulimit</h4><p>Linux系统为每个登录用户，都限制其最大进程数和打开的最大文件句柄数。为提供性能，可以根据硬件资源的具体情况，设置各个用户的最大进程数和打开的最大文件句柄数。</p>
<p>可以用<code>ulimit -a</code>来显示当前的各种系统对用户使用资源的限制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@10-9-179-71 ~]# ulimit -a</div><div class="line">core file size          (blocks, -c) unlimited</div><div class="line">data seg size           (kbytes, -d) unlimited</div><div class="line">scheduling priority             (-e) 0</div><div class="line">file size               (blocks, -f) unlimited</div><div class="line">pending signals                 (-i) 15356</div><div class="line">max locked memory       (kbytes, -l) 64</div><div class="line">max memory size         (kbytes, -m) unlimited</div><div class="line">open files                      (-n) 1000000</div><div class="line">pipe size            (512 bytes, -p) 8</div><div class="line">POSIX message queues     (bytes, -q) 819200</div><div class="line">real-time priority              (-r) 0</div><div class="line">stack size              (kbytes, -s) 10240</div><div class="line">cpu time               (seconds, -t) unlimited</div><div class="line">max user processes              (-u) 15356</div><div class="line">virtual memory          (kbytes, -v) unlimited</div><div class="line">file locks                      (-x) unlimited</div></pre></td></tr></table></figure>
<p>设置用户的最大进程数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ulimit -u 10240</div></pre></td></tr></table></figure>
<p>设置用户可以打开的最大文件句柄数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ulimit -n 10240</div></pre></td></tr></table></figure>
<h4 id="1-6-curl"><a href="#1-6-curl" class="headerlink" title="1.6 curl"></a>1.6 curl</h4><p>程序开发后，会使用Junit、Testng以及Jmock、Mockito进行单元测试，单元测试后需要进行集成测试，由于当前的线上服务较多使用Restful风格，那么集成测试的时候就需要进行HTTP调用，查看返回的结果是否符合预期，curl命令是首选测试的方法。</p>
<p>使用方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 打印请求响应头信息</div><div class="line">[root@10-9-179-71 ~]# curl -i https://bdapi.imdada.cn/health/check</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: openresty</div><div class="line">Date: Sun, 23 Jul 2017 03:15:09 GMT</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Transfer-Encoding: chunked</div><div class="line">Connection: keep-alive</div><div class="line">&#123;&quot;status&quot;:&quot;ok&quot;,&quot;content&quot;:&quot;ok&quot;&#125;</div><div class="line"></div><div class="line"># 打印HTTP响应码</div><div class="line">[root@10-9-179-71 ~]# curl -I https://bdapi.imdada.cn/health/check</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: openresty</div><div class="line">Date: Sun, 23 Jul 2017 03:16:45 GMT</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Content-Length: 30</div><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure>
<h4 id="1-7-scp"><a href="#1-7-scp" class="headerlink" title="1.7 scp"></a>1.7 scp</h4><p>scp命令是Linux系统中功能强大的文件传输命令，可以实现从本地到远程以及远程到本地的双向文件传输，用起来非常的方便。常用来在线上定位问题时，将线上的一些文件下载到本地进行查看，或者将本地的修改上传到服务器上。</p>
<p>使用方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp jianweilin@192.168.1.1:/home/jianweilin/test.txt</div><div class="line"></div><div class="line">scp ./test.txt jianweilin@192.168.1.1:/home/jianweilin/</div></pre></td></tr></table></figure></p>
<h4 id="1-8-vi-amp-vim"><a href="#1-8-vi-amp-vim" class="headerlink" title="1.8 vi &amp; vim"></a>1.8 vi &amp; vim</h4><p>vi和vim是Linux中最常用的命令行文本编辑工具，vim是vi的升级版本，在某些Linux版本下，vi实际上通过软链接指向vim。</p>
<p>常用vi/vim命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">1、h: 左移一个字符</div><div class="line"></div><div class="line">2、l: 有移一个字符</div><div class="line"></div><div class="line">3、k: 上移一个字符</div><div class="line"></div><div class="line">4、j: 下移一个字符</div><div class="line"></div><div class="line">5、set number: 显示行号</div><div class="line"></div><div class="line">6、shift + g: 移动到最后一行</div><div class="line"></div><div class="line">7、1 + shift + g: 移动到第一行</div><div class="line"></div><div class="line">8、n + shift + g: 移动到第n行</div><div class="line"></div><div class="line">9、0: 移动到行首</div><div class="line"></div><div class="line">10、$: 移动到行尾</div><div class="line"></div><div class="line">11、 /text: 查到text，按n键查找下一个，按N查找前一个</div><div class="line"></div><div class="line">12、 ?text: 查找text，按n键查找下一个，按N查找前一个</div><div class="line"></div><div class="line">13、i: 在当前位置前插入</div><div class="line"></div><div class="line">14、I: 在当前行首插入</div><div class="line"></div><div class="line">15、a: 在当前位置后插入</div><div class="line"></div><div class="line">16、A: 在当前行尾插入</div><div class="line"></div><div class="line">17、o: 在当前行之后插入一行</div><div class="line"></div><div class="line">18、O: 在当前行之前插入一行</div><div class="line"></div><div class="line">19、%s/old/new/g：用old替换new，替换当前行的所有匹配</div><div class="line"></div><div class="line">20、ctrl + f：向下滚动一屏</div><div class="line"></div><div class="line">21、ctrl + b：向上滚动一屏</div><div class="line"></div><div class="line">22、u：撤销</div><div class="line"></div><div class="line">23、U：撤销对整行的操作</div><div class="line"></div><div class="line">24、Ctrl + r：重做，即撤销的撤销</div><div class="line"></div><div class="line">25、x：删除当前字符</div><div class="line"></div><div class="line">26、dd：删除当前行</div><div class="line"></div><div class="line">27、10d：删除当前行开始的10行</div><div class="line"></div><div class="line">28、yy：拷贝当前行</div><div class="line"></div><div class="line">29、p：在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行</div><div class="line">粘贴</div><div class="line"></div><div class="line">30、：wq：保存并退出</div><div class="line"></div><div class="line">31、：q!：强制退出并忽略所有更改</div></pre></td></tr></table></figure>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.jianshu.com/p/6fc923ceb722" target="_blank" rel="external">Java服务化系统线上应急和技术攻关，你必须掌握的Linux命令</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文并不是Linux命令的手册，而是侧重于命令在特定场景如何帮助应急人员和攻关人员定位问题并解决问题，因此，对于每个命令的介绍将直切主题，直
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Flask-SQLAlchemy: Can&#39;t reconnect until invalid transaction is rolled back</title>
    <link href="http://jianwl.com/2017/07/20/Flask-SQLAlchemy-Can-t-reconnect-until-invalid-transaction-is-rolled-back/"/>
    <id>http://jianwl.com/2017/07/20/Flask-SQLAlchemy-Can-t-reconnect-until-invalid-transaction-is-rolled-back/</id>
    <published>2017-07-20T13:17:45.000Z</published>
    <updated>2017-07-20T13:54:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近来在做些Python的重构工作，今日屡次出现这个错误；</p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-20/81011645.jpg" alt=""></p>
<p>由日志可知，在查询<code>bd_charge_info</code>这张表时，由于存在没有提交的事务，导致了查询失败；于是查了MYSQL数据库的事务状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW ENGINE INNODB STATUS</div></pre></td></tr></table></figure>
<p>查询结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-20/50146776.jpg" alt=""></p>
<p>至此确认了问题所在。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://imysql.com/2015/03/25/mysql-faq-how-to-fetch-latest-trxid.shtml" target="_blank" rel="external">如何查看当前最新事务ID</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;近来在做些Python的重构工作，今日屡次出现这个错误；&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://oc5a5l0a0.bkt.cl
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2017的小目标</title>
    <link href="http://jianwl.com/2017/07/19/2017%E7%9A%84%E5%B0%8F%E7%9B%AE%E6%A0%87/"/>
    <id>http://jianwl.com/2017/07/19/2017的小目标/</id>
    <published>2017-07-19T14:58:27.000Z</published>
    <updated>2017-07-19T15:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>已经到年中了，给后半年设定一些小目标；</p>
<h3 id="小目标制定"><a href="#小目标制定" class="headerlink" title="小目标制定"></a>小目标制定</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-19/17630389.jpg" alt=""></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-19/90166218.jpg" alt=""></p>
<h3 id="7月份小目标"><a href="#7月份小目标" class="headerlink" title="7月份小目标"></a>7月份小目标</h3><p>7月份的学习主要以巩固基础为主，熟悉JVM参数配置 &amp; 泛读JVM官方文档</p>
<p>【10h】泛读<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/" target="_blank" rel="external">The Java Virtual Machine Specification</a></p>
<p>【20h】精读《深入理解JAVA虚拟机》并输出笔记</p>
<h3 id="7月份进展"><a href="#7月份进展" class="headerlink" title="7月份进展"></a>7月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="8月份小目标"><a href="#8月份小目标" class="headerlink" title="8月份小目标"></a>8月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="8月份进展"><a href="#8月份进展" class="headerlink" title="8月份进展"></a>8月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="9月份小目标"><a href="#9月份小目标" class="headerlink" title="9月份小目标"></a>9月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="9月份进展"><a href="#9月份进展" class="headerlink" title="9月份进展"></a>9月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="10月份小目标"><a href="#10月份小目标" class="headerlink" title="10月份小目标"></a>10月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="10月份进展"><a href="#10月份进展" class="headerlink" title="10月份进展"></a>10月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="11月份小目标"><a href="#11月份小目标" class="headerlink" title="11月份小目标"></a>11月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="11月份进展"><a href="#11月份进展" class="headerlink" title="11月份进展"></a>11月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="12月份小目标"><a href="#12月份小目标" class="headerlink" title="12月份小目标"></a>12月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="12月份进展"><a href="#12月份进展" class="headerlink" title="12月份进展"></a>12月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="全年总结"><a href="#全年总结" class="headerlink" title="全年总结"></a>全年总结</h3><p>// 还没轮到我呢…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已经到年中了，给后半年设定一些小目标；&lt;/p&gt;
&lt;h3 id=&quot;小目标制定&quot;&gt;&lt;a href=&quot;#小目标制定&quot; class=&quot;headerlink&quot; title=&quot;小目标制定&quot;&gt;&lt;/a&gt;小目标制定&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oc5a5l0a0.bkt.
    
    </summary>
    
      <category term="小目标" scheme="http://jianwl.com/categories/%E5%B0%8F%E7%9B%AE%E6%A0%87/"/>
    
    
      <category term="小目标" scheme="http://jianwl.com/tags/%E5%B0%8F%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之生产者-消费者模式</title>
    <link href="http://jianwl.com/2017/06/21/JAVA%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2017/06/21/JAVA之生产者-消费者模式/</id>
    <published>2017-06-21T08:50:53.000Z</published>
    <updated>2017-06-21T10:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>生产者-消费者模式是一个经典的多线程设计模式，它为多线程的协作提供了良好的解决方案。在生产者与消费者模式中，通常有两类线程，即若干个生产者线程和若干个消费者线程。<strong>生产者线程负责提交用户请求，消费者线程负责具体处理生产者提交的任务</strong>；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/QQ20170621-170501@2x.png" alt=""></p>
<p>生产者-消费者模式的核心组件是共享内存缓冲区，它作为生产者和消费者间的通信桥梁，避免了生产者和消费者的直接通信，从而将生产者和消费者进行解耦，生产者不需要知道消费者的存在，消费者也不需要知道生产者的存在。</p>
<p>同时，由于内存缓冲区的存在，允许生产者和消费者在执行速度上存在时间差，无论是生产者在某一局部时间内速度高于消费者，或是消费者在局部时间内高于生产者，都可以通过共享内存缓冲区得到缓解，确保系统正常运行。</p>
<h3 id="2-生产者-消费者模式主要角色"><a href="#2-生产者-消费者模式主要角色" class="headerlink" title="2. 生产者-消费者模式主要角色"></a>2. 生产者-消费者模式主要角色</h3><table>
<thead>
<tr>
<th>角色</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>生产者</td>
<td>用于提交用户请求，提取用户任务，并装入内存缓冲区</td>
</tr>
<tr>
<td>消费者</td>
<td>在内存缓冲区中提取并处理任务</td>
</tr>
<tr>
<td>内存缓冲区</td>
<td>缓冲生产者提交的任务或数据，供消费者使用</td>
</tr>
<tr>
<td>任务</td>
<td>生产者向内存缓冲区提交的数据结构</td>
</tr>
<tr>
<td>Main</td>
<td>使用生产者和消费者的客户端</td>
</tr>
</tbody>
</table>
<h3 id="3-类图"><a href="#3-类图" class="headerlink" title="3. 类图"></a>3. 类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-21/96135924.jpg" alt=""></p>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><h4 id="1-共享数据模型不可变类PCData"><a href="#1-共享数据模型不可变类PCData" class="headerlink" title="1) 共享数据模型不可变类PCData"></a>1) 共享数据模型不可变类<code>PCData</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public final class PCData &#123;</div><div class="line">    private final int intData;</div><div class="line"></div><div class="line">    public PCData(int d) &#123;</div><div class="line">        intData = d;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public PCData(String d) &#123;</div><div class="line">        intData = Integer.valueOf(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getIntData() &#123;</div><div class="line">        return intData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;data:&quot; + intData;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-生产者Producer"><a href="#2-生产者Producer" class="headerlink" title="2) 生产者Producer"></a>2) 生产者<code>Producer</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class Producer implements Runnable &#123;</div><div class="line">    private volatile boolean isRunning = true;</div><div class="line">    private BlockingQueue&lt;PCData&gt; queue;</div><div class="line">    private static AtomicInteger count = new AtomicInteger();</div><div class="line"></div><div class="line">    private static final int SLEEP_TIME = 100;</div><div class="line"></div><div class="line">    public Producer(BlockingQueue&lt;PCData&gt; queue) &#123;</div><div class="line">        this.queue = queue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        PCData data = null;</div><div class="line">        Random r = new Random();</div><div class="line">        System.out.println(&quot;start producer id =&quot; + Thread.currentThread().getId());</div><div class="line"></div><div class="line">        try&#123;</div><div class="line">            while (isRunning) &#123;</div><div class="line">                Thread.sleep(r.nextInt(SLEEP_TIME));</div><div class="line">                // 构造任务数据</div><div class="line">                data = new PCData(count.incrementAndGet());</div><div class="line">                System.out.println(data + &quot; is put into queue&quot;);</div><div class="line">                if (!queue.offer(data,2, TimeUnit.SECONDS)) &#123;</div><div class="line">                    System.err.println(&quot;fail to put data: &quot; + data);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void stop() &#123;</div><div class="line">        isRunning = false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-消费者Consumer"><a href="#3-消费者Consumer" class="headerlink" title="3) 消费者Consumer"></a>3) 消费者<code>Consumer</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Consumer implements Runnable &#123;</div><div class="line">    private BlockingQueue&lt;PCData&gt; queue;</div><div class="line">    private static final int SLEEP_TIME = 100;</div><div class="line"></div><div class="line">    public Consumer(BlockingQueue&lt;PCData&gt; queue) &#123;</div><div class="line">        this.queue = queue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;start consumer id = &quot; + Thread.currentThread().getId());</div><div class="line">        Random r = new Random();</div><div class="line"></div><div class="line">        try&#123;</div><div class="line">            while (true) &#123;</div><div class="line">                PCData data = queue.take();</div><div class="line">                if( null != data) &#123;</div><div class="line">                    int re = data.getIntData() * data.getIntData();</div><div class="line">                    System.out.println(MessageFormat.format(&quot;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&quot;,data.getIntData(), data.getIntData(),re));</div><div class="line">                &#125;</div><div class="line">                Thread.sleep(r.nextInt(SLEEP_TIME));</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            Thread.currentThread().interrupt();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-入口Run"><a href="#4-入口Run" class="headerlink" title="4) 入口Run"></a>4) 入口<code>Run</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        // 建立缓冲区</div><div class="line">        BlockingQueue&lt;PCData&gt; queue = new LinkedBlockingQueue&lt;&gt;(10);</div><div class="line"></div><div class="line">        // 建立生产者</div><div class="line">        Producer producer1 = new Producer(queue);</div><div class="line">        Producer producer2 = new Producer(queue);</div><div class="line">        Producer producer3 = new Producer(queue);</div><div class="line"></div><div class="line">        // 建立消费者</div><div class="line">        Consumer consumer1 = new Consumer(queue);</div><div class="line">        Consumer consumer2 = new Consumer(queue);</div><div class="line">        Consumer consumer3 = new Consumer(queue);</div><div class="line"></div><div class="line">        // 建立线程池</div><div class="line">        ExecutorService service = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        // 运行生产者</div><div class="line">        service.execute(producer1);</div><div class="line">        service.execute(producer2);</div><div class="line">        service.execute(producer3);</div><div class="line"></div><div class="line">        // 运行消费者</div><div class="line">        service.execute(consumer1);</div><div class="line">        service.execute(consumer2);</div><div class="line">        service.execute(consumer3);</div><div class="line">        Thread.sleep(1000);</div><div class="line"></div><div class="line">        // 停止生产者</div><div class="line">        producer1.stop();</div><div class="line">        producer2.stop();</div><div class="line">        producer3.stop();</div><div class="line"></div><div class="line">        Thread.sleep(1000);</div><div class="line">        service.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5 运行结果"></a>5 运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-21/49301344.jpg" alt=""></p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol>
<li>Java程序性能优化</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;生产者-消费者模式是一个经典的多线程设计模式，它为多线程的协作提供了良好的解决方案。在生产者与消费者模式中，通常有两类线
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之Future模式</title>
    <link href="http://jianwl.com/2017/06/20/JAVA%E4%B9%8BFuture%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2017/06/20/JAVA之Future模式/</id>
    <published>2017-06-20T13:36:05.000Z</published>
    <updated>2017-06-20T15:24:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>Future模式有点类似商品订单，比如在进行网上购物时，当看中某一件商品时，就可以提交订单。当订单处理完毕后，便可在家里等待商品送货上门。卖家根据订单从仓库里取货，并配送到客户手上。在大部分情况下，商家对订单的处理并不那么快，而在这段时间内，客户完全不必傻傻地在家里等待，可以出门处理其他事物。</p>
<h3 id="2-传统串行调用-VS-Future模式"><a href="#2-传统串行调用-VS-Future模式" class="headerlink" title="2. 传统串行调用 VS Future模式"></a>2. 传统串行调用 <code>VS</code> Future模式</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-20/29048455.jpg" alt=""></p>
<p>图1所示，客户端发出call请求，这个请求需要相当长一段时间才能返回。客户端一直等待，直到数据返回，随后，在进行其他任务的处理。</p>
<p>图2显示了一个广义Future模式的实现，从Data_Future对象可以看到，虽然call本身处理仍然需要很长一段时间来处理程序，但是服务程序不等数据处理完成便立即返回客户端一个伪造的数据，实现了Future模式的客户。</p>
<h3 id="3-Future模式的主要参与者"><a href="#3-Future模式的主要参与者" class="headerlink" title="3. Future模式的主要参与者"></a>3. Future模式的主要参与者</h3><table>
<thead>
<tr>
<th>参与者</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Main</td>
<td>系统启动，调用Client发出请求</td>
</tr>
<tr>
<td>Client</td>
<td>返回Data对象，立即返回FutureData，并开启ClientThread线程装配RealData</td>
</tr>
<tr>
<td>Data</td>
<td>返回数据接口</td>
</tr>
<tr>
<td>FutureData</td>
<td>Future数据，构造很快，但是是一个虚拟的数据，需要装配RealData</td>
</tr>
<tr>
<td>RealData</td>
<td>真实数据，其构造是比较慢的</td>
</tr>
</tbody>
</table>
<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-20/16429145.jpg" alt=""></p>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><h4 id="1-Data接口"><a href="#1-Data接口" class="headerlink" title="1) Data接口"></a>1) Data接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Data &#123;</div><div class="line">    String getResult();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-真实数据RealData"><a href="#2-真实数据RealData" class="headerlink" title="2) 真实数据RealData"></a>2) 真实数据<code>RealData</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class RealData implements Data &#123;</div><div class="line">    protected final String result;</div><div class="line"></div><div class="line">    public RealData(String para) &#123;</div><div class="line">        StringBuffer sb = new StringBuffer();</div><div class="line">        for(int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            sb.append(para);</div><div class="line">            try&#123;</div><div class="line">                Thread.sleep(100);</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        result = sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getResult() &#123;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3）FutureData"><a href="#3）FutureData" class="headerlink" title="3）FutureData"></a>3）FutureData</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class FutureData implements Data &#123;</div><div class="line">    protected RealData realData = null;</div><div class="line">    protected boolean isReady = false;</div><div class="line">    public synchronized void setRealData(RealData realData) &#123;</div><div class="line">        if (isReady) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        this.realData = realData;</div><div class="line">        isReady = true;</div><div class="line">        notifyAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public synchronized String getResult() &#123;</div><div class="line">        while (!isReady) &#123;</div><div class="line">            try &#123;</div><div class="line">                wait();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return realData.result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-客户端Client"><a href="#4-客户端Client" class="headerlink" title="4) 客户端Client"></a>4) 客户端<code>Client</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public Data request(final String queryStr) &#123;</div><div class="line">        final FutureData future = new FutureData();</div><div class="line">        new Thread(() -&gt; &#123;</div><div class="line">            RealData realData = new RealData(queryStr);</div><div class="line">            future.setRealData(realData);</div><div class="line">        &#125;).start();</div><div class="line">        return future;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-入口Run"><a href="#5-入口Run" class="headerlink" title="5) 入口Run"></a>5) 入口<code>Run</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Client client = new Client();</div><div class="line">        Data data = client.request(&quot;name&quot;);</div><div class="line">        System.out.println(&quot;请求完毕!&quot;);</div><div class="line">        try&#123;</div><div class="line">            Thread.sleep(100);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;数据 =&gt; &quot; + data.getResult());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-运行结果"><a href="#6-运行结果" class="headerlink" title="6) 运行结果"></a>6) 运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-20/38834317.jpg" alt=""></p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol>
<li>Java程序性能优化</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;Future模式有点类似商品订单，比如在进行网上购物时，当看中某一件商品时，就可以提交订单。当订单处理完毕后，便可在家里
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA观察者模式</title>
    <link href="http://jianwl.com/2017/06/18/JAVA%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2017/06/18/JAVA观察者模式/</id>
    <published>2017-06-18T14:27:32.000Z</published>
    <updated>2017-06-18T15:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>观察者模式是非常常用的一种设计模式，在软件系统中，当一个对象的行为依赖另一个对象的状态时，观察者模式相当有用。若不使用观察者模式提供的通用结构，而需要实现其类似的功能，则只能在另一个线程中不停监听对象所依赖的状态。在一个复杂系统中，可能会因此开启很多线程来实现这一功能，这将使系统的性能产生额外的负担。</p>
<h3 id="2-观察者模式角色"><a href="#2-观察者模式角色" class="headerlink" title="2. 观察者模式角色"></a>2. 观察者模式角色</h3><table>
<thead>
<tr>
<th>角色</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>主题接口</td>
<td>指被观察的对象，当其状态发生变化或者某事件发生时，它会将这个变化通知观察者。它维护了观察者所需要依赖的状态</td>
</tr>
<tr>
<td>具体主题</td>
<td>具体主题实现了主题接口中的方法，如新增观察者、删除观察者和通知观察者。其内部维护一个观察者列表</td>
</tr>
<tr>
<td>观察者接口</td>
<td>观察者接口定义了观察者的基本方法，当依赖状态发生改变时，主题接口就会调用观察者的update()方法</td>
</tr>
<tr>
<td>具体观察者</td>
<td>实现了观察者接口的update()，具体处理当被观察者状态改变或者某一事件发生时的业务逻辑</td>
</tr>
</tbody>
</table>
<h3 id="3-观察者模式类图"><a href="#3-观察者模式类图" class="headerlink" title="3. 观察者模式类图"></a>3. 观察者模式类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/26557541.jpg" alt=""></p>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><h4 id="主题接口ISubject"><a href="#主题接口ISubject" class="headerlink" title="主题接口ISubject"></a>主题接口<code>ISubject</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface ISubject &#123;</div><div class="line">    void attach(IObserver observer); // 添加观察者</div><div class="line">    void detach(IObserver observer); // 删除观察者</div><div class="line">    void inform(String msg); // 通知所有观察者</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="具体主题ConcreteSubject"><a href="#具体主题ConcreteSubject" class="headerlink" title="具体主题ConcreteSubject"></a>具体主题<code>ConcreteSubject</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ConcreteSubject implements ISubject &#123;</div><div class="line">    Vector&lt;IObserver&gt; observers = new Vector&lt;IObserver&gt;();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void attach(IObserver observer) &#123;</div><div class="line">        observers.addElement(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void detach(IObserver observer) &#123;</div><div class="line">        observers.removeElement(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void inform(String msg) &#123;</div><div class="line">        for(IObserver ob:observers) &#123;</div><div class="line">            ob.update(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="观察者接口"><a href="#观察者接口" class="headerlink" title="观察者接口"></a>观察者接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IObserver &#123;</div><div class="line">    void update(String msg); // 更新观察者</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="具体观察者"><a href="#具体观察者" class="headerlink" title="具体观察者"></a>具体观察者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ConcreteObserve implements IObserver &#123;</div><div class="line">    @Override</div><div class="line">    public void update(String msg) &#123;</div><div class="line">        System.out.println(&quot;observe receive information =&gt; &quot; + JSON.toJSONString(msg));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="入口Run"><a href="#入口Run" class="headerlink" title="入口Run"></a>入口<code>Run</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ConcreteSubject subject = new ConcreteSubject();</div><div class="line">        ConcreteObserve observeA = new ConcreteObserve();</div><div class="line">        ConcreteObserve observeB = new ConcreteObserve();</div><div class="line">        subject.attach(observeA);</div><div class="line">        subject.attach(observeB);</div><div class="line">        subject.inform(&quot;notify-1&quot;);</div><div class="line">        subject.detach(observeB);</div><div class="line">        subject.inform(&quot;notify-2&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/64270257.jpg" alt=""></p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol>
<li>JAVA程序性能优化</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;观察者模式是非常常用的一种设计模式，在软件系统中，当一个对象的行为依赖另一个对象的状态时，观察者模式相当有用。若不使用观
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之享元模式</title>
    <link href="http://jianwl.com/2017/06/17/JAVA%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2017/06/17/JAVA之享元模式/</id>
    <published>2017-06-17T10:05:18.000Z</published>
    <updated>2017-06-18T06:41:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>享元模式是设计模式中少数几个以提高系统性能为目的的模式之一；它的核心思想是：<strong>如果在一个系统中存在多个相同的对象，那么只需要共享一份对象的拷贝，而不必为每一次使用都创建新的对象。</strong></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>可以节省重复创建对象的开销；</li>
<li>创建对象的数量减少，对系统的内存需求也减小，使得GC的压力降低；</li>
</ol>
<h3 id="2-享元模式角色"><a href="#2-享元模式角色" class="headerlink" title="2. 享元模式角色"></a>2. 享元模式角色</h3><table>
<thead>
<tr>
<th>角色</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>享元工厂</td>
<td>用以创建具体享元类，维护相同的单元对象。它保证相同的享元对象可以被系统共享。即内部使用了类似单例模式的算法，当请求对象已经存在时，直接返回对象，不存在时，再创建对象</td>
</tr>
<tr>
<td>抽象享元</td>
<td>定义需共享的对象的业务接口。享元类被创建出来总是为了实现某些特定的业务逻辑，而抽象享元便定义这些逻辑的语义行为</td>
</tr>
<tr>
<td>具体享元类</td>
<td>实现抽象享元类的接口，完成某一具体的逻辑</td>
</tr>
<tr>
<td>Main</td>
<td>使用享元模式的组件，通过享元工厂取得享元对象</td>
</tr>
</tbody>
</table>
<h3 id="3-实战"><a href="#3-实战" class="headerlink" title="3. 实战"></a>3. 实战</h3><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/33093517.jpg" alt=""></p>
<h4 id="可运行实例"><a href="#可运行实例" class="headerlink" title="可运行实例"></a>可运行实例</h4><h5 id="1、-抽象享元IReportManager"><a href="#1、-抽象享元IReportManager" class="headerlink" title="1、 抽象享元IReportManager"></a>1、 抽象享元<code>IReportManager</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IReportManager &#123;</div><div class="line">     String createReport();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2、-具体享元类-EmployeeReportManager"><a href="#2、-具体享元类-EmployeeReportManager" class="headerlink" title="2、 具体享元类 EmployeeReportManager"></a>2、 具体享元类 <code>EmployeeReportManager</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class EmployeeReportManager implements IReportManager &#123;</div><div class="line">    protected String tenantId = null;</div><div class="line"></div><div class="line">    public EmployeeReportManager(String tenantId) &#123;</div><div class="line">        this.tenantId = tenantId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String createReport() &#123;</div><div class="line">        return &quot;This is a employee report&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3、-具体享元类-FinancialReportManager"><a href="#3、-具体享元类-FinancialReportManager" class="headerlink" title="3、 具体享元类 FinancialReportManager"></a>3、 具体享元类 <code>FinancialReportManager</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class FinancialReportManager implements IReportManager &#123;</div><div class="line">    protected String tenantId = null;</div><div class="line"></div><div class="line">    public FinancialReportManager(String tenantId) &#123;</div><div class="line">        this.tenantId = tenantId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String createReport() &#123;</div><div class="line">        return &quot;This is a financial report&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4、-享元工厂ReportManagerFactory"><a href="#4、-享元工厂ReportManagerFactory" class="headerlink" title="4、 享元工厂ReportManagerFactory"></a>4、 享元工厂<code>ReportManagerFactory</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class ReportManagerFactory &#123;</div><div class="line">    Map&lt;String,IReportManager&gt; finanacialReportManager = new HashMap&lt;String,IReportManager&gt;();</div><div class="line">    Map&lt;String,IReportManager&gt; employeeReportManager = new HashMap&lt;String,IReportManager&gt;();</div><div class="line"></div><div class="line">    IReportManager getFinancialReportManager(String tenantId)&#123;</div><div class="line">        IReportManager r = finanacialReportManager.get(tenantId);</div><div class="line">        if (r == null) &#123;</div><div class="line">            r = new FinancialReportManager(tenantId);</div><div class="line">            finanacialReportManager.put(tenantId,r);</div><div class="line">        &#125;</div><div class="line">        return r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    IReportManager getEmployeeReportReportManger(String tenantId)&#123;</div><div class="line">        IReportManager r = employeeReportManager.get(tenantId);</div><div class="line">        if (r == null) &#123;</div><div class="line">            r = new EmployeeReportManager(tenantId);</div><div class="line">            employeeReportManager.put(tenantId,r);</div><div class="line">        &#125;</div><div class="line">        return r;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5、-入口Run"><a href="#5、-入口Run" class="headerlink" title="5、 入口Run"></a>5、 入口<code>Run</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ReportManagerFactory rmf = new ReportManagerFactory();</div><div class="line">        IReportManager rm = rmf.getFinancialReportManager(&quot;A&quot;);</div><div class="line">        System.out.println(rm.createReport());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="6-运行结果"><a href="#6-运行结果" class="headerlink" title="6. 运行结果"></a>6. 运行结果</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/81872942.jpg" alt=""></p>
<h3 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h3><ol>
<li>JAVA程序性能优化</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;享元模式是设计模式中少数几个以提高系统性能为目的的模式之一；它的核心思想是：&lt;strong&gt;如果在一个系统中存在多个相同
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
</feed>
