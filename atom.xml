<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2018-08-11T06:19:31.004Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac终端崩溃</title>
    <link href="http://jianwl.com/2018/08/11/mac%E7%BB%88%E7%AB%AF%E5%B4%A9%E6%BA%83/"/>
    <id>http://jianwl.com/2018/08/11/mac终端崩溃/</id>
    <published>2018-08-11T06:07:15.000Z</published>
    <updated>2018-08-11T06:19:31.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>执行<code>brew update</code>，在更新过程中，手动退出更新进程，导致Mac的终端崩溃，每次打开终端时都出现以下界面：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/91155821.jpg" alt=""></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-打开「自动操作」应用"><a href="#1-打开「自动操作」应用" class="headerlink" title="1. 打开「自动操作」应用"></a>1. 打开「自动操作」应用</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/91467398.jpg" alt=""></p>
<h4 id="2-在「自动操作」中选择：编辑-gt-新建-gt-工作流程-gt-shell脚本"><a href="#2-在「自动操作」中选择：编辑-gt-新建-gt-工作流程-gt-shell脚本" class="headerlink" title="2. 在「自动操作」中选择：编辑 -&gt; 新建 -&gt; 工作流程 -&gt; shell脚本"></a>2. 在「自动操作」中选择：编辑 -&gt; 新建 -&gt; 工作流程 -&gt; shell脚本</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/31642310.jpg" alt=""></p>
<h4 id="3-shell脚本，选择-bin-bash并执行以下命令"><a href="#3-shell脚本，选择-bin-bash并执行以下命令" class="headerlink" title="3. shell脚本，选择/bin/bash并执行以下命令"></a>3. shell脚本，选择<code>/bin/bash</code>并执行以下命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/27114106.jpg" alt=""></p>
<p>至此完成终端的修复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;执行&lt;code&gt;brew update&lt;/code&gt;，在更新过程中，手动退出更新进程，导致Mac的终端崩溃，每次打开终端时都出现以下界面：&lt;
    
    </summary>
    
      <category term="Mac" scheme="http://jianwl.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://jianwl.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>23.访问者模式</title>
    <link href="http://jianwl.com/2018/08/10/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/23-访问者模式/</id>
    <published>2018-08-10T00:32:45.000Z</published>
    <updated>2018-08-11T10:27:40.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>军营里，有指挥官的访问者、有中士的访问者、也有军士的访问者。</p>
<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义这些元素的新操作。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><p>访问者模式的目的是要把处理从数据结构分离出来。很多系统按照算法和数据结构分开，如果系统有稳定的数据结构，又有易于变化的算法，使用访问者模式比较合适。</p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>增加新的操作很容易，因为增加新的操作就以为这增加一个新的访问者。访问模式将有关的行为集中到一个访问者对象中。</p>
<h4 id="4-UML"><a href="#4-UML" class="headerlink" title="4. UML"></a>4. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/25786652.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/visitor" target="_blank" rel="external">访问者模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;军营里，有指挥官的访问者、有中士的访问者、也有军士的访问者。&lt;/p&gt;
&lt;h3 id=&quot;访问者模式&quot;&gt;&lt;a href=&quot;#访问者模式&quot;
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>22.解释器模式</title>
    <link href="http://jianwl.com/2018/08/10/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/22-解释器模式/</id>
    <published>2018-08-10T00:32:35.000Z</published>
    <updated>2018-08-11T10:02:57.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>实现一个计算器，实现加减法。</p>
<h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>给定一个语言，定义它的语法的一种表示并定义一个解释器。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>如果一个特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。</li>
</ol>
<h4 id="3-不足"><a href="#3-不足" class="headerlink" title="3. 不足"></a>3. 不足</h4><p>解释器模式为语法的每一条规则至少定义了一个类，因此包含许多规则的语法可能难以管理和维护。</p>
<h4 id="4-UML"><a href="#4-UML" class="headerlink" title="4. UML"></a>4. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/45885692.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/interpreter" target="_blank" rel="external">解释器模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;实现一个计算器，实现加减法。&lt;/p&gt;
&lt;h3 id=&quot;解释器模式&quot;&gt;&lt;a href=&quot;#解释器模式&quot; class=&quot;headerli
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>21.享元模式</title>
    <link href="http://jianwl.com/2018/08/10/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/21-享元模式/</id>
    <published>2018-08-10T00:32:26.000Z</published>
    <updated>2018-08-11T09:57:56.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>炼金术商铺的货架上摆满了药水，每种药水都有多瓶。为了实现对象的复用，每种药水可以返回同一对象，实现对象的复用。</p>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>运用共享技术有效地支持大量细粒度的对象</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><p>如果有一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销就应该考虑使用；</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/90836786.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/flyweight" target="_blank" rel="external">享元模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;炼金术商铺的货架上摆满了药水，每种药水都有多瓶。为了实现对象的复用，每种药水可以返回同一对象，实现对象的复用。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>20.中介者模式</title>
    <link href="http://jianwl.com/2018/08/10/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/20-中介者模式/</id>
    <published>2018-08-10T00:32:19.000Z</published>
    <updated>2018-08-11T09:50:20.890Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>举办一个相亲的Party，所有人并不知道有谁会参加，只知道来参加这个Party即可。</p>
<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><p>中介者模式一般用于一组对象以定义良好但是复杂的方式进行通信的场合。</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/27571060.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/mediator" target="_blank" rel="external">中介者模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;举办一个相亲的Party，所有人并不知道有谁会参加，只知道来参加这个Party即可。&lt;/p&gt;
&lt;h3 id=&quot;中介者模式&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>19.责任链模式</title>
    <link href="http://jianwl.com/2018/08/10/19-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/19-责任链模式/</id>
    <published>2018-08-10T00:32:07.000Z</published>
    <updated>2018-08-11T09:43:41.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>国王发出指令：保卫城堡、释放囚犯、多征税收，这一些列的指令都会有特定的人来处理。</p>
<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之前的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>接收者和发送者都没有对方的明确信息，且链中的对象也不知道链的结构，结果是职责链可简化对象的相互连接，它们仅需保持一个指向其后继者的引用，而不需要保持它所有的候选者的引用。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/99125541.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/chain" target="_blank" rel="external">责任链模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;国王发出指令：保卫城堡、释放囚犯、多征税收，这一些列的指令都会有特定的人来处理。&lt;/p&gt;
&lt;h3 id=&quot;责任链模式&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>18.命令模式</title>
    <link href="http://jianwl.com/2018/08/10/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/18-命令模式/</id>
    <published>2018-08-10T00:31:59.000Z</published>
    <updated>2018-08-11T09:33:18.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>巫师对妖精，使用了收缩咒和隐身咒。</p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。对请求排队或记录请求记录，以及支持可撤销的操作。</p>
<h4 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h4><ol>
<li>它能容易地设计一个命令队列</li>
<li>在需要的情况下，可以较容易地将命令记入日志。</li>
<li>允许接受请求的一方决定是否要否决请求</li>
<li>较为容易实现对请求的撤销或重做</li>
<li>由于加进新的命令模式类不影响其他类。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/52368763.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/command" target="_blank" rel="external">命令模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;巫师对妖精，使用了收缩咒和隐身咒。&lt;/p&gt;
&lt;h3 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerl
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>17.桥接模式</title>
    <link href="http://jianwl.com/2018/08/10/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/17-桥接模式/</id>
    <published>2018-08-10T00:31:51.000Z</published>
    <updated>2018-08-11T09:18:48.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>需要对武器进行附魔，武器和魔力属性是通过某种方式桥接在一起。</p>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将抽象部分与它的实现部分分离，使他们都可以独立的变化。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>使用聚合的关系，将两种对象聚合在一起形成一个整体。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/99073982.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/bridge" target="_blank" rel="external">桥接模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;需要对武器进行附魔，武器和魔力属性是通过某种方式桥接在一起。&lt;/p&gt;
&lt;h3 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; c
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>16.单例模式</title>
    <link href="http://jianwl.com/2018/08/10/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/16-单例模式/</id>
    <published>2018-08-10T00:31:42.000Z</published>
    <updated>2018-08-11T09:01:39.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>保证一个类仅有一个实例，有多种实现方式，理解每种方式的优缺点。</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>保证类只有唯一实例</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/singleton" target="_blank" rel="external">单例模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;保证一个类仅有一个实例，有多种实现方式，理解每种方式的优缺点。&lt;/p&gt;
&lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; 
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>15.迭代器模式</title>
    <link href="http://jianwl.com/2018/08/10/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/15-迭代器模式/</id>
    <published>2018-08-10T00:31:31.000Z</published>
    <updated>2018-08-11T08:56:51.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>有个宝库，里面有很多宝箱，每个宝箱都能爆出不同的装备。可能是首饰类、武器、药剂。请遍历宝库里所有的宝箱里装备。</p>
<h3 id="迭代模式"><a href="#迭代模式" class="headerlink" title="迭代模式"></a>迭代模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象内部表示。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样即可以不暴露集合的内部结构，又可让外部代码透明地访问集合内部数据。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/35337447.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/Iterator" target="_blank" rel="external">迭代模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;有个宝库，里面有很多宝箱，每个宝箱都能爆出不同的装备。可能是首饰类、武器、药剂。请遍历宝库里所有的宝箱里装备。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>14.组合模式</title>
    <link href="http://jianwl.com/2018/08/10/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/10/14-组合模式/</id>
    <published>2018-08-10T00:31:16.000Z</published>
    <updated>2018-08-11T08:41:51.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>多个字母组成一个单词，多个单词组成一句话。</p>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将对象组合成树状结构以表示’部分-整体’的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><ol>
<li>需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑使用组合模式了。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/63835290.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/composite" target="_blank" rel="external">组合模式，请移步源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;多个字母组成一个单词，多个单词组成一句话。&lt;/p&gt;
&lt;h3 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;hea
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>13.适配器模式</title>
    <link href="http://jianwl.com/2018/08/09/13-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/09/13-适配器模式/</id>
    <published>2018-08-09T15:33:38.000Z</published>
    <updated>2018-08-10T00:51:39.040Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>一群人在海上遇到了海盗，大船搁浅了，刚好这群人中有个舰长，还有个渔船。舰长需要适配掌控这个渔船带着所有人逃生。</p>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口模式不兼容而不能一起工作的接口的那些类可以一起工作。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><ol>
<li>两个类所作的事情相同或相似，但是使用它时，需要调用不同的接口。这种情况应该用适配器模式，调用一个接口即可。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-10/98252317.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/adapter" target="_blank" rel="external">适配器模式实战，请移步看源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;一群人在海上遇到了海盗，大船搁浅了，刚好这群人中有个舰长，还有个渔船。舰长需要适配掌控这个渔船带着所有人逃生。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>12.状态模式</title>
    <link href="http://jianwl.com/2018/08/09/12-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/09/12-状态模式/</id>
    <published>2018-08-09T15:24:07.000Z</published>
    <updated>2018-08-09T15:32:13.144Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>长毛象的情绪状态是变化的，有时候是生气状态，有时候是平和状态。</p>
<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂的情况，把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-9/14716250.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/state" target="_blank" rel="external">状态模式实战，请移步源码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; class=&quot;headerlink&quot; title=&quot;小故事&quot;&gt;&lt;/a&gt;小故事&lt;/h3&gt;&lt;p&gt;长毛象的情绪状态是变化的，有时候是生气状态，有时候是平和状态。&lt;/p&gt;
&lt;h3 id=&quot;状态模式&quot;&gt;&lt;a href=&quot;#状态模式&quot; 
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>consul常用API梳理</title>
    <link href="http://jianwl.com/2018/08/08/consul%E5%B8%B8%E7%94%A8API%E6%A2%B3%E7%90%86/"/>
    <id>http://jianwl.com/2018/08/08/consul常用API梳理/</id>
    <published>2018-08-08T03:09:39.000Z</published>
    <updated>2018-08-08T13:26:56.259Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Consul环境描述"><a href="#Consul环境描述" class="headerlink" title="Consul环境描述"></a>Consul环境描述</h3><ol>
<li>本地启动Consul Server, 本地IP <code>192.168.85.160</code>, Consul Node Name: <code>server@160</code></li>
<li>虚拟机启动Consul Agent，虚拟机IP<code>172.20.20.12</code>, Consul Node Name: <code>agent@12</code></li>
<li>consul server 主动加入 agent，使得 Server和Agent实现通信。在本地IP为<code>192.168.85.160</code>的服务器上执行以下命令 <code>consul join 172.20.20.12</code></li>
<li>本地(IP<code>192.168.85.160</code>)启动一个测试服务springLearning,端口为<code>1111</code>，将测试服务(springLearning)注册在consul上。</li>
<li>以下是基于此环境下做的Consul API测试</li>
</ol>
<h3 id="1-Agent"><a href="#1-Agent" class="headerlink" title="1. Agent"></a>1. Agent</h3><h4 id="1-注册服务"><a href="#1-注册服务" class="headerlink" title="1) 注册服务"></a>1) 注册服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">curl -X PUT \</div><div class="line">  http://172.20.20.12:8500/v1/agent/service/register \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;  &#123;</div><div class="line">  &quot;ID&quot;: &quot;spring&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springLearning&quot;,</div><div class="line">  &quot;Tags&quot;: [</div><div class="line">    &quot;primary&quot;,</div><div class="line">    &quot;v1&quot;</div><div class="line">  ],</div><div class="line">  &quot;Address&quot;: &quot;192.168.85.160&quot;,</div><div class="line">  &quot;Port&quot;: 1111,</div><div class="line">  &quot;Meta&quot;: &#123;</div><div class="line">    &quot;strongValid&quot;: &quot;0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;EnableTagOverride&quot;: true,</div><div class="line">  &quot;Check&quot;: &#123;</div><div class="line">    &quot;HTTP&quot;: &quot;http://192.168.85.160:1111/health&quot;,</div><div class="line">    &quot;Interval&quot;: &quot;3s&quot;</div><div class="line">  &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="2-注销服务"><a href="#2-注销服务" class="headerlink" title="2) 注销服务"></a>2) 注销服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  http://172.20.20.12:8500/v1/agent/service/deregister/spring</div></pre></td></tr></table></figure>
<h4 id="3-服务开启维护模式"><a href="#3-服务开启维护模式" class="headerlink" title="3) 服务开启维护模式"></a>3) 服务开启维护模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  &apos;http://172.20.20.12:8500/v1/agent/service/maintenance/spring?enable=false&apos;</div></pre></td></tr></table></figure>
<h4 id="4-获取所有健康检查"><a href="#4-获取所有健康检查" class="headerlink" title="4) 获取所有健康检查"></a>4) 获取所有健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/agent/checks</div></pre></td></tr></table></figure>
<h4 id="5-注册健康检查"><a href="#5-注册健康检查" class="headerlink" title="5) 注册健康检查"></a>5) 注册健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">curl -X PUT \</div><div class="line">  http://172.20.20.12:8500/v1/agent/check/register \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">  &quot;ID&quot;: &quot;spring_checks&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springChecks&quot;,</div><div class="line">  &quot;Notes&quot;: &quot;spring learning add checkes&quot;,</div><div class="line">  &quot;DeregisterCriticalServiceAfter&quot;: &quot;1m&quot;,</div><div class="line">  &quot;AliasNode&quot;: &quot;6b045305-aacc-07e1-2b2a-749187c4e76b&quot;,</div><div class="line">  &quot;AliasService&quot;: &quot;spring&quot;,</div><div class="line">  &quot;HTTP&quot;: &quot;http://192.168.85.160:1111/check&quot;,</div><div class="line">  &quot;Method&quot;: &quot;GET&quot;,</div><div class="line">  &quot;Interval&quot;: &quot;2s&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="6-注销健康检查"><a href="#6-注销健康检查" class="headerlink" title="6) 注销健康检查"></a>6) 注销健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  http://172.20.20.12:8500/v1/agent/check/deregister/spring_checks</div></pre></td></tr></table></figure>
<h3 id="2-Catalog"><a href="#2-Catalog" class="headerlink" title="2. Catalog"></a>2. Catalog</h3><h4 id="1）注册服务"><a href="#1）注册服务" class="headerlink" title="1）注册服务"></a>1）注册服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/catalog/register \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">	&quot;ID&quot;: &quot;6b045305-aacc-07e1-2b2a-749187c4e76b&quot;,</div><div class="line">	&quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">	&quot;Address&quot;: &quot;172.20.20.12&quot;,</div><div class="line">	&quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">	&quot;TaggedAddresses&quot;: &#123;</div><div class="line">		&quot;lan&quot;: &quot;172.20.20.12&quot;,</div><div class="line">		&quot;wan&quot;: &quot;172.20.20.12&quot;</div><div class="line">	&#125;,</div><div class="line">	&quot;NodeMeta&quot;: &#123;</div><div class="line">		&quot;consul-network-segment&quot;: &quot;&quot;</div><div class="line">	&#125;,</div><div class="line">	&quot;Service&quot;: &#123;</div><div class="line">		&quot;ID&quot;: &quot;spring&quot;,</div><div class="line">		&quot;Service&quot;: &quot;springLearning&quot;,</div><div class="line">		&quot;Tags&quot;: [</div><div class="line">			&quot;primary&quot;,</div><div class="line">			&quot;v1&quot;</div><div class="line">		],</div><div class="line">		&quot;Address&quot;: &quot;192.168.85.160&quot;,</div><div class="line">		&quot;Meta&quot;: &#123;</div><div class="line">			&quot;strongValid&quot;: &quot;0&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;Port&quot;: 1111</div><div class="line">	&#125;,</div><div class="line">	&quot;Check&quot;: &#123;</div><div class="line">		&quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">		&quot;CheckID&quot;: &quot;service:spring&quot;,</div><div class="line">		&quot;Name&quot;: &quot;checks-springLearning&quot;,</div><div class="line">		&quot;Notes&quot;: &quot;add checks&quot;,</div><div class="line">		&quot;Status&quot;: &quot;passing&quot;,</div><div class="line">		&quot;ServiceID&quot;: &quot;spring&quot;,</div><div class="line">		&quot;Definition&quot;: &#123;</div><div class="line">			&quot;HTTP&quot;: &quot;192.168.85.160:1111/health&quot;,</div><div class="line">			&quot;Interval&quot;: &quot;5s&quot;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="2-注销服务-1"><a href="#2-注销服务-1" class="headerlink" title="2)  注销服务"></a>2)  注销服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/catalog/deregister \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">	&quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">	&quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">	&quot;ServiceID&quot;: &quot;spring&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="3-获取所有服务"><a href="#3-获取所有服务" class="headerlink" title="3) 获取所有服务"></a>3) 获取所有服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/catalog/services</div></pre></td></tr></table></figure>
<h4 id="4-获取所有数据中心"><a href="#4-获取所有数据中心" class="headerlink" title="4) 获取所有数据中心"></a>4) 获取所有数据中心</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/catalog/datacenters</div></pre></td></tr></table></figure>
<h4 id="5-获取数据中心的所有节点"><a href="#5-获取数据中心的所有节点" class="headerlink" title="5) 获取数据中心的所有节点"></a>5) 获取数据中心的所有节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  &apos;http://172.20.20.12:8500/v1/catalog/nodes?datacenter=dc1&apos;</div></pre></td></tr></table></figure>
<h4 id="6-获取某服务的所有节点"><a href="#6-获取某服务的所有节点" class="headerlink" title="6) 获取某服务的所有节点"></a>6) 获取某服务的所有节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/catalog/service/springLearning</div></pre></td></tr></table></figure>
<h4 id="7-获取某节点注册的所有服务"><a href="#7-获取某节点注册的所有服务" class="headerlink" title="7) 获取某节点注册的所有服务"></a>7) 获取某节点注册的所有服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/catalog/node/agent@12</div></pre></td></tr></table></figure>
<h3 id="3-Health"><a href="#3-Health" class="headerlink" title="3. Health"></a>3. Health</h3><h4 id="1-获取节点上所有健康检查"><a href="#1-获取节点上所有健康检查" class="headerlink" title="1) 获取节点上所有健康检查"></a>1) 获取节点上所有健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/health/node/agent@12</div></pre></td></tr></table></figure>
<h4 id="2-获取某服务相关的健康检查"><a href="#2-获取某服务相关的健康检查" class="headerlink" title="2) 获取某服务相关的健康检查"></a>2) 获取某服务相关的健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/health/checks/springLearning</div></pre></td></tr></table></figure>
<h4 id="3-获取某服务的所有节点及运行状态"><a href="#3-获取某服务的所有节点及运行状态" class="headerlink" title="3) 获取某服务的所有节点及运行状态"></a>3) 获取某服务的所有节点及运行状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/health/service/springLearning</div></pre></td></tr></table></figure>
<h4 id="4-获取数据中心中某种健康检查状态的节点和服务"><a href="#4-获取数据中心中某种健康检查状态的节点和服务" class="headerlink" title="4) 获取数据中心中某种健康检查状态的节点和服务"></a>4) 获取数据中心中某种健康检查状态的节点和服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/health/state/passing</div></pre></td></tr></table></figure>
<h3 id="4-KV"><a href="#4-KV" class="headerlink" title="4. KV"></a>4. KV</h3><h4 id="1-创建key"><a href="#1-创建key" class="headerlink" title="1) 创建key"></a>1) 创建key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  &apos;http://172.20.20.12:8500/v1/kv/spring-key?cas=0&apos;  -H &apos;Content-Type: application/json&apos;  -d &apos;[1,2,3]&apos;</div></pre></td></tr></table></figure>
<h4 id="2-获取前缀为「spring」的key的值"><a href="#2-获取前缀为「spring」的key的值" class="headerlink" title="2) 获取前缀为「spring」的key的值"></a>2) 获取前缀为「spring」的key的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET &apos;http://172.20.20.12:8500/v1/kv/spring?recurse=true&apos;</div></pre></td></tr></table></figure>
<h4 id="3-删除前缀为「spring」的key"><a href="#3-删除前缀为「spring」的key" class="headerlink" title="3) 删除前缀为「spring」的key"></a>3) 删除前缀为「spring」的key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X DELETE  &apos;http://172.20.20.12:8500/v1/kv/spring?recurse=true&apos;</div></pre></td></tr></table></figure>
<h3 id="5-Status"><a href="#5-Status" class="headerlink" title="5. Status"></a>5. Status</h3><h4 id="1-获取数据中心中RAFT选举的Leader"><a href="#1-获取数据中心中RAFT选举的Leader" class="headerlink" title="1) 获取数据中心中RAFT选举的Leader"></a>1) 获取数据中心中RAFT选举的Leader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/status/leader</div></pre></td></tr></table></figure>
<h4 id="2-获取数据中心中RAFT-Peers列表"><a href="#2-获取数据中心中RAFT-Peers列表" class="headerlink" title="2) 获取数据中心中RAFT Peers列表"></a>2) 获取数据中心中RAFT Peers列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/status/peers</div></pre></td></tr></table></figure>
<h3 id="6-Session"><a href="#6-Session" class="headerlink" title="6. Session"></a>6. Session</h3><h4 id="1-创建session"><a href="#1-创建session" class="headerlink" title="1) 创建session"></a>1) 创建session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/session/create  -H &apos;Content-Type: application/json&apos; \</div><div class="line">-d &apos;&#123;</div><div class="line">  &quot;LockDelay&quot;: &quot;150s&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springLearning-lock&quot;,</div><div class="line">  &quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">  &quot;Checks&quot;: [&quot;service:spring&quot;],</div><div class="line">  &quot;Behavior&quot;: &quot;release&quot;,</div><div class="line">  &quot;TTL&quot;: &quot;300s&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="2-根据session-id获取详情"><a href="#2-根据session-id获取详情" class="headerlink" title="2) 根据session_id获取详情"></a>2) 根据session_id获取详情</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/session/info/61b80a19-dc92-00f8-e8f5-1bd33b840c3a</div></pre></td></tr></table></figure>
<h4 id="3-根据sesssion-id删除session"><a href="#3-根据sesssion-id删除session" class="headerlink" title="3) 根据sesssion_id删除session"></a>3) 根据sesssion_id删除session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/session/destroy/61b80a19-dc92-00f8-e8f5-1bd33b840c3a</div></pre></td></tr></table></figure>
<h4 id="4-获取当前节点存活的session"><a href="#4-获取当前节点存活的session" class="headerlink" title="4) 获取当前节点存活的session"></a>4) 获取当前节点存活的session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/session/node/agent@12</div></pre></td></tr></table></figure>
<h4 id="5-获取数据中心中所有存活的session"><a href="#5-获取数据中心中所有存活的session" class="headerlink" title="5) 获取数据中心中所有存活的session"></a>5) 获取数据中心中所有存活的session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/session/list</div></pre></td></tr></table></figure>
<h4 id="6-刷新session的过期时间"><a href="#6-刷新session的过期时间" class="headerlink" title="6) 刷新session的过期时间"></a>6) 刷新session的过期时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  http://172.20.20.12:8500/v1/session/renew/61b80a19-dc92-00f8-e8f5-1bd33b840c3a</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Consul环境描述&quot;&gt;&lt;a href=&quot;#Consul环境描述&quot; class=&quot;headerlink&quot; title=&quot;Consul环境描述&quot;&gt;&lt;/a&gt;Consul环境描述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;本地启动Consul Server, 本地IP &lt;code&gt;19
    
    </summary>
    
      <category term="consul" scheme="http://jianwl.com/categories/consul/"/>
    
    
      <category term="consul" scheme="http://jianwl.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>11.抽象工厂模式</title>
    <link href="http://jianwl.com/2018/08/06/11-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/06/11-抽象工厂模式/</id>
    <published>2018-08-06T14:27:10.000Z</published>
    <updated>2018-08-06T15:24:19.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>一个王国拥有国王、城堡和军队，请描述兽人和精灵这两类王国。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-King"><a href="#1-King" class="headerlink" title="1. King"></a>1. King</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface King &#123;</div><div class="line">    String getDescription();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Army"><a href="#2-Army" class="headerlink" title="2. Army"></a>2. Army</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Army &#123;</div><div class="line">    String getDescription();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Castle"><a href="#3-Castle" class="headerlink" title="3. Castle"></a>3. Castle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Castle &#123;</div><div class="line">    String getDescription();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-KingdomFactory"><a href="#4-KingdomFactory" class="headerlink" title="4. KingdomFactory"></a>4. KingdomFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface KingdomFactory &#123;</div><div class="line">    Castle createCastle();</div><div class="line"></div><div class="line">    King createKing();</div><div class="line"></div><div class="line">    Army createArmy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-ElfArmy"><a href="#5-ElfArmy" class="headerlink" title="5. ElfArmy"></a>5. ElfArmy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ElfArmy implements Army &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Elven Army!&quot;;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-OrcArmy"><a href="#6-OrcArmy" class="headerlink" title="6. OrcArmy"></a>6. OrcArmy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class OrcArmy implements Army &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Orc Army!&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-ElfCastle"><a href="#7-ElfCastle" class="headerlink" title="7. ElfCastle"></a>7. ElfCastle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ElfCastle implements Castle &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Elven castle!&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-OrcCastle"><a href="#8-OrcCastle" class="headerlink" title="8. OrcCastle"></a>8. OrcCastle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class OrcCastle implements Castle &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Orc castle!&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-ElfKingdomFactory"><a href="#9-ElfKingdomFactory" class="headerlink" title="9. ElfKingdomFactory"></a>9. ElfKingdomFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ElfKingdomFactory implements KingdomFactory &#123;</div><div class="line">    @Override</div><div class="line">    public Castle createCastle() &#123;</div><div class="line">        return new ElfCastle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public King createKing() &#123;</div><div class="line">        return new ElfKing();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Army createArmy() &#123;</div><div class="line">        return new ElfArmy();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="10-OrcKingdomFactory"><a href="#10-OrcKingdomFactory" class="headerlink" title="10. OrcKingdomFactory"></a>10. OrcKingdomFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class OrcKingdomFactory implements KingdomFactory &#123;</div><div class="line">    @Override</div><div class="line">    public Castle createCastle() &#123;</div><div class="line">        return new OrcCastle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public King createKing() &#123;</div><div class="line">        return new OrcKing();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Army createArmy() &#123;</div><div class="line">        return new OrcArmy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="11-App-启动类"><a href="#11-App-启动类" class="headerlink" title="11. App(启动类)"></a>11. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class App &#123;</div><div class="line">    private King king;</div><div class="line">    private Castle castle;</div><div class="line">    private Army army;</div><div class="line"></div><div class="line">    public void createKingdom(final KingdomFactory factory)&#123;</div><div class="line">        setKing(factory.createKing());</div><div class="line">        setCastle(factory.createCastle());</div><div class="line">        setArmy(factory.createArmy());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        App app = new App();</div><div class="line">        app.createKingdom(new ElfKingdomFactory());</div><div class="line">        System.out.println(String.format(&quot;army = %s, castle = %s, king = %s\n&quot;, app.getArmy().getDescription(),app.getCastle().getDescription(),app.getKing().getDescription()));</div><div class="line">        app.createKingdom(new OrcKingdomFactory());</div><div class="line">        System.out.println(String.format(&quot;army = %s, castle = %s, king = %s&quot;, app.getArmy().getDescription(),app.getCastle().getDescription(),app.getKing().getDescription()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>抽象工厂模式，提供一个创建一系列相关或相互依赖对象的接口，而不需指定它们具体的类。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-6/16534295.jpg" alt=""></p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><ol>
<li>易于交换产品系列，改变一个应用的具体工厂非常容易，只需要改变具体工厂即可实现不同的产品的配置。</li>
<li>让具体的创建实例过程与客户端分离，客户端是通过他们的抽象接口操纵实例，产品的具体类名也被具体工厂实现分离，不会出现在客户端代码中。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;一个王国拥有国王、城堡和军队，请描述兽人和精灵这两类王国。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; cl
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>10.观察者模式</title>
    <link href="http://jianwl.com/2018/08/06/10-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/06/10-观察者模式/</id>
    <published>2018-08-06T00:41:29.000Z</published>
    <updated>2018-08-06T14:25:13.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>天气一旦发生变化，就要通知霍比特人和兽人。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-WeatherObserver-observer"><a href="#1-WeatherObserver-observer" class="headerlink" title="1. WeatherObserver(observer)"></a>1. WeatherObserver(observer)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface WeatherObserver &#123;</div><div class="line">    void update(WeatherType weatherType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Hobbits-concrete-observer"><a href="#2-Hobbits-concrete-observer" class="headerlink" title="2. Hobbits(concrete observer)"></a>2. Hobbits(concrete observer)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Hobbits implements WeatherObserver &#123;</div><div class="line">    @Override</div><div class="line">    public void update(WeatherType currentWeather) &#123;</div><div class="line">        switch (currentWeather) &#123;</div><div class="line">            case COLD:</div><div class="line">                System.out.println(&quot;The hobbits are shivering in the cold weather.&quot;);</div><div class="line">                break;</div><div class="line">            case RAINY:</div><div class="line">                System.out.println(&quot;The hobbits look for cover from the rain.&quot;);</div><div class="line">                break;</div><div class="line">            case SUNNY:</div><div class="line">                System.out.println(&quot;The happy hobbits bade in the warm sun.&quot;);</div><div class="line">                break;</div><div class="line">            case WINDY:</div><div class="line">                System.out.println(&quot;The hobbits hold their hats tightly in the windy weather.&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Orcs-concrete-observer"><a href="#3-Orcs-concrete-observer" class="headerlink" title="3. Orcs(concrete observer)"></a>3. Orcs(concrete observer)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Orcs implements WeatherObserver &#123;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void update(WeatherType currentWeather) &#123;</div><div class="line">        switch (currentWeather) &#123;</div><div class="line">            case COLD:</div><div class="line">                System.out.println(&quot;The orcs are freezing cold.&quot;);</div><div class="line">                break;</div><div class="line">            case RAINY:</div><div class="line">                System.out.println(&quot;The orcs are dripping wet.&quot;);</div><div class="line">                break;</div><div class="line">            case SUNNY:</div><div class="line">                System.out.println(&quot;The sun hurts the orcs&apos; eyes.&quot;);</div><div class="line">                break;</div><div class="line">            case WINDY:</div><div class="line">                System.out.println(&quot;The orc smell almost vanishes in the wind.&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Weather-subject"><a href="#4-Weather-subject" class="headerlink" title="4. Weather(subject)"></a>4. Weather(subject)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class Weather &#123;</div><div class="line">    private WeatherType currentWeather;</div><div class="line">    private List&lt;WeatherObserver&gt; observers;</div><div class="line"></div><div class="line">    public Weather() &#123;</div><div class="line">        observers = new ArrayList&lt;&gt;();</div><div class="line">        currentWeather = WeatherType.SUNNY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addObserver(WeatherObserver observer)&#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void removeObserver(WeatherObserver observer)&#123;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void timePass()&#123;</div><div class="line">        WeatherType[] enumValues = WeatherType.values();</div><div class="line">        currentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];</div><div class="line">        System.out.println(String.format(&quot;The weather changed to %s&quot;,currentWeather));</div><div class="line">        notifyObservers(currentWeather);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void notifyObservers(WeatherType weatherType)&#123;</div><div class="line">        for (WeatherObserver observer : observers)&#123;</div><div class="line">            observer.update(weatherType);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-WeatherType-枚举"><a href="#5-WeatherType-枚举" class="headerlink" title="5. WeatherType(枚举)"></a>5. WeatherType(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum WeatherType &#123;</div><div class="line">    SUNNY,RAINY,WINDY,COLD;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return this.name().toLowerCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-App-启动类"><a href="#6-App-启动类" class="headerlink" title="6. App(启动类)"></a>6. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Weather weather = new Weather();</div><div class="line">        weather.addObserver(new Hobbits());</div><div class="line">        weather.addObserver(new Orcs());</div><div class="line"></div><div class="line">        weather.timePass();</div><div class="line">        weather.timePass();</div><div class="line">        weather.timePass();</div><div class="line">        weather.timePass();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，这种主题对象在状态发生变化时，会通知所有观察者对象，使他们能够自动更新自己。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-6/50138323.jpg" alt=""></p>
<h4 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h4><ol>
<li>当一个对象的改变需要同时改变其他对象的时候，这个时候应该考虑用观察者模式。</li>
</ol>
<h4 id="4-优点"><a href="#4-优点" class="headerlink" title="4. 优点"></a>4. 优点</h4><ol>
<li>观察者模式其实就是在做解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使得各自的变化都不会影响另一边的变化。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;天气一旦发生变化，就要通知霍比特人和兽人。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;hea
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>9.建造者模式</title>
    <link href="http://jianwl.com/2018/08/05/9-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/05/9-建造者模式/</id>
    <published>2018-08-05T02:30:15.000Z</published>
    <updated>2018-08-05T08:00:30.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>构建一个英雄的形象，声明：名字，头发以及拿的武器等属性。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-HairColor-枚举"><a href="#1-HairColor-枚举" class="headerlink" title="1. HairColor(枚举)"></a>1. HairColor(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public enum  HairColor &#123;</div><div class="line">    BLUE, BLACK, RED;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return name().toLowerCase();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="2-Profession-枚举"><a href="#2-Profession-枚举" class="headerlink" title="2. Profession(枚举)"></a>2. Profession(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum  Profession &#123;</div><div class="line">    WARRIOR,MAGE,PRIEST;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return  name().toLowerCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Weapon-枚举"><a href="#3-Weapon-枚举" class="headerlink" title="3. Weapon(枚举)"></a>3. Weapon(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum  Weapon &#123;</div><div class="line">    DAGGER, SWORD, AXE, BOW;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return name().toLowerCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Hero"><a href="#4-Hero" class="headerlink" title="4. Hero"></a>4. Hero</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">@AllArgsConstructor</div><div class="line">@NoArgsConstructor</div><div class="line">@Getter</div><div class="line">public final class Hero &#123;</div><div class="line">    private Profession profession;</div><div class="line">    private HairColor hairColor;</div><div class="line">    private Weapon weapon;</div><div class="line">    private Armor armor;</div><div class="line"></div><div class="line">    @Data</div><div class="line">    static class Builder&#123;</div><div class="line">        private Profession profession;</div><div class="line">        private HairColor hairColor;</div><div class="line">        private Weapon weapon;</div><div class="line">        private Armor armor;</div><div class="line"></div><div class="line">        public Builder profession(Profession profession)&#123;</div><div class="line">            this.setProfession(profession);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder hairColor(HairColor hairColor)&#123;</div><div class="line">            this.setHairColor(hairColor);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder weapon(Weapon weapon)&#123;</div><div class="line">            this.setWeapon(weapon);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder armor(Armor armor)&#123;</div><div class="line">            this.setArmor(armor);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Hero build()&#123;</div><div class="line">            return new Hero(this.profession,this.hairColor,this.weapon,this.armor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-App-启动类"><a href="#5-App-启动类" class="headerlink" title="5. App(启动类)"></a>5. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       Hero hero = new Hero.Builder().armor(CLOTHES).hairColor(HairColor.RED)</div><div class="line">               .profession(Profession.PRIEST).weapon(Weapon.AXE).build();</div><div class="line"></div><div class="line">        System.out.println(String.format(&quot;my hero is %s&quot;, JSON.toJSONString(hero)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构建者模式"><a href="#构建者模式" class="headerlink" title="构建者模式"></a>构建者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;构建一个英雄的形象，声明：名字，头发以及拿的武器等属性。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; cla
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>8.外观模式</title>
    <link href="http://jianwl.com/2018/08/05/8-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/05/8-外观模式/</id>
    <published>2018-08-05T02:05:58.000Z</published>
    <updated>2018-08-05T02:24:33.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>一个矮人金矿工厂包含着几个子系统，如金矿系统、矿车系统、轨道系统。每个系统都会雇佣工人使得这个系统运作起来，请描述每类系统工人一天的工作流程。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-DwarvenMineWorker"><a href="#1-DwarvenMineWorker" class="headerlink" title="1. DwarvenMineWorker"></a>1. DwarvenMineWorker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public abstract class DwarvenMineWorker &#123;</div><div class="line"></div><div class="line">    public void goToSleep() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go to sleep&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void wakeUp() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go to wake up&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void goHome() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go home&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void goToMine() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go to mine&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void action(Action action) &#123;</div><div class="line">        switch (action)&#123;</div><div class="line">            case GO_TO_SLEEP:</div><div class="line">                goToSleep();</div><div class="line">                break;</div><div class="line">            case WAKE_UP:</div><div class="line">                wakeUp();</div><div class="line">                break;</div><div class="line">            case GO_HOME:</div><div class="line">                goHome();</div><div class="line">                break;</div><div class="line">            case GO_TO_MINE:</div><div class="line">                goToMine();</div><div class="line">                break;</div><div class="line">            case WORK:</div><div class="line">                work();</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                throw new IllegalArgumentException(&quot;undefined action.&quot;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void action(Action... actions)&#123;</div><div class="line">        for(Action action: actions)&#123;</div><div class="line">            action(action);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static enum Action &#123;</div><div class="line">        GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected abstract void work();</div><div class="line"></div><div class="line">    protected abstract String name();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-DwarvenTunnelDigger"><a href="#2-DwarvenTunnelDigger" class="headerlink" title="2. DwarvenTunnelDigger"></a>2. DwarvenTunnelDigger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class DwarvenTunnelDigger extends DwarvenMineWorker&#123;</div><div class="line">    @Override</div><div class="line">    protected void work() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s creates another promising tunnel.&quot;,name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String name() &#123;</div><div class="line">        return &quot;Dwarven tunnel digger&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-DwarvenGoldDigger"><a href="#3-DwarvenGoldDigger" class="headerlink" title="3. DwarvenGoldDigger"></a>3. DwarvenGoldDigger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class DwarvenGoldDigger extends DwarvenMineWorker &#123;</div><div class="line">    @Override</div><div class="line">    protected void work() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s digger for gold.&quot;,name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String name() &#123;</div><div class="line">        return &quot;Dwarf gold digger&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-DwarvenCartOperator"><a href="#4-DwarvenCartOperator" class="headerlink" title="4. DwarvenCartOperator"></a>4. DwarvenCartOperator</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class DwarvenCartOperator extends DwarvenMineWorker &#123;</div><div class="line">    @Override</div><div class="line">    protected void work() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s moves gold chunks out of the mine.&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String name() &#123;</div><div class="line">        return &quot;Dwarf cart operator&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-DwarvenGoldMineFacade"><a href="#5-DwarvenGoldMineFacade" class="headerlink" title="5. DwarvenGoldMineFacade"></a>5. DwarvenGoldMineFacade</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class DwarvenGoldMineFacade &#123;</div><div class="line">    private List&lt;DwarvenMineWorker&gt; workers;</div><div class="line"></div><div class="line">    public DwarvenGoldMineFacade() &#123;</div><div class="line">        workers = new ArrayList&lt;&gt;();</div><div class="line">        workers.add(new DwarvenGoldDigger());</div><div class="line">        workers.add(new DwarvenTunnelDigger());</div><div class="line">        workers.add(new DwarvenCartOperator());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void startNewDay()&#123;</div><div class="line">        makeActions(workers, DwarvenMineWorker.Action.WAKE_UP, DwarvenMineWorker.Action.GO_TO_MINE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void digOutGold()&#123;</div><div class="line">        makeActions(workers, DwarvenMineWorker.Action.WORK);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void endDay()&#123;</div><div class="line">        makeActions(workers, DwarvenMineWorker.Action.GO_HOME,DwarvenMineWorker.Action.GO_TO_SLEEP);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void makeActions(Collection&lt;DwarvenMineWorker&gt; workers, DwarvenMineWorker.Action... actions)&#123;</div><div class="line">        for(DwarvenMineWorker work: workers)&#123;</div><div class="line">            work.action(actions);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-App-启动类"><a href="#6-App-启动类" class="headerlink" title="6. App(启动类)"></a>6. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        DwarvenGoldMineFacade facade = new DwarvenGoldMineFacade();</div><div class="line">        facade.startNewDay();</div><div class="line">        facade.digOutGold();</div><div class="line">        facade.endDay();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>当系统非常复杂或难以理解时，经常使用Facade设计模式,因为系统有大量相互依赖的类或其源代码是不可用。这种模式隐藏了较大系统的复杂性，并提供了更简单的方案与客户端的接口。 </p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-5/57716443.jpg" alt=""></p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>增加外观Facade可以提供一个简单的接口，减少它们之间的依赖。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;一个矮人金矿工厂包含着几个子系统，如金矿系统、矿车系统、轨道系统。每个系统都会雇佣工人使得这个系统运作起来，请描述每类系统工
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>7.模板方法模式</title>
    <link href="http://jianwl.com/2018/08/04/7-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/04/7-模板方法模式/</id>
    <published>2018-08-04T03:49:53.000Z</published>
    <updated>2018-08-04T05:12:48.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>期末考，所有人拿到的考卷题目都是一样的，但是每个人答题的答案都不一样。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-TestPaper"><a href="#1-TestPaper" class="headerlink" title="1. TestPaper"></a>1. TestPaper</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public abstract class TestPaper &#123;</div><div class="line">    private String studentName;</div><div class="line"></div><div class="line">    public TestPaper(String studentName) &#123;</div><div class="line">        this.studentName = studentName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void testQuestion1() &#123;</div><div class="line">        System.out.println(&quot;试题1：1+2=?&quot;);</div><div class="line">        System.out.println(&quot;试题1答案：&quot; + testAnswer1());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void testQuestion2() &#123;</div><div class="line">        System.out.println(&quot;试题2：3*4=？&quot;);</div><div class="line">        System.out.println(&quot;试题2答案：&quot; + testAnswer2());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void testQuestion3() &#123;</div><div class="line">        System.out.println(&quot;试题3：(5+1)*7=?&quot;);</div><div class="line">        System.out.println(&quot;试题3答案：&quot; + testAnswer3());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dispaly() &#123;</div><div class="line">        System.out.println(String.format(&quot;学生%s的答卷情况:&quot;, this.studentName));</div><div class="line">        testQuestion1();</div><div class="line">        testQuestion2();</div><div class="line">        testQuestion3();</div><div class="line">        System.out.println(&quot;\n&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract String testAnswer1();</div><div class="line"></div><div class="line">    public abstract String testAnswer2();</div><div class="line"></div><div class="line">    public abstract String testAnswer3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-TestPaperA"><a href="#2-TestPaperA" class="headerlink" title="2. TestPaperA"></a>2. TestPaperA</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class TestPaperA extends TestPaper &#123;</div><div class="line"></div><div class="line">    public TestPaperA(String studentName) &#123;</div><div class="line">        super(studentName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer1() &#123;</div><div class="line">        return &quot;3&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer2() &#123;</div><div class="line">        return &quot;6&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer3() &#123;</div><div class="line">        return &quot;7&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-TestPaperB"><a href="#3-TestPaperB" class="headerlink" title="3. TestPaperB"></a>3. TestPaperB</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class TestPaperB extends TestPaper &#123;</div><div class="line">    public TestPaperB(String studentName) &#123;</div><div class="line">        super(studentName);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public String testAnswer1() &#123;</div><div class="line">        return &quot;5&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer2() &#123;</div><div class="line">        return &quot;9&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer3() &#123;</div><div class="line">        return &quot;1&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-App-启动类"><a href="#4-App-启动类" class="headerlink" title="4. App(启动类)"></a>4. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        TestPaperA a = new TestPaperA(&quot;刘鹏&quot;);</div><div class="line">        a.dispaly();</div><div class="line"></div><div class="line">        TestPaperB b= new TestPaperB(&quot;未央&quot;);</div><div class="line">        b.dispaly();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>模板方法模式，定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-4/82380842.jpg" alt=""></p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>模板方法模式通过把不变行为搬到超类，去除子类中的重复代码来体现它的优势。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;期末考，所有人拿到的考卷题目都是一样的，但是每个人答题的答案都不一样。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>6.原型模式</title>
    <link href="http://jianwl.com/2018/08/04/6-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/08/04/6-原型模式/</id>
    <published>2018-08-04T03:01:02.000Z</published>
    <updated>2018-08-08T03:09:53.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>实现简历的复印，即，实现简历内容的复制，且如果内容中的属性是引用对象，修改引用对象，不能影响其他简历的内容,即需要实现深度拷贝。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Resume"><a href="#1-Resume" class="headerlink" title="1. Resume"></a>1. Resume</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class Resume implements Cloneable &#123;</div><div class="line">    private String name;</div><div class="line">    private String sex;</div><div class="line">    private int age;</div><div class="line"></div><div class="line">    private WorkExperience workExperience;</div><div class="line"></div><div class="line"></div><div class="line">    public Resume(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.workExperience = new WorkExperience();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Resume(WorkExperience workExperience) throws CloneNotSupportedException &#123;</div><div class="line">        this.workExperience = (WorkExperience) workExperience.clone();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPersonalInfo(String sex, int age) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setWorkExperience(String workDate, String company) &#123;</div><div class="line">        workExperience.setWorkDate(workDate);</div><div class="line">        workExperience.setCompany(company);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dispaly() &#123;</div><div class="line">        System.out.println(String.format(&quot;个人信息：name : %s, sex: %s, age: %d&quot;, name, sex, age));</div><div class="line">        System.out.println(String.format(&quot;工作经历：workData: %s, company: %s \n&quot;, workExperience.getWorkDate(), workExperience.getCompany()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Object clone() throws CloneNotSupportedException &#123;</div><div class="line">        Resume obj = new Resume(this.workExperience);</div><div class="line">        obj.name = this.name;</div><div class="line">        obj.age = this.age;</div><div class="line">        obj.sex = this.sex;</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-WorkExperience"><a href="#2-WorkExperience" class="headerlink" title="2. WorkExperience"></a>2. WorkExperience</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">@AllArgsConstructor</div><div class="line">@NoArgsConstructor</div><div class="line">public class WorkExperience implements Cloneable&#123;</div><div class="line">    private String workDate;</div><div class="line">    private String company;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Object clone() throws CloneNotSupportedException &#123;</div><div class="line">        return super.clone();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-App-启动类"><a href="#3-App-启动类" class="headerlink" title="3. App(启动类)"></a>3. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</div><div class="line">        Resume a = new Resume(&quot;大鹏&quot;);</div><div class="line">        a.setPersonalInfo(&quot;男&quot;, 29);</div><div class="line">        a.setWorkExperience(&quot;2015-2018&quot;, &quot;达达-京东到家&quot;);</div><div class="line"></div><div class="line">        Resume b = (Resume) a.clone();</div><div class="line">        b.setWorkExperience(&quot;2014-2015&quot;, &quot;优酷&quot;);</div><div class="line"></div><div class="line">        Resume c = (Resume) a.clone();</div><div class="line">        c.setWorkExperience(&quot;2013-2014&quot;, &quot;电信&quot;);</div><div class="line"></div><div class="line">        a.dispaly();</div><div class="line">        b.dispaly();</div><div class="line">        c.dispaly();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;实现简历的复印，即，实现简历内容的复制，且如果内容中的属性是引用对象，修改引用对象，不能影响其他简历的内容,即需要实现深度拷
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
