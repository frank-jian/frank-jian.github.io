<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[spring bean scope]]></title>
      <url>http://jianwl.com/2018/08/25/spring-bean-scope/</url>
      <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes" target="_blank" rel="external">Spring官方文档 bean scope</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring bean lifecycle]]></title>
      <url>http://jianwl.com/2018/08/25/spring-bean-lifecycle/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>传统java对象的生命始于调用实例化对象的new运算符，并且当对象符合垃圾收集条件时调用finalize()方法。与传统的java对象相比，spring bean的生命周期不同。Spring框架提供了一下可用于控制bean生命周期的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InitializingBean和DisposableBean接口分别用于初始化Bean前和销毁Bean前调用方法。</div><div class="line"></div><div class="line">BeanNameAware、BeanFactoryAware和ApplicationContextAware用于特定行为的接口</div></pre></td></tr></table></figure>
<h3 id="生命周期流程图"><a href="#生命周期流程图" class="headerlink" title="生命周期流程图"></a>生命周期流程图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-25/58356701.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/spring-learning/blob/master/src/test/java/com/frank/springlearning/SpringLearningApplicationTests.java" target="_blank" rel="external">Bean生命周期测试 - 请移步源码 SpringLearningApplicationTests#test_002</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mockito入门与实战]]></title>
      <url>http://jianwl.com/2018/08/23/Mockito%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在本地环境下，如果某个接口依赖第三方接口，在做单元测试时，如果本地环境没有第三方接口，那么该怎么办呢？这个场景下，Mock框架就非常有用了。当调用第三方接口时，直接返回模拟的数据。这样可以绕过第三方接口的阻断，实现整个流程的测试。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/spring-learning/blob/master/src/test/java/com/frank/springlearning/MockApiTest.java" target="_blank" rel="external">Mockito常用特性实战 - 请移步源码</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://static.javadoc.io/org.mockito/mockito-core/2.21.0/org/mockito/Mockito.html" target="_blank" rel="external">Mockito官方快速入门文档</a></li>
<li><a href="https://site.mockito.org/" target="_blank" rel="external">Mockito官方介绍</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot使用Converter实现类型转换]]></title>
      <url>http://jianwl.com/2018/08/20/SpringBoot%E4%BD%BF%E7%94%A8Converter%E5%AE%9E%E7%8E%B0%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Spring3引入了Converter，实现从一个Object转为另外一个Object；</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-注册Convert实现"><a href="#1-注册Convert实现" class="headerlink" title="1. 注册Convert实现"></a>1. 注册Convert实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class StringToDateConverter implements Converter&lt;String,Date&gt;&#123;</div><div class="line">    private SimpleDateFormat sdf;</div><div class="line"></div><div class="line">    public StringToDateConverter() &#123;</div><div class="line">        sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public Date convert(String s) &#123;</div><div class="line">        Date date = null;</div><div class="line">        try &#123;</div><div class="line">            date = sdf.parse(s);</div><div class="line">        &#125; catch (ParseException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return date;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-HelloController-API层"><a href="#2-HelloController-API层" class="headerlink" title="2. HelloController(API层)"></a>2. HelloController(API层)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class HelloController &#123;</div><div class="line">    @RequestMapping(value = &quot;/date&quot;)</div><div class="line">    public String date(@RequestParam Date dateTime)&#123;</div><div class="line">        return &quot;hello: &quot; + dateTime.getTime();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-调用层"><a href="#3-调用层" class="headerlink" title="3. 调用层"></a>3. 调用层</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 启动SpringBoot服务，端口为1111</div><div class="line"></div><div class="line"># 使用CURL命令调用</div><div class="line">curl &quot;localhost:1111/date?dateTime=2018-08-10&quot;</div><div class="line"></div><div class="line"># 得到结果</div><div class="line">hello: 1533830400000</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java8之Funtion学习]]></title>
      <url>http://jianwl.com/2018/08/13/java8%E4%B9%8BFuntion%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>function是java8的特性，之前零零散散接触过，但是都没怎么深入研究过这块，先来个扫盲篇，后续再好好整理。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">package functiondemo;</div><div class="line"></div><div class="line">import java.util.function.*;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author jianweilin</div><div class="line"> * @date 2018/8/13</div><div class="line"> */</div><div class="line">public class FunctionDemo &#123;</div><div class="line">    /**</div><div class="line">     * BiConsumer&lt;T,U&gt;</div><div class="line">     * T、U 均为入参，无返回值</div><div class="line">     */</div><div class="line">    public static void biConsumer() &#123;</div><div class="line">        BiConsumer&lt;String, String&gt; consumer = (x, y) -&gt; &#123;</div><div class="line">            System.out.println(String.format(&quot;x = %s,y=%s&quot;, x, y));</div><div class="line">        &#125;;</div><div class="line">        consumer.accept(&quot;test01&quot;, &quot;test02&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * BiFunction&lt;T,U,R&gt;</div><div class="line">     * T,U 为入参，R为返回值</div><div class="line">     */</div><div class="line">    public static void biFunction() &#123;</div><div class="line">        BiFunction&lt;String, String, String&gt; bi = (x, y) -&gt; &#123;</div><div class="line">            return x + y;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        System.out.println(bi.apply(&quot;jian&quot;, &quot;.com&quot;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * BiPredicate&lt;T,U&gt;</div><div class="line">     * T，U 为入参，Boolean会返回值</div><div class="line">     */</div><div class="line">    public static void biPredicate() &#123;</div><div class="line">        BiPredicate&lt;Integer, Integer&gt; bi = (x, y) -&gt; x &gt; y;</div><div class="line">        BiPredicate&lt;Integer, Integer&gt; eq = (x, y) -&gt; x - 2 &gt; y;</div><div class="line"></div><div class="line">        System.out.println(bi.test(2, 3));</div><div class="line">        System.out.println(bi.and(eq).test(2, 3));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * BinaryOperator&lt;T&gt;</div><div class="line">     * 两个入参，得到一个返回值</div><div class="line">     */</div><div class="line">    public static void binaryOperator() &#123;</div><div class="line">        BinaryOperator&lt;Integer&gt; operator = (n1, n2) -&gt; n1 + n2;</div><div class="line">        System.out.println(operator.apply(3,4));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 返回一个boolean类型</div><div class="line">     */</div><div class="line">    public static void booleanSupplier()&#123;</div><div class="line">        BooleanSupplier bs = () -&gt; true;</div><div class="line">        System.out.println(bs.getAsBoolean());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 一个函数接受一个入参，无返回值</div><div class="line">     */</div><div class="line">    public static void consumer()&#123;</div><div class="line">        Consumer&lt;String&gt; c = (x) -&gt; System.out.println(x.toUpperCase());</div><div class="line">        c.accept(&quot;hello world!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Function&lt;T,R&gt;</div><div class="line">     * 接受一个参数，并得到一个返回结果</div><div class="line">     */</div><div class="line">    public static void function()&#123;</div><div class="line">        Function&lt;Integer,String&gt; converter = (i) -&gt; Integer.toString(i);</div><div class="line">        System.out.println(converter.apply(3).length());</div><div class="line">        System.out.println(converter.apply(30).length());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        function();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">Oracle Function文档</a></li>
<li><a href="http://www.java2s.com/Tutorials/Java_Lambda/java.util.function/" target="_blank" rel="external">Function实战</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac终端崩溃]]></title>
      <url>http://jianwl.com/2018/08/11/mac%E7%BB%88%E7%AB%AF%E5%B4%A9%E6%BA%83/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>执行<code>brew update</code>，在更新过程中，手动退出更新进程，导致Mac的终端崩溃，每次打开终端时都出现以下界面：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/91155821.jpg" alt=""></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-打开「自动操作」应用"><a href="#1-打开「自动操作」应用" class="headerlink" title="1. 打开「自动操作」应用"></a>1. 打开「自动操作」应用</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/91467398.jpg" alt=""></p>
<h4 id="2-在「自动操作」中选择：编辑-gt-新建-gt-工作流程-gt-shell脚本"><a href="#2-在「自动操作」中选择：编辑-gt-新建-gt-工作流程-gt-shell脚本" class="headerlink" title="2. 在「自动操作」中选择：编辑 -&gt; 新建 -&gt; 工作流程 -&gt; shell脚本"></a>2. 在「自动操作」中选择：编辑 -&gt; 新建 -&gt; 工作流程 -&gt; shell脚本</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/31642310.jpg" alt=""></p>
<h4 id="3-shell脚本，选择-bin-bash并执行以下命令"><a href="#3-shell脚本，选择-bin-bash并执行以下命令" class="headerlink" title="3. shell脚本，选择/bin/bash并执行以下命令"></a>3. shell脚本，选择<code>/bin/bash</code>并执行以下命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/27114106.jpg" alt=""></p>
<p>至此完成终端的修复。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[23.访问者模式]]></title>
      <url>http://jianwl.com/2018/08/10/23-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>军营里，有指挥官的访问者、有中士的访问者、也有军士的访问者。</p>
<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义这些元素的新操作。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><p>访问者模式的目的是要把处理从数据结构分离出来。很多系统按照算法和数据结构分开，如果系统有稳定的数据结构，又有易于变化的算法，使用访问者模式比较合适。</p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>增加新的操作很容易，因为增加新的操作就以为这增加一个新的访问者。访问模式将有关的行为集中到一个访问者对象中。</p>
<h4 id="4-UML"><a href="#4-UML" class="headerlink" title="4. UML"></a>4. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/25786652.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/visitor" target="_blank" rel="external">访问者模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[22.解释器模式]]></title>
      <url>http://jianwl.com/2018/08/10/22-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>实现一个计算器，实现加减法。</p>
<h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>给定一个语言，定义它的语法的一种表示并定义一个解释器。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>如果一个特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。</li>
</ol>
<h4 id="3-不足"><a href="#3-不足" class="headerlink" title="3. 不足"></a>3. 不足</h4><p>解释器模式为语法的每一条规则至少定义了一个类，因此包含许多规则的语法可能难以管理和维护。</p>
<h4 id="4-UML"><a href="#4-UML" class="headerlink" title="4. UML"></a>4. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/45885692.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/interpreter" target="_blank" rel="external">解释器模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[21.享元模式]]></title>
      <url>http://jianwl.com/2018/08/10/21-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>炼金术商铺的货架上摆满了药水，每种药水都有多瓶。为了实现对象的复用，每种药水可以返回同一对象，实现对象的复用。</p>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>运用共享技术有效地支持大量细粒度的对象</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><p>如果有一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销就应该考虑使用；</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/90836786.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/flyweight" target="_blank" rel="external">享元模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[20.中介者模式]]></title>
      <url>http://jianwl.com/2018/08/10/20-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>举办一个相亲的Party，所有人并不知道有谁会参加，只知道来参加这个Party即可。</p>
<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><p>中介者模式一般用于一组对象以定义良好但是复杂的方式进行通信的场合。</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/27571060.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/mediator" target="_blank" rel="external">中介者模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[19.责任链模式]]></title>
      <url>http://jianwl.com/2018/08/10/19-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>国王发出指令：保卫城堡、释放囚犯、多征税收，这一些列的指令都会有特定的人来处理。</p>
<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之前的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>接收者和发送者都没有对方的明确信息，且链中的对象也不知道链的结构，结果是职责链可简化对象的相互连接，它们仅需保持一个指向其后继者的引用，而不需要保持它所有的候选者的引用。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/99125541.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/chain" target="_blank" rel="external">责任链模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[18.命令模式]]></title>
      <url>http://jianwl.com/2018/08/10/18-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>巫师对妖精，使用了收缩咒和隐身咒。</p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。对请求排队或记录请求记录，以及支持可撤销的操作。</p>
<h4 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h4><ol>
<li>它能容易地设计一个命令队列</li>
<li>在需要的情况下，可以较容易地将命令记入日志。</li>
<li>允许接受请求的一方决定是否要否决请求</li>
<li>较为容易实现对请求的撤销或重做</li>
<li>由于加进新的命令模式类不影响其他类。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/52368763.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/command" target="_blank" rel="external">命令模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[17.桥接模式]]></title>
      <url>http://jianwl.com/2018/08/10/17-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>需要对武器进行附魔，武器和魔力属性是通过某种方式桥接在一起。</p>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将抽象部分与它的实现部分分离，使他们都可以独立的变化。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>使用聚合的关系，将两种对象聚合在一起形成一个整体。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/99073982.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/bridge" target="_blank" rel="external">桥接模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[16.单例模式]]></title>
      <url>http://jianwl.com/2018/08/10/16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>保证一个类仅有一个实例，有多种实现方式，理解每种方式的优缺点。</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>保证类只有唯一实例</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/singleton" target="_blank" rel="external">单例模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[15.迭代器模式]]></title>
      <url>http://jianwl.com/2018/08/10/15-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>有个宝库，里面有很多宝箱，每个宝箱都能爆出不同的装备。可能是首饰类、武器、药剂。请遍历宝库里所有的宝箱里装备。</p>
<h3 id="迭代模式"><a href="#迭代模式" class="headerlink" title="迭代模式"></a>迭代模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象内部表示。</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样即可以不暴露集合的内部结构，又可让外部代码透明地访问集合内部数据。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/35337447.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/Iterator" target="_blank" rel="external">迭代模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[14.组合模式]]></title>
      <url>http://jianwl.com/2018/08/10/14-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>多个字母组成一个单词，多个单词组成一句话。</p>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将对象组合成树状结构以表示’部分-整体’的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><ol>
<li>需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑使用组合模式了。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-11/63835290.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/composite" target="_blank" rel="external">组合模式，请移步源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[13.适配器模式]]></title>
      <url>http://jianwl.com/2018/08/09/13-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>一群人在海上遇到了海盗，大船搁浅了，刚好这群人中有个舰长，还有个渔船。舰长需要适配掌控这个渔船带着所有人逃生。</p>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口模式不兼容而不能一起工作的接口的那些类可以一起工作。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><ol>
<li>两个类所作的事情相同或相似，但是使用它时，需要调用不同的接口。这种情况应该用适配器模式，调用一个接口即可。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-10/98252317.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/adapter" target="_blank" rel="external">适配器模式实战，请移步看源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[12.状态模式]]></title>
      <url>http://jianwl.com/2018/08/09/12-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>长毛象的情绪状态是变化的，有时候是生气状态，有时候是平和状态。</p>
<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂的情况，把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-9/14716250.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><a href="https://github.com/frank-jian/design-pattern-action/tree/master/src/main/java/state" target="_blank" rel="external">状态模式实战，请移步源码链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[consul常用API梳理]]></title>
      <url>http://jianwl.com/2018/08/08/consul%E5%B8%B8%E7%94%A8API%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="Consul环境描述"><a href="#Consul环境描述" class="headerlink" title="Consul环境描述"></a>Consul环境描述</h3><ol>
<li>本地启动Consul Server, 本地IP <code>192.168.85.160</code>, Consul Node Name: <code>server@160</code></li>
<li>虚拟机启动Consul Agent，虚拟机IP<code>172.20.20.12</code>, Consul Node Name: <code>agent@12</code></li>
<li>consul server 主动加入 agent，使得 Server和Agent实现通信。在本地IP为<code>192.168.85.160</code>的服务器上执行以下命令 <code>consul join 172.20.20.12</code></li>
<li>本地(IP<code>192.168.85.160</code>)启动一个测试服务springLearning,端口为<code>1111</code>，将测试服务(springLearning)注册在consul上。</li>
<li>以下是基于此环境下做的Consul API测试</li>
</ol>
<h3 id="1-Agent"><a href="#1-Agent" class="headerlink" title="1. Agent"></a>1. Agent</h3><h4 id="1-注册服务"><a href="#1-注册服务" class="headerlink" title="1) 注册服务"></a>1) 注册服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">curl -X PUT \</div><div class="line">  http://172.20.20.12:8500/v1/agent/service/register \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;  &#123;</div><div class="line">  &quot;ID&quot;: &quot;spring&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springLearning&quot;,</div><div class="line">  &quot;Tags&quot;: [</div><div class="line">    &quot;primary&quot;,</div><div class="line">    &quot;v1&quot;</div><div class="line">  ],</div><div class="line">  &quot;Address&quot;: &quot;192.168.85.160&quot;,</div><div class="line">  &quot;Port&quot;: 1111,</div><div class="line">  &quot;Meta&quot;: &#123;</div><div class="line">    &quot;strongValid&quot;: &quot;0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;EnableTagOverride&quot;: true,</div><div class="line">  &quot;Check&quot;: &#123;</div><div class="line">    &quot;HTTP&quot;: &quot;http://192.168.85.160:1111/health&quot;,</div><div class="line">    &quot;Interval&quot;: &quot;3s&quot;</div><div class="line">  &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="2-注销服务"><a href="#2-注销服务" class="headerlink" title="2) 注销服务"></a>2) 注销服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  http://172.20.20.12:8500/v1/agent/service/deregister/spring</div></pre></td></tr></table></figure>
<h4 id="3-服务开启维护模式"><a href="#3-服务开启维护模式" class="headerlink" title="3) 服务开启维护模式"></a>3) 服务开启维护模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  &apos;http://172.20.20.12:8500/v1/agent/service/maintenance/spring?enable=false&apos;</div></pre></td></tr></table></figure>
<h4 id="4-获取所有健康检查"><a href="#4-获取所有健康检查" class="headerlink" title="4) 获取所有健康检查"></a>4) 获取所有健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/agent/checks</div></pre></td></tr></table></figure>
<h4 id="5-注册健康检查"><a href="#5-注册健康检查" class="headerlink" title="5) 注册健康检查"></a>5) 注册健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">curl -X PUT \</div><div class="line">  http://172.20.20.12:8500/v1/agent/check/register \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">  &quot;ID&quot;: &quot;spring_checks&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springChecks&quot;,</div><div class="line">  &quot;Notes&quot;: &quot;spring learning add checkes&quot;,</div><div class="line">  &quot;DeregisterCriticalServiceAfter&quot;: &quot;1m&quot;,</div><div class="line">  &quot;AliasNode&quot;: &quot;6b045305-aacc-07e1-2b2a-749187c4e76b&quot;,</div><div class="line">  &quot;AliasService&quot;: &quot;spring&quot;,</div><div class="line">  &quot;HTTP&quot;: &quot;http://192.168.85.160:1111/check&quot;,</div><div class="line">  &quot;Method&quot;: &quot;GET&quot;,</div><div class="line">  &quot;Interval&quot;: &quot;2s&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="6-注销健康检查"><a href="#6-注销健康检查" class="headerlink" title="6) 注销健康检查"></a>6) 注销健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  http://172.20.20.12:8500/v1/agent/check/deregister/spring_checks</div></pre></td></tr></table></figure>
<h3 id="2-Catalog"><a href="#2-Catalog" class="headerlink" title="2. Catalog"></a>2. Catalog</h3><h4 id="1）注册服务"><a href="#1）注册服务" class="headerlink" title="1）注册服务"></a>1）注册服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/catalog/register \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">	&quot;ID&quot;: &quot;6b045305-aacc-07e1-2b2a-749187c4e76b&quot;,</div><div class="line">	&quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">	&quot;Address&quot;: &quot;172.20.20.12&quot;,</div><div class="line">	&quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">	&quot;TaggedAddresses&quot;: &#123;</div><div class="line">		&quot;lan&quot;: &quot;172.20.20.12&quot;,</div><div class="line">		&quot;wan&quot;: &quot;172.20.20.12&quot;</div><div class="line">	&#125;,</div><div class="line">	&quot;NodeMeta&quot;: &#123;</div><div class="line">		&quot;consul-network-segment&quot;: &quot;&quot;</div><div class="line">	&#125;,</div><div class="line">	&quot;Service&quot;: &#123;</div><div class="line">		&quot;ID&quot;: &quot;spring&quot;,</div><div class="line">		&quot;Service&quot;: &quot;springLearning&quot;,</div><div class="line">		&quot;Tags&quot;: [</div><div class="line">			&quot;primary&quot;,</div><div class="line">			&quot;v1&quot;</div><div class="line">		],</div><div class="line">		&quot;Address&quot;: &quot;192.168.85.160&quot;,</div><div class="line">		&quot;Meta&quot;: &#123;</div><div class="line">			&quot;strongValid&quot;: &quot;0&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;Port&quot;: 1111</div><div class="line">	&#125;,</div><div class="line">	&quot;Check&quot;: &#123;</div><div class="line">		&quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">		&quot;CheckID&quot;: &quot;service:spring&quot;,</div><div class="line">		&quot;Name&quot;: &quot;checks-springLearning&quot;,</div><div class="line">		&quot;Notes&quot;: &quot;add checks&quot;,</div><div class="line">		&quot;Status&quot;: &quot;passing&quot;,</div><div class="line">		&quot;ServiceID&quot;: &quot;spring&quot;,</div><div class="line">		&quot;Definition&quot;: &#123;</div><div class="line">			&quot;HTTP&quot;: &quot;192.168.85.160:1111/health&quot;,</div><div class="line">			&quot;Interval&quot;: &quot;5s&quot;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="2-注销服务-1"><a href="#2-注销服务-1" class="headerlink" title="2)  注销服务"></a>2)  注销服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/catalog/deregister \</div><div class="line">  -H &apos;Content-Type: application/json&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">	&quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">	&quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">	&quot;ServiceID&quot;: &quot;spring&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="3-获取所有服务"><a href="#3-获取所有服务" class="headerlink" title="3) 获取所有服务"></a>3) 获取所有服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/catalog/services</div></pre></td></tr></table></figure>
<h4 id="4-获取所有数据中心"><a href="#4-获取所有数据中心" class="headerlink" title="4) 获取所有数据中心"></a>4) 获取所有数据中心</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/catalog/datacenters</div></pre></td></tr></table></figure>
<h4 id="5-获取数据中心的所有节点"><a href="#5-获取数据中心的所有节点" class="headerlink" title="5) 获取数据中心的所有节点"></a>5) 获取数据中心的所有节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  &apos;http://172.20.20.12:8500/v1/catalog/nodes?datacenter=dc1&apos;</div></pre></td></tr></table></figure>
<h4 id="6-获取某服务的所有节点"><a href="#6-获取某服务的所有节点" class="headerlink" title="6) 获取某服务的所有节点"></a>6) 获取某服务的所有节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/catalog/service/springLearning</div></pre></td></tr></table></figure>
<h4 id="7-获取某节点注册的所有服务"><a href="#7-获取某节点注册的所有服务" class="headerlink" title="7) 获取某节点注册的所有服务"></a>7) 获取某节点注册的所有服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/catalog/node/agent@12</div></pre></td></tr></table></figure>
<h3 id="3-Health"><a href="#3-Health" class="headerlink" title="3. Health"></a>3. Health</h3><h4 id="1-获取节点上所有健康检查"><a href="#1-获取节点上所有健康检查" class="headerlink" title="1) 获取节点上所有健康检查"></a>1) 获取节点上所有健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/health/node/agent@12</div></pre></td></tr></table></figure>
<h4 id="2-获取某服务相关的健康检查"><a href="#2-获取某服务相关的健康检查" class="headerlink" title="2) 获取某服务相关的健康检查"></a>2) 获取某服务相关的健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/health/checks/springLearning</div></pre></td></tr></table></figure>
<h4 id="3-获取某服务的所有节点及运行状态"><a href="#3-获取某服务的所有节点及运行状态" class="headerlink" title="3) 获取某服务的所有节点及运行状态"></a>3) 获取某服务的所有节点及运行状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/health/service/springLearning</div></pre></td></tr></table></figure>
<h4 id="4-获取数据中心中某种健康检查状态的节点和服务"><a href="#4-获取数据中心中某种健康检查状态的节点和服务" class="headerlink" title="4) 获取数据中心中某种健康检查状态的节点和服务"></a>4) 获取数据中心中某种健康检查状态的节点和服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/health/state/passing</div></pre></td></tr></table></figure>
<h3 id="4-KV"><a href="#4-KV" class="headerlink" title="4. KV"></a>4. KV</h3><h4 id="1-获取所有key"><a href="#1-获取所有key" class="headerlink" title="1) 获取所有key"></a>1) 获取所有key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./consul kv get -recurse</div></pre></td></tr></table></figure>
<h4 id="2-创建key"><a href="#2-创建key" class="headerlink" title="2) 创建key"></a>2) 创建key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  &apos;http://172.20.20.12:8500/v1/kv/spring-key?cas=0&apos;  -H &apos;Content-Type: application/json&apos;  -d &apos;[1,2,3]&apos;</div></pre></td></tr></table></figure>
<h4 id="3-获取前缀为「spring」的key的值"><a href="#3-获取前缀为「spring」的key的值" class="headerlink" title="3) 获取前缀为「spring」的key的值"></a>3) 获取前缀为「spring」的key的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET &apos;http://172.20.20.12:8500/v1/kv/spring?recurse=true&apos;</div></pre></td></tr></table></figure>
<h4 id="4-删除前缀为「spring」的key"><a href="#4-删除前缀为「spring」的key" class="headerlink" title="4) 删除前缀为「spring」的key"></a>4) 删除前缀为「spring」的key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X DELETE  &apos;http://172.20.20.12:8500/v1/kv/spring?recurse=true&apos;</div></pre></td></tr></table></figure>
<h3 id="5-Status"><a href="#5-Status" class="headerlink" title="5. Status"></a>5. Status</h3><h4 id="1-获取数据中心中RAFT选举的Leader"><a href="#1-获取数据中心中RAFT选举的Leader" class="headerlink" title="1) 获取数据中心中RAFT选举的Leader"></a>1) 获取数据中心中RAFT选举的Leader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/status/leader</div></pre></td></tr></table></figure>
<h4 id="2-获取数据中心中RAFT-Peers列表"><a href="#2-获取数据中心中RAFT-Peers列表" class="headerlink" title="2) 获取数据中心中RAFT Peers列表"></a>2) 获取数据中心中RAFT Peers列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/status/peers</div></pre></td></tr></table></figure>
<h3 id="6-Session"><a href="#6-Session" class="headerlink" title="6. Session"></a>6. Session</h3><h4 id="1-创建session"><a href="#1-创建session" class="headerlink" title="1) 创建session"></a>1) 创建session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/session/create  -H &apos;Content-Type: application/json&apos; \</div><div class="line">-d &apos;&#123;</div><div class="line">  &quot;LockDelay&quot;: &quot;150s&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springLearning-lock&quot;,</div><div class="line">  &quot;Node&quot;: &quot;agent@12&quot;,</div><div class="line">  &quot;Checks&quot;: [&quot;service:spring&quot;],</div><div class="line">  &quot;Behavior&quot;: &quot;release&quot;,</div><div class="line">  &quot;TTL&quot;: &quot;300s&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<h4 id="2-根据session-id获取详情"><a href="#2-根据session-id获取详情" class="headerlink" title="2) 根据session_id获取详情"></a>2) 根据session_id获取详情</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/session/info/61b80a19-dc92-00f8-e8f5-1bd33b840c3a</div></pre></td></tr></table></figure>
<h4 id="3-根据sesssion-id删除session"><a href="#3-根据sesssion-id删除session" class="headerlink" title="3) 根据sesssion_id删除session"></a>3) 根据sesssion_id删除session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://172.20.20.12:8500/v1/session/destroy/61b80a19-dc92-00f8-e8f5-1bd33b840c3a</div></pre></td></tr></table></figure>
<h4 id="4-获取当前节点存活的session"><a href="#4-获取当前节点存活的session" class="headerlink" title="4) 获取当前节点存活的session"></a>4) 获取当前节点存活的session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET http://172.20.20.12:8500/v1/session/node/agent@12</div></pre></td></tr></table></figure>
<h4 id="5-获取数据中心中所有存活的session"><a href="#5-获取数据中心中所有存活的session" class="headerlink" title="5) 获取数据中心中所有存活的session"></a>5) 获取数据中心中所有存活的session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET  http://172.20.20.12:8500/v1/session/list</div></pre></td></tr></table></figure>
<h4 id="6-刷新session的过期时间"><a href="#6-刷新session的过期时间" class="headerlink" title="6) 刷新session的过期时间"></a>6) 刷新session的过期时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X PUT  http://172.20.20.12:8500/v1/session/renew/61b80a19-dc92-00f8-e8f5-1bd33b840c3a</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[11.抽象工厂模式]]></title>
      <url>http://jianwl.com/2018/08/06/11-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>一个王国拥有国王、城堡和军队，请描述兽人和精灵这两类王国。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-King"><a href="#1-King" class="headerlink" title="1. King"></a>1. King</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface King &#123;</div><div class="line">    String getDescription();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Army"><a href="#2-Army" class="headerlink" title="2. Army"></a>2. Army</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Army &#123;</div><div class="line">    String getDescription();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Castle"><a href="#3-Castle" class="headerlink" title="3. Castle"></a>3. Castle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Castle &#123;</div><div class="line">    String getDescription();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-KingdomFactory"><a href="#4-KingdomFactory" class="headerlink" title="4. KingdomFactory"></a>4. KingdomFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface KingdomFactory &#123;</div><div class="line">    Castle createCastle();</div><div class="line"></div><div class="line">    King createKing();</div><div class="line"></div><div class="line">    Army createArmy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-ElfArmy"><a href="#5-ElfArmy" class="headerlink" title="5. ElfArmy"></a>5. ElfArmy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ElfArmy implements Army &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Elven Army!&quot;;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-OrcArmy"><a href="#6-OrcArmy" class="headerlink" title="6. OrcArmy"></a>6. OrcArmy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class OrcArmy implements Army &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Orc Army!&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-ElfCastle"><a href="#7-ElfCastle" class="headerlink" title="7. ElfCastle"></a>7. ElfCastle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ElfCastle implements Castle &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Elven castle!&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-OrcCastle"><a href="#8-OrcCastle" class="headerlink" title="8. OrcCastle"></a>8. OrcCastle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class OrcCastle implements Castle &#123;</div><div class="line">    static final String DESCRIPTION = &quot;This is the Orc castle!&quot;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return DESCRIPTION;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-ElfKingdomFactory"><a href="#9-ElfKingdomFactory" class="headerlink" title="9. ElfKingdomFactory"></a>9. ElfKingdomFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ElfKingdomFactory implements KingdomFactory &#123;</div><div class="line">    @Override</div><div class="line">    public Castle createCastle() &#123;</div><div class="line">        return new ElfCastle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public King createKing() &#123;</div><div class="line">        return new ElfKing();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Army createArmy() &#123;</div><div class="line">        return new ElfArmy();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="10-OrcKingdomFactory"><a href="#10-OrcKingdomFactory" class="headerlink" title="10. OrcKingdomFactory"></a>10. OrcKingdomFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class OrcKingdomFactory implements KingdomFactory &#123;</div><div class="line">    @Override</div><div class="line">    public Castle createCastle() &#123;</div><div class="line">        return new OrcCastle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public King createKing() &#123;</div><div class="line">        return new OrcKing();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Army createArmy() &#123;</div><div class="line">        return new OrcArmy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="11-App-启动类"><a href="#11-App-启动类" class="headerlink" title="11. App(启动类)"></a>11. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class App &#123;</div><div class="line">    private King king;</div><div class="line">    private Castle castle;</div><div class="line">    private Army army;</div><div class="line"></div><div class="line">    public void createKingdom(final KingdomFactory factory)&#123;</div><div class="line">        setKing(factory.createKing());</div><div class="line">        setCastle(factory.createCastle());</div><div class="line">        setArmy(factory.createArmy());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        App app = new App();</div><div class="line">        app.createKingdom(new ElfKingdomFactory());</div><div class="line">        System.out.println(String.format(&quot;army = %s, castle = %s, king = %s\n&quot;, app.getArmy().getDescription(),app.getCastle().getDescription(),app.getKing().getDescription()));</div><div class="line">        app.createKingdom(new OrcKingdomFactory());</div><div class="line">        System.out.println(String.format(&quot;army = %s, castle = %s, king = %s&quot;, app.getArmy().getDescription(),app.getCastle().getDescription(),app.getKing().getDescription()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>抽象工厂模式，提供一个创建一系列相关或相互依赖对象的接口，而不需指定它们具体的类。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-6/16534295.jpg" alt=""></p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><ol>
<li>易于交换产品系列，改变一个应用的具体工厂非常容易，只需要改变具体工厂即可实现不同的产品的配置。</li>
<li>让具体的创建实例过程与客户端分离，客户端是通过他们的抽象接口操纵实例，产品的具体类名也被具体工厂实现分离，不会出现在客户端代码中。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[10.观察者模式]]></title>
      <url>http://jianwl.com/2018/08/06/10-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>天气一旦发生变化，就要通知霍比特人和兽人。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-WeatherObserver-observer"><a href="#1-WeatherObserver-observer" class="headerlink" title="1. WeatherObserver(observer)"></a>1. WeatherObserver(observer)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface WeatherObserver &#123;</div><div class="line">    void update(WeatherType weatherType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Hobbits-concrete-observer"><a href="#2-Hobbits-concrete-observer" class="headerlink" title="2. Hobbits(concrete observer)"></a>2. Hobbits(concrete observer)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Hobbits implements WeatherObserver &#123;</div><div class="line">    @Override</div><div class="line">    public void update(WeatherType currentWeather) &#123;</div><div class="line">        switch (currentWeather) &#123;</div><div class="line">            case COLD:</div><div class="line">                System.out.println(&quot;The hobbits are shivering in the cold weather.&quot;);</div><div class="line">                break;</div><div class="line">            case RAINY:</div><div class="line">                System.out.println(&quot;The hobbits look for cover from the rain.&quot;);</div><div class="line">                break;</div><div class="line">            case SUNNY:</div><div class="line">                System.out.println(&quot;The happy hobbits bade in the warm sun.&quot;);</div><div class="line">                break;</div><div class="line">            case WINDY:</div><div class="line">                System.out.println(&quot;The hobbits hold their hats tightly in the windy weather.&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Orcs-concrete-observer"><a href="#3-Orcs-concrete-observer" class="headerlink" title="3. Orcs(concrete observer)"></a>3. Orcs(concrete observer)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Orcs implements WeatherObserver &#123;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void update(WeatherType currentWeather) &#123;</div><div class="line">        switch (currentWeather) &#123;</div><div class="line">            case COLD:</div><div class="line">                System.out.println(&quot;The orcs are freezing cold.&quot;);</div><div class="line">                break;</div><div class="line">            case RAINY:</div><div class="line">                System.out.println(&quot;The orcs are dripping wet.&quot;);</div><div class="line">                break;</div><div class="line">            case SUNNY:</div><div class="line">                System.out.println(&quot;The sun hurts the orcs&apos; eyes.&quot;);</div><div class="line">                break;</div><div class="line">            case WINDY:</div><div class="line">                System.out.println(&quot;The orc smell almost vanishes in the wind.&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Weather-subject"><a href="#4-Weather-subject" class="headerlink" title="4. Weather(subject)"></a>4. Weather(subject)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class Weather &#123;</div><div class="line">    private WeatherType currentWeather;</div><div class="line">    private List&lt;WeatherObserver&gt; observers;</div><div class="line"></div><div class="line">    public Weather() &#123;</div><div class="line">        observers = new ArrayList&lt;&gt;();</div><div class="line">        currentWeather = WeatherType.SUNNY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addObserver(WeatherObserver observer)&#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void removeObserver(WeatherObserver observer)&#123;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void timePass()&#123;</div><div class="line">        WeatherType[] enumValues = WeatherType.values();</div><div class="line">        currentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];</div><div class="line">        System.out.println(String.format(&quot;The weather changed to %s&quot;,currentWeather));</div><div class="line">        notifyObservers(currentWeather);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void notifyObservers(WeatherType weatherType)&#123;</div><div class="line">        for (WeatherObserver observer : observers)&#123;</div><div class="line">            observer.update(weatherType);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-WeatherType-枚举"><a href="#5-WeatherType-枚举" class="headerlink" title="5. WeatherType(枚举)"></a>5. WeatherType(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum WeatherType &#123;</div><div class="line">    SUNNY,RAINY,WINDY,COLD;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return this.name().toLowerCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-App-启动类"><a href="#6-App-启动类" class="headerlink" title="6. App(启动类)"></a>6. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Weather weather = new Weather();</div><div class="line">        weather.addObserver(new Hobbits());</div><div class="line">        weather.addObserver(new Orcs());</div><div class="line"></div><div class="line">        weather.timePass();</div><div class="line">        weather.timePass();</div><div class="line">        weather.timePass();</div><div class="line">        weather.timePass();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，这种主题对象在状态发生变化时，会通知所有观察者对象，使他们能够自动更新自己。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-6/50138323.jpg" alt=""></p>
<h4 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h4><ol>
<li>当一个对象的改变需要同时改变其他对象的时候，这个时候应该考虑用观察者模式。</li>
</ol>
<h4 id="4-优点"><a href="#4-优点" class="headerlink" title="4. 优点"></a>4. 优点</h4><ol>
<li>观察者模式其实就是在做解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使得各自的变化都不会影响另一边的变化。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[9.建造者模式]]></title>
      <url>http://jianwl.com/2018/08/05/9-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>构建一个英雄的形象，声明：名字，头发以及拿的武器等属性。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-HairColor-枚举"><a href="#1-HairColor-枚举" class="headerlink" title="1. HairColor(枚举)"></a>1. HairColor(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public enum  HairColor &#123;</div><div class="line">    BLUE, BLACK, RED;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return name().toLowerCase();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="2-Profession-枚举"><a href="#2-Profession-枚举" class="headerlink" title="2. Profession(枚举)"></a>2. Profession(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum  Profession &#123;</div><div class="line">    WARRIOR,MAGE,PRIEST;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return  name().toLowerCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Weapon-枚举"><a href="#3-Weapon-枚举" class="headerlink" title="3. Weapon(枚举)"></a>3. Weapon(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum  Weapon &#123;</div><div class="line">    DAGGER, SWORD, AXE, BOW;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return name().toLowerCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Hero"><a href="#4-Hero" class="headerlink" title="4. Hero"></a>4. Hero</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">@AllArgsConstructor</div><div class="line">@NoArgsConstructor</div><div class="line">@Getter</div><div class="line">public final class Hero &#123;</div><div class="line">    private Profession profession;</div><div class="line">    private HairColor hairColor;</div><div class="line">    private Weapon weapon;</div><div class="line">    private Armor armor;</div><div class="line"></div><div class="line">    @Data</div><div class="line">    static class Builder&#123;</div><div class="line">        private Profession profession;</div><div class="line">        private HairColor hairColor;</div><div class="line">        private Weapon weapon;</div><div class="line">        private Armor armor;</div><div class="line"></div><div class="line">        public Builder profession(Profession profession)&#123;</div><div class="line">            this.setProfession(profession);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder hairColor(HairColor hairColor)&#123;</div><div class="line">            this.setHairColor(hairColor);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder weapon(Weapon weapon)&#123;</div><div class="line">            this.setWeapon(weapon);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder armor(Armor armor)&#123;</div><div class="line">            this.setArmor(armor);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Hero build()&#123;</div><div class="line">            return new Hero(this.profession,this.hairColor,this.weapon,this.armor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-App-启动类"><a href="#5-App-启动类" class="headerlink" title="5. App(启动类)"></a>5. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       Hero hero = new Hero.Builder().armor(CLOTHES).hairColor(HairColor.RED)</div><div class="line">               .profession(Profession.PRIEST).weapon(Weapon.AXE).build();</div><div class="line"></div><div class="line">        System.out.println(String.format(&quot;my hero is %s&quot;, JSON.toJSONString(hero)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构建者模式"><a href="#构建者模式" class="headerlink" title="构建者模式"></a>构建者模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[8.外观模式]]></title>
      <url>http://jianwl.com/2018/08/05/8-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>一个矮人金矿工厂包含着几个子系统，如金矿系统、矿车系统、轨道系统。每个系统都会雇佣工人使得这个系统运作起来，请描述每类系统工人一天的工作流程。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-DwarvenMineWorker"><a href="#1-DwarvenMineWorker" class="headerlink" title="1. DwarvenMineWorker"></a>1. DwarvenMineWorker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public abstract class DwarvenMineWorker &#123;</div><div class="line"></div><div class="line">    public void goToSleep() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go to sleep&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void wakeUp() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go to wake up&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void goHome() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go home&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void goToMine() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s go to mine&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void action(Action action) &#123;</div><div class="line">        switch (action)&#123;</div><div class="line">            case GO_TO_SLEEP:</div><div class="line">                goToSleep();</div><div class="line">                break;</div><div class="line">            case WAKE_UP:</div><div class="line">                wakeUp();</div><div class="line">                break;</div><div class="line">            case GO_HOME:</div><div class="line">                goHome();</div><div class="line">                break;</div><div class="line">            case GO_TO_MINE:</div><div class="line">                goToMine();</div><div class="line">                break;</div><div class="line">            case WORK:</div><div class="line">                work();</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                throw new IllegalArgumentException(&quot;undefined action.&quot;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void action(Action... actions)&#123;</div><div class="line">        for(Action action: actions)&#123;</div><div class="line">            action(action);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static enum Action &#123;</div><div class="line">        GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected abstract void work();</div><div class="line"></div><div class="line">    protected abstract String name();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-DwarvenTunnelDigger"><a href="#2-DwarvenTunnelDigger" class="headerlink" title="2. DwarvenTunnelDigger"></a>2. DwarvenTunnelDigger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class DwarvenTunnelDigger extends DwarvenMineWorker&#123;</div><div class="line">    @Override</div><div class="line">    protected void work() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s creates another promising tunnel.&quot;,name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String name() &#123;</div><div class="line">        return &quot;Dwarven tunnel digger&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-DwarvenGoldDigger"><a href="#3-DwarvenGoldDigger" class="headerlink" title="3. DwarvenGoldDigger"></a>3. DwarvenGoldDigger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class DwarvenGoldDigger extends DwarvenMineWorker &#123;</div><div class="line">    @Override</div><div class="line">    protected void work() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s digger for gold.&quot;,name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String name() &#123;</div><div class="line">        return &quot;Dwarf gold digger&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-DwarvenCartOperator"><a href="#4-DwarvenCartOperator" class="headerlink" title="4. DwarvenCartOperator"></a>4. DwarvenCartOperator</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class DwarvenCartOperator extends DwarvenMineWorker &#123;</div><div class="line">    @Override</div><div class="line">    protected void work() &#123;</div><div class="line">        System.out.println(String.format(&quot;%s moves gold chunks out of the mine.&quot;, name()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String name() &#123;</div><div class="line">        return &quot;Dwarf cart operator&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-DwarvenGoldMineFacade"><a href="#5-DwarvenGoldMineFacade" class="headerlink" title="5. DwarvenGoldMineFacade"></a>5. DwarvenGoldMineFacade</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class DwarvenGoldMineFacade &#123;</div><div class="line">    private List&lt;DwarvenMineWorker&gt; workers;</div><div class="line"></div><div class="line">    public DwarvenGoldMineFacade() &#123;</div><div class="line">        workers = new ArrayList&lt;&gt;();</div><div class="line">        workers.add(new DwarvenGoldDigger());</div><div class="line">        workers.add(new DwarvenTunnelDigger());</div><div class="line">        workers.add(new DwarvenCartOperator());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void startNewDay()&#123;</div><div class="line">        makeActions(workers, DwarvenMineWorker.Action.WAKE_UP, DwarvenMineWorker.Action.GO_TO_MINE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void digOutGold()&#123;</div><div class="line">        makeActions(workers, DwarvenMineWorker.Action.WORK);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void endDay()&#123;</div><div class="line">        makeActions(workers, DwarvenMineWorker.Action.GO_HOME,DwarvenMineWorker.Action.GO_TO_SLEEP);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void makeActions(Collection&lt;DwarvenMineWorker&gt; workers, DwarvenMineWorker.Action... actions)&#123;</div><div class="line">        for(DwarvenMineWorker work: workers)&#123;</div><div class="line">            work.action(actions);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-App-启动类"><a href="#6-App-启动类" class="headerlink" title="6. App(启动类)"></a>6. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        DwarvenGoldMineFacade facade = new DwarvenGoldMineFacade();</div><div class="line">        facade.startNewDay();</div><div class="line">        facade.digOutGold();</div><div class="line">        facade.endDay();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>当系统非常复杂或难以理解时，经常使用Facade设计模式,因为系统有大量相互依赖的类或其源代码是不可用。这种模式隐藏了较大系统的复杂性，并提供了更简单的方案与客户端的接口。 </p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-5/57716443.jpg" alt=""></p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>增加外观Facade可以提供一个简单的接口，减少它们之间的依赖。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[7.模板方法模式]]></title>
      <url>http://jianwl.com/2018/08/04/7-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>期末考，所有人拿到的考卷题目都是一样的，但是每个人答题的答案都不一样。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-TestPaper"><a href="#1-TestPaper" class="headerlink" title="1. TestPaper"></a>1. TestPaper</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public abstract class TestPaper &#123;</div><div class="line">    private String studentName;</div><div class="line"></div><div class="line">    public TestPaper(String studentName) &#123;</div><div class="line">        this.studentName = studentName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void testQuestion1() &#123;</div><div class="line">        System.out.println(&quot;试题1：1+2=?&quot;);</div><div class="line">        System.out.println(&quot;试题1答案：&quot; + testAnswer1());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void testQuestion2() &#123;</div><div class="line">        System.out.println(&quot;试题2：3*4=？&quot;);</div><div class="line">        System.out.println(&quot;试题2答案：&quot; + testAnswer2());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void testQuestion3() &#123;</div><div class="line">        System.out.println(&quot;试题3：(5+1)*7=?&quot;);</div><div class="line">        System.out.println(&quot;试题3答案：&quot; + testAnswer3());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dispaly() &#123;</div><div class="line">        System.out.println(String.format(&quot;学生%s的答卷情况:&quot;, this.studentName));</div><div class="line">        testQuestion1();</div><div class="line">        testQuestion2();</div><div class="line">        testQuestion3();</div><div class="line">        System.out.println(&quot;\n&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract String testAnswer1();</div><div class="line"></div><div class="line">    public abstract String testAnswer2();</div><div class="line"></div><div class="line">    public abstract String testAnswer3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-TestPaperA"><a href="#2-TestPaperA" class="headerlink" title="2. TestPaperA"></a>2. TestPaperA</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class TestPaperA extends TestPaper &#123;</div><div class="line"></div><div class="line">    public TestPaperA(String studentName) &#123;</div><div class="line">        super(studentName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer1() &#123;</div><div class="line">        return &quot;3&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer2() &#123;</div><div class="line">        return &quot;6&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer3() &#123;</div><div class="line">        return &quot;7&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-TestPaperB"><a href="#3-TestPaperB" class="headerlink" title="3. TestPaperB"></a>3. TestPaperB</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class TestPaperB extends TestPaper &#123;</div><div class="line">    public TestPaperB(String studentName) &#123;</div><div class="line">        super(studentName);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public String testAnswer1() &#123;</div><div class="line">        return &quot;5&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer2() &#123;</div><div class="line">        return &quot;9&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String testAnswer3() &#123;</div><div class="line">        return &quot;1&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-App-启动类"><a href="#4-App-启动类" class="headerlink" title="4. App(启动类)"></a>4. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        TestPaperA a = new TestPaperA(&quot;刘鹏&quot;);</div><div class="line">        a.dispaly();</div><div class="line"></div><div class="line">        TestPaperB b= new TestPaperB(&quot;未央&quot;);</div><div class="line">        b.dispaly();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>模板方法模式，定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-4/82380842.jpg" alt=""></p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>模板方法模式通过把不变行为搬到超类，去除子类中的重复代码来体现它的优势。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[6.原型模式]]></title>
      <url>http://jianwl.com/2018/08/04/6-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>实现简历的复印，即，实现简历内容的复制，且如果内容中的属性是引用对象，修改引用对象，不能影响其他简历的内容,即需要实现深度拷贝。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Resume"><a href="#1-Resume" class="headerlink" title="1. Resume"></a>1. Resume</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class Resume implements Cloneable &#123;</div><div class="line">    private String name;</div><div class="line">    private String sex;</div><div class="line">    private int age;</div><div class="line"></div><div class="line">    private WorkExperience workExperience;</div><div class="line"></div><div class="line"></div><div class="line">    public Resume(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.workExperience = new WorkExperience();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Resume(WorkExperience workExperience) throws CloneNotSupportedException &#123;</div><div class="line">        this.workExperience = (WorkExperience) workExperience.clone();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPersonalInfo(String sex, int age) &#123;</div><div class="line">        this.sex = sex;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setWorkExperience(String workDate, String company) &#123;</div><div class="line">        workExperience.setWorkDate(workDate);</div><div class="line">        workExperience.setCompany(company);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dispaly() &#123;</div><div class="line">        System.out.println(String.format(&quot;个人信息：name : %s, sex: %s, age: %d&quot;, name, sex, age));</div><div class="line">        System.out.println(String.format(&quot;工作经历：workData: %s, company: %s \n&quot;, workExperience.getWorkDate(), workExperience.getCompany()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Object clone() throws CloneNotSupportedException &#123;</div><div class="line">        Resume obj = new Resume(this.workExperience);</div><div class="line">        obj.name = this.name;</div><div class="line">        obj.age = this.age;</div><div class="line">        obj.sex = this.sex;</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-WorkExperience"><a href="#2-WorkExperience" class="headerlink" title="2. WorkExperience"></a>2. WorkExperience</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">@AllArgsConstructor</div><div class="line">@NoArgsConstructor</div><div class="line">public class WorkExperience implements Cloneable&#123;</div><div class="line">    private String workDate;</div><div class="line">    private String company;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Object clone() throws CloneNotSupportedException &#123;</div><div class="line">        return super.clone();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-App-启动类"><a href="#3-App-启动类" class="headerlink" title="3. App(启动类)"></a>3. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</div><div class="line">        Resume a = new Resume(&quot;大鹏&quot;);</div><div class="line">        a.setPersonalInfo(&quot;男&quot;, 29);</div><div class="line">        a.setWorkExperience(&quot;2015-2018&quot;, &quot;达达-京东到家&quot;);</div><div class="line"></div><div class="line">        Resume b = (Resume) a.clone();</div><div class="line">        b.setWorkExperience(&quot;2014-2015&quot;, &quot;优酷&quot;);</div><div class="line"></div><div class="line">        Resume c = (Resume) a.clone();</div><div class="line">        c.setWorkExperience(&quot;2013-2014&quot;, &quot;电信&quot;);</div><div class="line"></div><div class="line">        a.dispaly();</div><div class="line">        b.dispaly();</div><div class="line">        c.dispaly();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决ElasticSearch分页机制中Result window is too large的问题]]></title>
      <url>http://jianwl.com/2018/08/02/%E8%A7%A3%E5%86%B3ElasticSearch%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E4%B8%ADResult-window-is-too-large%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天在用ES的时候，遇到一个奇怪的问题，获取100百万批量数据总是报异常，Review代码，没发现什么问题。本地调试之后发现以下异常日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Result window is too large, from + size must be less than or equal to: [10000] but was [1000000]</div></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在index中配置，提高窗口大小的上限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &quot;http://localhost:9200/my_index/_settings&quot; -d &apos;&#123; &quot;index&quot; : &#123; &quot;max_result_window&quot; : 100000000 &#125; &#125;&apos;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-request-search-after.html" target="_blank" rel="external">search-api</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring自定义注解与AOP获取注解]]></title>
      <url>http://jianwl.com/2018/08/01/Spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E4%B8%8EAOP%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>需要对consul的节点上下线的操作日志集中管理，且尽可能减少对业务代码的侵入性。</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ol>
<li>通过AOP的方式，对指定的方法进行切面</li>
<li>通过AOP的方式，对指定的注解进行切面</li>
</ol>
<p>两个方案对比，方案一，如果预先不知道这个AOP的存在，在写代码是，可能会出现一些suprise。而方案二，扫描自定义注解的方式，对于使用方会更友好一些。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-引入AOP需要引入核心依赖"><a href="#1-引入AOP需要引入核心依赖" class="headerlink" title="1. 引入AOP需要引入核心依赖"></a>1. 引入AOP需要引入核心依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="2-CreateRouteLog-自定义注解"><a href="#2-CreateRouteLog-自定义注解" class="headerlink" title="2. CreateRouteLog(自定义注解)"></a>2. CreateRouteLog(自定义注解)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.frank.springlearning.annotation;</div><div class="line"></div><div class="line">import java.lang.annotation.*;</div><div class="line"></div><div class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Inherited</div><div class="line">@Documented</div><div class="line">public @interface CreateRouteLog &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-声明切面-OperateLogAspect"><a href="#3-声明切面-OperateLogAspect" class="headerlink" title="3. 声明切面(OperateLogAspect)"></a>3. 声明切面(OperateLogAspect)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">@Aspect</div><div class="line">@Slf4j</div><div class="line">public class OperateLogAspect &#123;</div><div class="line">    @Pointcut(&quot;@annotation(com.frank.springlearning.annotation.CreateRouteLog)&quot;)</div><div class="line">    public void createRouteLog() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterReturning(value = &quot;createRouteLog()&quot;, argNames = &quot;joinPoint,response&quot;, returning = &quot;response&quot;)</div><div class="line">    public void createRouteLog(JoinPoint joinPoint, Object response) &#123;</div><div class="line">        log.info(&quot;&gt;&gt;&gt;&gt; aspect create route log &gt;&gt;&gt;&gt;&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-LogService"><a href="#4-LogService" class="headerlink" title="4. LogService"></a>4. LogService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">@Slf4j</div><div class="line">public class LogService &#123;</div><div class="line">    @CreateRouteLog</div><div class="line">    public void createRoute(String content) &#123;</div><div class="line">        log.info(&quot;has a node create route! content: &#123;&#125;&quot;, content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-LogController"><a href="#5-LogController" class="headerlink" title="5. LogController"></a>5. LogController</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">@Slf4j</div><div class="line">public class LogController &#123;</div><div class="line">	@Autowire</div><div class="line">	private LogService logService;</div><div class="line">	</div><div class="line">    @RequestMapping(&quot;/create/node&quot;)</div><div class="line">    public String createNode()&#123;</div><div class="line">        logService.createRoute(&quot;Hello World!&quot;);</div><div class="line">        return &quot;create node&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[5.工厂方法模式]]></title>
      <url>http://jianwl.com/2018/07/31/5-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>有两类铁匠师，精灵铁匠师和兽人铁匠师，精灵铁匠师专门做精灵类的武器，兽人铁匠师专门做兽人的武器。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Weapon-product"><a href="#1-Weapon-product" class="headerlink" title="1. Weapon(product)"></a>1. Weapon(product)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Weapon &#123;</div><div class="line">    WeaponType getWeaponType();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-WeaponType"><a href="#2-WeaponType" class="headerlink" title="2. WeaponType"></a>2. WeaponType</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public enum WeaponType &#123;</div><div class="line">    SHORT_SWORD(&quot;short sword&quot;),</div><div class="line">    SPEAR(&quot;spear&quot;),</div><div class="line">    AXE(&quot;axe&quot;),</div><div class="line">    UNDEFINE(&quot;&quot;);</div><div class="line">    private String title;</div><div class="line"></div><div class="line">    WeaponType(String title) &#123;</div><div class="line">        this.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return title;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-OrcWeapon-concret-product"><a href="#3-OrcWeapon-concret-product" class="headerlink" title="3. OrcWeapon(concret product)"></a>3. OrcWeapon(concret product)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class OrcWeapon implements Weapon &#123;</div><div class="line">    private WeaponType weaponType;</div><div class="line"></div><div class="line">    public OrcWeapon(WeaponType weaponType) &#123;</div><div class="line">        this.weaponType = weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public WeaponType getWeaponType() &#123;</div><div class="line">        return weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Orcish: &quot; + weaponType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-ElfWeapon-concret-product"><a href="#4-ElfWeapon-concret-product" class="headerlink" title="4. ElfWeapon(concret product)"></a>4. ElfWeapon(concret product)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ElfWeapon implements Weapon &#123;</div><div class="line">    private WeaponType weaponType;</div><div class="line"></div><div class="line">    public ElfWeapon(WeaponType weaponType) &#123;</div><div class="line">        this.weaponType = weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public WeaponType getWeaponType() &#123;</div><div class="line">        return weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Elf: &quot; + weaponType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-Blacksmith-factory"><a href="#5-Blacksmith-factory" class="headerlink" title="5. Blacksmith(factory)"></a>5. Blacksmith(factory)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Blacksmith &#123;</div><div class="line">    Weapon manufactureWeapon(WeaponType weaponType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-OrcBlacksmith-concret-factory"><a href="#6-OrcBlacksmith-concret-factory" class="headerlink" title="6. OrcBlacksmith(concret factory)"></a>6. OrcBlacksmith(concret factory)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class OrcBlacksmith implements Blacksmith &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Weapon manufactureWeapon(WeaponType weaponType) &#123;</div><div class="line">        return new OrcWeapon(weaponType);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-ElfBlacksmith-concret-factory"><a href="#7-ElfBlacksmith-concret-factory" class="headerlink" title="7. ElfBlacksmith(concret factory)"></a>7. ElfBlacksmith(concret factory)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ElfBlacksmith implements Blacksmith&#123;</div><div class="line">    @Override</div><div class="line">    public Weapon manufactureWeapon(WeaponType weaponType) &#123;</div><div class="line">        return new ElfWeapon(weaponType);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-App-启动类"><a href="#8-App-启动类" class="headerlink" title="8. App(启动类)"></a>8. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    private final Blacksmith blacksmith;</div><div class="line"></div><div class="line">    public App(Blacksmith blacksmith) &#123;</div><div class="line">        this.blacksmith = blacksmith;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        App app = new App(new OrcBlacksmith());</div><div class="line">        app.manufactureWeapons();</div><div class="line">        app = new App(new ElfBlacksmith());</div><div class="line">        app.manufactureWeapons();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void manufactureWeapons()&#123;</div><div class="line">        Weapon weapon;</div><div class="line">        weapon = blacksmith.manufactureWeapon(SHORT_SWORD);</div><div class="line">        System.out.println(weapon.toString());</div><div class="line">        weapon = blacksmith.manufactureWeapon(AXE);</div><div class="line">        System.out.println(weapon.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>工厂方法模式：定义了一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-4/35555791.jpg" alt=""></p>
<h4 id="3-简单工厂-VS-工厂模式"><a href="#3-简单工厂-VS-工厂模式" class="headerlink" title="3. 简单工厂 VS 工厂模式"></a>3. 简单工厂 VS 工厂模式</h4><p>简单工厂模式的最大优点杂鱼工厂类中包含了必要的逻辑判断，根据客户端的条件选择动态实例化相关的类，对于客户端来说，去除了具体产品的依赖。但如果要新增一个产品，需要修改原有的工厂类，增加一个CASE用例。违背了开放-封闭模式。</p>
<p>使用工厂模式，<strong>整个工厂和产品体系都没有修改的变化，只有扩展的变化符合了开放-封闭原则</strong>，客户端需要决定实例化哪一个工厂来实现运算类，即 工厂方法把简单工厂的内部逻辑判断移到了客户端进行。</p>
<h4 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4. 缺点"></a>4. 缺点</h4><p>每加一个产品，就需要加一个产品工厂的类，增加了额外的开发量。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[4.代理模式]]></title>
      <url>http://jianwl.com/2018/07/30/4-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>有个暗恋”李娇娇”同学的男生雇佣快递员“威廉”，把礼物送给这个女生。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-IGiveGift-Subject"><a href="#1-IGiveGift-Subject" class="headerlink" title="1. IGiveGift(Subject)"></a>1. IGiveGift(Subject)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface IGiveGift &#123;</div><div class="line">    void giveDolls();</div><div class="line">    void giveFlowers();</div><div class="line">    void giveChocolate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-SchoolGirl"><a href="#2-SchoolGirl" class="headerlink" title="2. SchoolGirl"></a>2. SchoolGirl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SchoolGirl &#123;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public SchoolGirl(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Pursuit-RealSubject"><a href="#3-Pursuit-RealSubject" class="headerlink" title="3. Pursuit(RealSubject)"></a>3. Pursuit(RealSubject)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Pursuit implements IGiveGift &#123;</div><div class="line">    private SchoolGirl girl;</div><div class="line"></div><div class="line">    public Pursuit(SchoolGirl girl) &#123;</div><div class="line">        this.girl = girl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveDolls() &#123;</div><div class="line">        System.out.println(girl.getName() + &quot;送你洋娃娃~&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveFlowers() &#123;</div><div class="line">        System.out.println(girl.getName() + &quot;送你花~&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveChocolate() &#123;</div><div class="line">        System.out.println(girl.getName() + &quot;送你巧克力~&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Proxy"><a href="#4-Proxy" class="headerlink" title="4. Proxy"></a>4. Proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Proxy implements IGiveGift&#123;</div><div class="line">    private Pursuit man;</div><div class="line"></div><div class="line">    public Proxy(SchoolGirl girl) &#123;</div><div class="line">        this.man = new Pursuit(girl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveDolls() &#123;</div><div class="line">        man.giveDolls();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveFlowers() &#123;</div><div class="line">        man.giveFlowers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveChocolate() &#123;</div><div class="line">        man.giveChocolate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-App-启动类"><a href="#5-App-启动类" class="headerlink" title="5. App(启动类)"></a>5. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SchoolGirl girl = new SchoolGirl(&quot;李娇娇&quot;);</div><div class="line">        Proxy william = new Proxy(girl);</div><div class="line">        william.giveDolls();</div><div class="line">        william.giveFlowers();</div><div class="line">        william.giveChocolate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>为其他对象提供一种代理以控制这个对象的访问</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>远程代理，即一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象存在于不同空间地址的事实。</li>
<li>虚拟代理，是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。比如说打开一个很大的HTML网页时，里面可能需要很多的文字和图片，但是你还是可以很快打开它，此时你看到的是所有的文字，但图片还是一张一张地下载后才能看到。那些未打开的图片库，通过虚拟代理来替代真实的图片，此时代理存储了真实图片的路径和尺寸。</li>
<li>安全代理，用来控制真实对象访问是的权限。</li>
<li>智能指引，当调用真实对象时，代理处理另外一些事。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-30/12731914.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[3.装饰模式]]></title>
      <url>http://jianwl.com/2018/07/29/3-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>写一个可以给人搭配不同的服饰的系统，比如类似QQ、网络游戏或论坛都有的Avatar系统，你会怎么开发？</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Person-concreteComponent"><a href="#1-Person-concreteComponent" class="headerlink" title="1. Person(concreteComponent)"></a>1. Person(concreteComponent)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Person &#123;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public Person() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Person(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void show()&#123;</div><div class="line">        System.out.println(&quot;light up the body,just wear clothes,please!&quot;);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Finery-Decorator"><a href="#2-Finery-Decorator" class="headerlink" title="2. Finery(Decorator)"></a>2. Finery(Decorator)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Finery extends Person &#123;</div><div class="line">    private Person component;</div><div class="line"></div><div class="line">    public void setComponent(Person component) &#123;</div><div class="line">        this.component = component;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void show() &#123;</div><div class="line">        if(component != null)&#123;</div><div class="line">            component.show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-TShirts-ConcreteDecorator"><a href="#3-TShirts-ConcreteDecorator" class="headerlink" title="3. TShirts(ConcreteDecorator)"></a>3. TShirts(ConcreteDecorator)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class TShirts extends Finery &#123;</div><div class="line">    @Override</div><div class="line">    public void show() &#123;</div><div class="line">        super.show();</div><div class="line">        System.out.println(&quot;wear TShirts&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-BigTrouser-ConcreteDecorator"><a href="#4-BigTrouser-ConcreteDecorator" class="headerlink" title="4. BigTrouser(ConcreteDecorator)"></a>4. BigTrouser(ConcreteDecorator)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class BigTrouser extends Finery &#123;</div><div class="line">    @Override</div><div class="line">    public void show() &#123;</div><div class="line">        super.show();</div><div class="line">        System.out.println(&quot;wear bigTrouser&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-App-启动类"><a href="#5-App-启动类" class="headerlink" title="5. App(启动类)"></a>5. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Person component = new Person(&quot;William&quot;);</div><div class="line">        TShirts tShirts = new TShirts();</div><div class="line">        BigTrouser trouser = new BigTrouser();</div><div class="line"></div><div class="line">        tShirts.setComponent(component);</div><div class="line">        trouser.setComponent(tShirts);</div><div class="line">        trouser.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>动态给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><p>当系统需要新功能的时候，是向旧的类中添加新的代码，这些新加的代码通常修饰了原有类的核心职责或主要行为，他们在主类中加入新的字段、新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。装饰模式提供了一个很好的解决方案，它把每个要装饰的功能都放在单独的类中，并让这个类包装它所要修饰的类，因为当需要执行特殊行为时，客户代码就可以在运行时，根据需要有选择地、按顺序使用装饰功能包装对象。</p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>有效地把核心职责和装饰功能去分开了，去除相关的重复修饰逻辑；</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-29/12012511.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2.策略模式]]></title>
      <url>http://jianwl.com/2018/07/28/2-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>做一个商场收银软件，营业员可以记录客户所购买商品的单价和数量，有个列表框来记录商品的清单，一个标签来记录总计, 同时支持商场有此促销策略，比如全场打折活动。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-RecvCash接口"><a href="#1-RecvCash接口" class="headerlink" title="1. RecvCash接口"></a>1. RecvCash接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface RecvCash &#123;</div><div class="line"></div><div class="line">    double returnCash(double totalPrice);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-NormalCash-促销手段"><a href="#2-NormalCash-促销手段" class="headerlink" title="2. NormalCash(促销手段)"></a>2. NormalCash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class NormalCash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public NormalCash( double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return totalPrice * discount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Point8Cash-促销手段"><a href="#3-Point8Cash-促销手段" class="headerlink" title="3. Point8Cash(促销手段)"></a>3. Point8Cash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Point8Cash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public Point8Cash(double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return totalPrice * discount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Point7Cash-促销手段"><a href="#4-Point7Cash-促销手段" class="headerlink" title="4. Point7Cash(促销手段)"></a>4. Point7Cash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Point7Cash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public Point7Cash( double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return discount * totalPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-Point5Cash-促销手段"><a href="#5-Point5Cash-促销手段" class="headerlink" title="5. Point5Cash(促销手段)"></a>5. Point5Cash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Point5Cash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public Point5Cash(double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return discount * totalPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-Discount-枚举"><a href="#6-Discount-枚举" class="headerlink" title="6. Discount(枚举)"></a>6. Discount(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public enum Discount &#123;</div><div class="line">    NORMAL(1, 1, &quot;正常&quot;),</div><div class="line">    POINT_8(2, 0.8, &quot;8折&quot;),</div><div class="line">    POINT_7(3, 0.7, &quot;7折&quot;),</div><div class="line">    POINT_5(4, 0.5, &quot;5折&quot;);</div><div class="line">    private int lab;</div><div class="line">    private double discountPoint;</div><div class="line">    private String desc;</div><div class="line"></div><div class="line">    Discount(int lab, double discountPoint, String desc) &#123;</div><div class="line">        this.lab = lab;</div><div class="line">        this.discountPoint = discountPoint;</div><div class="line">        this.desc = desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getLab() &#123;</div><div class="line">        return lab;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double getDiscountPoint() &#123;</div><div class="line">        return discountPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDesc() &#123;</div><div class="line">        return desc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-Strategy-策略封装"><a href="#7-Strategy-策略封装" class="headerlink" title="7. Strategy(策略封装)"></a>7. Strategy(策略封装)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class Strategy &#123;</div><div class="line">    private RecvCash recvCash;</div><div class="line"></div><div class="line">    public Strategy(int label) &#123;</div><div class="line">        switch (label) &#123;</div><div class="line">            case 1:</div><div class="line">                recvCash = new NormalCash(Discount.NORMAL.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            case 2:</div><div class="line">                recvCash = new Point8Cash(Discount.POINT_8.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            case 3:</div><div class="line">                recvCash = new Point7Cash(Discount.POINT_7.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            case 4:</div><div class="line">                recvCash = new Point5Cash(Discount.POINT_5.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                recvCash = new NormalCash(Discount.NORMAL.getDiscountPoint());</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RecvCash getRecvCash() &#123;</div><div class="line">        return recvCash;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-App-启动类"><a href="#8-App-启动类" class="headerlink" title="8. App(启动类)"></a>8. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private List&lt;String&gt; result;</div><div class="line">private static final String DESC_PATTRN = &quot;单价：%.2f 数量:%d %s 合计: %.2f&quot;;</div><div class="line"></div><div class="line">public App() &#123;</div><div class="line">    result = new ArrayList&lt;&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void initInstance(double price, int count, Discount discount)&#123;</div><div class="line">    double realCash = new Strategy(discount.getLab()).getRecvCash().returnCash(price * count);</div><div class="line">    result.add(String.format(DESC_PATTRN, price,count,discount.getDesc(),realCash));</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">    App app = new App();</div><div class="line">    app.initInstance(10,10,Discount.NORMAL);</div><div class="line">    app.initInstance(10,10,Discount.POINT_8);</div><div class="line">    app.initInstance(10,10,Discount.POINT_7);</div><div class="line">    app.initInstance(10,10,Discount.POINT_5);</div><div class="line">    System.out.println(JSON.toJSONString(app.result));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="策略模式介绍"><a href="#策略模式介绍" class="headerlink" title="策略模式介绍"></a>策略模式介绍</h3><h4 id="1-UML"><a href="#1-UML" class="headerlink" title="1. UML"></a>1. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-28/49505014.jpg" alt=""></p>
<h4 id="2-定义"><a href="#2-定义" class="headerlink" title="2. 定义"></a>2. 定义</h4><p>策略模式是一个定义一系列算法的方法，从概念上看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了<strong>各种算法类</strong>与<strong>使用算法类</strong>之间的耦合。</p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><ol>
<li>将选择所用具体实现的职责由客户端对象承担转移给策略模式的Context对象，最大化地减轻了客户端的职责。</li>
<li>策略模式的Strategy类层次为Context定义了一系列的可供<strong>重用</strong>的算法和行为。</li>
<li>简化测试，每个算法都有自己的类</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[1.简单工厂模式]]></title>
      <url>http://jianwl.com/2018/07/22/1-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文章用小故事的形式引出设计模式，让读者相对轻松地进入设计模式的学习。</p>
<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>小菜今年计算机专业大四了，学了不少软件开发方面的东西，也学着编了些小程序，踌躇满志，一心找到一个好单位，当投递了无数份简历后，终于收到了一个单位的面试通知，小菜欣喜若狂。</p>
<p>到了人家单位，前台小姐姐给他一份题目，上面写着: 请用Java面向对象语言实现<strong>一个计算器控制台程序，要求输入两个数和运算符，得到结果</strong></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Operation"><a href="#1-Operation" class="headerlink" title="1. Operation"></a>1. Operation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Operation &#123;</div><div class="line">    double getResult(int numa,int numb);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-AddOperation"><a href="#2-AddOperation" class="headerlink" title="2. AddOperation"></a>2. AddOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class AddOperation implements Operation &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line">        return numa + numb ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-SubOperation"><a href="#3-SubOperation" class="headerlink" title="3. SubOperation"></a>3. SubOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SubOperation implements Operation &#123;</div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line">        return numa - numb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-MulOperation"><a href="#4-MulOperation" class="headerlink" title="4. MulOperation"></a>4. MulOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class MulOperation implements Operation &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line">        return numa * numb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-DivOperation"><a href="#5-DivOperation" class="headerlink" title="5. DivOperation"></a>5. DivOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class DivOperation implements Operation &#123;</div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line"></div><div class="line">        if (numb == 0) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;除数不能为0&quot;);</div><div class="line">        &#125;</div><div class="line">        return numa / numb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-启动类App"><a href="#6-启动类App" class="headerlink" title="6. 启动类App"></a>6. 启动类App</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static Operation createOperation(String operate)&#123;</div><div class="line">        switch (operate)&#123;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                return new AddOperation();</div><div class="line">            case &quot;-&quot;:</div><div class="line">                return new SubOperation();</div><div class="line">            case &quot;*&quot;:</div><div class="line">                return new MulOperation();</div><div class="line">            case &quot;/&quot;:</div><div class="line">                return new DivOperation();</div><div class="line">            default:</div><div class="line">                throw new IllegalArgumentException(&quot;没有此运算符&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Operation oper = createOperation(&quot;+&quot;);</div><div class="line">        System.out.println(oper.getResult(1,2));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="1-UML"><a href="#1-UML" class="headerlink" title="1. UML"></a>1. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-28/83812847.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式专题训练]]></title>
      <url>http://jianwl.com/2018/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>设计模式有四境界：</p>
<ol>
<li>没学前一点不懂，根本想不到用设计模式，设计的代码很糟糕。</li>
<li>学了几个设计模式后，很开心，于是导出想着要用自己学过的模式，于是时常造成误用模式而不自知。</li>
<li>学完全部设计模式时，感觉诸多模式极其相似，无法分清模式之间的差异，有困惑，但深知误用之害，应用之时有所犹豫。</li>
<li>灵活应用模式，甚至不应用具体的某种模式也能设计出优秀的代码，以达到无剑胜有剑的境界。</li>
</ol>
<p>通过学习设计模式，让你找到封装变化、对象间松散耦合、针对接口编程的感觉，从而设计出易维护、易扩展、易复用、灵活性好的程序。</p>
<h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><ol>
<li>简单工厂模式 「√」</li>
<li>策略模式 「√」</li>
<li>装饰模式「√」</li>
<li>代理模式「√」</li>
<li>工厂方法模式「√」</li>
<li>原型模式「√」</li>
<li>模板方法模式「√」</li>
<li>外观模式「√」</li>
<li>建造者模式「√」</li>
<li>观察者模式「√」</li>
<li>抽象工厂模式「√」</li>
<li>状态模式「√」</li>
<li>适配器模式「√」</li>
<li>组合模式「√」</li>
<li>迭代器模式「√」</li>
<li>单例模式「√」</li>
<li>桥接模式「√」</li>
<li>命令模式「√」</li>
<li>责任链模式「√」</li>
<li>中介者模式「√」</li>
<li>享元模式「√」</li>
<li>解释器模式「√」</li>
<li>访问者模式「√」</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[consul实现服务注册与发现]]></title>
      <url>http://jianwl.com/2018/07/22/consul%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个章节旨在梳理consul服务注册与发现的实战细节。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-启动consul-agent"><a href="#1-启动consul-agent" class="headerlink" title="1. 启动consul agent"></a>1. 启动consul agent</h4><p>如果没有安装consul，请移步<a href="https://www.consul.io/downloads.html" target="_blank" rel="external">consul install</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/consul.d</div><div class="line">consul agent -dev -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<p>启动consul后，在另外一个控制台输入：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-22/83511450.jpg" alt=""></p>
<p>可以看到consul agent已经正常启动了。</p>
<h4 id="2-注册一个服务"><a href="#2-注册一个服务" class="headerlink" title="2. 注册一个服务"></a>2. 注册一个服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --request PUT --data @payload.json &quot;http://localhost:8500/v1/agent/service/register&quot;</div></pre></td></tr></table></figure>
<p>payload.json文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;ID&quot;: &quot;spring-learning&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springLearning&quot;,</div><div class="line">  &quot;Tags&quot;: [</div><div class="line">    &quot;primary&quot;,</div><div class="line">    &quot;v1&quot;</div><div class="line">  ],</div><div class="line">  &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">  &quot;Port&quot;: 1111,</div><div class="line">  &quot;Meta&quot;: &#123;</div><div class="line">    &quot;spring-learning&quot;: &quot;1.0.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;EnableTagOverride&quot;: false,</div><div class="line">  &quot;Check&quot;: &#123;</div><div class="line">    &quot;HTTP&quot;: &quot;http://localhost:1111/health&quot;,</div><div class="line">    &quot;Interval&quot;: &quot;10s&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册一个服务，包含这些参数(服务名、服务标签、IP、端口、健康检查)；IP为<code>127.0.0.1</code>，端口<code>1111</code>，这个服务是本地写的一个服务，可以根据自己的情况，去注册服务。</p>
<h4 id="3-查看所有服务列表"><a href="#3-查看所有服务列表" class="headerlink" title="3. 查看所有服务列表"></a>3. 查看所有服务列表</h4><p>请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &quot;localhost:8500/v1/catalog/services&quot;</div></pre></td></tr></table></figure>
<p>响应：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;consul&quot;: [],</div><div class="line">    &quot;springLearning&quot;: [</div><div class="line">        &quot;primary&quot;,</div><div class="line">        &quot;v1&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-查看某个服务信息"><a href="#4-查看某个服务信息" class="headerlink" title="4. 查看某个服务信息"></a>4. 查看某个服务信息</h4><p>请求:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &quot;localhost:8500/v1/catalog/service/springLearning&quot;</div></pre></td></tr></table></figure>
<p>响应：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;ID&quot;: &quot;a6db682e-fb44-2af6-63f8-83c43cb7824c&quot;,</div><div class="line">        &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">        &quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">        &quot;TaggedAddresses&quot;: &#123;</div><div class="line">            &quot;lan&quot;: &quot;127.0.0.1&quot;,</div><div class="line">            &quot;wan&quot;: &quot;127.0.0.1&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;NodeMeta&quot;: &#123;</div><div class="line">            &quot;consul-network-segment&quot;: &quot;&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;ServiceID&quot;: &quot;spring-learning&quot;,</div><div class="line">        &quot;ServiceName&quot;: &quot;springLearning&quot;,</div><div class="line">        &quot;ServiceTags&quot;: [</div><div class="line">            &quot;primary&quot;,</div><div class="line">            &quot;v1&quot;</div><div class="line">        ],</div><div class="line">        &quot;ServiceAddress&quot;: &quot;127.0.0.1&quot;,</div><div class="line">        &quot;ServiceMeta&quot;: &#123;</div><div class="line">            &quot;spring-learning&quot;: &quot;1.0.0&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;ServicePort&quot;: 1111,</div><div class="line">        &quot;ServiceEnableTagOverride&quot;: false,</div><div class="line">        &quot;CreateIndex&quot;: 40,</div><div class="line">        &quot;ModifyIndex&quot;: 40</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="5-获取健康的服务节点列表"><a href="#5-获取健康的服务节点列表" class="headerlink" title="5. 获取健康的服务节点列表"></a>5. 获取健康的服务节点列表</h4><p>请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &quot;localhost:8500/v1/health/service/springLearning?passing&quot;</div></pre></td></tr></table></figure>
<p>响应：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;Node&quot;: &#123;</div><div class="line">            &quot;ID&quot;: &quot;a6db682e-fb44-2af6-63f8-83c43cb7824c&quot;,</div><div class="line">            &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">            &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">            &quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">            &quot;TaggedAddresses&quot;: &#123;</div><div class="line">                &quot;lan&quot;: &quot;127.0.0.1&quot;,</div><div class="line">                &quot;wan&quot;: &quot;127.0.0.1&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;Meta&quot;: &#123;</div><div class="line">                &quot;consul-network-segment&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;CreateIndex&quot;: 5,</div><div class="line">            &quot;ModifyIndex&quot;: 6</div><div class="line">        &#125;,</div><div class="line">        &quot;Service&quot;: &#123;</div><div class="line">            &quot;ID&quot;: &quot;spring-learning&quot;,</div><div class="line">            &quot;Service&quot;: &quot;springLearning&quot;,</div><div class="line">            &quot;Tags&quot;: [</div><div class="line">                &quot;primary&quot;,</div><div class="line">                &quot;v1&quot;</div><div class="line">            ],</div><div class="line">            &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">            &quot;Meta&quot;: &#123;</div><div class="line">                &quot;spring-learning&quot;: &quot;1.0.0&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;Port&quot;: 1111,</div><div class="line">            &quot;EnableTagOverride&quot;: false,</div><div class="line">            &quot;CreateIndex&quot;: 40,</div><div class="line">            &quot;ModifyIndex&quot;: 40</div><div class="line">        &#125;,</div><div class="line">        &quot;Checks&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">                &quot;CheckID&quot;: &quot;serfHealth&quot;,</div><div class="line">                &quot;Name&quot;: &quot;Serf Health Status&quot;,</div><div class="line">                &quot;Status&quot;: &quot;passing&quot;,</div><div class="line">                &quot;Notes&quot;: &quot;&quot;,</div><div class="line">                &quot;Output&quot;: &quot;Agent alive and reachable&quot;,</div><div class="line">                &quot;ServiceID&quot;: &quot;&quot;,</div><div class="line">                &quot;ServiceName&quot;: &quot;&quot;,</div><div class="line">                &quot;ServiceTags&quot;: [],</div><div class="line">                &quot;Definition&quot;: &#123;&#125;,</div><div class="line">                &quot;CreateIndex&quot;: 5,</div><div class="line">                &quot;ModifyIndex&quot;: 5</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">                &quot;CheckID&quot;: &quot;service:spring-learning&quot;,</div><div class="line">                &quot;Name&quot;: &quot;Service &apos;springLearning&apos; check&quot;,</div><div class="line">                &quot;Status&quot;: &quot;passing&quot;,</div><div class="line">                &quot;Notes&quot;: &quot;&quot;,</div><div class="line">                &quot;Output&quot;: &quot;HTTP GET http://localhost:1111/health: 200  Output: services is healthy!&quot;,</div><div class="line">                &quot;ServiceID&quot;: &quot;spring-learning&quot;,</div><div class="line">                &quot;ServiceName&quot;: &quot;springLearning&quot;,</div><div class="line">                &quot;ServiceTags&quot;: [</div><div class="line">                    &quot;primary&quot;,</div><div class="line">                    &quot;v1&quot;</div><div class="line">                ],</div><div class="line">                &quot;Definition&quot;: &#123;&#125;,</div><div class="line">                &quot;CreateIndex&quot;: 40,</div><div class="line">                &quot;ModifyIndex&quot;: 42</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="5-注销服务"><a href="#5-注销服务" class="headerlink" title="5. 注销服务"></a>5. 注销服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --request PUT &quot;localhost:8500/v1/agent/service/deregister/spring-learning</div></pre></td></tr></table></figure>
<p>查看服务列表，可知服务已经被注销了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-22/66291532.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.consul.io/api/agent/service.html" target="_blank" rel="external">Agent HTTP API</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[consul核心概念梳理]]></title>
      <url>http://jianwl.com/2018/07/22/consul%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="1-什么是consul"><a href="#1-什么是consul" class="headerlink" title="1. 什么是consul"></a>1. 什么是consul</h3><p>Consul是一种服务网格(service mesh)解决方案，提供<strong>服务发现、配置和分段功能</strong>的全功能控制平面。每个功能可以单独使用，也可以一起使用以构建全服务网格。consul附带一个简单的内建代理，所以可以开箱即用，也支持第三方代理如Envoy。</p>
<h3 id="2-consul的核心特性"><a href="#2-consul的核心特性" class="headerlink" title="2. consul的核心特性"></a>2. consul的核心特性</h3><h4 id="1-服务发现"><a href="#1-服务发现" class="headerlink" title="1) 服务发现"></a>1) 服务发现</h4><p>consul客户端注册一个服务，如api或mysql，其他客户端可以使用consul发现服务提供者。使用DNS或HTTP可以很简单的找到它们依赖的服务。</p>
<h4 id="2）健康检查"><a href="#2）健康检查" class="headerlink" title="2）健康检查"></a>2）健康检查</h4><p>consul客户端提供任意数量的健康检查，这些运行检查可以与服务相关联(如服务健康检查)，也可以与本地节点相关联(如内存利用率低于90%)。使用方可以使用此信息来监控集群运行状态，服务发现组件使用此信息将流量路由远离不健康的主机。</p>
<h4 id="3-KV存储"><a href="#3-KV存储" class="headerlink" title="3) KV存储"></a>3) KV存储</h4><p>应用程序可以将consul的分层<strong>键/值存储</strong>用于任何用途，包括动态配置，功能标记，协调、领导者选举等。简单的HTTP API 使其易于使用。</p>
<h4 id="4）安全的服务通信"><a href="#4）安全的服务通信" class="headerlink" title="4）安全的服务通信"></a>4）安全的服务通信</h4><p>consul可以为服务生成和分发TLS证书，以建立互相的TLS连接。可以使用<strong>intentions</strong>来定义允许哪些服务进行通信。可以实时更改的<strong>intentions</strong>轻松管理服务分段，而不是使用复杂的网络拓扑和静态防火墙规则。</p>
<h4 id="5）多数据中心"><a href="#5）多数据中心" class="headerlink" title="5）多数据中心"></a>5）多数据中心</h4><p>consul支持开箱即用的多个数据中心，这意味着consul用户不必担心构建额外的抽象层以扩展到多个区域。</p>
<h3 id="3-consul的常用术语"><a href="#3-consul的常用术语" class="headerlink" title="3. consul的常用术语"></a>3. consul的常用术语</h3><h4 id="1）Agent"><a href="#1）Agent" class="headerlink" title="1）Agent"></a>1）Agent</h4><p>代理是consul集群的每个成员的长时间运行的守护进程，它是通过运行<code>consul agent</code>来启动的，代理能够以客户端或服务器模式运行，由于所有节点都必须运行代理，因此将节点成为客户端或服务器更简单，但代理的其他实例也是如此。所有代理都可以运行DNS或HTTP接口，并负责<strong>运行检查并保持服务同步</strong></p>
<h4 id="2）Client"><a href="#2）Client" class="headerlink" title="2）Client"></a>2）Client</h4><p>客户端是将所有RPC请求转发到服务器的代理，客户端是无状态的，客户端执行的唯一后台活动是参与局域gossip，这个活动的资源开销非常小，并且仅消耗少量的网络带宽。</p>
<h4 id="3-Server"><a href="#3-Server" class="headerlink" title="3) Server"></a>3) Server</h4><p>服务器是具有扩展责任的代理，包括参与Raft仲裁、维护集群状态，响应RPC查询，与其他数据中心交换广域gossip以及将查询转发给领导者或远程数据中心。</p>
<h4 id="4）Datacenter"><a href="#4）Datacenter" class="headerlink" title="4）Datacenter"></a>4）Datacenter</h4><p>虽然数据中心的定义似乎很明显，但必须考虑细微的细节。例如，在EC2中，多个可用区域是否被视为包含单个数据中心？我们将数据中心定义为专用、低延迟和高带宽的网络环境。这排除了通过公共互联网通信，但出于我们的目的，单个EC2区域内的多个可用区域将被视为单个数据中心的一部分。</p>
<h4 id="5）Consensus"><a href="#5）Consensus" class="headerlink" title="5）Consensus"></a>5）Consensus</h4><p>我们使用共识来表示对当选领导者的协议以及对事务顺序的协议，由于这些事务应用于有限状态机，因此我们对共识的定义意味着复制状态机的一致性。</p>
<h4 id="6）Gossip"><a href="#6）Gossip" class="headerlink" title="6）Gossip"></a>6）Gossip</h4><p>Consul建立在Serf之上，它提供了一个完整的gossip协议，可用于多种用途，Serf提供<strong>会员资格、故障检测和事件广播</strong>，gossip涉及随机节点间的通信，主要是通过UDP</p>
<h4 id="7）LAN-Gossip"><a href="#7）LAN-Gossip" class="headerlink" title="7）LAN Gossip"></a>7）LAN Gossip</h4><p>包含全部位于同一局域网或数据中心的节点</p>
<h4 id="8）WAN-Gossip"><a href="#8）WAN-Gossip" class="headerlink" title="8）WAN Gossip"></a>8）WAN Gossip</h4><p>服务器位于不同数据中心，通常通过广域网进行通信。</p>
<h4 id="9）RPC"><a href="#9）RPC" class="headerlink" title="9）RPC"></a>9）RPC</h4><p>远程过程调用，这是一种请求/响应机制，允许客户端想服务端发出请求。</p>
<h3 id="4-consul架构"><a href="#4-consul架构" class="headerlink" title="4. consul架构"></a>4. consul架构</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-22/94003551.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.consul.io/docs/internals/architecture.html" target="_blank" rel="external">Consul Guides</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初识zookeeper]]></title>
      <url>http://jianwl.com/2018/07/05/%E5%88%9D%E8%AF%86zookeeper/</url>
      <content type="html"><![CDATA[<p>Zookeeper是一个开源的分布式协调服务，由雅虎创建，是google chubby的开源实现。zookeeper的设计目标是将哪些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>
<h3 id="Zookeeper是什么"><a href="#Zookeeper是什么" class="headerlink" title="Zookeeper是什么"></a>Zookeeper是什么</h3><p>zookeeper是典型的分布式数据一致性的解决方案，分布式应用程序可以基于它实现如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master选举，分布式锁和分布式队列等功能。zookeeper可以保证如下分布式一致性特性：</p>
<p><strong>顺序一致性</strong></p>
<p>从同一个客户端发起的事务请求，最终将会严格地按照其发起顺序被应用到Zookeeper中去。</p>
<p><strong>原子性</strong></p>
<p>所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群所有机器都成功应用了某个事务，要么都没有应用，一定不会出现集群中部分机器应用了事务，另外一部分没有应用事务。</p>
<p><strong>单一视图</strong></p>
<p>无论客户端连接的是哪个zookeeper服务器，其看到的服务端数据模型都是一致的</p>
<p><strong>可靠性</strong></p>
<p>一旦服务端成功地应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会被一直保留下来，除非有另一个事务又对其进行了变更。</p>
<p><strong>实时性</strong></p>
<p>通常人们看到实时性的第一反应是，一旦一个事务被成功应用，那么客户端能够立即从服务端读取到这个事务变更后的最新数据状态。这里需要注意的是，zookeeper仅仅保证在一定时间内，客户端最终一定能够从服务器上读取到最新的数据状态。</p>
<h3 id="Zookeeper的设计目标"><a href="#Zookeeper的设计目标" class="headerlink" title="Zookeeper的设计目标"></a>Zookeeper的设计目标</h3><p>zookeeper致力于提供一个高性能、高可用、且具有严格的顺序访问控制能力(主要是写操作的严格顺序性)的分布式协调服务。高性能使得zookeeper能够应用于那些对系统吞吐有明确要求的大型分布式系统中，高可用使得分布式的单点问题得到了很好的解决，而严格的顺序访问控制使得客户端能够基于Zookeeper实现一些复杂的同步原语。下面看下zk的四个设计目标。</p>
<h4 id="目标1：简单的数据模型"><a href="#目标1：简单的数据模型" class="headerlink" title="目标1：简单的数据模型"></a>目标1：简单的数据模型</h4><p>zookeeper使得分布式程序能够通过一个共享的、树形结构的名字空间来进行相互协调。这里所说的树形结构的名字空间，是指zookeeper服务器内存中的一个数据模型，是由一些列被称为znode的数据节点组成，总的来说，其数据模型类似于一个文件系统，而znode之间的层级关系，就想文件系统的目录结构一样。不过和传统的磁盘文件系统不同的是，zookeeper将全量数据存储在内存中，以此实现提高服务器吞吐，减少延迟的目的。</p>
<h4 id="目标2：可以构建集群"><a href="#目标2：可以构建集群" class="headerlink" title="目标2：可以构建集群"></a>目标2：可以构建集群</h4><p>一个zookeeper集群通常由一组机器组成，一般3 ~ 5台机器组成一个可用的zookeeper集群了，组成zookeeper集群的每台机器都会在内存中维护当前的服务器状态，并且每台机器之间都互相保持通信。值得一提的是，只要集群中存在超过一半的机器能够正常工作，那么整个集群就能够正常对外服务。</p>
<p>zookeeper的客户端程序会选择和集群中任意一台机器共同来床架一个TCP连接，而一旦客户端和某台zookeeper服务器之间的连接断开之后，客户端会自动连接到集群中的其他机器。</p>
<h4 id="目标3：顺序访问"><a href="#目标3：顺序访问" class="headerlink" title="目标3：顺序访问"></a>目标3：顺序访问</h4><p>对于来自客户端的每个更新请求，zookeeper都会分配一个全局唯一的递增编号，这个编号反映了所有事务操作的先后顺序，应用程序可以使用zookeeper的这个特性来实现更高层次的同步原语。</p>
<h4 id="目标4：高性能"><a href="#目标4：高性能" class="headerlink" title="目标4：高性能"></a>目标4：高性能</h4><p>由于zookeeper将全量数据存储在内存中，并直接服务于客户端的所有非事务请求，因此它尤其适用于以读操作为主的应用场景。</p>
<h3 id="zookeeper的基本概念"><a href="#zookeeper的基本概念" class="headerlink" title="zookeeper的基本概念"></a>zookeeper的基本概念</h3><h4 id="1-集群角色"><a href="#1-集群角色" class="headerlink" title="1) 集群角色"></a>1) 集群角色</h4><p>通常在分布式系统中，构成一个集群的每一台机器都有自己的角色，最经典的集群模式就是Master/Slave模式(主备模式)，在这种模式中，我们把能够处理所有写操作的机器成为master机器，把所有通过异步复制方式获取最新数据，并提供读服务的机器成为Slave.</p>
<p>而在zookeeper中，这些概念被颠覆了，它没有沿用传统的Master/Slave概念，而是引入了Leader、Follower和Observe三种角色。Zookeeper集群中的所有机器通过一个Leader选举过程来选定一台机器被称为Leader的机器，Leader服务器为客户端提供读和写服务。除Leader外，其他机器包括Follower和Observer。Follower和Observer都能够提供读服务，唯一的区别在于，Observer机器不参与Leader选举过程，也不参加写操作的过半写成功策略，因此Observer可以在不影响写性能的情况下提升集群的读性能。</p>
<h4 id="2-会话-Session"><a href="#2-会话-Session" class="headerlink" title="2) 会话(Session)"></a>2) 会话(Session)</h4><p>session是指客户端会话，在讲解会话之前，我们首先来了解以下客户端连接。在zookeeper中，一个客户端连接是指客户端和服务器之间的一个TCP长连接。zookeeper对外的服务端口默认是2181，客户端启动的时候，首先会与服务器建立一个TCP连接，从第一次连接建立开始，客户端会话的生命周期也开始了，通过这个链接，客户端能够通过心跳检测与服务器保持有效的会话，也能够向zookeeper服务器发送请求并接受响应，同时还能通过该连接接受来自服务器的Watch事件通知。Session的sessionTimeout值用来设置一个客户端会话的超时时间，当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话仍然有效。</p>
<h4 id="3-数据节点-Znode"><a href="#3-数据节点-Znode" class="headerlink" title="3) 数据节点(Znode)"></a>3) 数据节点(Znode)</h4><p>在谈到分布式的时候，我们通常说的节点是指组成集群的每一台机器。然而，在zookeeper中，节点分为两类，第一类同样是指构成集群的机器，我们称之为机器节点；第二类则是指数据模型中的数据单元，我们称之为数据节点 - ZNode。zookeeper将所有数据存储在内存中，数据模型是一棵树(znode tree)，由斜杠「/」进行分割路径，就是一个znode，例如「/foo/path1」，每个znode上都会保存自己的数据内容同事还会保存一些列属性信息。</p>
<p>在zookeeper中，znode可以分为持久节点和临时节点两类。所谓持久节点是指一旦这个znode被创建了，除非主动进行znode的移除操作，否则这个znode将一直保存在zookeeper上。而临时节点就不一样了，它的声明周期和客户端会话绑定，一旦客户端会话失效，那么这个客户端创建的所有临时节点都会被移除。另外，zookeeper还允许用户为每个节点添加一个特殊的属性：SEQUENTIAL。一旦节点被标记上这个属性，那么在这个节点被创建的时候，zookeeper会自动在其节点名后面追加上一个整型数字，这个整型数字是一个由父节点维护的自增数字。</p>
<h4 id="4）版本"><a href="#4）版本" class="headerlink" title="4）版本"></a>4）版本</h4><p>在前面我们已经提到，zookeeper的每个znode都会存储数据，对应于每个znode，zookeeper都会维护一个叫做stat的数据结构，stat中记录了这个znode的三个数据版本，分别是version(当前znode的版本)、cversion(当前znode子节点的版本)和aversion(当前znode的acl版本)</p>
<h4 id="5-watcher"><a href="#5-watcher" class="headerlink" title="5) watcher"></a>5) watcher</h4><p>watcher(事件监听器)，是zookeeper中的一个很重要的特性。zookeeper允许用户在指定节点上注册一些watcher，并且在一些特定事件触发的时候，zookeeper服务器会将事件通知到感兴趣的客户端上去，该机制是zookeeper实现分布式协调服务的重要特性。</p>
<h4 id="6-ACL"><a href="#6-ACL" class="headerlink" title="6) ACL"></a>6) ACL</h4><p>Zookeeper采用ACL(Access Control Lists)策略来进行权限控制，类似UNIX文件系统的权限控制。zookeeper定义了如下5中权限。</p>
<ul>
<li>create: 创建子节点的权限</li>
<li>read: 获取节点数据和子节点列表的权限</li>
<li>write: 更新节点数据的权限</li>
<li>delete: 删除子节点的权限</li>
<li>admin: 设置节点acl的权限</li>
</ul>
<p>其中尤其需要注意的是，create和delete这两种权限都是针对子节点的权限控制。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用vagrant搭建consul集群]]></title>
      <url>http://jianwl.com/2018/07/04/%E4%BD%BF%E7%94%A8vagrant%E6%90%AD%E5%BB%BAconsul%E9%9B%86%E7%BE%A4/</url>
      <content type="html"><![CDATA[<h3 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1. 软件下载"></a>1. 软件下载</h3><ol>
<li><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">vagrant下载</a></li>
<li><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">virtualbox下载</a></li>
</ol>
<p>Vagrant是Hashi Corp公司的产品，用于创建和部署虚拟化开发环境，支持创建的操作系统。在部署虚拟开发环境需要用到virtualbox虚拟机软件，所以以上两个软件需要提前下载好。</p>
<h3 id="2-用vagrant创建虚拟机"><a href="#2-用vagrant创建虚拟机" class="headerlink" title="2. 用vagrant创建虚拟机"></a>2. 用vagrant创建虚拟机</h3><p>在安装好，virtualBox和vagrant的前提下，我们创建文件夹consul_cluster,在consul_cluster文件夹下创建一个文件<code>VagrantFile</code>,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># -*- mode: ruby -*-</div><div class="line"># vi: set ft=ruby :</div><div class="line"></div><div class="line">$script = &lt;&lt;SCRIPT</div><div class="line">echo &quot;Installing dependencies ...&quot;</div><div class="line"># 使用阿里云镜像</div><div class="line">sudo sed -i &apos;s/archive.ubuntu.com/mirrors.aliyun.com/g&apos; /etc/apt/sources.list</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install -y unzip curl jq</div><div class="line">SCRIPT</div><div class="line"></div><div class="line"># Specify a custom Vagrant box for the demo</div><div class="line">DEMO_BOX_NAME = &quot;ubuntu/xenial64&quot;</div><div class="line"></div><div class="line"># Vagrantfile API/syntax version.</div><div class="line"># NB: Don&apos;t touch unless you know what you&apos;re doing!</div><div class="line">VAGRANTFILE_API_VERSION = &quot;2&quot;</div><div class="line"></div><div class="line">Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|</div><div class="line">  config.vm.box = DEMO_BOX_NAME</div><div class="line"></div><div class="line">  config.vm.provision &quot;shell&quot;,</div><div class="line">                          inline: $script</div><div class="line"></div><div class="line">  config.vm.define &quot;n1&quot; do |n1|</div><div class="line">      n1.vm.hostname = &quot;n1&quot;</div><div class="line">      n1.vm.network &quot;private_network&quot;, ip: &quot;172.20.20.10&quot;</div><div class="line">  end</div><div class="line"></div><div class="line">  config.vm.define &quot;n2&quot; do |n2|</div><div class="line">      n2.vm.hostname = &quot;n2&quot;</div><div class="line">      n2.vm.network &quot;private_network&quot;, ip: &quot;172.20.20.11&quot;</div><div class="line">  end</div><div class="line"></div><div class="line">  config.vm.define &quot;n3&quot; do |n3|</div><div class="line">      n3.vm.hostname = &quot;n3&quot;</div><div class="line">      n3.vm.network &quot;private_network&quot;, ip: &quot;172.20.20.12&quot;</div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<p>这里我们创建了三个虚拟机，hostname为 n1，n2，n3；ip分别为 172.20.20.10，172.20.20.11，172.20.20.10，使用镜像 ubuntu/xenial64，并且将镜像更新为了阿里云，安装了一些必须的软件。</p>
<p>编辑好文件，在consul_cluster文件夹的路径下执行<code>vagrant up</code>,会下载ubuntu操作系统，并启动三台虚拟机，这个过程耗时比较长，我用了5个小时。</p>
<h3 id="3-登录3台虚拟机"><a href="#3-登录3台虚拟机" class="headerlink" title="3. 登录3台虚拟机"></a>3. 登录3台虚拟机</h3><p>在使用<code>vagrant up</code>命令初始化完成之后，在consul_cluster文件夹路径下，使用以下命令分别登录n1、n2、n3虚拟机:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 登录n1虚拟机</div><div class="line">vagrant ssh n1</div><div class="line"></div><div class="line"># 登录n2虚拟机</div><div class="line">vagrant ssh n2</div><div class="line"></div><div class="line"># 登录n3虚拟机</div><div class="line">vagrant ssh n3</div></pre></td></tr></table></figure>
<h3 id="4-搭建consul环境-三台虚拟机都需要执行一遍以下操作"><a href="#4-搭建consul环境-三台虚拟机都需要执行一遍以下操作" class="headerlink" title="4. 搭建consul环境(三台虚拟机都需要执行一遍以下操作)"></a>4. 搭建consul环境(三台虚拟机都需要执行一遍以下操作)</h3><h4 id="1-下载consul"><a href="#1-下载consul" class="headerlink" title="1. 下载consul"></a>1. 下载consul</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 下载consul</div><div class="line">wget https://releases.hashicorp.com/consul/1.2.0/consul_1.2.0_linux_amd64.zip</div><div class="line"></div><div class="line"># 解压</div><div class="line">unzip consul_1.2.0_linux_amd64.zip</div></pre></td></tr></table></figure>
<h4 id="2-创建以下两个文件夹"><a href="#2-创建以下两个文件夹" class="headerlink" title="2. 创建以下两个文件夹"></a>2. 创建以下两个文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /tmp/consul</div><div class="line"></div><div class="line">sudo mkdir /etc/consul.d</div></pre></td></tr></table></figure>
<h3 id="5-consul集群搭建"><a href="#5-consul集群搭建" class="headerlink" title="5. consul集群搭建"></a>5. consul集群搭建</h3><h4 id="1-虚拟机n1，启动consul服务"><a href="#1-虚拟机n1，启动consul服务" class="headerlink" title="1. 虚拟机n1，启动consul服务;"></a>1. 虚拟机n1，启动consul服务;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -server -bootstrap-expect=1 -data-dir=/tmp/consul -node=agent-one -bind=当前虚拟机IP -enable-script-checks=true -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<h4 id="2-虚拟机n2，启动consul服务"><a href="#2-虚拟机n2，启动consul服务" class="headerlink" title="2. 虚拟机n2，启动consul服务;"></a>2. 虚拟机n2，启动consul服务;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -data-dir=/tmp/consul -node=agent-two -bind=当前虚拟机IP -enable-script-checks=true -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<h4 id="3-在n1虚拟机的consul服务中，添加n2节点。"><a href="#3-在n1虚拟机的consul服务中，添加n2节点。" class="headerlink" title="3. 在n1虚拟机的consul服务中，添加n2节点。"></a>3. 在n1虚拟机的consul服务中，添加n2节点。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul join 虚拟机n2的IP</div></pre></td></tr></table></figure>
<h4 id="4-虚拟机n3，启动consul服务"><a href="#4-虚拟机n3，启动consul服务" class="headerlink" title="4. 虚拟机n3，启动consul服务;"></a>4. 虚拟机n3，启动consul服务;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -data-dir=/tmp/consul -node=agent-three -bind=当前虚拟机IP -enable-script-checks=true -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<h4 id="5-在n1虚拟机的consul服务中，添加n3节点。"><a href="#5-在n1虚拟机的consul服务中，添加n3节点。" class="headerlink" title="5. 在n1虚拟机的consul服务中，添加n3节点。"></a>5. 在n1虚拟机的consul服务中，添加n3节点。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul join 虚拟机n3的IP</div></pre></td></tr></table></figure>
<h3 id="6-consul集群搭建实战"><a href="#6-consul集群搭建实战" class="headerlink" title="6. consul集群搭建实战"></a>6. consul集群搭建实战</h3><h3 id="1-登录n1虚拟机"><a href="#1-登录n1虚拟机" class="headerlink" title="1. 登录n1虚拟机"></a>1. 登录n1虚拟机</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/42241770.jpg" alt=""></p>
<h3 id="2-启动consul服务"><a href="#2-启动consul服务" class="headerlink" title="2. 启动consul服务"></a>2. 启动consul服务</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/50184269.jpg" alt=""></p>
<h3 id="3-查看n1集群状态"><a href="#3-查看n1集群状态" class="headerlink" title="3. 查看n1集群状态"></a>3. 查看n1集群状态</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/36062811.jpg" alt=""></p>
<h3 id="4-登录n2虚拟机"><a href="#4-登录n2虚拟机" class="headerlink" title="4. 登录n2虚拟机"></a>4. 登录n2虚拟机</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/68487932.jpg" alt=""></p>
<h3 id="5-启动consul服务"><a href="#5-启动consul服务" class="headerlink" title="5. 启动consul服务"></a>5. 启动consul服务</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/89679832.jpg" alt=""></p>
<h3 id="6-查看n2集群状态"><a href="#6-查看n2集群状态" class="headerlink" title="6. 查看n2集群状态"></a>6. 查看n2集群状态</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/70512094.jpg" alt=""></p>
<p>通过步骤3和步骤6的对比，我们发现，n1和n2两个节点并没有直接的关联。</p>
<h3 id="7-在n1节点中，加入节点2，节点间实现互相通信"><a href="#7-在n1节点中，加入节点2，节点间实现互相通信" class="headerlink" title="7. 在n1节点中，加入节点2，节点间实现互相通信"></a>7. 在n1节点中，加入节点2，节点间实现互相通信</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/86438059.jpg" alt=""></p>
<h3 id="8-查看集群状态"><a href="#8-查看集群状态" class="headerlink" title="8. 查看集群状态"></a>8. 查看集群状态</h3><p>n1节点查看集群状态</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/28819181.jpg" alt=""></p>
<p>n2节点查看集群状态</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/9956699.jpg" alt=""></p>
<p>由此看出n1节点和n2节点已经互相通信。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.consul.io/intro/getting-started/join.html" target="_blank" rel="external">Consul Cluster官方文档</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Go语法概述]]></title>
      <url>http://jianwl.com/2018/07/01/Go%E8%AF%AD%E6%B3%95%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为之前已经有编程基础了，所以在接触新语言时，会预先概览语言的语法，而后在针对每个语法深入学习。本节会描述Go常用的语法规则。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-编程第一个Go程序"><a href="#1-编程第一个Go程序" class="headerlink" title="1. 编程第一个Go程序"></a>1. 编程第一个Go程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">// 输出Hello world!</div><div class="line">func main() &#123;</div><div class="line">	fmt.Println(&quot;hello world!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-声明变量"><a href="#2-声明变量" class="headerlink" title="2. 声明变量"></a>2. 声明变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// 方式1</div><div class="line">func defineVar1()&#123;</div><div class="line">	var x int32</div><div class="line">	var s = &quot;hello world&quot;</div><div class="line">	println(x,s)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 方式2</div><div class="line">func defineVar2()&#123;</div><div class="line">	x := 100</div><div class="line">	println(x)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义变量</div><div class="line">func main() &#123;</div><div class="line">	defineVar1()</div><div class="line">	defineVar2()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-1-表达式if"><a href="#3-1-表达式if" class="headerlink" title="3.1 表达式if"></a>3.1 表达式if</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// 表达式</div><div class="line">func main() &#123;</div><div class="line">	x := 100</div><div class="line"></div><div class="line">	if x &gt; 0 &#123;</div><div class="line">		println(&quot;x&quot;)</div><div class="line">	&#125;else if x &lt; 0 &#123;</div><div class="line">		println(&quot;-x&quot;)</div><div class="line">	&#125;else&#123;</div><div class="line">		println(&quot;0&quot;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-2-表达式switch"><a href="#3-2-表达式switch" class="headerlink" title="3.2 表达式switch"></a>3.2 表达式switch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// switch</div><div class="line">func main() &#123;</div><div class="line">	x := 100</div><div class="line"></div><div class="line">	switch &#123;</div><div class="line">	case x &gt; 0:</div><div class="line">		println(&quot;x&quot;)</div><div class="line">	case x &lt; 0:</div><div class="line">		println(&quot;-x&quot;)</div><div class="line">	default:</div><div class="line">		println(&quot;0&quot;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-表达式for"><a href="#3-3-表达式for" class="headerlink" title="3.3 表达式for"></a>3.3 表达式for</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">func for01()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for01 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line">	for i:=0; i&lt;5;i++&#123;</div><div class="line">		println(i)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for i := 4; i&gt;=0;i--&#123;</div><div class="line">		println(i)</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for01 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func for02()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for02 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line">	x := 0</div><div class="line"></div><div class="line">	for x &lt; 5&#123;</div><div class="line">		println(x)</div><div class="line">		x++</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for02 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func for03()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for03 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line">	x := 4</div><div class="line"></div><div class="line">	for &#123;</div><div class="line">		println(x)</div><div class="line">		x--</div><div class="line"></div><div class="line">		if x&lt;0&#123;</div><div class="line">			break</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for03 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func for04()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for04 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line"></div><div class="line">	x := []int&#123;100,101,102&#125;</div><div class="line"></div><div class="line">	for i,n :=range x&#123;</div><div class="line">		println(i,&quot;:&quot;,n)</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for04 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 多种循环</div><div class="line">func main() &#123;</div><div class="line">	for01()</div><div class="line">	for02()</div><div class="line">	for03()</div><div class="line">	for04()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;errors&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">// 函数: 可定义多个返回值</div><div class="line">func div(a,b int) (int,error)&#123;</div><div class="line">	if b==0&#123;</div><div class="line">		return 0,errors.New(&quot;division by zero&quot;)</div><div class="line">	&#125;</div><div class="line">	return a/b, nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 函数是第一类型，可作为参数或返回值</div><div class="line">func print01(x int) func()&#123;</div><div class="line">	return func()&#123;</div><div class="line">		println(x)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// defer定义延迟调用，无论函数是否出错，它都确保结束前被调用</div><div class="line">func defer01(a,b int)&#123;</div><div class="line">	defer println(&quot;dispace ...&quot;)</div><div class="line"></div><div class="line">	println(a/b)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	a,b := 10,2</div><div class="line">	c,err := div(a,b)</div><div class="line"></div><div class="line">	fmt.Println(c,err)</div><div class="line"></div><div class="line">	x := 100</div><div class="line"></div><div class="line">	f := print01(x)</div><div class="line">	f()</div><div class="line"></div><div class="line">	defer01(10,2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-切片"><a href="#5-切片" class="headerlink" title="5. 切片"></a>5. 切片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">// 切片(slice)可实现类似动态数组的功能</div><div class="line">func main() &#123;</div><div class="line">	x := make([]int, 0,5) // 创建容量为5的切片</div><div class="line"></div><div class="line">	for i:=0; i&lt;8;i++&#123;</div><div class="line">		x = append(x,i) // 追加数据，当容量超出，自动分配更大的存储空间</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-字典"><a href="#6-字典" class="headerlink" title="6. 字典"></a>6. 字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">// 将字典(map)类型内置，可直接从运行时层面获得性能优化</div><div class="line">func main() &#123;</div><div class="line">	m := make(map[string]int) // 创建字典对象</div><div class="line"></div><div class="line">	m[&quot;a&quot;] = 1 // 添加</div><div class="line"></div><div class="line">	x,ok := m[&quot;b&quot;] // 可知道key/value 是否存在</div><div class="line"></div><div class="line">	fmt.Println(x,ok)</div><div class="line">	delete(m,&quot;a&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-结构体"><a href="#7-结构体" class="headerlink" title="7. 结构体"></a>7. 结构体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type user struct &#123; // 结构体</div><div class="line">	name string</div><div class="line">	age byte</div><div class="line">&#125;</div><div class="line"></div><div class="line">type manager struct &#123;</div><div class="line">	user // 匿名嵌入其他类型</div><div class="line">	title string</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结构体：可匿名嵌入其他类型</div><div class="line">func main() &#123;</div><div class="line">	var m manager</div><div class="line"></div><div class="line">	m.name = &quot;Tom&quot;</div><div class="line">	m.age = 29</div><div class="line">	m.title = &quot;cto&quot;</div><div class="line"></div><div class="line">	fmt.Println(m)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-方法"><a href="#8-方法" class="headerlink" title="8. 方法"></a>8. 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">type X int</div><div class="line"></div><div class="line">func (x *X) inc()&#123; // 名称前的参数称作receiver，作用类似python self</div><div class="line">	*x++</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 方法，可以为当前包内的任意类型定义方法</div><div class="line">func main() &#123;</div><div class="line">	var x X</div><div class="line">	x.inc()</div><div class="line">	println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-接口"><a href="#9-接口" class="headerlink" title="9. 接口"></a>9. 接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type role struct &#123;</div><div class="line">	name string</div><div class="line">	parentId int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (r role) Print()&#123;</div><div class="line">	fmt.Printf(&quot;%+v\n&quot;,r)</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Printer interface &#123;</div><div class="line">	Print()</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 接口采用了duck type方式，也就是说无须在实现类型上添加显式声明。</div><div class="line">// 另有空接口类型interface&#123;&#125;,用途类似OOP里的system.Object,可接受任意类型对象</div><div class="line">func main() &#123;</div><div class="line">	var r role</div><div class="line">	r.name = &quot;admin&quot;</div><div class="line">	r.parentId = 29</div><div class="line"></div><div class="line">	var p Printer = r</div><div class="line">	p.Print()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="10-并发"><a href="#10-并发" class="headerlink" title="10. 并发"></a>10. 并发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;time&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func task(id int)&#123;</div><div class="line">	for i:=0; i&lt;5;i++&#123;</div><div class="line">		fmt.Printf(&quot;%d:%d\n&quot;,id,i)</div><div class="line">		time.Sleep(time.Second)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 整体运行时完全并发设计，凡你能看到的，几乎都在以goroutine方式运行，这是一种比普通协程或线程更加高效的并发设计，能够</div><div class="line">// 轻松创建和运行成千上万的并发任务</div><div class="line">func main() &#123;</div><div class="line">	go task(1)  // 创建goroutine</div><div class="line">	go task(2)</div><div class="line"></div><div class="line">	time.Sleep(time.Second*6)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="11-通道-channel-与-goroutine搭配"><a href="#11-通道-channel-与-goroutine搭配" class="headerlink" title="11. 通道(channel) 与 goroutine搭配"></a>11. 通道(channel) 与 goroutine搭配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// 消费者</div><div class="line">func consumer(data chan int, done chan bool)&#123;</div><div class="line">	for x:=range data&#123;</div><div class="line">		println(&quot;recv:&quot;,x)  // 接受数据，直到通道被关闭</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	done &lt;- true // 通知main，消费结束</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 生产者</div><div class="line">func producer(data chan int)&#123;</div><div class="line">	for i :=0; i&lt;4; i++&#123;</div><div class="line">		data &lt;- i         // 发送数据</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	close(data) // 生产结束，关闭通道</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通道(channel) 与 goroutine搭配，实现用通信替代内存共享的CSP模型</div><div class="line">func main() &#123;</div><div class="line">	done := make(chan bool) // 用于接收消费结束信息</div><div class="line">	data := make(chan int)  // 数据管道</div><div class="line"></div><div class="line">	go consumer(data, done) // 启动消费者</div><div class="line">	go producer(data) // 启动生产者</div><div class="line"></div><div class="line">	&lt;-done // 阻塞，直到消费者发回结束信息</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git的各种撤销技巧]]></title>
      <url>http://jianwl.com/2018/06/20/Git%E7%9A%84%E5%90%84%E7%A7%8D%E6%92%A4%E9%94%80%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/" target="_blank" rel="external">How to undo anything with Git</a></li>
<li><a href="https://tonydeng.github.io/2015/07/08/how-to-undo-almost-anything-with-git/" target="_blank" rel="external">Git的各种Undo技巧</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring容器的基本实现]]></title>
      <url>http://jianwl.com/2018/06/04/Spring%E5%AE%B9%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节从实战到理论学习Spring容器的实现。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-核心依赖"><a href="#1-核心依赖" class="headerlink" title="1) 核心依赖"></a>1) 核心依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</div><div class="line">	&lt;relativePath/&gt; </div><div class="line">&lt;/parent&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">	</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;5.0.6.RELEASE&lt;/version&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<h4 id="2）在容器中注册Bean-amp-获取Bean"><a href="#2）在容器中注册Bean-amp-获取Bean" class="headerlink" title="2）在容器中注册Bean &amp; 获取Bean"></a>2）在容器中注册Bean &amp; 获取Bean</h4><p>运行类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class MainBootstrap &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        BeanFactory bf = new XmlBeanFactory(new ClassPathResource(&quot;beanFactoryTest.xml&quot;));</div><div class="line">        MyTestBean bean = (MyTestBean) bf.getBean(&quot;myTestBean&quot;);</div><div class="line">        System.out.println(String.format(&quot;测试是否加载xml: %s&quot;,bean.getTestStr()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>beanFactoryTest.xml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">       xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</div><div class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">		http://www.springframework.org/schema/task</div><div class="line">        http://www.springframework.org/schema/task/spring-task-3.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</div><div class="line">&gt;</div><div class="line">    &lt;bean id=&quot;myTestBean&quot; class=&quot;com.frank.springlearning.domain.MyTestBean&quot;/&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>以上完成了，Bean的注册和使用；</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>未完待续…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring源码学习计划]]></title>
      <url>http://jianwl.com/2018/06/04/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接触Spring有3年了，Spring的两大特性IOC和AOP在工作中也是常用，但是如果有人问我，Spring是如何实现这两大特性的，我一定只能模棱两可的说出。或许这个时候就是你该沉下心来，好好学习它的原理实现了，知其所以然，学习其思想。学习Spring这是一个专题，刻意学习，才能有所收获。</p>
<h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><ol>
<li>容器的基本实现；</li>
<li>AOP的基本实现；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java内存模型之happens-before]]></title>
      <url>http://jianwl.com/2018/05/20/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8Bhappens-before/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java语言中有一个“先行发生”的原则，它是判断数据是否存在竞争、线程是否安全的主要依据。下面是Java内存模型一些“天然”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来的话，它们就没有顺序性保障，虚拟机可以对它们随意地进行重排序。</p>
<h3 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a>happens-before规则</h3><h4 id="1-程序次序规则"><a href="#1-程序次序规则" class="headerlink" title="1) 程序次序规则"></a>1) 程序次序规则</h4><p>在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</p>
<h4 id="2）管程锁定规则"><a href="#2）管程锁定规则" class="headerlink" title="2）管程锁定规则"></a>2）管程锁定规则</h4><p>一个unlock操作先行发生于后面的对同一个锁的lock操作。这里必须强调是同一个锁，而“后面”同样是指时间上的先后顺序。</p>
<h4 id="3）volatile变量规则"><a href="#3）volatile变量规则" class="headerlink" title="3）volatile变量规则"></a>3）volatile变量规则</h4><p>对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后顺序。</p>
<h4 id="4-线程启动规则"><a href="#4-线程启动规则" class="headerlink" title="4) 线程启动规则"></a>4) 线程启动规则</h4><p>Thread对象的start()方法先行发生于此线程的每一个动作。</p>
<h4 id="5）线程终止规则"><a href="#5）线程终止规则" class="headerlink" title="5）线程终止规则"></a>5）线程终止规则</h4><p>线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行了。</p>
<h4 id="6）线程中断规则"><a href="#6）线程中断规则" class="headerlink" title="6）线程中断规则"></a>6）线程中断规则</h4><p>对于线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断时间的发生，可以通过Thread.interrupted方法检测到是否有中断发生。</p>
<h4 id="7）对象终结规则"><a href="#7）对象终结规则" class="headerlink" title="7）对象终结规则"></a>7）对象终结规则</h4><p>一个对象的初始化完成(构造函数执行结束)先行发生于它的finilize()方法的开始。</p>
<h4 id="8）传递性"><a href="#8）传递性" class="headerlink" title="8）传递性"></a>8）传递性</h4><p>如果操作A先行发生于操作B，操作B先行发生于操作C，那么就可以得出操作A先行发生于操作C。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解Java虚拟机 - P376</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java内存模型]]></title>
      <url>http://jianwl.com/2018/05/20/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="Java内存模型有什么用？"><a href="#Java内存模型有什么用？" class="headerlink" title="Java内存模型有什么用？"></a>Java内存模型有什么用？</h3><p>JVM规范定义Java内存模型主要是为了屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各个平台下都能达到一致的内存访问效果。</p>
<p>在此之前，主流程序语言如<code>C/C++</code>直接使用物理硬件和操作系统的内存模型，因此，会由于不同内存模型的差异，有可能导致在平台A能运行，平台B却不能运行的情况。</p>
<h3 id="什么是内存模型"><a href="#什么是内存模型" class="headerlink" title="什么是内存模型"></a>什么是内存模型</h3><p>在多CPU的系统中，每个CPU都有多级缓存，一般分为L1、L2、L3缓存，因为这些缓存的存在，提供了数据的访问性能，也减轻了数据总线上数据传输的压力，同时也带来了很多新的挑战，比如两个CPU同时去操作同一个内存地址，会发生什么？在什么条件下，它们可以看到相同的结果？这些都是需要解决的。</p>
<p>所以在CPU的层面，内存模型定义了一个充分必要条件，保证其他CPU的写入动作对该CPU是可见的，而且该CPU的写入动作对其他CPU也是可见的，那这种可见性，应该如何实现呢？</p>
<p>有些处理器提供了强内存模型，所有CPU在任何时候都能看到内存中任意位置相同的值，这种完全是硬件提供的支持。</p>
<p>其他处理器，提供了弱内存模型，需要执行一些特殊指令(就是经常看到货听到的，Memory Barries内存屏障)，刷新CPU缓存的数据到内存中，保证这个写操作能够被其他CPU可见，或者将CPU缓存的数据设置为无效状态，保证其他CPU的写操作对本CPU可见。通过这些内存屏障的行为由底层实现，对于上层语言的程序员来说是透明的。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-20/9953164.jpg" alt=""></p>
<p>前面说到的内存屏障，除了实现CPU之外的数据可见性之外，还有一个重要的职责，可以禁止指令的重排序。</p>
<p>这里说的重排序可以发生在好几个地方：编译器、运行时、JIT等，比如编译器会觉得把一个变量的写操作放在最后更有效率，编译后，这个指令就是在最后了(前提是只要不改变程序的语义，编译器、执行器就可以这样自由的随意优化)，一旦编译器对某个变量的写操作进行优化(放到最后)，那么执行之前，另一个线程将不会看到这个执行结果。</p>
<p>当然了，写入动作可能被移到后面，那么也有可能挪到前面，这样的优化有什么影响呢？这种情况下，其他线程可能会在程序实现“发生”之前，看到这个写入动作(这里怎么理解，指令已经执行了，但是在代码层面还没执行到)，通过内存屏障的功能，我们可以禁止一些不必要、或者会带来负面影响的重排序优化，在内存模型的范围内，实现更高性能，同时保证程序的正确性。</p>
<p>下面看一个重排序的例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Class Reordering &#123;</div><div class="line">  int x = 0, y = 0;</div><div class="line">  public void writer() &#123;</div><div class="line">    x = 1;</div><div class="line">    y = 2;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void reader() &#123;</div><div class="line">    int r1 = y;</div><div class="line">    int r2 = x;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设这段代码有2个线程并发执行，线程A执行writer方法，线程B执行reader方法，线程B看到y的值为2，因为把y设置成2发生在变量x的写入之后，所以能断定线程B这时看到的x就是1吗？</p>
<p>在Java内存模型中，描述了在多线程代码中，哪些行为是正确的、合法的、以及多线程之间如何进行通信，代码中变量的读写行为如何反应到内存、CPU缓存的底层细节。</p>
<p>在Java中包含了几个关键字：volatile、final和synchronized，帮助程序员把代码中的并发需求描述给编译器，Java内存模型中定义了他们的行为，确保正确同步的Java代码在所有的处理器上都能正确执行。</p>
<h3 id="synchronization可以实现什么"><a href="#synchronization可以实现什么" class="headerlink" title="synchronization可以实现什么"></a>synchronization可以实现什么</h3><p>Synchronizeation有多中语义，其中最容易理解的是互斥，对于一个monitor对象，只能够被一个线程持有，意味着一旦有线程进入了同步代码块，那么其他线程就不能进入直到第一个进入的线程退出代码块。</p>
<p>但是更多的时候，使用synchronization并非单单互斥功能，synchronization保证了线程在同步块之前或者期间写入动作，对于后续进入该代码块的线程是可见的(又是可见性，不过这里需要注意的是对同一个monitor对象而言)。在一个线程退出同步块时，线程释放monitor对象，它的作用是把CPU缓存数据(本地缓存数据)刷新到主内存中，从而实现该线程的行为可以被其他线程看到。在其他线程进入到该代码块时，需要获得monitor对象，它的作用是使CPU缓存失效，从而使变量从主内存中重新加载，然后就可以看到之前线程对该变量的修改。</p>
<p>但从缓存的角度看，似乎这个问题只会影响多处理器的机器，对于单核来说没什么问题，但是别忘了，它还有一个语义是禁止指令的重排序，对于编译器来说，同步块中的代码不会移动到获取和释放monitor外面。</p>
<p>下面这种代码，千万别写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">synchronized(new Object()) 「×」</div></pre></td></tr></table></figure>
<p>编译器完全可以删除这个同步语义，因为编译器知道没有其他线程会在同一个monitor对象上同步。</p>
<p>所以，请注意：对于两个线程来说，在相同的monitor对象上同步是很重要的，以便正确的设置happens-before关系。</p>
<h3 id="final可以影响什么"><a href="#final可以影响什么" class="headerlink" title="final可以影响什么"></a>final可以影响什么</h3><p>如果一个类包含final字段，且在构造器中初始化，那么正确的构造一个对象后，final字段被设置后对于其他线程是可见的。</p>
<p>这里所说的正确构造对象，意思是在对象的构造过程中，不允许对该对象进行引用，不然的话，可能存在其他线程在对象还没构造完成时就对该对象进行访问，造成不必要的麻烦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">final int x;</div><div class="line">  int y;</div><div class="line">  static FinalFieldExample f;</div><div class="line">  public FinalFieldExample() &#123;</div><div class="line">    x = 3;</div><div class="line">    y = 4;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static void writer() &#123;</div><div class="line">    f = new FinalFieldExample();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static void reader() &#123;</div><div class="line">    if (f != null) &#123;</div><div class="line">      int i = f.x;</div><div class="line">      int j = f.y;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个例子描述了应该如何使用final字段，一个线程A执行reader方法，如果f已经在线程B初始化好了，那么可以确保线程A看到x值是3，因为final它是final修饰的，而不能确保看到y的值是4.</p>
<h3 id="volatile可以做什么"><a href="#volatile可以做什么" class="headerlink" title="volatile可以做什么"></a>volatile可以做什么</h3><p>volatile字段主要用于线程之间进行通信，volatile字段的每次读行为都能看到其他线程最后一次对该字段的写行为，通过它就可以避免拿到缓存中陈旧数据。它们必须保证在被写入之后，会被刷新到主内存中，这样就可以立即对其他线程可以见。类似的，在读取volatile字段之前，缓存必须是无效的，以保证每次拿到的都是主内存的值，都是最新的值。volatile的内存语义和synchronized获取和释放monitor的实现目的差不多。</p>
<p>对于重排序，volatile也有额外的限制。</p>
<p>下面看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class VolatileExample &#123;</div><div class="line">  int x = 0;</div><div class="line">  volatile boolean v = false;</div><div class="line">  public void writer() &#123;</div><div class="line">    x = 42;</div><div class="line">    v = true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void reader() &#123;</div><div class="line">    if (v == true) &#123;</div><div class="line">      //uses x - guaranteed to see 42.</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，假设一个线程A执行writer，另一个线程B执行reader，writer中对变量v的写入把x的写入也刷新到主内存中。reader方法会从主内存重新获取v的值，所以如果线程B看到v的值为true，就能保证拿到的x是42.（因为把x设置成42发生在把v设置成true之前，volatile禁止这两个写入行为的重排序）</p>
<p>如果变量v不是volatile，那么以上描述就不成立了，因为执行顺序可能是v=true，x=42,或者对于线程B来说，根本看不到v被设置为true。</p>
<h3 id="double-checked-locking的问题"><a href="#double-checked-locking的问题" class="headerlink" title="double-checked locking的问题"></a>double-checked locking的问题</h3><p>臭名昭著的双重检查(单例模式的一种)，是一种延时初始化的实现技巧，避免了同步的开销，因为在早起的JVM，同步操作性能很差，所以才出现了这样的小技巧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static Something instance = null;</div><div class="line"></div><div class="line">public Something getInstance() &#123;</div><div class="line">  if (instance == null) &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">      if (instance == null)</div><div class="line">        instance = new Something();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个技巧看起来很聪明，避免了同步的开销，但是有一个问题，它可能不起作用，为什么呢？因为实例的初始化和实例字段的写入可能被编译器重排序，这样可能读到一个未初始化完成的对象。</p>
<p>当然，这种bug可以通过使用volatile修饰instance字段进行修复，但是我觉得这种代码格式实在太丑陋了，如果真要延时初始化，不妨使用下面这种方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static class LazySomethingHolder &#123;</div><div class="line">  public static Something something = new Something();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Something getInstance() &#123;</div><div class="line">  return LazySomethingHolder.something;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于是静态字段的初始化，可以确保对访问该类的所有线程都是可见的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入分析CAS]]></title>
      <url>http://jianwl.com/2018/05/19/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90CAS/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>CAS, Compare And Swap，即比较并交换。Doug lea大神在同步组价中大量使用CAS技术鬼斧神工地实现了Java多线程的并发操作。整个AQS同步组件、Atomic原子类操作等等都是以CAS实现的，甚至ConcurrentHashMap在1.8版本中也调整为CAS + Synchronized。可以说CAS是整个JUC的基石。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-20/58954764.jpg" alt=""></p>
<h3 id="CAS分析"><a href="#CAS分析" class="headerlink" title="CAS分析"></a>CAS分析</h3><p>在CAS中有三个参数：内存值V、旧的预期值A，要更新的值B，当前仅当内存值V的值等于旧的预期值A时才会将内存值V的值修改为B，否则什么都不干。其伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(this.value == A)&#123;</div><div class="line">	this.value = B</div><div class="line">	return true;</div><div class="line">&#125;else&#123;</div><div class="line">	return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JUC的atomic类都是通过CAS来实现的，下面就以AtomicInteger为例阐述CAS的实现。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static final Unsafe unsafe = Unsafe.getUnsafe();</div><div class="line">private static final long valueOffset;</div><div class="line"></div><div class="line">static &#123;</div><div class="line">    try &#123;</div><div class="line">        valueOffset = unsafe.objectFieldOffset</div><div class="line">            (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</div><div class="line">    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private volatile int value;</div></pre></td></tr></table></figure>
<p>Unsafe是CAS的核心类，Java无法直接访问底层操作系统，而是通过本地(native)方法来访问。不过尽管如此，JVM还是开了一个后门，Unsafe，它提供了<strong>硬件级别</strong>的原子操作。</p>
<p><code>valueOffset</code>为变量值在内存中的偏移地址，unsafe就是通过偏移地址来得到数据的原值的。</p>
<p><code>value</code>当前值，使用volatile修饰，保证多线程环境下看见的是同一个。</p>
<p>我们就以AtomicInteger的addAndGet()方法来说明，先看源代码；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   public final int addAndGet(int delta) &#123;</div><div class="line">       return unsafe.getAndAddInt(this, valueOffset, delta) + delta;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   public final int getAndAddInt(Object var1, long var2, int var4) &#123;</div><div class="line">       int var5;</div><div class="line">       do &#123;</div><div class="line">           var5 = this.getIntVolatile(var1, var2);</div><div class="line">       &#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));</div><div class="line">       return var5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部调用unsafe的getAndAddInt方法，在getAndAddInt方法中主要看compareAndSwapInt方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</div></pre></td></tr></table></figure>
<p>该方法为本地方法，有4个参数，分表代表：对象、对象的地址、预期值、修改值，该方法的实现这里就不做详细介绍了，有兴趣的伙伴可以看看<code>openjdk</code>的源码。</p>
<p>CAS可以保证一次的读-写-改操作是原子操作，在单处理器上该操作容易实现，但是在多处理器上实现就有点复杂了。</p>
<p>CPU提供了两种方法来实现多处理器的原子操作：总线加锁或缓存加锁。</p>
<h4 id="总线加锁"><a href="#总线加锁" class="headerlink" title="总线加锁"></a>总线加锁</h4><p>总线加锁就是使用处理器提供一个LOCK#信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占使用共享内存。但是这种处理方式显得有点霸道，它把CPU和内存之间的通信锁住了，在锁定期间，其他处理器都不能访问内存地址的数据，其开销有点大。所以就有了缓存加锁。</p>
<h4 id="缓存加锁"><a href="#缓存加锁" class="headerlink" title="缓存加锁"></a>缓存加锁</h4><p>其实针对上面那种情况我们只需要保证在同一时刻对某个内存地址的操作是原子性的即可。缓存加锁就是缓存在内存区域的数据如果在加锁期间，当它执行操作写回内存时，处理器不在输出LOCK#信号，而是修改内存的内存地址，利用缓存一致性协议来保证原子性。缓存一致性机制可以保证同一个内存区域的数据仅能被一个处理器修改，也就是说当CPU1修改缓存行中的i时使用缓存锁定，那么CPU2就不能同时缓存了i的缓存行。</p>
<h3 id="CAS缺陷"><a href="#CAS缺陷" class="headerlink" title="CAS缺陷"></a>CAS缺陷</h3><p>CAS虽然高效地解决了原子操作，但是还是存在一些缺陷的，主要表现在三个方面：循环时间太长、只能保证一个共性变量原子操作、ABA问题。</p>
<h5 id="1-循环时间太长"><a href="#1-循环时间太长" class="headerlink" title="1) 循环时间太长"></a>1) 循环时间太长</h5><p>如果CAS一直不成功呢？这种情况绝对有可能发生，如果自旋CAS长时间地不成功，则会给CPU带来非常大的开销。在JUC有些地方就限制了CAS自旋的次数，例如BlockQueue的SynchronousQueue。</p>
<h5 id="2-只能保证一个共享变量原子操作"><a href="#2-只能保证一个共享变量原子操作" class="headerlink" title="2) 只能保证一个共享变量原子操作"></a>2) 只能保证一个共享变量原子操作</h5><p>看了CAS的实现就知道它只能针对一个共享变量，如果是多个共享变量就只能使用锁了。当然如果你有办法把多个变量整成一个变量，利用CAS也不错。例如读写锁中state的高位</p>
<h5 id="3-ABA问题"><a href="#3-ABA问题" class="headerlink" title="3) ABA问题"></a>3) ABA问题</h5><p>CAS需要检查操作值有没有发生改变，如果没有发生改变则更新。但是存在这样一种情况：如果一个值原来是A，变成B，然后又变成了A，那么在CAS检查的时候会发现没有改变，但是实质上它发生了改变，这就是所谓的ABA问题。对于ABA问题其解决方案是加上版本号，即在每个变量都加上一个版本号，每次改变时加1，即A -&gt; B -&gt; A，变成1A -&gt; 2B -&gt; 3A。</p>
<h5 id="ABA解决方案"><a href="#ABA解决方案" class="headerlink" title="ABA解决方案"></a>ABA解决方案</h5><p>CAS的ABA隐患问题，解决方案则是加上版本号，Java提供了AtomicStampedReference来解决。AtomicStampedReference通过包装[E,Integer]的元组来对对象标记版本戳stamp，从而避免ABA问题。</p>
<p>AtomicStampedReference的compareAndSet()方法定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public boolean compareAndSet(V   expectedReference,</div><div class="line">                             V   newReference,</div><div class="line">                             int expectedStamp,</div><div class="line">                             int newStamp) &#123;</div><div class="line">    Pair&lt;V&gt; current = pair;</div><div class="line">    return</div><div class="line">        expectedReference == current.reference &amp;&amp;</div><div class="line">        expectedStamp == current.stamp &amp;&amp;</div><div class="line">        ((newReference == current.reference &amp;&amp;</div><div class="line">          newStamp == current.stamp) ||</div><div class="line">         casPair(current, Pair.of(newReference, newStamp)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>compareAndSet有四个参数，分别表示：预期引用、更新后的引用、预期标志、更新后的标志。如果更新后的引用和标志和当前引用和标志相等则直接返回true，否则通过Pair生成一个新的pair对象与当前pair CAS替换。Pair为AtomicStampedReference的内部类，主要用于记录引用和版本戳信息，其定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static class Pair&lt;T&gt; &#123;</div><div class="line">    final T reference;</div><div class="line">    final int stamp;</div><div class="line">    private Pair(T reference, int stamp) &#123;</div><div class="line">        this.reference = reference;</div><div class="line">        this.stamp = stamp;</div><div class="line">    &#125;</div><div class="line">    static &lt;T&gt; Pair&lt;T&gt; of(T reference, int stamp) &#123;</div><div class="line">        return new Pair&lt;T&gt;(reference, stamp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Pair记录着对象的引用和版本戳，版本戳为int型，保持自增，同时Pair是一个不可变对象，其所有属性定义都为final，对外提供一个of方法，该方法返回一个新建的Pair对象，pair对象定义为volatile，保证多线程环境下的可见性。在AtomicStampedReference中，大多方法都是通过调用Pair的of方法来产生一个新的Pair对象，然后赋予给变量pair。如set方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void set(V newReference, int newStamp) &#123;</div><div class="line">    Pair&lt;V&gt; current = pair;</div><div class="line">    if (newReference != current.reference || newStamp != current.stamp)</div><div class="line">        this.pair = Pair.of(newReference, newStamp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h5><p>下面我们将通过一个例子可以看到AtomicStampedReference和AtomicInteger的区别。我们定义两个线程，线程1负责将100 -&gt; 110 -&gt; 100，线程2执行100 -&gt; 120，看看两者之间的区别。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">public class AtomicDemo2 &#123;</div><div class="line">    private static AtomicInteger atomicInteger = new AtomicInteger(100);</div><div class="line">    private static AtomicStampedReference atomicStampedReference = new AtomicStampedReference(100,1);</div><div class="line"></div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        // AtomicInteger</div><div class="line">        Thread at1 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                atomicInteger.compareAndSet(100,110);</div><div class="line">                atomicInteger.compareAndSet(110,100);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread at2 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(2); // at1，执行完</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(&quot;AtomicInteger: &quot; + atomicInteger.compareAndSet(100,120));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        at1.start();</div><div class="line">        at2.start();</div><div class="line">        at1.join();</div><div class="line">        at2.join();</div><div class="line"></div><div class="line">        // AtomicStampedReference</div><div class="line">        Thread tsf1 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    // 让tsf2先获取stamp，导致预期时间戳不一致</div><div class="line">                    TimeUnit.SECONDS.sleep(2);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // 预期引用：100， 更新后的引用110，预期表示getStamp(), 更新后表示：getStamp() + 1</div><div class="line">                atomicStampedReference.compareAndSet(100,110,atomicStampedReference.getStamp(),atomicStampedReference.getStamp() +1);</div><div class="line">                System.out.println(&quot;100 -&gt; 110: &quot; + atomicStampedReference.getStamp());</div><div class="line">                atomicStampedReference.compareAndSet(110,100,atomicStampedReference.getStamp(),atomicStampedReference.getStamp() +1);</div><div class="line">                System.out.println(&quot;110 -&gt; 100: &quot; + atomicStampedReference.getStamp());</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread tsf2 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                int stamp = atomicStampedReference.getStamp();</div><div class="line">                System.out.println(&quot;100 -&gt; 120: &quot; + stamp);</div><div class="line">                </div><div class="line">                // 此处线程休眠，是为了让线程tsf1执行，从而改变版本戳，最后导致atomicStampedReference.compareAndSet()因版本对不上而更新失败；</div><div class="line">                try &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(5);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(&quot;AtomicStampedReference: &quot; + atomicStampedReference.compareAndSet(100,120,stamp,stamp+1));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        tsf1.start();</div><div class="line">        tsf2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">AtomicInteger: true</div><div class="line">100 -&gt; 120: 1</div><div class="line">100 -&gt; 110: 2</div><div class="line">110 -&gt; 100: 3</div><div class="line">AtomicStampedReference: false</div></pre></td></tr></table></figure>
<p>运行结果充分展示了AtomicInteger的ABA问题和AtomicStampedReference解决ABA问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ConcurrentHashMap源码学习]]></title>
      <url>http://jianwl.com/2018/05/16/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>HashMap是我们平时开发过程中用的比较多的集合，它是非线程安全的，涉及到多线程并发的情况，进行get操作有可能会引起死循环「JDK1.8以前」，导致CPU利用率接近100%。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001()&#123;</div><div class="line">    final Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</div><div class="line">    IntStream.range(0,1000).forEach(num -&gt; new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            map.put(UUID.randomUUID().toString(),&quot;&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;).start()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决方案有HashTable和Collections.synchronizedMap(hashMap),不过两个方案基本上是对读写进行加锁操作，一个线程在读写元素，其余线程必须等待，性能可想而知。</p>
<p>所以，Doug Lea给我们带来了并发安全的CocurrentHashMap,它的实现是依赖于Java内存模型，本文源码是JDK8的版本，与之前的版本有较大差异。</p>
<h3 id="JDK1-7分析"><a href="#JDK1-7分析" class="headerlink" title="JDK1.7分析"></a>JDK1.7分析</h3><p>ConcurrentHashMap采用分段锁的机制，实现并发的更新操作，底层采用数组+链表的存储结构。其包含两个核心静态内部类Segment和HashEntry。</p>
<ol>
<li>Segment继承ReentrantLock用来充当锁的角色，每个Segment对象守护每个散列映射表的若干个桶。</li>
<li>HashEntry用来封装映射表的键/值对；</li>
<li>每个桶是由若干个HashEntry对象链接起来的链表</li>
</ol>
<p>一个ConcurrentHashMap实例中包含由若干个Segment对象组成的数组。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-16/36278984.jpg" alt=""></p>
<h3 id="JDK1-8-分析"><a href="#JDK1-8-分析" class="headerlink" title="JDK1.8 分析"></a>JDK1.8 分析</h3><p>1.8的实现已经抛弃了Segment分段锁机制，利用CAS + Synchronized来保证并发更新的安全，底层采用数组 + 链表 + 红黑树的存储结构。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-18/3990408.jpg" alt=""></p>
<h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h4><p>在开始之前，有些重要的概念需要介绍一下：</p>
<p>1、 <code>table</code>: 默认为null,初始化发生在第一次插入操作，默认大小为16的数组，用来存储Node节点数据，扩容时大小总是2的幂次方。</p>
<p>2、<code>nextTable</code>: 默认为null,扩容时新生成的数组，其大小为原数组的两倍。</p>
<p>3 、<code>sizeCtl</code>: 默认为0， 用来控制table的初始化和扩容操作，具体应用在后续会体现出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-1 代表table正在初始化</div><div class="line">-N 表示有N-1个线程正在进行扩容操作</div><div class="line">其他情况：</div><div class="line">1. 如果table未初始化，表示table需要初始化的大小；</div><div class="line">2. 如果table初始化完成，表示table的容量，默认是table大小的0.75倍</div></pre></td></tr></table></figure>
<p>4、 Node: 保存key，value及key的hash值的数据结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">    final int hash;</div><div class="line">    final K key;</div><div class="line">    volatile V val;</div><div class="line">    volatile Node&lt;K,V&gt; next;</div><div class="line">    ... 省略部分代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中value和next都用volatile修饰，保证并发的可见性。</p>
<p>5、<code>ForwardingNode:</code> 一个特殊的Node节点，hash值为-1，其中存储nextTable的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">final class ForwardingNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;</div><div class="line">    final Node&lt;K,V&gt;[] nextTable;</div><div class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</div><div class="line">        super(MOVED, null, null, null);</div><div class="line">        this.nextTable = tab;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有table发生扩容的时候，ForwardingNode才会发生作用，作为一个占位符放在table中表示当前节点为null或已经被移动。</p>
<h4 id="实例初始化"><a href="#实例初始化" class="headerlink" title="实例初始化"></a>实例初始化</h4><p>实例化CocurrentHashMap时带参数时，会根据参数调整table的大小，假设参数为100，最终会调整成256，确保table的大小总是2的幂次方，算法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ConcurrentHashMap&lt;String, String&gt; hashMap = new ConcurrentHashMap&lt;&gt;(100);</div><div class="line">private static final int tableSizeFor(int c) &#123;</div><div class="line">    int n = c - 1;</div><div class="line">    n |= n &gt;&gt;&gt; 1;</div><div class="line">    n |= n &gt;&gt;&gt; 2;</div><div class="line">    n |= n &gt;&gt;&gt; 4;</div><div class="line">    n |= n &gt;&gt;&gt; 8;</div><div class="line">    n |= n &gt;&gt;&gt; 16;</div><div class="line">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，ConcurrentHashMap在构造函数中只会初始化sizeCtl值，并不会直接初始化table，而是延缓到第一次put操作。</p>
<h4 id="table初始化"><a href="#table初始化" class="headerlink" title="table初始化"></a>table初始化</h4><p>前面已经提到过，table初始化操作会延缓到第一次put行为，但是put是可以并发执行的，DougLea是如何实现table只初始化一次的？让我们来看看源码的实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">private final Node&lt;K,V&gt;[] initTable() &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; int sc;</div><div class="line">    while ((tab = table) == null || tab.length == 0) &#123;</div><div class="line">//如果一个线程发现sizeCtl&lt;0，意味着另外的线程执行CAS操作成功，当前线程只需要让出cpu时间片</div><div class="line">        if ((sc = sizeCtl) &lt; 0) </div><div class="line">            Thread.yield(); // lost initialization race; just spin</div><div class="line">        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) &#123;</div><div class="line">            try &#123;</div><div class="line">                if ((tab = table) == null || tab.length == 0) &#123;</div><div class="line">                    int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;</div><div class="line">                    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];</div><div class="line">                    table = tab = nt;</div><div class="line">                    sc = n - (n &gt;&gt;&gt; 2);</div><div class="line">                &#125;</div><div class="line">            &#125; finally &#123;</div><div class="line">                sizeCtl = sc;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return tab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>sizeCtl默认为0，如果ConcurrentHashMap实例化时有传参数，sizeCtl会是一个2的幂次方的值。所以执行第一次put操作的线程会执行<code>Unsafe.compareAndSwapInt</code>方法修改sizeCtl为-1，有且只有一个线程能够修改成功，其他线程通过Thread.yield()让出CPU时间片等待初始化完成。</p>
<h4 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h4><p>假设table已经初始化完成，put操作采用CAS + synchronized实现并发插入或更新操作，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class="line">    if (key == null || value == null) throw new NullPointerException();</div><div class="line">    int hash = spread(key.hashCode());</div><div class="line">    int binCount = 0;</div><div class="line">    for (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class="line">        Node&lt;K,V&gt; f; int n, i, fh;</div><div class="line">        if (tab == null || (n = tab.length) == 0)</div><div class="line">            tab = initTable();</div><div class="line">        else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123;</div><div class="line">            if (casTabAt(tab, i, null, new Node&lt;K,V&gt;(hash, key, value, null)))</div><div class="line">                break;                   // no lock when adding to empty bin</div><div class="line">        &#125;</div><div class="line">        else if ((fh = f.hash) == MOVED)</div><div class="line">            tab = helpTransfer(tab, f);</div><div class="line">        ...省略部分代码</div><div class="line">    &#125;</div><div class="line">    addCount(1L, binCount);</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1、 hash算法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static final int spread(int h) &#123;return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;&#125;</div></pre></td></tr></table></figure>
<p>2、table中定位索引位置，n是table的大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int index = (n - 1) &amp; hash</div></pre></td></tr></table></figure>
<p>3、获取table中对应索引的元素f。</p>
<p>Doug Lea采用Unsafe.getObjectVolatile来获取，也许有人质疑，直接talbe[index]不可以么，为什么要这么复杂？</p>
<p>在java内存模型中，我们已经知道每个线程都有一个工作内存，里面存储这table的副本，虽然table是volatile修饰的，但是不能保证线程每次都拿到table中的最新元素，Unsafe.getObjectVolatile可以直接获取指定内存的数据，保证了每次拿到数据都是最新的。</p>
<p>4、如果f为null，说明table中这个位置第一次元素，利用Unsafe.compareAndSwapObject方法插入Node节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果CAS成功，说明Node节点已经插入，随后addCount(1L,binCount)方法会检查当前容量是否需要进行扩容。</div><div class="line"></div><div class="line">如果CAS失败，说明有其他线程提前插入了节点，自旋重新尝试在这个位置插入节点。</div></pre></td></tr></table></figure>
<p>5、如果f的hash值为-1，说明当前f是ForwardingNode节点，意味有其他线程正在扩容，则一起进行扩容操作。</p>
<p>6、其余情况把新的Node节点按链表或红黑树的方式插入到合适的位置，这个过程采用同步内置锁实现并发，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">synchronized (f) &#123;</div><div class="line">    if (tabAt(tab, i) == f) &#123;</div><div class="line">        if (fh &gt;= 0) &#123;</div><div class="line">            binCount = 1;</div><div class="line">            for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">                K ek;</div><div class="line">                if (e.hash == hash &amp;&amp;</div><div class="line">                    ((ek = e.key) == key ||</div><div class="line">                     (ek != null &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                    oldVal = e.val;</div><div class="line">                    if (!onlyIfAbsent)</div><div class="line">                        e.val = value;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                Node&lt;K,V&gt; pred = e;</div><div class="line">                if ((e = e.next) == null) &#123;</div><div class="line">                    pred.next = new Node&lt;K,V&gt;(hash, key,</div><div class="line">                                              value, null);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else if (f instanceof TreeBin) &#123;</div><div class="line">            Node&lt;K,V&gt; p;</div><div class="line">            binCount = 2;</div><div class="line">            if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                           value)) != null) &#123;</div><div class="line">                oldVal = p.val;</div><div class="line">                if (!onlyIfAbsent)</div><div class="line">                    p.val = value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在节点f上进行同步，节点插入之前，再次利用tabAt(tab,i) == f判断，防止被其他线程修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、如果f.hash &gt;= 0，说明f是链表结构的头结点，遍历链表，如果找到对应的node节点，则修改value，否则在链表尾部加入节点。</div><div class="line"></div><div class="line">2、如果f是TreeBin类型节点，说明f是红黑树跟节点，则在树结构上遍历元素，更新或增加节点。</div><div class="line"></div><div class="line">3、如果链表中节点数binCount &gt;= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构。</div></pre></td></tr></table></figure>
<h4 id="table扩容"><a href="#table扩容" class="headerlink" title="table扩容"></a>table扩容</h4><p>当table容量不足的时候，即table的元素数量达到容量阈值sizeCtl,需要对table进行扩容。</p>
<blockquote>
<p>整个扩容分为两部分：</p>
<p>1、构建一个nextTable，大小为table的两倍</p>
<p>2、把table的数据复制到nextTable中</p>
</blockquote>
<p>这两个过程在单线程实现很简单，但是ConcurrentHashMap是支持并发插入的，扩容操作自然也会有并发的出现，这种情况下，第二步可以支持节点的并发复制，这样性能自然提升不少，但是实现的复杂度也上升了一个台阶。</p>
<p>先看第一步，构建nextTable，毫无疑问，这个过程只能单个线程进行nextTable的初始化，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">private final void addCount(long x, int check) &#123;</div><div class="line">    ... 省略部分代码</div><div class="line">    if (check &gt;= 0) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab, nt; int n, sc;</div><div class="line">        while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp;</div><div class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class="line">            int rs = resizeStamp(n);</div><div class="line">            if (sc &lt; 0) &#123;</div><div class="line">                if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||</div><div class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||</div><div class="line">                    transferIndex &lt;= 0)</div><div class="line">                    break;</div><div class="line">                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))</div><div class="line">                    transfer(tab, nt);</div><div class="line">            &#125;</div><div class="line">            else if (U.compareAndSwapInt(this, SIZECTL, sc,</div><div class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2))</div><div class="line">                transfer(tab, null);</div><div class="line">            s = sumCount();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Unsafe.compareAndSwapInt修改sizeCtl值，保证只有一个线程能够初始化nextTable,扩容后的数组长度为原来的两倍，但是容量是原来的1.5。</p>
<p>节点是从table移动nextTable，大体思路是遍历、复制的过程。</p>
<p>1、首先根据运算得到遍历的次数i，利用tabAt方法获得i位置的元素f，初始化一个forwardNode实例fwd。</p>
<p>2、如果f == null，则在table中的i位置放入fwd,这个过程是采用Unsafe.compareAndSwapObject方法实现的，很巧妙的实现了节点的并发移动。</p>
<p>3、如果f是链表的头节点，就构造一个反序列链表，把他们分别放在nextTable的i和i+n的位置上，移动完成，采用Unsafe.putObjectVolatile方法给table原位置复制fwd。</p>
<p>4、如果f是TreeBin节点，也做了一个反序处理，并判断是否需要untreeify,把处理的结果分别放在nextTable的i和i+n的位置上，移动完成，同样采用Unsafe.putObjectVolatile方法给table原位置复制fwd。</p>
<p>遍历过所有的节点以后就完成了复制工作，把table指向nextTable，并更新sizeCtl为新数组大小的0.75倍，扩容完成。</p>
<h4 id="红黑树构造"><a href="#红黑树构造" class="headerlink" title="红黑树构造"></a>红黑树构造</h4><p>注意: 如果链表结构中元素超过TREEIFY_THRESHOLD阈值，默认为8个，则把链表转化为红黑树，提高遍历查询效率。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (binCount != 0) &#123;</div><div class="line">    if (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">        treeifyBin(tab, i);</div><div class="line">    if (oldVal != null)</div><div class="line">        return oldVal;</div><div class="line">    break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们看看如何构造树结构，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">private final void treeifyBin(Node&lt;K,V&gt;[] tab, int index) &#123;</div><div class="line">    Node&lt;K,V&gt; b; int n, sc;</div><div class="line">    if (tab != null) &#123;</div><div class="line">        if ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</div><div class="line">            tryPresize(n &lt;&lt; 1);</div><div class="line">        else if ((b = tabAt(tab, index)) != null &amp;&amp; b.hash &gt;= 0) &#123;</div><div class="line">            synchronized (b) &#123;</div><div class="line">                if (tabAt(tab, index) == b) &#123;</div><div class="line">                    TreeNode&lt;K,V&gt; hd = null, tl = null;</div><div class="line">                    for (Node&lt;K,V&gt; e = b; e != null; e = e.next) &#123;</div><div class="line">                        TreeNode&lt;K,V&gt; p =</div><div class="line">                            new TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</div><div class="line">                                              null, null);</div><div class="line">                        if ((p.prev = tl) == null)</div><div class="line">                            hd = p;</div><div class="line">                        else</div><div class="line">                            tl.next = p;</div><div class="line">                        tl = p;</div><div class="line">                    &#125;</div><div class="line">                    setTabAt(tab, index, new TreeBin&lt;K,V&gt;(hd));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，生成树节点的代码块是同步的，进入同步代码块之后，再次验证table中index位置元素是否被修改过。</p>
<p>1、根据table中index位置Node链表，重新生成一个hd为头结点的TreeNode链表</p>
<p>2、 根据hd头结点，生成TreeBin树结构，并把树结构的root节点写到table的index位置的内存中，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">TreeBin(TreeNode&lt;K,V&gt; b) &#123;</div><div class="line">    super(TREEBIN, null, null, null);</div><div class="line">    this.first = b;</div><div class="line">    TreeNode&lt;K,V&gt; r = null;</div><div class="line">    for (TreeNode&lt;K,V&gt; x = b, next; x != null; x = next) &#123;</div><div class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</div><div class="line">        x.left = x.right = null;</div><div class="line">        if (r == null) &#123;</div><div class="line">            x.parent = null;</div><div class="line">            x.red = false;</div><div class="line">            r = x;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            K k = x.key;</div><div class="line">            int h = x.hash;</div><div class="line">            Class&lt;?&gt; kc = null;</div><div class="line">            for (TreeNode&lt;K,V&gt; p = r;;) &#123;</div><div class="line">                int dir, ph;</div><div class="line">                K pk = p.key;</div><div class="line">                if ((ph = p.hash) &gt; h)</div><div class="line">                    dir = -1;</div><div class="line">                else if (ph &lt; h)</div><div class="line">                    dir = 1;</div><div class="line">                else if ((kc == null &amp;&amp;</div><div class="line">                          (kc = comparableClassFor(k)) == null) ||</div><div class="line">                         (dir = compareComparables(kc, k, pk)) == 0)</div><div class="line">                    dir = tieBreakOrder(k, pk);</div><div class="line">                    TreeNode&lt;K,V&gt; xp = p;</div><div class="line">                if ((p = (dir &lt;= 0) ? p.left : p.right) == null) &#123;</div><div class="line">                    x.parent = xp;</div><div class="line">                    if (dir &lt;= 0)</div><div class="line">                        xp.left = x;</div><div class="line">                    else</div><div class="line">                        xp.right = x;</div><div class="line">                    r = balanceInsertion(r, x);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    this.root = r;</div><div class="line">    assert checkInvariants(root);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要根据Node节点的hash值大小构建二叉树，这个红黑树的构造过程实在有点复杂，感兴趣的同学可以看看源码。</p>
<h4 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h4><p>get操作和put操作相比，显得简单了许多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public V get(Object key) &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;</div><div class="line">    int h = spread(key.hashCode());</div><div class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class="line">        (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123;</div><div class="line">        if ((eh = e.hash) == h) &#123;</div><div class="line">            if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))</div><div class="line">                return e.val;</div><div class="line">        &#125;</div><div class="line">        else if (eh &lt; 0)</div><div class="line">            return (p = e.find(h, key)) != null ? p.val : null;</div><div class="line">        while ((e = e.next) != null) &#123;</div><div class="line">            if (e.hash == h &amp;&amp;</div><div class="line">                ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))</div><div class="line">                return e.val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1、判断table是否为空，如果为空，直接返回null<br>2、计算key的hash值，并获取指定table中指定位置的Node节点，通过遍历链表或树结构找到对应节点，返回value值。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ConcurrentHashMap是一个并发散列映射表的实现，它允许完全并发的读取，并且支持给定数量的并发更新。相当于HashTable和同步包装器包装的HashMap，使用一个全局的锁来同步不同线程间的并发访问，同一时间点，只能有一个线程持有锁，也就是说在同一个时间点，只能有一个线程能访问容器，这虽然保证多线程间的安全并发访问，但同时也导致对容器的访问变成串行化。</p>
<p>1.6中采用ReentrantLock分段锁的方式，是多个线程在不同的segment上进行写操作，不会发现阻塞行为；1.8中采用内置锁synchronized，难道是因为1.8的虚拟机内置锁已经优化足够快了？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于「数据库架构」和「查询优化」的分享]]></title>
      <url>http://jianwl.com/2018/05/15/%E5%85%B3%E4%BA%8E%E3%80%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84%E3%80%8D%E5%92%8C%E3%80%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E3%80%8D%E7%9A%84%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>部门技术分享，选了个数据库专题，做完KeyNote，顺便整理成文，方便后续查阅和补充；本次分享囊括数据库架构、存储引擎功能对比、常用InnoDB日志以及InnoDB逻辑储存结构、索引相关和模拟线上并发问题；</p>
<h3 id="1-MySQL体系结构"><a href="#1-MySQL体系结构" class="headerlink" title="1. MySQL体系结构"></a>1. MySQL体系结构</h3><p> <img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/89852452.jpg" alt=""></p>
<p> MySQL由以下几部分组成： 连接池组件、管理服务和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲组件、插件式存储引擎、物理文件。</p>
<p> MySQL数据库与其他数据库不一样的地方，最重要的一点就是其「插件式的表存储引擎」。特别注意，存储引擎是基于表的，而不是数据库。</p>
<h3 id="2-存储引擎功能对比"><a href="#2-存储引擎功能对比" class="headerlink" title="2. 存储引擎功能对比"></a>2. 存储引擎功能对比</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/94396221.jpg" alt=""></p>
<h4 id="2-1-MyISAM"><a href="#2-1-MyISAM" class="headerlink" title="2-1 MyISAM"></a>2-1 MyISAM</h4><p>不支持事务、表锁设计、支持全文索引，主要面向线上分析处理(OLAP)数据库应用。MyISAM另一个与众不同的地方是它的缓冲池只缓存「索引文件」，而不缓存「数据文件」。</p>
<h4 id="2-2-InnoDB"><a href="#2-2-InnoDB" class="headerlink" title="2-2 InnoDB"></a>2-2 InnoDB</h4><p>支持数据、行锁设计、支持B+树索引、哈希索引、全文索引、支持外键，设计目标主要面向在线事务处理(OLTP)应用。InnoDB通过多版本并发控制(MVCC)来获得并发，并且实现SQL标准的4个隔离级别。默认隔离级别是「REPEATABLE-READ」</p>
<h4 id="2-3-NDB"><a href="#2-3-NDB" class="headerlink" title="2-3 NDB"></a>2-3 NDB</h4><p>NDB是个「集群式」存储引擎，其将数据全部放在内存中(MySQL5.1版本开始，可以将索引数据放在磁盘上)，因此通过主键查询速度极快，且通过增加NDB数据存储节点，可以线性提高数据库性能。</p>
<p>有个问题值得注意：NDB存储引擎的连接操作是在MySQL数据库层完成，而不是在存储引擎层完成。这意味着，复杂的连接操作需要巨大的网络开销。</p>
<h4 id="2-4-Memory"><a href="#2-4-Memory" class="headerlink" title="2-4 Memory"></a>2-4 Memory</h4><p>将表中的数据存放在内存中，如果数据库重启或发生崩溃，表中的数据将消失。它非常使用于存储临时数据的临时表。默认使用「哈希索引」</p>
<h4 id="2-5-Archive"><a href="#2-5-Archive" class="headerlink" title="2-5 Archive"></a>2-5 Archive</h4><p>只持此INSERT和SELECT操作，从MySQL5.1开始支持索引。Archive存储引擎使用zlib算法将数据行进行压缩后存储，应用场景主要是「存储归档数据」。</p>
<h4 id="2-6-Federated"><a href="#2-6-Federated" class="headerlink" title="2-6 Federated"></a>2-6 Federated</h4><p>表不存放数据，它只是指向一台远程MySQL数据库服务器上的表。</p>
<h4 id="2-7-Maria"><a href="#2-7-Maria" class="headerlink" title="2-7 Maria"></a>2-7 Maria</h4><p>Maria是新开发的引擎，设计目标是取代原有的MyISAM存储引擎。其特点是: 支持缓存数据和索引文件，应用行锁设计，提供MVCC功能，支持事务和非事务的安全选项，以及更好的BLOB字符类型的处理性能。</p>
<h3 id="3-InnoDB"><a href="#3-InnoDB" class="headerlink" title="3. InnoDB"></a>3. InnoDB</h3><h4 id="3-1-日志文件"><a href="#3-1-日志文件" class="headerlink" title="3-1 日志文件"></a>3-1 日志文件</h4><p>用来记录MySQL实例对某种条件做出响应时写入的文件，如错误日志文件、二进制文件、慢查询日志。</p>
<h5 id="1）错误日志文件"><a href="#1）错误日志文件" class="headerlink" title="1）错误日志文件"></a>1）错误日志文件</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/248741.jpg" alt=""></p>
<p>可以得到错误日志文件在本地存储的位置；</p>
<h5 id="2）慢查询日志文件"><a href="#2）慢查询日志文件" class="headerlink" title="2）慢查询日志文件"></a>2）慢查询日志文件</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/83986237.jpg" alt=""></p>
<p>默认情况下，慢查询日志不是开启的，通过slow_query_log查看，如果未开启，需要通过以下命令开启。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set global slow_query_log = ON</div></pre></td></tr></table></figure>
<p>long_query_time是查询时间超过这个值，就认为是慢查询；slow_query_log_file是慢查询在本地存储的位置。</p>
<h5 id="3）二进制文件"><a href="#3）二进制文件" class="headerlink" title="3）二进制文件"></a>3）二进制文件</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/8138280.jpg" alt=""></p>
<p>二进制文件记录了MySQL数据库执行更改的所有操作，不包括SELECT 和 SHOW这类操作，因为这类操作对数据本身没有修改。</p>
<h4 id="3-2-逻辑存储结构"><a href="#3-2-逻辑存储结构" class="headerlink" title="3-2 逻辑存储结构"></a>3-2 逻辑存储结构</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/22066716.jpg" alt=""></p>
<p>存储引擎是基于表，所有数据都被逻辑存放在一个空间，称为表空间(tableSpace)。表空间又由段(segment)、区(extent)和页(page)组成。</p>
<h5 id="1-表空间"><a href="#1-表空间" class="headerlink" title="1) 表空间"></a>1) 表空间</h5><p>用于存放数据、索引和插入缓冲页；</p>
<h5 id="2-段"><a href="#2-段" class="headerlink" title="2) 段"></a>2) 段</h5><p>表空间由各个段组成，常见的段有数据段、索引段、回滚段；</p>
<h5 id="3）区"><a href="#3）区" class="headerlink" title="3）区"></a>3）区</h5><p>区是由连续页组成，在任何情况下每个区的大小都是1MB。为了保证区中页的连续性，InnoDB存储引擎一次从磁盘申请4 ~ 5个区，在默认情况下, 页的大小为16K，即一个区有64个连续的页。</p>
<h4 id="3-3-由慢查询引发的思考"><a href="#3-3-由慢查询引发的思考" class="headerlink" title="3-3 由慢查询引发的思考"></a>3-3 由慢查询引发的思考</h4><h5 id="1-什么是慢查询？"><a href="#1-什么是慢查询？" class="headerlink" title="1) 什么是慢查询？"></a>1) 什么是慢查询？</h5><p>Innodb会设置<code>long_query_time</code>参数，查询时间超过这个数值，则判定这个查询为慢查询；</p>
<h5 id="2）如何解决慢查询？"><a href="#2）如何解决慢查询？" class="headerlink" title="2）如何解决慢查询？"></a>2）如何解决慢查询？</h5><p>从三个层面上解决，① 优化查询本身；② 调优表包括增加索引； ③ 调优服务器</p>
<h6 id="优化查询本身"><a href="#优化查询本身" class="headerlink" title="优化查询本身"></a>优化查询本身</h6><p> ① 是否向数据请求了不需要的数据；② 大查询切分为小查询；③ 分解关联查询，可增加缓存命中概率；</p>
<h6 id="优化表"><a href="#优化表" class="headerlink" title="优化表"></a>优化表</h6><p>① 创建表时字段够用就好，越小越好；② 字段不能为空, 字段加索引需要额外空间，含NULL的复合索引无效；③ 加索引，后文会详细接受；</p>
<h6 id="调优服务器"><a href="#调优服务器" class="headerlink" title="调优服务器"></a>调优服务器</h6><p>调节缓冲区参数；</p>
<h5 id="3）联合索引"><a href="#3）联合索引" class="headerlink" title="3）联合索引"></a>3）联合索引</h5><h6 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h6><p>① 联合索引，最左匹配原则；</p>
<h6 id="传递规则"><a href="#传递规则" class="headerlink" title="传递规则"></a>传递规则</h6><p>① <code>=</code>可以向后传递 ② <code>in</code>如果后面是<code>=</code>或<code>in</code>可以传递 ③ <code>&gt;</code>、<code>&lt;</code>、<code>GROUP BY</code>、<code>ORDER BY</code>、<code>LIKE</code>不向后传递；</p>
<h5 id="4）索引原理"><a href="#4）索引原理" class="headerlink" title="4）索引原理"></a>4）索引原理</h5><p>索引是用B+树的数据结构；B+树包含「索引页」和「数据页」；索引页为非叶子节点，不存数据，只存指向；数据页为叶子节点，只存数据；B+树有一些特性：① 左树小于中间数；② 右树大于中间数；③ 数据页之间是通过双向链表连接的；</p>
<h6 id="B-树插入3种情况"><a href="#B-树插入3种情况" class="headerlink" title="B+树插入3种情况"></a>B+树插入3种情况</h6><p>① 叶子节点(数据页)和非叶子节点(索引页)都未满，插入数据直接插入到叶子节点；（插入28）</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/77745979.jpg" alt=""></p>
<p>② 非叶子节点未满，叶子节点满了；拆分叶子节点，将中间的节点放入Index Page中，小于中间节点的记录放左边，大于或等于中间节点的记录放右边；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/66912616.jpg" alt=""></p>
<p>③ 叶子节点和非叶子节点都满了；拆分叶子节点，小于中间节点的记录放左边，大于或等于中间节点的记录放右边，拆分Index Page，小于中间节点的记录放左边，大于中间节点的记录放右边，中间节点放上一层Index Page。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-15/30209172.jpg" alt=""></p>
<h4 id="3-4-模拟并发问题"><a href="#3-4-模拟并发问题" class="headerlink" title="3-4 模拟并发问题"></a>3-4 模拟并发问题</h4><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `parent` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h5 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h5><p>1) 客户端1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">insert into parent values(2);</div><div class="line"></div><div class="line">select * from parent;</div><div class="line"></div><div class="line">update parent set id = sleep(30) where id = 2;</div></pre></td></tr></table></figure>
<p>2) 客户端2</p>
<p>因为行锁，以下SQL耗时27.55秒</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update parent set id = 22 where id = 2;</div></pre></td></tr></table></figure>
<p>3) 客户端3</p>
<p>查看当前执行的线程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show processlist \G;</div></pre></td></tr></table></figure>
<h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><p>1）客户端1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">insert into parent values(3);</div><div class="line"></div><div class="line">begin;</div><div class="line"></div><div class="line">update parent set id = 33 where id = 3;</div></pre></td></tr></table></figure>
<p>2) 客户端2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select * from parent;</div><div class="line"></div><div class="line">begin;</div><div class="line"></div><div class="line">update parent set id = 333 where id = 3;</div></pre></td></tr></table></figure>
<p>3) 客户端3</p>
<p>查看事务情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show engine innodb status \G;</div></pre></td></tr></table></figure>
<h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>1) 客户端1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">begin; // 步骤1</div><div class="line">insert into parent values(4); // 步骤2</div><div class="line">update parent set id = 5 where id = 4; // 步骤5</div></pre></td></tr></table></figure>
<p>2) 客户端2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">begin；// 步骤3</div><div class="line">insert into parent values(5); // 步骤4</div><div class="line">update parent set id = 4 where id = 5; // 步骤6</div></pre></td></tr></table></figure>
<p>3) 客户端</p>
<p>查看死锁情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show engine innodb status \G;</div></pre></td></tr></table></figure>
<h3 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h3><ol>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html" target="_blank" rel="external">执行计划explain各个参数含义</a></li>
<li>MySQL排查指南</li>
<li>InnoDB存储引擎</li>
<li>高性能MySQL</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Thread源码学习]]></title>
      <url>http://jianwl.com/2018/05/04/Thread%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="1、Thread内部有个State枚举，表示线程的状态"><a href="#1、Thread内部有个State枚举，表示线程的状态" class="headerlink" title="1、Thread内部有个State枚举，表示线程的状态"></a>1、Thread内部有个State枚举，表示线程的状态</h3><ul>
<li>NEW, 新建未开始</li>
<li>RUNNABLE，可执行，但他可能处于等待系统资源状态，因为CPU此时别其他线程占用；</li>
<li>BLOCKED，阻塞状态，等待一个monitor lock，在调用wait方法后，进入synchronized同步块或方法</li>
<li>WAITING, 等待状态，调用以下方法导致进入等待状态，object.wait()、Thread.join()、LockSupport.park()</li>
<li>TIMED_WAITING, 带超时时间的等待，调用以下方法会处于这个状态 Thread.sleep()、Object.wait()、Thread.join()、LockSupport.parkNanos()、LockSupport.parkUntil()</li>
<li>TERMINATED, 终止状态</li>
</ul>
<p>2、接着看下Thread的构造函数及其他几个相关的成员变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">/* 带目标run对象. */</div><div class="line">   private Runnable target;</div><div class="line"></div><div class="line">   /* 线程组 */</div><div class="line">   private ThreadGroup group;</div><div class="line">   </div><div class="line">   /* 此线程的类加载器 */</div><div class="line">   private ClassLoader contextClassLoader;</div><div class="line">   </div><div class="line">   /* 想要的栈大小，为0时此参数被忽略，且有VM不支持此参数 */</div><div class="line">    private long stackSize;</div><div class="line">    </div><div class="line">   /* 状态标识，0代表新建未开始*/</div><div class="line">   private volatile int threadStatus = 0;</div><div class="line">   </div><div class="line">   /* 静态native方法，返回当前线程*/</div><div class="line">   public static native Thread currentThread();</div><div class="line"></div><div class="line"></div><div class="line">   public Thread() &#123;</div><div class="line">       init(null, null, &quot;Thread-&quot; + nextThreadNum(), 0);</div><div class="line">   &#125;</div><div class="line">   public Thread(Runnable target) &#123;</div><div class="line">       init(null, target, &quot;Thread-&quot; + nextThreadNum(), 0);</div><div class="line">   &#125;</div><div class="line">    Thread(Runnable target, AccessControlContext acc) &#123;</div><div class="line">       init(null, target, &quot;Thread-&quot; + nextThreadNum(), 0, acc);</div><div class="line">   &#125;</div><div class="line">    public Thread(ThreadGroup group, Runnable target) &#123;</div><div class="line">       init(group, target, &quot;Thread-&quot; + nextThreadNum(), 0);</div><div class="line">   &#125;</div><div class="line">    public Thread(String name) &#123;</div><div class="line">       init(null, null, name, 0);</div><div class="line">   &#125;</div><div class="line">   public Thread(ThreadGroup group, String name) &#123;</div><div class="line">       init(group, null, name, 0);</div><div class="line">   &#125;</div><div class="line">   public Thread(Runnable target, String name) &#123;</div><div class="line">       init(null, target, name, 0);</div><div class="line">   &#125;</div><div class="line">   public Thread(ThreadGroup group, Runnable target, String name) &#123;</div><div class="line">       init(group, target, name, 0);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   /**</div><div class="line">    * Initializes a Thread.</div><div class="line">    *</div><div class="line">    * @param g 线程组</div><div class="line">    * @param target 要执行的带run的目标对象</div><div class="line">    * @param name 线程名</div><div class="line">    * @param stackSize 新线程的栈大小，等于0时可忽略此参数</div><div class="line">    * @param acc 接入控制上下文</div><div class="line">    */</div><div class="line">   private void init(ThreadGroup g, Runnable target, String name,</div><div class="line">                     long stackSize, AccessControlContext acc) &#123;</div><div class="line">       if (name == null) &#123;</div><div class="line">           throw new NullPointerException(&quot;name cannot be null&quot;);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       this.name = name;</div><div class="line"></div><div class="line">       Thread parent = currentThread();</div><div class="line">       SecurityManager security = System.getSecurityManager();</div><div class="line">       //获取线程组</div><div class="line">       if (g == null) &#123;</div><div class="line"></div><div class="line">           /* 从SecurityManager拿线程组  */</div><div class="line">           if (security != null) &#123;</div><div class="line">               g = security.getThreadGroup();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           /* 如果还没拿到从当前线程拿*/</div><div class="line">           if (g == null) &#123;</div><div class="line">               g = parent.getThreadGroup();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       /* 检查是否可获取 */</div><div class="line">       g.checkAccess();</div><div class="line"></div><div class="line">       /*</div><div class="line">        * 还是权限控制检查</div><div class="line">        */</div><div class="line">       if (security != null) &#123;</div><div class="line">           if (isCCLOverridden(getClass())) &#123;</div><div class="line">               security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       g.addUnstarted();</div><div class="line"></div><div class="line">       this.group = g;</div><div class="line">       this.daemon = parent.isDaemon();</div><div class="line">       this.priority = parent.getPriority();</div><div class="line">       if (security == null || isCCLOverridden(parent.getClass()))</div><div class="line">           this.contextClassLoader = parent.getContextClassLoader();</div><div class="line">       else</div><div class="line">           this.contextClassLoader = parent.contextClassLoader;</div><div class="line">       this.inheritedAccessControlContext =</div><div class="line">               acc != null ? acc : AccessController.getContext();</div><div class="line">       this.target = target;</div><div class="line">       setPriority(priority);</div><div class="line">       //从父线程继承可继承的ThreadLocal</div><div class="line">       if (parent.inheritableThreadLocals != null)</div><div class="line">           this.inheritableThreadLocals =</div><div class="line">               ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</div><div class="line">     </div><div class="line">       this.stackSize = stackSize;</div><div class="line"></div><div class="line">       /* 设置线程ID */</div><div class="line">       tid = nextThreadID();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>不同的构造函数很多，最终都调init方法，init主要实现的就是把相应的参数放入成员变量里，线程ID为自增长方式；</p>
<h3 id="3、调用线程执行的主方法start与run方法"><a href="#3、调用线程执行的主方法start与run方法" class="headerlink" title="3、调用线程执行的主方法start与run方法"></a>3、调用线程执行的主方法start与run方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/* 线程启动方法 */</div><div class="line"> public synchronized void start() &#123;</div><div class="line">        /**</div><div class="line">         * 如果线程不是NEW状态，则抛异常</div><div class="line">         */</div><div class="line">        if (threadStatus != 0)</div><div class="line">            throw new IllegalThreadStateException();</div><div class="line"></div><div class="line">        /*</div><div class="line">        通知线程组此线程准备运行里，所以它可以加入到线程组列表中，线程组的未开始数量可以减少了 */</div><div class="line">        group.add(this);</div><div class="line"></div><div class="line">        boolean started = false;</div><div class="line">        try &#123;</div><div class="line">            start0();</div><div class="line">            started = true;</div><div class="line">        &#125; finally &#123;</div><div class="line">            try &#123;</div><div class="line">                if (!started) &#123;</div><div class="line">                    group.threadStartFailed(this);</div><div class="line">                &#125;</div><div class="line">            &#125; catch (Throwable ignore) &#123;</div><div class="line">                /*什么都不做，如果start0排除一个异常，它已经可以被调用栈知道 */</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private native void start0();</div></pre></td></tr></table></figure>
<p>特别注意：start方法会创建一个新的线程，之后在执行run方法里的逻辑；而run方法只会在当前线程中执行逻辑；</p>
<h3 id="4、join方法-等待线程挂掉的方法"><a href="#4、join方法-等待线程挂掉的方法" class="headerlink" title="4、join方法, 等待线程挂掉的方法"></a>4、join方法, 等待线程挂掉的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/*如果这个线程还活着就一直等待*/</div><div class="line"> public final void join() throws InterruptedException &#123;</div><div class="line">        join(0);</div><div class="line">    &#125;</div><div class="line">/*如果这个线程还活着就一直等待millis时间*/</div><div class="line">public final synchronized void join(long millis)</div><div class="line">    throws InterruptedException &#123;</div><div class="line">        long base = System.currentTimeMillis();</div><div class="line">        long now = 0;</div><div class="line"></div><div class="line">        if (millis &lt; 0) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;timeout value is negative&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (millis == 0) &#123;</div><div class="line">            while (isAlive()) &#123;</div><div class="line">                wait(0);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            while (isAlive()) &#123;</div><div class="line">                long delay = millis - now;</div><div class="line">                if (delay &lt;= 0) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                wait(delay);</div><div class="line">                now = System.currentTimeMillis() - base;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>通过自旋方法检验线程是否活着，如果活着，则wait释放锁；</p>
<h3 id="5、sleep方法，native实现，会抛出InterruptedException"><a href="#5、sleep方法，native实现，会抛出InterruptedException" class="headerlink" title="5、sleep方法，native实现，会抛出InterruptedException"></a>5、sleep方法，native实现，会抛出InterruptedException</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/* 睡眠指定毫秒，并不释放monitor*/</div><div class="line">public static native void sleep(long millis) throws InterruptedException;</div></pre></td></tr></table></figure>
<h3 id="6、yield方法"><a href="#6、yield方法" class="headerlink" title="6、yield方法"></a>6、yield方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/*使当前线程从执行状态（运行状态）变为可执行态（就绪状态）。cpu会从众多的可执行态里选择，也就是说，当前也就是刚刚的那个线程还是有可能会被再次执行到的，并不是说一定会执行其他线程而该线程在下一次中不会执行到了*/</div><div class="line">public static native void yield();</div></pre></td></tr></table></figure>
<h3 id="7、interrupted-方法与isInterrupted方法的区别？"><a href="#7、interrupted-方法与isInterrupted方法的区别？" class="headerlink" title="7、interrupted()方法与isInterrupted方法的区别？"></a>7、interrupted()方法与isInterrupted方法的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static boolean interrupted() &#123;</div><div class="line">    return currentThread().isInterrupted(true);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public boolean isInterrupted() &#123;</div><div class="line">    return isInterrupted(false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从源码上看，这两个方法都是调用<code>isInterrupted(boolean ClearInterrupted)</code>,只不过一个带的参数是true，另一个带的参数是false;</p>
<p>所以他们之间的区别是：</p>
<p>1、<code>interrupted</code>方法会清除中断标识符，<code>isInterrupted</code>方法不会清除中断标识符；</p>
<p>2、<code>interrupted</code>测试的是当前线程的中断状态，<code>isInterrupted</code>测试的是调用该方法对象所表示的线程。</p>
<p>3、<code>interrupted</code>为静态方法，Thread对象调用，<code>isInterrupted</code>为普通方法，Thread实例化对象调用</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL索引原理]]></title>
      <url>http://jianwl.com/2018/04/24/MYSQL%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="1-索引目的"><a href="#1-索引目的" class="headerlink" title="1. 索引目的"></a>1. 索引目的</h3><p>索引的目的在于提高查询效率，可以类比字典，如果要查<code>mysql</code>这个单词，我们肯定需要定位到m字母，然后从往下找到y字母，再找到剩下的sql。如果没有索引，那么你很可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？</p>
<h3 id="2-索引原理"><a href="#2-索引原理" class="headerlink" title="2. 索引原理"></a>2. 索引原理</h3><p>除了字典，生活中随处可见索引的例子，如火车站的车次表，图书的目录等，他们的原理都是一样的，通过不断的缩小想要获得的范围来筛选出最终想要的结果，同时把随机事件变成顺序的时间，也就是我们总是通过同一种查找方式来锁定数据。</p>
<p>数据库也是一样，但显然要复杂许多，因为不仅面临这等值查询、还有范围查询(<code>&gt;</code>、<code>&lt;</code>、<code>between</code>、<code>in</code>)、模糊查询(like)、并集查询(or)等。数据库应该选择怎么样的方式来应对所有问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段、201到300分成第三段…这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但是如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN,具有不错的查询性能。但这里我们忽略一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p>
<h3 id="3-磁盘IO和预读"><a href="#3-磁盘IO和预读" class="headerlink" title="3. 磁盘IO和预读"></a>3. 磁盘IO和预读</h3><p>前面提高了访问磁盘，那么这里先简单介绍一些磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分、寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们常说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是1秒转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错，但要知道一台500 - MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-24/44660032.jpg" alt=""></p>
<p>考虑到磁盘IO是非常高昂的操作计算机操作系统做了一些优化，当一次IO是，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p>
<h3 id="4-索引的数据结构"><a href="#4-索引的数据结构" class="headerlink" title="4. 索引的数据结构"></a>4. 索引的数据结构</h3><p>前面讲了生活中索引的例子，索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有他的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足要求呢？就这样，b+树应运而生。</p>
<h3 id="5-详解B-树"><a href="#5-详解B-树" class="headerlink" title="5. 详解B+树"></a>5. 详解B+树</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-24/6850674.jpg" alt=""></p>
<p>如上图，是一颗B+树，这里只说一些重点，浅蓝色的块我们称之为磁盘块，可以看到每个磁盘块包含几个数据项(深蓝色所示)和指针(黄色所示)，如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示17和35之间的磁盘块，P3表示大于35的磁盘块，真实的数据存于<strong>叶子节点</strong>即 3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p>
<h4 id="B-树的查找过程"><a href="#B-树的查找过程" class="headerlink" title="B+树的查找过程"></a>B+树的查找过程</h4><p>如图所示，如果要查找数据项是29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分法查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短(相比磁盘的IO)可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘块8加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的B+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总计共需要百万次IO，显然成本非常高。</p>
<h4 id="B-树性质"><a href="#B-树性质" class="headerlink" title="B+树性质"></a>B+树性质</h4><p>1、通过上面的分析，我们知道IO次数取决于B+数的高度H，假设当前数据表的数据为N，每个磁盘块的数据项的数据是m，则有h=log(m+1)N,当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段尽量要小，比如int占4字节，要比bigint8字节少一半，这也是为什么B+树要求吧真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时，会将退化成线性表。</p>
<p>2、 当B+树的数据项是符合的数据，比如(name,age,sex)的时候，b+树是按照从左到右的顺序来建立搜索树的，比如当(张三，20，F)这样的数据来检索的时候，B+树会优先比较name来确定下一步的搜索方向，如果name相同再一次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，B+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才知道下一步去哪里查询。比如当(张三，F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后在匹配性别F的数据了，这个是非常重要的性质，即索引最左匹配特性。</p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>1、 最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a、b、c、d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>
<p>2、 = 和 in 可以乱序，比如 a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p>
<p>3、 尽量寻找区分度高的列作为索引，区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录越少，唯一键的区分度是1，而一些状态，性别字段可能在大数据面前区分度就是0，一般需要join的字段我们要求是0.1以上，平均1条扫描10条记录</p>
<p>4、 索引项不能参与计算，保持干净列，比如 from_unixtime(create_time) = ‘2018-04-20’就不能使用索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(‘2018-04-20’)</p>
<p>5、 尽量的扩展索引，不要新建索引，比如表中已经有a的索引，现在要加(a,b)索引，那么只需要修改原来的索引即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ThreadLocal源码学习]]></title>
      <url>http://jianwl.com/2018/04/19/ThreadLocal%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="常用方法-amp-字段"><a href="#常用方法-amp-字段" class="headerlink" title="常用方法 &amp; 字段"></a>常用方法 &amp; 字段</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-19/34870755.jpg" alt=""></p>
<h3 id="1、使用ThreadLocal的好处"><a href="#1、使用ThreadLocal的好处" class="headerlink" title="1、使用ThreadLocal的好处"></a>1、使用ThreadLocal的好处</h3><p>可以实现多线程，变量间互不干扰；举个例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class ThreadLocalDemo &#123;</div><div class="line">    public static class MyTask implements Runnable&#123;</div><div class="line">        private ThreadLocal&lt;Double&gt; threadLocal = new ThreadLocal&lt;&gt;();</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            threadLocal.set(Math.random());</div><div class="line">            System.out.println(String.format(&quot;thread name : %s, threadlocal: %.2f&quot;,Thread.currentThread().getName(), threadLocal.get()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MyTask task = new MyTask();</div><div class="line">        new Thread(task,&quot;测试线程1&quot;).start();</div><div class="line">        new Thread(task,&quot;测试线程2&quot;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">thread name : 测试线程2, threadlocal: 0.38</div><div class="line">thread name : 测试线程1, threadlocal: 0.85</div></pre></td></tr></table></figure>
<p>由结果可以看出，每个线程的变量是独立互不干扰的，如果把<code>ThreadLocal</code>换成Double等其他对象，每个线程的变量结果应该是一样的。</p>
<h3 id="2、提出问题"><a href="#2、提出问题" class="headerlink" title="2、提出问题"></a>2、提出问题</h3><ol>
<li>ThreadLocal为多线程共享变量，如何实现变量在多线程中互不干扰的？set()，get()</li>
<li>每个线程变量的存储方式，ThreadLocalMap</li>
<li>ThreadLocalMap是如何解决Hash冲突的；</li>
<li>ThreadLocal放置在Entry数组的索引位置，如何确定；</li>
<li>什么场景下会发生内存泄露，如何防止内存泄露；</li>
<li>为什么ThreadLocalMap是一个Entry数组的数据结构？明明一个threadlocal在一个线程中只能存入一个值；</li>
</ol>
<h4 id="1）如何实现变量在多线程中互不干扰的"><a href="#1）如何实现变量在多线程中互不干扰的" class="headerlink" title="1）如何实现变量在多线程中互不干扰的"></a>1）如何实现变量在多线程中互不干扰的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public void set(T value) &#123;</div><div class="line">    Thread t = Thread.currentThread(); // 获取当前线程</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null)</div><div class="line">        map.set(this, value); </div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ThreadLocalMap getMap(Thread t) &#123;</div><div class="line">    return t.threadLocals;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public T get() &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class="line">        if (e != null) &#123;</div><div class="line">            @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">            T result = (T)e.value;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return setInitialValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，每个线程中都有一个<code>ThreadLocalMap</code>数据结构，当执行set方法时，其值是保存在当前线程的<code>threadLocals</code>变量中，当执行get方法时，是从当前线程的<code>threadLocals</code>变量获取的，所以线程1中set的值，对线程2来说是拿不到的，而且在线程2中重新set的话，也不会影响到线程1中的值，保证了线程之间不会相互干扰；</p>
<p>那每个线程中的<code>ThreadLocalMap</code>究竟是什么？</p>
<h4 id="2）-每个线程变量的存储方式，ThreadLocalMap"><a href="#2）-每个线程变量的存储方式，ThreadLocalMap" class="headerlink" title="2） 每个线程变量的存储方式，ThreadLocalMap"></a>2） 每个线程变量的存储方式，ThreadLocalMap</h4><p>从名字上看，可以猜到它也是一个类似<code>HashMap</code>的数据结构，但是在ThreadLocal中，并没实现Map接口。</p>
<p>在ThreadLocalMap中，也是初始化一个大小16的Entry数组，Entry对象用来保存每一个key-value键值对，只不过这里的key永远都是ThreadLocal对象，通过ThreadLocal的set方法，结果把ThreadLocal对象自己当做key，放进了ThreadLocalMap中。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-23/56990974.jpg" alt=""></p>
<p>这里需要注意的是，ThreadLocalMap的Entry继承WeakReference和HashMap很大的区别是，Entry中没有next字段，所以就不存在链表的情况；</p>
<h4 id="3）Hash冲突"><a href="#3）Hash冲突" class="headerlink" title="3）Hash冲突"></a>3）Hash冲突</h4><p>没有链表结构，那发生Hash冲突了怎么办？</p>
<p>先看看ThreadLocalMap中插入一个key-value的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">private void set(ThreadLocal&lt;?&gt; key, Object value) &#123;</div><div class="line">   Entry[] tab = table;</div><div class="line">   int len = tab.length;</div><div class="line">   int i = key.threadLocalHashCode &amp; (len-1);</div><div class="line"></div><div class="line">   for (Entry e = tab[i];</div><div class="line">         e != null;</div><div class="line">         e = tab[i = nextIndex(i, len)]) &#123;</div><div class="line">         ThreadLocal&lt;?&gt; k = e.get();</div><div class="line"></div><div class="line">         if (k == key) &#123;</div><div class="line">             e.value = value;</div><div class="line">             return;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          if (k == null) &#123;</div><div class="line">              replaceStaleEntry(key, value, i);</div><div class="line">              return;</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tab[i] = new Entry(key, value);</div><div class="line">    int sz = ++size;</div><div class="line">    if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class="line">          rehash();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>每个ThreadLocal对象都有一个hash值<code>threadLocalHashCode</code>, <strong>每初始化一个ThreadLocal对象，hash值就增加一个固定的大小0x61c88647</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private final int threadLocalHashCode = nextHashCode();</div><div class="line"></div><div class="line">private static AtomicInteger nextHashCode =</div><div class="line">    new AtomicInteger();</div><div class="line">    </div><div class="line">private static final int HASH_INCREMENT = 0x61c88647;</div><div class="line"></div><div class="line">private static int nextHashCode() &#123;</div><div class="line">    return nextHashCode.getAndAdd(HASH_INCREMENT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-ThreadLocal如何定位到Entry数组的索引位的"><a href="#4-ThreadLocal如何定位到Entry数组的索引位的" class="headerlink" title="4) ThreadLocal如何定位到Entry数组的索引位的"></a>4) ThreadLocal如何定位到Entry数组的索引位的</h4><p>在插入过程中，根据ThreadLocal对象的Hash值，定位到table中的位置i，过程如下：</p>
<p>1、如果当前位置是空的，那么正好，就初始化一个Entry对象放置位置i上，位置i通过threadlocal的hashcode与table的长度的取余得到；</p>
<p>2、不巧，位置i已经有Entry对象了，如果这个Entry对象的key正好是即将设置的key，那么重新设置Entry中的value；</p>
<p>3、很不巧，位置i的Entry对象和即将设置的key没有关系，那么只能找到下一个空位置；</p>
<p>这样的话，在get的时候，也会根据ThreadLocal对象的hash值，定位table中的位置，然后判断位置Entry中的key是否和get的key一致，如果不一致，就判断下一个位置。</p>
<p>可以发现，set和get如果冲突严重的话，效率很低，因为ThreadLocalMap是Thread的一个属性，所以即使在自己的代码中控制了设置的元素个数，但还是不能控制其代码的行为；</p>
<h4 id="5）内存泄露"><a href="#5）内存泄露" class="headerlink" title="5）内存泄露"></a>5）内存泄露</h4><p>ThreadLocal可能导致内存泄露，为什么？</p>
<p>先看看Entry的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;     Object value;</div><div class="line">     Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class="line">         super(k);</div><div class="line">         value = v;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过之前的分析已经知道，当使用ThreadLocal保存一个value时，会在ThreadLocalMap中的数组插入一个Entry对象，按理说key-value都应该以强引用保存在Entry对象中，但在ThreadLocalMap的实现中，key被保存到了WeakReference对象中。</p>
<p>这就导致了一个问题，ThreadLocal在没有外部强引用是，发生GC时会被回收，如果创建ThreadLocal的线程一直持续运行，那么这个Entry对象中的value就有可能一直得不到回收，发生内存泄露；</p>
<h5 id="如何避免内存泄露"><a href="#如何避免内存泄露" class="headerlink" title="如何避免内存泄露"></a>如何避免内存泄露</h5><p>既然已经发现有内存泄露的隐患，自然有应对的策略，在调用ThreadLocal的get()、set()可能会清楚ThreadLocalMap中key为null的Entry对象，这样对应的value就没有GC Roots可达了，下次GC的时候就可以被回收，当然如果调用remove方法，肯定会删除对应的Entry对象；</p>
<p>如果使用ThreadLocal的set方法之后，没有显示的调用remove方法，就有可能发生内存泄露，所以养成良好的编程习惯十分重要，使用完ThreadLocal之后，记得调用remove方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_002()&#123;</div><div class="line">    ThreadLocal&lt;String&gt; hello = new ThreadLocal&lt;&gt;();</div><div class="line">    try &#123;</div><div class="line">        hello.set(&quot;Hello World!&quot;);</div><div class="line">    &#125;finally &#123;</div><div class="line">        hello.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-为什么ThreadLocalMap是一个Entry数组的数据结构？"><a href="#6-为什么ThreadLocalMap是一个Entry数组的数据结构？" class="headerlink" title="6. 为什么ThreadLocalMap是一个Entry数组的数据结构？"></a>6. 为什么ThreadLocalMap是一个Entry数组的数据结构？</h4><p>我们知道，每个线程都有一个ThreadLocalMap；之前一直困扰为什么它的数据结构是Entry数组，而不是Entry对象呢？</p>
<p>因为同一个线程中，可以设置多个ThreadLocal，每个threadLocal都会存入到线程的ThreadLocalMap对象中，所以是Entry数组的数据结构；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ThreadPoolExecutor线程池源码学习]]></title>
      <url>http://jianwl.com/2018/04/18/ThreadPoolExecutor%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="1-使用线程池的好处"><a href="#1-使用线程池的好处" class="headerlink" title="1. 使用线程池的好处"></a>1. 使用线程池的好处</h3><p>合理利用线程池能够带来三个好处。</p>
<p>① 降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗；</p>
<p>② 提高响应速度，当任务到达时，任务可以不需要等到线程创建就能立即执行。</p>
<p>③ 提高线程的可管理性。线程时稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p>
<h3 id="2-线程池的工作原理"><a href="#2-线程池的工作原理" class="headerlink" title="2. 线程池的工作原理"></a>2. 线程池的工作原理</h3><p>首先我们看下当一个新的任务提交到线程池之后，线程池是如何处理的；</p>
<p>① 线程池判断核心线程池里的线程是否都在执行任务；如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则执行第二步；</p>
<p>② 线程池判断工作队列是否已经满。如果工作队列已经满，则将新提交的任务存储在这个工作队列里进行等待。如果工作队列满了，则执行第三步；</p>
<p>③ 线程池判断线程池的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务</p>
<h4 id="线程池饱和策略"><a href="#线程池饱和策略" class="headerlink" title="线程池饱和策略"></a>线程池饱和策略</h4><p>这里提到了线程池的饱和策略，那我们就简单介绍下有哪些饱和策略</p>
<table>
<thead>
<tr>
<th style="text-align:center">策略类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AbortPolicy</td>
<td style="text-align:center">直接抛出异常，线程池默认处理策略；切记ThreadPoolExecutor.execute需要try catch，否则程序会直接退出</td>
</tr>
<tr>
<td style="text-align:center">DiscardPolicy</td>
<td style="text-align:center">不处理，丢弃掉</td>
</tr>
<tr>
<td style="text-align:center">DiscardOldestPolicy</td>
<td style="text-align:center">丢弃队里里最近一个任务，并执行当前任务</td>
</tr>
<tr>
<td style="text-align:center">CallerRusPolicy</td>
<td style="text-align:center">只用调用者所在线程来运行任务</td>
</tr>
<tr>
<td style="text-align:center">自定义策略</td>
<td style="text-align:center">可以根据引用场景需要来实现RejectedExecutionHandler接口自定义策略，如记录日志或持久化不能处理的任务</td>
</tr>
</tbody>
</table>
<h3 id="3-线程池工作流程图"><a href="#3-线程池工作流程图" class="headerlink" title="3. 线程池工作流程图"></a>3. 线程池工作流程图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-12/20324843.jpg" alt=""></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-12/82099386.jpg" alt=""></p>
<p>① 如果当前运行的线程小于corePoolSize,则创建新线程来执行任务（注意执行这一步需要获取全局锁）</p>
<p>② 如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue；</p>
<p>③ 如果BlockingQueue队列已满，则在非corePool中创建新的线程来处理任务（注意执行这一步需要获取全局锁）</p>
<p>④ 如果创建新线程将使当前运行的线程超出maximumPoolSize,任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法。</p>
<h3 id="4-线程池的使用"><a href="#4-线程池的使用" class="headerlink" title="4. 线程池的使用"></a>4. 线程池的使用</h3><h4 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h4><p>我们可以通过ThreadPoolExecutor来创建一个线程池；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, milliseconds, runnableTaskQueue,threadFactory, handler);</div></pre></td></tr></table></figure>
<p>创建一个线程池需要输入几个参数：</p>
<h5 id="1）corePoolSize（线程池的基本大小）"><a href="#1）corePoolSize（线程池的基本大小）" class="headerlink" title="1）corePoolSize（线程池的基本大小）"></a>1）corePoolSize（线程池的基本大小）</h5><p>当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads方法，线程池会提前创建并启动所有基本线程池</p>
<h5 id="2）runnableTaskQueue（任务队列）"><a href="#2）runnableTaskQueue（任务队列）" class="headerlink" title="2）runnableTaskQueue（任务队列）"></a>2）runnableTaskQueue（任务队列）</h5><p>用于保存等待执行的任务的阻塞队列，可以选择一下几个阻塞队列</p>
<p>① ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按FIFO(先进先出)原则对元素进行排序；</p>
<p>② LinkedBlockingQueue: 一个基于链表结构的阻塞队列，此队列按FIFO(先进先出)排序元素，吞吐量通常高于ArrayBlockingQueue，静态工厂方法Executors.newFixedThreadPool()使用这个队列</p>
<p>③ SyschronousQueue: 一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常高于LinkedBlockingQueue，静态工作方法 Executors.newCachedThreadPool使用这个队列；</p>
<p>④ PriorityBlockingQueue： 一个具有优先级的无限阻塞队列；</p>
<h5 id="3）maxmumPoolSize（线程池最大大小）"><a href="#3）maxmumPoolSize（线程池最大大小）" class="headerlink" title="3）maxmumPoolSize（线程池最大大小）"></a>3）maxmumPoolSize（线程池最大大小）</h5><p>线程池允许创建的最大线程数，如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是如果使用了无界的队列这个参数就没有效果了；</p>
<h5 id="4-ThreadFactory"><a href="#4-ThreadFactory" class="headerlink" title="4) ThreadFactory"></a>4) ThreadFactory</h5><p>用于设置创建线程工厂，可以通过线程工厂给创建出来的线程设置有语义的名字</p>
<h5 id="5）RejectedExecutionHandler（饱和策略）"><a href="#5）RejectedExecutionHandler（饱和策略）" class="headerlink" title="5）RejectedExecutionHandler（饱和策略）"></a>5）RejectedExecutionHandler（饱和策略）</h5><p>参考上述步骤2中的，饱和策略分析</p>
<h5 id="6）keepAliveTime（线程活动保持时间）"><a href="#6）keepAliveTime（线程活动保持时间）" class="headerlink" title="6）keepAliveTime（线程活动保持时间）"></a>6）keepAliveTime（线程活动保持时间）</h5><p>大于corePool(线程池基本大小)的空闲工作线程，保持存活的时间<strong>(在存活时间内，如果没有接受新任务，就会被销毁)</strong>。如果任务很多，每个任务执行的时间比较短，可以调整这个时间，提高线程的利用率；</p>
<h5 id="7）TimeUnit（线程活动保持时间的单位）"><a href="#7）TimeUnit（线程活动保持时间的单位）" class="headerlink" title="7）TimeUnit（线程活动保持时间的单位）"></a>7）TimeUnit（线程活动保持时间的单位）</h5><p>可选单位有天(DAYS)、小时(HOURS)、分钟(MINUTES)、毫秒(MILLISECONDS)、微秒(MICROSECONDS)</p>
<h3 id="5-源码分析"><a href="#5-源码分析" class="headerlink" title="5. 源码分析"></a>5. 源码分析</h3><h4 id="1）提问"><a href="#1）提问" class="headerlink" title="1）提问"></a>1）提问</h4><p>1、线程池新增任务的流程；execute(Runnable command)</p>
<p>2、线程池如何实现，在RUNING状态下，接受新任务，且处理队列里的任务；在SHUTDOWN状态下，不接受新任务，但处理新任务的 ;以及在STOP、TIDYING和TERMINATE状态下的处理方式；</p>
<p>3、线程池如何处理新增任务时，出现异常的；addWorkerFailed(Worker w)</p>
<p>4、线程池如何实现关闭的；</p>
<h5 id="1-1-execute-Runnable-command"><a href="#1-1-execute-Runnable-command" class="headerlink" title="1-1) execute(Runnable command)"></a>1-1) execute(Runnable command)</h5><p><code>execute</code>方法三个主要步骤：① 活动线程小于<code>corePoolSize</code>的时候创建新的线程；②活动线程大于<code>corePoolSize</code>先加入到任务队列当中；③ 任务队列满了再去启动新的线程，如果线程数达到最大值就拒绝任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public void execute(Runnable command) &#123; </div><div class="line">    if (command == null)</div><div class="line">        throw new NullPointerException();</div><div class="line">  </div><div class="line">    int c = ctl.get();</div><div class="line"></div><div class="line">    if (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">        if (addWorker(command, true))</div><div class="line">            return;</div><div class="line">        c = ctl.get();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">        int recheck = ctl.get();</div><div class="line"></div><div class="line">        if (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">            reject(command);</div><div class="line"></div><div class="line">        else if (workerCountOf(recheck) == 0)</div><div class="line">            addWorker(null, false);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    else if (!addWorker(command, false))</div><div class="line">        reject(command);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第 5 行：ctl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));</div></pre></td></tr></table></figure>
<p><code>ThreadPoolExecutor</code>用这一变量保存了两个内容：① 所有有效线程数量「workerCount」② 线程池运行状态「runState」; 低29位存<code>workerCounter</code>，高3位存<code>runState</code>, 这样<code>runState</code>有5个值；</p>
<ul>
<li>RUNNING: -1 &lt;&lt; 29</li>
<li>SHOTDOWN: 0 &lt;&lt; 29</li>
<li>STOP: 1 &lt;&lt; 29</li>
<li>TIDYING: 2 &lt;&lt; 29</li>
<li>TERMINATED: 3 &lt;&lt; 29</li>
</ul>
<p>线程池各状态转换比较复杂，记住下面内容就可以了：</p>
<ul>
<li>RUNNING状态：线程池正常运行，可以接受新的任务并处理队列中的任务；</li>
<li>SHUTDOWN状态：不再接受新的任务，但是会执行队列中的任务；</li>
<li>STOP状态：不再接受新任务，不处理队列中的任务，中断正在进行中的任务；</li>
<li>TIDYING: 所有任务都已关闭，有效线程数为0，将运行<code>terminated()</code>钩子方法；</li>
<li>TERMINATED: <code>terminated()</code>方法执行完毕；</li>
</ul>
<p>第 7 行：当有效线程数 小于 核心线程数时；</p>
<p><code>workerCountOf(ctl.get())</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private static final int COUNT_BITS = 29;</div><div class="line"></div><div class="line">private static final int CAPACITY   = (1 &lt;&lt; COUNT_BITS) - 1;</div><div class="line"></div><div class="line">private static int workerCountOf(int c)  &#123; return c &amp; CAPACITY; &#125;</div></pre></td></tr></table></figure>
<p>ctl的低29位存着有效线程数，通过 <code>c &amp; 00011111111111111111111111111</code>的方式得到<code>有效线程数</code></p>
<p>第 8 行：线程池有效线程数小于核心线程数时，新增任务成功，则退出；</p>
<p>源码中：<code>Worker类</code>、<code>addWorkerFailed()方法</code>在后文继续分析</p>
<p><code>addWorker(command,true)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">private boolean addWorker(Runnable firstTask, boolean core) &#123;</div><div class="line">    retry:</div><div class="line">    for (;;) &#123;</div><div class="line">        int c = ctl.get();</div><div class="line">        int rs = runStateOf(c); // 当前线程池状态</div><div class="line"></div><div class="line">        // 线程池状态为：SHUTDOWN STOP TIDYING TERMINATED 均不在接受新任务；</div><div class="line">        // 但是当状态为SHUTDOWN时，若此时队列不为空，为了保证队列中的任务能够被执行完；</div><div class="line">        // SHUTDOWN时通过addWoker(null,false)方法,新增有效线程数；「执行addWorker(null,false)，此时workerCounter == 0」</div><div class="line">        // 所以当线程池的状态为SHUTDOWN，firstTask == null，队列不为空时，将继续往下执行；</div><div class="line">        if (rs &gt;= SHUTDOWN &amp;&amp;</div><div class="line">            ! (rs == SHUTDOWN &amp;&amp;</div><div class="line">               firstTask == null &amp;&amp;</div><div class="line">               ! workQueue.isEmpty()))</div><div class="line">            return false;</div><div class="line"></div><div class="line">        for (;;) &#123;</div><div class="line">            int wc = workerCountOf(c); // 有效线程数</div><div class="line"></div><div class="line">            if (wc &gt;= CAPACITY ||</div><div class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</div><div class="line">                return false;</div><div class="line"></div><div class="line">            if (compareAndIncrementWorkerCount(c)) // 原子操作递增workerCount</div><div class="line">                break retry; // 操作成功跳出重试循环</div><div class="line">            c = ctl.get();  // Re-read ctl</div><div class="line">            if (runStateOf(c) != rs) // 如果线程池的状态发生变化则重试</div><div class="line">                continue retry;</div><div class="line">            // else CAS failed due to workerCount change; retry inner loop</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // workerCount递增成功</div><div class="line">    boolean workerStarted = false;</div><div class="line">    boolean workerAdded = false;</div><div class="line">    Worker w = null;</div><div class="line">    try &#123;</div><div class="line">        w = new Worker(firstTask);</div><div class="line">        final Thread t = w.thread;</div><div class="line">        if (t != null) &#123;</div><div class="line">            final ReentrantLock mainLock = this.mainLock;</div><div class="line">            // 并发的访问线程池workers对象必须加锁</div><div class="line">            mainLock.lock();</div><div class="line">            try &#123;</div><div class="line">                // Recheck while holding lock.</div><div class="line">                // Back out on ThreadFactory failure or if</div><div class="line">                // shut down before lock acquired.</div><div class="line">                int rs = runStateOf(ctl.get());</div><div class="line"></div><div class="line">                // RUNNING 状态 || SHUTDOWN状态下清理队列中剩余的任务</div><div class="line">                if (rs &lt; SHUTDOWN ||</div><div class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == null)) &#123;</div><div class="line">                    if (t.isAlive()) // precheck that t is startable</div><div class="line">                        throw new IllegalThreadStateException();</div><div class="line">                    // 将线程放到线程列表中</div><div class="line">                    workers.add(w);</div><div class="line">                    int s = workers.size();</div><div class="line">                    if (s &gt; largestPoolSize)</div><div class="line">                        largestPoolSize = s;</div><div class="line">                    workerAdded = true;</div><div class="line">                &#125;</div><div class="line">            &#125; finally &#123;</div><div class="line">                mainLock.unlock();</div><div class="line">            &#125;</div><div class="line">            // 启动新添加的线程，这个线程首先执行firstTask，然后不停的从队列中取任务执行；</div><div class="line">            if (workerAdded) &#123;</div><div class="line">                t.start(); // 最终执行的是ThreadPoolExecutor的runWorker方法</div><div class="line">                workerStarted = true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; finally &#123;</div><div class="line">        // 线程启动失败，则从workers中移除w并递减workerCount</div><div class="line">        if (! workerStarted)</div><div class="line">            // 递减workerCount会触发tryTerminate方法</div><div class="line">            addWorkerFailed(w);</div><div class="line">    &#125;</div><div class="line">    return workerStarted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第13 ~ 21行：</p>
<p><code>runState</code>为RUNNING状态且队列未满，双重检查，再次获取线程池ctl，判断当前线程池状态；若线程池为非RUNNING状态，则从workQueue中移除任务，并执行线程池拒绝任务策略；若当前有效线程数为0，则添加一个空任务到队列里；「理由是：当线程池状态为SHUTDOWN时，若队列不为空，有效线程数为0，需要通过添加空任务的方法，增加有效线程数」</p>
<p>第 23 ~ 25行：</p>
<p>① 线程池非RUNNING状态，拒绝新任务，执行拒绝策略 ② 队列满了且当且有效线程数大于最大线程数时，执行拒绝策略</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">final void reject(Runnable command) &#123;</div><div class="line">    handler.rejectedExecution(command, this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-2-Worker"><a href="#1-2-Worker" class="headerlink" title="1-2 Worker"></a>1-2 Worker</h5><p>任务添加成功后，实际执行的是runWorker(this)的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">private final class Worker</div><div class="line">    extends AbstractQueuedSynchronizer</div><div class="line">    implements Runnable</div><div class="line">&#123;</div><div class="line">    private static final long serialVersionUID = 6138294804551838833L;</div><div class="line"></div><div class="line">    final Thread thread;</div><div class="line"></div><div class="line">    Runnable firstTask;</div><div class="line"></div><div class="line">    volatile long completedTasks;</div><div class="line"></div><div class="line">    Worker(Runnable firstTask) &#123;</div><div class="line">        setState(-1); // inhibit interrupts until runWorker</div><div class="line">        this.firstTask = firstTask;</div><div class="line">        this.thread = getThreadFactory().newThread(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        runWorker(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected boolean isHeldExclusively() &#123;</div><div class="line">        return getState() != 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected boolean tryAcquire(int unused) &#123;</div><div class="line">        if (compareAndSetState(0, 1)) &#123;</div><div class="line">            setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected boolean tryRelease(int unused) &#123;</div><div class="line">        setExclusiveOwnerThread(null);</div><div class="line">        setState(0);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void lock()        &#123; acquire(1); &#125;</div><div class="line">    public boolean tryLock()  &#123; return tryAcquire(1); &#125;</div><div class="line">    public void unlock()      &#123; release(1); &#125;</div><div class="line">    public boolean isLocked() &#123; return isHeldExclusively(); &#125;</div><div class="line"></div><div class="line">    void interruptIfStarted() &#123;</div><div class="line">        Thread t;</div><div class="line">        if (getState() &gt;= 0 &amp;&amp; (t = thread) != null &amp;&amp; !t.isInterrupted()) &#123;</div><div class="line">            try &#123;</div><div class="line">                t.interrupt();</div><div class="line">            &#125; catch (SecurityException ignore) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第 20 行：runWorker简单来说做了两件事：</p>
<p>① 第一次启动会执行传进来的任务firstTask;</p>
<p>② 如果firstTask为空，则从workQueue中取任务，如果队列为空则等待<code>keepAliveTime</code>这么长的时间；</p>
<p>runWorker的核心代码为第10行代码中的<code>getTask()</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">final void runWorker(Worker w) &#123;</div><div class="line">        Thread wt = Thread.currentThread();</div><div class="line">        Runnable task = w.firstTask;</div><div class="line">        w.firstTask = null;</div><div class="line">        // 任务被锁住了，需要解锁才能被中断？「这个解释需要验证」</div><div class="line">        w.unlock(); // allow interrupts</div><div class="line">        boolean completedAbruptly = true;</div><div class="line">        try &#123;</div><div class="line">            // 先执行firstTask，若firstTask为空，则从队列里取任务执行；</div><div class="line">            while (task != null || (task = getTask()) != null) &#123;</div><div class="line">                w.lock();</div><div class="line">                if ((runStateAtLeast(ctl.get(), STOP) ||</div><div class="line">                     (Thread.interrupted() &amp;&amp;</div><div class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class="line">                    !wt.isInterrupted())</div><div class="line">                    wt.interrupt();</div><div class="line">                try &#123;</div><div class="line">                    // 任务执行前可以插入一些处理、子类重载该方法</div><div class="line">                    beforeExecute(wt, task);</div><div class="line">                    Throwable thrown = null;</div><div class="line">                    try &#123;</div><div class="line">                        task.run(); // 执行用户任务</div><div class="line">                    &#125; catch (RuntimeException x) &#123;</div><div class="line">                        thrown = x; throw x;</div><div class="line">                    &#125; catch (Error x) &#123;</div><div class="line">                        thrown = x; throw x;</div><div class="line">                    &#125; catch (Throwable x) &#123;</div><div class="line">                        thrown = x; throw new Error(x);</div><div class="line">                    &#125; finally &#123;</div><div class="line">                        // 和beforeExecute一样，留给子类去重载；</div><div class="line">                        afterExecute(task, thrown);</div><div class="line">                    &#125;</div><div class="line">                &#125; finally &#123;</div><div class="line">                    task = null;</div><div class="line">                    w.completedTasks++;</div><div class="line">                    w.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            completedAbruptly = false;</div><div class="line">        &#125; finally &#123;</div><div class="line">            // 结束线程的一些清理工作</div><div class="line">            processWorkerExit(w, completedAbruptly);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="1-3-runWorker-中的getTask-方法"><a href="#1-3-runWorker-中的getTask-方法" class="headerlink" title="1-3 runWorker()中的getTask()方法"></a>1-3 runWorker()中的getTask()方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">private Runnable getTask() &#123;</div><div class="line">    boolean timedOut = false; // Did the last poll() time out?</div><div class="line"></div><div class="line">    for (;;) &#123;</div><div class="line">        int c = ctl.get();</div><div class="line">        int rs = runStateOf(c);</div><div class="line"></div><div class="line">        // SHUTDOWN状态：队列不为空，不接受新任务，但有队列中的任务需要执行；</div><div class="line">        // Check if queue empty only if necessary.</div><div class="line">        if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</div><div class="line">            decrementWorkerCount();</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int wc = workerCountOf(c);</div><div class="line"></div><div class="line">        // Are workers subject to culling?</div><div class="line">        boolean timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class="line"></div><div class="line">        // timed == false 不允许核心线程超时，即使核心线程处于闲置装填也不会被回收；</div><div class="line">        // timed == true 允许核心线程超时,只要核心线程处于闲置状态就会被回收;</div><div class="line">        if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</div><div class="line">            &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) &#123;</div><div class="line">            if (compareAndDecrementWorkerCount(c))</div><div class="line">                return null;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            Runnable r = timed ?</div><div class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</div><div class="line">                workQueue.take();</div><div class="line">            if (r != null)</div><div class="line">                return r;</div><div class="line">            timedOut = true;</div><div class="line">        &#125; catch (InterruptedException retry) &#123;</div><div class="line">            timedOut = false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-4-addWorkerFailed"><a href="#1-4-addWorkerFailed" class="headerlink" title="1-4 addWorkerFailed"></a>1-4 addWorkerFailed</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private void addWorkerFailed(Worker w) &#123;</div><div class="line">    final ReentrantLock mainLock = this.mainLock;</div><div class="line">    mainLock.lock();</div><div class="line">    try &#123;</div><div class="line">        if (w != null)</div><div class="line">            workers.remove(w); // 移除任务</div><div class="line">        decrementWorkerCount(); // 递减workerCount</div><div class="line">        tryTerminate();</div><div class="line">    &#125; finally &#123;</div><div class="line">        mainLock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在addWorker时，出现异常时，需要做回滚操作，① 将任务从队列中移除； ② 将有效线程数减1 ③ 因为有效线程数发生变化了，所有需要尝试调用<code>tryTerminate</code>来终止线程池;</p>
<p><code>tryTerminate</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">final void tryTerminate() &#123;</div><div class="line">    for (;;) &#123;</div><div class="line">        int c = ctl.get();</div><div class="line">        // 以下状态直接返回</div><div class="line">        // 1. 线程池还处于RUNNING状态</div><div class="line">        // 2. runState &gt;= TIDYING 线程池已经停止了或正在停止了</div><div class="line">        // 3. SHUTDOWN状态但队列非空</div><div class="line">        if (isRunning(c) ||</div><div class="line">            runStateAtLeast(c, TIDYING) ||</div><div class="line">            (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</div><div class="line">            return;</div><div class="line"></div><div class="line">        // workerCount不为0，则还不能停止线程池，</div><div class="line">        if (workerCountOf(c) != 0) &#123; // Eligible to terminate</div><div class="line">            // ONLY_ONE: 只需中断1个线程去处理shutdown信号就可以了；</div><div class="line">            interruptIdleWorkers(ONLY_ONE);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        final ReentrantLock mainLock = this.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        try &#123;</div><div class="line">            // 进入TIDYING状态</div><div class="line">            if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) &#123;</div><div class="line">                try &#123;</div><div class="line">                    // 子类重载：一些资源清理工作</div><div class="line">                    terminated();</div><div class="line">                &#125; finally &#123;</div><div class="line">                    // TERMINATED状态</div><div class="line">                    ctl.set(ctlOf(TERMINATED, 0));</div><div class="line">                    // 进行awaitTermination</div><div class="line">                    termination.signalAll();</div><div class="line">                &#125;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125; finally &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">        // else retry on failed CAS</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-5-关闭线程池shutdown"><a href="#1-5-关闭线程池shutdown" class="headerlink" title="1-5 关闭线程池shutdown"></a>1-5 关闭线程池shutdown</h5><p>shutdown这个方法会将<code>runState</code>置为SHUTDOWN，会终止所有空闲的线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public void shutdown() &#123;</div><div class="line">    final ReentrantLock mainLock = this.mainLock;</div><div class="line">    mainLock.lock();</div><div class="line">    try &#123;</div><div class="line">        checkShutdownAccess();</div><div class="line">        // 线程池状态设为SHUTDOWN，如果已经至少是这个状态那么则直接返回</div><div class="line">        advanceRunState(SHUTDOWN);</div><div class="line">        // 注意这里是中断所有空闲的线程：runWorker中等待的线程被中断 → 进入processWorkerExit →</div><div class="line">        // tryTerminate方法中会保证队列中剩余的任务得到执行。</div><div class="line">        interruptIdleWorkers();</div><div class="line">        onShutdown(); // hook for ScheduledThreadPoolExecutor</div><div class="line">    &#125; finally &#123;</div><div class="line">        mainLock.unlock();</div><div class="line">    &#125;</div><div class="line">    tryTerminate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[StringBuilder源码学习]]></title>
      <url>http://jianwl.com/2018/04/02/StringBuilder%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="常用方法-amp-字段"><a href="#常用方法-amp-字段" class="headerlink" title="常用方法 &amp; 字段"></a>常用方法 &amp; 字段</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-3/88149991.jpg" alt=""></p>
<p>StringBuilder常用于单线程字符串的拼接，可以减小堆内存的开销；</p>
<p>StringBuilder继承<code>AbstractStringBuilder</code>抽象类，且实现了<code>CharSequence</code>、<code>Serializable</code>接口</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>通过append方法拼接字符串，为什么能够减少内存的开销呢，append();</li>
<li>StringBuffer和StringBuilder有什么区别？</li>
</ol>
<h4 id="1-如何拼接字符串"><a href="#1-如何拼接字符串" class="headerlink" title="1) 如何拼接字符串"></a>1) 如何拼接字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">    @Override</div><div class="line">    public StringBuilder append(String str) &#123;</div><div class="line">        super.append(str);</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// AbstractStringBuilder类   </div><div class="line">    public AbstractStringBuilder append(String str) &#123;</div><div class="line">        if (str == null)</div><div class="line">            return appendNull();</div><div class="line">        int len = str.length();</div><div class="line">        ensureCapacityInternal(count + len);</div><div class="line">        str.getChars(0, len, value, count);</div><div class="line">        count += len;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private AbstractStringBuilder appendNull() &#123;</div><div class="line">        int c = count;</div><div class="line">        ensureCapacityInternal(c + 4);</div><div class="line">        final char[] value = this.value;</div><div class="line">        value[c++] = &apos;n&apos;;</div><div class="line">        value[c++] = &apos;u&apos;;</div><div class="line">        value[c++] = &apos;l&apos;;</div><div class="line">        value[c++] = &apos;l&apos;;</div><div class="line">        count = c;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    private void ensureCapacityInternal(int minimumCapacity) &#123;</div><div class="line">        // overflow-conscious code</div><div class="line">        if (minimumCapacity - value.length &gt; 0)</div><div class="line">            expandCapacity(minimumCapacity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void expandCapacity(int minimumCapacity) &#123;</div><div class="line">        int newCapacity = value.length * 2 + 2;</div><div class="line">        if (newCapacity - minimumCapacity &lt; 0)</div><div class="line">            newCapacity = minimumCapacity;</div><div class="line">        if (newCapacity &lt; 0) &#123;</div><div class="line">            if (minimumCapacity &lt; 0) // overflow</div><div class="line">                throw new OutOfMemoryError();</div><div class="line">            newCapacity = Integer.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        value = Arrays.copyOf(value, newCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// Arrays类</div><div class="line">    public static char[] copyOf(char[] original, int newLength) &#123;</div><div class="line">        char[] copy = new char[newLength];</div><div class="line">        System.arraycopy(original, 0, copy, 0,</div><div class="line">                         Math.min(original.length, newLength));</div><div class="line">        return copy;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">// String类</div><div class="line">    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) &#123;</div><div class="line">        if (srcBegin &lt; 0) &#123;</div><div class="line">            throw new StringIndexOutOfBoundsException(srcBegin);</div><div class="line">        &#125;</div><div class="line">        if (srcEnd &gt; value.length) &#123;</div><div class="line">            throw new StringIndexOutOfBoundsException(srcEnd);</div><div class="line">        &#125;</div><div class="line">        if (srcBegin &gt; srcEnd) &#123;</div><div class="line">            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);</div><div class="line">        &#125;</div><div class="line">        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="1、拼接元素为null"><a href="#1、拼接元素为null" class="headerlink" title="1、拼接元素为null"></a>1、拼接元素为null</h5><p>第 9 ~ 10 行：如果拼接字符串为<code>null值</code>，则拼接<code>null</code>字符串；</p>
<p>第 20 行：确保当前字符数组数量加4，小于字符数组长度，否则扩容；</p>
<p>第 36 ~ 45行: 执行扩容；新容量为当前字符数组长度的2倍 + 2；如果新容量仍然小于，实际字符数量，则新容量等于实际字符数量；如果新容量溢出，则新容量赋值为Integer.MAX_VALUE;将原字符数组，赋值到扩容后的数组中；</p>
<p>第 49 ~ 53行：新建容量为扩容后的长度的字符数组，将原数组元素赋值到新数组中;</p>
<h5 id="2-新增元素不为null"><a href="#2-新增元素不为null" class="headerlink" title="2 新增元素不为null"></a>2 新增元素不为null</h5><p>第 11 ~12行: 获取新增字符串的长度，确保当前字符数量 + 新增字符串长度，在字符数组容量范围内，否则执行扩容；</p>
<p>第 13行: 将新增字符串转为字符数组，将其赋值到当前字符数组中实际元素的尾部，具体如图所示；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-4/53045816.jpg" alt=""></p>
<h5 id="3-为什么可以减少堆内存的开销？"><a href="#3-为什么可以减少堆内存的开销？" class="headerlink" title="3 为什么可以减少堆内存的开销？"></a>3 为什么可以减少堆内存的开销？</h5><p>因为字符串是不可变类，每次通过new的方式创建一个不同的字符串，都会在堆内存开辟一个空间；而通过StringBuilder的append方式拼接字符串，只会开辟一个字符数组内存空间，拼接的字符串将添加到字符数组中；从而减少了堆内存的开销；</p>
<h4 id="2）StringBuffer和StringBuilder有什么区别"><a href="#2）StringBuffer和StringBuilder有什么区别" class="headerlink" title="2）StringBuffer和StringBuilder有什么区别"></a>2）StringBuffer和StringBuilder有什么区别</h4><p>StringBuffer是线程安全的，在拼接元素方法中添加了同步锁；其他实现方式与StringBuilder一致；这里就不再赘述了；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">    @Override</div><div class="line">    public synchronized StringBuffer append(String str) &#123;</div><div class="line">        toStringCache = null;</div><div class="line">        super.append(str);</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">// AbstractStringBuilder类</div><div class="line">    public AbstractStringBuilder append(String str) &#123;</div><div class="line">        if (str == null)</div><div class="line">            return appendNull();</div><div class="line">        int len = str.length();</div><div class="line">        ensureCapacityInternal(count + len);</div><div class="line">        str.getChars(0, len, value, count);</div><div class="line">        count += len;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void ensureCapacityInternal(int minimumCapacity) &#123;</div><div class="line">        // overflow-conscious code</div><div class="line">        if (minimumCapacity - value.length &gt; 0)</div><div class="line">            expandCapacity(minimumCapacity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void expandCapacity(int minimumCapacity) &#123;</div><div class="line">        int newCapacity = value.length * 2 + 2;</div><div class="line">        if (newCapacity - minimumCapacity &lt; 0)</div><div class="line">            newCapacity = minimumCapacity;</div><div class="line">        if (newCapacity &lt; 0) &#123;</div><div class="line">            if (minimumCapacity &lt; 0) // overflow</div><div class="line">                throw new OutOfMemoryError();</div><div class="line">            newCapacity = Integer.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        value = Arrays.copyOf(value, newCapacity);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"> // String类</div><div class="line">     public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) &#123;</div><div class="line">        if (srcBegin &lt; 0) &#123;</div><div class="line">            throw new StringIndexOutOfBoundsException(srcBegin);</div><div class="line">        &#125;</div><div class="line">        if (srcEnd &gt; value.length) &#123;</div><div class="line">            throw new StringIndexOutOfBoundsException(srcEnd);</div><div class="line">        &#125;</div><div class="line">        if (srcBegin &gt; srcEnd) &#123;</div><div class="line">            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);</div><div class="line">        &#125;</div><div class="line">        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String源码学习]]></title>
      <url>http://jianwl.com/2018/04/01/String%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>从一段代码说起</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static void stringTest()&#123;</div><div class="line">    String str1 = &quot;a&quot; + &quot;b&quot; + 1;</div><div class="line">    String str2 = &quot;ab1&quot;;</div><div class="line">    System.out.println(str1 == str2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家猜猜结果如何？如果你的结论是<code>true</code>，再来一段代码；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static void stringTest2()&#123;</div><div class="line">    String str1 = new String(&quot;ab1&quot;);</div><div class="line">    String str2 = &quot;ab1&quot;;</div><div class="line">    System.out.println(str1 == str2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如何呢？正确答案是false。</p>
<p>让我们看看经过编译器编译后的代码如何：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 第一段代码</div><div class="line">    public static void stringTest()&#123;</div><div class="line">        String str1 = &quot;ab1&quot;;</div><div class="line">        String str2 = &quot;ab1&quot;;</div><div class="line">        System.out.println(str1 == str2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">// 第二段代码  </div><div class="line">    public static void stringTest2()&#123;</div><div class="line">        String str1 = new String(&quot;ab1&quot;);</div><div class="line">        String str2 = &quot;ab1&quot;;</div><div class="line">        System.out.println(str1 == str2);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>也就是说第一段代码经过了编译器优化，原因是编译器发现”a”+”b”+1和”ab1”的效果一样，都是不可变量组成，但是为什么他们的内存地址会相同呢？如果你对此还有兴趣，那就一起来看看String类源码；</p>
<h3 id="1-String类"><a href="#1-String类" class="headerlink" title="1 String类"></a>1 String类</h3><p>String类被<code>final</code>所修饰，也就是说String对象是不可变类。String类实现了<code>Serializable</code>、<code>Comparable&lt;String&gt;</code>、<code>CharSequence</code>接口。</p>
<p>Comparable接口有compareTo(String s)方法，CharSequence接口有lengh()、chatAt(int index)、subSequence(int start,int end)方法。</p>
<h3 id="2-String属性"><a href="#2-String属性" class="headerlink" title="2 String属性"></a>2 String属性</h3><p>String类中包含一个不可变的char数组来存放字符串，一个int型的变量hash用来存放计算后的哈希值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/** The value is used for character storage. */</div><div class="line">private final char value[];</div><div class="line"></div><div class="line">/** Cache the hash code for the string */</div><div class="line">private int hash; // Default to 0</div></pre></td></tr></table></figure>
<h3 id="3-String构造函数"><a href="#3-String构造函数" class="headerlink" title="3 String构造函数"></a>3 String构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//不含参数的构造函数，一般没什么用，因为value是不可变量</div><div class="line">    public String() &#123;</div><div class="line">        this.value = &quot;&quot;.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> </div><div class="line">//参数为String类型</div><div class="line">    public String(String original) &#123;</div><div class="line">        this.value = original.value;</div><div class="line">        this.hash = original.hash;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 声明编码类型    </div><div class="line">    public String(byte bytes[], Charset charset) &#123;</div><div class="line">        this(bytes, 0, bytes.length, charset);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">//参数为char数组，使用java.utils包中的Arrays类复制</div><div class="line">    public String(char value[]) &#123;</div><div class="line">        this.value = Arrays.copyOf(value, value.length);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">//从bytes数组中的offset位置开始，将长度为length的字节，以charsetName格式编码，拷贝到value</div><div class="line">    public String(byte bytes[], int offset, int length, Charset charset) &#123;</div><div class="line">        if (charset == null)</div><div class="line">            throw new NullPointerException(&quot;charset&quot;);</div><div class="line">        checkBounds(bytes, offset, length);</div><div class="line">        this.value =  StringCoding.decode(charset, bytes, offset, length);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="4-String-常用方法"><a href="#4-String-常用方法" class="headerlink" title="4 String 常用方法"></a>4 String 常用方法</h3><h4 id="1-equals"><a href="#1-equals" class="headerlink" title="1) equals()"></a>1) equals()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public boolean equals(Object anObject) &#123;</div><div class="line">    // 如果引用的是同一个对象，则为真</div><div class="line">    if (this == anObject) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (anObject instanceof String) &#123;</div><div class="line">        String anotherString = (String)anObject;</div><div class="line">        int n = value.length;</div><div class="line">        if (n == anotherString.value.length) &#123;</div><div class="line">            char v1[] = value;</div><div class="line">            char v2[] = anotherString.value;</div><div class="line">            int i = 0;</div><div class="line">            // 比较每一个字符是否相等</div><div class="line">            while (n-- != 0) &#123;</div><div class="line">                if (v1[i] != v2[i])</div><div class="line">                    return false;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>equals方法经常用得到，它用来判断两个对象内容是否相等，String对象判断流程：</p>
<blockquote>
<p>内存地址相同，则为真</p>
<p>如果对象类型不是String类型，则为假；否则继续判断</p>
<p>如果对象长度不相等，则为假，否则继续判断。</p>
<p>从后往前，判断String类中的char数组value的单个字符是否相等，有不相等则为假，如果一直相等直到一个数，则返回真。</p>
<p>由此可以看出，如果对两个超长的字符进行比较还是比较费时间的。</p>
</blockquote>
<h4 id="2-compareTo"><a href="#2-compareTo" class="headerlink" title="2) compareTo"></a>2) compareTo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public int compareTo(String anotherString) &#123;</div><div class="line">    // 自身字符串的长度</div><div class="line">    int len1 = value.length;</div><div class="line"></div><div class="line">    // 比较字符串的长度</div><div class="line">    int len2 = anotherString.value.length;</div><div class="line"></div><div class="line">    // 获取两个字符串的最小长度</div><div class="line">    int lim = Math.min(len1, len2);</div><div class="line">    char v1[] = value;</div><div class="line">    char v2[] = anotherString.value;</div><div class="line"></div><div class="line">    // 从头往后遍历，如果相同位置的字符不相等，则进行比较字符大小；</div><div class="line">    int k = 0;</div><div class="line">    while (k &lt; lim) &#123;</div><div class="line">        char c1 = v1[k];</div><div class="line">        char c2 = v2[k];</div><div class="line">        if (c1 != c2) &#123;</div><div class="line">            return c1 - c2;</div><div class="line">        &#125;</div><div class="line">        k++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 如果前面都相等，就等于当前字符长度 减去 比较字符长度</div><div class="line">    return len1 - len2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法写的很巧妙，先从0开始判断字符大小，如果两个对象能比较字符的地方比较完了还相等，就直接返回自身长度减比较对象长度，如果两个字符串长度相同，则返回0，巧妙地判断了三种情况。</p>
<h4 id="3-hashCode"><a href="#3-hashCode" class="headerlink" title="3) hashCode()"></a>3) hashCode()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public int hashCode() &#123;</div><div class="line">    int h = hash;</div><div class="line">    if (h == 0 &amp;&amp; value.length &gt; 0) &#123;</div><div class="line">        char val[] = value;</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; value.length; i++) &#123;</div><div class="line">            h = 31 * h + val[i];</div><div class="line">        &#125;</div><div class="line">        hash = h;</div><div class="line">    &#125;</div><div class="line">    return h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>String类重写了hashCode方法，Object中的hashCode方法是一个Native调动。String类的hash采用多项式计算。不同的字符串，hashcode是有可能相同的。</p>
<h4 id="4-intern"><a href="#4-intern" class="headerlink" title="4) intern()"></a>4) intern()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public native String intern();</div></pre></td></tr></table></figure>
<p>intern方法是Native调用，它的作用是在方法区中的常量池里通过equals方法寻找字面值相等的对象，如果没有找到则在常量池中开辟一片空间存放字符串并返回字符串引用，否则直接返回常量池中已存在String对象的引用。</p>
<p>将引言中第二段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// String a = new String(&quot;ab1&quot;);</div><div class="line">// 改为</div><div class="line">String a = new String(&quot;ab1&quot;).intern();</div></pre></td></tr></table></figure>
<p>则结果为<code>true</code>，原因在于a所指向的地址来源于常量池，而b所指向的字符串默认会调用这个方法，所以a和b都指向同一个地址。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hashtable源码学习]]></title>
      <url>http://jianwl.com/2018/03/29/Hashtable%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="常用方法-amp-字段"><a href="#常用方法-amp-字段" class="headerlink" title="常用方法 &amp; 字段"></a>常用方法 &amp; 字段</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-30/94194717.jpg" alt=""></p>
<p>Hashtable底层是一个数组 + 链表的数据结构，与HashMap的区别在于，其是线程安全、插入的键值对均不能为空、插入元素时，若发生哈希碰撞，Hashtable是从头结点插入，而HashMap1.8版本是从尾部插入；</p>
<h3 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h3><ol>
<li>新增元素时，如何保证线程安全, put()</li>
<li>扩容与数据迁移机制，rehash()</li>
</ol>
<h4 id="1-新增元素时，如何保证线程安全"><a href="#1-新增元素时，如何保证线程安全" class="headerlink" title="1) 新增元素时，如何保证线程安全"></a>1) 新增元素时，如何保证线程安全</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public synchronized V put(K key, V value) &#123;</div><div class="line">    // Make sure the value is not null</div><div class="line">    if (value == null) &#123;</div><div class="line">        throw new NullPointerException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Makes sure the key is not already in the hashtable.</div><div class="line">    Entry&lt;?,?&gt; tab[] = table;</div><div class="line">    int hash = key.hashCode();</div><div class="line">    int index = (hash &amp; 0x7FFFFFFF) % tab.length;</div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</div><div class="line">    for(; entry != null ; entry = entry.next) &#123;</div><div class="line">        if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</div><div class="line">            V old = entry.value;</div><div class="line">            entry.value = value;</div><div class="line">            return old;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    addEntry(hash, key, value, index);</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void addEntry(int hash, K key, V value, int index) &#123;</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    Entry&lt;?,?&gt; tab[] = table;</div><div class="line">    if (count &gt;= threshold) &#123;</div><div class="line">        // Rehash the table if the threshold is exceeded</div><div class="line">        rehash();</div><div class="line"></div><div class="line">        tab = table;</div><div class="line">        hash = key.hashCode();</div><div class="line">        index = (hash &amp; 0x7FFFFFFF) % tab.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Creates the new entry.</div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</div><div class="line">    tab[index] = new Entry&lt;&gt;(hash, key, value, e);</div><div class="line">    count++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第1行：<code>synchronized</code>关键字用于普通方法时，获取到对象实例的锁才能执行，所以在多线程环境下是线程安全的；</p>
<p>第3 ~ 9行：保证插入的键值对，key和value均不为空，否则抛出空指针异常；</p>
<p>第10行：获取插入元素，在数组中的索引位置；</p>
<p>第11 ~ 19行：获取索引位置的元素(元素为链表头结点)，遍历链表，若新增元素的key，在链表中已存在，则替换键值；</p>
<p>第28 ~ 36行: 如果当前的容量(count) 大于 扩容阈值(threshold),则进行扩容（rehash），得到插入元素在扩容后数组的索引位置；</p>
<p>第39 ~ 42行：获取索引位置的元素(链表头结点)，在头结点之前插入元素，容量 + 1；</p>
<h4 id="2-扩容与数据迁移机制"><a href="#2-扩容与数据迁移机制" class="headerlink" title="2) 扩容与数据迁移机制"></a>2) 扩容与数据迁移机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line"> protected void rehash() &#123;</div><div class="line"> 	  // ① 当前数组容量</div><div class="line">     int oldCapacity = table.length;</div><div class="line">     Entry&lt;?,?&gt;[] oldMap = table;</div><div class="line"></div><div class="line">     // overflow-conscious code ② 数组扩容为原数组的2倍 + 1</div><div class="line">     int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</div><div class="line">     // ③ 判断新容量是否溢出</div><div class="line">     if (newCapacity - MAX_ARRAY_SIZE &gt; 0) &#123; </div><div class="line">         if (oldCapacity == MAX_ARRAY_SIZE)</div><div class="line">             // Keep running with MAX_ARRAY_SIZE buckets</div><div class="line">             return;</div><div class="line">         newCapacity = MAX_ARRAY_SIZE;</div><div class="line">     &#125;</div><div class="line">     Entry&lt;?,?&gt;[] newMap = new Entry&lt;?,?&gt;[newCapacity];</div><div class="line"></div><div class="line">     modCount++;</div><div class="line">     // ④ 计算出新的扩容阈值</div><div class="line">     threshold = (int)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + 1);</div><div class="line">     table = newMap;</div><div class="line">// ⑤ 遍历数组，将数据迁移到新数组中</div><div class="line">     for (int i = oldCapacity ; i-- &gt; 0 ;) &#123;</div><div class="line">         for (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != null ; ) &#123;</div><div class="line">             Entry&lt;K,V&gt; e = old;</div><div class="line">             old = old.next;</div><div class="line"></div><div class="line">             int index = (e.hash &amp; 0x7FFFFFFF) % newCapacity;</div><div class="line">             e.next = (Entry&lt;K,V&gt;)newMap[index];</div><div class="line">             newMap[index] = e;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>第23 ~ 31行：从后往前遍历数组，得到链表首结点；若首结点不为空，继续遍历链表，将链表中的元素迁移到新容器，发生哈希碰撞时，采用从头结点插入的方式；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HashSet源码学习]]></title>
      <url>http://jianwl.com/2018/03/27/HashSet%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-29/4636358.jpg" alt=""></p>
<p>HashSet是以HashMap为基础类封装的对象，在新增元素E时，往HashMap中插入(E,Object)的键值对，因为在HashMap中Key是不存在重复的，所以保证了HashSet的唯一性。</p>
<h3 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h3><ol>
<li>如何保证唯一性；</li>
</ol>
<h4 id="如何保证唯一性"><a href="#如何保证唯一性" class="headerlink" title="如何保证唯一性"></a>如何保证唯一性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public HashSet() &#123;</div><div class="line">    map = new HashMap&lt;&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public boolean add(E e) &#123;</div><div class="line">    return map.put(e, PRESENT)==null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化HashSet时，会初始化HashMap对象；新增元素时，通过HashMap新增(E,Object)的键值对，从而保证了Key的唯一性；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HashMap源码学习]]></title>
      <url>http://jianwl.com/2018/03/22/HashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="1-常用方法-amp-字段"><a href="#1-常用方法-amp-字段" class="headerlink" title="1. 常用方法 &amp; 字段"></a>1. 常用方法 &amp; 字段</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-22/24207782.jpg" alt=""></p>
<p>JDK1.8之前，HashMap是一个数组 + 链表的数据结构；通过key的hash值与数组的长度取余，得到该键值对在数组中的索引位。如果该位置上，没有其他元素，就直接放进去；如果该位置上已经有数据了(不同的key值，hash值可能一样)，则通过链表的方式，将元素放到前一个元素的后面。如下图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-22/22584621.jpg" alt="图1-1"></p>
<p>JDK1.8，引入了红黑树，当链表的长度大于等于8时，会将链表转化为红黑树，红黑树的查找时间复杂度是o(lgn)，极大加快了查询的效率。</p>
<h3 id="2-提问"><a href="#2-提问" class="headerlink" title="2. 提问"></a>2. 提问</h3><ol>
<li>HashMap是如何实现扩容的，resize();</li>
<li>为什么HashMap的容量要保持为2的幂次方;</li>
<li>HashMap如何实现新增一个键值对,put(K,V);</li>
<li>HashMap为什么是线程不安全的？</li>
</ol>
<h4 id="1）HashMap是如何实现扩容的"><a href="#1）HashMap是如何实现扩容的" class="headerlink" title="1）HashMap是如何实现扩容的"></a>1）HashMap是如何实现扩容的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">final Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">    Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">    int oldCap = (oldTab == null) ? 0 : oldTab.length;</div><div class="line">    int oldThr = threshold;</div><div class="line">    int newCap, newThr = 0;</div><div class="line">    if (oldCap &gt; 0) &#123;</div><div class="line">        if (oldCap &gt;= MAXIMUM_CAPACITY) &#123; // 超过最大值不再扩容，随它碰撞去了;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            return oldTab;</div><div class="line">        &#125;</div><div class="line">        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY) // 如果当前容量大于16，且扩容2倍之后小于最大整数，则将阈值扩大2倍；</div><div class="line">            newThr = oldThr &lt;&lt; 1; // double threshold</div><div class="line">    &#125;</div><div class="line">    else if (oldThr &gt; 0) // initial capacity was placed in threshold 如果当前阈值大于0，则新的容量为当前阈值；</div><div class="line">        newCap = oldThr;</div><div class="line">    else &#123;               // zero initial threshold signifies using defaults</div><div class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">    &#125;</div><div class="line">    if (newThr == 0) &#123;</div><div class="line">        float ft = (float)newCap * loadFactor;</div><div class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</div><div class="line">                  (int)ft : Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line">    threshold = newThr;</div><div class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</div><div class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</div><div class="line">    table = newTab;</div><div class="line">    if (oldTab != null) &#123;</div><div class="line">        for (int j = 0; j &lt; oldCap; ++j) &#123;</div><div class="line">            Node&lt;K,V&gt; e;</div><div class="line">            if ((e = oldTab[j]) != null) &#123;</div><div class="line">                oldTab[j] = null;</div><div class="line">                if (e.next == null)</div><div class="line">                    newTab[e.hash &amp; (newCap - 1)] = e;</div><div class="line">                else if (e instanceof TreeNode)</div><div class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</div><div class="line">                else &#123; // preserve order</div><div class="line">                    Node&lt;K,V&gt; loHead = null, loTail = null;</div><div class="line">                    Node&lt;K,V&gt; hiHead = null, hiTail = null;</div><div class="line">                    Node&lt;K,V&gt; next;</div><div class="line">                    do &#123;</div><div class="line">                        next = e.next;</div><div class="line">                        if ((e.hash &amp; oldCap) == 0) &#123; // 原索引</div><div class="line">                            if (loTail == null)</div><div class="line">                                loHead = e;</div><div class="line">                            else</div><div class="line">                                loTail.next = e;</div><div class="line">                            loTail = e;</div><div class="line">                        &#125;</div><div class="line">                        else &#123; // 原索引 + oldCap</div><div class="line">                            if (hiTail == null)</div><div class="line">                                hiHead = e;</div><div class="line">                            else</div><div class="line">                                hiTail.next = e;</div><div class="line">                            hiTail = e;</div><div class="line">                        &#125;</div><div class="line">                    &#125; while ((e = next) != null);</div><div class="line">                    if (loTail != null) &#123;</div><div class="line">                        loTail.next = null;</div><div class="line">                        newTab[j] = loHead;</div><div class="line">                    &#125;</div><div class="line">                    if (hiTail != null) &#123;</div><div class="line">                        hiTail.next = null;</div><div class="line">                        newTab[j + oldCap] = hiHead;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return newTab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第2 ~ 25行：这十几行代码描述的是扩容时，如何确定新的容量和阈值；</p>
<table>
<thead>
<tr>
<th style="text-align:center">当前容量oldCap</th>
<th style="text-align:center">扩容后容量newCap</th>
<th style="text-align:center">扩容后阈值newThre</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">oldCap <code>&gt;=</code> Integer.MAX_VALUE</td>
<td style="text-align:center">oldCap</td>
<td style="text-align:center">Integer.MAX_VALUE</td>
</tr>
<tr>
<td style="text-align:center">16 <code>&lt;</code> oldCap <code>&lt;</code> Integer.MAX_VALUE / 2</td>
<td style="text-align:center">oldCap <code>*</code> 2</td>
<td style="text-align:center">oldThre <code>*</code> 2</td>
</tr>
<tr>
<td style="text-align:center">0 <code>&lt;</code> oldCap <code>&lt;=</code>16</td>
<td style="text-align:center">oldThre</td>
<td style="text-align:center">newCap <code>*</code> 0.75</td>
</tr>
<tr>
<td style="text-align:center">oldCap == 0</td>
<td style="text-align:center">16</td>
<td style="text-align:center">16 <code>*</code> 0.75 = 12</td>
</tr>
</tbody>
</table>
<p>扩容时有4种场景，① 当前容量大于最大整数时，此时不再扩容，随他进行碰撞；② 当前容量大于16且扩容后的容量小于最大整数时，新的容量和阈值都扩大2倍；③ 当容量小于等于16时，这种场景出现在：指定HashMap的初始容量，此时新容量等于当前阈值，新阈值等于新容量 <code>*</code> 加载因子。④ 当前容量为0时，默认初始化容量为16，阈值为12；</p>
<p>第28 ~ 72行：扩容之后，需要将原有的数据迁移到扩容后的结构中；分为三种场景：① 同一个哈希槽位上，只有一个元素；② 同一个哈希槽位上，不止一个元素但小于8个元素(这几个元素，已链表的结构存在)；③ 同一个哈希槽位上，超过8个元素，(此时为这些元素，已红黑树的结构存在)；这里我们重点分析前两种情况，对于红黑树，等后续研究透了，再来分析；</p>
<p>场景①分析：</p>
<p>对应代码为35 ~ 36行：很简单，如果当前哈希槽位只有一个元素，那么将当前元素的哈希值 取余 新数组容量，获取新数组中的索引位置即可；<code>e.hash &amp; (newcap - 1)</code> 等价于 <code>e.hash % newcap</code></p>
<p>场景②分析：</p>
<p>对应代码为39 ~ 68行：同一个哈希槽位上存在多个元素(小于8)，这些元素可分为两种情况：1、 元素的哈希值 &amp; oldCap == 0，其索引位置为原索引；2、元素的哈希值 &amp; oldCap != 0,其索引位置为原索引 + oldCap；举个例子说明下：oldCap = 8, newCap = 16;那么哈希值为15时，其在新数组中的位置为：7 + 8 = 15；哈希值为7时，在新数组中的位置为7跟原来的位置一样。</p>
<h4 id="2-HashMap的容量如何做到保持为2的幂次方"><a href="#2-HashMap的容量如何做到保持为2的幂次方" class="headerlink" title="2) HashMap的容量如何做到保持为2的幂次方"></a>2) HashMap的容量如何做到保持为2的幂次方</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public HashMap(int initialCapacity, float loadFactor) &#123;</div><div class="line">    if (initialCapacity &lt; 0)</div><div class="line">        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</div><div class="line">                                           initialCapacity);</div><div class="line">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">        initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</div><div class="line">        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</div><div class="line">                                           loadFactor);</div><div class="line">    this.loadFactor = loadFactor;</div><div class="line">    this.threshold = tableSizeFor(initialCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 返回大于等于当前值，最接近2的n次方的数据；</div><div class="line"> * Returns a power of two size for the given target capacity.</div><div class="line"> */</div><div class="line">static final int tableSizeFor(int cap) &#123;</div><div class="line">    int n = cap - 1; // 为了避免刚好是2的n次方的情况，这样会返回 2 的n+1次方，跟预期不符合；</div><div class="line">    n |= n &gt;&gt;&gt; 1; // 前2位都是1；</div><div class="line">    n |= n &gt;&gt;&gt; 2; // 前4位都是1；</div><div class="line">    n |= n &gt;&gt;&gt; 4; // 前8位都是1</div><div class="line">    n |= n &gt;&gt;&gt; 8; // 前16位都是1；</div><div class="line">    n |= n &gt;&gt;&gt; 16;// 前32位都是1；</div><div class="line">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化容量有两种方式：① newcap = 默认值16，loadfactor = 默认值0.75f; newthreshold = newcap <code>*</code> loadfactor; ② threshold = 最接近2的幂次方的初始化容量；之后在扩容阶段得到：newcap = threshold; newthreshold = loadfactor <code>*</code> newcap;</p>
<p>这里我们重点分析场景2：</p>
<p>核心代码为18 ~ 25行，初始化容量n，将 n - 1后的值进行移位或操作，可以保证从(n - 1)的二进制值，从高位1开始之后的二进制数都是1。这里举个例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">若初始化容量为6：</div><div class="line">n - 1 = 5 // 101</div><div class="line">n |= n &gt;&gt;&gt; 1 // 101 | 011 = 111 (保证1 ~ 2位，位移数都是1)</div><div class="line">n |= n &gt;&gt;&gt; 2 // 111 | 001 = 111 (保证3 ~ 4位，位移数都是1)</div><div class="line">n |= n &gt;&gt;&gt; 4 // 111 | 000 = 111 (保证5 ~ 8位，位移数都是1)</div><div class="line">n |= n &gt;&gt;&gt; 8 // 111 | 000 = 111 (保证9 ~ 16位，位移数都是1)</div><div class="line">n |= n &gt;&gt;&gt; 16 // 111 | 000 = 111 (保证17 ~ 32位，位移数都是1)</div><div class="line">最后将1加回去：</div><div class="line">n = n + 1 // 8,得到大于6，的最小2的幂次方的数值为2的3次方；</div></pre></td></tr></table></figure>
<h5 id="容量保持2的幂次方，有什么好处呢"><a href="#容量保持2的幂次方，有什么好处呢" class="headerlink" title="容量保持2的幂次方，有什么好处呢?"></a>容量保持2的幂次方，有什么好处呢?</h5><p>主要是跟HashMap的存储方式有关；这里简单介绍下：</p>
<p>1、hash(key)，得到插入元素的Key的哈希值;</p>
<p>2、hash(key) &amp; (n -1) , 得到元素在数组中的索引值；</p>
<p>这里重点说下步骤2，hash(key) &amp; (n -1)等价于 hash(key) % n,这个等价是有条件的，n必须是为n的幂次方。否则条件不成立；这里举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// n非2的幂次方</div><div class="line">hash(key): 11, n: 6</div><div class="line"></div><div class="line">hash(key) &amp; (n - 1) // 1011 &amp; 101 = 0001 明显不等于 11 % 6 = 5</div><div class="line"></div><div class="line">// n为2的幂次方</div><div class="line">hash(key): 11, n: 8</div><div class="line"></div><div class="line">hash(key) &amp; (n -1) // 1011 &amp; 111 = 0011 等于 11 % 8 = 3</div></pre></td></tr></table></figure>
<p>这就是为什么要保持容量为2的幂次方的原因。那么有人要问了，为什么要通过与操作进行求余，为什么不通过%操作符操作呢？因为与操作的执行效率高；</p>
<h4 id="3）HashMap如何实现新增一个键值对"><a href="#3）HashMap如何实现新增一个键值对" class="headerlink" title="3）HashMap如何实现新增一个键值对"></a>3）HashMap如何实现新增一个键值对</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public V put(K key, V value) &#123;</div><div class="line">    return putVal(hash(key), key, value, false, true);</div><div class="line">&#125;</div><div class="line"></div><div class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</div><div class="line">               boolean evict) &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</div><div class="line">    if ((tab = table) == null || (n = tab.length) == 0)</div><div class="line">        n = (tab = resize()).length; // tab为空，初始化tab；</div><div class="line">    if ((p = tab[i = (n - 1) &amp; hash]) == null) // 没有hash冲突</div><div class="line">        tab[i] = newNode(hash, key, value, null); // 在指定哈希槽插入元素；</div><div class="line">    else &#123;</div><div class="line">        Node&lt;K,V&gt; e; K k;</div><div class="line">        if (p.hash == hash &amp;&amp;</div><div class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) // hash一直；key一致；覆盖元素；</div><div class="line">            e = p;</div><div class="line">        else if (p instanceof TreeNode) // 在指定hash位取出的元素是红黑树，往红黑树中插入元素；</div><div class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); // 红黑树插入元素</div><div class="line">        else &#123;</div><div class="line">            for (int binCount = 0; ; ++binCount) &#123;</div><div class="line">                if ((e = p.next) == null) &#123; // 首节点后 + 数据</div><div class="line">                    p.next = newNode(hash, key, value, null);</div><div class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st // 链表长度大于等于8</div><div class="line">                        treeifyBin(tab, hash); // 转化为红黑树</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                if (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) // 如果key值相当直接退出循环;</div><div class="line">                    break;</div><div class="line">                p = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (e != null) &#123; // existing mapping for key</div><div class="line">            V oldValue = e.value;</div><div class="line">            if (!onlyIfAbsent || oldValue == null)</div><div class="line">                e.value = value;</div><div class="line">            afterNodeAccess(e);</div><div class="line">            return oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ++modCount;</div><div class="line">    if (++size &gt; threshold)</div><div class="line">        resize(); // 扩容</div><div class="line">    afterNodeInsertion(evict);</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第8 ~ 9行：当table的容量为空时，进行扩容；</p>
<p>第10 ~ 11行：获取新增元素在数组中的索引位置，若该位置上没有其他元素，则插入元素；</p>
<p>第12 ~ 40行: 这里着重解释，当存在hash冲突时(即新增元素的在数组中的索引存在其他元素)，如何解决； </p>
<p>第14 ~ 16行：当前元素与新增元素，key完全一样时，获取当前元素值；</p>
<p>第17 ~ 18行：当新增元素索引位，元素结构为红黑树时，往红黑树中插入元素；</p>
<p>第19 ~ 40行: 这里描述的是新增元素索引位，元素的结构为链表；</p>
<p>第20 ~ 26行：死循环，如果找到链表的尾部节点，则在链表后新增元素；判断链表长度 <code>&gt;=</code> 8，若是，则将链表转为红黑树；</p>
<p>第27 ~ 29行：若key与新增元素key相同，则直接退出死循环；</p>
<p>第30行：节点往后移动一位；</p>
<p>第33 ~ 38行：如何存在key相同的元素，是否需要覆盖键值；</p>
<p>第42 ~ 43行：如果元素长度大于扩容阈值，则进行扩容；</p>
<p>具体实现流程图如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-27/49558429.jpg" alt=""></p>
<h4 id="4）HashMap为什么是线程不安全的"><a href="#4）HashMap为什么是线程不安全的" class="headerlink" title="4）HashMap为什么是线程不安全的"></a>4）HashMap为什么是线程不安全的</h4><p>JDK1.7在并发情况下，在扩容时会造成环链问题，导致死循环，在JDK1.8版本中已经不存在了；但HashMap依旧不适用于多线程，HashMap的设计目标是简洁高效，没有采取任何措施保障put、remove操作的多线程安全；且在并发环境下，无法保障内存的可见性; </p>
<p>目前这个解释的比较含糊，后续给出具体实例，说明其线程不安全的情况；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LinkedList源码学习]]></title>
      <url>http://jianwl.com/2018/03/17/LinkedList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="常用方法-amp-字段梳理"><a href="#常用方法-amp-字段梳理" class="headerlink" title="常用方法 &amp; 字段梳理"></a>常用方法 &amp; 字段梳理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-17/8479145.jpg" alt=""></p>
<p>LinkedList的底层数据结构是链表，链表是由许多个节点连接而成，每个节点包含三个部分,如图所示：<img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-18/30835149.jpg" alt=""></p>
<p>pre、next分别存放上一个节点的地址和下一个节点的地址，data存放该节点的数据。</p>
<h3 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h3><ol>
<li>如何新增数据, add(E e)</li>
<li>如何在指定位置新增数据,add(int index,E e)</li>
<li>如何获取指定元素的位置，indexOf(Object o)</li>
<li>如何清空整个链表，clear()</li>
</ol>
<h4 id="1-如何新增数据"><a href="#1-如何新增数据" class="headerlink" title="1) 如何新增数据"></a>1) 如何新增数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">    linkLast(e);</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void linkLast(E e) &#123;</div><div class="line">    final Node&lt;E&gt; l = last;</div><div class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</div><div class="line">    last = newNode;</div><div class="line">    if (l == null)</div><div class="line">        first = newNode;</div><div class="line">    else</div><div class="line">        l.next = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static class Node&lt;E&gt; &#123;</div><div class="line">    E item;</div><div class="line">    Node&lt;E&gt; next;</div><div class="line">    Node&lt;E&gt; prev;</div><div class="line"></div><div class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">        this.item = element;</div><div class="line">        this.next = next;</div><div class="line">        this.prev = prev;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第7行：首先获取链表当前的尾节点l；</p>
<p>第8行：初始化新增节点newNode，包含上一个节点位置、节点数据、下一个节点位置；</p>
<p>第9行：设置新的尾节点为新增节点,last = newNode</p>
<p>第10 ~ 13行：尾节点l为空，那么设置首节点为新节点；反之，设置尾节点l的下一个节点位置为newNode; </p>
<p>第7行 ~ 第13行描述用图示表示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-18/1333450.jpg" alt=""></p>
<p>第18 ~ 27行：一个节点包括三部分：当前节点数据、上一个节点地址、下一个节点地址</p>
<h4 id="2-如何在指定位置新增数据"><a href="#2-如何在指定位置新增数据" class="headerlink" title="2) 如何在指定位置新增数据"></a>2) 如何在指定位置新增数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public void add(int index, E element) &#123;</div><div class="line">    checkPositionIndex(index);</div><div class="line"></div><div class="line">    if (index == size)</div><div class="line">        linkLast(element);</div><div class="line">    else</div><div class="line">        linkBefore(element, node(index));</div><div class="line">&#125;</div><div class="line"></div><div class="line">void linkLast(E e) &#123;</div><div class="line">    final Node&lt;E&gt; l = last;</div><div class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</div><div class="line">    last = newNode;</div><div class="line">    if (l == null)</div><div class="line">        first = newNode;</div><div class="line">    else</div><div class="line">        l.next = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Node&lt;E&gt; node(int index) &#123;</div><div class="line">    // assert isElementIndex(index);</div><div class="line"></div><div class="line">    if (index &lt; (size &gt;&gt; 1)) &#123;</div><div class="line">        Node&lt;E&gt; x = first;</div><div class="line">        for (int i = 0; i &lt; index; i++)</div><div class="line">            x = x.next;</div><div class="line">        return x;</div><div class="line">    &#125; else &#123;</div><div class="line">        Node&lt;E&gt; x = last;</div><div class="line">        for (int i = size - 1; i &gt; index; i--)</div><div class="line">            x = x.prev;</div><div class="line">        return x;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</div><div class="line">    // assert succ != null;</div><div class="line">    final Node&lt;E&gt; pred = succ.prev;</div><div class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</div><div class="line">    succ.prev = newNode;</div><div class="line">    if (pred == null)</div><div class="line">        first = newNode;</div><div class="line">    else</div><div class="line">        pred.next = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第2行：检查新增的位置是否越界了(位置范围是：[0,size])</p>
<p>第4 ~ 5行：新增的位置为链表长度(size),链表尾节点所在位置为：(size -1)，所以在该位置(size位置)新增节点，类似在尾节点新增节点。上一个功能点已描述，这里就不赘述了。</p>
<p>第22 ~ 36行：二分法，判断新增位置处于size的左部分([0,size/2])还是右部分((size/2,size -1])，左部分，从首节点，头往后找；右部分，从尾节点，从后往前找。</p>
<p>第38 ~ 48行：新增位置的原来节点为：succ;如果succ的上一个节点为null，则说明新增位置为首节点；反之，新增位置为中间节点。首节点位置新增时，初始化新增节点，并将原首节点位置的上个节点地址设置为新增节点；中间节点位置新增时，初始化新增节点，并将上一个节点的下一个节点位置，设置为新增节点。</p>
<p>第38 ~ 48行图示如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-18/17702167.jpg" alt=""></p>
<h4 id="3-如何获取指定元素的位置"><a href="#3-如何获取指定元素的位置" class="headerlink" title="3) 如何获取指定元素的位置"></a>3) 如何获取指定元素的位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public int indexOf(Object o) &#123;</div><div class="line">    int index = 0;</div><div class="line">    if (o == null) &#123;</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">            if (x.item == null)</div><div class="line">                return index;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">            if (o.equals(x.item))</div><div class="line">                return index;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从首节点开始遍历，寻找的对象分两种：空对象和非空对象；若节点值等于寻找的对象，返回游标值；</p>
<h4 id="4）如何清空整个链表"><a href="#4）如何清空整个链表" class="headerlink" title="4）如何清空整个链表"></a>4）如何清空整个链表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public void clear() &#123;</div><div class="line">    // Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</div><div class="line">    // - helps a generational GC if the discarded nodes inhabit</div><div class="line">    //   more than one generation</div><div class="line">    // - is sure to free memory even if there is a reachable Iterator</div><div class="line">    for (Node&lt;E&gt; x = first; x != null; ) &#123;</div><div class="line">        Node&lt;E&gt; next = x.next;</div><div class="line">        x.item = null;</div><div class="line">        x.next = null;</div><div class="line">        x.prev = null;</div><div class="line">        x = next;</div><div class="line">    &#125;</div><div class="line">    first = last = null;</div><div class="line">    size = 0;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遍历链表，将每一个节点的数据清空，最后将头结点和尾节点的数据清空，链表长度设置为0；</p>
<p>刚开始有个疑问，清空整个链表了，首、尾两节点已经为空了，为什么在第13行代码还需要再次清空呢？其实呢，首节点和尾节点单独存到变量里，所以在清空链表的时候，first、last节点都是有数据的，所以还需要单独清空。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList源码学习]]></title>
      <url>http://jianwl.com/2018/03/15/ArrayList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="1-常用方法-amp-字段梳理"><a href="#1-常用方法-amp-字段梳理" class="headerlink" title="1. 常用方法 &amp; 字段梳理"></a>1. 常用方法 &amp; 字段梳理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/41421167.jpg" alt=""></p>
<p>ArrayList底层的数据结构是数组，往列表中插入数据时，首先会检查列表的容量是否充足，当容量不够时，会自动扩容为当前容量的3倍，本节我们会带着问题，学习ArrayList的实现原理。</p>
<h3 id="2-提出问题"><a href="#2-提出问题" class="headerlink" title="2. 提出问题"></a>2. 提出问题</h3><ol>
<li>add(E)，新增元素时，如何实现自动扩容；</li>
<li>add(index,E)如何实现在指定位置插入元素，指定位置之后的元素如何处理？</li>
<li>clear(), 避免内存溢出，在移除元素时，我们应该注意些什么？</li>
</ol>
<h4 id="1）新增元素"><a href="#1）新增元素" class="headerlink" title="1）新增元素"></a>1）新增元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 新增元素入口</div><div class="line">   public boolean add(E e) &#123;</div><div class="line">       ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">       elementData[size++] = e;</div><div class="line">       return true;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private void ensureCapacityInternal(int minCapacity) &#123;</div><div class="line">       if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       ensureExplicitCapacity(minCapacity);</div><div class="line">   &#125;</div><div class="line">       </div><div class="line">   private void ensureExplicitCapacity(int minCapacity) &#123;</div><div class="line">       modCount++;</div><div class="line"></div><div class="line">       // overflow-conscious code</div><div class="line">       if (minCapacity - elementData.length &gt; 0)</div><div class="line">           grow(minCapacity);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private void grow(int minCapacity) &#123;</div><div class="line">       // overflow-conscious code</div><div class="line">       int oldCapacity = elementData.length;</div><div class="line">       int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 为原来的3倍；</div><div class="line">       if (newCapacity - minCapacity &lt; 0)</div><div class="line">           newCapacity = minCapacity;</div><div class="line">       if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</div><div class="line">           newCapacity = hugeCapacity(minCapacity);</div><div class="line">       // minCapacity is usually close to size, so this is a win:</div><div class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private static int hugeCapacity(int minCapacity) &#123;</div><div class="line">       if (minCapacity &lt; 0) // overflow</div><div class="line">           throw new OutOfMemoryError();</div><div class="line">       return (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">           Integer.MAX_VALUE :</div><div class="line">           MAX_ARRAY_SIZE;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>第3 ~ 4行：新增一个元素之前，需要先确保元素加进去之后，容量是否会溢出;如果容量够用，则往数组中插入数据；</p>
<p>第9 ~ 11行：如果是一个空列表，当前最小的容量(size + 1)为默认值10；</p>
<p>第 20 ~ 21行：如果新增元素后，元素的数量(size + 1) <strong>大于</strong> 数组的长度(elementData.length),则扩容；</p>
<p>第26 ~ 33行：扩容的逻辑，将列表的容量扩大为原来的3倍即(3 elementData.length),如果扩容后的容量 <strong>仍旧小于</strong> 元素的数量(size + 1),则将列表容量设置为(size + 1)，之后判断扩容后的容量是否大于「最大的整数 - 8」，如果大于，则等于最大整数；最后将原来的数组迁移到扩容后的数组；</p>
<p>第37 ~ 38行：为了防止当容量大于整数最大值即(大于Integer.MAX_VALUE)，此时会出现整型数据溢出，为负值，此时报内存溢出异常。</p>
<h4 id="2-指定位置新增元素"><a href="#2-指定位置新增元素" class="headerlink" title="2) 指定位置新增元素"></a>2) 指定位置新增元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public void add(int index, E element) &#123;</div><div class="line">    rangeCheckForAdd(index);</div><div class="line"></div><div class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">    System.arraycopy(elementData, index, elementData, index + 1,</div><div class="line">                     size - index);</div><div class="line">    elementData[index] = element;</div><div class="line">    size++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void rangeCheckForAdd(int index) &#123;</div><div class="line">    if (index &gt; size || index &lt; 0)</div><div class="line">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第12 ~ 13行：判断索引位置会不会越界即(大于数组大小和小于0)；</p>
<p>第 4 行：新增元素前，进行容量预估，容量不足时则扩容。上一个模块已描述，这里就不赘述了；</p>
<p>第 5 行：用图示的方式来说明，如果往元素2的位置插入元素，需要将元素2及之后的元素均向后挪动一位，这行代码就是执行这样的功能。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-17/23285668.jpg" alt=""></p>
<p>第7 ~ 8行：把元素放到数组中的指定位置，同时将列表的长度加1。</p>
<h4 id="3）清空数组"><a href="#3）清空数组" class="headerlink" title="3）清空数组"></a>3）清空数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public void clear() &#123;</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    // clear to let GC do its work</div><div class="line">    for (int i = 0; i &lt; size; i++)</div><div class="line">        elementData[i] = null;</div><div class="line"></div><div class="line">    size = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第5 ~ 6行：遍历数组中的每一个元素，将其设置为null，方便后续GC回收内存。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何定位消耗CPU最多的线程]]></title>
      <url>http://jianwl.com/2018/03/15/%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E6%B6%88%E8%80%97CPU%E6%9C%80%E5%A4%9A%E7%9A%84%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>话不多说，先上代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class CpuMax &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        for(int i =0 ; i &lt; 10 ; i ++)&#123;</div><div class="line">            new Thread(() -&gt; &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000L);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Thread t = new Thread(() -&gt; &#123;</div><div class="line">            int i = 0;</div><div class="line">            while (true)&#123;</div><div class="line">                i = (i++) /100;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t.setName(&quot;Business Thread&quot;);</div><div class="line">        t.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有11个线程，其中10个线程啥也不做，1个线程执行死循环操作。那么如何定位消耗CPU最多的这个线程呢？且看以下解决思路：</p>
<h4 id="1-运行程序"><a href="#1-运行程序" class="headerlink" title="1. 运行程序"></a>1. 运行程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 编译</div><div class="line">javac CpuMax.java</div><div class="line"></div><div class="line"># 运行</div><div class="line">java CpuMax</div></pre></td></tr></table></figure>
<h4 id="2-获取进程PID"><a href="#2-获取进程PID" class="headerlink" title="2. 获取进程PID"></a>2. 获取进程PID</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep &quot;CpuMax&quot;</div></pre></td></tr></table></figure>
<p>得到进程PID: 5055</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/8443081.jpg" alt=""></p>
<h4 id="3-获取进程中各线程所占CPU的占比"><a href="#3-获取进程中各线程所占CPU的占比" class="headerlink" title="3. 获取进程中各线程所占CPU的占比"></a>3. 获取进程中各线程所占CPU的占比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -Hp 5505</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/33928406.jpg" alt=""></p>
<p>根据图片信息，我们可以得到：CPU占比99.9%的线程PID为5084。线程PID转为16进制为：ox13dc</p>
<h4 id="4-打印进程中各个线程栈信息"><a href="#4-打印进程中各个线程栈信息" class="headerlink" title="4. 打印进程中各个线程栈信息"></a>4. 打印进程中各个线程栈信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jstack 5055</div></pre></td></tr></table></figure>
<p>得到以下信息:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-15/57356621.jpg" alt=""></p>
<p>步骤3中，我们得到CPU最大的线程的PID，16进制为：0x13dc，在线程栈中，我们可以根据16进制的PID得到一些关键信息。<strong>得到线程名为「Business Thread」为CPU占比最高的线程</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDK源码学习计划]]></title>
      <url>http://jianwl.com/2018/03/14/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习源码是非常重要的，列出几个感触比较深的地方：</p>
<ol>
<li>学习Java多年，如果连平时最常用的API的实现原理都不知道，说明这个人没什么好奇心，基础不扎实。</li>
<li>1年的经验，重复使用多年，自身的经验并没有随着年限而增长，个人成长处于停滞状态。</li>
<li>只有接触多了优秀的源码，才知道进步的方向，只是埋头苦干，很容易迷失自我。</li>
<li>沉淀的重要性，切记样样通，样样半桶水的状态。知道怎么做，问你原理半天憋不出的糗样。探究精神尤其重要；</li>
</ol>
<h3 id="1-JDK1期-学习计划-JDK1-8"><a href="#1-JDK1期-学习计划-JDK1-8" class="headerlink" title="1. JDK1期 学习计划(JDK1.8)"></a>1. JDK1期 学习计划(JDK1.8)</h3><h4 id="1）集合类"><a href="#1）集合类" class="headerlink" title="1）集合类"></a>1）集合类</h4><ul>
<li><a href="http://jianwl.com/2018/03/15/ArrayList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">ArrayList</a> [√]</li>
<li><a href="http://jianwl.com/2018/03/17/LinkedList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">LinkedList</a> [√]</li>
<li><a href="http://jianwl.com/2018/03/22/HashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">HashMap</a>「√」</li>
<li><a href="http://jianwl.com/2018/03/27/HashSet%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">HashSet</a>「√」</li>
<li><a href="http://jianwl.com/2018/03/29/Hashtable%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/">Hashtable</a>「√」</li>
</ul>
<h4 id="2）String相关"><a href="#2）String相关" class="headerlink" title="2）String相关"></a>2）String相关</h4><ul>
<li><a href="http://jianwl.com/2018/04/01/String%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">String</a>「√」</li>
<li><a href="http://jianwl.com/2018/04/02/StringBuilder%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">StringBuilder</a>「√」</li>
<li><a href="http://jianwl.com/2018/04/02/StringBuilder%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">StringBuffer</a>「√」</li>
</ul>
<h4 id="3-多线程-amp-线程池"><a href="#3-多线程-amp-线程池" class="headerlink" title="3) 多线程 &amp; 线程池"></a>3) 多线程 &amp; 线程池</h4><ul>
<li><a href="http://jianwl.com/2018/05/04/Thread%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">Thread</a>「√」</li>
<li><a href="http://jianwl.com/2018/04/19/ThreadLocal%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">ThreadLocal</a>「√」</li>
<li><a href="http://jianwl.com/2018/05/16/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">ConcurrentHashMap</a>「√」</li>
<li><a href="http://jianwl.com/2018/04/18/ThreadPoolExecutor%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/#more">ThreadPoolExecutor</a>「√」</li>
</ul>
<h4 id="4-原子操作"><a href="#4-原子操作" class="headerlink" title="4) 原子操作"></a>4) 原子操作</h4><ul>
<li><a href="http://jianwl.com/2018/05/19/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90CAS/#more">看AtomicInteger源码学习CAS算法</a>「√」</li>
</ul>
<h4 id="5-锁"><a href="#5-锁" class="headerlink" title="5) 锁"></a>5) 锁</h4><ul>
<li>ReentrantLock</li>
<li>ReentrantReadWriteLock</li>
</ul>
<h4 id="6）队列"><a href="#6）队列" class="headerlink" title="6）队列"></a>6）队列</h4><ul>
<li>ArrayBlockingQueue</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM类加载的那些事]]></title>
      <url>http://jianwl.com/2018/03/04/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java源代码被编译成class字节码，最终需要加载到虚拟机中才能运行。整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载7个阶段。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-5/76059548.jpg" alt=""></p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ol>
<li>通过一个类的全限定名获取描述此类的二进制字节流</li>
<li>通过这个字节流锁代表的静态存储结构保存为方法区的运行时数据结构；</li>
<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为范文方法区的入口；</li>
</ol>
<p>虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，实现这个动作的代码称为“类加载器”，JVM提供了3种类加载器：</p>
<ol>
<li>启动类加载器（Bootstrap ClassLoader）： 负责加载JAVA_HOME\lib目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li>
<li>扩展类加载器（Extension ClassLoader）: 负责加载JAVA_HOME\lib\ext目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>
<li>应用程序类加载器（Application ClassLoader）:负责加载用户路径(classpath)上的类库。</li>
</ol>
<p>JVM基于上述类加载器，通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-6/33598419.jpg" alt=""></p>
<p>双亲委派模型工作过程：当一个类加载器收到类加载任务,优先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。</p>
<p>双亲委派模型有什么好处？</p>
<p>比如位于rt.jar包中的类java.lang.Object,无论哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，确保了Object类在各种加载器环境中都是同一个类。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>为了确保Class文件符合当前虚拟机要求，需要对其字节流数据进行验证，主要包括格式验证、元数据验证、字节码验证和符号引用验证。</p>
<h4 id="1、格式校验"><a href="#1、格式校验" class="headerlink" title="1、格式校验"></a>1、格式校验</h4><p>验证字节流是否符合class文件格式的规范，并且能被当前虚拟机处理，如：是否以魔数0xCAFEBABE开头、主次版本号是否在当前虚拟机处理范围内、常量池是否有不支持的常量类型等。只有经过格式验证的字节流，才会存储到方法区的数据结构，剩余3个验证都基于方法区的数据进行。</p>
<h4 id="2、元数据验证"><a href="#2、元数据验证" class="headerlink" title="2、元数据验证"></a>2、元数据验证</h4><p>对字节码描述的数据进行语义分析，以保证符合Java语言规范，如是否继承了final修饰的类、是否实现了父类的抽象方法、是否覆盖了父类的final方法或final字段等。</p>
<h4 id="3、字节码验证"><a href="#3、字节码验证" class="headerlink" title="3、字节码验证"></a>3、字节码验证</h4><p>对类的方法体进行分析，确保在方法运行时不会有危害虚拟机的事件发生，如保证操作数栈的数据类型和指令代码序列的匹配、保证跳转指令的正确性、保证类型转换的有效性等。</p>
<h4 id="4、符号引用验证"><a href="#4、符号引用验证" class="headerlink" title="4、符号引用验证"></a>4、符号引用验证</h4><p>为了确保后续的解析动作能够正常执行，对符号引用进行验证，如通过字符串描述的全限定名是能找到对应的类、在指定类中是否存在符合方法的字段描述等。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在准备阶段，为类变量(static修饰)在方法区中分配内存并设置初始值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static int var = 100;</div></pre></td></tr></table></figure>
<p>准备阶段完成后，var值为0，而不是100。在初始化阶段，才会把100赋值给val，但是有个特殊情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final int VAL = 100;</div></pre></td></tr></table></figure>
<p>在编译阶段会为VAL生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue属性将VAL赋值为100。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是将常量池中的符号引用替换为直接引用的过程，符号引用和直接引用有什么不同？</p>
<ol>
<li>符号引用使用一组符号来描述所引用的目标，可以是任何形式的字面常量，定义在Class文件格式中。</li>
<li>直接引用可以是直接指向目标的指针，相对偏移量或者能间接定位目标的句柄。</li>
</ol>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化阶段是执行类构造器<clinit>方法的过程，<clinit>方法由类变量的赋值动作和静态语句块按照在源文件出现的顺序合并而成，该合并操作由编译器完成。</clinit></clinit></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private static int value = 100;</div><div class="line">static int a = 100;</div><div class="line">static int b = 100;</div><div class="line">static int c;</div><div class="line"></div><div class="line">static &#123;</div><div class="line">	c = a + b;</div><div class="line">	System.out.println(&quot;it only run once&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><clinit>方法对于类和接口不是必须的，如果一个类中没有静态代码块，也没有静态变量的赋值操作，那么编译器不会生成<clinit>；</clinit></clinit></li>
<li><clinit>方法与实例构造器不同，不需要显式的调用父类的<clinit>方法，虚拟机会保证父类的<clinit>优先执行。</clinit></clinit></clinit></li>
<li>为了防止多次执行<clinit>,虚拟机会确保<clinit>方法在多线程环境下被正确的加锁同步执行，如果有多个线程同时初始化一个类，那么只有一个线程能够执行<clinit>方法，其他线程进行阻塞等待，直到<clinit>执行完成。</clinit></clinit></clinit></clinit></li>
<li>注意：执行接口的<clinit>方法不需要先执行父接口的<clinit>，只有使用父接口中定义的变量时，才会执行。</clinit></clinit></li>
</ol>
<h3 id="类初始化场景"><a href="#类初始化场景" class="headerlink" title="类初始化场景"></a>类初始化场景</h3><p>虚拟机中严格规定了有且只有5种情况必须对类初始化。</p>
<ul>
<li>执行new、getstatic、putstatic和invokestatic指令；</li>
<li>使用reflect对类进行反射调用；</li>
<li>初始化一个类的时候，父类还没有初始化，会事先初始化父类；</li>
<li>启动虚拟机时，需要初始化包含main方法的类；</li>
<li>在JDK1.7中，如果java.lang.invoke.MethodHandler实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行初始化；</li>
</ul>
<p>一下几种情况，不会触发类初始化：</p>
<p>1、通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Parent&#123;</div><div class="line">	static int a = 100;</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;parent int !&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Parent&#123;</div><div class="line">	static &#123;</div><div class="line">	 	System.out.println(&quot;child init!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Init&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		System.out.println(Child.a);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为：<br>parent init !<br>100</p>
<p>2、定义对象数组，不会触发该类的初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Init&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		Parent[] parents = new Parent[10];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无输出，说明没有触发类Parent的初始化，但是这段代码做了什么？先看看生成的字节码指令；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-7/40936913.jpg" alt=""></p>
<p>anewarray指令为新数组分配空间，并触发Parent类的初始化，这个类由虚拟机自动生成。</p>
<p>3、常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Const&#123;</div><div class="line">	static final int A = 100;</div><div class="line">	static &#123;</div><div class="line">		System.out.println(&quot;Const init&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Init&#123;</div><div class="line">	public static void main(String[] args)&#123;</div><div class="line">		System.out.println(Const.A);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：100</p>
<p>说明没有触发类Const的初始化，在编译阶段，Const类中常量A的值100存储到Init类的常量池中，这两个类在编译成class文件之后就没有联系了。</p>
<p>4、通过类名获取Class对象，不会触发类的初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		Class cDog = Dog.class;</div><div class="line">		Class clazz = Class.forName(&quot;zzzzzzz.Cat&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Cat &#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;Cat is load&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Dog&#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;Dog is load&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：Cat is load, 所以通过Dog.class并不会触发Dog类的初始化动作。</p>
<p>5、通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否亚欧对类进行初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		Class clazz = Class.forName(&quot;zzzzzz.Cat&quot;,false,Cat.class.getClassLoader());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cat&#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	static &#123;</div><div class="line">		System.out.println(&quot;Cat is load&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6、通过ClassLoader默认的loadClass方法，也不会触发初始化动作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ClassLoader()&#123;&#125;.loadClass(&quot;zzzzzz.Cat&quot;);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM内存的那些事]]></title>
      <url>http://jianwl.com/2018/03/04/JVM%E5%86%85%E5%AD%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于C语言开发的程序员来说，在内存管理方面，必须负责每一个对象的生命周期，从有到无。对于Java程序员来说，在虚拟机内存管理的帮助下，不需要为每个new对象都匹配free操作，内存泄露和内存溢出等问题也不太容易出现，不过也正是把内存管理交给了虚拟机，一旦运行中的程序出现了内存泄露问题，给排查过程造成很大困难。所以只有理解了Java虚拟机的运行机制，才能够运筹帷幄于各种代码。本文以HotSpot为例说说虚拟机的那些事。</p>
<p>Java虚拟机把管理的内存划分为几个不同的数据区。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-4/82705423.jpg" alt=""></p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆是被所有线程共享的一块内存区域，主要用于存放对象实例，Java虚拟机规范中有这样一段描述：所有的对象实例和数据都要在堆上进行分配。为对象分配内存就是把一块大小确定的内存从堆内存中划分出来，通常有两种方法实现：</p>
<h4 id="1、指针碰撞法"><a href="#1、指针碰撞法" class="headerlink" title="1、指针碰撞法"></a>1、指针碰撞法</h4><p>假设Java堆中内存是完整的，已分配的内存和空闲内存分别在不同的一侧，通过一个指针作为分界点，需要分配内存时，仅仅需要把指针往空闲的一端移动与对象大小相等的距离。</p>
<h4 id="2、空闲列表法"><a href="#2、空闲列表法" class="headerlink" title="2、空闲列表法"></a>2、空闲列表法</h4><p>事实上，Java堆的内存并不是完整的，已分配的内存和空闲内存相互交错，JVM通过维护一个列表，记录可用的内存块信息，当分配操作发生时，从列表中找到一个足够大的内存块分配给对象实例，并更新列表上的记录。</p>
<p>对象创建时一个非常频繁的行为，进行堆内存分配时还需要考虑多线程并发问题，可能出现正在给对象A分配内存，指针或记录还未更新，对象B又同时分配到原来的内存，解决这个问题有两种方案：</p>
<p>1、采用CAS保证数据更新操作的原子性；</p>
<p>2、把内存分配的行为按照线程进行划分，在不同的空间中进行，每个线程在Java堆中预先分配一个内存块，称为本地线程分配缓冲(Thread Local Allocation Buffer,TLAB);</p>
<h4 id="堆内存细分"><a href="#堆内存细分" class="headerlink" title="堆内存细分"></a>堆内存细分</h4><p>堆内存由年轻代和老年代组成，而年轻代又被分为三部分：Eden空间、From Survivor空间、To Survivor空间，默认情况下年轻代安装8：1：1的比例来分配；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-1/86769879.jpg" alt=""></p>
<h3 id="Java栈"><a href="#Java栈" class="headerlink" title="Java栈"></a>Java栈</h3><p>Java栈是线程私有的，每个线程对应一个Java栈，每个线程在执行一个方法时会创建一个对应的栈帧(Stack Frame)，栈帧负责存储局部变量表、操作数栈、动态链接和方法返回地址等信息。每个方法的调用过程，相当于栈帧在Java栈的入栈和出栈的过程。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-4/89188723.jpg" alt=""></p>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>用于存放方法参数和方法内部定义的局部变量，其大小在代码编译期间已经确定，在方法运行期间不会改变。局部变量表以变量槽(Slot)为最小存储单位，每个Slot能够存放一个boolean、byte、char、short、int、float、reference和return address类型的32位数据，对于64位的数据类型long和double，虚拟机会以高位对齐的方式为其分配两个连续的Slot空间。</p>
<p>在方法执行时，如果是实例方法，即非static方法，局部变量表中第0位Slot默认存放对象实例的引用，在方法中可以通过关键字this进行访问，方法参数按照参数列表顺序，从第1位Slot开始分配，方法内部变量则按照定义顺序进行分配其余的Slot。</p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区和Java堆一样，是所有线程共享的内存区域，用于存放已被虚拟机加载的类信息、常量、静态变量和即时编译器编译后的代码等数据。运行时常量池是方法区的一部分，用于存放编译期间产生的各种字面常量和符号引用。</p>
<h3 id="指令计数器"><a href="#指令计数器" class="headerlink" title="指令计数器"></a>指令计数器</h3><p>指令计数器是线程私有的，每个线程都有独立的指令计数器，计数器记录着虚拟机正在执行的字节码指令的地址，分支、循环、跳转、异常处理和线程恢复等操作都依赖这个计数器完成。如果线程执行的是native方法，这个计数器则为空。</p>
<h3 id="通过参数控制各区域的大小"><a href="#通过参数控制各区域的大小" class="headerlink" title="通过参数控制各区域的大小"></a>通过参数控制各区域的大小</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-4-1/7809771.jpg" alt=""></p>
<h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>对象在内存中布局可以分成三块区域：对象头、实例数据和对齐填充。</p>
<h5 id="1、对象头"><a href="#1、对象头" class="headerlink" title="1、对象头"></a>1、对象头</h5><p>对象头包括两部分信息：运行时数据和类型指针，如果对象是一个数组，还需要一块用于记录数组长度的数据。</p>
<p>1.1、运行时数据包括哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向锁和偏向时间戳等，这部分数据在32位和64位虚拟机中的长度分别为32bit和64bit，官方称为“Mark Word”。Mark Word被设计成非固定的数据结构，以实现在有限空间内保存尽可能多的数据。</p>
<p>32为虚拟机中，对象未被锁定的状态下，Mark Word的32bit中25bit存储对象的HashCode、4bit存储对象分代年龄、2bit存储锁标志位、1bit固定为0，具体如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-3-4/80147108.jpg" alt=""></p>
<p>其他状态(轻量级锁定、重量级锁定、GC锁、可偏向锁)下Mark Word的存储内容如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">存储内容</th>
<th style="text-align:center">标志位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">轻量级锁定</td>
<td style="text-align:center">指向锁记录的指针</td>
<td style="text-align:center">00</td>
</tr>
<tr>
<td style="text-align:center">重量级锁定</td>
<td style="text-align:center">指向重量级的指针</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">GC标志</td>
<td style="text-align:center">空</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">可偏向</td>
<td style="text-align:center">偏向线程ID、时间戳、分代年龄</td>
<td style="text-align:center">01</td>
</tr>
<tr>
<td style="text-align:center">未锁定</td>
<td style="text-align:center">对象哈希码、分代年龄</td>
<td style="text-align:center">01</td>
</tr>
</tbody>
</table>
<p>1.2 、对象头的类型指针指向该对象的类元数据、虚拟机通过这个指针可以确定该对象是哪个类的实例。</p>
<h5 id="2、实例数据"><a href="#2、实例数据" class="headerlink" title="2、实例数据"></a>2、实例数据</h5><p>实例数据就是在程序代码中所定义的各种类型的字段，包括从父类继承的，这部分的存储顺序会受到虚拟机分配策略和字段在源码中定义顺序的影响。</p>
<h5 id="3、对齐填充"><a href="#3、对齐填充" class="headerlink" title="3、对齐填充"></a>3、对齐填充</h5><p>由于HotSpot的自动内存管理要求对象的起始地址必须是8字节的整数倍，即对象的大小必须是8字节的整数倍，对象头的数据正好是8的整数倍，所以当实例数据不够8字节整数倍时，需要通过对齐填充进行补全。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解Java虚拟机</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用ELK搭建自己的日志分析系统]]></title>
      <url>http://jianwl.com/2017/11/05/%E7%94%A8ELK%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>不管用于记录、监控，日志对于任何系统来说都是一个极其重要的部分，但一般的日志的数据量会比较大，并且分散在各个地方，当管理的服务器比较少，我们还可以逐一登录到各个服务器去查看、分析。但如果服务器比较多，这种方法就显得力不从心了。基于这种场景，一些集中式的日志系统也就产生了。比较成熟<a href="https://www.splunk.com/zh-hans_cn" target="_blank" rel="external">Splunk</a>、Facebook的Scribe、Apache的Chukwa、Cloudera的Fluentd和ELK等。</p>
<h3 id="2-概述"><a href="#2-概述" class="headerlink" title="2 概述"></a>2 概述</h3><p>ELK不是一款软件，是三个软件产品的首字母缩写：ElasticSearc、Logstash和Kibana，这三款都是开源的，目前归于<code>Elastic.co</code>公司。三者之间的关系如图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/58949300.jpg" alt=""></p>
<h4 id="1）Elasticsearch"><a href="#1）Elasticsearch" class="headerlink" title="1）Elasticsearch"></a>1）Elasticsearch</h4><p>Elasticsearch是一个实时的分布式搜索和分析引擎，它可以用于全文搜索、结构化搜索以及分析，它是基于Apache Lucence基础上开发搜索引擎，使用Java语言编写。作为ELK协议栈的核心，它用于集中存储数据。</p>
<p>特点：</p>
<ul>
<li>实时</li>
<li>分布式</li>
<li>面向文档</li>
<li>高可用性、易扩展、支持集群、分片、复制</li>
<li>接口友好，RestFUL接口风格；</li>
</ul>
<h4 id="2）Logstash"><a href="#2）Logstash" class="headerlink" title="2）Logstash"></a>2）Logstash</h4><p>Logstash是一个具有实时渠道能力的数据收集引擎，是用JRuby语言编写，其作者是世界上著名的运维工程师乔丹西塞。</p>
<p>特点：</p>
<ul>
<li>几乎可以访问任何数据</li>
<li>可以和多种外部应用结合</li>
<li>支持弹性扩展</li>
</ul>
<p>组成部分</p>
<ul>
<li>INPUTS，从各个服务器获取数据</li>
<li>FILTERS，过滤处理获取到的数据</li>
<li>OUTPUTS，将处理完的数据输出到指定地方</li>
</ul>
<h4 id="3）Kibana"><a href="#3）Kibana" class="headerlink" title="3）Kibana"></a>3）Kibana</h4><p>Kibana是一款基于Apache开源协议，使用Javascript语言编写，为Elasticsearch提供分析和可视化的Web平台。它可以在Elasticsearch的搜索中查找、交互数据，并生成各种维度的表图。</p>
<h3 id="3-ELK平台搭建-MacOS"><a href="#3-ELK平台搭建-MacOS" class="headerlink" title="3 ELK平台搭建(MacOS)"></a>3 ELK平台搭建(MacOS)</h3><h4 id="1-Elasticsearch搭建"><a href="#1-Elasticsearch搭建" class="headerlink" title="1) Elasticsearch搭建"></a>1) Elasticsearch搭建</h4><p>1 下载Elasticsearch &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.zip</div><div class="line">unzip elasticsearch-5.6.3.zip</div></pre></td></tr></table></figure>
<p>2 启动Elasticsearch</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./$&#123;ES_HOME&#125;/bin/elasticsearch</div></pre></td></tr></table></figure>
<p>3 检查是否启动成功</p>
<p>健康值绿色: 所有主、复制分片都是正常的；</p>
<p>健康值黄色: 所有主分片正常，部分或全部复制分片数有问题；</p>
<p>健康值红色: 部分或全部主分片有问题 </p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/55815051.jpg" alt=""></p>
<p>4 安装elastic-head</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/mobz/elasticsearch-head.git</div><div class="line">cd elasticsearch-head</div><div class="line">npm install</div><div class="line">npm run start</div></pre></td></tr></table></figure>
<p>通过elastic-head查看elasticsearch的数据：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/4570828.jpg" alt=""></p>
<h4 id="2）Logstash搭建"><a href="#2）Logstash搭建" class="headerlink" title="2）Logstash搭建"></a>2）Logstash搭建</h4><p>1 下载Logstash &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-5.6.3.zip</div><div class="line">unzip logstash-5.6.3.zip</div></pre></td></tr></table></figure>
<p>2 Logstash管道测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd logstash-5.6.3</div><div class="line">bin/logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&apos;</div></pre></td></tr></table></figure>
<p><code>-e</code>表示能够在命令行中配置logstash的配置(一次性的),通过上述命令启动logstash，当你看到<code>Pipeline main started</code>，在命令行中输入<code>hello world</code>，会得到一个输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello world!</div><div class="line">2017-11-05T01:53:55.571Z jianweilindeMacBook-Pro.local hello world!</div></pre></td></tr></table></figure>
<p>3 配置Filebeat发送日志到Logstash</p>
<p>1) 下载Filebeat &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.6.3-darwin-x86_64.tar.gz</div><div class="line">tar zxvf filebeat-5.6.3-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure>
<p>2) 配置filebeat.yml</p>
<ul>
<li><p>下载<a href="http://oc5a5l0a0.bkt.clouddn.com/logstash-tutorial.log" target="_blank" rel="external">logstash-tutorial.log</a></p>
</li>
<li><p>配置filebeat.yml</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filebeat.prospectors:</div><div class="line">- input_type: log</div><div class="line">  paths:</div><div class="line">    - /Users/jianweilin/Downloads/logstash-tutorial.log</div><div class="line">    - /var/log/*.log</div><div class="line">output.logstash:</div><div class="line">  hosts: [&quot;localhost:5043&quot;]</div></pre></td></tr></table></figure>
<p>特别注意：logstash-tutorial.log的路径是刚刚下载的文件，在你本地的路径。</p>
<p>3）配置Logstash配置文件</p>
<p>在${LOGSTASH_HOME}目录下创建一个配置文件<code>first-pipeline.conf</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    beats &#123;</div><div class="line">        port =&gt; &quot;5043&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; [ &quot;localhost:9200&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述配置的意思是：从filebeat中接收数据，之后发送到elasticsearch中</p>
<p>4) 启动logstash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f first-pipeline.conf --config.reload.automatic</div></pre></td></tr></table></figure>
<p><code>--config.reload.automatic</code>表示之后如果first-pipeline.conf配置文件更新规则，会自动更新生效，不需要重启logstash；</p>
<p>5) 启动filebeat将日志发送到logstash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./filebeat -e -c filebeat.yml -d &quot;publish&quot;</div></pre></td></tr></table></figure>
<p>6) 在elastic-head中查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/18364515.jpg" alt=""></p>
<p>elasticsearch健康值为黄色，是因为只有一个主分片，没有复制分片；</p>
<h4 id="3-Kibana搭建"><a href="#3-Kibana搭建" class="headerlink" title="3) Kibana搭建"></a>3) Kibana搭建</h4><p>1 Kibana下载 &amp; 解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.3-darwin-x86_64.tar.gz</div><div class="line">tar zxvf kibana-5.6.3-darwin-x86_64.tar.gz</div></pre></td></tr></table></figure>
<p>2 启动Kibana</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;KIBANA_HOME&#125;/bin/kibana</div></pre></td></tr></table></figure>
<p>3 使用Kibana连接Elasticsearch</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/96019826.jpg" alt=""></p>
<ul>
<li>访问<code>localhost:5601</code>进入Kibana的UI界面</li>
<li>在Kibana中配置Elasticsearch中索引的配置规则，符合配置规则的索引才会在Kibana中搜索到</li>
<li>在Kibana中配置，数据以什么维度进行展示，通常来说设置为时间维度；</li>
<li>在Kibana中点击create按钮创建索引匹配规则；</li>
</ul>
<p>4 在Kibana中搜索日志</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-5/5428734.jpg" alt=""></p>
<p>至此ELK平台搭建完毕。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html" target="_blank" rel="external">Elasticsearch官方文档</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/5.6/index.html" target="_blank" rel="external">Logstash官方文档</a></li>
<li><a href="https://www.elastic.co/guide/en/kibana/5.6/install.html" target="_blank" rel="external">Kibana官方文档</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elastic-Job-Lite源码分析---作业配置]]></title>
      <url>http://jianwl.com/2017/11/01/Elastic-Job-Lite%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BD%9C%E4%B8%9A%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><p>涉及到主要类的类图如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/79872342.jpg" alt=""></p>
<h3 id="2-作业配置"><a href="#2-作业配置" class="headerlink" title="2 作业配置"></a>2 作业配置</h3><p>一个作业(ElasticJob)的调度，需要配置独有的一个作业调度器(JobScheduler),两者是1:1的关系，这点大家要注意下，当然下文看代码也会看到。</p>
<p>作业调度器的创建可以配置四个参数：</p>
<ol>
<li>注册中心(CoordinatorRegistryCenter): 用于协调分布式服务，必填；</li>
<li>Lite作业配置(LiteJobConfiguration): 必填</li>
<li>作业事件总线(JobEventBus): 对作业事件异步监听。选填</li>
<li>作业监听器(ElasticJobListener): 对作业执行前，执行后进行同步监听。选填</li>
</ol>
<h3 id="2-1-注册中心配置"><a href="#2-1-注册中心配置" class="headerlink" title="2.1 注册中心配置"></a>2.1 注册中心配置</h3><p>Elastic-Job抽象了注册中心接口(RegistryCenter),并提供了基于Zookeeper的注册中心实现(ZookeeperRegistryCenter)。</p>
<p>ZookeeperRegistryCenter对应配置类为ZookeeperConfiguration，该类注释很完整，这里我们重点说下<code>namespace</code>属性。如果你有多个不同Elastic-Job集群时，使用相同Zookeeper，可以配置不同的<code>namespace</code>进行隔离。</p>
<p>注册中心的初始化，我们会在后文<code>Elastic-Job-Lite源码解析---注册中心</code>详细分享。</p>
<h3 id="2-2-Lite作业配置"><a href="#2-2-Lite作业配置" class="headerlink" title="2.2 Lite作业配置"></a>2.2 Lite作业配置</h3><p><code>LiteJobConfiguration</code>继承自接口<code>JobRootConfiguration</code>，作为<code>Elastic-Job-Lite</code>里的作业(LiteJob)配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public final class LiteJobConfiguration implements JobRootConfiguration &#123;</div><div class="line">    private final JobTypeConfiguration typeConfig;</div><div class="line">    private final boolean monitorExecution;</div><div class="line">    private final int maxTimeDiffSeconds;</div><div class="line">    private final int monitorPort;</div><div class="line">    private final String jobShardingStrategyClass;</div><div class="line">    private final int reconcileIntervalMinutes;</div><div class="line">    private final boolean disabled;</div><div class="line">    private final boolean overwrite;</div><div class="line">    </div><div class="line">    // ... 省略部分get方法</div><div class="line">    public static class Builder &#123;</div><div class="line">	    // ... 省略部分属性</div><div class="line">	    public final LiteJobConfiguration build() &#123;</div><div class="line">	            return new LiteJobConfiguration(jobConfig, monitorExecution, maxTimeDiffSeconds, monitorPort, jobShardingStrategyClass, reconcileIntervalMinutes, disabled, overwrite);</div><div class="line">	        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>typeConfig</code>:作业类型配置，必填</li>
<li><code>monitorExecution</code>: 监控作业运行时状态，默认为<code>false</code>，选填。</li>
</ul>
<blockquote>
<p>每次作业执行时间和间隔时间均非常短的情况, 建议不监控作业运行时状态以提升效率, 因为是瞬时状态, 所以无必要监控. 请用户自行增加数据堆积监控. 并且不能保证数据重复选取, 应在作业中实现幂等性. 也无法实现作业失效转移.</p>
<p> 每次作业执行时间和间隔时间均较长短的情况, 建议监控作业运行时状态, 可保证数据不会重复选取.每次作业执行时间和间隔均较长的情况，建议监控作业运行时状态，可保证数据不会重复选取。</p>
</blockquote>
<ul>
<li><code>maxTimeDiffSeconds</code>: 设置最大容忍的本机与注册中心的时间误差秒数。默认为-1，不检查时间误差。选填</li>
<li><code>monitorPort</code>: 作业监控端口，默认为-1，不开启作业监控端口。选填</li>
<li><code>jobShardingStrategyClass</code>：作业分片策略实现类全路径，默认为使用分配侧路。</li>
<li><code>reconcileIntervalMinutes</code>：修复作业服务器不一致状态服务调度间隔时间，配置为小于1的任意值，默认为10.</li>
<li><code>disabled</code>: 作业是否禁用执行。默认为false，选填。</li>
<li><code>overwrite</code>: 设置使用本地配置覆盖注册中心的作业配置。默认为false，选填。建议使用运维平台console配置作业配置，统一管理。</li>
<li>Builder类：使用该类配置LiteJobConfiguration属性，调用<code>#build()</code>方法最终生成作业配置。</li>
</ul>
<h3 id="2-2-1-作业类型配置"><a href="#2-2-1-作业类型配置" class="headerlink" title="2.2.1 作业类型配置"></a>2.2.1 作业类型配置</h3><p>作业类型配置接口(JobTypeConfiguration)有三种配置实现，针对三种作业类型：</p>
<table>
<thead>
<tr>
<th>配置实现</th>
<th>作业</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SimpleJobConfiguration</td>
<td>SimpleJob</td>
<td>简单作业。例如：订单过期作业</td>
</tr>
<tr>
<td>DataflowJobConfiguration</td>
<td>DataflowJob</td>
<td>数据流作业。TODO:暂未了解流式处理数据</td>
</tr>
<tr>
<td>ScriptJobConfiguration</td>
<td>ScriptJob</td>
<td>脚本作业。例如：调用shell脚本备份数据库作业</td>
</tr>
</tbody>
</table>
<p>三种配置类属性对比如：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">SimpleJob</th>
<th style="text-align:center">DataflowJob</th>
<th style="text-align:center">ScriptJob</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">coreConfig</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">作业核心配置</td>
</tr>
<tr>
<td style="text-align:center">jobType</td>
<td style="text-align:center">JobType.SIMPLE</td>
<td style="text-align:center">JobType.DATAFLOW</td>
<td style="text-align:center">JobType.SCRIPT</td>
<td style="text-align:center">作业类型</td>
</tr>
<tr>
<td style="text-align:center">jobClass</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">✔️(默认：ScriptJob.class)</td>
<td style="text-align:center">作业实现类全路径</td>
</tr>
<tr>
<td style="text-align:center">streamingProcess</td>
<td style="text-align:center"></td>
<td style="text-align:center">✔️</td>
<td style="text-align:center"></td>
<td style="text-align:center">是否流式处理数据</td>
</tr>
<tr>
<td style="text-align:center">scriptCommandLine</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✔️</td>
<td style="text-align:center">脚本型作业执行命令行</td>
</tr>
</tbody>
</table>
<h3 id="2-2-2-作业核心配置"><a href="#2-2-2-作业核心配置" class="headerlink" title="2.2.2 作业核心配置"></a>2.2.2 作业核心配置</h3><p>作业核心配置(JobCoreConfiguration),我们可以看到在每种作业类型配置都有该属性(<code>coreConfig</code>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public final class JobCoreConfiguration &#123;</div><div class="line">    private final String jobName;</div><div class="line">    private final String cron;</div><div class="line">    private final int shardingTotalCount;</div><div class="line">    private final String shardingItemParameters;</div><div class="line">    private final String jobParameter;</div><div class="line">    private final boolean failover;</div><div class="line">    private final boolean misfire;</div><div class="line">    private final String description;</div><div class="line">    private final JobProperties jobProperties;</div><div class="line">    </div><div class="line">    // ... 省略Getter方法</div><div class="line">    public static class Builder &#123;</div><div class="line">    </div><div class="line">	    // ... 省略部分属性</div><div class="line">	    public final JobCoreConfiguration build() &#123;</div><div class="line">	            Preconditions.checkArgument(!Strings.isNullOrEmpty(jobName), &quot;jobName can not be empty.&quot;);</div><div class="line">	            Preconditions.checkArgument(!Strings.isNullOrEmpty(cron), &quot;cron can not be empty.&quot;);</div><div class="line">	            Preconditions.checkArgument(shardingTotalCount &gt; 0, &quot;shardingTotalCount should larger than zero.&quot;);</div><div class="line">	            return new JobCoreConfiguration(jobName, cron, shardingTotalCount, shardingItemParameters, jobParameter, failover, misfire, description, jobProperties);</div><div class="line">	        &#125;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>jobName</code>: 作业名称。必填</li>
<li><code>cron</code>: cron表达式，用于控制作业触发时间。必填</li>
<li><code>shardingTotalCount</code>: 作业分片总数，如果一个作业启动超过作业分片总数的节点，只有<code>shardingTotalCount</code>会执行作业。必填</li>
<li><code>shardingItemParameters</code>: 分片序列号和参数</li>
</ul>
<blockquote>
<p>分片序列号和参数用等号分隔，多个键值对用逗号分隔<br>分片序列号从0开始，不可大于或等于分片总数<br>如: 0=a,1=b,2=c</p>
</blockquote>
<ul>
<li><code>jobParameter</code>: 作业自定义参数，选填</li>
</ul>
<blockquote>
<p>作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业</p>
<p>例: 每次获取的数据量、作业实例从数据库读取的主键</p>
</blockquote>
<ul>
<li><code>failover</code>: 是否开启作业执行失效转移，开启表示如果作业在一次作业执行中途宕机，允许将该次未完成的作业在另一作业节点上补偿执行。默认为false。选填</li>
<li><code>misfire</code>: 是否开启错误作业重新执行，默认为true.选填</li>
<li><code>description</code>: 作业描述，选填。</li>
<li><code>jobProperties</code>: 作业属性配置，选填。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public final class JobProperties &#123;</div><div class="line">    </div><div class="line">    private EnumMap&lt;JobPropertiesEnum, String&gt; map = new EnumMap&lt;&gt;(JobPropertiesEnum.class);</div><div class="line"></div><div class="line">	public enum JobPropertiesEnum &#123;</div><div class="line">	        </div><div class="line">	        /**</div><div class="line">	         * 作业异常处理器.</div><div class="line">	         */</div><div class="line">	        JOB_EXCEPTION_HANDLER(&quot;job_exception_handler&quot;, JobExceptionHandler.class, DefaultJobExceptionHandler.class.getCanonicalName()),</div><div class="line">	        </div><div class="line">	        /**</div><div class="line">	         * 线程池服务处理器.</div><div class="line">	         */</div><div class="line">	        EXECUTOR_SERVICE_HANDLER(&quot;executor_service_handler&quot;, ExecutorServiceHandler.class, DefaultExecutorServiceHandler.class.getCanonicalName());</div><div class="line">	        </div><div class="line">	        private final String key;</div><div class="line">	    </div><div class="line">	        private final Class&lt;?&gt; classType;</div><div class="line">	        </div><div class="line">	        private final String defaultValue;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>JOB_EXCEPTION_HANDLER</code>: 用于扩展异常处理类</li>
<li><code>EXECUTOR_SERVICE_HANDLER</code>: 用于扩展作业处理线程池类</li>
<li>通过这个属性，我们可以自定义每个作业的异常处理和线程池服务</li>
</ul>
<h3 id="2-3-作业事件配置"><a href="#2-3-作业事件配置" class="headerlink" title="2.3 作业事件配置"></a>2.3 作业事件配置</h3><p>通过作业事件配置（<code>JobEventConfiguration</code>）,实现对作业事件的异步监听、处理。在<code>Elastic-Job-Lite源码解析 --- 作业事件追踪</code> 详细分享</p>
<h3 id="2-4-作业监听器"><a href="#2-4-作业监听器" class="headerlink" title="2.4 作业监听器"></a>2.4 作业监听器</h3><p>通过配置作业监听器（<code>ElasticJobListener</code>）,实现对作业执行的同步监听、处理。<code>Elastic-Job-Lite源码解析 --- 作业监听器</code>详细分享</p>
<h3 id="3-作业配置服务"><a href="#3-作业配置服务" class="headerlink" title="3 作业配置服务"></a>3 作业配置服务</h3><p>多个Elastic-Job-Lite使用相同注册中心和相同<code>namespace</code>组成集群，实现高可用。集群中，使用作业配置服务（<code>ConfigurationService</code>）共享作业配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final class ConfigurationService &#123;</div><div class="line">    </div><div class="line">    private final TimeService timeService;</div><div class="line">    </div><div class="line">    private final JobNodeStorage jobNodeStorage;</div><div class="line">    </div><div class="line">    public ConfigurationService(final CoordinatorRegistryCenter regCenter, final String jobName) &#123;</div><div class="line">        jobNodeStorage = new JobNodeStorage(regCenter, jobName);</div><div class="line">        timeService = new TimeService();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>timeService</code>: 时间服务，提供当前时间查询</li>
<li><code>jobNodeStorage</code>: 封装注册中心，提供存储服务。<code>Elastic-Job-Lite源码解析 --- 作业数据存储</code>详细分享</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final class TimeService &#123;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前时间的毫秒数.</div><div class="line">     * </div><div class="line">     * @return 当前时间的毫秒数</div><div class="line">     */</div><div class="line">    public long getCurrentMillis() &#123;</div><div class="line">        return System.currentTimeMillis();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-1-读取作业配置"><a href="#3-1-读取作业配置" class="headerlink" title="3.1 读取作业配置"></a>3.1 读取作业配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 读取作业配置.</div><div class="line">    * </div><div class="line">    * @param fromCache 是否从缓存中读取</div><div class="line">    * @return 作业配置</div><div class="line">    */</div><div class="line">   public LiteJobConfiguration load(final boolean fromCache) &#123;</div><div class="line">       String result;</div><div class="line">       if (fromCache) &#123;</div><div class="line">           result = jobNodeStorage.getJobNodeData(ConfigurationNode.ROOT);</div><div class="line">           if (null == result) &#123;</div><div class="line">               result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.ROOT);</div><div class="line">           &#125;</div><div class="line">       &#125; else &#123;</div><div class="line">           result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.ROOT);</div><div class="line">       &#125;</div><div class="line">       return LiteJobConfigurationGsonFactory.fromJson(result);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-持久化作业配置"><a href="#3-2-持久化作业配置" class="headerlink" title="3.2 持久化作业配置"></a>3.2 持久化作业配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * 持久化分布式作业配置信息.</div><div class="line">  * </div><div class="line">  * @param liteJobConfig 作业配置</div><div class="line">  */</div><div class="line"> public void persist(final LiteJobConfiguration liteJobConfig) &#123;</div><div class="line">     checkConflictJob(liteJobConfig);</div><div class="line">     if (!jobNodeStorage.isJobNodeExisted(ConfigurationNode.ROOT) || liteJobConfig.isOverwrite()) &#123;</div><div class="line">         jobNodeStorage.replaceJobNode(ConfigurationNode.ROOT, LiteJobConfigurationGsonFactory.toJson(liteJobConfig));</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用 <code>#checkConflictJob(...)</code>方法校验注册中心存储的作业配置的作业实现类全路径（<code>jobClass</code>）和当前的是否相同，如果不同，则认为是冲突，不允许存储：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void checkConflictJob(final LiteJobConfiguration liteJobConfig) &#123;</div><div class="line">        Optional&lt;LiteJobConfiguration&gt; liteJobConfigFromZk = find();</div><div class="line">        if (liteJobConfigFromZk.isPresent() &amp;&amp; !liteJobConfigFromZk.get().getTypeConfig().getJobClass().equals(liteJobConfig.getTypeConfig().getJobClass())) &#123;</div><div class="line">            throw new JobConfigurationException(&quot;Job conflict with register center. The job &apos;%s&apos; in register center&apos;s class is &apos;%s&apos;, your job class is &apos;%s&apos;&quot;, </div><div class="line">                    liteJobConfig.getJobName(), liteJobConfigFromZk.get().getTypeConfig().getJobClass(), liteJobConfig.getTypeConfig().getJobClass());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>当注册中心未存储该作业配置或者当前作业配置允许替换注册中心配置(<code>overwrite = true</code>)时，持久化作业配置。</li>
</ul>
<h3 id="3-3-校验本机时间是否合法"><a href="#3-3-校验本机时间是否合法" class="headerlink" title="3.3 校验本机时间是否合法"></a>3.3 校验本机时间是否合法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 检查本机与注册中心的时间误差秒数是否在允许范围.</div><div class="line">     * </div><div class="line">     * @throws JobExecutionEnvironmentException 本机与注册中心的时间误差秒数不在允许范围所抛出的异常</div><div class="line">     */</div><div class="line">    public void checkMaxTimeDiffSecondsTolerable() throws JobExecutionEnvironmentException &#123;</div><div class="line">        int maxTimeDiffSeconds =  load(true).getMaxTimeDiffSeconds();</div><div class="line">        if (-1  == maxTimeDiffSeconds) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        long timeDiff = Math.abs(timeService.getCurrentMillis() - jobNodeStorage.getRegistryCenterTime());</div><div class="line">        if (timeDiff &gt; maxTimeDiffSeconds * 1000L) &#123;</div><div class="line">            throw new JobExecutionEnvironmentException(</div><div class="line">                    &quot;Time different between job server and register center exceed &apos;%s&apos; seconds, max time different is &apos;%s&apos; seconds.&quot;, timeDiff / 1000, maxTimeDiffSeconds);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Elastic-Job-Lite</code>作业触发时依赖本机时间，相同集群使用注册中心为基准，校验本机与注册中心的时间误差是否在允许范围内<code>LiteJobConfiguration.maxTimeDiffSeconds</code></li>
</ul>
<h3 id="4-结语"><a href="#4-结语" class="headerlink" title="4 结语"></a>4 结语</h3><p>这篇文章写作思路是参考别人的，通过这篇文章我提炼出，阅读源码几点技巧：</p>
<ul>
<li>从一个点切入，找到这个点的入口；</li>
<li>按照作者编码的思路去思考，抓住主线，一个个类去梳理</li>
<li>擅加利用IDEA的查看接口实现类的功能；如下展示：</li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-2/35421199.jpg" alt=""></p>
<ul>
<li>从官方文档上，了解到项目有哪些功能，带着问题去看源码；列出你想要了解的功能，一个个去学习；</li>
<li>以类图来梳理整个功能的逻辑，了解每个类，每个属性的含义，而又不会深入到每个方法的具体实现细节。</li>
<li>一次只讨论一个点，每次学习都有一个重心；</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elastic-Job源码分析---为什么阅读Elastic-Job源码]]></title>
      <url>http://jianwl.com/2017/11/01/Elastic-Job%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%85%E8%AF%BBElastic-Job%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="为什么阅读源码Elastic-Job源码"><a href="#为什么阅读源码Elastic-Job源码" class="headerlink" title="为什么阅读源码Elastic-Job源码"></a>为什么阅读源码Elastic-Job源码</h3><ol>
<li>Quartz多节点通过数据库锁实现任务抢占，Elastic-Job基于什么策略实现任务调度与分配</li>
<li>任务分片如何实现</li>
<li><code>Elastic-Job-Cloud</code>如何实现任务动态扩容和缩容</li>
<li>任务超时如何处理？任务假死怎么判断？</li>
</ol>
<h3 id="步骤-功能"><a href="#步骤-功能" class="headerlink" title="步骤/功能"></a>步骤/功能</h3><ul>
<li>【】分布式调度协调</li>
<li>【】弹性扩容缩容</li>
<li>【】失效转移</li>
<li>【】错过执行作业重触发</li>
<li>【】作业分片策略</li>
<li>【】作业唯一节点执行</li>
<li>【】自诊断并修复分布式不稳定造成的问题</li>
<li>【】支持并行调度</li>
<li>【】支持作业生命周期操作</li>
<li>【】丰富的作业类型</li>
<li>【】Spring整合以及命名空间提供</li>
<li>【】运维平台</li>
<li>【】事件追踪</li>
<li>【】DUMP作业运行信息</li>
<li>【】作业监听器</li>
<li>【】基于Docker的进程隔离（TBD）</li>
<li>【】高可用</li>
</ul>
<h3 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h3><p>基于V1.8，会逐步和Elastic-Job功能做对比</p>
<ul>
<li>【】简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手</li>
<li>【】动态：支持动态修改任务状态、暂停/恢复任务、以及终止运行中任务，即时生效；</li>
<li>【】调度中心HA（中心式）：调度采用中心式设计，调度中心基于集群Quartz实现可保证调度中心HA</li>
<li>【】执行器HA（分布式）：任务分布式执行，任务执行器支持集群部署，可保证任务执行HA</li>
<li>【】任务Failover:执行器集群部署时，任务路由策略选择故障转移情况下，调度失败时将会平滑切换执行器进行Failover；</li>
<li>【】一致性：调度中心通过DB锁保证集群分布式调度的一致性，一次任务调度只会触发一次执行；</li>
<li>【】自定义任务参数：支持在线配置调度任务入参，即时生效；</li>
<li>【】调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被阻塞；</li>
<li>【】弹性扩容缩容：一旦有新执行器机器上线或下线，下次调度时将会重新分配任务</li>
<li>【】邮件报警：任务失败时支持邮件报警，支持配置多邮件群发报警邮件</li>
<li>【】状态监控：支持实时监控任务进度</li>
<li>【】Rolling执行日志：支持在线查看调度结果，并且支持以Rolling方式实时查看执行器输出的完整的执行日志</li>
<li>【】GLUE：提供Web IDE,支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程，支持30个版本的历史版本回溯</li>
<li>【】数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性</li>
<li>【】任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会触发一次子任务的执行，多个子任务用逗号分隔；</li>
<li>【】推送maven中央库：将会把最新稳定版本推送到maven中央库，方便用户接入和使用；</li>
<li>【】任务注册：执行器会周期性自动注册任务，调度中心将会自动发现注册的任务并触发执行，同时也支持手动录入执行器地址；</li>
<li>【】路由策略：执行器集群部署时提供丰富的路由策略，包括第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近未使用、故障转移、忙碌转移等；</li>
<li>【】运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器次数等、以及调度报表，如调度日期分布图、调度成功分布图等；</li>
<li>【】脚本任务：支持以GLUE模式开发和运行脚本任务，包括shell、python等类型脚本；</li>
<li>【】阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度、</li>
<li>【】处理失败策略：调度失败时的处理策略，策略包括：失败告警（默认）、失败重试</li>
<li>【】分片广播任务：执行器集群部署时，任务路由策略选择分片广播情况下，一次任务调度将会广播触发对应集群中所有执行器执行一次任务、同时传递分片参数、可根据分片参数分片开发任务；</li>
<li>【】动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理，在进行大数量业务操作是，可显著提升任务处理能力和速度。</li>
<li>【】事件触发：除了Cron方法和任务依赖方式触发任务执行之外，支持基于事件的触发任务方式，调度中心提供触发任务单次执行的API服务，可根据业务事件灵活触发。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ElasticJob入门实战]]></title>
      <url>http://jianwl.com/2017/11/01/ElasticJob%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h3><p><code>ElasticJob</code>是一个分布式调度解决方案，由两个互相独立的子项目<code>Elastic-Job-Lite</code>和<code>Elastic-Job-Cloud</code>组成。<code>Elastic-Job-Lite</code>定位为轻量级无中心化解决方案，使用jar包形式提供分布式的协调服务。这一节我们将会介绍SpringBoot整合ElasticJob。</p>
<h3 id="2、SpringBoot整合ElasticJob"><a href="#2、SpringBoot整合ElasticJob" class="headerlink" title="2、SpringBoot整合ElasticJob"></a>2、SpringBoot整合ElasticJob</h3><h4 id="1）依赖pom-xml"><a href="#1）依赖pom-xml" class="headerlink" title="1）依赖pom.xml"></a>1）依赖pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.frank&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;chapter6-4&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;chapter6-4&lt;/name&gt;</div><div class="line">	&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">		&lt;elastic.job.version&gt;2.1.5&lt;/elastic.job.version&gt;</div><div class="line">		&lt;mysql.version&gt;5.1.43&lt;/mysql.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.dangdang&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;elastic-job-lite-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;elastic.job.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.dangdang&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;elastic-job-lite-spring&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;elastic.job.version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;curator-test&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.0.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.h2database&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;h2&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.4.184&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</div><div class="line">			&lt;optional&gt;true&lt;/optional&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<h4 id="2）注册中心配置"><a href="#2）注册中心配置" class="headerlink" title="2）注册中心配置"></a>2）注册中心配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@ConditionalOnExpression(&quot;&apos;$&#123;regCenter.serverList&#125;&apos;.length()&gt;0&quot;)</div><div class="line">public class ZookeeperRegistryCenterConfig &#123;</div><div class="line">    @Bean(initMethod = &quot;init&quot;)</div><div class="line">    public ZookeeperRegistryCenter regCenter(@Value(&quot;$&#123;regCenter.serverList&#125;&quot;) final String serverList,</div><div class="line">                                             @Value(&quot;$&#123;regCenter.namespace&#125;&quot;) final String namespace)&#123;</div><div class="line">        return new ZookeeperRegistryCenter(new ZookeeperConfiguration(serverList,namespace));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-作业事件配置"><a href="#3-作业事件配置" class="headerlink" title="3) 作业事件配置"></a>3) 作业事件配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class JobEventConfig &#123;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private DataSource dataSource;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public JobEventConfiguration jobEventConfiguration() &#123;</div><div class="line">        return new JobEventRdbConfiguration(dataSource);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-内嵌Zookeeper配置"><a href="#4-内嵌Zookeeper配置" class="headerlink" title="4) 内嵌Zookeeper配置"></a>4) 内嵌Zookeeper配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class EmbedZookeeperServer &#123;</div><div class="line">    private static TestingServer testingServer;</div><div class="line"></div><div class="line">    public static void start(final int port)&#123;</div><div class="line">        try&#123;</div><div class="line">            testingServer = new TestingServer(port,new File(String.format(&quot;target/test_zk_data/%s/&quot;,System.nanoTime())));</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000L);</div><div class="line">                    testingServer.close();</div><div class="line">                &#125; catch (InterruptedException | IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-基于时间驱动的任务"><a href="#5-基于时间驱动的任务" class="headerlink" title="5) 基于时间驱动的任务"></a>5) 基于时间驱动的任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SpringSimpleJob implements SimpleJob&#123;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private FooRepository fooRepository;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void execute(ShardingContext shardingContext) &#123;</div><div class="line">        System.out.println(String.format(&quot;Item: %s | Time: %s | Thread: %s | %s&quot;,</div><div class="line">                shardingContext.getShardingItem(), new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(new Date()), Thread.currentThread().getId(), &quot;SIMPLE&quot;));</div><div class="line">        List&lt;Foo&gt; data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);</div><div class="line">        for (Foo each : data) &#123;</div><div class="line">            fooRepository.setCompleted(each.getId());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模型类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class Foo implements Serializable&#123;</div><div class="line">    private final long id;</div><div class="line">    private final String location;</div><div class="line">    private Status status;</div><div class="line"></div><div class="line">    public Foo(long id, String location, Status status) &#123;</div><div class="line">        this.id = id;</div><div class="line">        this.location = location;</div><div class="line">        this.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLocation() &#123;</div><div class="line">        return location;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Status getStatus() &#123;</div><div class="line">        return status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStatus(Status status) &#123;</div><div class="line">        this.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Foo&#123;&quot; +</div><div class="line">                &quot;id=&quot; + id +</div><div class="line">                &quot;, location=&apos;&quot; + location + &apos;\&apos;&apos; +</div><div class="line">                &quot;, status=&quot; + status +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public enum Status&#123;</div><div class="line">        TODO,</div><div class="line">        COMPLETED</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Repository</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">@Repository</div><div class="line">public class FooRepository &#123;</div><div class="line">    private Map&lt;Long,Foo&gt; data = new ConcurrentHashMap&lt;&gt;(300,1);</div><div class="line"></div><div class="line">    public FooRepository()&#123;init();&#125;</div><div class="line"></div><div class="line">    private void init()&#123;</div><div class="line">        addData(0L, 100L, &quot;Beijing&quot;);</div><div class="line">        addData(100L, 200L, &quot;Shanghai&quot;);</div><div class="line">        addData(200L, 300L, &quot;Guangzhou&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addData(final Long idFrom,final Long idTo,final String location)&#123;</div><div class="line">        for(long i=idFrom; i &lt; idTo; i++) &#123;</div><div class="line">            data.put(i,new Foo(i,location,Foo.Status.TODO));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Foo&gt; findTodoData(final String location, final int limit) &#123;</div><div class="line">        List&lt;Foo&gt; result = new ArrayList&lt;&gt;(limit);</div><div class="line">        int count = 0;</div><div class="line">        for (Map.Entry&lt;Long, Foo&gt; each : data.entrySet()) &#123;</div><div class="line">            Foo foo = each.getValue();</div><div class="line">            if (foo.getLocation().equals(location) &amp;&amp; foo.getStatus() == Foo.Status.TODO) &#123;</div><div class="line">                result.add(foo);</div><div class="line">                count++;</div><div class="line">                if (count == limit) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCompleted(final long id) &#123;</div><div class="line">        data.get(id).setStatus(Foo.Status.COMPLETED);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-任务注册"><a href="#6-任务注册" class="headerlink" title="6) 任务注册"></a>6) 任务注册</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class SimpleJobConfig &#123;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private ZookeeperRegistryCenter regCenter;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private JobEventConfiguration jobEventConfiguration;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SimpleJob simpleJob()&#123;</div><div class="line">        return new SpringSimpleJob();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean(initMethod = &quot;init&quot;)</div><div class="line">    public JobScheduler simpleJobScheduler(final SimpleJob simpleJob, @Value(&quot;$&#123;simpleJob.cron&#125;&quot;) final String cron,</div><div class="line">                                           @Value(&quot;$&#123;simpleJob.shardingTotalCount&#125;&quot;) final int shardingTotalCount,</div><div class="line">                                           @Value(&quot;$&#123;simpleJob.shardingItemParameters&#125;&quot;) final String shardingItemParameters)&#123;</div><div class="line">        return new SpringJobScheduler(simpleJob, regCenter, getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters), jobEventConfiguration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private LiteJobConfiguration getLiteJobConfiguration(final Class&lt;? extends SimpleJob&gt; jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) &#123;</div><div class="line">        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(</div><div class="line">                jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build(), jobClass.getCanonicalName())).overwrite(true).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-入口类"><a href="#7-入口类" class="headerlink" title="7) 入口类"></a>7) 入口类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">public class Chapter64Application &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		EmbedZookeeperServer.start(6181); // 启动内嵌zookeeper</div><div class="line">		SpringApplication.run(Chapter64Application.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-参数配置application-properties"><a href="#8-参数配置application-properties" class="headerlink" title="8) 参数配置application.properties"></a>8) 参数配置application.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">regCenter.serverList=localhost:6181</div><div class="line">regCenter.namespace=elastic-job-lite-springboot</div><div class="line"></div><div class="line">simpleJob.cron=0/30 * * * * ?</div><div class="line">simpleJob.shardingTotalCount=3</div><div class="line">simpleJob.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</div><div class="line"></div><div class="line">spring.datasource.url=jdbc:h2:mem:job_event_storage</div><div class="line">spring.datasource.driver-class-name=org.h2.Driver</div><div class="line">spring.datasource.username=sa</div><div class="line">spring.datasource.password=</div></pre></td></tr></table></figure>
<h4 id="9-项目源码请移步：SpringBoot整合ElasticJob"><a href="#9-项目源码请移步：SpringBoot整合ElasticJob" class="headerlink" title="9) 项目源码请移步：SpringBoot整合ElasticJob"></a>9) 项目源码请移步：<a href="https://github.com/frank-jian/SpringBootDemo/tree/master/chapter6-4" target="_blank" rel="external">SpringBoot整合ElasticJob</a></h4><h3 id="3、elastic-job-lite-console界面中配置注册中心"><a href="#3、elastic-job-lite-console界面中配置注册中心" class="headerlink" title="3、elastic-job-lite-console界面中配置注册中心"></a>3、<a href="https://github.com/elasticjob/elastic-job/blob/master/elastic-job-lite/elastic-job-lite-console/src/main/java/com/dangdang/ddframe/job/lite/console/ConsoleBootstrap.java" target="_blank" rel="external">elastic-job-lite-console</a>界面中配置注册中心</h3><p>1、启动<a href="https://github.com/elasticjob/elastic-job/blob/master/elastic-job-lite/elastic-job-lite-console/src/main/java/com/dangdang/ddframe/job/lite/console/ConsoleBootstrap.java" target="_blank" rel="external">ConsoleBootstrap.java</a>类，输入账号：root，密码：root</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/62773298.jpg" alt=""></p>
<p>2、启动步骤2中SpringBoot整合的ElasticJob项目，在<code>elastic-job-lite-console</code>界面中配置注册中心地址；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/48589935.jpg" alt=""></p>
<p>3、连接注册中心</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/20731156.jpg" alt=""></p>
<p>4、获取注册中心的任务(另外一个任务文章没有提及注册流程，具体可以看<a href="https://github.com/frank-jian/SpringBootDemo/tree/master/chapter6-4" target="_blank" rel="external">项目源码</a>)</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/54676368.jpg" alt=""></p>
<p>5、触发任务</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-1/11175796.jpg" alt=""></p>
<h3 id="4、结语"><a href="#4、结语" class="headerlink" title="4、结语"></a>4、结语</h3><p>至此，已经简单介绍了ElasticJob的用法，后续会深入ElasticJob源码学习，深入理解其各个特性实现的思想；</p>
<h3 id="5、参考资料"><a href="#5、参考资料" class="headerlink" title="5、参考资料"></a>5、参考资料</h3><ol>
<li><a href="http://elasticjob.io/index_zh.html" target="_blank" rel="external">Elastic-Job官方文档</a></li>
<li><a href="https://github.com/elasticjob/elastic-job" target="_blank" rel="external">Elastic-Job源码</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB极简实战入门]]></title>
      <url>http://jianwl.com/2017/10/28/MongoDB%E6%9E%81%E7%AE%80%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="1、为什么用MongoDB"><a href="#1、为什么用MongoDB" class="headerlink" title="1、为什么用MongoDB?"></a>1、为什么用MongoDB?</h3><p>传统的计算机应用大多数使用关系型数据库来存储数据，比如MySQL,它的特点是数据以表格的形式存储起来，数据库由一张张排列整齐的表格构成，就好像有一个Excel表格一样，每个表格都会有若干列，比如一个学生信息表，可能包含学号、姓名、性别、入学年份、高考成绩、籍贯等。而表格的每一排，则是一个个学生的具体信息。在企业级应用和前互联网时代，关系型数据库几乎是不二选择。关系型数据库的特点是有整齐划一的组织，很方便对数据进行描述、插入、搜索。</p>
<p>想象有一个传统的网上服务商店，它主要的数据可能是存储在一张叫products的表单里，表单可能包含这些列：商品编号id、名称name、商家brank、主目录cate、子目录sub-cat、零售价price、是否促销promotion等，如果有一个用户想要查找所有价格低于300元的正在促销的鞋子的编号和名称，则可以执行类似以下的SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT id, name FROM products WHERE cate=&apos;shoes&apos; AND price &lt; 300 AND promotion = true;</div></pre></td></tr></table></figure></p>
<p>SQL具备了强大的深度查询能力，能满足各式各样的查询要求，而如果要对数据进行添加和删除，成本也是非常低的，这些是SQL的优势之一，随着互联网的兴起以及数据形式的多样化，四平八稳的SQL表单在一些领域渐渐显现出它的劣势，让我们通过一个例子来说明。考虑一个后台系统，如果我们用关系型数据库为每篇博客article创建一个表单的话，这个表单大概会包括以下这些列：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">title</th>
<th style="text-align:center">description</th>
<th style="text-align:center">author</th>
<th style="text-align:center">content</th>
<th style="text-align:center">likes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a_1</td>
<td style="text-align:center">title1</td>
<td style="text-align:center">description1</td>
<td style="text-align:center">author1</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">a_2</td>
<td style="text-align:center">title2</td>
<td style="text-align:center">description2</td>
<td style="text-align:center">author2</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">13</td>
</tr>
</tbody>
</table>
<p>这个时候用SQL数据库来存储是非常方便的，但假如我们要给每篇文章添加评论功能，会发现每篇文章可能要多篇评论，而且这些数目是动态变化的，而且每篇评论还包括好几项内容：评论人、评论时间、以及评论内容。这时候要将这些内容都塞进上述的表，就显得很困难。通常的做法是为评论comment单独建一个表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">author</th>
<th style="text-align:center">time</th>
<th style="text-align:center">content</th>
<th style="text-align:center">article</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">c_1</td>
<td style="text-align:center">anna</td>
<td style="text-align:center">2017-10-26 08:23</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">a_1</td>
</tr>
<tr>
<td style="text-align:center">c_2</td>
<td style="text-align:center">david</td>
<td style="text-align:center">2017-10-26 08:23</td>
<td style="text-align:center">content2</td>
<td style="text-align:center">a_2</td>
</tr>
</tbody>
</table>
<p>类似地，每篇文章可能会有若干标签tags，标签本身又是一个表单：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">category</th>
<th style="text-align:center">tags</th>
<th style="text-align:center">content</th>
<th style="text-align:center">article</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">t_1</td>
<td style="text-align:center">anna</td>
<td style="text-align:center">java</td>
<td style="text-align:center">content1</td>
<td style="text-align:center">a_1</td>
</tr>
<tr>
<td style="text-align:center">t_2</td>
<td style="text-align:center">david</td>
<td style="text-align:center">python</td>
<td style="text-align:center">content2</td>
<td style="text-align:center">a_2</td>
</tr>
</tbody>
</table>
<p>而博客的表格则要通过foreign key跟这些相关联的表格联系起来，这样一来当我们做查询的时候，比如说：找出评论数不少于3的标签为java的作者为author1文章，就会涉及到复杂的跨表查询，需要大量使用join语句。这种跨表查询不仅降低了查询速度，而这些语句写起来也不简单。</p>
<p>那么，如果用MongoDB数据库来实现，可以如何涉及数据模型呢？很简单，想下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">_id: POST_ID</div><div class="line">  title: TITLE_OF_POST, </div><div class="line">  description: POST_DESCRIPTION,</div><div class="line">  author: POST_BY,</div><div class="line">  tags: [TAG1, TAG2, TAG3],</div><div class="line">  likes: TOTAL_LIKES, </div><div class="line">  comments: [	</div><div class="line">     &#123;</div><div class="line">        user:&apos;COMMENT_BY&apos;,</div><div class="line">        message: TEXT,</div><div class="line">        dateCreated: DATE_TIME,</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">        user:&apos;COMMENT_BY&apos;,</div><div class="line">        message: TEXT,</div><div class="line">        dateCreated: DATE_TIME,</div><div class="line">     &#125;</div><div class="line">  ]</div></pre></td></tr></table></figure>
<p>在MongoDB里，每篇博客文章以一个文档documen的形式保存起来，而文档内部包含了很多项目，比如title、tags等，每个项目都是key-value形式，重要的是一个key，可以有多个values，它们用[]括起来。</p>
<p>这种宽松的数据存储形式非常灵活，MongoDB不限制每个key对应的values的数目。比如有的文章没有评论，则它的值就是一个空集，完全没有问题；有的文章评论很多，也可以无限制地插入。更灵活的是，MongoDB不要求同一个集合(collection，相当于SQL的table)里面的不同document有相同的key，比如除了上述这种文档组织，有的文档所代表的文章可能没有likes这个项目，在比如有的文章可能有更多的项目。这些不同的文档都可以灵活地存储在同一个集合下，而且查询起来也异常简单，因为都在一个文档里，不用进行各种跨文档查询。而这种MongoDB式的存储也方便了数据的维护，对于每一篇博客文章来说，所有的相关数据都在这个document里面，不用去考虑一个数据库操作需要涉及到多少了表格。</p>
<p>当然，除了上述的优点，MongoDB还有不少别的优势，比如MongoDB的数据是用JSON(Javascript Object Notation)存储的，而几乎所有的web应用都是基于Javascript的。因此，存储数据和应用的数据的格式是高度一致的，不需经过转换，更多关于MongoDB的优点可以看<a href="https://www.tutorialspoint.com/mongodb/mongodb_advantages.htm" target="_blank" rel="external">这篇文章</a></p>
<h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><h4 id="Mac平台"><a href="#Mac平台" class="headerlink" title="Mac平台"></a>Mac平台</h4><p>1、更新Homebrew的package数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew update</div></pre></td></tr></table></figure>
<p>2、安装MongoDB</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew intall mongodb</div></pre></td></tr></table></figure>
<p>3、连接到mongo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo</div></pre></td></tr></table></figure>
<p>4、推荐安装<a href="https://robomongo.org/" target="_blank" rel="external">MongoDB客户端</a></p>
<h3 id="3、MongoDB实战-以下命令在mongdb客户端执行"><a href="#3、MongoDB实战-以下命令在mongdb客户端执行" class="headerlink" title="3、MongoDB实战(以下命令在mongdb客户端执行)"></a>3、MongoDB实战(以下命令在mongdb客户端执行)</h3><h4 id="1、数据库操作"><a href="#1、数据库操作" class="headerlink" title="1、数据库操作"></a>1、数据库操作</h4><h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1) 创建数据库"></a>1) 创建数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use bd_use</div></pre></td></tr></table></figure>
<p>这样就新建一个叫<code>bd_use</code>的数据库，执行以下指令显示当前的数据库</p>
<h5 id="2-显示当前数据库"><a href="#2-显示当前数据库" class="headerlink" title="2) 显示当前数据库"></a>2) 显示当前数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases</div></pre></td></tr></table></figure>
<p>不过由于我们的新数据库是空的，所以会显示类似这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin  0.000GB</div><div class="line">local  0.000GB</div></pre></td></tr></table></figure>
<h4 id="2、集合操作"><a href="#2、集合操作" class="headerlink" title="2、集合操作"></a>2、集合操作</h4><h5 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1) 创建集合"></a>1) 创建集合</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.createCollection(&apos;users&apos;)</div></pre></td></tr></table></figure>
<p>顺利的话会显示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;ok&quot; : 1.0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2）查看当前数据库"><a href="#2）查看当前数据库" class="headerlink" title="2）查看当前数据库"></a>2）查看当前数据库</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/35436214.jpg" alt=""></p>
<h5 id="3）查看数据库集合列表"><a href="#3）查看数据库集合列表" class="headerlink" title="3）查看数据库集合列表"></a>3）查看数据库集合列表</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/99042015.jpg" alt=""></p>
<h5 id="4）移除集合"><a href="#4）移除集合" class="headerlink" title="4）移除集合"></a>4）移除集合</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.drop()</div></pre></td></tr></table></figure>
<h4 id="3、新增"><a href="#3、新增" class="headerlink" title="3、新增"></a>3、新增</h4><p>无需先创建集合再新增数据，直接对相应集合新增数据即可；</p>
<h5 id="1）新增1条数据"><a href="#1）新增1条数据" class="headerlink" title="1）新增1条数据:"></a>1）新增1条数据:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.insert(&#123;</div><div class="line">    id: 1,</div><div class="line">    name: &apos;张三&apos;,</div><div class="line">    city_id: 1,</div><div class="line">    mail: &apos;zhangsan@gmail.com&apos;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/14240895.jpg" alt=""></p>
<h5 id="2）新增多条数据"><a href="#2）新增多条数据" class="headerlink" title="2）新增多条数据"></a>2）新增多条数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.insert([</div><div class="line">&#123;</div><div class="line">    id: 2,</div><div class="line">    name: &apos;赵六二&apos;,</div><div class="line">    city_id: 2,</div><div class="line">    mail: &apos;zhaoliuer@gmail.com&apos;,</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">    id: 3,</div><div class="line">    name: &apos;刘二麻子&apos;,</div><div class="line">    city_id: 3,</div><div class="line">    mail: &apos;liuermazi@gmail.com&apos;,</div><div class="line">    register_time: &apos;2017-10-27&apos;</div><div class="line">&#125;</div><div class="line">])</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/95636913.jpg" alt=""></p>
<h4 id="4-查询"><a href="#4-查询" class="headerlink" title="4 查询"></a>4 查询</h4><h5 id="1-单条件查询"><a href="#1-单条件查询" class="headerlink" title="1) 单条件查询"></a>1) 单条件查询</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/28617087.jpg" alt=""></p>
<h5 id="2-多条件查询"><a href="#2-多条件查询" class="headerlink" title="2) 多条件查询"></a>2) 多条件查询</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/1559324.jpg" alt=""></p>
<h5 id="3-查询或条件"><a href="#3-查询或条件" class="headerlink" title="3) 查询或条件"></a>3) 查询或条件</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/22233869.jpg" alt=""></p>
<h5 id="4-区间查询"><a href="#4-区间查询" class="headerlink" title="4) 区间查询"></a>4) 区间查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">大于：$gt</div><div class="line">小于：$lt</div><div class="line">大于或等于:$gte</div><div class="line">小于或等于:$lte</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/93826405.jpg" alt=""></p>
<h5 id="5-分页查询"><a href="#5-分页查询" class="headerlink" title="5) 分页查询"></a>5) 分页查询</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/54991109.jpg" alt=""></p>
<h5 id="6-查询只返回需要的字段"><a href="#6-查询只返回需要的字段" class="headerlink" title="6) 查询只返回需要的字段"></a>6) 查询只返回需要的字段</h5><p>第一个{}为查询条件，第二个{}为返回字段，1表示显示，0表示不显示</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/90600021.jpg" alt=""></p>
<h4 id="5-更新"><a href="#5-更新" class="headerlink" title="5 更新"></a>5 更新</h4><h5 id="1-更新字段"><a href="#1-更新字段" class="headerlink" title="1) 更新字段"></a>1) 更新字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.update(&#123;id: 2&#125;,&#123;$set: &#123;name:&apos;赵六二666&apos;,mai: &apos;zhaoliuer666@gmail.com&apos;&#125;&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/38746145.jpg" alt=""></p>
<h4 id="2-增量更新数据"><a href="#2-增量更新数据" class="headerlink" title="2) 增量更新数据"></a>2) 增量更新数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.update(&#123;id: 2&#125;,&#123;$inc: &#123;city_id: 2&#125;&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/82981085.jpg" alt=""></p>
<h4 id="6、删除"><a href="#6、删除" class="headerlink" title="6、删除"></a>6、删除</h4><h5 id="1）-删除一条记录"><a href="#1）-删除一条记录" class="headerlink" title="1） 删除一条记录"></a>1） 删除一条记录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.bd_charge_info.remove(&#123;id:2&#125;)</div></pre></td></tr></table></figure>
<p>查看数据</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/30082639.jpg" alt=""></p>
<h4 id="7、索引"><a href="#7、索引" class="headerlink" title="7、索引"></a>7、索引</h4><h5 id="1）获取文档的所有索引"><a href="#1）获取文档的所有索引" class="headerlink" title="1）获取文档的所有索引"></a>1）获取文档的所有索引</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/58287318.jpg" alt=""></p>
<h5 id="2）创建索引"><a href="#2）创建索引" class="headerlink" title="2）创建索引"></a>2）创建索引</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/80609873.jpg" alt=""></p>
<p>查看索引</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/24726879.jpg" alt=""></p>
<h5 id="3-移除索引"><a href="#3-移除索引" class="headerlink" title="3) 移除索引"></a>3) 移除索引</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/40728147.jpg" alt=""></p>
<p>查看索引</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/5130353.jpg" alt=""></p>
<h4 id="8、聚合操作"><a href="#8、聚合操作" class="headerlink" title="8、聚合操作"></a>8、聚合操作</h4><h5 id="1）按城市聚合"><a href="#1）按城市聚合" class="headerlink" title="1）按城市聚合"></a>1）按城市聚合</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/49303018.jpg" alt=""></p>
<h5 id="2-城市聚合，并id求和"><a href="#2-城市聚合，并id求和" class="headerlink" title="2) 城市聚合，并id求和"></a>2) 城市聚合，并id求和</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/669500.jpg" alt=""></p>
<h5 id="3-城市聚合，并算出相同城市的个数"><a href="#3-城市聚合，并算出相同城市的个数" class="headerlink" title="3) 城市聚合，并算出相同城市的个数"></a>3) 城市聚合，并算出相同城市的个数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-28/94872900.jpg" alt=""></p>
<h3 id="4、参考资料"><a href="#4、参考资料" class="headerlink" title="4、参考资料"></a>4、参考资料</h3><p>1、<a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="external">MongoDB 极简实践入门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[书单整理]]></title>
      <url>http://jianwl.com/2017/10/26/%E4%B9%A6%E5%8D%95%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>书单能在你想要打怪升级的路上给予些许帮助，建议先收藏本书单，认真啃完一本再买下一本，扎实走完每一步，部分书单关联博客和微信公众号，书单没有进行分类，大体顺序，编程开发 =&gt; 数据库 =&gt; 架构运维 =&gt; 算法。</p>
<h3 id="书籍列表"><a href="#书籍列表" class="headerlink" title="书籍列表"></a>书籍列表</h3><h4 id="1、《Effective-Java中文版》"><a href="#1、《Effective-Java中文版》" class="headerlink" title="1、《Effective Java中文版》"></a>1、<a href="https://item.jd.com/10058902.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=9db5551f46de481d8cff65b99ad40260" target="_blank" rel="external">《Effective Java中文版》</a></h4><ul>
<li>豆瓣评分：9.1 【1235人评价】</li>
<li>推荐理由：本书介绍了在Java编程中78条极具实用价值的经验规则，这些经验规则涵盖了大多数开发人员每天所面临的问题的解决方案。</li>
<li>友情提示：同推荐《重构：改善既有代码的设计》、《代码整洁之道》、《代码大全》有一定内容重叠</li>
</ul>
<h4 id="2、《Java性能权威指南》"><a href="#2、《Java性能权威指南》" class="headerlink" title="2、《Java性能权威指南》"></a>2、<a href="https://item.jd.com/11896988.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=4649d7ebe7284a478595eb4cbe89b399" target="_blank" rel="external">《Java性能权威指南》</a></h4><ul>
<li>豆瓣评分：8.2【44人评价】</li>
<li>推荐理由：市面上介绍Java的书有很多，但专注于Java性能的并不多，能游刃有余地展示Java性能优化难点的更是凤毛麟角，本书即是其中之一。通过使用JVM和Java平台，以及Java语言和应用程序接口，本书详尽讲解了Java性能调优的相关知识，帮助读者深入理解Java平台性能的各个方面，最终使程序如虎添翼。</li>
</ul>
<h4 id="3、《Spring揭密》"><a href="#3、《Spring揭密》" class="headerlink" title="3、《Spring揭密》"></a>3、<a href="https://item.jd.com/10063640.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=e5ebdb789c364f23862fdf953f0e0f63" target="_blank" rel="external">《Spring揭密》</a></h4><ul>
<li>豆瓣评分：9.0【162人评价】</li>
<li>推荐理由：Spring使用者不得不读</li>
<li>推荐博客：<a href="http://spring4all.com/" target="_blank" rel="external">Spring4All社区</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=spring4all" target="_blank" rel="external">Spring4All社区</a></li>
</ul>
<h4 id="4、《SpringBoot解密》"><a href="#4、《SpringBoot解密》" class="headerlink" title="4、《SpringBoot解密》"></a>4、<a href="https://item.jd.com/11940558.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=66023fea833e4c8f8a5bcac1f5e27017" target="_blank" rel="external">《SpringBoot解密》</a></h4><ul>
<li>豆瓣评分：6.8【44人评价】</li>
<li>推荐理由：《Spring揭密》相同作者，SpringBoot入门书籍</li>
<li>作者博客：<a href="https://afoo.me/" target="_blank" rel="external">扶墙老师说一个架构士的思考与沉淀</a></li>
<li>作者公众号：<a href="https://afoo.me/images/qrcode_for_gh_4fe672b2e860_430.jpg" target="_blank" rel="external">扶墙老师说</a></li>
<li>付费教程：<a href="https://segmentfault.com/ls/1650000011063780" target="_blank" rel="external">《Java 微服务实践 - Spring Boot 系列》</a></li>
</ul>
<h4 id="5、《MyBatis技术内幕》"><a href="#5、《MyBatis技术内幕》" class="headerlink" title="5、《MyBatis技术内幕》"></a>5、<a href="https://item.jd.com/12125531.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=c9571326f34f4ad4b779d7ca40161779" target="_blank" rel="external">《MyBatis技术内幕》</a></h4><ul>
<li>豆瓣评分：暂无</li>
<li>推荐理由：以MyBatis 3.4为基础，针对MyBatis的架构设计和实现细节进行了详细分析，其中穿插介绍了MyBatis源码中涉及的基础知识、设计模式以及笔者自己在实践中的思考。</li>
<li>作者博客：<a href="https://my.oschina.net/zudajun/blog" target="_blank" rel="external">祖大俊的博客</a></li>
</ul>
<h4 id="6、有效的单元测试"><a href="#6、有效的单元测试" class="headerlink" title="6、有效的单元测试"></a>6、<a href="https://item.jd.com/11582394.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=6a9d70686b5246e19559509e551d2118" target="_blank" rel="external">有效的单元测试</a></h4><ul>
<li>豆瓣评分：7.4 【18 人评价】</li>
<li>推荐理由：Java 单元测试入门。</li>
</ul>
<h4 id="7、《Java并发编程实战》"><a href="#7、《Java并发编程实战》" class="headerlink" title="7、《Java并发编程实战》"></a>7、<a href="https://item.jd.com/10922250.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=f4a1f467b1014d7f9c97af819b0fb814" target="_blank" rel="external">《Java并发编程实战》</a></h4><ul>
<li>豆瓣评分：9.0 【651 人评价】</li>
<li>推荐理由：本书深入浅出地介绍了Java线程和并发，是一本完美的Java并发参考手册。</li>
<li>推荐博客：<a href="http://ifeve.com/" target="_blank" rel="external">并发编程网</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=ifeves" target="_blank" rel="external">并发编程网</a></li>
</ul>
<h4 id="8、《Netty实战》"><a href="#8、《Netty实战》" class="headerlink" title="8、《Netty实战》"></a>8、<a href="https://item.jd.com/12070975.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=a1ad25055c664e598bda5f663f1d4157" target="_blank" rel="external">《Netty实战》</a></h4><ul>
<li>豆瓣评分：7.5【24 人评价】</li>
<li>豆瓣评分：8.1【83 人评价】 《Netty in Action》英文版</li>
<li>推荐理由：Netty之父Trustin Lee作序推荐。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=NettyZone" target="_blank" rel="external">Netty之家</a></li>
</ul>
<h4 id="9、《深入剖析Tomcat》"><a href="#9、《深入剖析Tomcat》" class="headerlink" title="9、《深入剖析Tomcat》"></a>9、<a href="https://item.jd.com/10913619.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=33bd504b09414f71b76770638001db97" target="_blank" rel="external">《深入剖析Tomcat》</a></h4><ul>
<li>豆瓣评分：8.3【118 人评价】</li>
<li>豆瓣评分：8.9【73 人评价】 《How Tomcat Works》英文版</li>
<li>推荐理由：本书深入剖析Tomcat 4和Tomcat 5中的每个组件，并揭示其内部工作原理。通过学习本书，你将可以自行开发Tomcat组件，或者扩展已有的组件。</li>
</ul>
<h4 id="10、《深入理解Nginx》"><a href="#10、《深入理解Nginx》" class="headerlink" title="10、《深入理解Nginx》"></a>10、<a href="https://item.jd.com/11217076.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=92163cd0388d41fb8b5872ec1c8c48d9" target="_blank" rel="external">《深入理解Nginx》</a></h4><ul>
<li>豆瓣评分：8.5【138 人评价】</li>
<li>推荐理由：书中首先通过介绍官方Nginx的基本用法和配置规则，帮助读者了解一般Nginx模块的用法，然后重点介绍了如何开发HTTP模块(含HTTP过滤模块)来得到定制化的Nginx，其中包括开发—个功能复杂的模块所需要了解的各种知识，并对内存池的实现细节及TCP协议进行了详细介绍；接着，综合Nginx框架代码分析了Nginx架构的设计理念和技巧，此外，还新增了如何在模块中支持HTTP变量，以及与slab共享内存等相关的内容，相信通过完善，可进一步帮助读者更好地开发出功能丰富、性能—流的Nginx模块。</li>
<li>友情提示：相对适用于 Nginx 开发者。Nginx 使用者可以了解。</li>
</ul>
<h4 id="11、《深入理解Java虚拟机：JVM高级特性与最佳实践》"><a href="#11、《深入理解Java虚拟机：JVM高级特性与最佳实践》" class="headerlink" title="11、《深入理解Java虚拟机：JVM高级特性与最佳实践》"></a>11、<a href="https://item.jd.com/11252778.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=eda3fc1cffd846e0a6cc4865c83047f4" target="_blank" rel="external">《深入理解Java虚拟机：JVM高级特性与最佳实践》</a></h4><ul>
<li>豆瓣评分：8.9 【657 人评价】</li>
<li>推荐理由：不去了解 JVM 的工程师，和咸鱼有什么区别？</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=lovestblog" target="_blank" rel="external">你假笨</a></li>
<li>推荐博客：<a href="http://lovestblog.cn/" target="_blank" rel="external">你假笨@JVM</a></li>
</ul>
<h4 id="12、《Java核心技术系列：Java虚拟机规范（Java-SE-8版）》"><a href="#12、《Java核心技术系列：Java虚拟机规范（Java-SE-8版）》" class="headerlink" title="12、《Java核心技术系列：Java虚拟机规范（Java SE 8版）》"></a>12、<a href="https://item.jd.com/11703581.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=82ba243013084915ad130178cb063f91" target="_blank" rel="external">《Java核心技术系列：Java虚拟机规范（Java SE 8版）》</a></h4><ul>
<li>豆瓣评分：暂无评价</li>
<li>豆瓣评分：8.3 【27 人评价】《Java虚拟机规范(Java SE 7版)》</li>
<li>推荐理由：基于Java SE 8,Oracle官方发布，Java虚拟机技术创建人撰写，国内Java技术专家翻译，是深度了解Java虚拟机和Java语言实现细节的必读之作</li>
<li>推荐博客：<a href="http://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="external">占小狼的简书</a></li>
<li>推荐公众号：<a href="http://upload-images.jianshu.io/upload_images/2184951-2079ac376dbc9c0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="external">占小狼的博客</a></li>
</ul>
<h4 id="13、《Go语言编程》"><a href="#13、《Go语言编程》" class="headerlink" title="13、《Go语言编程》"></a>13、<a href="https://item.jd.com/11067810.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=b58705ad1a4a438cb108d604a94cc4f6" target="_blank" rel="external">《Go语言编程》</a></h4><ul>
<li>豆瓣评分：7.1 【444 人评价】</li>
<li>推荐理由：这本书从整体的写作风格来说，会以介绍 Go 语言特性为主，示例则尽量采用作者平常的实践，而不是一个没有太大实际意义的语法示范样例。</li>
<li>友情提示：本书作者背景极强，许式伟为原金山WPS首席架构师、曾是盛大创新院研究员，目前是国内Go语言实践圈子公认的Go语言专家。</li>
</ul>
<h4 id="14、《-Go语言学习笔记》"><a href="#14、《-Go语言学习笔记》" class="headerlink" title="14、《 Go语言学习笔记》"></a>14、<a href="https://item.jd.com/11944267.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=acd310e55c2f49baa6fee671228c00b0" target="_blank" rel="external">《 Go语言学习笔记》</a></h4><ul>
<li>豆瓣评分：8.4 【57 人评价】</li>
<li>推荐理由：基于Go1.6， 解析语言规范，深入剖析Go运行时源码</li>
<li>友情提示：雨痕大大，教科书级人物</li>
</ul>
<h4 id="15、《MySQL技术内幕——InnoDB存储引擎》"><a href="#15、《MySQL技术内幕——InnoDB存储引擎》" class="headerlink" title="15、《MySQL技术内幕——InnoDB存储引擎》"></a>15、<a href="https://item.jd.com/11252326.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=ad40d5df95cd49a2b70cb7fa9de78428" target="_blank" rel="external">《MySQL技术内幕——InnoDB存储引擎》</a></h4><ul>
<li>豆瓣评分：8.6 【104 人评价】</li>
<li>推荐理由：从源代码的角度深度解析了InnoDB的体系结构、实现原理、工作机制，并给出了大量最佳实践，能帮助你系统而深入地掌握InnoDB，更重要的是，它能为你设计管理高性能、高可用的数据库系统提供绝佳的指导。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=dbaplus" target="_blank" rel="external">DBAplus社群</a></li>
</ul>
<h4 id="16、《高性能MySQL》"><a href="#16、《高性能MySQL》" class="headerlink" title="16、《高性能MySQL》"></a>16、<a href="https://item.jd.com/11220393.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=5e2d58c91b80419a8c600f96d4a8d4b1" target="_blank" rel="external">《高性能MySQL》</a></h4><ul>
<li>豆瓣评分：9.3 【245 人评价】</li>
<li>推荐理由：对于想要了解MySQL性能提升的人来说，这是一本不可多得的书。书中没有各种提升性能的秘籍，而是深入问题的核心，详细的解释了每种提升性能的原理，从而可以使你四两拨千斤。授之于鱼不如授之于渔，这本书做到了。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=iMYSQL_WX" target="_blank" rel="external">老叶茶馆</a></li>
</ul>
<h4 id="17、《高可用MySQL》"><a href="#17、《高可用MySQL》" class="headerlink" title="17、《高可用MySQL》"></a>17、<a href="https://wqitem.jd.com/item/view?sku=11774353&amp;PTAG=17047.12.1&amp;cu=true&amp;utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=7da2a03f065048e3a87e0ab0b34532eb&amp;abt=3" target="_blank" rel="external">《高可用MySQL》</a></h4><ul>
<li>豆瓣评分：8.0 【87 人评价】</li>
<li>推荐理由：《高性能MySQL》的姊妹篇。</li>
</ul>
<h4 id="18、《MongoDB权威指南》"><a href="#18、《MongoDB权威指南》" class="headerlink" title="18、《MongoDB权威指南》"></a>18、<a href="https://item.jd.com/11384782.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=282adc6929f24a07aa7195c117353076" target="_blank" rel="external">《MongoDB权威指南》</a></h4><ul>
<li>豆瓣评分：8.0 【69 人评价】</li>
<li>推荐理由：算是普通的参考书了，没有特别有深度的讲解。其实就是一本正常的介绍mongoDB是怎么用的，也可以作为nosql学习的入门。作为指南书，还是很合格的符合期望。</li>
<li>推荐博客：<a href="http://mongoing.com/" target="_blank" rel="external">MongoDB 中文社区</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=mongoing-com" target="_blank" rel="external">MongoDB 中文社区</a></li>
</ul>
<h4 id="19、《Redis开发与运维》"><a href="#19、《Redis开发与运维》" class="headerlink" title="19、《Redis开发与运维》"></a>19、<a href="https://item.jd.com/12121730.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=0a34adc050b946d283d5afa84e93f9ae" target="_blank" rel="external">《Redis开发与运维》</a></h4><ul>
<li>豆瓣评分：8.8 【41 人评价】</li>
<li>推荐理由：从开发、运维两个角度总结了Redis实战经验，深入浅出地剖析底层实现，包含大规模集群开发与运维的实际案例、应用技巧。全面覆盖Redis 基本功能及应用，图示丰富，讲解细腻。</li>
<li>推荐博客：<a href="http://redis.cn/" target="_blank" rel="external">Redis 中国用户组</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=rediscn" target="_blank" rel="external">CRUG</a></li>
</ul>
<h4 id="20、《Redis设计与实现》"><a href="#20、《Redis设计与实现》" class="headerlink" title="20、《Redis设计与实现》"></a>20、<a href="https://item.jd.com/11486101.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=57f3b67147d142e5b76aa501d0e6c4e3" target="_blank" rel="external">《Redis设计与实现》</a></h4><ul>
<li>豆瓣评分：8.5 【427 人评价】</li>
<li>推荐理由：系统而全面地描述了 Redis 内部运行机制。图示丰富，描述清晰，并给出大量参考信息，是NoSQL数据库开发人员案头必备。</li>
</ul>
<h4 id="21、《NoSQL精粹》"><a href="#21、《NoSQL精粹》" class="headerlink" title="21、《NoSQL精粹》"></a>21、<a href="https://item.jd.com/11297782.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=3a24cb49ab394d38bd24edbcb17fae79" target="_blank" rel="external">《NoSQL精粹》</a></h4><ul>
<li>豆瓣评分：8.2 【226 人评价】</li>
<li>推荐理由：书中全方位比较了关系型数据库与NoSQL数据库的异同；分别以Riak、MongoDB、Cassandra和Neo4J为代表，详细讲解了键值数据库、文档数据库、列族数据库和图数据库这4大类NoSQL数据库的优劣势、用法和适用场合；深入探讨了实现NoSQL数据库系统的各种细节，以及与关系型数据库的混用。</li>
</ul>
<h4 id="21、《Elasticsearch权威指南》中文版"><a href="#21、《Elasticsearch权威指南》中文版" class="headerlink" title="21、《Elasticsearch权威指南》中文版"></a>21、<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_who_should_read_this_book.html" target="_blank" rel="external">《Elasticsearch权威指南》中文版</a></h4><ul>
<li>推荐博客：<a href="https://elasticsearch.cn/" target="_blank" rel="external">Elastic 中文社区</a></li>
</ul>
<h4 id="22、-《ELK-Stack权威指南》"><a href="#22、-《ELK-Stack权威指南》" class="headerlink" title="22、 《ELK Stack权威指南》"></a>22、 <a href="https://item.jd.com/12073937.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=cf070e1e547047189a262416e312d14b" target="_blank" rel="external">《ELK Stack权威指南》</a></h4><ul>
<li>豆瓣评分：7.0 【10 人评价】</li>
<li>推荐理由：ELK stack是以Elasticsearch、Logstash、Kibana三个开源软件为主的数据处理工具链，是目前开源界最流行的实时数据分析解决方案，成为实时日志处理领域开源界的第一选择。</li>
</ul>
<h4 id="23、《ZooKeeper：分布式过程协同技术详解》"><a href="#23、《ZooKeeper：分布式过程协同技术详解》" class="headerlink" title="23、《ZooKeeper：分布式过程协同技术详解》"></a>23、<a href="https://item.jd.com/11880788.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=7825abc7598f4c799bc3663a803a7b51" target="_blank" rel="external">《ZooKeeper：分布式过程协同技术详解》</a></h4><ul>
<li>豆瓣评分：7.6 【49 人评价】</li>
<li>推荐理由：Zookeeper 入门</li>
<li>友情提示：翻译可能略显尴尬。</li>
</ul>
<h4 id="24、《从Paxos到Zookeeper分布式一致性原理与实践》"><a href="#24、《从Paxos到Zookeeper分布式一致性原理与实践》" class="headerlink" title="24、《从Paxos到Zookeeper分布式一致性原理与实践》"></a>24、<a href="https://item.jd.com/11622772.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=0c4d1fdbbc104d3bab65e19bdc3d0068" target="_blank" rel="external">《从Paxos到Zookeeper分布式一致性原理与实践》</a></h4><ul>
<li>豆瓣评分：8.1 【187 人评价】</li>
<li>推荐理由：从分布式一致性的理论出发，向读者简要介绍几种典型的分布式一致性协议，以及解决分布式一致性问题的思路，其中重点讲解了Paxos和ZAB协议。同时，本书深入介绍了分布式一致性问题的工业解决方案——ZooKeeper，并着重向读者展示这一分布式协调框架的使用方法、内部实现及运维技巧，旨在帮助读者全面了解ZooKeeper，并更好地使用和运维ZooKeeper。</li>
</ul>
<h4 id="25、《RabbitMQ实战：高效部署分布式消息队列》"><a href="#25、《RabbitMQ实战：高效部署分布式消息队列》" class="headerlink" title="25、《RabbitMQ实战：高效部署分布式消息队列》"></a>25、<a href="https://item.jd.com/11790530.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=70d94d35b9b84e169b999019b56098f8" target="_blank" rel="external">《RabbitMQ实战：高效部署分布式消息队列》</a></h4><ul>
<li>豆瓣评分：6.9 【47 人评价】</li>
<li>推荐理由：本书对RabbitMQ做了全面、翔实的讲解，体现了两位专家的真知灼见。本书首先介绍了有关MQ的历史，然后从基本的消息通信原理讲起，带领读者一路探索RabbitMQ的消息通信世界。</li>
<li>友情提示：本书 RabbitMQ 版本较旧。消息队列中间件 RabbitMQ、ActiveMQ、RocketMQ、Kafka 可以选择了解一下。</li>
</ul>
<h4 id="26、《Apache-Kafka源码剖析》"><a href="#26、《Apache-Kafka源码剖析》" class="headerlink" title="26、《Apache Kafka源码剖析》"></a>26、<a href="https://item.jd.com/12190152.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=755c2bdf8e794669a2e16d5725666ad8" target="_blank" rel="external">《Apache Kafka源码剖析》</a></h4><ul>
<li>豆瓣评分：7.8 【30 人评价】</li>
<li>推荐理由：以Kafka 0.10.0版本源码为基础，针对Kafka的架构设计到实现细节进行详细阐述。</li>
</ul>
<h4 id="27、《作业调度系统-Quartz-中文文档》"><a href="#27、《作业调度系统-Quartz-中文文档》" class="headerlink" title="27、《作业调度系统 Quartz 中文文档》"></a>27、<a href="https://xuzongbao.gitbooks.io/quartz/content/" target="_blank" rel="external">《作业调度系统 Quartz 中文文档》</a></h4><ul>
<li>豆瓣评分：暂无</li>
<li>推荐理由：暂时未找到大家评价不错的 Quartz 实战相关书籍，先推荐看中文翻译的官方文档。如果你有合适的推荐，烦请告诉我。</li>
<li>友情提示：国内开源项目 Elastic-Job，XXL-Job 都可以选择了解。</li>
</ul>
<h4 id="28、《微服务设计》"><a href="#28、《微服务设计》" class="headerlink" title="28、《微服务设计》"></a>28、<a href="https://item.jd.com/11917800.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=96dec37b8bef4983b1d7f730fd092931" target="_blank" rel="external">《微服务设计》</a></h4><ul>
<li>豆瓣评分：8.1 【273 人评价】</li>
<li>推荐理由：通过Netflix等多个业界案例，从微服务架构演进到原理剖析，全面讲解建模集成部署等微服务所涉及的各种主题，微服务架构与实践指南。</li>
</ul>
<h4 id="29、《Spring-Cloud微服务实战》"><a href="#29、《Spring-Cloud微服务实战》" class="headerlink" title="29、《Spring Cloud微服务实战》"></a>29、<a href="https://item.jd.com/12172344.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=02ed7b41b3d24b0f8f4671c44c49f3a9" target="_blank" rel="external">《Spring Cloud微服务实战》</a></h4><ul>
<li>豆瓣评分：7.9【20 人评价】</li>
<li>推荐理由：从时下流行的微服务架构概念出发，详细介绍了Spring Cloud针对微服务架构中几大核心要素的解决方案和基础组件。对于各个组件的介绍，主要以示例与源码结合的方式来帮助读者更好地理解这些组件的使用方法以及运行原理。同时，在介绍的过程中，还包含了作者在实践中所遇到的一些问题和解决思路，可供读者在实践中作为参考。</li>
<li>作者博客：<a href="http://blog.didispace.com/" target="_blank" rel="external">http://blog.didispace.com/</a></li>
<li>作者公众号：<a href="http://blog.didispace.com/css/images/weixin.jpg" target="_blank" rel="external">didispace</a></li>
</ul>
<h4 id="30、《亿级流量网站架构核心技术》"><a href="#30、《亿级流量网站架构核心技术》" class="headerlink" title="30、《亿级流量网站架构核心技术》"></a>30、<a href="https://item.jd.com/12153914.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=5834a1458c2c4f00952e3ce5ef631676" target="_blank" rel="external">《亿级流量网站架构核心技术》</a></h4><ul>
<li>豆瓣评分：7.6【57 人评价】</li>
<li>推荐理由：总结并梳理了亿级流量网站高可用和高并发原则，通过实例详细介绍了如何落地这些原则。本书分为四部分：概述、高可用原则、高并发原则、案例实战。</li>
<li>作者博客：<a href="http://jinnianshilongnian.iteye.com/" target="_blank" rel="external">开涛的博客</a></li>
<li>作者公众号：<a href="http://open.weixin.qq.com/qr/code/?username=kaitao-1234567" target="_blank" rel="external">开涛的博客</a></li>
</ul>
<h4 id="31、《架构即未来：现代企业可扩展的Web架构、流程和组织》"><a href="#31、《架构即未来：现代企业可扩展的Web架构、流程和组织》" class="headerlink" title="31、《架构即未来：现代企业可扩展的Web架构、流程和组织》"></a>31、<a href="https://item.jd.com/11905648.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=1dcd186310304ff9bb7f1ff3a6e9c487" target="_blank" rel="external">《架构即未来：现代企业可扩展的Web架构、流程和组织》</a></h4><ul>
<li>豆瓣评分：8.7【77 人评价】</li>
<li>推荐理由：任何一个持续成长的公司最终都需要解决系统、组织和流程的扩展性问题。本书汇聚了作者从eBay、VISA、Salesforce.com到Apple超过30年的丰富经验， 全面阐释了经过验证的信息技术扩展方法，对所需要掌握的产品和服务的平滑扩展做了详尽的论述，并在第1版的基础上更新了扩展的策略、技术和案例。</li>
</ul>
<h4 id="32、《Zabbix企业级分布式监控系统》"><a href="#32、《Zabbix企业级分布式监控系统》" class="headerlink" title="32、《Zabbix企业级分布式监控系统》"></a>32、<a href="https://item.jd.com/11522142.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=3bcf74726eb949658ae9bc3d82dc02b1" target="_blank" rel="external">《Zabbix企业级分布式监控系统》</a></h4><ul>
<li>豆瓣评分：7.6 【39 人评价】</li>
<li>推荐理由：本书从运维（OPS）角度对Zabbix的各项功能进行了详细介绍，以自动化运维视角为出发点，对Zabbix的安装和配置、自动化功能、监控告警、性能调优、Zabbix API、Zabbix协议、RPM安装包定制，结合SaltStack实现自动化配置管理等内容进行了全方位的深入剖析。</li>
</ul>
<h4 id="33、《第一本Docker书》"><a href="#33、《第一本Docker书》" class="headerlink" title="33、《第一本Docker书》"></a>33、<a href="https://item.jd.com/11909234.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=233f169f48ee4f84a23cabf57e72485a" target="_blank" rel="external">《第一本Docker书》</a></h4><ul>
<li>豆瓣评分：8.8 【63 人评价】</li>
<li>推荐理由：本书由Docker公司前服务与支持副总裁James Turnbull编写，是Docker开发指南。本书专注于Docker 1.9及以上版本，指导读者完成Docker的安装、部署、管理和扩展，带领读者经历从测试到生产的整个开发生命周期，让读者了解Docker适用于什么场景。</li>
<li>推荐博客：<a href="http://dockone.io/" target="_blank" rel="external">DockerOne</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=dockerone" target="_blank" rel="external">DockerOne</a></li>
</ul>
<h4 id="34、《Docker——容器与容器云》"><a href="#34、《Docker——容器与容器云》" class="headerlink" title="34、《Docker——容器与容器云》"></a>34、<a href="https://item.jd.com/12052716.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=f3215fb76db24ec4bf140c895fc0944d" target="_blank" rel="external">《Docker——容器与容器云》</a></h4><ul>
<li>豆瓣评分：8.5 【99 人评价】</li>
<li>推荐理由：本书根据Docker 1.10版和Kubernetes 1.2版对第1版进行了全面更新，从实践者的角度出发，以Docker和Kubernetes为重点，沿着“基本用法介绍”到“核心原理解读”到“高级实践技巧”的思路，一本书讲透当前主流的容器和容器云技术，有助于读者在实际场景中利用Docker容器和容器云解决问题并启发新的思考。</li>
</ul>
<h4 id="35、《Kubernetes权威指南》"><a href="#35、《Kubernetes权威指南》" class="headerlink" title="35、《Kubernetes权威指南》"></a>35、<a href="https://item.jd.com/11980349.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=2935d4803df24414b35d41ab0b7f5626" target="_blank" rel="external">《Kubernetes权威指南》</a></h4><p>豆瓣评分：7.7【15 人评价】<br>推荐理由：Kubernetes重磅开山之作，针对Kubernetes v1.6和本书第2版进行大篇幅内容更新，全方位完美覆盖，可借鉴性极强。<br>推荐博客：<a href="https://www.kubernetes.org.cn/" target="_blank" rel="external">Kubernetes 中文社区</a><br>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=kubernetescn" target="_blank" rel="external">K8S 技术社区</a></p>
<h4 id="36、《用Mesos框架构建分布式应用》"><a href="#36、《用Mesos框架构建分布式应用》" class="headerlink" title="36、《用Mesos框架构建分布式应用》"></a>36、<a href="https://item.jd.com/12043093.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=31a6a0687d704012a93019c79b845a89" target="_blank" rel="external">《用Mesos框架构建分布式应用》</a></h4><ul>
<li>豆瓣评分：暂无评分</li>
<li>推荐理由：超级薄的一本书，看完之后，你会对 Mesos 会非常了解，并且极大可能性学会如何基于 Mesos 框架构建分布式应用。</li>
</ul>
<h4 id="37、《数据结构与算法分析：Java语言描述》"><a href="#37、《数据结构与算法分析：Java语言描述》" class="headerlink" title="37、《数据结构与算法分析：Java语言描述》"></a>37、<a href="https://item.jd.com/11886254.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=acc1fd554cdf4b2d9872a745174b005f" target="_blank" rel="external">《数据结构与算法分析：Java语言描述》</a></h4><ul>
<li>豆瓣评分：8.3【183 人评价】</li>
<li>推荐理由：本书是国外数据结构与算法分析方面的经典教材，使用卓越的Java编程语言作为实现工具讨论了数据结构（组织大量数据的方法）和算法分析（对算法运行时间的估计）。</li>
<li>友情提示：算法方法还有其他很好的书籍，例如《算法导论》、《算法（第四版）》，也可以选择阅读。重要的是，保持耐心，享受这个痛并快乐的过程。</li>
</ul>
<h4 id="38、《Head-First-设计模式》"><a href="#38、《Head-First-设计模式》" class="headerlink" title="38、《Head First 设计模式》"></a>38、<a href="https://item.jd.com/10100236.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=6a61dd328ecd43bc906a209498de467d" target="_blank" rel="external">《Head First 设计模式》</a></h4><ul>
<li>豆瓣评分：9.2【2394 人评价】</li>
<li>推荐理由：《Head First设计模式》(中文版)共有14章，每章都介绍了几个设计模式，完整地涵盖了四人组版本全部23个设计模式。</li>
</ul>
<h4 id="39、《HTTP权威指南》"><a href="#39、《HTTP权威指南》" class="headerlink" title="39、《HTTP权威指南》"></a>39、<a href="https://item.jd.com/11056556.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=415194b6c8a64a2abb9a51b055efb1a2" target="_blank" rel="external">《HTTP权威指南》</a></h4><ul>
<li>豆瓣评分：8.7 【1126 人评价】</li>
<li>推荐理由：本书尝试着将HTTP中一些互相关联且常被误解的规则梳理清楚，并编写了一系列基于各种主题的章节，对HTTP各方面的特性进行了介绍。纵观全书，对HTTP“为什么”这样做进行了详细的解释，而不仅仅停留在它是“怎么做”的。</li>
</ul>
<h4 id="40、《TCP-IP详解-系列》"><a href="#40、《TCP-IP详解-系列》" class="headerlink" title="40、《TCP/IP详解 系列》"></a>40、<a href="https://item.jd.com/10057317.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=21aa132de02443148ea06c4c255147e2" target="_blank" rel="external">《TCP/IP详解 系列》</a></h4><ul>
<li>豆瓣评分：9.3 【1883 人评价】</li>
<li>推荐理由：完整而详细的TCP/IP协议指南。针对任何希望理解TCP/IP协议是如何实现的读者设计。</li>
</ul>
<h4 id="41、《Linux内核设计与实现》"><a href="#41、《Linux内核设计与实现》" class="headerlink" title="41、《Linux内核设计与实现》"></a>41、<a href="https://item.jd.com/10664953.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=904940b94eff4b6bb6a19c155dda0fff" target="_blank" rel="external">《Linux内核设计与实现》</a></h4><ul>
<li>豆瓣评分：8.7【286 人评价】</li>
<li>详细描述了Linux内核的主要子系统和特点，包括Linux内核的设计、实现和接口。从理论到实践涵盖了Linux内核的方方面面，可以满足读者的各种兴趣和需求。</li>
<li>友情提示：Linux内核方面不乏好书。本书篇幅方面较为合适。</li>
</ul>
<h4 id="42-《剑指Offer：名企面试官精讲典型编程题》"><a href="#42-《剑指Offer：名企面试官精讲典型编程题》" class="headerlink" title="42 《剑指Offer：名企面试官精讲典型编程题》"></a>42 <a href="https://item.jd.com/12163054.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=050d308787134c908c3ade06a205766f" target="_blank" rel="external">《剑指Offer：名企面试官精讲典型编程题》</a></h4><ul>
<li>豆瓣评分：8.5【508 人评价】</li>
<li>推荐理由：剖析了80个典型的编程面试题，系统整理基础知识、代码质量、解题思路、优化效率和综合能力这5个面试要点。</li>
<li>推荐网站：<a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网-专业IT笔试面试备考平台</a></li>
</ul>
<h4 id="43-《程序员代码面试指南：IT名企算法与数据结构题目最优解》"><a href="#43-《程序员代码面试指南：IT名企算法与数据结构题目最优解》" class="headerlink" title="43 《程序员代码面试指南：IT名企算法与数据结构题目最优解》"></a>43 <a href="https://item.jd.com/11770838.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=456c96ef91064b0bb1f107dd0bea036c" target="_blank" rel="external">《程序员代码面试指南：IT名企算法与数据结构题目最优解》</a></h4><ul>
<li>豆瓣评分：8.4【32 人评价】</li>
<li>推荐理由：程序员刷题宝典！编程能力提升秘笈！精选IT名企真实代码面试题，全面覆盖算法与数据结构题型！</li>
</ul>
<h4 id="44-《领域驱动设计》"><a href="#44-《领域驱动设计》" class="headerlink" title="44 《领域驱动设计》"></a>44 <a href="https://item.jd.com/11961038.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=e263bb9daa91485295956fe59455107c" target="_blank" rel="external">《领域驱动设计》</a></h4><ul>
<li>豆瓣评分：9.0【115 人评价】</li>
<li>推荐理由：是领域驱动设计方面的经典之作。全书围绕着设计和开发实践，结合若干真实的项目案例，向读者阐述如何在真实的软件开发中应用领域驱动设计。</li>
<li>友情提示：理论的书籍往往较为枯燥，勤修内功是必须走的路。</li>
</ul>
<h4 id="45、《火球-UML大战需求分析》"><a href="#45、《火球-UML大战需求分析》" class="headerlink" title="45、《火球:UML大战需求分析》"></a>45、<a href="https://item.jd.com/10932134.html?utm_source=other_x_short&amp;utm_medium=tuiguang&amp;utm_campaign=t_1000388308_&amp;utm_term=da62a9177e3145c79bcbc36abbdc86c6" target="_blank" rel="external">《火球:UML大战需求分析》</a></h4><ul>
<li>豆瓣评分：7.9【115 人评价】</li>
<li>推荐理由：融合UML、非UML、需求分析及需求管理等各方面的知识，帮助读者解决UML业界问题、需求分析及需求管理问题。</li>
<li>友情提示：可能不是最好的 UML 书籍，但从是否能够阅读理解完的角度来说，本书可能是相对合适的。有兴趣的同学也可以看看《UML和模式应用》、《大象：Thinking in UML》。</li>
</ul>
<h3 id="ToDO-List"><a href="#ToDO-List" class="headerlink" title="ToDO List"></a>ToDO List</h3><h4 id="待推荐书籍"><a href="#待推荐书籍" class="headerlink" title="待推荐书籍"></a>待推荐书籍</h4><ul>
<li>TODO 《大数据日知录 架构与算法》</li>
<li>TODO 《大型网站系统与Java中间件实践》</li>
<li>TODO 《HotSpot实战》</li>
<li>TODO 《垃圾回收的算法与实现》</li>
<li>TODO 《彩色UML建模》</li>
<li>TODO 《七周七并发模型》</li>
</ul>
<h4 id="技术领域归纳"><a href="#技术领域归纳" class="headerlink" title="技术领域归纳"></a>技术领域归纳</h4><ul>
<li>[] Go</li>
<li>[] Node</li>
<li>[] Linux内核</li>
<li>[] UML</li>
<li>[] Tomcat</li>
<li>[x] SpringCloud</li>
<li>[x] Java基础</li>
<li>[] Netty</li>
<li>[x] Mybatis</li>
<li>[x] 数据库</li>
<li>[] MongoDB</li>
<li>[x] Maven</li>
<li>[] DevOps</li>
<li>[] 运维</li>
<li>[] 面试</li>
<li>[] 消息队列</li>
<li>[x] 设计模式</li>
<li>[] 算法与数据结构</li>
<li>[] Zookeeper</li>
<li>[x] SpringBoot</li>
<li>[] Nginx</li>
<li>[] 定时任务</li>
<li>[] 搜索引擎</li>
<li>[x] 协议</li>
<li>[x] 单元测试</li>
<li>[x] 重构</li>
<li>[] 日志</li>
<li>[] Docker</li>
<li>[] 监控</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.iocoder.cn/Architecture/books-recommended/" target="_blank" rel="external">书单整理</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot整合Elasticsearch]]></title>
      <url>http://jianwl.com/2017/10/25/SpringBoot%E6%95%B4%E5%90%88Elasticsearch/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一年以前曾接触过ES，但后续因为没有相关的业务需求，荒废了这一块的进修；近期因朋友问到相关问题，故重新拾起。之前学的基本忘的差不多了，索性从头学起；这一节，主要来学习如何通过SpringBoot来整合ES，从环境的搭建、到源码的实战来学习ES；</p>
<h3 id="1、本地ES搭建"><a href="#1、本地ES搭建" class="headerlink" title="1、本地ES搭建"></a>1、本地ES搭建</h3><p>1）<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-4" target="_blank" rel="external">官方ES 2.4.4 版本</a></p>
<p>为什么不用最新版版本呢？因为Spring Data Elasticsearch的版本目前只支持5.00以下的版本，详情可以看这<a href="https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix" target="_blank" rel="external">版本对应关系</a>。</p>
<p>2）解压 具体可以看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html" target="_blank" rel="external">ES安装官方文档</a>。</p>
<p>3）修改 ${ES_HOME}/config/elasticsearch.yml文件,设置cluster.name;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cluster.name: frank_cluster</div></pre></td></tr></table></figure>
<p>4) 启动ES服务</p>
<h3 id="2、SpringBoot整合ES实战"><a href="#2、SpringBoot整合ES实战" class="headerlink" title="2、SpringBoot整合ES实战"></a>2、SpringBoot整合ES实战</h3><h4 id="1-pom-xml-添加依赖"><a href="#1-pom-xml-添加依赖" class="headerlink" title="1) pom.xml 添加依赖"></a>1) pom.xml 添加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.39&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<h4 id="2）创建数据模型User"><a href="#2）创建数据模型User" class="headerlink" title="2）创建数据模型User"></a>2）创建数据模型User</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@Document(indexName = &quot;frank&quot;, type = &quot;user&quot;)</div><div class="line">public class User &#123;</div><div class="line">    @Id</div><div class="line">    private Long id;</div><div class="line"></div><div class="line">    private String userName;</div><div class="line"></div><div class="line">    private String userPhone;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(Long id, String userName, String userPhone) &#123;</div><div class="line">        this.id = id;</div><div class="line">        this.userName = userName;</div><div class="line">        this.userPhone = userPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Long getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(Long id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUserName() &#123;</div><div class="line">        return userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUserName(String userName) &#123;</div><div class="line">        this.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUserPhone() &#123;</div><div class="line">        return userPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUserPhone(String userPhone) &#123;</div><div class="line">        this.userPhone = userPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;User&#123;&quot; +</div><div class="line">                &quot;id=&quot; + id +</div><div class="line">                &quot;, userName=&apos;&quot; + userName + &apos;\&apos;&apos; +</div><div class="line">                &quot;, userPhone=&apos;&quot; + userPhone + &apos;\&apos;&apos; +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Dao层"><a href="#3-Dao层" class="headerlink" title="3) Dao层"></a>3) Dao层</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public interface UserRepository extends ElasticsearchRepository&lt;User,Long&gt; &#123;</div><div class="line">    /**</div><div class="line">     * 根据用户名，获取用户分页列表</div><div class="line">     * @param userName 用户名</div><div class="line">     * @param pageable 分页模型</div><div class="line">     * @return 分页用户列表</div><div class="line">     */</div><div class="line">    Page&lt;User&gt; findByUserName(String userName, Pageable pageable);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据用户手机号，获取用户列表</div><div class="line">     * @param userPhone 用户手机</div><div class="line">     * @return  用户列表</div><div class="line">     */</div><div class="line">    List&lt;User&gt; findByUserPhone(String userPhone);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Service层-接口"><a href="#4-Service层-接口" class="headerlink" title="4) Service层 - 接口"></a>4) Service层 - 接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public interface UserService &#123;</div><div class="line">    User save(User user);</div><div class="line"></div><div class="line">    void deleteByUserId(Long userId);</div><div class="line"></div><div class="line">    User findByUserId(Long userId);</div><div class="line"></div><div class="line">    Iterable&lt;User&gt; findAll();</div><div class="line"></div><div class="line">    Page&lt;User&gt; findByUserName(String userName, PageRequest pageRequest);</div><div class="line"></div><div class="line">    List&lt;User&gt; findByUserPhone(String userPhone);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5）Service层-实现类"><a href="#5）Service层-实现类" class="headerlink" title="5）Service层 - 实现类"></a>5）Service层 - 实现类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public class UserServiceImpl implements UserService &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private UserRepository userRepository;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public User save(User user) &#123;</div><div class="line">        return userRepository.save(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void deleteByUserId(Long userId) &#123;</div><div class="line">        userRepository.delete(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public User findByUserId(Long userId) &#123;</div><div class="line">        return userRepository.findOne(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Iterable&lt;User&gt; findAll() &#123;</div><div class="line">        return userRepository.findAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Page&lt;User&gt; findByUserName(String userName, PageRequest pageRequest) &#123;</div><div class="line">        return userRepository.findByUserName(userName,pageRequest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;User&gt; findByUserPhone(String userPhone) &#123;</div><div class="line">        return userRepository.findByUserPhone(userPhone);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-入口"><a href="#6-入口" class="headerlink" title="6) 入口"></a>6) 入口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">public class Chapter411Application implements CommandLineRunner &#123;</div><div class="line">	@Autowired</div><div class="line">	private UserService userService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(String... args) throws Exception &#123;</div><div class="line">		System.out.println(&quot;&lt;&lt;&lt;&lt;&lt;&lt; Elasticsearch 初始化数据开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;);</div><div class="line">		userService.save(new User(1L,&quot;张三&quot;,&quot;18817394122&quot;));</div><div class="line">		userService.save(new User(2L,&quot;李四&quot;,&quot;18817394132&quot;));</div><div class="line">		userService.save(new User(3L,&quot;王二麻子&quot;,&quot;18817394142&quot;));</div><div class="line">		userService.save(new User(4L,&quot;赵六子&quot;,&quot;18817394152&quot;));</div><div class="line">		System.out.println(&quot;&lt;&lt;&lt;&lt;&lt;&lt; Elasticsearch 初始化数据结束 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(Chapter411Application.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-修改配置文件application-properties"><a href="#7-修改配置文件application-properties" class="headerlink" title="7) 修改配置文件application.properties"></a>7) 修改配置文件application.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.data.elasticsearch.cluster-name=frank_cluster</div><div class="line">spring.data.elasticsearch.cluster-nodes=localhost:9300</div></pre></td></tr></table></figure>
<h4 id="8-测试类"><a href="#8-测试类" class="headerlink" title="8) 测试类"></a>8) 测试类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class Chapter410ApplicationTests &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private UserService userService;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_001()&#123;</div><div class="line">		List&lt;User&gt; userList = new ArrayList&lt;&gt;();</div><div class="line">		Iterator&lt;User&gt; iterator = userService.findAll().iterator();</div><div class="line">		while (iterator.hasNext())&#123;</div><div class="line">			userList.add(iterator.next());</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;userList =&gt; &quot; + JSON.toJSONString(userList));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_002()&#123;</div><div class="line">		Page&lt;User&gt; userPage = userService.findByUserName(&quot;张三&quot;,new PageRequest(0,10));</div><div class="line">		System.out.println(&quot;element nums =&gt; &quot; + userPage.getTotalElements());</div><div class="line">		System.out.println(&quot;user page =&gt; &quot; + JSON.toJSONString(userPage.getContent()));</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_003()&#123;</div><div class="line">		System.out.println(JSON.toJSONString(userService.findByUserId(1L)));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_004()&#123;</div><div class="line">		System.out.println(JSON.toJSONString(userService.findByUserPhone(&quot;18817394122&quot;)));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void test_005()&#123;</div><div class="line">		userService.deleteByUserId(1L);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、遇到的坑"><a href="#3、遇到的坑" class="headerlink" title="3、遇到的坑"></a>3、遇到的坑</h3><p>1、 由于SpringDataElasticsearch只支持5.0以下的版本，而本地装了ES5.6版本，导致报错；具体错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Caused by: org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;localhost&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure>
<p>解决办法：将本地ES由5.6版本降到2.46版本即可；</p>
<p>2、单机启动时，当往ES存入数据时，因为不存在备份分片，导致系统健康值为黄色；</p>
<p>解决办法：再次启动ES服务即可；</p>
<h3 id="4、本项目源码"><a href="#4、本项目源码" class="headerlink" title="4、本项目源码"></a>4、本项目源码</h3><p><a href="https://github.com/frank-jian/SpringBootDemo/tree/master/chapter4-11" target="_blank" rel="external">SpringBoot整合ES源码</a></p>
<h3 id="5、参考资料"><a href="#5、参考资料" class="headerlink" title="5、参考资料"></a>5、参考资料</h3><p>1、<a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-data-elasticsearch" target="_blank" rel="external">spring-boot-sample-data-elasticsearch</a></p>
<p>2、<a href="http://www.mkyong.com/spring-boot/spring-boot-spring-data-elasticsearch-example/" target="_blank" rel="external">Spring Boot + Spring Data + Elasticsearch example</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ShadowsocksX在配置文件设置server列表]]></title>
      <url>http://jianwl.com/2017/10/21/ShadowsocksX%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AEserver%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Mac上使用ShadowsocksX客户端，之前都是一台一台服务器手动添加的，但是服务器太多就想能不能通过配置文件来设置。接下来我们来演示下，在Mac下如何通过配置文件来设置服务列表。</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><h4 id="1、-Shadowsocks客户端在Mac下的配置文件的位置"><a href="#1、-Shadowsocks客户端在Mac下的配置文件的位置" class="headerlink" title="1、 Shadowsocks客户端在Mac下的配置文件的位置"></a>1、 Shadowsocks客户端在Mac下的配置文件的位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Preferences/clowwindy.ShadowsocksX.plist</div></pre></td></tr></table></figure>
<h4 id="2、plist文件是什么"><a href="#2、plist文件是什么" class="headerlink" title="2、plist文件是什么?"></a>2、plist文件是什么?</h4><blockquote>
<p>在OS X的Cocoa，NeXTSTEP和GNUstep编程框架中，属性列表（Property List）文件是一种用来存储序列化后的对象的文件。属性列表文件的文件扩展名为.plist，因此通常被称为plist文件。Plist文件通常用于储存用户设置，也可以用于存储捆绑的信息。——Wikipedia</p>
</blockquote>
<h4 id="3、将plist转成可读的xml"><a href="#3、将plist转成可读的xml" class="headerlink" title="3、将plist转成可读的xml"></a>3、将plist转成可读的xml</h4><p><strong>注意：</strong> 在修改plist <strong>前请务必备份</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plutil -convert xml1 ~/Library/Preferences/clowwindy.ShadowsocksX.plist -o xxx.xml</div></pre></td></tr></table></figure>
<p>在<key>config</key>字段下的<data>字段就是保存了现有服务器信息的字段，整个复制出来，base63解码(OSX的base64工具在从stdin读入数据的时候有长度限制，建议先保存到文件再读入)</data></p>
<h4 id="4、base64解码服务列表信息"><a href="#4、base64解码服务列表信息" class="headerlink" title="4、base64解码服务列表信息"></a>4、base64解码服务列表信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">base64 -D -i /path/to/file -o -</div></pre></td></tr></table></figure>
<p>-D 表示解码，-i 表示读入的文件路径，-o – 表示输出解码结果到 stdout，也可以保存到新文件方便编辑。</p>
<p>修改后base64编码填回xml(不加-D选项即是编码)</p>
<h4 id="5、将xml转回plist"><a href="#5、将xml转回plist" class="headerlink" title="5、将xml转回plist"></a>5、将xml转回plist</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plutil -convert binary1 xxx.xml -o yyy.plist</div></pre></td></tr></table></figure>
<h4 id="6、重新载入plist"><a href="#6、重新载入plist" class="headerlink" title="6、重新载入plist"></a>6、重新载入plist</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults import clowwindy.ShadowsocksX /path/to/yyy.plist</div></pre></td></tr></table></figure>
<h4 id="7、重启shadowsocksX客户端，即可看到新配置已经载入"><a href="#7、重启shadowsocksX客户端，即可看到新配置已经载入" class="headerlink" title="7、重启shadowsocksX客户端，即可看到新配置已经载入"></a>7、重启shadowsocksX客户端，即可看到新配置已经载入</h4><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.starduster.me/2016/04/02/mac-shadowsocksx-config-file-to-os-x-user-default-plist/" target="_blank" rel="external">从 ShadowsocksX 客户端配置文件说到 OS X user default plist</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iTerm2配置代理]]></title>
      <url>http://jianwl.com/2017/10/14/iTerm2%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Shadowsocks使用全局代理模式的前提下，iTerm2下载却不走代理，这一节我们将来解决这个问题；</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="Socks-proxy"><a href="#Socks-proxy" class="headerlink" title="Socks proxy"></a>Socks proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export http_proxy=sock5://127.0.0.1:1080</div></pre></td></tr></table></figure>
<h4 id="Http-proxy"><a href="#Http-proxy" class="headerlink" title="Http proxy"></a>Http proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http_proxy=http://localhost:8035/</div></pre></td></tr></table></figure>
<h4 id="Https-proxy"><a href="#Https-proxy" class="headerlink" title="Https proxy"></a>Https proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https_proxy=http://localhost:8035/</div></pre></td></tr></table></figure>
<h3 id="验证iTerm2走了代理"><a href="#验证iTerm2走了代理" class="headerlink" title="验证iTerm2走了代理"></a>验证iTerm2走了代理</h3><h4 id="1-Shadowsocks选择全局模式"><a href="#1-Shadowsocks选择全局模式" class="headerlink" title="1. Shadowsocks选择全局模式"></a>1. Shadowsocks选择全局模式</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/94978227.jpg" alt=""></p>
<h4 id="2-浏览器访问IP查询-查看当前网络IP"><a href="#2-浏览器访问IP查询-查看当前网络IP" class="headerlink" title="2. 浏览器访问IP查询,查看当前网络IP"></a>2. 浏览器访问<a href="http://ip.cn/" target="_blank" rel="external">IP查询</a>,查看当前网络IP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/16537485.jpg" alt=""></p>
<h4 id="3-查看iTerm2访问的网络IP"><a href="#3-查看iTerm2访问的网络IP" class="headerlink" title="3. 查看iTerm2访问的网络IP"></a>3. 查看iTerm2访问的网络IP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-10-14/55981155.jpg" alt=""></p>
<h4 id="4-由此可见iTerm2已经走代理了"><a href="#4-由此可见iTerm2已经走代理了" class="headerlink" title="4. 由此可见iTerm2已经走代理了"></a>4. 由此可见iTerm2已经走代理了</h4><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://skyacer.github.io/2016/03/24/iTerm2-config-proxy/" target="_blank" rel="external">iTerm2 configure proxy</a></li>
<li><a href="https://tech.jandou.com/to-accelerate-the-terminal.html" target="_blank" rel="external">iTerm2配置代理 - 【若上述教程失效，可以尝试此教程】</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java常用加密算法简述]]></title>
      <url>http://jianwl.com/2017/10/11/Java%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在开发应用过程中，客户端与服务端经常需要进行数据传输，涉及到重要隐私安全信息时，开发者自然会想到对其进行加密，即使传输过程中被”有心人”截取，也不会将信息泄露。对于加密算法，相信很多开发者都有了解，比如MD5加密、BASE64加密，SHA-1加密、DES加密、AES加密、RSA加密等等。在这里主要总结一下常用的加密算法。</p>
<h3 id="1-MD5加密"><a href="#1-MD5加密" class="headerlink" title="1. MD5加密"></a>1. MD5加密</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><p>MD5的全称是<code>Message-Digest Algorithm 5</code>(信息-摘要算法)，在90年代初由<code>MIT Laboratory for Computer Science 和 RSA Data Security Inc</code>的<code>Ronald L.Riverst</code>开发出来，经MD2、MD3和MD4发展而来。</p>
<p>MD5用于确保信息传输完整一致，是计算机广泛使用的杂凑算法之一,MD5的作用是让大容量信息在数字签名软件签署私人秘钥前被压缩成一种保密的格式(即把一个任意长度的字节串变成一定长的十六进制数字串)。</p>
<h4 id="1-2-算法原理"><a href="#1-2-算法原理" class="headerlink" title="1.2 算法原理"></a>1.2 算法原理</h4><p>MD5以512位分组来处理输入信息，且每一分组又被划分为32位子分组，经过了一系列的处理后，算法的输出由4个32位分组组成，将4个32位分组级联后将生成一个128位散列值。</p>
<h4 id="1-3-MD5的特点"><a href="#1-3-MD5的特点" class="headerlink" title="1.3 MD5的特点"></a>1.3 MD5的特点</h4><ol>
<li>压缩性: 任意长度的数据，算出的MD5值长度都是固定的；</li>
<li>容易计算: 从原数据计算出MD5很容易</li>
<li>抗修改性: 对原始数据进行任何改动，哪怕只修改一个字节，所得到的MD5值都有很大的区别。</li>
<li>弱抗碰撞: 已知原数据和其MD5值，想找到一个相同的MD5值的数据是非常困难的；</li>
<li>强抗碰撞: 想找到两个不同的数据，使它们具有相同的MD5值是非常困难的。</li>
</ol>
<h4 id="1-4-JAVA中MD5的实现"><a href="#1-4-JAVA中MD5的实现" class="headerlink" title="1.4 JAVA中MD5的实现"></a>1.4 JAVA中MD5的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class MD5Utils &#123;</div><div class="line">    private static final String MD5_KEY = &quot;MD5&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * MD5加密 生成32位MD5码</div><div class="line">     * @param content 待加密字符串</div><div class="line">     * @return 返回32位MD5码</div><div class="line">     * @throws UnsupportedEncodingException</div><div class="line">     */</div><div class="line">    public static String md5Encode(String content) throws UnsupportedEncodingException &#123;</div><div class="line">        MessageDigest md5 = null;</div><div class="line">        try&#123;</div><div class="line">            md5 = MessageDigest.getInstance(MD5_KEY);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        byte[] byteArray = content.getBytes(&quot;UTF-8&quot;);</div><div class="line">        byte[] md5Bytes = md5.digest(byteArray);</div><div class="line">        StringBuffer hexValue = new StringBuffer();</div><div class="line">        for (int i = 0; i &lt; md5Bytes.length; i ++) &#123;</div><div class="line">            int val = ((int) md5Bytes[i]) &amp; 0xff;</div><div class="line">            if(val &lt; 16) &#123;</div><div class="line">                hexValue.append(0);</div><div class="line">            &#125;</div><div class="line">            hexValue.append(Integer.toHexString(val));</div><div class="line">        &#125;</div><div class="line">        return hexValue.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        String content = &quot;This is a MD5 Test&quot;;</div><div class="line">        String hash = md5Encode(content);</div><div class="line">        System.out.println(&quot;original: &quot; + content);</div><div class="line">        System.out.println(&quot;md5 after: &quot; + hash + &quot; length =&gt; &quot; + hash.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-SHA加密"><a href="#2-SHA加密" class="headerlink" title="2. SHA加密"></a>2. SHA加密</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h4><p>SHA是一种数据加密算法，其算法思想是，接收一段明文，然后以一种不可逆的方式将它转换成一段密文，也可以简单的理解为取出一串输入码，并把他们转化为长度较短、位数固定的输出序列即散列值。</p>
<h4 id="2-2-SHA-1和MD5的比较"><a href="#2-2-SHA-1和MD5的比较" class="headerlink" title="2.2 SHA-1和MD5的比较"></a>2.2 SHA-1和MD5的比较</h4><p>因为两者均由MD4导出，SHA-1和MD5彼此很相似，他们的强度和其他特性也相识，但有以下几点不同：</p>
<ol>
<li>对强行攻击的安全性: 最显著和最重要的区别是SHA-1摘要比MD5摘要长32位，使用强行技术，产生任何一个报文, 对MD5是2^128数据级的操作，对SHA-1是2^160数量级的操作，这样SHA-1对强行攻击有更大的强度。</li>
<li>对密码分析的安全性：由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击。</li>
<li>速度: 在相同的硬件上，SHA-A的运行速度比MD慢。</li>
</ol>
<h4 id="2-3-JAVA中SHA实现"><a href="#2-3-JAVA中SHA实现" class="headerlink" title="2.3 JAVA中SHA实现"></a>2.3 JAVA中SHA实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class SHAUtils &#123;</div><div class="line">    private static final String SHA_KEY = &quot;SHA&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * MD5加密 生成32位MD5码</div><div class="line">     * @param content 待加密字符串</div><div class="line">     * @return 返回32位MD5码</div><div class="line">     * @throws UnsupportedEncodingException</div><div class="line">     */</div><div class="line">    public static String shaEncode(String content) throws UnsupportedEncodingException &#123;</div><div class="line">        MessageDigest sha = null;</div><div class="line">        try&#123;</div><div class="line">            sha = MessageDigest.getInstance(SHA_KEY);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        byte[] byteArray = content.getBytes(&quot;UTF-8&quot;);</div><div class="line">        byte[] shaBytes = sha.digest(byteArray);</div><div class="line">        StringBuffer hexValue = new StringBuffer();</div><div class="line">        for (int i = 0; i &lt; shaBytes.length; i ++) &#123;</div><div class="line">            int val = ((int) shaBytes[i]) &amp; 0xff;</div><div class="line">            if(val &lt; 16) &#123;</div><div class="line">                hexValue.append(0);</div><div class="line">            &#125;</div><div class="line">            hexValue.append(Integer.toHexString(val));</div><div class="line">        &#125;</div><div class="line">        return hexValue.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        String content = &quot;This is a SHA Test&quot;;</div><div class="line">        String hash = shaEncode(content);</div><div class="line">        System.out.println(&quot;original: &quot; + content);</div><div class="line">        System.out.println(&quot;sha after: &quot; + hash + &quot; length =&gt; &quot; + hash.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-对称加密与非对称加密"><a href="#3-对称加密与非对称加密" class="headerlink" title="3. 对称加密与非对称加密"></a>3. 对称加密与非对称加密</h3><h4 id="3-1-对称加密算法"><a href="#3-1-对称加密算法" class="headerlink" title="3.1 对称加密算法"></a>3.1 对称加密算法</h4><blockquote>
<p>甲方选择某一种加密规则，对信息进行加密；</p>
<p>乙方使用同一种规则，对信息进行解密。</p>
</blockquote>
<p>特点: 对称加密算法的特定是算法公开、计算量下、加密速度快、加密效率高。</p>
<p>不足: 甲方必须把加密规则告诉乙方，否则无法解密。保存和传递秘钥，就成了最头疼的问题</p>
<p>常见的对称加密算法: AES DES 3DES IDEA RC4 RC5 RC6 等</p>
<h4 id="3-2-非对称加密算法"><a href="#3-2-非对称加密算法" class="headerlink" title="3.2 非对称加密算法"></a>3.2 非对称加密算法</h4><blockquote>
<p>乙方生成两把密钥(公钥和私钥)，公钥是公开的，任何人都可以获得，私钥则是保密的。</p>
<p>甲方获取乙方的公钥，然后用它对信息加密</p>
<p>乙方得到加密后的信息，用私钥解密</p>
</blockquote>
<p>特点: 公钥和私钥是一对，如果公开密钥对数据进行加密，只有对应的私钥才能解密；如果用私钥进行加密，只有对应的公钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫非对称加密算法。</p>
<h3 id="4-AES算法和RSA算法"><a href="#4-AES算法和RSA算法" class="headerlink" title="4. AES算法和RSA算法"></a>4. AES算法和RSA算法</h3><h4 id="4-1-AES算法"><a href="#4-1-AES算法" class="headerlink" title="4.1 AES算法"></a>4.1 AES算法</h4><p>高级加密标准(Advanced Encryption Standard,缩写:AES),在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。</p>
<h4 id="4-2-RSA算法"><a href="#4-2-RSA算法" class="headerlink" title="4.2 RSA算法"></a>4.2 RSA算法</h4><p>1977年，三位科学家<code>Rivest</code>、<code>Shamir</code>和<code>Adleman</code>设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，加做RSA算法。RSA属于非对称加密算法。</p>
<h4 id="4-3-两种算法使用的场景"><a href="#4-3-两种算法使用的场景" class="headerlink" title="4.3 两种算法使用的场景"></a>4.3 两种算法使用的场景</h4><ol>
<li>客户端传输重要信息给服务端，服务端返回的信息不需加密的情况，如绑定银行卡的时候，需要传递用户的银行卡号、手机号等重要信息，客户端这边就需要对这些重要信息进行加密，使用RSA公钥加密、服务端使用RSA解密，然后返回一些普通信息，比如状态码code,提示信息msg等</li>
<li>客户端传输重要的信息给服务端，服务端返回的信息需加密,如传递用户名和密码等资料，需要进行加密，服务端验证信息后，返回令牌token需要进行加密，客户端解密后保存。</li>
</ol>
<h4 id="4-4-JAVA中使用RSA加密和解密"><a href="#4-4-JAVA中使用RSA加密和解密" class="headerlink" title="4.4 JAVA中使用RSA加密和解密"></a>4.4 JAVA中使用RSA加密和解密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">import org.apache.commons.codec.binary.Base64;</div><div class="line"></div><div class="line">import javax.crypto.BadPaddingException;</div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.IllegalBlockSizeException;</div><div class="line">import javax.crypto.NoSuchPaddingException;</div><div class="line">import java.security.*;</div><div class="line">import java.security.interfaces.RSAPrivateKey;</div><div class="line">import java.security.interfaces.RSAPublicKey;</div><div class="line">import java.security.spec.InvalidKeySpecException;</div><div class="line">import java.security.spec.PKCS8EncodedKeySpec;</div><div class="line">import java.security.spec.X509EncodedKeySpec;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class RSAUtils &#123;</div><div class="line">    private static final String PUBLIC_KEY = &quot;RSAPublicKey&quot;;</div><div class="line">    private static final String PRIVATE_KEY = &quot;RSAPrivateKey&quot;;</div><div class="line">    private static final String KEY_ALGORITHM = &quot;RSA&quot;;</div><div class="line">    private static final String SIGNATHURE_ALGORITHM = &quot;MD5withRSA&quot;;</div><div class="line"></div><div class="line">    public static Map&lt;String,Object&gt; initKey() throws NoSuchAlgorithmException &#123;</div><div class="line">        // 1. 生成公钥和私钥对，基于RSA算法生成对象</div><div class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);</div><div class="line"></div><div class="line">        // 2. 初始化密钥对生成器，密钥大小为1024位</div><div class="line">        keyPairGenerator.initialize(1024);</div><div class="line"></div><div class="line">        // 3. 生成一个密钥对，保存在keyPair中</div><div class="line">        KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line"></div><div class="line">        // 4. 得到私钥和公钥</div><div class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</div><div class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</div><div class="line"></div><div class="line">        Map&lt;String,Object&gt; keyMap = new HashMap&lt;&gt;();</div><div class="line">        keyMap.put(PUBLIC_KEY,publicKey);</div><div class="line">        keyMap.put(PRIVATE_KEY,privateKey);</div><div class="line">        return keyMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取私钥</div><div class="line">     */</div><div class="line">    public static String getPrivateKey(Map&lt;String,Object&gt; keyMap)&#123;</div><div class="line">        Key key = (Key) keyMap.get(PRIVATE_KEY);</div><div class="line">        return Base64.encodeBase64String(key.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取公钥</div><div class="line">     */</div><div class="line">    public static String getPublicKey(Map&lt;String,Object&gt; keyMap) &#123;</div><div class="line">        Key key = (Key) keyMap.get(PUBLIC_KEY);</div><div class="line">        return Base64.encodeBase64String(key.getEncoded());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用公钥对数据加密</div><div class="line">     */</div><div class="line">    public static byte[] encryptByPublicKey(byte[] data,String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</div><div class="line">        // 对公钥解密</div><div class="line">        byte[] keyBytes = Base64.decodeBase64(key);</div><div class="line"></div><div class="line">        // 取得公钥</div><div class="line">        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(keyBytes);</div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">        Key publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line"></div><div class="line">        // 对数据加密</div><div class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE,publicKey);</div><div class="line">        return cipher.doFinal(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用私钥对数据解密</div><div class="line">     */</div><div class="line">    public static byte[] decrptByPrivateKey(byte[] data, String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</div><div class="line">        // 对私钥解密</div><div class="line">        byte[] keyBytes = Base64.decodeBase64(key);</div><div class="line"></div><div class="line">        // 取得私钥</div><div class="line">        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(keyBytes);</div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</div><div class="line">        Key privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line"></div><div class="line">        // 对数据解密</div><div class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</div><div class="line">        cipher.init(Cipher.DECRYPT_MODE,privateKey);</div><div class="line"></div><div class="line">        return cipher.doFinal(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        String content = &quot;Hello World&quot;;</div><div class="line"></div><div class="line">        // 1. 初始化公钥 &amp; 私钥</div><div class="line">        Map&lt;String,Object&gt; pairKey = initKey();</div><div class="line"></div><div class="line">        // 2. 获取公钥</div><div class="line">        String publicKey = getPublicKey(pairKey);</div><div class="line"></div><div class="line">        // 3. 用公钥加密内容</div><div class="line">        byte[] encodeContent = encryptByPublicKey(content.getBytes(&quot;UTF-8&quot;),publicKey);</div><div class="line"></div><div class="line">        // 4. 获取私钥</div><div class="line">        String privateKey = getPrivateKey(pairKey);</div><div class="line"></div><div class="line">        // 5. 用私钥解密内容</div><div class="line">        byte[] decodeContent = decrptByPrivateKey(encodeContent,privateKey);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + content);</div><div class="line">        System.out.print(&quot;密文：&quot;);</div><div class="line">        System.out.println(new String(encodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;明文：&quot; + new String(decodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;加密~解密历时: &quot; + (System.currentTimeMillis() - start)/1000 + &quot;秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-5-AES加密-amp-解密"><a href="#4-5-AES加密-amp-解密" class="headerlink" title="4.5 AES加密 &amp; 解密"></a>4.5 AES加密 &amp; 解密</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">import sun.misc.BASE64Decoder;</div><div class="line">import sun.misc.BASE64Encoder;</div><div class="line"></div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.spec.IvParameterSpec;</div><div class="line">import javax.crypto.spec.SecretKeySpec;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class AESUtils &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  加密</div><div class="line">     */</div><div class="line">    public static String encrypt(String sSrc, String sKey) throws Exception &#123;</div><div class="line">        if (sKey == null) &#123;</div><div class="line">            System.out.print(&quot;Key为空null&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        // 判断Key是否为16位</div><div class="line">        if (sKey.length() != 16) &#123;</div><div class="line">            System.out.print(&quot;Key长度不是16位&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        byte[] raw = sKey.getBytes();</div><div class="line">        SecretKeySpec skeySpec = new SecretKeySpec(raw, &quot;AES&quot;);</div><div class="line">        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);//&quot;算法/模式/补码方式&quot;</div><div class="line">        IvParameterSpec iv = new IvParameterSpec(&quot;0102030405060708&quot;.getBytes());//使用CBC模式，需要一个向量iv，可增加加密算法的强度</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);</div><div class="line">        byte[] encrypted = cipher.doFinal(sSrc.getBytes());</div><div class="line"></div><div class="line">        return new BASE64Encoder().encode(encrypted);//此处使用BASE64做转码功能，同时能起到2次加密的作用。</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  解密</div><div class="line">     */</div><div class="line">    public static String decrypt(String sSrc, String sKey) throws Exception &#123;</div><div class="line">        try &#123;</div><div class="line">            // 判断Key是否正确</div><div class="line">            if (sKey == null) &#123;</div><div class="line">                System.out.print(&quot;Key为空null&quot;);</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            // 判断Key是否为16位</div><div class="line">            if (sKey.length() != 16) &#123;</div><div class="line">                System.out.print(&quot;Key长度不是16位&quot;);</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            byte[] raw = sKey.getBytes(&quot;ASCII&quot;);</div><div class="line">            SecretKeySpec skeySpec = new SecretKeySpec(raw, &quot;AES&quot;);</div><div class="line">            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);</div><div class="line">            IvParameterSpec iv = new IvParameterSpec(&quot;0102030405060708&quot;</div><div class="line">                    .getBytes());</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);</div><div class="line">            byte[] encrypted1 = new BASE64Decoder().decodeBuffer(sSrc);//先用base64解密</div><div class="line">            try &#123;</div><div class="line">                byte[] original = cipher.doFinal(encrypted1);</div><div class="line">                String originalString = new String(original);</div><div class="line">                return originalString;</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                System.out.println(e.toString());</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception ex) &#123;</div><div class="line">            System.out.println(ex.toString());</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        String content = &quot;HelloWorld123456&quot;;</div><div class="line">        String password = &quot;1234567123456712&quot;;</div><div class="line"></div><div class="line">        // AES加密</div><div class="line">        String encodeContent = encrypt(content,password);</div><div class="line"></div><div class="line">        // AES解密</div><div class="line">        String decodeContent = decrypt(encodeContent,password);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + content);</div><div class="line">        System.out.println(&quot;密文：&quot; + encodeContent);</div><div class="line">        System.out.println(&quot;明文：&quot; + decodeContent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-Base64编码"><a href="#5-Base64编码" class="headerlink" title="5. Base64编码"></a>5. Base64编码</h3><h4 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h4><p>Base64内容传送编码是一种以任意8位字节序列组合的描述形式，这种形式不易被人直接识别。Base64是一种常见的编码规范，其作用是将二进制序列转换为人类可读的ASCLL字符序列，常用在需用通过文本协议(如HTTP和SMTP)来传输二进制数据下。Base64并不是加密解密算法，尽管我们有时也听到过使用Base64来加密解密的说法，但这里所有的加密和解密实际是编码和解码的过程，其变换是非常简单的，仅仅能够编码信息被直接识别。</p>
<h4 id="5-2-原理"><a href="#5-2-原理" class="headerlink" title="5.2 原理"></a>5.2 原理</h4><p>Base64算法主要是将给定的字符以字符编码(如ASCLL码，UTF-8码)对应的十进制数为基准，做编码操作。</p>
<blockquote>
<p>1、将给定的字符串以字符为单位，转换为对应的字符编码。</p>
<p>2、将获得字符编码转换为二进制</p>
<p>3、对二进制做分组转换，每3个字节为一组，转换为每4个6位二进制位为1组(不足6位时，低位补0)这是一个分组变化的过程，3个8位二进制和4个6位二进制的长度都是24位</p>
<p>4、对获得的4-6二进制码补位，向6位二进制码添加2位高位0，组成4个8位二进制码。</p>
<p>5、对获得4-8二进制码转换为十进制码。</p>
<p>6、将获得的十进制码转换为Base64字符表中的对应字符。</p>
</blockquote>
<h4 id="5-3-JAVA实现Base64编码和解码"><a href="#5-3-JAVA实现Base64编码和解码" class="headerlink" title="5.3 JAVA实现Base64编码和解码"></a>5.3 JAVA实现Base64编码和解码</h4><p>推荐使用<code>commons-codec</code>开源包，请在maven工程中添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;commons-codec&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.10&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>实战：Base64编码 &amp; 解码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import org.apache.commons.codec.binary.Base64;</div><div class="line"></div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 2017/10/11.</div><div class="line"> */</div><div class="line">public class Base64Utils &#123;</div><div class="line">    private static final String QUERY_URL = &quot;http://localhost:8080/hello?content=sayHello&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</div><div class="line">        byte[] encodeContent = Base64.encodeBase64URLSafe(QUERY_URL.getBytes(&quot;UTF-8&quot;));</div><div class="line">        byte[] decodeContent = Base64.decodeBase64(encodeContent);</div><div class="line"></div><div class="line">        System.out.println(&quot;原文：&quot; + QUERY_URL);</div><div class="line">        System.out.println(&quot;编码：&quot; + new String(encodeContent,&quot;UTF-8&quot;));</div><div class="line">        System.out.println(&quot;解码：&quot; + new String(decodeContent,&quot;UTF-8&quot;));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.jianshu.com/p/316ce9fa083e" target="_blank" rel="external">JAVA中常用加密算法简述</a></li>
<li><a href="http://www.jianshu.com/p/d83f5be22181" target="_blank" rel="external">Java与加密解密</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[沉浸式学Git]]></title>
      <url>http://jianwl.com/2017/09/26/%E6%B2%89%E6%B5%B8%E5%BC%8F%E5%AD%A6Git/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>平时用SourceTree比较多，对于Git命令比较生疏，这块是个短板；找到一篇比较实用的Git科普文，这里会简单介绍下常用的场景。</p>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><code>git status</code>、<code>git add</code>、<code>git commit</code>、<code>git checkout</code>是非常常用的命令，因此对它们进行缩写十分有用。</p>
<p>MacOS系统中的git config file的在哪？可以参见这篇文章<a href="https://stackoverflow.com/questions/16283280/how-to-locate-the-git-config-file-in-mac" target="_blank" rel="external">How to locate the git config file in Mac</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  co = checkout</div><div class="line">  ci = commit</div><div class="line">  st = status</div><div class="line">  br = branch</div><div class="line">  hist = log --pretty=format:&apos;%h %ad | %s%d [%an]&apos; --graph --date=short</div><div class="line">  type = cat-file -t</div><div class="line">  dump = cat-file -p</div></pre></td></tr></table></figure>
<h3 id="撤销提交的更改"><a href="#撤销提交的更改" class="headerlink" title="撤销提交的更改"></a>撤销提交的更改</h3><p>有时候你意识到已经提交的更改不正确并想撤销该提交，有几种方式可以处理这种问题，我们在本实验中所用的方式总是安全的。</p>
<p>1、 更改文件并提交(更改hello.java文件)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world!</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add hello.java</div><div class="line">$ git commit -m &quot;init hello.java file&quot;</div></pre></td></tr></table></figure>
<p>2、创建还原提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git revert HEAD</div></pre></td></tr></table></figure>
<p>这将带你到编辑器中，你可以编辑默认的提交信息，或直接离开它。保存并关闭文件，你应该看到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git revert HEAD --no-edit</div><div class="line">[master 6b9d8af] Revert &quot;init hello.java file&quot;</div><div class="line">1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<p>因为我们将撤销我们做的最后提交，所以我们使用HEAD作为还原的参数。通过简单的指定哈希值，我们可以撤销早期历史中的任意提交。</p>
<h3 id="删除远端已提交的文件，并不在跟踪（-idea为要删除的文件）"><a href="#删除远端已提交的文件，并不在跟踪（-idea为要删除的文件）" class="headerlink" title="删除远端已提交的文件，并不在跟踪（.idea为要删除的文件）"></a>删除远端已提交的文件，并不在跟踪（.idea为要删除的文件）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached --ignore-unmatch .idea/**</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://igit.linuxtoy.org/contents.html" target="_blank" rel="external">沉浸式学Git</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java问题排查工具箱]]></title>
      <url>http://jianwl.com/2017/09/21/Java%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7%E7%AE%B1/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在长期排查线上问题的过程中，总结了一些工具的用法和排查问题的思路，首先讲讲工具，JVM自带的一些工具是必须掌握的，例如jstack、jmap、jstat等，它可以帮我们去深入了解JVM正在做的事情，主要的使用领取有这些：</p>
<h3 id="1、jstack"><a href="#1、jstack" class="headerlink" title="1、jstack"></a>1、jstack</h3><blockquote>
<p>jstack可以告诉你当前所有JVM线程正在做什么，包括用户线程和虚拟机线程，你可以用它来查看线程，并且结合Lock信息来检测是否发生了死锁和死锁的线程。</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/88774560.jpg" alt=""></p>
<h3 id="2、jstat"><a href="#2、jstat" class="headerlink" title="2、jstat"></a>2、jstat</h3><blockquote>
<p>stat,顾明思义就是提供一些统计信息，它可以告诉你当前的GC情况，包括GC次数、时间、具体的GC还可以结合gc.log文件去分析。</p>
<p>一般来说，我们用jstat去查看GC情况，判断是否存在YGC或FGC频繁的情况，再去看gc.log和jamp dump内存，MAT分析来定位问题(后面会有一个case针对这种场景)</p>
<p>常用的用法是jstat -gcutil pid time_interval</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/72875924.jpg" alt=""></p>
<h3 id="3、jmap"><a href="#3、jmap" class="headerlink" title="3、jmap"></a>3、jmap</h3><blockquote>
<p>排查GC问题必然会用到的工具，jmap可以告诉你当前JVM内存堆中的对象分布及其关系，当你dump堆之后可以用MAT分析，看看有哪些大对象，或者哪些类的实例特别多。</p>
<p>常用用法：</p>
<p>强制FGC: -histo:live</p>
<p>dump堆:-dump:[live],format=b,file=dump.bin</p>
<p>查看各代内存占用情况: -heap</p>
</blockquote>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-21/33702309.jpg" alt=""></p>
<p>然后我们来介绍一些开源的工具，来增强JVM工具本身的作用：</p>
<h3 id="1、MAT-Eclipse-Memory-Analyzer"><a href="#1、MAT-Eclipse-Memory-Analyzer" class="headerlink" title="1、MAT(Eclipse Memory Analyzer)"></a>1、MAT(Eclipse Memory Analyzer)</h3><blockquote>
<p>GC必备分析，用于分析jmap或OOM时dump出来的内存快照，可以看到对象和引用关系；</p>
<p>官方地址：<a href="http://www.eclipse.org/mat" target="_blank" rel="external">http://www.eclipse.org/mat</a></p>
</blockquote>
<h3 id="2、top"><a href="#2、top" class="headerlink" title="2、top"></a>2、top</h3><blockquote>
<p>这个是Linux自带的命令，查看系统资源消耗情况，可以看到CPU、内存、SWAP、I/O的消耗情况，需要特别注意有几个值：</p>
<p>ni,这个值如果特别高说明线程上下文切换开销较大，看看是不是开了太多的线程导致的</p>
<p>res，这个代表了进程实际占用的内存</p>
<p>swap，内存不足就是占用swap空间，这个时候一般应用的性能会急剧下降，需要特别关注；</p>
</blockquote>
<h3 id="3、HouseMD"><a href="#3、HouseMD" class="headerlink" title="3、HouseMD"></a>3、HouseMD</h3><blockquote>
<p>一个类似于BTrace的小工具，用于对JVM运行时的状态进行追踪和诊断，作者是中间件团队的聚石。</p>
<p>通常我们排查问题很多时候都在代码中加个日志，看看方法的参数、返回值是不是我们期望的，然后编译打包部署重启应用，十几分钟过去了。HouseMD可以直接让你可以追踪到方法的返回值和参数，以及调用次数、调用平均rt、调用栈，甚至是类的成员变量的值、Class加载的路径、对应的ClassLoader都可以用一行命令给你展现出来，堪称神器。</p>
</blockquote>
<h3 id="4、TBJMap"><a href="#4、TBJMap" class="headerlink" title="4、TBJMap"></a>4、TBJMap</h3><blockquote>
<p>通过jmap和MAT我们可以知道整个JVM堆的对象分布情况，但是有时候我们需要知道young/old/perm区分别有哪些对象的时候，就要用到TBJMap这个神器了。</p>
<p>它可以告诉你各个分代区各个Class的实例数、占用的空间、以及DirectMemory占用的空间等。</p>
</blockquote>
<h3 id="5、tsar"><a href="#5、tsar" class="headerlink" title="5、tsar"></a>5、tsar</h3><blockquote>
<p>sar是淘宝的采集工具，主要用来收集服务器的系统信息（如cpu，io，mem，tcp等）以及应用数据（如squid haproxy nginx等），tsar支持t实时查看和历史查看，方便了解应用和服务器的信息。</p>
</blockquote>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://hellojava.info/?p=517" target="_blank" rel="external">Java问题排查工具箱 - 毕玄</a></li>
<li><a href="http://colobu.com/2016/08/10/Java-Flame-Graphs/" target="_blank" rel="external">火焰图</a></li>
<li><a href="http://blog.csdn.net/fenglibing/article/details/6411951" target="_blank" rel="external">JDK内置工具使用</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL中文乱码排查]]></title>
      <url>http://jianwl.com/2017/09/20/MySQL%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%8E%92%E6%9F%A5/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Github上看到别人用JAVA写了个文章管理工具，git clone到本地看看；按照教程将SQL导入MYSQL中，并启动SpringBoot项目。项目启动之后长这样：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/54860156.jpg" alt=""></p>
<p>1、新建文章(未保存)</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/43647701.jpg" alt=""></p>
<p>2、保存文章后</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/45523456.jpg" alt=""></p>
<h3 id="出现问题的反应"><a href="#出现问题的反应" class="headerlink" title="出现问题的反应"></a>出现问题的反应</h3><p>因为是git clone别人的代码，下意识认为代码层面是没有问题的。第一反应是浏览器编码的问题，尝试了Chrome、Safari、Firefox三个浏览器都是乱码；将编码设置为UTF8之后仍是乱码；于是开始调试代码；</p>
<p>保存文章的流程：① 新建文章 ② 点击保存文章 ③ 后端接收前端传过来的内容 ④ 后端将数据存入数据库，在步骤③打印日志，发现后端接收到的内容是正常的，非乱码，但存入数据库却是乱码的；将问题定位到数据库；</p>
<h3 id="解决数据库中文乱码"><a href="#解决数据库中文乱码" class="headerlink" title="解决数据库中文乱码"></a>解决数据库中文乱码</h3><p>1、根据以下这条命令查询MYSQL的字符集</p>
<blockquote>
<p>show variables like ‘character%’</p>
</blockquote>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/65176549.jpg" alt=""></p>
<p>如图可知，服务端的编码非”UTF8”，而存入的中文编码是”UTF8”，因为编码不一致导致乱码；</p>
<p>2、修改数据库my.cnf配置文件加个配置：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/68228133.jpg" alt=""></p>
<p>3、重启MYSQL服务器</p>
<h3 id="中文乱码Fixed"><a href="#中文乱码Fixed" class="headerlink" title="中文乱码Fixed"></a>中文乱码Fixed</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/6735572.jpg" alt=""></p>
<h3 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h3><p>临时改变编码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set character_set_server = utf8</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java内存区域学习]]></title>
      <url>http://jianwl.com/2017/09/19/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/5113112.jpg" alt=""></p>
<p>JVM内存模型分为两部分私有内存和共享内存；如图所示，堆和方法区是所有线程共有的，而虚拟栈、本地方法栈、程序计数器则是线程私有的。接下来我们来一一分析不同区域的作用。</p>
<h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>堆内存是所有线程共有的，可分为两部分：年轻代和老年代。下图中的Perm代表的永久代，但是永久代并不属于堆内存中的一部分，同时JDK1.8之后永久代被移除了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-20/12946482.jpg" alt=""></p>
<p>GC(垃圾回收器)对年轻中的对象进行回收被称为Minor GC,用通俗一点的话说年轻代就是用来存放年轻的对象，年轻对象是什么意思呢?年轻对象可以简单的理解为没有经历多次垃圾回收的对象，如果一个对象经历过一定次数的Minor GC,JVM一般就会将这个对象放入到年轻代，而JVM对年老代对象回收则成为Major GC。</p>
<p>如上图所示，年轻代中还可以细分为三个部分，我们需要重点关注这几点:</p>
<p>1、 大部分对象刚创建的时候，JVM将其分布到Eden区域。</p>
<p>2、当Eden区域中的对象达到一定的数目的时候，就会进行Minor GC，经历这次垃圾回收后所有存活的对象都会进入两个 Suvivor Place中的一个。</p>
<p>3、同一时刻两个Suvivor Place,即S0和S1中总有一个总是空的。</p>
<p>4、年轻代中的对象经历过了多次的垃圾回收就会转移到年老代中。</p>
<p>5、当申请不到空间时会抛出OutOfMemoryError.下面我们简单模拟一个内存溢出的情况:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class HeapOOM &#123;</div><div class="line">    static  class  OOMObject&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;OOMObject&gt;();</div><div class="line">        while (true) &#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是执行的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</div><div class="line">	at java.util.Arrays.copyOf(Arrays.java:3210)</div><div class="line">	at java.util.Arrays.copyOf(Arrays.java:3181)</div><div class="line">	at java.util.ArrayList.grow(ArrayList.java:261)</div><div class="line">	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)</div><div class="line">	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)</div><div class="line">	at java.util.ArrayList.add(ArrayList.java:458)</div><div class="line">	at jvm.HeapOOM.main(HeapOOM.java:17)</div></pre></td></tr></table></figure>
<p>堆内存是我们平时在生产环境中进行性能调优中一个非常重要的部分，以下拓展补充几个常见的性能调优参数：</p>
<ul>
<li>PretenureSizeThreshold:直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代中分配。</li>
<li>MaxTenuringThreshold:晋升到老年代的对象年龄，每个对象在坚持过一次Minor GC之后，年龄会加1，当超过这个参数值时就进入老年代。</li>
<li>UseAdaptiveSizePolicy:动态调整Java堆中各个区域的大小以及进入年老代的年龄。</li>
<li>SurivorRatio:新生代Eden区域与Survivor区域的容量比例，默认为8，代表Eden: Suvivor = 8:1。</li>
<li>NewRatio:设置新生代(包括Eden和两个Survivor区)与老年代的比值(除去持久代)，设置为3，则新生代与年老代所占比值为1：3，新生代占整个堆栈的1/4</li>
<li>Xmx:设置JVM堆最大内存</li>
<li>Xms:设置JVM堆初始化内存</li>
<li>Xmn:参数设置年轻代内存</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区与Java堆一样，是所有线程共享的区域，它用于存储已被虚拟机加载的类信息、常量、静态常量，即时编译(JIT)后的代码等数据。</p>
<p>对于JDK1.8之前的HotSpot虚拟机而言，很多人经常将方法区称为我们上图中所描述的永久代，实际上两者并不等价，因为这仅仅是HotSpot的设计团队选择利用永久代来实现方法区而言。同时对于其他虚拟机比如IBM J9是不存在永久代概念的。</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>JVM中程序计数器和计算机组成原理中提到的程序计数器PC概念类似，线程私有，用来记录执行的字节码位置。CPU的占有时间是以分片的形式分配给每个不同线程的，从操作系统的角度讲，在不同线程之间切换的时候就是依赖程序计数器来记录上一次线程所执行到具体的代码的行数，在JVM就是字节码。</p>
<h3 id="JAVA虚拟机栈"><a href="#JAVA虚拟机栈" class="headerlink" title="JAVA虚拟机栈"></a>JAVA虚拟机栈</h3><p>与程序计数器一样，JAVA虚拟机栈也是线程私有的，用通俗的话将它就是我们常常听到堆栈中的那个“栈”内存。虚拟机栈描述的是JAVA方法执行的内存模型：每个方法在执行的时候都会创建一个栈帧(Stack Frame)用于存储局部变量表（局部变量表需要的内存，在编译期间就确定所在方法运行期间不会改变大小），操作数栈、动态链接、方法出口等信息。每一个方法从调用至出栈的过程，就是栈帧在虚拟机中从入栈到出栈的过程。</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈和JAVA虚拟机栈类似，只不过是为JVM执行Native方法服务。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解JAVA虚拟机</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之HashMap源码学习]]></title>
      <url>http://jianwl.com/2017/09/01/Java8%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>随着JDK的更新，JDK1.8对HashMap底层的实现进行了优化，本文想深入探讨HashMap的结构实现和功能原理。</p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/39063824.jpg" alt=""></p>
<p>Java为数据结构中的映射定义了一个接口java.util.Map，此接口有四个常用的实现类，分别为HashMap、LinkedHashMap和TreeMap，类继承关系如图；以下针对各个实现类的特定做了一些说明；</p>
<p>(1) HashMap: 它根据键的hashCode值存储数据，大多数情况可以直接定位到它的值，因而具有很快的访问速度，但遍历速度却是不确定的。HashMap最多只允许一条记录键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻多个线程同时写HashMap，可能会导致数据的不一致，如果要满足线程安全可以用Collections的synchronizedMap方法使HashMap具有线程安全的能力，或使用ConcurrentHashMap。</p>
<p>(2) Hashtable: Hashtable是遗留类，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable,并发性不如ConcurrentHashMap,因为ConcurrentHashMap引入了分段锁。Hashtable不允许键或值为null；</p>
<p>(3) LinkedHashMap: LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序;</p>
<p>(4) TreeMap: TreeMap实现了SortedMap接口，能够把它的记录根据键排序，默认按键值的升序排序，也可以指定排序的比较器；</p>
<p>上述四种Map类型的类，要求映射的key是<strong>不可变类</strong>，不可变类是该对象在创建后它的哈希值不会被改变。如果对象的哈希值改变了，Map对象很可能就定位不到映射的位置了。</p>
<h3 id="存储结构-字段"><a href="#存储结构-字段" class="headerlink" title="存储结构 - 字段"></a>存储结构 - 字段</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/44470980.jpg" alt=""></p>
<p>这里需要讲明白两个问题，数据底层具体存储的是什么？这样的存储方式有什么优点？</p>
<p>1、什么是Node?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">        final int hash; // 定位数组的索引位置</div><div class="line">        final K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next; // 链表的下一个Node</div><div class="line"></div><div class="line">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</div><div class="line"></div><div class="line">        public final K getKey()        &#123; ... &#125;</div><div class="line">        public final V getValue()      &#123; ... &#125;</div><div class="line">        public final String toString() &#123; ... &#125;</div><div class="line"></div><div class="line">        public final int hashCode() &#123; ... &#125;</div><div class="line"></div><div class="line">        public final V setValue(V newValue) &#123; ... &#125;</div><div class="line"></div><div class="line">        public final boolean equals(Object o) &#123; ... &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Node是HashMap的内部类，实现了Map.Entry接口，本质上Node是一个链表；</p>
<p>2、如何确认哈希桶索引位置?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line">static final int hash(Object key) &#123;   //jdk1.8 &amp; jdk1.7</div><div class="line">     int h;</div><div class="line">     // h = key.hashCode() 为第一步 取hashCode值</div><div class="line">     // h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</div><div class="line">     return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class="line">&#125;</div><div class="line">方法二：</div><div class="line">static int indexFor(int h, int length) &#123;  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</div><div class="line">     return h &amp; (length-1);  //第三步 取模运算</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的Hash算法本质上就三步：取key的hashCode值、高位运算、取模运算；举例说明：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/79939676.jpg" alt=""></p>
<p>这样就可以通过key来定位数组的索引位置了；</p>
<p>3、如何解决哈希冲突？</p>
<p>采用链地址法，简单来说就是数组加链表的结合，在每个数组元素上都是一个链表结构，当数据Hash后，得到数组下标，都把数据放在对应下标元素的链表上。</p>
<p>4、关于哈希冲突的调优？</p>
<p>两个Key定位到相同的位置，表示发生了哈希冲突。通过什么方式可来控制Map是的哈希碰撞概率小，哈希桶数组占用空间又小呢？有几个参数需要重点注意：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int threshold // 扩容的阈值 -- 数组length * loadFactor</div><div class="line">final float loadFactor; // 负载因子 -- 默认0.75</div><div class="line">int modCount;</div><div class="line">int size;</div></pre></td></tr></table></figure>
<p>默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。</p>
<h3 id="分析HashMap的put方法"><a href="#分析HashMap的put方法" class="headerlink" title="分析HashMap的put方法"></a>分析HashMap的put方法</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/13730914.jpg" alt=""></p>
<h3 id="JDK1-8-VS-JDK1-7-性能测试"><a href="#JDK1-8-VS-JDK1-7-性能测试" class="headerlink" title="JDK1.8 VS JDK1.7 性能测试"></a>JDK1.8 VS JDK1.7 性能测试</h3><p>1、哈希较均匀的情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class Keys &#123;</div><div class="line">    public static final int MAX_KEY = 1_000_000;</div><div class="line">    private static final Key[] KEYS_CACHE = new Key[MAX_KEY];</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        for (int i = 0; i &lt; MAX_KEY; ++i) &#123;</div><div class="line">            KEYS_CACHE[i] = new Key(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Key of(int value) &#123;</div><div class="line">        return KEYS_CACHE[value];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void test(int mapSize) &#123;</div><div class="line">        HashMap&lt;Key, Integer&gt; map = new HashMap&lt;Key, Integer&gt;(mapSize);</div><div class="line">        for (int i = 0; i &lt; mapSize; i++) &#123;</div><div class="line">            map.put(Keys.of(i), i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        long beginTime = System.nanoTime();</div><div class="line">        for (int i = 0; i &lt; mapSize; i++) &#123;</div><div class="line">            map.get(Keys.of(i));</div><div class="line">        &#125;</div><div class="line">        long endTime = System.nanoTime();</div><div class="line">        System.out.println(&quot;mapSize =&gt; &quot; + mapSize + &quot; time =&gt; &quot; + (endTime - beginTime));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        for (int i = 10; i &lt;= MAX_KEY; i *= 10) &#123;</div><div class="line">            test(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Key implements Comparable&lt;Key&gt; &#123;</div><div class="line">    private final int value;</div><div class="line"></div><div class="line">    public Key(int value) &#123;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int compareTo(Key o) &#123;</div><div class="line">        return Integer.compare(this.value, o.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean equals(Object o) &#123;</div><div class="line">        if (this == o) return true;</div><div class="line">        if (o == null || getClass() != o.getClass())</div><div class="line">            return false;</div><div class="line">        Key key = (Key) o;</div><div class="line">        return value == key.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int hashCode() &#123;</div><div class="line">        return value; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/1545958.jpg" alt=""></p>
<p>从图上可看到JDK1.8的效率远远高于JDK1.7</p>
<p>2、哈希不均匀测试</p>
<p>修改了HashCode的值，其余不变；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Key implements Comparable&lt;Key&gt; &#123;</div><div class="line">    </div><div class="line">    ....</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int hashCode() &#123;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/48441366.jpg" alt=""></p>
<p>由图中结果可知，随着size的变大，JDK1.7花费时间是增长的趋势，而JDK1.8是明显的降低趋势，并呈现对数增长稳定，当一个链表太长是，HashMap会动态将它替换为红黑树，这将时间复杂度从O(N)将为O(logn)。hash算法均匀和不均匀所花费的时间明显也不相同。</p>
<p>3、JDK1.8 哈希均匀 VS 哈希不均匀</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-9-1/40579970.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java基础-异常]]></title>
      <url>http://jianwl.com/2017/08/27/java%E5%9F%BA%E7%A1%80-%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h3 id="1-异常类图"><a href="#1-异常类图" class="headerlink" title="1. 异常类图"></a>1. 异常类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/72172724.jpg" alt=""></p>
<h3 id="2-受检异常-VS-非受检异常"><a href="#2-受检异常-VS-非受检异常" class="headerlink" title="2. 受检异常 VS 非受检异常"></a>2. 受检异常 VS 非受检异常</h3><blockquote>
<p>受检异常：继承Exception的子类，需要明确去处理异常；</p>
<p>非受检异常：继承RuntimeException的子类，不需要明确去处理异常；</p>
</blockquote>
<p>非受检异常：继承RuntimeException的子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class UncheckedException extends RuntimeException &#123;</div><div class="line">    public UncheckedException() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public UncheckedException(String message) &#123;</div><div class="line">        super(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public UncheckedException(String message, Throwable cause) &#123;</div><div class="line">        super(message, cause);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>受检异常：继承Exception的子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class CheckedException extends Exception&#123;</div><div class="line">    public CheckedException() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CheckedException(String message) &#123;</div><div class="line">        super(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CheckedException(String message, Throwable cause) &#123;</div><div class="line">        super(message, cause);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/70188955.jpg" alt=""></p>
<p>如图可知，受检异常必须要处理，否则会报错；非受检异常，可以不处理；</p>
<h3 id="3-StackOverFlowError-VS-OutOfMemoryError"><a href="#3-StackOverFlowError-VS-OutOfMemoryError" class="headerlink" title="3. StackOverFlowError VS OutOfMemoryError"></a>3. StackOverFlowError VS OutOfMemoryError</h3><blockquote>
<p>stackOverFlowError: 与栈相关，所有本地变量和方法调用都存于栈，每次方法的调用都会创建栈空间，一旦方法执行完毕栈空间将回收；</p>
<p>outOfMemoryError:与堆相关，创建的对象引用存于堆中，当JVM尝试给新对象分配内存时，没有足够的堆内存，将抛出OOM。</p>
</blockquote>
<p>stackOverFlowError举例：无限递归方法</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/23183251.jpg" alt=""></p>
<p>outOfMemoryError举例：创建超大对象</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/80401561.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror" target="_blank" rel="external">What’s the difference between StackOverflowError and OutOfMemoryError</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java基础-集合梳理]]></title>
      <url>http://jianwl.com/2017/08/27/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="1-Map类图-不包含java-util-concurrent包的类"><a href="#1-Map类图-不包含java-util-concurrent包的类" class="headerlink" title="1. Map类图(不包含java.util.concurrent包的类)"></a>1. Map类图(不包含java.util.concurrent包的类)</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/64952891.jpg" alt=""></p>
<h3 id="2-List类图-整理部分常用"><a href="#2-List类图-整理部分常用" class="headerlink" title="2. List类图(整理部分常用)"></a>2. List类图(整理部分常用)</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/83565321.jpg" alt=""></p>
<h3 id="3-Set类图整理-不包含java-util-concurrent包的类"><a href="#3-Set类图整理-不包含java-util-concurrent包的类" class="headerlink" title="3. Set类图整理(不包含java.util.concurrent包的类)"></a>3. Set类图整理(不包含java.util.concurrent包的类)</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/89594162.jpg" alt=""></p>
<h3 id="4-集合类图整理"><a href="#4-集合类图整理" class="headerlink" title="4. 集合类图整理"></a>4. 集合类图整理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-8-27/57993384.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[泛型中extends和super的区别?]]></title>
      <url>http://jianwl.com/2017/08/27/%E6%B3%9B%E5%9E%8B%E4%B8%ADextends%E5%92%8Csuper%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://itimetraveler.github.io/2016/12/27/%E3%80%90Java%E3%80%91%E6%B3%9B%E5%9E%8B%E4%B8%AD%20extends%20%E5%92%8C%20super%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/" target="_blank" rel="external">【Java】泛型中 extends 和 super 的区别？</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高效实用Python字典的清单]]></title>
      <url>http://jianwl.com/2017/08/22/%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8Python%E5%AD%97%E5%85%B8%E7%9A%84%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>字典(dict)对象是Python最常用的数据结构，这里整理了几个关于高效实用字典的清单，希望Python开发者可以在日常应用开发中合理利用，让代码更加Pythonic。</p>
<h3 id="1、用in关键字检查key是否存在"><a href="#1、用in关键字检查key是否存在" class="headerlink" title="1、用in关键字检查key是否存在"></a>1、用in关键字检查key是否存在</h3><p>Python之禅中有一句开发哲学是:</p>
<blockquote>
<p>There should be one – and perferably only one –obvious way to do it.</p>
</blockquote>
<p>尽量找一种，最好是唯一一种显而易见的解决方案。Python2中判断某个key是否存在字典中可使用<code>has_key</code>方法，另外一种方式是使用<code>in</code>关键字。但强烈推荐后者，因为in的处理速度更快，另外一个原因是<code>has_key</code>这个方法在Python3被移除了。</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">info = dict(name=&apos;zhangsan&apos;,age=23)</div><div class="line">if info.has_key(&apos;name&apos;):</div><div class="line">   pass</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">info = dict(name=&apos;zhangsan&apos;,age=23)</div><div class="line">if &apos;name&apos; in info:</div><div class="line">   pass</div></pre></td></tr></table></figure>
<h3 id="2、用get获取字典中的值"><a href="#2、用get获取字典中的值" class="headerlink" title="2、用get获取字典中的值"></a>2、用get获取字典中的值</h3><p>关于获取字典的值，一种简单的方式就是用d[x]访问元素，但是这种情况在key不存在的情况下会报KeyError错误，当然你可以先用in操作检查key是否在字典中在获取，不过这种方式不符合Python之禅中说的：</p>
<blockquote>
<p>Simple is better then complex<br>Flat is better than nested.</p>
</blockquote>
<p>好的代码应该是简单易懂的，扁平的代码结构更加可读。所以我们可以使用get方法来替代if … else.</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = dict(name=&apos;python&apos;)</div><div class="line">if &apos;name&apos; in d:</div><div class="line">    print d[&apos;hello&apos;]</div><div class="line">else:</div><div class="line">	 print &apos;default&apos;</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print d.get(&apos;name&apos;,&apos;default&apos;)</div></pre></td></tr></table></figure>
<h3 id="3、用setdefault为字典中不存在的key设置缺省值"><a href="#3、用setdefault为字典中不存在的key设置缺省值" class="headerlink" title="3、用setdefault为字典中不存在的key设置缺省值"></a>3、用setdefault为字典中不存在的key设置缺省值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = [(&apos;animal&apos;,&apos;bear&apos;),(&apos;animal,&apos;duck&apos;),(&apos;plant&apos;,&apos;catus&apos;),(&apos;vehicle&apos;,&apos;speed boat&apos;),(&apos;vehicle&apos;,&apos;school bus&apos;)]</div></pre></td></tr></table></figure>
<p>在做分类统计时，希望把同一类型的数据归到字典中的某种类型中，比如上面代码，把相同类型的事物用列表形式重新组装，得到新字典。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = dict(animal=[&apos;bear&apos;,&apos;duck&apos;],plant=[&apos;cacuts&apos;],vehicle=[&apos;speed boat&apos;,&apos;school bus&apos;])</div></pre></td></tr></table></figure>
<p>普通的方式就是先判断key是否存在，如果不存在则要先用列表对象进行初始化，在执行后续操作。而更好的方式就是使用字典中的setdefault方法。</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">groups = &#123;&#125;</div><div class="line">for (key,value) in data:</div><div class="line">    if key in groups:</div><div class="line">       groups[key].append(value)</div><div class="line">    else:</div><div class="line">       groups[key] = [value]</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">groups = &#123;&#125;</div><div class="line">for (key,value) in data:</div><div class="line">    groups.setdefault(key,[]).append(value)</div></pre></td></tr></table></figure>
<p><code>setdefault</code>的作用是：</p>
<ol>
<li>如果key存在与字典中，那么直接返回对应的值，等效于get</li>
<li>如果key不存在字典中，则会用setdefault中的第二个参数作为该key的值，在返回该值。</li>
</ol>
<h3 id="4、用字典实现swith-…-case语句"><a href="#4、用字典实现swith-…-case语句" class="headerlink" title="4、用字典实现swith … case语句"></a>4、用字典实现swith … case语句</h3><p>Python中没有switch…case语句，这个问题Python之父龟叔表示这个语法过去没有，现在没有，以后也不会有。因为Python简洁的语法完全可以用if…elif实现。如果有太多的分支判断，还可以使用字典来代替。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if arg == 0:</div><div class="line">  return &apos;zero&apos;</div><div class="line">elif arg == 1:</div><div class="line">  return &apos;one&apos;</div><div class="line">elif arg == 2:</div><div class="line">  return &apos;two&apos;</div><div class="line">elif arg == 3:</div><div class="line">  return &apos;three&apos;</div><div class="line">else:</div><div class="line">  return &apos;nothing&apos;</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = dict(0=&apos;zero&apos;,1=&apos;one&apos;,2=&apos;two&apos;,3=&apos;three&apos;)</div><div class="line">data.get(arg,&quot;nothing&quot;)</div></pre></td></tr></table></figure>
<h3 id="5、使用items迭代字典中的元素"><a href="#5、使用items迭代字典中的元素" class="headerlink" title="5、使用items迭代字典中的元素"></a>5、使用items迭代字典中的元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data = dict(0=&apos;zero&apos;,1=&apos;one&apos;,2=&apos;two&apos;,3=&apos;three&apos;)</div><div class="line">for k,v in data.items():</div><div class="line">  print k,v</div></pre></td></tr></table></figure>
<h3 id="6、使用字典推导式"><a href="#6、使用字典推导式" class="headerlink" title="6、使用字典推导式"></a>6、使用字典推导式</h3><p>推导式是个绝妙的东西，列表推导式一出，map、filter等函数黯然失色，至python2.7以后的版本，此特性扩展到了字典和集合身上，构建字典对象无需调用dict方法。</p>
<p>bad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">numbers = [1,2,3]</div><div class="line">d = dict([(number,number*2) for number in numbers])</div></pre></td></tr></table></figure>
<p>good</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">numbers = [1,2,3]</div><div class="line">d = &#123;number: number * 2 for number in numbers&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://juejin.im/post/599c03e751882511264e7428" target="_blank" rel="external">高效使用Python字典</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cp -r without hidden files]]></title>
      <url>http://jianwl.com/2017/08/16/cp-r-without-hidden-files/</url>
      <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://stackoverflow.com/questions/11557114/cp-r-without-hidden-files" target="_blank" rel="external">cp-r-without-hidden-files</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webpack入门篇]]></title>
      <url>http://jianwl.com/2017/08/15/Webpack%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack，看这篇就够了</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java服务化系统线上应急和技术攻关，你必须掌握的Linux命令]]></title>
      <url>http://jianwl.com/2017/07/22/Java%E6%9C%8D%E5%8A%A1%E5%8C%96%E7%B3%BB%E7%BB%9F%E7%BA%BF%E4%B8%8A%E5%BA%94%E6%80%A5%E5%92%8C%E6%8A%80%E6%9C%AF%E6%94%BB%E5%85%B3%EF%BC%8C%E4%BD%A0%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84Linux%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文并不是Linux命令的手册，而是侧重于命令在特定场景如何帮助应急人员和攻关人员定位问题并解决问题，因此，对于每个命令的介绍将直切主题，直接介绍命令的具体场景，而不是介绍命令的详细使用格式。</p>
<h3 id="1-必不可少的基础命令和工具"><a href="#1-必不可少的基础命令和工具" class="headerlink" title="1. 必不可少的基础命令和工具"></a>1. 必不可少的基础命令和工具</h3><h4 id="1-1-grep"><a href="#1-1-grep" class="headerlink" title="1.1 grep"></a>1.1 grep</h4><p><code>grep</code>是<code>Linux</code>下通用的文本内容查找命令。</p>
<p>也可以利用它打印匹配的上下几行，线上查找问题的时候，可以使用以下命令,查找关键字，显示关键字出现的后5行，并且给关键字着色。</p>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">grep -5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的前后5行</div><div class="line"></div><div class="line">grep -C 5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的前后5行</div><div class="line"></div><div class="line">grep -A 5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的后5行</div><div class="line"></div><div class="line">grep -B 5 &apos;pattern&apos; INPUT_FILE # 打印匹配行的前5行</div></pre></td></tr></table></figure>
<h4 id="1-2-find"><a href="#1-2-find" class="headerlink" title="1.2 find"></a>1.2 find</h4><p>通过文件名称查找文件的所在位置，名称查找支持模糊匹配</p>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name FILE_NAME</div></pre></td></tr></table></figure>
<p>命令输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@10-9-179-71 ~]# find . -name GifApiApplication.java</div><div class="line">./app/Gif-Api/src/main/java/com/budong/GifApiApplication.java</div></pre></td></tr></table></figure>
<h4 id="1-3-uptime"><a href="#1-3-uptime" class="headerlink" title="1.3 uptime"></a>1.3 uptime</h4><p>查看机器的启动时间、登录用户、平均负载等情况，通常用在线上应急或者技术攻关的时候来确定操作系统的重启时间。</p>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uptime</div></pre></td></tr></table></figure>
<p>命令输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[jianweilin@login10-103-142 ~]$ uptime</div><div class="line"> 10:35:13 up 698 days, 19:30,  3 users,  load average: 0.20, 0.13, 0.04</div></pre></td></tr></table></figure>
<p>从上面输出可以看到如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1、 当前时间：10:35:13</div><div class="line"></div><div class="line">2、 系统已运行的时间：698天19个小时30分钟</div><div class="line"></div><div class="line">3、当前在线用户：3个用户</div><div class="line"></div><div class="line">4. 系统平均负载：0.20 、0.13 、 0.04，最近1分钟、5分钟、15分钟系统的负载情况</div></pre></td></tr></table></figure>
<p>系统平均负载指在特定时间间隔内队列中运行的平均进程数，如果一个进程满足一下条件，它就会位于运行队列中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、它没有在等待IO操作的结果</div><div class="line"></div><div class="line">2、它没有主动进入等待状态（也就是没有调用wait相关的系统API）</div><div class="line"></div><div class="line">3、没有被停止（例如：等待终止）</div></pre></td></tr></table></figure>
<p>一般来说，每个CPU内核对应活动进程数不大于3，则系统运行良好，换句话说，也就是活动进程数小于CPU核数的3倍。</p>
<p>举例说明，如果你的服务CPU有3个核心，那么只要uptime最后输出的一串字符数值小于9，即表示系统负载正常。但是，如果系统负载超过10，那就表示当前系统负载过重，需要定位系统执行任务负载超标的原因。</p>
<h4 id="1-4-lsof"><a href="#1-4-lsof" class="headerlink" title="1.4 lsof"></a>1.4 lsof</h4><p>列出系统当前打开的文件句柄，在Linux文件系统中，任何资源都是以文件句柄的形式管理的。例如：硬件设备、文件、网络套接字等，系统内部为每一种资源分配一个句柄，应用程序只能用操作系统分配的句柄来引用资源，因此，文件句柄为应用程序与基础操作系统之间的交互提供了通用的操作接口。</p>
<p>应用程序打开文件的描述列表包含大量的关于应用程序本身的运行信息，因此通过lsof工具查看这个文件句柄列表，对系统监控以及应急排错提供重要的帮助。</p>
<p>查看某一个进程打开的文件句柄：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@10-9-179-71 ~]# lsof -p 12988 | less</div><div class="line">COMMAND   PID USER   FD   TYPE             DEVICE SIZE/OFF     NODE NAME</div><div class="line">java    12988 root  cwd    DIR              252,1     4096   917916 /root/app/Gif-Api</div><div class="line">java    12988 root  rtd    DIR              252,1     4096        2 /</div><div class="line">java    12988 root  txt    REG              252,1     7718   400499 /usr/java/jdk1.7.0_80/bin/java</div><div class="line">java    12988 root  mem    REG              252,1 99170352   292284 /usr/lib/locale/locale-archive</div><div class="line">java    12988 root  mem    REG              252,1   111440   786852 /lib64/libresolv-2.12.so</div><div class="line">java    12988 root  mem    REG              252,1    27896   786492 /lib64/libnss_dns-2.12.so</div><div class="line">java    12988 root  mem    REG              252,1    90880   795901 /lib64/libgcc_s-4.4.7-20120601.</div><div class="line">so.1</div><div class="line">java    12988 root  mem    REG              252,1  1025172   663136 /usr/java/jdk1.7.0_80/jre/lib/e</div><div class="line">xt/localedata.jar</div><div class="line">java    12988 root  mem    REG              252,1   196468   663055 /usr/java/jdk1.7.0_80/jre/lib/e</div><div class="line">xt/sunjce_provider.jar</div></pre></td></tr></table></figure>
<h4 id="1-5-ulimit"><a href="#1-5-ulimit" class="headerlink" title="1.5 ulimit"></a>1.5 ulimit</h4><p>Linux系统为每个登录用户，都限制其最大进程数和打开的最大文件句柄数。为提供性能，可以根据硬件资源的具体情况，设置各个用户的最大进程数和打开的最大文件句柄数。</p>
<p>可以用<code>ulimit -a</code>来显示当前的各种系统对用户使用资源的限制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@10-9-179-71 ~]# ulimit -a</div><div class="line">core file size          (blocks, -c) unlimited</div><div class="line">data seg size           (kbytes, -d) unlimited</div><div class="line">scheduling priority             (-e) 0</div><div class="line">file size               (blocks, -f) unlimited</div><div class="line">pending signals                 (-i) 15356</div><div class="line">max locked memory       (kbytes, -l) 64</div><div class="line">max memory size         (kbytes, -m) unlimited</div><div class="line">open files                      (-n) 1000000</div><div class="line">pipe size            (512 bytes, -p) 8</div><div class="line">POSIX message queues     (bytes, -q) 819200</div><div class="line">real-time priority              (-r) 0</div><div class="line">stack size              (kbytes, -s) 10240</div><div class="line">cpu time               (seconds, -t) unlimited</div><div class="line">max user processes              (-u) 15356</div><div class="line">virtual memory          (kbytes, -v) unlimited</div><div class="line">file locks                      (-x) unlimited</div></pre></td></tr></table></figure>
<p>设置用户的最大进程数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ulimit -u 10240</div></pre></td></tr></table></figure>
<p>设置用户可以打开的最大文件句柄数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ulimit -n 10240</div></pre></td></tr></table></figure>
<h4 id="1-6-curl"><a href="#1-6-curl" class="headerlink" title="1.6 curl"></a>1.6 curl</h4><p>程序开发后，会使用Junit、Testng以及Jmock、Mockito进行单元测试，单元测试后需要进行集成测试，由于当前的线上服务较多使用Restful风格，那么集成测试的时候就需要进行HTTP调用，查看返回的结果是否符合预期，curl命令是首选测试的方法。</p>
<p>使用方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 打印请求响应头信息</div><div class="line">[root@10-9-179-71 ~]# curl -i https://bdapi.imdada.cn/health/check</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: openresty</div><div class="line">Date: Sun, 23 Jul 2017 03:15:09 GMT</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Transfer-Encoding: chunked</div><div class="line">Connection: keep-alive</div><div class="line">&#123;&quot;status&quot;:&quot;ok&quot;,&quot;content&quot;:&quot;ok&quot;&#125;</div><div class="line"></div><div class="line"># 打印HTTP响应码</div><div class="line">[root@10-9-179-71 ~]# curl -I https://bdapi.imdada.cn/health/check</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: openresty</div><div class="line">Date: Sun, 23 Jul 2017 03:16:45 GMT</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Content-Length: 30</div><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure>
<h4 id="1-7-scp"><a href="#1-7-scp" class="headerlink" title="1.7 scp"></a>1.7 scp</h4><p>scp命令是Linux系统中功能强大的文件传输命令，可以实现从本地到远程以及远程到本地的双向文件传输，用起来非常的方便。常用来在线上定位问题时，将线上的一些文件下载到本地进行查看，或者将本地的修改上传到服务器上。</p>
<p>使用方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp jianweilin@192.168.1.1:/home/jianweilin/test.txt</div><div class="line"></div><div class="line">scp ./test.txt jianweilin@192.168.1.1:/home/jianweilin/</div></pre></td></tr></table></figure></p>
<h4 id="1-8-vi-amp-vim"><a href="#1-8-vi-amp-vim" class="headerlink" title="1.8 vi &amp; vim"></a>1.8 vi &amp; vim</h4><p>vi和vim是Linux中最常用的命令行文本编辑工具，vim是vi的升级版本，在某些Linux版本下，vi实际上通过软链接指向vim。</p>
<p>常用vi/vim命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">1、h: 左移一个字符</div><div class="line"></div><div class="line">2、l: 有移一个字符</div><div class="line"></div><div class="line">3、k: 上移一个字符</div><div class="line"></div><div class="line">4、j: 下移一个字符</div><div class="line"></div><div class="line">5、set number: 显示行号</div><div class="line"></div><div class="line">6、shift + g: 移动到最后一行</div><div class="line"></div><div class="line">7、1 + shift + g: 移动到第一行</div><div class="line"></div><div class="line">8、n + shift + g: 移动到第n行</div><div class="line"></div><div class="line">9、0: 移动到行首</div><div class="line"></div><div class="line">10、$: 移动到行尾</div><div class="line"></div><div class="line">11、 /text: 查到text，按n键查找下一个，按N查找前一个</div><div class="line"></div><div class="line">12、 ?text: 查找text，按n键查找下一个，按N查找前一个</div><div class="line"></div><div class="line">13、i: 在当前位置前插入</div><div class="line"></div><div class="line">14、I: 在当前行首插入</div><div class="line"></div><div class="line">15、a: 在当前位置后插入</div><div class="line"></div><div class="line">16、A: 在当前行尾插入</div><div class="line"></div><div class="line">17、o: 在当前行之后插入一行</div><div class="line"></div><div class="line">18、O: 在当前行之前插入一行</div><div class="line"></div><div class="line">19、%s/old/new/g：用old替换new，替换当前行的所有匹配</div><div class="line"></div><div class="line">20、ctrl + f：向下滚动一屏</div><div class="line"></div><div class="line">21、ctrl + b：向上滚动一屏</div><div class="line"></div><div class="line">22、u：撤销</div><div class="line"></div><div class="line">23、U：撤销对整行的操作</div><div class="line"></div><div class="line">24、Ctrl + r：重做，即撤销的撤销</div><div class="line"></div><div class="line">25、x：删除当前字符</div><div class="line"></div><div class="line">26、dd：删除当前行</div><div class="line"></div><div class="line">27、10d：删除当前行开始的10行</div><div class="line"></div><div class="line">28、yy：拷贝当前行</div><div class="line"></div><div class="line">29、p：在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行</div><div class="line">粘贴</div><div class="line"></div><div class="line">30、：wq：保存并退出</div><div class="line"></div><div class="line">31、：q!：强制退出并忽略所有更改</div></pre></td></tr></table></figure>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.jianshu.com/p/6fc923ceb722" target="_blank" rel="external">Java服务化系统线上应急和技术攻关，你必须掌握的Linux命令</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flask-SQLAlchemy: Can't reconnect until invalid transaction is rolled back]]></title>
      <url>http://jianwl.com/2017/07/20/Flask-SQLAlchemy-Can-t-reconnect-until-invalid-transaction-is-rolled-back/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近来在做些Python的重构工作，今日屡次出现这个错误；</p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-20/81011645.jpg" alt=""></p>
<p>由日志可知，在查询<code>bd_charge_info</code>这张表时，由于存在没有提交的事务，导致了查询失败；于是查了MYSQL数据库的事务状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW ENGINE INNODB STATUS</div></pre></td></tr></table></figure>
<p>查询结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-20/50146776.jpg" alt=""></p>
<p>至此确认了问题所在。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://imysql.com/2015/03/25/mysql-faq-how-to-fetch-latest-trxid.shtml" target="_blank" rel="external">如何查看当前最新事务ID</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2017的小目标]]></title>
      <url>http://jianwl.com/2017/07/19/2017%E7%9A%84%E5%B0%8F%E7%9B%AE%E6%A0%87/</url>
      <content type="html"><![CDATA[<p>已经到年中了，给后半年设定一些小目标；</p>
<h3 id="小目标制定"><a href="#小目标制定" class="headerlink" title="小目标制定"></a>小目标制定</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-19/17630389.jpg" alt=""></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-7-19/90166218.jpg" alt=""></p>
<h3 id="7月份小目标"><a href="#7月份小目标" class="headerlink" title="7月份小目标"></a>7月份小目标</h3><p>7月份的学习主要以巩固基础为主，熟悉JVM参数配置 &amp; 泛读JVM官方文档</p>
<p>【10h】泛读<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/" target="_blank" rel="external">The Java Virtual Machine Specification</a></p>
<p>【20h】精读《深入理解JAVA虚拟机》并输出笔记</p>
<h3 id="7月份进展"><a href="#7月份进展" class="headerlink" title="7月份进展"></a>7月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="8月份小目标"><a href="#8月份小目标" class="headerlink" title="8月份小目标"></a>8月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="8月份进展"><a href="#8月份进展" class="headerlink" title="8月份进展"></a>8月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="9月份小目标"><a href="#9月份小目标" class="headerlink" title="9月份小目标"></a>9月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="9月份进展"><a href="#9月份进展" class="headerlink" title="9月份进展"></a>9月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="10月份小目标"><a href="#10月份小目标" class="headerlink" title="10月份小目标"></a>10月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="10月份进展"><a href="#10月份进展" class="headerlink" title="10月份进展"></a>10月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="11月份小目标"><a href="#11月份小目标" class="headerlink" title="11月份小目标"></a>11月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="11月份进展"><a href="#11月份进展" class="headerlink" title="11月份进展"></a>11月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="12月份小目标"><a href="#12月份小目标" class="headerlink" title="12月份小目标"></a>12月份小目标</h3><p>// 还没轮到我呢…</p>
<h3 id="12月份进展"><a href="#12月份进展" class="headerlink" title="12月份进展"></a>12月份进展</h3><p>// 还没轮到我呢…</p>
<h3 id="全年总结"><a href="#全年总结" class="headerlink" title="全年总结"></a>全年总结</h3><p>// 还没轮到我呢…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之生产者-消费者模式]]></title>
      <url>http://jianwl.com/2017/06/21/JAVA%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>生产者-消费者模式是一个经典的多线程设计模式，它为多线程的协作提供了良好的解决方案。在生产者与消费者模式中，通常有两类线程，即若干个生产者线程和若干个消费者线程。<strong>生产者线程负责提交用户请求，消费者线程负责具体处理生产者提交的任务</strong>；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/QQ20170621-170501@2x.png" alt=""></p>
<p>生产者-消费者模式的核心组件是共享内存缓冲区，它作为生产者和消费者间的通信桥梁，避免了生产者和消费者的直接通信，从而将生产者和消费者进行解耦，生产者不需要知道消费者的存在，消费者也不需要知道生产者的存在。</p>
<p>同时，由于内存缓冲区的存在，允许生产者和消费者在执行速度上存在时间差，无论是生产者在某一局部时间内速度高于消费者，或是消费者在局部时间内高于生产者，都可以通过共享内存缓冲区得到缓解，确保系统正常运行。</p>
<h3 id="2-生产者-消费者模式主要角色"><a href="#2-生产者-消费者模式主要角色" class="headerlink" title="2. 生产者-消费者模式主要角色"></a>2. 生产者-消费者模式主要角色</h3><table>
<thead>
<tr>
<th>角色</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>生产者</td>
<td>用于提交用户请求，提取用户任务，并装入内存缓冲区</td>
</tr>
<tr>
<td>消费者</td>
<td>在内存缓冲区中提取并处理任务</td>
</tr>
<tr>
<td>内存缓冲区</td>
<td>缓冲生产者提交的任务或数据，供消费者使用</td>
</tr>
<tr>
<td>任务</td>
<td>生产者向内存缓冲区提交的数据结构</td>
</tr>
<tr>
<td>Main</td>
<td>使用生产者和消费者的客户端</td>
</tr>
</tbody>
</table>
<h3 id="3-类图"><a href="#3-类图" class="headerlink" title="3. 类图"></a>3. 类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-21/96135924.jpg" alt=""></p>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><h4 id="1-共享数据模型不可变类PCData"><a href="#1-共享数据模型不可变类PCData" class="headerlink" title="1) 共享数据模型不可变类PCData"></a>1) 共享数据模型不可变类<code>PCData</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public final class PCData &#123;</div><div class="line">    private final int intData;</div><div class="line"></div><div class="line">    public PCData(int d) &#123;</div><div class="line">        intData = d;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public PCData(String d) &#123;</div><div class="line">        intData = Integer.valueOf(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getIntData() &#123;</div><div class="line">        return intData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;data:&quot; + intData;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-生产者Producer"><a href="#2-生产者Producer" class="headerlink" title="2) 生产者Producer"></a>2) 生产者<code>Producer</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class Producer implements Runnable &#123;</div><div class="line">    private volatile boolean isRunning = true;</div><div class="line">    private BlockingQueue&lt;PCData&gt; queue;</div><div class="line">    private static AtomicInteger count = new AtomicInteger();</div><div class="line"></div><div class="line">    private static final int SLEEP_TIME = 100;</div><div class="line"></div><div class="line">    public Producer(BlockingQueue&lt;PCData&gt; queue) &#123;</div><div class="line">        this.queue = queue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        PCData data = null;</div><div class="line">        Random r = new Random();</div><div class="line">        System.out.println(&quot;start producer id =&quot; + Thread.currentThread().getId());</div><div class="line"></div><div class="line">        try&#123;</div><div class="line">            while (isRunning) &#123;</div><div class="line">                Thread.sleep(r.nextInt(SLEEP_TIME));</div><div class="line">                // 构造任务数据</div><div class="line">                data = new PCData(count.incrementAndGet());</div><div class="line">                System.out.println(data + &quot; is put into queue&quot;);</div><div class="line">                if (!queue.offer(data,2, TimeUnit.SECONDS)) &#123;</div><div class="line">                    System.err.println(&quot;fail to put data: &quot; + data);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void stop() &#123;</div><div class="line">        isRunning = false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-消费者Consumer"><a href="#3-消费者Consumer" class="headerlink" title="3) 消费者Consumer"></a>3) 消费者<code>Consumer</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Consumer implements Runnable &#123;</div><div class="line">    private BlockingQueue&lt;PCData&gt; queue;</div><div class="line">    private static final int SLEEP_TIME = 100;</div><div class="line"></div><div class="line">    public Consumer(BlockingQueue&lt;PCData&gt; queue) &#123;</div><div class="line">        this.queue = queue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;start consumer id = &quot; + Thread.currentThread().getId());</div><div class="line">        Random r = new Random();</div><div class="line"></div><div class="line">        try&#123;</div><div class="line">            while (true) &#123;</div><div class="line">                PCData data = queue.take();</div><div class="line">                if( null != data) &#123;</div><div class="line">                    int re = data.getIntData() * data.getIntData();</div><div class="line">                    System.out.println(MessageFormat.format(&quot;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&quot;,data.getIntData(), data.getIntData(),re));</div><div class="line">                &#125;</div><div class="line">                Thread.sleep(r.nextInt(SLEEP_TIME));</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            Thread.currentThread().interrupt();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-入口Run"><a href="#4-入口Run" class="headerlink" title="4) 入口Run"></a>4) 入口<code>Run</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        // 建立缓冲区</div><div class="line">        BlockingQueue&lt;PCData&gt; queue = new LinkedBlockingQueue&lt;&gt;(10);</div><div class="line"></div><div class="line">        // 建立生产者</div><div class="line">        Producer producer1 = new Producer(queue);</div><div class="line">        Producer producer2 = new Producer(queue);</div><div class="line">        Producer producer3 = new Producer(queue);</div><div class="line"></div><div class="line">        // 建立消费者</div><div class="line">        Consumer consumer1 = new Consumer(queue);</div><div class="line">        Consumer consumer2 = new Consumer(queue);</div><div class="line">        Consumer consumer3 = new Consumer(queue);</div><div class="line"></div><div class="line">        // 建立线程池</div><div class="line">        ExecutorService service = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        // 运行生产者</div><div class="line">        service.execute(producer1);</div><div class="line">        service.execute(producer2);</div><div class="line">        service.execute(producer3);</div><div class="line"></div><div class="line">        // 运行消费者</div><div class="line">        service.execute(consumer1);</div><div class="line">        service.execute(consumer2);</div><div class="line">        service.execute(consumer3);</div><div class="line">        Thread.sleep(1000);</div><div class="line"></div><div class="line">        // 停止生产者</div><div class="line">        producer1.stop();</div><div class="line">        producer2.stop();</div><div class="line">        producer3.stop();</div><div class="line"></div><div class="line">        Thread.sleep(1000);</div><div class="line">        service.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5 运行结果"></a>5 运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-21/49301344.jpg" alt=""></p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol>
<li>Java程序性能优化</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之Future模式]]></title>
      <url>http://jianwl.com/2017/06/20/JAVA%E4%B9%8BFuture%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>Future模式有点类似商品订单，比如在进行网上购物时，当看中某一件商品时，就可以提交订单。当订单处理完毕后，便可在家里等待商品送货上门。卖家根据订单从仓库里取货，并配送到客户手上。在大部分情况下，商家对订单的处理并不那么快，而在这段时间内，客户完全不必傻傻地在家里等待，可以出门处理其他事物。</p>
<h3 id="2-传统串行调用-VS-Future模式"><a href="#2-传统串行调用-VS-Future模式" class="headerlink" title="2. 传统串行调用 VS Future模式"></a>2. 传统串行调用 <code>VS</code> Future模式</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-20/29048455.jpg" alt=""></p>
<p>图1所示，客户端发出call请求，这个请求需要相当长一段时间才能返回。客户端一直等待，直到数据返回，随后，在进行其他任务的处理。</p>
<p>图2显示了一个广义Future模式的实现，从Data_Future对象可以看到，虽然call本身处理仍然需要很长一段时间来处理程序，但是服务程序不等数据处理完成便立即返回客户端一个伪造的数据，实现了Future模式的客户。</p>
<h3 id="3-Future模式的主要参与者"><a href="#3-Future模式的主要参与者" class="headerlink" title="3. Future模式的主要参与者"></a>3. Future模式的主要参与者</h3><table>
<thead>
<tr>
<th>参与者</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Main</td>
<td>系统启动，调用Client发出请求</td>
</tr>
<tr>
<td>Client</td>
<td>返回Data对象，立即返回FutureData，并开启ClientThread线程装配RealData</td>
</tr>
<tr>
<td>Data</td>
<td>返回数据接口</td>
</tr>
<tr>
<td>FutureData</td>
<td>Future数据，构造很快，但是是一个虚拟的数据，需要装配RealData</td>
</tr>
<tr>
<td>RealData</td>
<td>真实数据，其构造是比较慢的</td>
</tr>
</tbody>
</table>
<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-20/16429145.jpg" alt=""></p>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><h4 id="1-Data接口"><a href="#1-Data接口" class="headerlink" title="1) Data接口"></a>1) Data接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Data &#123;</div><div class="line">    String getResult();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-真实数据RealData"><a href="#2-真实数据RealData" class="headerlink" title="2) 真实数据RealData"></a>2) 真实数据<code>RealData</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class RealData implements Data &#123;</div><div class="line">    protected final String result;</div><div class="line"></div><div class="line">    public RealData(String para) &#123;</div><div class="line">        StringBuffer sb = new StringBuffer();</div><div class="line">        for(int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            sb.append(para);</div><div class="line">            try&#123;</div><div class="line">                Thread.sleep(100);</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        result = sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getResult() &#123;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3）FutureData"><a href="#3）FutureData" class="headerlink" title="3）FutureData"></a>3）FutureData</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class FutureData implements Data &#123;</div><div class="line">    protected RealData realData = null;</div><div class="line">    protected boolean isReady = false;</div><div class="line">    public synchronized void setRealData(RealData realData) &#123;</div><div class="line">        if (isReady) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        this.realData = realData;</div><div class="line">        isReady = true;</div><div class="line">        notifyAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public synchronized String getResult() &#123;</div><div class="line">        while (!isReady) &#123;</div><div class="line">            try &#123;</div><div class="line">                wait();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return realData.result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-客户端Client"><a href="#4-客户端Client" class="headerlink" title="4) 客户端Client"></a>4) 客户端<code>Client</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public Data request(final String queryStr) &#123;</div><div class="line">        final FutureData future = new FutureData();</div><div class="line">        new Thread(() -&gt; &#123;</div><div class="line">            RealData realData = new RealData(queryStr);</div><div class="line">            future.setRealData(realData);</div><div class="line">        &#125;).start();</div><div class="line">        return future;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-入口Run"><a href="#5-入口Run" class="headerlink" title="5) 入口Run"></a>5) 入口<code>Run</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Client client = new Client();</div><div class="line">        Data data = client.request(&quot;name&quot;);</div><div class="line">        System.out.println(&quot;请求完毕!&quot;);</div><div class="line">        try&#123;</div><div class="line">            Thread.sleep(100);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;数据 =&gt; &quot; + data.getResult());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-运行结果"><a href="#6-运行结果" class="headerlink" title="6) 运行结果"></a>6) 运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-20/38834317.jpg" alt=""></p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol>
<li>Java程序性能优化</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA观察者模式]]></title>
      <url>http://jianwl.com/2017/06/18/JAVA%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>观察者模式是非常常用的一种设计模式，在软件系统中，当一个对象的行为依赖另一个对象的状态时，观察者模式相当有用。若不使用观察者模式提供的通用结构，而需要实现其类似的功能，则只能在另一个线程中不停监听对象所依赖的状态。在一个复杂系统中，可能会因此开启很多线程来实现这一功能，这将使系统的性能产生额外的负担。</p>
<h3 id="2-观察者模式角色"><a href="#2-观察者模式角色" class="headerlink" title="2. 观察者模式角色"></a>2. 观察者模式角色</h3><table>
<thead>
<tr>
<th>角色</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>主题接口</td>
<td>指被观察的对象，当其状态发生变化或者某事件发生时，它会将这个变化通知观察者。它维护了观察者所需要依赖的状态</td>
</tr>
<tr>
<td>具体主题</td>
<td>具体主题实现了主题接口中的方法，如新增观察者、删除观察者和通知观察者。其内部维护一个观察者列表</td>
</tr>
<tr>
<td>观察者接口</td>
<td>观察者接口定义了观察者的基本方法，当依赖状态发生改变时，主题接口就会调用观察者的update()方法</td>
</tr>
<tr>
<td>具体观察者</td>
<td>实现了观察者接口的update()，具体处理当被观察者状态改变或者某一事件发生时的业务逻辑</td>
</tr>
</tbody>
</table>
<h3 id="3-观察者模式类图"><a href="#3-观察者模式类图" class="headerlink" title="3. 观察者模式类图"></a>3. 观察者模式类图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/26557541.jpg" alt=""></p>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><h4 id="主题接口ISubject"><a href="#主题接口ISubject" class="headerlink" title="主题接口ISubject"></a>主题接口<code>ISubject</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface ISubject &#123;</div><div class="line">    void attach(IObserver observer); // 添加观察者</div><div class="line">    void detach(IObserver observer); // 删除观察者</div><div class="line">    void inform(String msg); // 通知所有观察者</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="具体主题ConcreteSubject"><a href="#具体主题ConcreteSubject" class="headerlink" title="具体主题ConcreteSubject"></a>具体主题<code>ConcreteSubject</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ConcreteSubject implements ISubject &#123;</div><div class="line">    Vector&lt;IObserver&gt; observers = new Vector&lt;IObserver&gt;();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void attach(IObserver observer) &#123;</div><div class="line">        observers.addElement(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void detach(IObserver observer) &#123;</div><div class="line">        observers.removeElement(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void inform(String msg) &#123;</div><div class="line">        for(IObserver ob:observers) &#123;</div><div class="line">            ob.update(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="观察者接口"><a href="#观察者接口" class="headerlink" title="观察者接口"></a>观察者接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IObserver &#123;</div><div class="line">    void update(String msg); // 更新观察者</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="具体观察者"><a href="#具体观察者" class="headerlink" title="具体观察者"></a>具体观察者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ConcreteObserve implements IObserver &#123;</div><div class="line">    @Override</div><div class="line">    public void update(String msg) &#123;</div><div class="line">        System.out.println(&quot;observe receive information =&gt; &quot; + JSON.toJSONString(msg));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="入口Run"><a href="#入口Run" class="headerlink" title="入口Run"></a>入口<code>Run</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ConcreteSubject subject = new ConcreteSubject();</div><div class="line">        ConcreteObserve observeA = new ConcreteObserve();</div><div class="line">        ConcreteObserve observeB = new ConcreteObserve();</div><div class="line">        subject.attach(observeA);</div><div class="line">        subject.attach(observeB);</div><div class="line">        subject.inform(&quot;notify-1&quot;);</div><div class="line">        subject.detach(observeB);</div><div class="line">        subject.inform(&quot;notify-2&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/64270257.jpg" alt=""></p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol>
<li>JAVA程序性能优化</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之享元模式]]></title>
      <url>http://jianwl.com/2017/06/17/JAVA%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>享元模式是设计模式中少数几个以提高系统性能为目的的模式之一；它的核心思想是：<strong>如果在一个系统中存在多个相同的对象，那么只需要共享一份对象的拷贝，而不必为每一次使用都创建新的对象。</strong></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>可以节省重复创建对象的开销；</li>
<li>创建对象的数量减少，对系统的内存需求也减小，使得GC的压力降低；</li>
</ol>
<h3 id="2-享元模式角色"><a href="#2-享元模式角色" class="headerlink" title="2. 享元模式角色"></a>2. 享元模式角色</h3><table>
<thead>
<tr>
<th>角色</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>享元工厂</td>
<td>用以创建具体享元类，维护相同的单元对象。它保证相同的享元对象可以被系统共享。即内部使用了类似单例模式的算法，当请求对象已经存在时，直接返回对象，不存在时，再创建对象</td>
</tr>
<tr>
<td>抽象享元</td>
<td>定义需共享的对象的业务接口。享元类被创建出来总是为了实现某些特定的业务逻辑，而抽象享元便定义这些逻辑的语义行为</td>
</tr>
<tr>
<td>具体享元类</td>
<td>实现抽象享元类的接口，完成某一具体的逻辑</td>
</tr>
<tr>
<td>Main</td>
<td>使用享元模式的组件，通过享元工厂取得享元对象</td>
</tr>
</tbody>
</table>
<h3 id="3-实战"><a href="#3-实战" class="headerlink" title="3. 实战"></a>3. 实战</h3><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/33093517.jpg" alt=""></p>
<h4 id="可运行实例"><a href="#可运行实例" class="headerlink" title="可运行实例"></a>可运行实例</h4><h5 id="1、-抽象享元IReportManager"><a href="#1、-抽象享元IReportManager" class="headerlink" title="1、 抽象享元IReportManager"></a>1、 抽象享元<code>IReportManager</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IReportManager &#123;</div><div class="line">     String createReport();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2、-具体享元类-EmployeeReportManager"><a href="#2、-具体享元类-EmployeeReportManager" class="headerlink" title="2、 具体享元类 EmployeeReportManager"></a>2、 具体享元类 <code>EmployeeReportManager</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class EmployeeReportManager implements IReportManager &#123;</div><div class="line">    protected String tenantId = null;</div><div class="line"></div><div class="line">    public EmployeeReportManager(String tenantId) &#123;</div><div class="line">        this.tenantId = tenantId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String createReport() &#123;</div><div class="line">        return &quot;This is a employee report&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3、-具体享元类-FinancialReportManager"><a href="#3、-具体享元类-FinancialReportManager" class="headerlink" title="3、 具体享元类 FinancialReportManager"></a>3、 具体享元类 <code>FinancialReportManager</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class FinancialReportManager implements IReportManager &#123;</div><div class="line">    protected String tenantId = null;</div><div class="line"></div><div class="line">    public FinancialReportManager(String tenantId) &#123;</div><div class="line">        this.tenantId = tenantId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String createReport() &#123;</div><div class="line">        return &quot;This is a financial report&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4、-享元工厂ReportManagerFactory"><a href="#4、-享元工厂ReportManagerFactory" class="headerlink" title="4、 享元工厂ReportManagerFactory"></a>4、 享元工厂<code>ReportManagerFactory</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class ReportManagerFactory &#123;</div><div class="line">    Map&lt;String,IReportManager&gt; finanacialReportManager = new HashMap&lt;String,IReportManager&gt;();</div><div class="line">    Map&lt;String,IReportManager&gt; employeeReportManager = new HashMap&lt;String,IReportManager&gt;();</div><div class="line"></div><div class="line">    IReportManager getFinancialReportManager(String tenantId)&#123;</div><div class="line">        IReportManager r = finanacialReportManager.get(tenantId);</div><div class="line">        if (r == null) &#123;</div><div class="line">            r = new FinancialReportManager(tenantId);</div><div class="line">            finanacialReportManager.put(tenantId,r);</div><div class="line">        &#125;</div><div class="line">        return r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    IReportManager getEmployeeReportReportManger(String tenantId)&#123;</div><div class="line">        IReportManager r = employeeReportManager.get(tenantId);</div><div class="line">        if (r == null) &#123;</div><div class="line">            r = new EmployeeReportManager(tenantId);</div><div class="line">            employeeReportManager.put(tenantId,r);</div><div class="line">        &#125;</div><div class="line">        return r;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5、-入口Run"><a href="#5、-入口Run" class="headerlink" title="5、 入口Run"></a>5、 入口<code>Run</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ReportManagerFactory rmf = new ReportManagerFactory();</div><div class="line">        IReportManager rm = rmf.getFinancialReportManager(&quot;A&quot;);</div><div class="line">        System.out.println(rm.createReport());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="6-运行结果"><a href="#6-运行结果" class="headerlink" title="6. 运行结果"></a>6. 运行结果</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-18/81872942.jpg" alt=""></p>
<h3 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h3><ol>
<li>JAVA程序性能优化</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之装饰者模式]]></title>
      <url>http://jianwl.com/2017/06/09/JAVA%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>装饰者模式拥有一个设计非常精巧的结构，它可以动态添加对象功能，在基本的设计原则中，有一条重要的设计准则叫做<strong>合成/聚合复用原则。</strong>根据该原则的思想，代码复用应该尽可能使用委托，而不是使用继承。因为继承是一种紧密耦合，任何父类的改动都会影响其子类，不利于系统维护。而委托则是松散耦合，只要接口不变，委托类的改动并不会影响上层对象。</p>
<p>装饰者模式就充分运用了这种思想，通过委托机制，复用系统中的各个组件，在运行时，可以将这些功能进行叠加，从而构造一个“超级对象”，使其拥有所有这些组件的功能。而各个子模块功能，被很好地维护在各个组件的相关类中 ，拥有整洁的系统结构。</p>
<h3 id="2-装饰者模式基本结构"><a href="#2-装饰者模式基本结构" class="headerlink" title="2. 装饰者模式基本结构"></a>2. 装饰者模式基本结构</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-9/53287711.jpg" alt=""></p>
<p>装饰者(Decorator) 和被装饰者(ConcreteComponent)拥有相同的接口Component，被装饰者通常是系统的核心组件，完成特定的功能目标。而装饰者则可以在被装饰者的方法前后，加上特定的前置处理和后置处理，增强被装饰者的功能。</p>
<p>装饰者模式角色</p>
<table>
<thead>
<tr>
<th style="text-align:left">角色</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">组件接口</td>
<td style="text-align:center">组件接口是装饰者和被装饰者的超类或接口，它定义了被装饰者的核心功能和装饰者需要加强的功能点。</td>
</tr>
<tr>
<td style="text-align:left">具体组件</td>
<td style="text-align:center">具体组件实现了组件接口的核心方法，完成某一个具体的业务逻辑，它也是被装饰的对象</td>
</tr>
<tr>
<td style="text-align:left">装饰者</td>
<td style="text-align:center">实现组件接口，并持有一个具体的被装饰对象</td>
</tr>
<tr>
<td style="text-align:left">具体装饰者</td>
<td style="text-align:center">具体实现装饰的业务逻辑，即实现了被分离的各个增强功能点，各个具体装饰者是可以相互叠加的，从而可以构成一个功能更强大的组件对象</td>
</tr>
</tbody>
</table>
<h3 id="3-实战"><a href="#3-实战" class="headerlink" title="3. 实战"></a>3. 实战</h3><h4 id="1）场景描述"><a href="#1）场景描述" class="headerlink" title="1）场景描述"></a>1）场景描述</h4><p>将某一结果通过HTML进行发布，那么首先就需要将内容转化为一个HTML文本，同时由于内容要在网络上通过HTTP流传，故还需要为其增加HTTP头。</p>
<h4 id="2）类图"><a href="#2）类图" class="headerlink" title="2）类图"></a>2）类图</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-10/63142422.jpg" alt=""></p>
<h4 id="3-可运行实例"><a href="#3-可运行实例" class="headerlink" title="3) 可运行实例"></a>3) 可运行实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">// Component</div><div class="line">public interface IPacketCreator &#123;</div><div class="line">    String handleContent();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Concrete Component</div><div class="line">public class PacketBodyCreator implements IPacketCreator &#123;</div><div class="line">    @Override</div><div class="line">    public String handleContent() &#123;</div><div class="line">        return &quot;Content of Packet&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Decorator</div><div class="line">public abstract class PacketDecorator implements IPacketCreator &#123;</div><div class="line">    IPacketCreator component;</div><div class="line"></div><div class="line">    public PacketDecorator(IPacketCreator component) &#123;</div><div class="line">        this.component = component;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Concrete Decorator</div><div class="line">public class PacketHTTPHeaderCreator extends PacketDecorator &#123;</div><div class="line">    public PacketHTTPHeaderCreator(IPacketCreator component) &#123;</div><div class="line">        super(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String handleContent() &#123;</div><div class="line">        StringBuffer sb = new StringBuffer();</div><div class="line">        sb.append(&quot;Cache-Control:no-cache\n&quot;);</div><div class="line">        sb.append(&quot;Date:2017-06-10\n&quot;);</div><div class="line">        sb.append(component.handleContent());</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Concrete Decorator</div><div class="line">public class PacketHTMLHeaderCreator extends PacketDecorator &#123;</div><div class="line"></div><div class="line">    public PacketHTMLHeaderCreator(IPacketCreator component) &#123;</div><div class="line">        super(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String handleContent() &#123;</div><div class="line">        StringBuffer sb = new StringBuffer();</div><div class="line">        sb.append(&quot;&lt;html&gt;&quot;);</div><div class="line">        sb.append(&quot;&lt;body&gt;&quot;);</div><div class="line">        sb.append(component.handleContent());</div><div class="line">        sb.append(&quot;&lt;/body&gt;&quot;);</div><div class="line">        sb.append(&quot;&lt;/html&gt;\n&quot;);</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 运行</div><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        IPacketCreator pc = new PacketHTTPHeaderCreator(new PacketHTMLHeaderCreator(new PacketBodyCreator()));</div><div class="line">        System.out.println(pc.handleContent());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-10/21550495.jpg" alt=""></p>
<h3 id="4-JDK中用装饰者的实例"><a href="#4-JDK中用装饰者的实例" class="headerlink" title="4. JDK中用装饰者的实例"></a>4. JDK中用装饰者的实例</h3><h4 id="1-描述"><a href="#1-描述" class="headerlink" title="1) 描述"></a>1) 描述</h4><p>OutStream为核心的装饰者模式的实现，其中FileOutputStream为系统的核心类，它实现了向文件写入数据。使用DataOutputStream可以在FileOutputStream的基础上，增加对多种数据类型的写操作，而BufferedOutputStream秀使其，可以对FileOutputStream增加缓冲功能，优化I/O的性能，以BufferedOutputStream为代表的性能组件，是将性能模块和功能模块分离的一种典型实现。</p>
<h4 id="2-类图"><a href="#2-类图" class="headerlink" title="2) 类图"></a>2) 类图</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-10/56315217.jpg" alt=""></p>
<h4 id="3）可运行实例"><a href="#3）可运行实例" class="headerlink" title="3）可运行实例"></a>3）可运行实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class OutputStreamTest &#123;</div><div class="line">    public static void notBufferOut()&#123;</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        try &#123;</div><div class="line">            DataOutputStream dout = new DataOutputStream(new FileOutputStream(&quot;/Users/jianweilin/Desktop/output1.txt&quot;));</div><div class="line">            for (int i=0; i&lt; 1000; i++) &#123;</div><div class="line">                dout.writeInt(i);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;notBufferOut spend =&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void bufferOut()&#123;</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        try &#123;</div><div class="line">            DataOutputStream dout = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(&quot;/Users/jianweilin/Desktop/output2.txt&quot;)));</div><div class="line">            for (int i=0; i&lt; 1000; i++) &#123;</div><div class="line">                dout.writeInt(i);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;bufferOut spend =&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        notBufferOut();</div><div class="line">        bufferOut();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结果</div><div class="line">// notBufferOut spend =&gt; 11</div><div class="line">// bufferOut spend =&gt; 1</div></pre></td></tr></table></figure>
<h4 id="4-工作流程图"><a href="#4-工作流程图" class="headerlink" title="4) 工作流程图"></a>4) 工作流程图</h4><p><code>FileOutputStream.write()</code>的调用之前，会首先调用<code>BufferedOutputStream.write()</code>。且<code>BufferedOutputStream.write()</code>不会每次都去磁盘写数据，而是将数据写入缓存，当缓存满时，才会调用<code>FileOutputStream.write()</code>方法，实际写入数据。以此实现性能组件与功能组件的分离。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-10/51627202.jpg" alt=""></p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol>
<li>Java程序性能优化 by 葛一鸣</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单例模式之性能比较]]></title>
      <url>http://jianwl.com/2017/06/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>设计模式是前人工作的总结和提炼，通常，被人们广泛流传的设计模式都是对某一特定问题的成熟解决方案。如果能合理地使用设计模式，不仅能使系统更容易被他人理解，同时也能使系统拥有更加合理的结构。本节将对单例模式多种实现进行性能分析。</p>
<h3 id="2-单例模式的好处"><a href="#2-单例模式的好处" class="headerlink" title="2. 单例模式的好处"></a>2. 单例模式的好处</h3><ol>
<li>对于频繁使用的对象，可以省略创建对象所花费的时间，这对于重量级对象而言，是非常可观的一笔系统开销；</li>
<li>由于new操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻GC压力，缩短GC停顿时间。</li>
</ol>
<h3 id="3-多种实现方式"><a href="#3-多种实现方式" class="headerlink" title="3. 多种实现方式"></a>3. 多种实现方式</h3><h4 id="1-简单的单例实现"><a href="#1-简单的单例实现" class="headerlink" title="1) 简单的单例实现"></a>1) 简单的单例实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance = new Singleton();</div><div class="line"></div><div class="line">    private Singleton() &#123;</div><div class="line">        System.out.println(&quot;Singleton is create&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void createString()&#123;</div><div class="line">        System.out.println(&quot;createString in Singleton&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Singleton.createString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点是无法对instance实例延迟加载，在任何地方使用这个单例类都会初始化这个单例变量，就如例子中的一样，仅仅只调用<code>createString</code>方法，也会初始化单例变量；</p>
<h4 id="2-延迟加载"><a href="#2-延迟加载" class="headerlink" title="2) 延迟加载"></a>2) 延迟加载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class LazySingleton &#123;</div><div class="line">    private static LazySingleton instance = null;</div><div class="line"></div><div class="line">    private LazySingleton()&#123;</div><div class="line">        System.out.println(&quot;LazySingleton is create&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static synchronized LazySingleton getInstance()&#123;</div><div class="line">        if (instance == null) &#123;</div><div class="line">            instance = new LazySingleton();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void createString()&#123;</div><div class="line">        System.out.println(&quot;createString in Singleton&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        LazySingleton.createString()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// createString in Singleton</div></pre></td></tr></table></figure>
<p>为了解决例1中的问题，引入延迟加载机制，但这种延迟加载有一致命的缺点，因为引入了同步关键字，在多线程环境时耗远远大于第一种单例模式。</p>
<h4 id="3-改进"><a href="#3-改进" class="headerlink" title="3) 改进"></a>3) 改进</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class StaticSingleton &#123;</div><div class="line">    private StaticSingleton()&#123;</div><div class="line">        System.out.println(&quot;StaticSingleton is create&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static class SingletonHolder &#123;</div><div class="line">        private static StaticSingleton instance = new StaticSingleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static StaticSingleton getInstance()&#123;</div><div class="line">        return SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例2为了使用延迟加载引入同步关键字降低了性能，为了解决这个问题，引入例3。当StaticSingleton被加载时，内部类不会被初始化。</p>
<h4 id="4-三种模式性能比较"><a href="#4-三种模式性能比较" class="headerlink" title="4) 三种模式性能比较"></a>4) 三种模式性能比较</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">// 实现1</div><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance = new Singleton();</div><div class="line"></div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 实现2</div><div class="line">public class LazySingleton &#123;</div><div class="line">    private static LazySingleton instance = null;</div><div class="line"></div><div class="line">    public static synchronized LazySingleton getInstance()&#123;</div><div class="line">        if (instance == null) &#123;</div><div class="line">            instance = new LazySingleton();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 实现3</div><div class="line">public class StaticSingleton &#123;</div><div class="line">    private static class SingletonHolder &#123;</div><div class="line">        private static StaticSingleton instance = new StaticSingleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static StaticSingleton getInstance()&#123;</div><div class="line">        return SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 主类</div><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        new Thread(() -&gt; &#123;</div><div class="line">            long startTime = System.currentTimeMillis();</div><div class="line">            for (int j = 0; j &lt; 100000000; j++) &#123;</div><div class="line">                Singleton.getInstance();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;Singleton spend =&gt; &quot; + (System.currentTimeMillis() - startTime));</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        new Thread(() -&gt; &#123;</div><div class="line">            long startTime = System.currentTimeMillis();</div><div class="line">            for (int j = 0; j &lt; 100000000; j++) &#123;</div><div class="line">                LazySingleton.getInstance();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;LazySingleton spend =&gt; &quot; + (System.currentTimeMillis() - startTime));</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        new Thread(() -&gt; &#123;</div><div class="line">            long startTime = System.currentTimeMillis();</div><div class="line">            for (int j = 0; j &lt; 100000000; j++) &#123;</div><div class="line">                StaticSingleton.getInstance();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;StaticSingleton spend =&gt; &quot; + (System.currentTimeMillis() - startTime));</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结果</div><div class="line">// Singleton spend =&gt; 8</div><div class="line">// StaticSingleton spend =&gt; 10</div><div class="line">// LazySingleton spend =&gt; 3268</div></pre></td></tr></table></figure>
<h3 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h3><ol>
<li>Java程序性能优化 by 葛一鸣</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之异常]]></title>
      <url>http://jianwl.com/2017/06/04/Java%E4%B9%8B%E5%BC%82%E5%B8%B8-0/</url>
      <content type="html"><![CDATA[<h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-4/26082118.jpg" alt=""></p>
<p>在Java程序运行时，常常会出现一些非正常现象，根据其性质分为<strong>错误和异常。</strong> Java程序中，所有抛出的异常都必须从<code>Throwable</code>派生而来。Throwable有两个直接子类：Error和Exception。</p>
<p>Error</p>
<p>常见的错误有程序进入死循环、内存泄露等</p>
<p>Exception</p>
<p>异常分为受检异常 &amp; 非受检异常。受检异常是去除RuntimeExeption的其他直接继承Exception的子类；非受检异常是直接继承RunTimeException的子类；</p>
<p>对于受检异常，必须要用<code>try catch</code>去处理这个异常，或者在方法加上<code>throws</code>暗示这个方法可能会抛出某种异常。</p>
<p>非受检异常，不需要明确地去处理这个异常；</p>
<h3 id="2-受检异常-amp-非受检异常实战"><a href="#2-受检异常-amp-非受检异常实战" class="headerlink" title="2. 受检异常 &amp; 非受检异常实战"></a>2. 受检异常 &amp; 非受检异常实战</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-6-4/31638990.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://stackoverflow.com/questions/2190161/difference-between-java-lang-runtimeexception-and-java-lang-exception" target="_blank" rel="external">difference between java.lang.RuntimeException and java.lang.Exception</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之ClassLoader]]></title>
      <url>http://jianwl.com/2017/06/03/Java%E4%B9%8BClassLoader/</url>
      <content type="html"><![CDATA[<h3 id="1-ClassLoader基本概念"><a href="#1-ClassLoader基本概念" class="headerlink" title="1. ClassLoader基本概念"></a>1. ClassLoader基本概念</h3><p>Java程序是由许多独立的类文件组成的，每一个文件对应一个Java类。此外，<strong>这些类文件并非全部装入内存，而是根据程序需要逐渐载入。</strong> </p>
<p>ClassLoader是JVM实现的一部分，ClassLoader 包括 bootstrap classloader(启动类加载器), ClassLoader在JVM运行的时候加载Java核心的API，以满足Java程序最基本的需求，其中就包括用户定义的ClassLoader: <strong>一个是ExtClassLoader，它的作用是用来加载Java的扩展API，也就是/lib/ext中的类；第二个是AppClassLoader,它是用来加载用户机器上CLASSPATH设置目录中的Class的，通常在没有指定ClassLoader的情况下，自定义的类就由该ClassLoader进行加载。</strong></p>
<h3 id="2-ClassLoader加载流程"><a href="#2-ClassLoader加载流程" class="headerlink" title="2. ClassLoader加载流程"></a>2. ClassLoader加载流程</h3><p>当运行一个程序的时候，JVM启动，运行bootstrap classloader，该ClassLoader加载Java核心API(ExtClassLoader和AppClassLoader也在此时被加载)，然后调用ExtClassLoader加载扩展API，最后AppClassLoader加载CLASSPATH目录下定义的Class，这就是一个程序最基本的加载流程。</p>
<p>核心代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">protected Class&lt;?&gt; loadClass(String name, boolean resolve)</div><div class="line">    throws ClassNotFoundException</div><div class="line">&#123;</div><div class="line">    synchronized (getClassLoadingLock(name)) &#123;</div><div class="line">        // 首先检查该name指定的class是否被加载</div><div class="line">        Class&lt;?&gt; c = findLoadedClass(name);</div><div class="line">        if (c == null) &#123;</div><div class="line">            long t0 = System.nanoTime();</div><div class="line">            try &#123;</div><div class="line">                if (parent != null) &#123;</div><div class="line">                // 如果parent不为null，则调用parent的loadclass进行加载</div><div class="line">                    c = parent.loadClass(name, false);</div><div class="line">                &#125; else &#123;</div><div class="line">                // parent为null，则调用BootstrapClassLoader进行加载</div><div class="line">                    c = findBootstrapClassOrNull(name);</div><div class="line">                &#125;</div><div class="line">            &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (c == null) &#123;</div><div class="line">                long t1 = System.nanoTime();</div><div class="line">                // 如果仍然无法加载成功，则调用自身的findClass进行加载；</div><div class="line">                c = findClass(name);</div><div class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</div><div class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</div><div class="line">                sun.misc.PerfCounter.getFindClasses().increment();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (resolve) &#123;</div><div class="line">            resolveClass(c);</div><div class="line">        &#125;</div><div class="line">        return c;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上述代码中可以看出，<strong>一个类加载的过程使用了一种父类委托模式。</strong>为什么要使用这种模式？</p>
<ol>
<li>可以避免重复加载，当父类已经加载了该类的时候，就没有必要子ClassLoader再加载一次。</li>
<li>考虑到安全因素，如果不使用这种委托模式，那么可以随时使用自定义的String来动态替换Java核心API中定义的类型，这样会存在非常大的安全隐患，而父类委托的方式可以避免这种情况，因为String已经在启动时被加载，所以，用户自定义类无法加载一个自定义的ClassLoader</li>
</ol>
<h3 id="3-JVM加载类的流程"><a href="#3-JVM加载类的流程" class="headerlink" title="3. JVM加载类的流程"></a>3. JVM加载类的流程</h3><p>JVM加载类的时候，需要经过三个步骤：装载、连接、初始化。装载就是找到相应的class文件，读入JVM；初始化就是class文件初始化，这里详述一下连接，连接分为三步：</p>
<ol>
<li>验证class是否符合规范</li>
<li>准备，为类变量分配内存的同时设置默认初始值</li>
<li>解释，这步可选，根据loadClass中的是否需要解析的参数。解释指: 根据类中的符号引用查找相应的实体，再把符号引用替换成一个直接引用的过程。</li>
</ol>
<h3 id="4-一些重要的方法"><a href="#4-一些重要的方法" class="headerlink" title="4. 一些重要的方法"></a>4. 一些重要的方法</h3><h4 id="1-loadClass"><a href="#1-loadClass" class="headerlink" title="1) loadClass"></a>1) loadClass</h4><p>ClassLoader.loadClass()ClassLoader的入口点，定义如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class loadClass( String name, boolean resolve );</div></pre></td></tr></table></figure>
<p>name是JVM需要的类名称，如java.lang.Object。resolve参数告诉方法是否需要解析类。如果JVM只需要知道该类是否存在或找出该类的超类，那么就不需要解析；</p>
<h4 id="2-defineClass"><a href="#2-defineClass" class="headerlink" title="2) defineClass"></a>2) defineClass</h4><p>defineClass方法接受由原始字节组成的数组，并把它转换成Class对象。</p>
<h4 id="3-findSystemClass"><a href="#3-findSystemClass" class="headerlink" title="3) findSystemClass"></a>3) findSystemClass</h4><p>findSystemClass方法从本地文件系统装入文件。</p>
<h4 id="4）resolveClass"><a href="#4）resolveClass" class="headerlink" title="4）resolveClass"></a>4）resolveClass</h4><p>当我们编写自己的loadClass时，可以调用 resolveClass,这取决于 loadClass的resolve参数的值。</p>
<h4 id="5-findLoadedClass"><a href="#5-findLoadedClass" class="headerlink" title="5) findLoadedClass"></a>5) findLoadedClass</h4><p>findLoadedClass充当一个缓存，当请求loadClass装入类时，它调用该方法来查看ClassLoader是否已装入这个类，这样可以避免重新装入已存在类所造成的麻烦。</p>
<h4 id="6-findClass"><a href="#6-findClass" class="headerlink" title="6) findClass"></a>6) findClass</h4><p>findClass可以从本地文件系统使用实现的类装载器装载一个类。</p>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5 参考资料"></a>5 参考资料</h3><ol>
<li>Java面试宝典 by 欧立奇 朱梅等</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库读写分离&水分拆分&垂直拆分]]></title>
      <url>http://jianwl.com/2017/05/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E6%B0%B4%E5%88%86%E6%8B%86%E5%88%86-%E5%9E%82%E7%9B%B4%E6%8B%86%E5%88%86/</url>
      <content type="html"><![CDATA[<h3 id="1-数据库读写分离"><a href="#1-数据库读写分离" class="headerlink" title="1. 数据库读写分离"></a>1. 数据库读写分离</h3><p>随着业务的发展，我们的数据量和访问量都在增长，对于大型网站来说，有不少业务是读多写少的，这个状况也会直接反应到数据库上，那么对于这样的情况，我们可以考虑使用读写分离的方式。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/96626968-file_1495352158645_1675c.png" alt=""></p>
<p>通过读库来分担主库上读的压力，数据库提供了数据复制的功能，我们可以直接使用数据库系统自身的功能，但对于数据复制，我们还需要考虑数据复制时延问题，以及复制过程中数据的源和目标之间的映射关系及过滤条件的支持问题。<strong>数据复制延迟带来的就是短期的数据不一致。</strong>例如我们修改了用户信息，在这个信息还没有复制到读库时(因为延时)，我们从读库上读出来的信息就不是最新的，如果把这个信息给进行修改的人看，就会让他觉得没有修改成功。</p>
<h3 id="2-专库专用，数据库垂直拆分"><a href="#2-专库专用，数据库垂直拆分" class="headerlink" title="2. 专库专用，数据库垂直拆分"></a>2. 专库专用，数据库垂直拆分</h3><p>读写分离能够降低主库的压力，解决读的问题，但却无法解决主库写的问题。随着业务的发展，我们的主库也会遇到瓶颈，因此需要解决这个问题，有数据垂直拆分和水平拆分两种选择。</p>
<p>垂直拆分的意思是把数据库中不同的业务数据拆分到不同的数据库中。结合现在的例子，就是把交易、商品、用户的数据分开。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/73834200-file_1495353291315_4f78.png" alt=""></p>
<h4 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h4><p>这样的变化给我们带来的影响是什么呢？应用需要配置多个数据源，这就增加了所需的配置，不过带来的是每个数据库连接池的隔离。不同业务的数据，从原来一个数据库拆分到了多个数据库中，那么就需要<strong>考虑如何处理原来单机中跨业务的事务</strong>。一种办法是使用分布式事务，其性能要明显低于之前的单机事务；而另一种办法就是去掉事务或者不去追求强事务支持，则原来在单裤中可以使用的表关联的查询也就需要改变实现了。</p>
<p>对数据垂直拆分之后，解决了把所有业务数据放在一个数据库中的压力问题。并且也可以根据不同业务的特定进行更多优化。</p>
<h3 id="3-垂直拆分后的单机遇到瓶颈，数据库水平拆分"><a href="#3-垂直拆分后的单机遇到瓶颈，数据库水平拆分" class="headerlink" title="3. 垂直拆分后的单机遇到瓶颈，数据库水平拆分"></a>3. 垂直拆分后的单机遇到瓶颈，数据库水平拆分</h3><p>数据库水平拆分就是把同一个表的数据拆分到两个数据库中。产生数据水平拆分的原因是某个业务的数据表的数据量或者更新量达到了单个数据库的瓶颈，这时就可以把这个表拆分到两个或者多个数据库中。</p>
<p><strong>数据水平拆分</strong>与<strong>读写分离</strong>的区别是，读写分离解决的是读压力大的问题，对于数据库量大或者更新量的情况并不起作用。</p>
<p><strong>数据水平拆分与数据垂直拆分</strong>的区别是，垂直拆分是把不同的表拆分到不同的数据库中，而水平拆分是把一个表拆到不同的数据库中。</p>
<p>例如，经过垂直拆分后，用户表与交易表、商品表不在一个数据库中了，如果数据量或者更新量太大，我们可以进一步把用户表拆分到两个数据库中，他们拥有结构一模一样的用户表，而且每个库中的用户表都只涵盖了一部分的用户，两个数据库的用户合在一起就相当于没有拆分之前的用户表。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/29829023-file_1495358662307_17eca.png" alt=""></p>
<h4 id="水平拆分给业务应用带来的影响"><a href="#水平拆分给业务应用带来的影响" class="headerlink" title="水平拆分给业务应用带来的影响"></a>水平拆分给业务应用带来的影响</h4><ol>
<li>访问用户信息的应用系统应该解决SQL路由的问题，因为现在用户信息分在两个数据库中，需要在进行数据库操作时了解需要操作的数据在哪里。</li>
<li>主键的处理也会变得不同。原来依赖单个数据库的一些机制需要变化。例如原来使用MYSQL表上的自增字段，现在不能简单地继续使用了，并且在不同的数据库中也不能直接使用一些数据库的限制来保证主键不重复。</li>
<li>由于同一个业务的数据被拆分到了不同的数据库中，因此一些查询需要从两个数据库中取数据，如果数据量太大而需要分页，就比较难处理了。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>大型网站与Java中间件实践 by 曾宪杰</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[应用服务器变为集群后的Session问题]]></title>
      <url>http://jianwl.com/2017/05/21/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E4%B8%BA%E9%9B%86%E7%BE%A4%E5%90%8E%E7%9A%84Session%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="什么是session"><a href="#什么是session" class="headerlink" title="什么是session"></a>什么是session</h3><p>用户使用网站的服务，基本上需要浏览器与Web服务器的多次交互，HTTP协议本身是无状态的，需要基于HTTP协议支持会话状态(Session State)机制。而这样的机制应该可以使Web服务器从多次单独的HTTP请求中看到”会话”，也就是知道哪些请求是来自哪个会话。具体实现方式为：在会话开始时，分配一个唯一的会话标识(SessionId),通过Cookie把这个标识告诉浏览器，以后每次请求的时候，浏览器都会带上这个会话标识来告诉Web服务器请求是属于哪个会话的。在Web服务器上，各个会话有独立的存储，保存不同会话的信息。如果遇到禁用Cookie的情况，一般的做法就是把这个会话标识放到URL的参数中。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/73320721-file_1495340830067_51c1.png" alt=""></p>
<p>当我们的应用服务器从一台变成两台后，我们会遇到Session的问题，具体是指什么问题？</p>
<p>当一个带有会话标识的HTTP请求到了Web服务器后，需要在HTTP请求的处理过程中找到对应的会话数据(Session)。而问题就在于，会话数据是需要保存在单机上的。如果我第一次访问网站时请求到了A服务器，那么我的Session就创建在A服务器上，如果我们不做处理，就不能保证接下来的请求每次都落在A服务器上了，这就是Session问题。以下提供几种解决方案。</p>
<h3 id="1-Session-Sticky"><a href="#1-Session-Sticky" class="headerlink" title="1. Session Sticky"></a>1. Session Sticky</h3><p>在单机的情况下，会话保存在单机上，请求也都是由这个机器处理，所以不会有问题。Web服务器变成多台后，如果保证同一个会话的请求都在同一个Web服务器上处理，那么对这个会话的个体来说，与之前的单机情况是一样的。</p>
<p>如果要做到这样，就需要负责均衡器能够根据每次请求的会话标识来进行请求转发，如图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/57581734-file_1495341619642_c22b.png" alt=""></p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>如果有一台Web服务器宕机或者重启，那么这台机器上的会话数据会丢失。<strong>如会话中有登录状态的数据，那么用户就要重新登录了。</strong></li>
<li>会话标识是应用层的信息，那么负载均衡要将同一个会话的请求保存到一个Web服务器上的话，就需要进行应用层(第7层)的解析，这个开销比传输层(第四层)的交换要大。</li>
<li>负载均衡器变为一个有状态的节点，要将会话保存到Web服务器的映射。和无状态的节点相比，内存消耗会更大，容灾方面会更麻烦。</li>
</ol>
<p>这种方式我们成为Session Sticky。打个比方来说，如果说Web服务器是我们每次吃饭的饭店，会话数据就是我们吃饭用的碗筷。要保证每次吃饭都用自己的碗筷的话，我就餐具存在某一家，并且每次都去这家店吃，是个不错的主要。</p>
<h3 id="2-Session-Replication"><a href="#2-Session-Replication" class="headerlink" title="2. Session Replication"></a>2. Session Replication</h3><p>在Session Replication 方式中，不再要求负载均衡器来保存同一个会话的多次请求必须到同一个Web浏览器上了。而我们的Web服务器之间则增加了会话数据的同步。通过同步就保证了不同Web服务器之间的Session数据的一致。就如同每家饭店都有我的碗筷，我就能随便选择去哪家吃饭了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/38549929-file_1495343662631_181a9.png" alt=""></p>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>同步Session数据造成了网络带宽的开销，只要Session数据有变化，就需要将数据同步到所有其他机器上，机器数越多，同步带来的网络带宽开销就越大。</li>
<li>每台Web服务器都需要保存所有的Session数据，如果整个集群的Session数很多(很多人在同时访问网站)的话，每台机器用于保存Session数据的内容占用会很严重。</li>
</ol>
<p>这个方案<strong>不适合集群机器数很多</strong>的场景，如果只有几台机器，用这个方案是可以的。</p>
<h3 id="3-Session数据集中存储"><a href="#3-Session数据集中存储" class="headerlink" title="3. Session数据集中存储"></a>3. Session数据集中存储</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/2688929-file_1495344473634_f8d1.png" alt=""></p>
<p>不论哪台Web服务器，也不论修改的是哪个Session数据，最终的修改都发生在这个集中存储的地方，而Web服务器使用Session时，也是从这个集中存储Sesson数据的地方读取。这样的方式保证了不同服务器上读到的Session数据都是一样的，而存储Session数据的具体方式，可以使用数据库，也可以使用其他分布式存储系统。这个方案解决了Session Replication方案中内存的问题，而对于网络带宽，这个方案也比Session Replication更好。</p>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>读写Session数据引入了网络操作，这相对于本机的数据读取来说，问题就在于存在时延和不稳定性，不过我们的通信基本都是发生在内网，问题不大。</li>
<li>如果集中存储Session机制或者集群出现问题，会影响应用。</li>
</ol>
<p>当Web服务器数据量比较大，Session数比较多的时候，这个集中存储方案的优势非常明显。</p>
<h3 id="4-Cookie-Based"><a href="#4-Cookie-Based" class="headerlink" title="4. Cookie Based"></a>4. Cookie Based</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/66593639-file_1495345259153_114b5.png" alt=""></p>
<p>相对于前面的方案，这个方案不会依赖外部的一个存储系统，也不存在从外部系统获取，写入Session数据的网络时延，不稳定性了。但这个方案依然有不足。</p>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>Cookie长度的限制，我们知道Cookie是有长度限制的，而这也会限制Session数据的长度。</li>
<li>安全性。Session数据本来都是服务器数据，而这个方案是让这些服务器数据到了外部网络及客户端，因此存在<strong>安全性上</strong>的问题。我们可以对写入Cookie的Session数据做加密，不过对于安全来说，物理上不能接触才是安全的。</li>
<li>带宽消耗，这里指的不是内部Web服务器之间的带宽消耗，而是我们数据中心的整体外部带宽的消耗。</li>
<li>性能影响，每次HTTP请求和响应都带有Session数据，对Web服务器来说，在同样的处理情况下，响应的结果输出越少，支持的并发请求就会越多。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>大型网站系统与Java中间件实践 by 曾宪杰</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统的基础知识]]></title>
      <url>http://jianwl.com/2017/05/21/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="1-用户访问网站"><a href="#1-用户访问网站" class="headerlink" title="1. 用户访问网站"></a>1. 用户访问网站</h3><h4 id="1）-用户访问单台服务器的场景"><a href="#1）-用户访问单台服务器的场景" class="headerlink" title="1） 用户访问单台服务器的场景"></a>1） 用户访问单台服务器的场景</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/35909323-file_1495331531540_101c3.png" alt=""></p>
<p>随着压力增大，我们需要变为多台服务器，例如从一台变为两台。两台服务器一起完成工作，这里面就有一个问题，用户应该去访问哪个服务器呢？</p>
<h4 id="2）用户访问集群服务器的场景-一"><a href="#2）用户访问集群服务器的场景-一" class="headerlink" title="2）用户访问集群服务器的场景(一)"></a>2）用户访问集群服务器的场景(一)</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/34398153-file_1495331435274_126a5.png" alt=""></p>
<p>通过DNS服务器进行调度和控制，在用户解析DNS的时候，就会被给予一个服务器的地址，中间没有代理设备，用户能直接知道提供服务的服务器地址。</p>
<h4 id="3）用户访问集群服务器的场景-二"><a href="#3）用户访问集群服务器的场景-二" class="headerlink" title="3）用户访问集群服务器的场景(二)"></a>3）用户访问集群服务器的场景(二)</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/54140669-file_1495331354090_1306.png" alt=""></p>
<p>在用户和网站服务器中间增加了负载均衡设备（纯硬件或者LVS等软件都可以）。DNS返回的永远是负载均衡的地址，而用户的访问都是通过负载均衡达到后面的网站服务器的。</p>
<h3 id="2-日志的处理"><a href="#2-日志的处理" class="headerlink" title="2. 日志的处理"></a>2. 日志的处理</h3><h4 id="1）单日志处理器"><a href="#1）单日志处理器" class="headerlink" title="1）单日志处理器"></a>1）单日志处理器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/11945650-file_1495332619288_15a0c.png" alt=""></p>
<p>用一台日志处理器从3台服务器上收集日志并处理，随着应用服务器的增多，单台日志处理服务器一定会遇到问题，那么，我们可以通过增加日志处理服务器的数量来提升处理日志的能力。</p>
<h4 id="2-使用Master控制日志处理服务器集群"><a href="#2-使用Master控制日志处理服务器集群" class="headerlink" title="2) 使用Master控制日志处理服务器集群"></a>2) 使用Master控制日志处理服务器集群</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-21/641019-file_1495333108869_a18.png" alt=""></p>
<p>使用Master + Worker方式的控制器来处理日志</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>大型网站系统与Java中间件实践 by 曾宪杰</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在工作的前三年里快速成长]]></title>
      <url>http://jianwl.com/2017/05/17/%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%89%8D%E4%B8%89%E5%B9%B4%E9%87%8C%E5%BF%AB%E9%80%9F%E6%88%90%E9%95%BF/</url>
      <content type="html"><![CDATA[<p>有人可以靠中彩票，然后一夜暴富；有人随随便便发几张自拍，就一不小心一夜成名。可技术成长，要一步一个脚印地练习，才能掌握某项特定技术。等到我们掌握了学习的技巧，才能用更短的时间，来掌握某项特定的技术。</p>
<p>而练习也不是<strong>一天里写一万行代码</strong>，也不是<strong>重复写一百行代码</strong>，而是在<strong>一百天里，每天写下一百行代码。</strong>它需要一定的技巧，不懈的坚持，还有一些休息。因此在这篇文章里，我将分享几年里的练习技巧：</p>
<ul>
<li>基础篇：正确的练习姿势，从程序员的基本技能：盲打，到练习使用快捷键、重构技能等，再到如何使用新的框架练习。</li>
<li>进阶篇：如何通过练习提高。初学时，我们可以使用Vue、React去高仿一些项目；有经验以后，高仿应用只会让我们更累。我们便需要一些更高级的技巧，从引入别的框架思想，到造各式各样的轮子。</li>
<li>找到合适的时间练习，早上，慢慢进入状态；中午，适合做一些Review；碎片时间，可以做一些知识的管理等等。</li>
<li>怎样才能持之以恒下去，分享一些特定目标的技巧，及激励自己的方式。</li>
</ul>
<p>当然，练习有一个大前提是：<strong>我们有充足的时间。</strong>时间是一种很珍惜的资源，特别是对于长期加班的开发人员来说。因为<strong>技术能力不足导致的加班，</strong>会变成恶性循环。</p>
<p>如果你还没工作，那么便相当的幸运，你有相当多的时间。工作的时候，大家都忙于实现业务时候，没有时间让你提升自己，如果你已经工作了，那么你需要每天预留一些时间，才有机会联系。每天会占用一些游戏、看电视时间，哪怕只是半个小时、一周、一个月、一年下来，帮助就很大了。</p>
<p>进行这些练习之前，请不要忘了根本 – <strong>能熟练地用框架、语言完成工作。</strong>完成工作，相当于必须达到的60分及格要求，在胜任工作之外，提高能力到80、90分，追求更好的技术能力，才是正确的路线。</p>
<p>下面，让我们开始第一部分的内容吧。</p>
<h3 id="基础篇：正确的练习姿势"><a href="#基础篇：正确的练习姿势" class="headerlink" title="基础篇：正确的练习姿势"></a>基础篇：正确的练习姿势</h3><p>编程的时候，我们只是在码字 – 编程的过程(即思路)实际上是在脑子里完成的，娴熟的码字能力，可以帮助我们更好地编程。</p>
<p>小学时，自参加了五笔打字比赛后，便开启了我的编程生涯。可当工作的时候，已经可以熟练的完成工作的我，仍然无法打对每一个字符。有一天，看到了一个名为Typing的在线打字练习工具，练习了一次之后，发现它会给出一些建议，便开始进行了一些编码练习。但是得到的反馈能表名，在打字这方面，仍然有一些提升的空间：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-17/57142401-file_1495025245549_10d78.png" alt=""></p>
<p>我的“自我解释”是：<strong>今天的编程语言设计得不合理</strong> – 使用了各种字符，导致了右手在这方面的负担比较大。在那之后，我便陆续进行了一些基础的练习，并整理他们的因果关系，便有了下面的一些练习项目：</p>
<ul>
<li>作为经常用电脑的人，应当掌握好打字的基本技巧，比如说采用正确的打字姿势，以及盲打技能。</li>
<li>作为一个程序员，应当精通使用手上各式IDE，编辑器，熟练使用它们的快捷键</li>
<li>作为一个专业的程序员，我们还要将重构代码，命名等高级的技巧掌握好。</li>
</ul>
<p>这些练习，可以让我们成长为一个更专业的程序员。</p>
<h4 id="语言与框架的练习"><a href="#语言与框架的练习" class="headerlink" title="语言与框架的练习"></a>语言与框架的练习</h4><p>对于语言与框架的练习，算是比较简单的，于我而言，这种练习过程便是：</p>
<ol>
<li>买本相关书籍，或者寻找份教程、官方指南。</li>
<li>再找个合适的Demo，熟悉基础概念，并掌握好相关基础。</li>
<li>在Demo的基础上，实现一些业务功能，了解各种功能、特性。</li>
<li>查看官方文档，查有没有漏掉了什么重要的东西。</li>
<li>写博客、日志来记录这个过程。</li>
</ol>
<p>因此，只需要找一个合适的网站、APP作为模仿的对象，一步步往下练习即可。唯一的难点在于，第一次写Web应用的时候，可能会花费更多的时间，新手期的程序员，对很多的概念都不清楚，如若能找到一个新手社区、群体，提高起来就会方便多了。</p>
<p>熟练使用语言或者框架，不能帮助我们成为一个「优秀」的成员。只能带领我们成为一个“胜任”的程序员，即我们可以凭借着这种练习，找到一份养家糊口的工作。</p>
<h4 id="模仿开源软件"><a href="#模仿开源软件" class="headerlink" title="模仿开源软件"></a>模仿开源软件</h4><p>工作的时候，写的都是业务代码，纯技术的实践并不多，这意味着，<strong>多年的工作经验，与技术能力的关系并无太大关联</strong>。如果有一天，我们看到几年前写的代码和今天写的代码并没有太大的区别，那么说明了：我们已经陷入了这样的一个瓶颈。</p>
<p>在学校写的代码，与工作写的代码，最大的区别在于：<strong>软件工程实践</strong>。单单凭借工作经验，那么在软件工程实践的提高可能不会太大。受限于上线deadline的影响，多数项目的软件工程实践，并不能做到最好，甚至可能很差劲。如我们所见，国内的大部分公司(包括BAT)在这方面的实践也很难做全。这些实践包括：</p>
<ul>
<li>使用版本管理，诸如Github上的项目采用的Git，基本已经普及；</li>
<li>使用持续集成，它可以为团队协作，提供一个可靠的帮助。</li>
<li>完整的测试用例，编写单元测试、功能测试等待</li>
<li>代码检视，用于提高整个项目的质量</li>
</ul>
<p>而对于一个优秀的开源软件来说，为了保证好项目的质量，拥有者往往付出了很多的精力，在提高软件工程的实践上，因此，对于软件工程来说，最好的练习，便是模仿开源软件，并自己去创造一些轮子。以React为例，其在首页拥有下面的几个徽章(bage):</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-17/36438562-file_1495026815302_19d9.png" alt=""></p>
<p>分别是：</p>
<ol>
<li>Circle CI,即持续集成、诸如测试是否都通过、部署是否成功等。</li>
<li>Travis CI，同上。</li>
<li>Coverage，代码的测试覆盖率，81%</li>
<li>npm, 当前版本号</li>
<li>PRs welcome,即欢迎来Pull Request</li>
</ol>
<p>那么，我们在实践的时候，就可以模仿这样的项目组成，一步步往下实践：</p>
<ol>
<li>为项目添加测试框架、如Java里的Junit，Node.js里的Mocha等</li>
<li>添加自动化测试脚本，如Java里的Gradle，Node.js里的Grunt、Gulp、NPM等</li>
<li>添加测试覆盖率工具</li>
<li>添加持续集成，如Travi CI或者Circle CI</li>
<li>添加代码质量分析工具，如Code Climate</li>
<li>指定目标，并完成。</li>
</ol>
<p>最难的实际上是最后一步，指定一个目标并实现。它可以是测试覆盖率要达到90%以上，这就需要一步步来完成，如先将目标放到60%，再慢慢地网上提升，知道90%，甚至100%，在这个过程中，会不断地原道一些挑战，如<strong>难以测试的代码，为了编写测试而修改功能代码等。</strong>但是，它能确确实实地帮助我们提高工程能力。</p>
<h4 id="基础练习：从码字到盲打"><a href="#基础练习：从码字到盲打" class="headerlink" title="基础练习：从码字到盲打"></a>基础练习：从码字到盲打</h4><p>编码的时候，如果我们心里想输入的是一个print，结果打下的字符是oront，那么我们就需要删了重来，又或者是小心翼翼地，边看键盘边输入一个个字符。虽说，编码只是一个打字的过程，但是很多时候，经常出现的错字会中断我们的思路。因此，盲打应该成为程序员的基本技能，而这里的盲打，指的并不是我们可以闭上眼睛打字聊天，而是可以完成编码工作，即能盲打下26个字母，以及各种字符，还有各种功能键。</p>
<p>而在进行这一类练习的时候，<strong>我们经常会遇到一个障碍：度量</strong>。即以某种方式来衡量练习的成果，我们做了很多的练习来提高自己，但是没有数据来支撑。它不像编码，我们写了几行代码，完成了一个功能，那么写下的这些代码的价值就是可以衡量的。因而练习的时候，我们可以寻找一些适合的工具，如Typing.io，Keybr.com这一类工具，如果Typing使用的是真实的代码片段，它能帮我们发现真实场景下：我们容易打错哪些字，容易按错哪些键，我们打字的速度是多少等等的内容。</p>
<p>对于<strong>可以衡量</strong>的打字速度，我们可以定下每天十几分钟的时间，一段时间要提升到什么水平的目标，这样它变能满足<strong>SMART原则</strong>，就能让我们看到我们在这段时间内的提升。</p>
<p>当时，我拿Typing练习的时候，差不多练习了一个月，每天大概半小时左右，因为打字速度比较快，所以容易出错，所以便将注意力放在减少错误上，而对于有些人来说，则是相反的，即打字速度比较慢，但是准确率比较高，而这个练习的主要目的是，能够熟练地做到盲打，不让它影响我们的效率。</p>
<p>掌握了熟练开关机、键盘上的各种按键后，我们就在使用工具上做一个效率的提升。</p>
<h4 id="基础练习：掌握开发工具"><a href="#基础练习：掌握开发工具" class="headerlink" title="基础练习：掌握开发工具"></a>基础练习：掌握开发工具</h4><p>刚工作的时候，发现每个有经验的程序员，几乎可以不用鼠标编程。熟练的使用各种快捷键，进行代码重构、打开新页面、开启新窗口等操作。慢慢的，我觉得自己再这方面上有相当大的提升空间。</p>
<p>这意味着，我要学习、探索开发工具的功能，也要能使用快捷键来控制。尽管在日常结对编程、代码检视、交流的时候，可以请从别人身上学习，但是理想的方式，还是自己去练习。</p>
<p>对于大部分的开发工具，他们都有对应的手册，Keymap或者cheatsheet,即”作弊表”。</p>
<p>需要注意的是：对于开发工具而言，没有必要掌握所有的快捷键，而是只掌握常用的功能，我曾陷入了一个误区，练习使用快捷键的时候，边练习一些重构的技巧，同时也花费时间在联系一些「屠龙之术」上 – 一些非常少用的功能，除了炫耀，也没有什么用，时间一久，我便忘了很多的快捷键。再举些例子：如Vim、对我而言，一般用于服务器维护及Git修改。因此，主要使用的功能辨识：快速地改几个字符，更新配置，保存并退出。如Chrome浏览器，在日常使用时，配合下Vim插件，便不需要鼠标，在进行前端开发的时候，便需要使用鼠标来调试。</p>
<p>对于大部分的工具来说，我们只需要一个CheatSheet，复杂的工具，如Vim,Emacs，则需要一本更专业的数。他们是高度可定制的，这也意味着我们需要一步步的定制这些工具，寻找合适的插件，自定义快捷键，又或者是使用别人的配置。而要衡量快捷键使用方面的提升，目前还没有看到有效的度量工具。如果有的话，那么就是编码的时候，使用鼠标的频率，因此，在某些特定的时候，可以通过禁用鼠标来提升自己在这方面的能力。</p>
<h3 id="进阶篇：如何通过练习来提高"><a href="#进阶篇：如何通过练习来提高" class="headerlink" title="进阶篇：如何通过练习来提高"></a>进阶篇：如何通过练习来提高</h3><p>尽管我在上面指出，学习新框架的最好姿势是：基于现有的业务来学习，即从工作中学习，从做中学。但是，如果一直<strong>只使用</strong>新的框架来重写旧的业务，那么你的成长就会趋于0.第一次，使用新框架时收获可能颇丰；第二次，收获的东西就更少了；第三次，你可能就学不到东西。</p>
<p>因此，在业余的练习时间里，不要一直练习新的框架，不要再拿Vue、ReactNative去高仿一些应用。<strong>当且仅当，你所处的项目正在使用新的框架，</strong>这种练习才是有意义的。</p>
<p>经过上面的练习，我们提高了我们的工作效率。同时，在别人的眼里，我们更像是一个专业的程序员，在这之上，我们还需要提高顶层的能力。下面介绍的是，我尝试过的一些，比较有效果的提升方法：</p>
<ul>
<li>阅读开源软件与重构代码</li>
<li>造自己的轮子来重写应用</li>
<li>结合设计模式</li>
<li>引入其他领域的思想</li>
</ul>
<p>总的来说，收获还是蛮多的，特别是造轮子，能有更大的提升。与其他的练习稍有不同的是，因为设计到代码设计，这里的练习有些难以衡量。这时候，我们应该是保持着<strong>练习的心态</strong>，并意识到我们是做这方面的练习。</p>
<h4 id="阅读开源软件与重构代码"><a href="#阅读开源软件与重构代码" class="headerlink" title="阅读开源软件与重构代码"></a>阅读开源软件与重构代码</h4><p>如果在工作环境中，没有代码写的比较好的人，那么我们就只能从开源代码中去学习。笔者之前写过一篇「如何以“正确的姿势”阅读开源软件代码」的文章，文中我建议的阅读开源软件代码的方式是：</p>
<ul>
<li>clone某个项目的代码到本地</li>
<li>查看这个项目的release列表</li>
<li>找到一个看得懂的release版本，如1.0或者更早的版本。</li>
<li>读懂上一个版本的代码</li>
<li>向后阅读大版本的源码</li>
<li>读最新的源码</li>
</ul>
<p>可只读这些代码，不能让我们显著的提高水平，我们应该结合「重构」这个技能来练习。从我的练习经验来看，<strong>对于重构的练习是最有意思的</strong>我们可以见证，一段不好的代码在我们的调教之下，焕发出新的光彩。当我们重构一段坏味道的代码，对比重构前后的代码，便会发现自己竟然有这样的神奇的能力。</p>
<p>如果找不到合适的练习项目，可以到Github上找一些star多，但是没有测试，缺少CI等的项目练习，这样的项目在Github上也是蛮多的。</p>
<p>有一次，我在寻找一个迷你的Markdown解析器，看到Github上有一个精巧的实现。它有100+的star，但是没有测试，四百行的代码里，有一个方法有三百多行等等的坏味道。于是，便花了几天的时间，边思考便重构这个项目，这样对编码的提升比较大，因为工作的时候，完成任务是第一优先级，然后才是质量。因此，对于我们联系来说，我们只需要：</p>
<ul>
<li>找到一个不错的开源库</li>
<li>阅读其中的代码</li>
<li>找到代码中设计不好的地方</li>
<li>对<strong>自己认为设计</strong>得不好的代码重构</li>
<li>结合「重构」一书，来改进设计。</li>
</ul>
<p>要注意的是：不同的人对于代码设计，有着不同的关店，因此，在这时如果只是因为代码的设计不好，而不是代码里有各种坏味道(code smell)，那么，就不应该去给别人的代码提Pull Request。</p>
<h4 id="造自己的轮子来重写应用"><a href="#造自己的轮子来重写应用" class="headerlink" title="造自己的轮子来重写应用"></a>造自己的轮子来重写应用</h4><p>与阅读代码、重构相比，造一个自己轮子，来实现同样的功能，便是一个更不错的选择。在Web开发领域，大部分的开发框架本身都是「通用型」的框架。即它拥有相当多的功能，其中有很多的功能都不会用到。如你使用JQuery的时候，你可能只会使用到其中的Ajax、Event功能，那么你就可以写一个新的框架，兼容这两个接口。</p>
<p>练习时间充裕的时候，便可以自己动手去做一个。上面说到的阅读框架代码，是一种好的方法。除此无论是前端还是后端，我们都可以找到从零创建框架的资料，来帮助我们理解框架的组成。</p>
<p>通过阅读诸如Python里的Flask、Ruby里的Sinatra等轻量级的框架，我们就能理解一个框架所需要的元素，并模仿他们做出一个新的系统。这些框架的关注点是：处理HTTP请求的CGI、与数据库的交互的ORM、控制逻辑的Controller层，返回HTML的View层等等，除了相关的框架，我们还能再Github上看到很多人模仿这些框架。做一个这样的后台框架，搭建自己的博客，那就能理解好这一些列的逻辑了。</p>
<p>对于前端来说，也是类似，诸如Building React From Scratch,可以让我们在250行理解React的原理，并做出一个类似的框架，除了MVC，还有模块化设计、数据请求等等的内容。在两三年前，「JavaScript框架设计」就是这方面一个不错的选择。</p>
<p>我曾经造过一个名为 Lettuce 的前端框架，它的主要目的就是用于：学习前端框架的设计，便在自己的多个业余项目上使用这个框架。而在前端领域，定制自己的 UI 框架、CSS 框架也是一个很不错的选择。再用到自己的博客上，再写上「自豪地采用xx框架」，岂不是更加的自豪？</p>
<p>在底层领域，又有各式各样的《自制操作系统》、《自制编程语言》、《自己动手设计物联网》等等的书籍，它们都能让我们从底层理解一个系统的组成。除此，还有各种各样的剖析类书籍，可以让我们理解底层机制的同时，也能让我们制作出一个框架。最后，我们只需要能不改写或少数改写代码，将我们的应用运行在上面，便是成功的一个仿造的轮子了。</p>
<h4 id="结合设计模式"><a href="#结合设计模式" class="headerlink" title="结合设计模式"></a>结合设计模式</h4><p>设计模式，不同的人有不同的看法。在我看来，一个优秀的程序是要能「看懂」的。即不一定要精通，但要能识别出来，它是一种设计模式。当我们看到了一次又一次的相似设计时，应该猜想到，其背后应该是一种设计模式。如在前端开发框架中的「双向绑定」，它实际上就是发布-订阅模式，又或者称观察者模式的一种实现。</p>
<p>在笔者看来，模式就是一种高级的语言。当别人一说「工厂模式」，多数人瞬间就明白了，不犹得会发出：原来如此，这一类的感叹。认识了一些模式后，一遇到一些特定的场景，我们就能一下子套用这种模式。</p>
<p>可只凭借Gof的「设计模式」一书，又或者「Head First设计模式」、「重构与模式」等设计模式书籍，我们所学的知识便是有限的。我们要做的是：</p>
<ul>
<li>先熟悉书本上的示例代码，来对不同的设计模式有一个大的了解。</li>
<li>识别日常代码中的设计模式</li>
<li>练习这些设计模式，并掌握常见的设计模式</li>
<li>尝试在日常的代码中，套用设计模式。</li>
<li>重构现有的代码到设计模式</li>
</ul>
<p>要对设计模式进行练习，不是一件容易的事情，并且很多时候，容易模棱两可，即适合使用A模式，又适合使用B模式，这是因为我们是在为设计而设计，因此会尽可能的贴近现有情况。</p>
<h4 id="引入其他领域的思想"><a href="#引入其他领域的思想" class="headerlink" title="引入其他领域的思想"></a>引入其他领域的思想</h4><p>不同的领域里，都有自己领域的优秀思想。如我们熟知的设计模式，便是受建筑领域的「建筑的永恒之道」中描述的 253个 建筑模式的启发。又如今天流行的精益思想，最早是来自汽车制造业，可它对软件行来说，有着令人受益匪浅的启发。好的框架、软件是会相互学习，如 iPhone 与 Android，都在不断地借鉴——通知中心，但是又在那之上做一些改进。</p>
<p>又比如，今天的前端框架里，很多思想都是从后端“借鉴”过来的。如 Angular 中采用的依赖注入，便是深受 Java 语言的影响。近一点来说，Redux，框架最初是用在 React 上，但是它已经被推广到了 React 和 Vue.js 上。</p>
<p>因此，当我们发现一个新的优秀思想产生时，便可以尝试引入到自己的领域里。又或者我们所处的领域，正遇到一些难题，答案可能就在别的领域里。可在这方面的练习，往往都是一些创新性的练习。多数时候，我们的探索可能没有结果，但是它往往能对自己有更大的启发。</p>
<h4 id="找到合适的时间练习"><a href="#找到合适的时间练习" class="headerlink" title="找到合适的时间练习"></a>找到合适的时间练习</h4><p>每天能有半小时、一小时甚至更长时间的稳定练习，比三天打鱼两天晒网的效果要好得多。清理出一些固定的时间，用于为自己腾出时间来提高自己。既然，你都有时间到这篇文章，那么你应该属于能腾出时间的人。</p>
<p>如果不能的话，那么我们也可以尝试去挤出一些时间，如从上下班去寻找空间。即使是同一公司，不同的人都有不同的上下班时间，所花费在路上的时间也有所不同。有的人，需要在几环外坐个一个多小时的地铁，再转公交才能到公司；有的人，只需要出门左转，走个十分钟就到公司了。因为在路上花费的时间不同，也在一定程度上影响了学习、练习等等的时间。</p>
<p>因此，如果可能的话，应该减少花费在上班路上的时间，才能避免继续陷入这样一个恶性循环：<strong>租不起近的房子，花费大量的时间在路上，没有时间提升技能</strong>。</p>
<p>早上</p>
<p>早上的练习，是一种慢慢进入一天工作状态的感觉。一旦上班时间到来的时候，就已经进入工作姿态了——对于“资本家”来说，可谓好事一件。早晨刚醒来，总会想不起昨天项目做到哪一步，便更容易反思哪里做得有问题。</p>
<p>如笔者已经习惯了，每天七点起床、洗漱，随后写会代码，再去上班。有时候，可以有一个半小时的练习时间，有时候会有半个小时，将这些时间浪费在梦里总是有些可惜。同时，之前为了能成功地上公交，便提前半个小时到公司，写一些开源软件的代码。毕竟，作为一家非产品公司，你无法和别人解释说，我们做了些什么、取得了哪些成就。</p>
<p>在很多地方，这是一个很好的策略：<strong>错开高峰期上下班，路上就不容易堵车</strong>。所花在路上的时间就缩短了，那么我们就有时间来练习了。</p>
<p>需要注意的是：<strong>练习的时候不要关注时间，而是关注怎么于提高</strong>。关键点在于：让每天进步一点。</p>
<p>中午</p>
<p>吃完饭后，因为米饭血糖指数高的缘故，容易犯困。对于北方的同学来说，因为主食不是米饭，所以这就不算是一个问题了。这个时候，身体会妨碍我们进行一些练习。可如果你的午休时间比较长，那么也可以做一些练习，再去休息片刻。</p>
<p>碎片时间</p>
<p>对着屏幕写代码，时间一久，集中力就会开始涣散，便应该休息会儿。刷刷资讯、朋友圈，又或者收集各种资料，开放我们的视野。接收各种新的知识，来扩大自己的视野，以便于自己了解整个市场的水平。</p>
<p>常见的方式有：</p>
<ul>
<li>阅读个人博客、微信公众号</li>
<li>维护自己的Awesome列表 – 寻找自己觉得好的开源项目</li>
<li>IT新闻、技术文章聚合网站 – 我很不喜欢聚合网站，不部分的聚合站点的行为无异于文章抄袭。</li>
<li>Github Trending</li>
</ul>
<p>将这些内容存储到 Evernote、WunderList、OneNote 等各式各样的云笔记里，然后定期清理、定期清理、定期清理。收集只是一种方式——没有啥用的方式，因此建议先读完一遍，再去收藏这样的文章。多数时候，我们会发现自己收藏了很多的内容、买了很多的书，但是却没有时间去读。</p>
<p>晚上</p>
<p>经历了漫长的加班，回到住的地方，可能就会想休息了。如果白天没时间练习，晚上也不能抽出时间练习，长期以往，一年的工作经验就要变成五年来用了。</p>
<p>晚上练习的同时，我们应该注意：在睡觉前 30~60 分钟停止编码，否则上床的时候，脑子里可能还是这些代码，就容易失眠。万一灵感一来，那就还要爬起来继续写。这个时候，可以阅读一些相关或者无关的书籍、资料。在阅读的过程中，尽管我们已经不在思考内容。但是潜意识里还在思考中，这时就能很容易就会遇到一些灵感。</p>
<p>最后，休息的时候，尽情睡觉吧~。</p>
<h3 id="怎样才能持之以恒下去"><a href="#怎样才能持之以恒下去" class="headerlink" title="怎样才能持之以恒下去"></a>怎样才能持之以恒下去</h3><p>在上文里，我们只谈论一些方法和技巧，可是它们并没有什么用。每个人都知道所谓的「一万小时理论」，但是真正要坚持下来，并没有我们想象中的那么容易。</p>
<p>我们需要从娱乐时间里抽到一部分，原本舒适的玩游戏、睡觉、刷微博时间，现在要成为另外一种「痛苦」？可是，既然这些“无聊的事情”我们都能上瘾，那么我们是不是没有找到合适的路？</p>
<h4 id="设定目标与-SMART-原则"><a href="#设定目标与-SMART-原则" class="headerlink" title="设定目标与 SMART 原则"></a>设定目标与 SMART 原则</h4><p>按上文中的分法，练习可以分为：<strong>日常固定时间的练习</strong>，及针对某一特定主题的练习等多种类型。当我们开始练习某一个具体的技术、框架、模式时，最好能制定一个简单的练习计划，如每几天练习某一内容、多少天内用某一个框架实现什么功能。</p>
<p>先设计<strong>一个小的目标，并且能在短期实现</strong>。当发现自己可以轻松地坚持下来时，再慢慢的扩大目标，直至我们能做得更好。可是，设定一个练习目标也不是一件简单的事，它也有很多考量的地方。</p>
<p>毕业的时候，在公司接受了针对于毕业生的培训，期间学习到了一个用于制定任务、目标的 SMART 原则：</p>
<ul>
<li>具体的（Specific）。即我们要有一个明确的目标，如在一周内用 Django 写一个博客系统，而不是用 Django 写个东西。</li>
<li>可度量的（Measurable）。即衡量是否达成目标，我们只需要能创建、查看、删除博客，那么我们就算完成了这样的任务。它可以用来不断地突破自己。</li>
<li>可实现性（Attainable）。即这个目标一定是可以实现的，不能实现的目标没有啥意义。与些同时，练习初期定下的目标不能困难。</li>
<li>相关性（Relevant）。即目标与其他目标的关联情况，如我们练习 Django 是为了提高 Django 或者后台的技能。如果我们的大目标是提高前端技能，那么这个目标对于当前的意义并不是太大。</li>
<li>时限（Time-based）。即时间限制，如上面提到的一周内用 Django 写一个博客系统的期限。</li>
</ul>
<p>经常能在微信朋友圈看到，朋友的 100 天英语阅读计划，这样的目标就是合理的——可实现的、具体的、有时间限制、可度量的。</p>
<p>如果我们想每天固定时间进行练习，那么我们应该做一个短暂的尝试，如七天，再慢慢的不断扩大时间目标，二十一天、两个月，随后再扩大到一个更大的目标。</p>
<h4 id="坚持与激励自己"><a href="#坚持与激励自己" class="headerlink" title="坚持与激励自己"></a>坚持与激励自己</h4><p>我们可以使用 GitHub 上的 Contributions 来激励自己，每一天的痕迹都很明显，甚至于可以拉拢一些小伙伴，与我们一起参加类似的活动。GitHub 本身具有社交属性，可以让我们看到别人做了什么，做了多久。</p>
<p>由于 GitHub 的服务器在国外，访问的时候可能会受限于网络。国内的开源中国的码云和Coding 也有类似的活跃度，建议访问 GitHub 有问题的读者，可以使用这些服务。</p>
<p>上文中提到的朋友圈 100 天英语阅读计划，也是相似的，它可以让别人监督你是否完成<br>——前提是，有人一起和你做相同的事，<strong>因此可以找个人和你一起练习，相互监督。</strong></p>
<p>刚开始练习的时候，练习的内容基本上很充实。时间一长，可能就会陷入一些瓶颈：要么找不到合适的练习内容，要么觉得练习过于乏味。因此这个时候，可以切换不同类型的练习项目——如，做一些自己觉得有意思的小项目练习。又或者，当我们完成一个目标时，给自己一些奖励，以此来鼓舞自己。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>练习完之后，还有一种很好的提高方式，就是输出、总结。整理自己练习过程中学到的知识，将之与我们需要的技能做对比，我们就会发现：在哪些地方还需要提高。我们就能制作出下一次练习的目标，不断地反复，以些来提高自己。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-17/40653819-file_1495033238660_44f8.png" alt=""></p>
<p>经常做总结，除了看到自己提高的地方，还能让阅读文章的人，鼓励你更好的前进。那么，现在让我们创建一个项目，更新一次 README，开始练习吧！</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>在工作的前三年里快速成长 by Phodal</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux学习笔记(二)]]></title>
      <url>http://jianwl.com/2017/05/14/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-查询已启动的网络监听服务"><a href="#1-查询已启动的网络监听服务" class="headerlink" title="1. 查询已启动的网络监听服务"></a>1. 查询已启动的网络监听服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">netstat 参数解释：</div><div class="line"></div><div class="line">-t tcp协议</div><div class="line">-u udp协议</div><div class="line">-n numeric</div><div class="line">-l listen状态</div><div class="line">-p program</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/26146003-file_1494746273274_17eb1.png" alt=""></p>
<h4 id="2-查询系统中是否安装了某软件"><a href="#2-查询系统中是否安装了某软件" class="headerlink" title="2. 查询系统中是否安装了某软件"></a>2. 查询系统中是否安装了某软件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rpm 参数详解：</div><div class="line"></div><div class="line">-q query 查询操作</div><div class="line">-a all 所有软件</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/81383025-file_1494746859638_3b28.png" alt=""></p>
<h4 id="3-host检测主机名与IP的对应关系"><a href="#3-host检测主机名与IP的对应关系" class="headerlink" title="3. host检测主机名与IP的对应关系"></a>3. host检测主机名与IP的对应关系</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/15833663-file_1494748081467_e93c.png" alt=""></p>
<h4 id="4-telnet远程连接检测端口是否启动"><a href="#4-telnet远程连接检测端口是否启动" class="headerlink" title="4. telnet远程连接检测端口是否启动"></a>4. telnet远程连接检测端口是否启动</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/35985253-file_1494748318696_110f5.png" alt=""></p>
<h4 id="5-wget网页数据的获取"><a href="#5-wget网页数据的获取" class="headerlink" title="5. wget网页数据的获取"></a>5. wget网页数据的获取</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/75884486-file_1494748586137_7e4b.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>鸟哥的Linux私房菜 - 服务器架设篇</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之封装实战(一)]]></title>
      <url>http://jianwl.com/2017/05/14/JAVA%E4%B9%8B%E5%B0%81%E8%A3%85%E5%AE%9E%E6%88%98-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在看Spring框架的源码，发现一些好用的封装技巧，记录下来，以便模仿与提升。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-接口层"><a href="#1-接口层" class="headerlink" title="1. 接口层"></a>1. 接口层</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public interface MultiValueMap&lt;K,V&gt; extends Map&lt;K,List&lt;V&gt;&gt; &#123;</div><div class="line"></div><div class="line">    V getFirst(K key);</div><div class="line"></div><div class="line">    void add(K key, V value);</div><div class="line"></div><div class="line">    void addAll(K key,List&lt;V&gt; values);</div><div class="line"></div><div class="line">    void set(K key,V value);</div><div class="line"></div><div class="line">    void setAll(Map&lt;K,V&gt; values);</div><div class="line"></div><div class="line">    Map&lt;K,V&gt; toSingleValueMap();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获得技能：</p>
<ol>
<li>继承JAVA原生接口，实现新的接口；</li>
<li>K,V泛型的使用；</li>
</ol>
<h4 id="2-类实现接口"><a href="#2-类实现接口" class="headerlink" title="2. 类实现接口"></a>2. 类实现接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line">public class LinkedMutilValueMap&lt;K,V&gt; implements MultiValueMap&lt;K,V&gt;,Serializable,Cloneable &#123;</div><div class="line">    private static final long serialVersionUID = 3801124242820219131L;</div><div class="line"></div><div class="line">    private final Map&lt;K,List&lt;V&gt;&gt; targetMap;</div><div class="line"></div><div class="line">    public LinkedMutilValueMap() &#123;</div><div class="line">        targetMap = new LinkedHashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置初始化因子,可以减少扩容的次数; 大于inititalCapacity * 3/4扩容;</div><div class="line">     * @param inititalCapacity</div><div class="line">     */</div><div class="line">    public LinkedMutilValueMap(int inititalCapacity) &#123;</div><div class="line">        this.targetMap = new LinkedHashMap&lt;&gt;(inititalCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LinkedMutilValueMap(Map&lt;K,List&lt;V&gt;&gt; otherMap) &#123;</div><div class="line">        this.targetMap = new LinkedHashMap&lt;K, List&lt;V&gt;&gt;(otherMap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  深拷贝</div><div class="line">     */</div><div class="line">    public LinkedMutilValueMap&lt;K,V&gt; deepCopy()&#123;</div><div class="line">        LinkedMutilValueMap&lt;K,V&gt; copy = new LinkedMutilValueMap&lt;K,V&gt;(this.targetMap.size());</div><div class="line">        this.targetMap.entrySet().forEach(entry -&gt; copy.put(entry.getKey(),new LinkedList&lt;V&gt;(entry.getValue())));</div><div class="line"></div><div class="line">        return copy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  浅拷贝</div><div class="line">     */</div><div class="line">    public LinkedMutilValueMap&lt;K,V&gt; clone() &#123;</div><div class="line">        return new LinkedMutilValueMap&lt;K, V&gt;(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public V getFirst(K key) &#123;</div><div class="line">        List&lt;V&gt; values = this.targetMap.get(key);</div><div class="line">        return (values != null ? values.get(0) : null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * TODO 核心实现,后文会单独分析</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void add(K key, V value) &#123;</div><div class="line">        List&lt;V&gt; values = this.targetMap.computeIfAbsent(key, k -&gt; new LinkedList&lt;V&gt;());</div><div class="line">        values.add(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addAll(K key, List&lt;V&gt; values) &#123;</div><div class="line">        List&lt;V&gt; currentValues = this.targetMap.computeIfAbsent(key, k -&gt; new LinkedList&lt;V&gt;());</div><div class="line">        currentValues.addAll(values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void set(K key, V value) &#123;</div><div class="line">        List&lt;V&gt; values = new LinkedList&lt;V&gt;();</div><div class="line">        values.add(value);</div><div class="line">        this.targetMap.put(key,values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setAll(Map&lt;K, V&gt; values) &#123;</div><div class="line">        values.forEach(this::set);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Map&lt;K, V&gt; toSingleValueMap() &#123;</div><div class="line">        LinkedHashMap&lt;K,V&gt; singleValueMap = new LinkedHashMap&lt;K, V&gt;(this.targetMap.size());</div><div class="line">        this.targetMap.forEach((key,value) -&gt; singleValueMap.put(key,value.get(0)));</div><div class="line"></div><div class="line">        return singleValueMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int size() &#123;</div><div class="line">        return this.targetMap.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean isEmpty() &#123;</div><div class="line">        return this.targetMap.isEmpty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean containsKey(Object key) &#123;</div><div class="line">        return this.targetMap.containsKey(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean containsValue(Object value) &#123;</div><div class="line">        return this.targetMap.containsValue(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;V&gt; get(Object key) &#123;</div><div class="line">        return this.targetMap.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;V&gt; put(K key, List&lt;V&gt; value) &#123;</div><div class="line">        return this.targetMap.put(key,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;V&gt; remove(Object key) &#123;</div><div class="line">        return this.targetMap.remove(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void putAll(Map&lt;? extends K, ? extends List&lt;V&gt;&gt; m) &#123;</div><div class="line">        this.targetMap.putAll(m);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void clear() &#123;</div><div class="line">        this.targetMap.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Set&lt;K&gt; keySet() &#123;</div><div class="line">        return this.targetMap.keySet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Collection&lt;List&lt;V&gt;&gt; values() &#123;</div><div class="line">        return this.targetMap.values();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Set&lt;Entry&lt;K, List&lt;V&gt;&gt;&gt; entrySet() &#123;</div><div class="line">        return this.targetMap.entrySet();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获得技能：</p>
<ol>
<li>理解了<code>add</code>方法中的核心实现，掌握了<code>Function&lt;? super K, ? extends V&gt; mappingFunction</code>的使用；「后文会单独分析」</li>
<li>参数类型通配符<code>super</code>和<code>extends</code>的区别「后文会单独分析」</li>
</ol>
<h4 id="3-核心方法分析"><a href="#3-核心方法分析" class="headerlink" title="3. 核心方法分析"></a>3. 核心方法分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">default V computeIfAbsent(K key,Function&lt;? super K, ? extends V&gt; mappingFunction) &#123;</div><div class="line">    // Function不为空</div><div class="line">    Objects.requireNonNull(mappingFunction);</div><div class="line">    V v;</div><div class="line">    </div><div class="line">    // 获取的V为不空</div><div class="line">    if ((v = get(key)) == null) &#123;</div><div class="line">        V newValue;</div><div class="line">        </div><div class="line">        // mappingFunction.apply(key)传入key得到返回的结果newValue「k -&gt; newValue」</div><div class="line">        if ((newValue = mappingFunction.apply(key)) != null) &#123;</div><div class="line">            put(key, newValue);</div><div class="line">            return newValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/84542289-file_1494735361160_bd63.png" alt=""></p>
<p>没看源码时，我就纳闷，调用处的k并没有声明，代表的是什么呢？k代表的是入参，<code>new LinkedList&lt;V&gt;()</code>表示返回结果;类似于<code>JS</code>中的Function方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Function fn(key) &#123;</div><div class="line">	return newValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-参数类型通配符extends和super的区别？"><a href="#4-参数类型通配符extends和super的区别？" class="headerlink" title="4. 参数类型通配符extends和super的区别？"></a>4. 参数类型通配符extends和super的区别？</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-14/97813744-file_1494737325263_14806.png" alt=""></p>
<p>由上图可分析得出：</p>
<p><code>&lt;? extends Integer&gt;</code> 继承了<code>Integer</code>，输入的参数必须是Integer</p>
<p><code>&lt;? super Integer&gt;</code> 包含了<code>Integer</code>、<code>Number</code>、<code>Object</code>,输入的参数可以是任意类型</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://stackoverflow.com/questions/2827585/what-is-super-t-syntax" target="_blank" rel="external">What is &lt;? super T&gt; in stackoverflow</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用POI读取|创建Excel]]></title>
      <url>http://jianwl.com/2017/05/08/%E4%BD%BF%E7%94%A8POI%E8%AF%BB%E5%8F%96-%E5%88%9B%E5%BB%BAExcel/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>发现一个非常实用的工具，用于对EXCEL表的读取和创建。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1) 引入依赖"></a>1) 引入依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.13&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="2-POI读取EXCEL表"><a href="#2-POI读取EXCEL表" class="headerlink" title="2) POI读取EXCEL表"></a>2) POI读取EXCEL表</h4><p>Excel表内容</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/14799072-file_1494248541870_6645.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class POITest &#123;</div><div class="line"></div><div class="line">    public static void read() throws IOException, InvalidFormatException &#123;</div><div class="line">        InputStream inputStream = new FileInputStream(&quot;/Users/jianweilin/Desktop/bd_level.xlsx&quot;);</div><div class="line">        Workbook wb = WorkbookFactory.create(inputStream);</div><div class="line">        Sheet sheet = wb.getSheetAt(0);</div><div class="line">        sheet.forEach(row -&gt; &#123;</div><div class="line">            if(row.getRowNum() &lt;= 1) &#123;</div><div class="line">                System.out.println(&quot;skiped row nums =&gt; &quot; + row.getRowNum());</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            row.forEach(cell -&gt; System.out.print(cell.toString() + &quot; &quot;));</div><div class="line">            System.out.println();</div><div class="line">        &#125;);</div><div class="line">        inputStream.close();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) throws IOException, InvalidFormatException &#123;</div><div class="line">        read();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结果:</div><div class="line">// skiped row nums =&gt; 0</div><div class="line">// skiped row nums =&gt; 1</div><div class="line">// 1.0 413.0 411526199312042613 全职 杜辉 华北大区 北京城市站 到家+物流 BD专员 16-七月-2015 北京 物流BD 物流BDM 郑琦 </div><div class="line">// 2.0 542.0 220881199103101319 全职 刘洋 华北大区 北京城市站 到家+物流 BD专员 18-八月-2015 北京 物流BD 物流BDM 郑琦 </div><div class="line">// 3.0 1618.0 230605199102222623 全职 张莹 华北大区 北京城市站 到家+物流 BD专员 14-九月-2016 北京 物流BD 物流BDM 郑琦</div></pre></td></tr></table></figure>
<h4 id="3-POI创建EXCEL表"><a href="#3-POI创建EXCEL表" class="headerlink" title="3) POI创建EXCEL表"></a>3) POI创建EXCEL表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class POITest &#123;</div><div class="line">    public static void write() throws IOException &#123;</div><div class="line">        // 创建excel工作簿</div><div class="line">        Workbook wb = new HSSFWorkbook();</div><div class="line"></div><div class="line">        // 创建第一个sheet（页），命名为 new sheet</div><div class="line">        Sheet sheet = wb.createSheet(&quot;城市经理&quot;);</div><div class="line"></div><div class="line">        // Row(行) 和 Cell(方格) 都是从0开始计数的</div><div class="line">        Row row1 = sheet.createRow((short) 0);</div><div class="line">        row1.createCell(0).setCellValue(&quot;城市经理编号&quot;);</div><div class="line">        row1.createCell(1).setCellValue(&quot;城市经理名字&quot;);</div><div class="line">        row1.createCell(2).setCellValue(&quot;城市ID&quot;);</div><div class="line">        row1.createCell(3).setCellValue(&quot;城市名称&quot;);</div><div class="line"></div><div class="line">        Row row2 = sheet.createRow((short) 1);</div><div class="line">        row2.createCell(0).setCellValue(&quot;1703&quot;);</div><div class="line">        row2.createCell(1).setCellValue(&quot;王伟鹏&quot;);</div><div class="line">        row2.createCell(2).setCellValue(&quot;1&quot;);</div><div class="line">        row2.createCell(3).setCellValue(&quot;上海&quot;);</div><div class="line"></div><div class="line">        FileOutputStream fileOut = new FileOutputStream(&quot;/Users/jianweilin/Desktop/city_manager.xlsx&quot;);</div><div class="line"></div><div class="line">        // 把上面创建的工作簿输出到文件中</div><div class="line">        wb.write(fileOut);</div><div class="line"></div><div class="line">        //关闭输出流</div><div class="line">        fileOut.close();</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) throws IOException, InvalidFormatException &#123;</div><div class="line">        write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/54636878-file_1494248703221_9bc.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL数据库复制概论]]></title>
      <url>http://jianwl.com/2017/05/08/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E5%88%B6%E6%A6%82%E8%AE%BA/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>每当我们讨论一项(新的)领域技术的时候，最好的方式通常是首先抛出一些问题，这些问题大致分为三类：这项技术又是什么玩意(Waht)？这项技术为什么会存在？我们已经有那么多解决方案(Method)了，我们为什么要用它(Why?)如果这项技术那么好且我们正好有场景可以用到这项技术，且能使我们的系统得到很乐观的优化，那么我们怎么用呢(How)?大概已经有人觉得这些问题很熟悉，是的，这就是黄金法则提出的三个问题，对于每种新鲜事物我们首先基于这三个问题去了解，更有利于弄清楚事情的本职，端正态度去了解，而不是因为新，因为大家都说好，才要去了解。</p>
</blockquote>
<p>接下来，我们带着黄金法则提出的三个问题去看看<code>MYSQL</code>数据库复制这项领域技术，然后再结合实际应用扩展一些问题。</p>
<h3 id="1-WHAT"><a href="#1-WHAT" class="headerlink" title="1. WHAT?"></a>1. WHAT?</h3><p>MySQL复制使得一台MYSQL数据库服务器的数据被拷贝到其他一台或者多台数据库服务器，前者通常被叫做<code>Master</code>,后者通常被叫做<code>Slave</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/18470249-file_1494220292824_ca12.png" alt="MySQL复制示意图"></p>
<p>复制的结果是集群(Cluster)中的所有数据库服务器得到的数据理论上都是一样的，都是同一份数据，只是有多个copy。MYSQL默认内建的复制策略是异步的，基于不同的配置，<code>Slave</code>不一定要一直和<code>Master</code>保持连接不管的复制或等待复制，我们指定复制所有的数据库，一部分数据库、甚至是某个数据库的某部分的表。</p>
<p>MYSQL复制支持多种不同的复制策略，包括同步、半同步、异步和延迟策略等。</p>
<p>1) 同步策略：Master要等待所有Slave应答之后才会提交(MYSQL对DB操作的提交通常是先对操作事件进行二进制文件写入然后再进行提交)。</p>
<p>2) 半同步策略：Master等待至少一个Slave应答就可以提交。</p>
<p>3) 异步策略：Master不要等待Slave应答就可以提交</p>
<p>4) 延迟策略：Slave要至少落后Master指定的时间</p>
<p>MySQL复制同时支持多种不同的复制模式：</p>
<p>1）基于语句的复制，<code>Statement Based Replication(SBR)</code></p>
<p>2) 基于行的复制，<code>Row Based Replication(RBR)</code></p>
<p>3) 混合复制, <code>Mixed</code></p>
<h3 id="2-WHY"><a href="#2-WHY" class="headerlink" title="2. WHY?"></a>2. WHY?</h3><p>这个问题其实也就是MYSQL复制有什么好处，我们可以将复制的好处归结于下面几类：</p>
<p>1）性能方面：MYSQL复制是一种Scale-out方案，也即“水平扩展”，将原来的单点负载扩展到多台Slave机器中去，从而提高总体的服务性能。在这种方式下，所有的写操作，当然包括UPDATE操作，都要发生在Master机器上，读操作发生在一台或多台Slave机器上。这种模型可以在一定程度上提高总体的服务性能，Master服务器专注于写和更新操作，Slave服务器专注于读操作，我们同时可以通过增加Slave服务器的数量来提高服务的性能。</p>
<p>2）防腐化：由于数据被复制到了Slave，Slave可以暂停复制进程，进行数据备份，因此可以防止数据腐化。</p>
<p>3）故障恢复：同时多台Slave如果有一台Slave挂掉之后我们还可以从其他Slave读取，如果配置了主从切换的话，当Master挂掉之后我们还可以选择一台Slave作为Master继续提供写服务，这达达增加了应用的可靠性。</p>
<p>4) 数据分析：实时数据可以存储在Master，而数据分析可以从Slave读取，这样不会影响Master的性能。</p>
<h3 id="3-HOW"><a href="#3-HOW" class="headerlink" title="3. HOW?"></a>3. HOW?</h3><p>这里我们只介绍一下MYSQL的复制是如何工作的，至于配置，网上也有很多相关的介绍，读者具体应用的时候可以再去查询。我们拿最常用的基于二进制文件的复制来看看。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-8/7393799-file_1494252610091_1720a.png" alt=""></p>
<p>MYSQL的复制过程大概如下：首先，主库在每次准备提交事务完成数据更新操作之前都会将数据更新操作记录到二进制日志中，这些日志是以二进制的方式记录数据更改的事件，值得一提的是二进制日志中记录的顺序实际上是事务的提交顺序，而非SQL执行语句的顺序，在记录二进制日志之后，主库会告诉存储引擎事务可以提交了。</p>
<p>然后，备库会启动一个IO线程，之所以叫做IO线程时因为这个线程专门做IO相关的工作，包括和主库建立连接，然后在主库上启动一个特殊的二进制转储线程，这个转储线程会不断的读取二进制日志中的事件，发送给备课的IO线程，备库的IO线程会将事件记录到中继日志中。</p>
<p>备库会有一个叫做SQL的线程被开启，这个线程做的事情是读取中继日志中的DB操作事件在备库执行，从而实现数据更新。</p>
<p>总的来说，在发生复制的主库服务器和备份服务器中，一共有三个线程在工作。</p>
<p>上面我们已经大概了解的什么是复制？为什么要复制？如何复制？这三个问题了，接下来我们基于上面的介绍，提出一些实际应用可能会发生的问题来思考如何解决。</p>
<h3 id="4-问答环节"><a href="#4-问答环节" class="headerlink" title="4. 问答环节"></a>4. 问答环节</h3><h4 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h4><p>通过复制模型虽然读能力可以通过扩展slave机器来达到提高，而写能力却不能，如果写达到瓶颈我们应该怎么做呢？</p>
<p>答: 我们首先会得出结论，这种复制模型对于写少读多型应用是非常有优势的，其次，当遇到这种问题的时候我们可以对数据库进行分库操作，所谓分库，就是将业务相关性比较大的表放在同一个数据库中，例如之前数据库有A，B，C，D四张表，A表和B表关系比较大，而C表和D表关系比较大，这样我们把C表和D表分离出去成为一个单独的数据库，通过这种方式，我们可以将原有的单点写变成双点写或多点些，从而降低原有主库的写负载。</p>
<h4 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h4><p>因为复制是有延迟的，肯定会发生主库写了，但是从库还没有读到的情况，遇到这种情况怎么办？</p>
<p>答: MySQL支持不同的复制策略，基于不同的复制策略达到的效果也是不一样的，如果是异步复制，MySQL不能保证从库立马能够读到主库实时写入的数据，这个时候我们要权衡选择不同复制策略的利弊来进行取舍。所谓利弊，就是我们是否对从库的读有那么高的实时性要求，如果真的有，我们可以考虑使用同步复制策略，但是这种策略相比于异步复制策略会大大降低主库的响应时间和性能。我们是否可以在应用的设计层面去避开这个问题？</p>
<h4 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h4><p>复制的不同模式有什么优缺点？我们如何选择？</p>
<p>答：基于语句的复制实际上是把主库上执行的SQL在从库上重新执行一遍，这么做的好处是实现起来简单，当前也有缺点，比如我们SQL里面使用了NOW()，当同一条SQL在从库中执行的时候显然和在主库中执行的结果是不一样的，注入此类问题可以类推。其次问题就是这种复制必须是串行的，为了保证串行执行，就需要更多的锁。</p>
<p>基于行的复制的时候二进制日志中记录的实际上是数据本身，这样从库可以得到正确的数据，这种方式缺点很明显，数据必须要存储在二进制日志文件中，这无疑增加的二进制日志文件的大小，同时增加的IO线程的负载和网络带宽消耗。而相比于基于语句的复制还有一个优点就是基于行的复制无需重放查询，省去了很多性能消耗。</p>
<p>无论哪种复制模式都不是完美的，日志如何选择，这个问题可以在理解他们的优缺点之后进行权衡。</p>
<h4 id="问题4："><a href="#问题4：" class="headerlink" title="问题4："></a>问题4：</h4><p>复制的工作过程只有三个线程来完成，对于Master来说，写是并发的，也就出现了一个IO线程要把所有并发的数据变更事件记录，这个IO线程会不会累死？当一个Master对应多个Slave的时候，其实在Master中会唤起多个IO线程，这无疑会增加Master的资源开销，如果出现事件堆积，也就是事件太多，来不及及时发送出去怎么办？另外就是Slave那边的IO线程和SQL线程也会有对应主库并发数据变更事件，而Slave方单个线程处理的问题，这个时候Slave线程会不会累死？</p>
<p>答：上面的问题确实会发生，上面第一个问题和第二个问题其实是写负载的问题，当事件堆积太多，从库时延就会变大，Slave单SQL线程问题据说有参数可以开启并行操作，这个大家可以确认一下。</p>
<h4 id="问题5："><a href="#问题5：" class="headerlink" title="问题5："></a>问题5：</h4><p>针对复制工作过程可能会出现的问题，主库写完二进制日志文件同时都会保存二进制日志的偏移量，但是当断电的时候，二进制日志文件没有刷新到磁盘，主库重新启动之后，从库尝试读该偏移量的二进制日志，会出现读不到的情况，这个问题应该怎么解决？</p>
<p>首先如果开启了sync_binlog选项，对于innodb同时设置innodb_flush_log_at_trx_commot=1，则可以保证二进制日志文件会被写入磁盘，但MyISAM引擎可能会导致数据损坏。如果没有开启这个选项，则可以通过制定从库的二进制偏移量为下一个二进制日志文件的开头，但是不能解决事件丢失问题。</p>
<h4 id="问题6"><a href="#问题6" class="headerlink" title="问题6:"></a>问题6:</h4><p>从库在非计划的关闭或重启时，回去读master.info文件去找上次停止复制的位置，这同样会有一个问题，如果master.info不正确，就会导致复制数据不一致的情况，遇到这个问题怎么办？</p>
<p>答：这个问题可以通过两种方式解决，一是控制master.info在从库非计划关闭或重启的时候让master.info能够同步到磁盘，这样下次启动的时候就不会读取错误的信息，这有助于减少错误的发生概率。另外想要找到正确的复制位置是困难的，我们也可以选择忽略错误。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM之类加载机制]]></title>
      <url>http://jianwl.com/2017/05/06/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JVM的类加载机制是之前面试中被问到频率比较高的问题之一了，这一节我们来详细了解它的实现机制。</p>
<h3 id="1-JVM类加载"><a href="#1-JVM类加载" class="headerlink" title="1. JVM类加载"></a>1. JVM类加载</h3><p>JAVA虚拟机中类加载的全过程，也就是加载、验证、准备、解析和初始化这5个阶段，接下来将会详细介绍每个阶段所执行的具体动作。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/1958164-file_1494072982627_39b3.png" alt=""></p>
<h4 id="1）加载"><a href="#1）加载" class="headerlink" title="1）加载"></a>1）加载</h4><p>在加载阶段，虚拟机将会完成以下3件事情：</p>
<p>1）通过一个类的全限定名来获取定义此类的二进制字节流</p>
<p>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p>
<p>3) 在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>
<h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2) 验证"></a>2) 验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<p>验证阶段大致会完成下面4个阶段检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p>
<h5 id="2-1-文件格式验证"><a href="#2-1-文件格式验证" class="headerlink" title="2.1 文件格式验证"></a>2.1 文件格式验证</h5><ul>
<li>是否以魔数0xCAFEBABE开头</li>
<li>主、次版本号是否在当前虚拟机处理范围之内</li>
<li>常量池的常量中是否有不被支持的常量类型</li>
</ul>
<p>…</p>
<p>这阶段的是基于二进制字节流进行的，只有通过这个验证后，字节流才会进入内存的方法区进行存储，后面的3个验证全都是基于方法区的存储结构进行的。</p>
<h5 id="2-2-元数据验证"><a href="#2-2-元数据验证" class="headerlink" title="2.2 元数据验证"></a>2.2 元数据验证</h5><p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java信息规范的要求。这个阶段主要验证：</p>
<ul>
<li>这个类是否有父类</li>
<li>这个类的父类是否集成了不允许继承的类</li>
<li>如果这个类不是抽象类，是否实现了父类或接口之中要求实现的所有方法</li>
<li>类中的字段、方法是否与父类产生矛盾</li>
</ul>
<h5 id="2-3-字节码验证"><a href="#2-3-字节码验证" class="headerlink" title="2.3 字节码验证"></a>2.3 字节码验证</h5><p>第三个阶段是整个验证中最复杂的一个阶段，主要目的是通过数据流和控制流分析确定程序语义是合法的，符合逻辑的。</p>
<ul>
<li>保证任意时刻操作数据栈的数据类型与指令代码序列都能配合工作，例如不会出现类似的情况：在操作栈放置一个int类型的数据，使用时却按long类型来加载本地变量表。</li>
<li>保证跳转执行不会跳转到方法体以外的字节码指令上</li>
<li>保证方法体中的类型转换是有效的。例如可以把一个子类对象赋值给父类数据类型。</li>
</ul>
<h5 id="2-4-符号引用验证"><a href="#2-4-符号引用验证" class="headerlink" title="2.4 符号引用验证"></a>2.4 符号引用验证</h5><p>最后一个阶段的验证发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段 – 解析阶段中发生。符号引用验证可以看做是对类自身以外的信息进行匹配性校验。</p>
<ul>
<li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li>
<li>在指定类中是否存在符号方法的字段描述符以及简单名称所描述的方法和字段。</li>
<li>符号引用中的类、字段、方法的访问性(private、protect、public、default)是否可被当前类访问</li>
</ul>
<h4 id="3）准备"><a href="#3）准备" class="headerlink" title="3）准备"></a>3）准备</h4><p>准备阶段是为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段有两个特别容易混淆的概念需要强调一下，首先，这个时候进行内存分配的仅包含类变量(被static修饰的变量)，而不包括实例变量，实例变量将在对象实例化时随着对象一起分配在java堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值。假设定义一个类变量定义为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static int value = 123;</div></pre></td></tr></table></figure>
<p>那变量value在准备阶段过后的初始值为0而不是123，因为这时候尚未开始执行Java方法，而把value赋值为123的pubstatic指令是程序被编译后，存放在类构造器<clinit>()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。</clinit></p>
<h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4) 解析"></a>4) 解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，先来了解下解析阶段中直接引用与符号引用有什么关联？</p>
<ul>
<li>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义定位到目标即可。</li>
<li>直接引用：直接引用是可以直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</li>
</ul>
<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法局冰河调用点限定符7类符号引用进行</p>
<h4 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5) 初始化"></a>5) 初始化</h4><p>类初始化是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的JAVA程序代码。</p>
<h3 id="2-类加载器"><a href="#2-类加载器" class="headerlink" title="2. 类加载器"></a>2. 类加载器</h3><h4 id="1-类加载器的分类"><a href="#1-类加载器的分类" class="headerlink" title="1) 类加载器的分类"></a>1) 类加载器的分类</h4><p>JAVA提供3中类加载器，启动类加载器、扩展类加载器、应用程序类加载器。</p>
<h5 id="1-1-启动类加载器"><a href="#1-1-启动类加载器" class="headerlink" title="1.1 启动类加载器"></a>1.1 启动类加载器</h5><p>这个类加载器将存放在<code>&lt;JAVA_HOME&gt;\lib</code>目录中的，或被<code>-Xbootclasspath</code>参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机聂村中。启动类加载器无法被Java程序直接引用，用户在编写自定义加载器时，如果需要将加载器请求委派给引导类加载器，那直接使用null代替即可。</p>
<h5 id="1-2-扩展类加载器"><a href="#1-2-扩展类加载器" class="headerlink" title="1.2 扩展类加载器"></a>1.2 扩展类加载器</h5><p>这个加载器由<code>sun.misc.Lanchuer$ExtClassLoader</code>实现，它负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中的，或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</p>
<h5 id="1-3-应用程序类加载器"><a href="#1-3-应用程序类加载器" class="headerlink" title="1.3 应用程序类加载器"></a>1.3 应用程序类加载器</h5><p>它负责加载用户类路径(ClassPath)上所指定的类库，开发者直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下就是程序中默认的类加载器。</p>
<h4 id="2-类加载器之间的关系-–-双亲委派模型"><a href="#2-类加载器之间的关系-–-双亲委派模型" class="headerlink" title="2)类加载器之间的关系 – 双亲委派模型"></a>2)类加载器之间的关系 – 双亲委派模型</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/80453965-file_1494077656090_6545.png" alt=""></p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到类加载的请求，它首先不会自家去尝试加载这个类，而是把这个请求委派给父类加载器去完成，没一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时，子加载器才会尝试自己去加载。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解java虚拟机 by 周志明</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fork/Join框架]]></title>
      <url>http://jianwl.com/2017/05/06/Fork-Join%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h3 id="1-什么是Fork-Join框架"><a href="#1-什么是Fork-Join框架" class="headerlink" title="1. 什么是Fork/Join框架"></a>1. 什么是Fork/Join框架</h3><p><code>Fork/Join</code>框架是<code>Java7</code>提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/59644370-file_1494058071918_c704.png" alt=""></p>
<h3 id="2-工作窃取算法"><a href="#2-工作窃取算法" class="headerlink" title="2. 工作窃取算法"></a>2. 工作窃取算法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>工作窃取(work-stealing)算法是指某个线程从其他队列里窃取任务来执行。</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>线程1负责处理4个任务，线程2负责处理4个任务，当线程1任务处理完了，但线程2还在处理任务。干完活的线程与其闲着，不如去帮其他线程干活。于是它就去其他线程的队里里窃取一个任务来执行。<strong>在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务之间的竞争，通过会使用双端队列，被窃取任务线程永远从双端队列的头部执行任务，而窃取任务线程用于从双端队列的尾部拿任务。</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/32884348-file_1494058582643_ef6c.png" alt=""></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>充分利用线程进行并行计算，减少了线程间的竞争。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>在某些情况下，还是存在竞争，比如双端队列里只有一个任务时，并且算法会消耗更多的系统资源。</p>
<h3 id="3-Fork-Join框架的设计"><a href="#3-Fork-Join框架的设计" class="headerlink" title="3. Fork/Join框架的设计"></a>3. Fork/Join框架的设计</h3><p>如果让我们来设计一个Fork/Join框架，我们该如何设计？</p>
<p>步骤1 分割任务，首先我们需要有一个Fork类来把大任务分割成子任务，有可能子任务还是很大，所以还需要不停地分割，知道分割出的子任务足够小。</p>
<p>步骤2 执行任务并合并结果，分割的子任务分别放在双端队列里，然后几个启动线程分别从双端队列里获取任务执行，子任务执行完的结果都统一放在一个队列里，启动一个线程从队列里拿数据，然后合并这些数据。</p>
<p>Fork/Join框架提供以下两个子类：</p>
<ul>
<li>RecursiveAction: 用于没有返回结果的任务</li>
<li>RecursiveTask: 用于有返回结果的任务</li>
</ul>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4. 实战"></a>4. 实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class CountTask extends RecursiveTask&lt;Integer&gt; &#123;</div><div class="line">    private static final int THRESHOLD = 2;</div><div class="line">    private int start;</div><div class="line">    private int end;</div><div class="line"></div><div class="line">    public CountTask(int start, int end) &#123;</div><div class="line">        this.start = start;</div><div class="line">        this.end = end;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected Integer compute() &#123;</div><div class="line">        int sum = 0;</div><div class="line"></div><div class="line">        // 如果任务足够小就计算任务</div><div class="line">        boolean canCompute = (end - start) &lt;= THRESHOLD;</div><div class="line">        if (canCompute) &#123;</div><div class="line">            for (int i = start; i &lt;= end; i++) &#123;</div><div class="line">                sum += i;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 如果任务大于阈值,就分裂成两个子任务计算</div><div class="line">            int middle = (start + end) / 2;</div><div class="line">            CountTask leftTask = new CountTask(start,middle);</div><div class="line">            CountTask rightTask = new CountTask(middle + 1,end);</div><div class="line"></div><div class="line">            // 执行子任务</div><div class="line">            leftTask.fork();</div><div class="line">            rightTask.fork();</div><div class="line"></div><div class="line">            //等待子任务执行完,并得到其结果</div><div class="line">            int leftResult = leftTask.join();</div><div class="line">            int rightReult = rightTask.join();</div><div class="line"></div><div class="line">            // 合并子任务</div><div class="line">            sum = leftResult + rightReult;</div><div class="line">        &#125;</div><div class="line">        return sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ForkJoinPool forkJoinPool = new ForkJoinPool();</div><div class="line"></div><div class="line">        // 生成一个计算任务,负责计算1+2+3+4;</div><div class="line">        CountTask countTask = new CountTask(1,4);</div><div class="line"></div><div class="line">        // 执行一个任务</div><div class="line">        Future&lt;Integer&gt; result = forkJoinPool.submit(countTask);</div><div class="line">        try &#123;</div><div class="line">            System.out.println(result.get());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">        &#125;catch (ExecutionException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 10</div></pre></td></tr></table></figure>
<h3 id="5-Fork-Join框架的异常处理"><a href="#5-Fork-Join框架的异常处理" class="headerlink" title="5. Fork/Join框架的异常处理"></a>5. Fork/Join框架的异常处理</h3><p>ForkJoinTask在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以<code>ForkJoinTask</code>提供了<code>isCompletedAbonormally()</code>方法来检查任务是否已经抛出异常或已经被取消了。并且通过<code>ForkJoinTask</code>的<code>getException</code>方法获取异常。</p>
<h3 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h3><ol>
<li>java并发编程的艺术 by 方腾飞</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之线程池]]></title>
      <url>http://jianwl.com/2017/05/06/JAVA%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前面试问到最多的问题就是线程池的实现原理，这一节我们将会来学习线程池实现原理及线程池的用法。</p>
<h3 id="1-线程池的优点"><a href="#1-线程池的优点" class="headerlink" title="1. 线程池的优点"></a>1. 线程池的优点</h3><p>Java中线程池是运用场景最多的并发框架，几乎所有需要异步或并发执行任务的程序都可以使用线程池，在开发过程中，合理地使用线程池能够带来3个好处。</p>
<ol>
<li>降低资源消耗，通过重复利用已创建的线程降低线程创建和销毁造成的消耗；</li>
<li>提高响应速度，当任务达到时，任务可以不需要等到线程创建就能立即执行。</li>
<li>提高线程的可管理性，线程是稀缺资源，如果无限制地创建、不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。但是，要做到合理利用线程池，必须对其原理了如指掌。</li>
</ol>
<h3 id="2-线程池的实现原理"><a href="#2-线程池的实现原理" class="headerlink" title="2. 线程池的实现原理"></a>2. 线程池的实现原理</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/30502602-file_1494052172147_1313c.png" alt=""></p>
<p>当提交一个新任务到线程池，处理流程如下：</p>
<p>1）线程池判断核心线程池里的线程是否都在执行任务，如果不是，则创建一个新的工作线程来执行任务，如果核心线程池里的线程都在执行任务，则进入下一个流程。</p>
<p>2）线程池判断工作队列是否已满，如果工作队列已满，则将新提交的任务存储在这个工作队列里如果工作队列满了，则进入下一个流程。</p>
<p>3) 线程池判断线程池的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务，如果满了，则交给饱和策略来处理这个任务。</p>
<p>ThreadPoolExecutor执行的<code>execute()</code>方法的示意图：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/10523759-file_1494053473005_d83a.png" alt=""></p>
<p>1） 如果当前运行的线程少于coorPoolSize,则创建新线程来执行任务「执行这一步骤要获取全局锁」</p>
<p>2) 如果运行的线程等于或多余corePoolSize,则将任务加入BlockingQueue；</p>
<p>3）如果无法将任务加入BlockingQueue(队列已满)，则创建新的线程来处理任务「执行这一步骤需要获取全局锁」</p>
<p>4) 如果创建新线程将使当前运行的线程超过maxPool的数量，任务将被拒绝，并调用<code>RejectedExecutionHandle.rejectedExecution()</code>方法。</p>
<h3 id="3-线程池的使用"><a href="#3-线程池的使用" class="headerlink" title="3. 线程池的使用"></a>3. 线程池的使用</h3><h4 id="1-线程池的创建"><a href="#1-线程池的创建" class="headerlink" title="1) 线程池的创建"></a>1) 线程池的创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,milliseconds,runnableTaskQueue,handler);</div></pre></td></tr></table></figure>
<p>1) corePoolSize(线程池的基本大小)：当提交一个任务到线程池时，线程池会创建一个新的线程来执行任务。等到需要执行的任务数大于线程池基本大小时就不再创建。</p>
<p>2）runnableTaskQueue(任务队列): 用于保存等待执行的任务的阻塞队列,有以下几个可供选择：</p>
<ul>
<li>ArrayBlockingQueue: 一个基于数组结构的<strong>有界</strong>阻塞队列，此队列按FIFO对元素进行排序；</li>
<li>LinkedBlockingQueue: 一个基于链表结构的阻塞队列，此队列按FIFO排序元素；</li>
<li>SynchronousQueue: 一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态</li>
<li>PriorityBlockingQueue: 一个具有优先级的<strong>无限</strong>阻塞队列</li>
</ul>
<p>3）maximumPoolSize(线程池最大数量)：线程池允许创建的最大线程数。如果队列满了，并且已经创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。<strong>如果使用无界的任务，这个参数没效果。</strong></p>
<p>4）ThreadFactory: 用于设置创建线程工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># guava提供的ThreadFactoryBuilder</div><div class="line">new ThreadFactoryBuilder().setNameFormat(&quot;XX-task-%d&quot;).build();</div></pre></td></tr></table></figure>
<p>5）RejectedExecutionHandle(饱和策略)：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。</p>
<ul>
<li>AbortPolicy: 直接抛出异常(默认处理方式）</li>
<li>CallerRunsPolicy: 只用调用者所在线程来执行任务</li>
<li>DiscardOldestPolicy: 丢弃队列里的最近一个任务，并执行当前任务；</li>
<li>DiscardPolicy: 不处理，丢弃掉</li>
</ul>
<p>6）keepAliveTime(线程活动保持时间)：线程池的工作线程空闲后，保持存活的时间。如果任务多，单个任务执行时间短，可以调大时间，提高线程的利用率。</p>
<h4 id="2-实战"><a href="#2-实战" class="headerlink" title="2) 实战"></a>2) 实战</h4><h5 id="创建线程池-amp-提交任务"><a href="#创建线程池-amp-提交任务" class="headerlink" title="创建线程池 &amp; 提交任务"></a>创建线程池 &amp; 提交任务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static final int CORE_POOL_SIZE = 1;</div><div class="line">    private static final int MAXI_MUM_POOL_SIZE = 1;</div><div class="line">    private static final long KEEP_ALIVE_TIME = 1;</div><div class="line">    private static final TimeUnit TIME_UNIT = TimeUnit.SECONDS;</div><div class="line">    private static BlockingQueue&lt;Runnable&gt; workQueue = new ArrayBlockingQueue(1);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ThreadPoolExecutor threadPools = new ThreadPoolExecutor(CORE_POOL_SIZE,MAXI_MUM_POOL_SIZE,KEEP_ALIVE_TIME,TIME_UNIT,workQueue);</div><div class="line">        threadPools.execute(() -&gt; &#123;</div><div class="line">            System.out.println(&quot;ThreadName:&quot; + Thread.currentThread().getName() + &quot; currentTime =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;);</div><div class="line">        // 关闭线程池</div><div class="line">        threadPools.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// ThreadName:pool-1-thread-1 currentTime =&gt; 1494055661705</div></pre></td></tr></table></figure>
<h5 id="提交任务过多，触发饱和策略，默认执行AbortPolicy"><a href="#提交任务过多，触发饱和策略，默认执行AbortPolicy" class="headerlink" title="提交任务过多，触发饱和策略，默认执行AbortPolicy"></a>提交任务过多，触发饱和策略，默认执行<code>AbortPolicy</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static final int CORE_POOL_SIZE = 1;</div><div class="line">    private static final int MAXI_MUM_POOL_SIZE = 1;</div><div class="line">    private static final long KEEP_ALIVE_TIME = 1;</div><div class="line">    private static final TimeUnit TIME_UNIT = TimeUnit.SECONDS;</div><div class="line">    private static BlockingQueue&lt;Runnable&gt; workQueue = new ArrayBlockingQueue(1);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ThreadPoolExecutor threadPools = new ThreadPoolExecutor(CORE_POOL_SIZE,MAXI_MUM_POOL_SIZE,KEEP_ALIVE_TIME,TIME_UNIT,workQueue);</div><div class="line"></div><div class="line">        for (int i=0; i&lt;10000; i++) &#123;</div><div class="line">            threadPools.execute(() -&gt; &#123;</div><div class="line">                System.out.println(&quot;ThreadName:&quot; + Thread.currentThread().getName() + &quot; currentTime =&gt; &quot; + System.currentTimeMillis());</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 关闭线程池</div><div class="line">        threadPools.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/77334009-file_1494055810091_46b3.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java并发编程的艺术 by 方腾飞</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock的使用]]></title>
      <url>http://jianwl.com/2017/05/06/Lock%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-ReentrantLock实现同步"><a href="#1-ReentrantLock实现同步" class="headerlink" title="1. ReentrantLock实现同步"></a>1. ReentrantLock实现同步</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MyService myService = new MyService();</div><div class="line">        MyThread t1 = new MyThread(myService);</div><div class="line">        MyThread t2 = new MyThread(myService);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：</div><div class="line">// ThreadName = Thread-0(0)</div><div class="line">// ThreadName = Thread-0(1)</div><div class="line">// ThreadName = Thread-1(0)</div><div class="line">// ThreadName = Thread-1(1)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private Lock lock = new ReentrantLock();</div><div class="line">    public void testMethod()&#123;</div><div class="line">        lock.lock();</div><div class="line">        for (int i=0;i &lt; 5; i++) &#123;</div><div class="line">            System.out.println(&quot;ThreadName = &quot; + Thread.currentThread().getName() + &quot;(&quot; + i + &quot;)&quot;);</div><div class="line">        &#125;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程MyThread</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class MyThread extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public MyThread(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>描述</p>
<p>当前线程打印完毕之后，将锁进行释放，其他线程才可以继续打印。线程打印的数据是分组打印，因为当前线程已持有锁，但线程之间打印的顺序是随机的。</p>
<h4 id="2-使用Condition实现通知部分线程"><a href="#2-使用Condition实现通知部分线程" class="headerlink" title="2. 使用Condition实现通知部分线程"></a>2. 使用Condition实现通知部分线程</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        MyService myService = new MyService();</div><div class="line">        ThreadA t1 = new ThreadA(myService);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(myService);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">        Thread.sleep(3000);</div><div class="line">        myService.siginalAll_A();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 运行结果</div><div class="line">// begin awaitA 时间为 1494037693605 ThreadName = A</div><div class="line">// begin awaitB 时间为 1494037693606 ThreadName = B</div><div class="line">// singalAll_A 时间为 1494037696608 ThreadName = main</div><div class="line">// end awaitA 时间为 1494037696608 ThreadName = A</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private Lock lock = new ReentrantLock();</div><div class="line">    public Condition conditionA = lock.newCondition();</div><div class="line">    public Condition conditionB = lock.newCondition();</div><div class="line"></div><div class="line">    public void awaitA() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;begin awaitA 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionA.await();</div><div class="line">            System.out.println(&quot;end awaitA 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void awaitB() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;begin awaitB 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionB.await();</div><div class="line">            System.out.println(&quot;end awaitB 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void siginalAll_A() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;singalAll_A 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionA.signalAll();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void siginalAll_B() &#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(&quot;singalAll_B 时间为 &quot; + System.currentTimeMillis() + &quot; ThreadName = &quot; + Thread.currentThread().getName());</div><div class="line">            conditionB.signalAll();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadA(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.awaitA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadB(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        myService.awaitB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-实现生产者-消费者模式"><a href="#3-实现生产者-消费者模式" class="headerlink" title="3) 实现生产者/消费者模式"></a>3) 实现生产者/消费者模式</h4><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">        public static void main(String[] args) &#123;</div><div class="line">            MyService myService = new MyService();</div><div class="line">            ThreadA t1 = new ThreadA(myService);</div><div class="line">            t1.start();</div><div class="line">            ThreadB t2 = new ThreadB(myService);</div><div class="line">            t2.start();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div><div class="line">// 打印❤</div><div class="line">// 打印❤❤❤❤❤❤</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class MyService &#123;</div><div class="line">    private ReentrantLock lock = new ReentrantLock();</div><div class="line">    private Condition condition = lock.newCondition();</div><div class="line">    private boolean hasValue = false;</div><div class="line"></div><div class="line">    public void set()&#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            while (hasValue == true) &#123;</div><div class="line">                condition.await();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;打印❤&quot;);</div><div class="line">            hasValue = true;</div><div class="line">            condition.signal();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void get()&#123;</div><div class="line">        try &#123;</div><div class="line">            lock.lock();</div><div class="line">            while (hasValue == false) &#123;</div><div class="line">                condition.await();</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;打印❤❤❤❤❤❤&quot;);</div><div class="line">            hasValue = false;</div><div class="line">            condition.signal();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadA(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">            myService.set();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private MyService myService;</div><div class="line"></div><div class="line">    public ThreadB(MyService myService) &#123;</div><div class="line">        this.myService = myService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">            myService.get();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-使用Condition实现顺序执行"><a href="#4-使用Condition实现顺序执行" class="headerlink" title="4) 使用Condition实现顺序执行"></a>4) 使用Condition实现顺序执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    private static volatile int nextPrintWho = 1;</div><div class="line">    private static ReentrantLock lock = new ReentrantLock();</div><div class="line">    private static final Condition conditionA = lock.newCondition();</div><div class="line">    private static final Condition conditionB = lock.newCondition();</div><div class="line">    private static final Condition conditionC = lock.newCondition();</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        Thread t1  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 1)&#123;</div><div class="line">                    conditionA.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadA (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 2;</div><div class="line">                conditionB.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t2  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 2)&#123;</div><div class="line">                    conditionB.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadB (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 3;</div><div class="line">                conditionC.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t3  = new Thread(() -&gt; &#123;</div><div class="line">            try&#123;</div><div class="line">                lock.lock();</div><div class="line">                while (nextPrintWho != 3)&#123;</div><div class="line">                    conditionB.await();</div><div class="line">                &#125;</div><div class="line">                for (int i=0;i &lt; 3; i ++) &#123;</div><div class="line">                    System.out.println(&quot;ThreadC (&quot; + i + &quot;)&quot; );</div><div class="line">                &#125;</div><div class="line">                nextPrintWho = 1;</div><div class="line">                conditionA.signalAll();</div><div class="line">            &#125;catch (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// ThreadA (0)</div><div class="line">// ThreadA (1)</div><div class="line">// ThreadA (2)</div><div class="line">// ThreadB (0)</div><div class="line">// ThreadB (1)</div><div class="line">// ThreadB (2)</div><div class="line">// ThreadC (0)</div><div class="line">// ThreadC (1)</div><div class="line">// ThreadC (2)</div></pre></td></tr></table></figure>
<h4 id="5-ReentrantReadWriteLock"><a href="#5-ReentrantReadWriteLock" class="headerlink" title="5) ReentrantReadWriteLock"></a>5) ReentrantReadWriteLock</h4><p>ReetrantLock具有完全互斥排他的效果，即同一时间只有一个线程在执行<code>ReentrantLock.lock()</code>方法后面的任务，这样做虽然保证了实例变量的线程安全性，但效率却非常低下。在<code>JDK</code>中提供了一种读写锁<code>ReentrantReadWriteLock</code>类，使用它可以加快效率，在某些不需要操作实例变量的方法中，完全可以使用读写锁<code>ReentrantReadWriteLock</code>来提升该方法的代码运行速度。</p>
<p>读写锁表示有两个锁，一个是读操作相关的锁，也成为共享锁；另一个是写操作相关的锁，也叫排他锁。也就是多个读取锁之间互不排斥，读锁与写锁互斥，写锁与写锁互斥。在没有线程进行写入操作时，进行读取操作的多个线程都可以获取读锁，而进行写入操作的线程只有在获取写锁后，才能进行写操作。即多个线程可以同时进行读取操作，但同一时刻只允许一个线程进行写入操作。</p>
<h5 id="读读共享"><a href="#读读共享" class="headerlink" title="读读共享"></a>读读共享</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果: 同一时刻，两个线程分别都获取了读锁</div><div class="line">// 获取读锁A 1494047926771</div><div class="line">// 获取读锁B 1494047926771</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line">    public void read() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.readLock().lock();</div><div class="line">                System.out.println(&quot;获取读锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(1000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.readLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="写写互斥"><a href="#写写互斥" class="headerlink" title="写写互斥"></a>写写互斥</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：线程A释放写锁后，线程B获取写锁，才能执行；</div><div class="line">// 获取写锁A 1494048231414</div><div class="line">// 获取写锁B 1494048241416</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line">    public void write() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.writeLock().lock();</div><div class="line">                System.out.println(&quot;获取写锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.writeLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="读写互斥"><a href="#读写互斥" class="headerlink" title="读写互斥"></a>读写互斥</h5><p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service);</div><div class="line">        t1.setName(&quot;A&quot;);</div><div class="line">        ThreadB t2 = new ThreadB(service);</div><div class="line">        t2.setName(&quot;B&quot;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果：读锁释放后，获取写锁，才能进行写操作。</div><div class="line">// 获取读锁A 1494048498737</div><div class="line">// 获取写锁B 1494048508739</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    public void read() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.readLock().lock();</div><div class="line">                System.out.println(&quot;获取读锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.readLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void write() &#123;</div><div class="line">        try&#123;</div><div class="line">            try&#123;</div><div class="line">                lock.writeLock().lock();</div><div class="line">                System.out.println(&quot;获取写锁&quot; + Thread.currentThread().getName() + &quot; &quot; + System.currentTimeMillis());</div><div class="line">                Thread.sleep(10000);</div><div class="line">            &#125;finally &#123;</div><div class="line">                lock.writeLock().unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line"></div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        service.write();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java多线程编程核心技术 by 高洪岩</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程间的通信]]></title>
      <url>http://jianwl.com/2017/05/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体。本文将会来学习使用<code>wait/notify</code>实现线程间的通信。</p>
<h3 id="1-wait-notify机制的实现"><a href="#1-wait-notify机制的实现" class="headerlink" title="1. wait/notify机制的实现"></a>1. <code>wait/notify</code>机制的实现</h3><p>方法<code>wait</code>的作用是使当前执行代码的线程进行等待，<code>wait</code>方法是<code>Object</code>类的方法，该方法用来将当前线程置入“预执行队列”中，并且在<code>wait()</code>所在的代码行处停止执行，直到接到通知或被中断为止。在调用<code>wait()</code>之前，<strong>线程必须获取该对象的对象级别的锁，即只能在synchronized方法或同步块中调用wait()方法。</strong> 在执行<code>wait()</code>方法后，当前线程释放锁，在从<code>wait()</code>放回前，线程与其他线程竞争重新获得锁。<strong>如果调用wait()时，没有持有适当的锁，则抛出illegalMonitorStateException，它是RuntimeException的子类，因此不需要try-catch语句进行捕捉。</strong></p>
<p><code>notify()</code>方法也要在<strong>synchronized或同步块中调用</strong>，即在调用前，线程也必须获得该对象的对象级别锁。如果调用<code>notify()</code>时没有持有适当的锁，也会抛出<code>illegalMonitorStateException</code>。该方法用来通知那些可能等待该对象的对象锁的其他线程，如果有多个线程等待，则由线程规划器随机挑选出其中一个呈wait状态的线程，对其发出通知notify，并使它等待获取该对象的对象锁。需要说明的是，<strong>在执行notify()方法后，当前线程不会马上释放该对象锁，呈wait状态的线程也并不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，也就是退出synchronized代码块后，当前线程才会释放锁，而呈wait状态所在的线程才可以获取对象锁。</strong> 当第一个获得该对象锁的wait线程执行完毕之后，它会释放该对象锁，如果此时该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有该对象的通知，还会继续阻塞在wait状态，直到这个对象发出一个<code>notify或notifyAll</code>。</p>
<p>用一句话来总结wait和notify: wait是线程停止运行，而notify是停止的线程继续运行。</p>
<h3 id="2-实战"><a href="#2-实战" class="headerlink" title="2. 实战"></a>2. 实战</h3><h4 id="1）不在同步方法内执行wait，报错"><a href="#1）不在同步方法内执行wait，报错" class="headerlink" title="1）不在同步方法内执行wait，报错"></a>1）不在同步方法内执行<code>wait</code>，报错</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/59950818-file_1493909988683_133c4.png" alt=""></p>
<h4 id="2）暂停线程wait"><a href="#2）暂停线程wait" class="headerlink" title="2）暂停线程wait"></a>2）暂停线程<code>wait</code></h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/39178586-file_1493910208703_13eb9.png" alt=""></p>
<h4 id="3-notify-wait"><a href="#3-notify-wait" class="headerlink" title="3) notify/wait"></a>3) <code>notify/wait</code></h4><p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Object object;</div><div class="line">    public ThreadA(Object object)&#123;</div><div class="line">        super();</div><div class="line">        this.object = object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try&#123;</div><div class="line">            synchronized (object)&#123;</div><div class="line">                System.out.println(&quot;start wait time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">                object.wait();</div><div class="line">                System.out.println(&quot;end wait time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            &#125;</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread&#123;</div><div class="line">    private Object object;</div><div class="line">    public ThreadB(Object object)&#123;</div><div class="line">        super();</div><div class="line">        this.object = object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (object)&#123;</div><div class="line">            System.out.println(&quot;start notify time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            object.notify();</div><div class="line">            System.out.println(&quot;end notify time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try&#123;</div><div class="line">            Object object = new Object();</div><div class="line">            ThreadA t1 = new ThreadA(object);</div><div class="line">            t1.start();</div><div class="line">            Thread.sleep(3000);</div><div class="line">            ThreadB t2 = new ThreadB(object);</div><div class="line">            t2.start();</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// start wait time =&gt; 1493910683445</div><div class="line">// start notify time =&gt; 1493910686449</div><div class="line">// end notify time =&gt; 1493910686449</div><div class="line">// end wait time =&gt; 1493910686449</div></pre></td></tr></table></figure>
<p>特别注意一点，执行notify方法时，需要等待执行notify的线程，退出synchronized方法，抛出对象锁，wait获取对象锁，才能唤醒被wait的线程。</p>
<h3 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h3><ol>
<li>java多线程核心技术 by 高洪岩</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对象及变量的并发访问]]></title>
      <url>http://jianwl.com/2017/05/03/%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-线程不安全"><a href="#1-线程不安全" class="headerlink" title="1) 线程不安全"></a>1) 线程不安全</h4><p>共享变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class HasSelfPrivateNum &#123;</div><div class="line">    private int num = 0;</div><div class="line">    public void addI(String username) &#123;</div><div class="line">        try &#123;</div><div class="line">            if (username.equals(&quot;a&quot;)) &#123;</div><div class="line">                num = 100;</div><div class="line">                System.out.println(&quot;a set over!&quot;);</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125;else &#123;</div><div class="line">                num = 200;</div><div class="line">                System.out.println(&quot;b set over!&quot;);</div><div class="line">            &#125;</div><div class="line">            System.out.println(username + &quot; num = &quot; + num);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private HasSelfPrivateNum numRef;</div><div class="line"></div><div class="line">    public ThreadA(HasSelfPrivateNum numRef) &#123;</div><div class="line">        super();</div><div class="line">        this.numRef = numRef;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        numRef.addI(&quot;a&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private HasSelfPrivateNum numRef;</div><div class="line"></div><div class="line">    public ThreadB(HasSelfPrivateNum numRef) &#123;</div><div class="line">        super();</div><div class="line">        this.numRef = numRef;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        numRef.addI(&quot;b&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        HasSelfPrivateNum numRef = new HasSelfPrivateNum();</div><div class="line">        ThreadA t1 = new ThreadA(numRef);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(numRef);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结果：</div><div class="line">// a set over!</div><div class="line">// b set over!</div><div class="line">// b num = 200</div><div class="line">// a num = 200</div></pre></td></tr></table></figure>
<p>描述</p>
<p>线程A执行run方法，运行到<code>Thread.sleep(2000);</code>这个语句时，线程B也执行run方法，运行到<code>System.out.println(username + &quot; num = &quot; + num);</code>，此时共享变量已被线程B覆盖，再回到线程A时，输出的共享变量值，实际是线程B的赋值结果。</p>
<p>解决</p>
<p>共享变量<code>addI</code>方法前增加<code>synchronized</code>关键字即可。</p>
<h4 id="2-可重入锁"><a href="#2-可重入锁" class="headerlink" title="2) 可重入锁"></a>2) 可重入锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    public synchronized void service1()&#123;</div><div class="line">        System.out.println(&quot;service1&quot;);</div><div class="line">        service2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void service2()&#123;</div><div class="line">        System.out.println(&quot;service2&quot;);</div><div class="line">        service3();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void service3()&#123;</div><div class="line">        System.out.println(&quot;service3&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       new Thread(() -&gt; new Service().service1()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// service1</div><div class="line">// service2</div><div class="line">// service3</div></pre></td></tr></table></figure>
<p>描述</p>
<p>可重入锁的概念是，自己可以再次获取自己内部锁，比如有线程A获得了某个对象锁，此时对象锁还没有释放，当其再次获取这个对象的锁的时候还是可以获取的，如果<strong>不可锁重入的话</strong>，就会造成死锁。</p>
<h4 id="3）出现异常，锁自动释放"><a href="#3）出现异常，锁自动释放" class="headerlink" title="3）出现异常，锁自动释放"></a>3）出现异常，锁自动释放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    public synchronized void testMethod() &#123;</div><div class="line">        if (Thread.currentThread().getName().equals(&quot;A&quot;)) &#123;</div><div class="line">            System.out.println(&quot;ThreadName = &quot; + Thread.currentThread().getName() + &quot; run Time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">            int i = 1;</div><div class="line">            while (i == 1) &#123;</div><div class="line">                if((&quot;&quot; + Math.random()).substring(0,8).equals(&quot;0.123456&quot;)) &#123;</div><div class="line">                    Integer.parseInt(&quot;A&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;else &#123;</div><div class="line">            System.out.println(&quot;ThreadName = B run Time =&gt; &quot; + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadA(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadB(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service,&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadA t2 = new ThreadA(service,&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/55553957-file_1493826471587_1272a.png" alt=""></p>
<p>描述</p>
<p>线程A出现异常并释放锁，线程B进入方法，正常打印，可知出现异常是锁被自动释放了。</p>
<h4 id="4-同步synchronized无限等待与解决"><a href="#4-同步synchronized无限等待与解决" class="headerlink" title="4) 同步synchronized无限等待与解决"></a>4) 同步synchronized无限等待与解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">   public synchronized void methodA()&#123;</div><div class="line">       System.out.println(&quot;methodA begin&quot;);</div><div class="line">       boolean isContinueRun = true;</div><div class="line">       while (isContinueRun) &#123;&#125;</div><div class="line">       System.out.println(&quot;methodA end&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">    public synchronized void methodB()&#123;</div><div class="line">        System.out.println(&quot;methodB begin&quot;);</div><div class="line">        System.out.println(&quot;methodB end&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadA extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadA(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadA(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.methodA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ThreadB extends Thread &#123;</div><div class="line">    private Service service;</div><div class="line">    public ThreadB(Service service) &#123;</div><div class="line">        super();</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ThreadB(Service service,String name) &#123;</div><div class="line">        super(name);</div><div class="line">        this.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        super.run();</div><div class="line">        service.methodB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Service service = new Service();</div><div class="line">        ThreadA t1 = new ThreadA(service,&quot;A&quot;);</div><div class="line">        t1.start();</div><div class="line">        ThreadB t2 = new ThreadB(service,&quot;B&quot;);</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">methodA begin</div></pre></td></tr></table></figure>
<p>描述</p>
<p>上述情况，线程B永远也得不到运行的机会，锁死了。</p>
<p>解决</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Service &#123;</div><div class="line">    Object objectA = new Object();</div><div class="line">    public void methodA() &#123;</div><div class="line">        synchronized (objectA) &#123;</div><div class="line">            System.out.println(&quot;methodA begin&quot;);</div><div class="line">            boolean isContinueRun = true;</div><div class="line">            while (isContinueRun) &#123;</div><div class="line">            &#125;</div><div class="line">            System.out.println(&quot;methodA end&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Object objectB = new Object();</div><div class="line">    public void methodB() &#123;</div><div class="line">        synchronized (objectB) &#123;</div><div class="line">            System.out.println(&quot;methodB begin&quot;);</div><div class="line">            System.out.println(&quot;methodB end&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用同步块，可以解决以上问题。</p>
<h4 id="5）volatile-解决异步死循环"><a href="#5）volatile-解决异步死循环" class="headerlink" title="5）volatile 解决异步死循环"></a>5）volatile 解决异步死循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RunThread extends Thread &#123;</div><div class="line">    private boolean isRunning = true;</div><div class="line"></div><div class="line">    public boolean isRunning() &#123;</div><div class="line">        return isRunning;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRunning(boolean running) &#123;</div><div class="line">        isRunning = running;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;进入run了&quot;);</div><div class="line">        while (isRunning == true)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;线程被停止了!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try&#123;</div><div class="line">            RunThread thread = new RunThread();</div><div class="line">            thread.start();</div><div class="line">            Thread.sleep(1000);</div><div class="line">            thread.setRunning(false);</div><div class="line">            System.out.println(&quot;已经赋值为false&quot;);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 结果</div><div class="line">// 进入run了</div><div class="line">// 已经赋值为false</div></pre></td></tr></table></figure>
<p>描述</p>
<p>运行后出现死循环效果，<code>System.out.println(&quot;线程被停止了!&quot;);</code> 这句代码永远不会执行。变量<code>isRunning</code>存在于公共堆栈及线程的私有堆栈中，执行<code>thread.setRunning(false);</code>只更新公共堆栈的<code>isRunning</code>，而私有堆栈中<code>isRunning</code>的值一直为<code>true</code>。</p>
<p>解决</p>
<p>设置变量<code>isRunning</code>时，加个关键字<code>volatitle</code>，它的作用就是当线程访问<code>isRunning</code>这个变量时，强制性从公共堆栈中进行取值。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-4/69232462-file_1493829649793_b809.png" alt=""></p>
<h4 id="6-synchronized-和-volatile区别"><a href="#6-synchronized-和-volatile区别" class="headerlink" title="6) synchronized 和 volatile区别"></a>6) synchronized 和 volatile区别</h4><ol>
<li>关键字<code>volatile</code>是线程同步的轻量级实现，所以<code>volatile</code>性能肯定比<code>synchronized</code>要好，并且<code>volatile</code>只能修饰于变量，而<code>synchronized</code>可以修饰方法、以及代码块。随着<code>JDK</code>新版本的发布，<code>synchronized</code>关键字在执行效率上得到很大的提升。</li>
<li>多线程访问volatile不会发生阻塞，而<code>synchronized</code>会出现阻塞。</li>
<li>volatile能保证数据的可见性，但不能保证原子性；而synchronized可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公共内存中的数据做同步。</li>
<li>再次重申，关键字volatile解决的是多个线程之间的可见性；而synchronized解决的是，多个线程之间访问资源的同步性。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>java多线程编程核心技术 by 高洪岩</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程之join]]></title>
      <url>http://jianwl.com/2017/05/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bjoin/</url>
      <content type="html"><![CDATA[<p><code>thread.join</code>把指定线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程，比如在线程B中调用线程A的join方法，直到线程A执行完毕后，才会继续执行线程B。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t.join(); // 线程t执行完毕之后，再执行B线程，假设当前为线程B；</div><div class="line">t.join(1000); // 等待t线程1000毫秒之后，再执行线程B，假设当前为线程B</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-thread-join"><a href="#1-thread-join" class="headerlink" title="1. thread.join()"></a>1. thread.join()</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/25776764-file_1493769433016_726d.png" alt=""></p>
<p>上述代码可能出现两种结果，主线程执行<code>System.out.println(&quot;== main ==&quot;)</code>这条语句时，子线程可能已运行也可能没有。使用<code>join</code>方法，能够让子线程，在执行主线程之前执行完毕。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/22949143-file_1493769510138_e7bf.png" alt="">   </p>
<h4 id="2-thread-join-毫秒"><a href="#2-thread-join-毫秒" class="headerlink" title="2. thread.join(毫秒)"></a>2. thread.join(毫秒)</h4><h5 id="子线程t等待100毫秒之后，再执行主线程"><a href="#子线程t等待100毫秒之后，再执行主线程" class="headerlink" title="子线程t等待100毫秒之后，再执行主线程"></a>子线程t等待100毫秒之后，再执行主线程</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/64963858-file_1493769576917_7717.png" alt=""></p>
<h5 id="子线程t等待1000毫秒之后，再执行主线程"><a href="#子线程t等待1000毫秒之后，再执行主线程" class="headerlink" title="子线程t等待1000毫秒之后，再执行主线程"></a>子线程t等待1000毫秒之后，再执行主线程</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-3/94693111-file_1493769617860_8412.png" alt="">                                                                                                              </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flex布局入门(二)]]></title>
      <url>http://jianwl.com/2017/05/01/Flex%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章介绍了Flex布局的语法，今天介绍常见布局的Flex写法。</p>
<p>你会看到，不管是什么布局，Flex往往都可以几行命令搞定。</p>
<p><img src="http://i1.piimg.com/567571/2f98d7972439d234.png" alt=""></p>
<h3 id="骰子的布局"><a href="#骰子的布局" class="headerlink" title="骰子的布局"></a>骰子的布局</h3><p>骰子的一面，最多可以放置9个点。</p>
<p><img src="http://i4.buimg.com/567571/5a8e1061daaf4aee.png" alt=""></p>
<p>下面，就来看看Flex如何实现，从1个点到9个点的布局，你可以到<a href="http://codepen.io/LandonSchropp/pen/KpzzGo" target="_blank" rel="external">codepen</a>查看Demo.</p>
<p><img src="http://i2.muimg.com/567571/111c729a8c94fa04.png" alt=""></p>
<p>如果不加说明，本机的HTML模板益率如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">	&lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，div元素(代表骰子的一个面)是Flex容器，span元素(代表一个点)是Flex项目，如果有多个项目，就要添加多个span元素。一次类推。</p>
<h4 id="1-单项目"><a href="#1-单项目" class="headerlink" title="1) 单项目"></a>1) 单项目</h4><p>首先，只有左上角1个点的情况，Flex布局默认就是首行左对齐，所以一行代码就过了。</p>
<p><img src="http://i1.piimg.com/567571/fa9f94ebcae1b9f6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置项目的对齐方式，就能实现居中对齐和右对齐。</p>
<p><img src="http://i1.piimg.com/567571/fd942caa2b481a06.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/fe59e20f993b6e11.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置交叉轴对齐方式，可以垂直移动主轴</p>
<p><img src="http://i1.piimg.com/567571/c4477f6e9d87aa13.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/fbd32760f95ab206.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/d195c044863d8f54.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/b1073016bbc8bdb6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: flex-end;</div><div class="line">	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-双项目"><a href="#2-双项目" class="headerlink" title="2) 双项目"></a>2) 双项目</h4><p><img src="http://i1.piimg.com/567571/fc13c83dc1527a55.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">  	justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/7aa8f2626292a919.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/1802864126ddaced.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">  	align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/ad246ae685532521.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">	flex-direction: column;</div><div class="line">  	justify-content: space-between;</div><div class="line">  	align-items: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/2ad96bcc4bf29343.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 父元素的第二个子元素的item,居中：</div><div class="line">.item:nth-child(2) &#123;</div><div class="line">  align-self: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/fbaafaec0a26603d.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(2) &#123;</div><div class="line">  align-self: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-三项目"><a href="#3-三项目" class="headerlink" title="3) 三项目"></a>3) 三项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/29159668-file_1493621836732_7df3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(2) &#123;</div><div class="line">	align-self: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item:nth-child(3) &#123;</div><div class="line">	align-self: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-四项目"><a href="#4-四项目" class="headerlink" title="4) 四项目"></a>4) 四项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/94995716-file_1493621929171_60b5.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  justify-content: flex-end;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/4746522-file_1493621982783_1f7b.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;column&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.column &#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display: flex;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-六项目"><a href="#5-六项目" class="headerlink" title="5) 六项目"></a>5) 六项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/55582845-file_1493622078669_9d03.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/90816185-file_1493622163027_fa48.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/13462133-file_1493622255129_e5ad.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row&#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(2)&#123;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(3)&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-九项目"><a href="#6-九项目" class="headerlink" title="6) 九项目"></a>6) 九项目</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/43687614-file_1493622306258_14ec8.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>最简单的网格布局，就是平均分布，在容器里面平均分配空间，跟上面的骰子布局很像，但是需要设置项目的自动缩放。</p>
<h4 id="1-基本网格布局"><a href="#1-基本网格布局" class="headerlink" title="1) 基本网格布局"></a>1) 基本网格布局</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/61368010-file_1493635693058_8d98.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.Grid &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-百分比布局"><a href="#2-百分比布局" class="headerlink" title="2) 百分比布局"></a>2) 百分比布局</h4><p>某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/2000422-file_1493635816791_7197.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of4&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of3&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.Grid &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-full &#123;</div><div class="line">  flex: 0 0 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of2 &#123;</div><div class="line">  flex: 0 0 50%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of3 &#123;</div><div class="line">  flex: 0 0 33.3333%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of4 &#123;</div><div class="line">  flex: 0 0 25%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>圣杯布局(Holy Grail Layout)指的是一种最常见的网站布局，页面从上到下，分成三个部分：头部(header)，躯干(body)，尾部(footer)。其中躯干又水平分成三栏，从左到右为:导航、主栏、副栏。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/32149229-file_1493636028511_11eac.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body class=&quot;HolyGrail&quot;&gt;</div><div class="line">  &lt;header&gt;...&lt;/header&gt;</div><div class="line">  &lt;div class=&quot;HolyGrail-body&quot;&gt;</div><div class="line">    &lt;main class=&quot;HolyGrail-content&quot;&gt;...&lt;/main&gt;</div><div class="line">    &lt;nav class=&quot;HolyGrail-nav&quot;&gt;...&lt;/nav&gt;</div><div class="line">    &lt;aside class=&quot;HolyGrail-ads&quot;&gt;...&lt;/aside&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;footer&gt;...&lt;/footer&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.HolyGrail &#123;</div><div class="line">  display: flex;</div><div class="line">  min-height: 100vh;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line">header,</div><div class="line">footer &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-body &#123;</div><div class="line">  display: flex;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-content &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-nav, .HolyGrail-ads &#123;</div><div class="line">  /* 两个边栏的宽度设为12em */</div><div class="line">  flex: 0 0 12em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.HolyGrail-nav &#123;</div><div class="line">  /* 导航放到最左边 */</div><div class="line">  order: -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是小屏幕，躯干的三栏会自动变为垂直叠加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@media (max-width: 768px) &#123;</div><div class="line">  .HolyGrail-body &#123;</div><div class="line">    flex-direction: column;</div><div class="line">    flex: 1;</div><div class="line">  &#125;</div><div class="line">  .HolyGrail-nav,</div><div class="line">  .HolyGrail-ads,</div><div class="line">  .HolyGrail-content &#123;</div><div class="line">    flex: auto;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输入框的布局"><a href="#输入框的布局" class="headerlink" title="输入框的布局"></a>输入框的布局</h3><p>我们常常需要在输入框的前方提示添加提示，后方添加按钮。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/93489209-file_1493636187353_b89c.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;InputAddOn&quot;&gt;</div><div class="line">  &lt;span class=&quot;InputAddOn-item&quot;&gt;...&lt;/span&gt;</div><div class="line">  &lt;input class=&quot;InputAddOn-field&quot;&gt;</div><div class="line">  &lt;button class=&quot;InputAddOn-item&quot;&gt;...&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.InputAddOn &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.InputAddOn-field &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="悬挂式布局"><a href="#悬挂式布局" class="headerlink" title="悬挂式布局"></a>悬挂式布局</h3><p>有时，主栏的左侧或右侧，需要添加一个图片栏。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/41165031-file_1493636283290_9b33.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;Media&quot;&gt;</div><div class="line">  &lt;img class=&quot;Media-figure&quot; src=&quot;&quot; alt=&quot;&quot;&gt;</div><div class="line">  &lt;p class=&quot;Media-body&quot;&gt;...&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.Media &#123;</div><div class="line">  display: flex;</div><div class="line">  align-items: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Media-figure &#123;</div><div class="line">  margin-right: 1em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Media-body &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="固定的底栏"><a href="#固定的底栏" class="headerlink" title="固定的底栏"></a>固定的底栏</h3><p>有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间，这时可以采用Flex布局，让底栏总是出现在页面的底部。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/14451373-file_1493636429347_15e58.png" alt=""></p>
<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body class=&quot;Site&quot;&gt;</div><div class="line">  &lt;header&gt;...&lt;/header&gt;</div><div class="line">  &lt;main class=&quot;Site-content&quot;&gt;...&lt;/main&gt;</div><div class="line">  &lt;footer&gt;...&lt;/footer&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.Site &#123;</div><div class="line">  display: flex;</div><div class="line">  min-height: 100vh;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Site-content &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>每行的项目数固定，会自行分行。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-1/51166331-file_1493636541332_edb5.png" alt=""></p>
<p>CSS的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 150px;</div><div class="line">  background-color: black;</div><div class="line">  display: flex;</div><div class="line">  flex-flow: row wrap;</div><div class="line">  align-content: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.child &#123;</div><div class="line">  box-sizing: border-box;</div><div class="line">  background-color: white;</div><div class="line">  flex: 0 0 25%;</div><div class="line">  height: 50px;</div><div class="line">  border: 1px solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇 by 阮一峰</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flex布局入门(一)]]></title>
      <url>http://jianwl.com/2017/05/01/Flex%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网页布局(layout)是<code>CSS</code>的一个重点应用</p>
<p><img src="http://i2.muimg.com/567571/93944116677e563b.png" alt=""></p>
<p>布局的传统解决方案，基于盒状模型，依赖<code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便。比如，垂直居中就不容易实现。</p>
<p>2009年，W3C提出一种新的方案 – Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<p>Flex布局将成为未来布局的首选方案，本文介绍它的语法，下一篇文章给出常见布局的<code>Flex</code>写法。</p>
<h3 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h3><p><code>Flex</code>是<code>Flexible Box</code>，意为“弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>行内元素也可以使用Flex布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Webkit内核浏览器，必须加上<code>-webkit</code>前缀。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	display: -webkit-flex; /* Safari */</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性都将失效。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>采用Flex布局的元素，称为Flex容器(flex container)，简称“容器”。它的所有子元素自动称为容器成员，称为Flex项目(flex item)，简称“项目”。</p>
<p><img src="http://i2.muimg.com/567571/288f8307e2da445e.png" alt=""></p>
<p>容器默认存在两根轴：水平的主轴(main axis)和垂直的交叉轴(crow axis)。主轴的开始位置(与边框的交叉点)叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认延主轴排序，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><p>以下6个属性值设置在容器上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flex-direction</div><div class="line">flex-wrap</div><div class="line">flex-flow</div><div class="line">jusitify-content</div><div class="line">align-items</div><div class="line">align-content</div></pre></td></tr></table></figure>
<h4 id="1-flex-direction属性"><a href="#1-flex-direction属性" class="headerlink" title="1) flex-direction属性"></a>1) flex-direction属性</h4><p><code>flex-direction</code>属性决定主轴的方向(即项目的排列方向)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/3ea0e291bfd8a635.png" alt=""></p>
<p>它可能有4个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">row(默认值)： 主轴的水平方向，起点在左端。</div><div class="line"></div><div class="line">row-reverse: 主轴的水平方向，起点在右端。</div><div class="line"></div><div class="line">column: 主轴为垂直方向，起点在上沿</div><div class="line"></div><div class="line">column-reverse: 主轴为垂直方向，起点在下沿。</div></pre></td></tr></table></figure>
<h4 id="2）flex-wrap属性"><a href="#2）flex-wrap属性" class="headerlink" title="2）flex-wrap属性"></a>2）flex-wrap属性</h4><p>默认情况下，项目都排在一条线(又称为“轴线”)上，<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p><img src="http://i4.buimg.com/567571/8572c78874a5c6b3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能取三个值:</p>
<p>(1) <code>nowrap</code>(默认)：不换行。</p>
<p><img src="http://i4.buimg.com/567571/afd3df650ad2b30d.png" alt=""></p>
<p>(2) <code>wrap</code>：换行，第一行在上方</p>
<p><img src="http://i1.piimg.com/567571/f99a004cf748aaaf.png" alt=""></p>
<p>(3) <code>wrap-reverse</code>: 换行，第一行在下方。</p>
<p><img src="http://i4.buimg.com/567571/c748e0c92c0a3fa5.png" alt=""></p>
<h4 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3) flex-flow"></a>3) flex-flow</h4><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-justify-content属性"><a href="#4-justify-content属性" class="headerlink" title="4) justify-content属性"></a>4) justify-content属性</h4><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/75861f2b490af1a7.png" alt=""></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关，下面假设主轴为从左到右。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">flex-start(默认值)： 左对齐</div><div class="line"></div><div class="line">flex-end: 右对齐</div><div class="line"></div><div class="line">center: 居中</div><div class="line"></div><div class="line">space-between: 两端对齐，项目之间的间隔都相等</div><div class="line"></div><div class="line">space-around: 每个项目两侧的间隔相等，所以项目之间的间隔比项目与边框的间隔大一倍。</div></pre></td></tr></table></figure>
<h4 id="5-align-items属性"><a href="#5-align-items属性" class="headerlink" title="5) align-items属性"></a>5) align-items属性</h4><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/6d0bc32cb1eb12fc.png" alt=""></p>
<p>它可能取5个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flex-start: 交叉轴的起点对齐。</div><div class="line">flex-end: 交叉轴的终点对齐。</div><div class="line">center: 交叉轴的中点对齐。</div><div class="line">baseline: 项目的第一行文字的基线对齐。</div><div class="line">stretch(默认值): 如果项目未设置高度或设为auto，将占满整个容器的高度。</div></pre></td></tr></table></figure>
<h4 id="6）align-content属性"><a href="#6）align-content属性" class="headerlink" title="6）align-content属性"></a>6）align-content属性</h4><p><code>align-content</code>属性定义了多跟轴线的对齐方式，如果项目只有一个轴线，该属性不起作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">	align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/f8e7c4d69794f23a.png" alt=""></p>
<p>该属性值可能取6个值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flex-start: 与交叉轴的起点对齐。</div><div class="line">flex-end: 与交叉轴的终点对齐。</div><div class="line">center: 与交叉轴的中点对齐。</div><div class="line">space-between:与交叉轴两端对齐，轴线之间的间隔平均分布</div><div class="line">space-around:每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。</div><div class="line">stretch(默认值): 轴线占满整个交叉轴。</div></pre></td></tr></table></figure>
<h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><p>以下6个属性设置在项目上.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">order</div><div class="line"></div><div class="line">flex-grow</div><div class="line"></div><div class="line">flex-shrink</div><div class="line"></div><div class="line">flex-basis</div><div class="line"></div><div class="line">flex</div><div class="line"></div><div class="line">align-self</div></pre></td></tr></table></figure>
<h4 id="1-order属性"><a href="#1-order属性" class="headerlink" title="1) order属性"></a>1) order属性</h4><p><code>order</code>属性定义项目的排列顺序，数值越小，排列越靠前，默认为0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line"> order: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/7f587ff9c90bbb53.png" alt=""></p>
<h4 id="2-flex-grow属性"><a href="#2-flex-grow属性" class="headerlink" title="2) flex-grow属性"></a>2) flex-grow属性</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-grow: &lt;number&gt;; /* default */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/1970f38cd94a26f5.png" alt=""></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间(如果有的话)，如果一个项目的<code>flex-grow</code>属性为2，其他属性都为1，则牵着占据的剩余空间将比其他项多一倍。</p>
<h4 id="3）flex-shrink属性"><a href="#3）flex-shrink属性" class="headerlink" title="3）flex-shrink属性"></a>3）flex-shrink属性</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-shrink: &lt;number&gt;; /* default 1*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/359ac6d037d1a438.png" alt=""></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小，如果一个项目的<code>flex-shrink</code>属性为0，其他项都为1，则空间不足时，前者会不断缩小。负值对该属性无效。</p>
<h4 id="4）flex-basis属性"><a href="#4）flex-basis属性" class="headerlink" title="4）flex-basis属性"></a>4）flex-basis属性</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间(main size)。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>,即项目的本来大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值(比如350px)，则项目将占据固定空间。</p>
<h4 id="5）flex属性"><a href="#5）flex属性" class="headerlink" title="5）flex属性"></a>5）flex属性</h4><p><code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>，后两个属性可选。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex: none | [&lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该属性有两个快捷键：<code>auto</code>(<code>1 1 auto</code>)和none(<code>0 0  auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="6-align-self-属性"><a href="#6-align-self-属性" class="headerlink" title="6) align-self 属性"></a>6) align-self 属性</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性，默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/ace048e9e73b8add.png" alt=""></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程 by 阮一峰</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS入门]]></title>
      <url>http://jianwl.com/2017/04/29/CSS%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="1-什么是CSS"><a href="#1-什么是CSS" class="headerlink" title="1. 什么是CSS"></a>1. 什么是CSS</h3><p><code>CSS</code>是一门指定文档该如何呈现给用户的语言。当你的浏览器请求页面时，服务器会查询数据库生成文档，将散落在众多文件中的文档碎片搜集起来。 </p>
<p><code>创建一个文档范例：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">		&lt;title&gt;Sample document&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;strong&gt;c&lt;/strong&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="2-为何使用CSS？"><a href="#2-为何使用CSS？" class="headerlink" title="2.为何使用CSS？"></a>2.为何使用CSS？</h3><p>CSS将文档信息的内容和如何展示它的细节相分离，使得避免重复、更容易维护，同时实现为了不同的目的，使用不同的样式而内容相同。</p>
<h4 id="1-连接文档和样式表"><a href="#1-连接文档和样式表" class="headerlink" title="1) 连接文档和样式表"></a>1) 连接文档和样式表</h4><p>在<code>style1.css</code>文件中保存如下行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strong &#123;color:red;&#125;</div></pre></td></tr></table></figure>
<p>在文档中引入样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">		&lt;title&gt;Sample document&lt;/title&gt;</div><div class="line">		&lt;link rel=&quot;stylesheet&quot; href=&quot;style1.css&quot;&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;strong&gt;c&lt;/strong&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="3-CSS基础知识"><a href="#3-CSS基础知识" class="headerlink" title="3. CSS基础知识"></a>3. CSS基础知识</h3><h4 id="1-盒模型"><a href="#1-盒模型" class="headerlink" title="1) 盒模型"></a>1) 盒模型</h4><p><img src="http://i2.muimg.com/567571/867bf24d7d50d14b.png" alt=""></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> width</td>
<td>内容盒的宽度</td>
</tr>
<tr>
<td> height</td>
<td>内容盒的高度</td>
</tr>
<tr>
<td> padding</td>
<td>内边距，内容盒的外边缘与边框的内边缘之间</td>
</tr>
<tr>
<td> border</td>
<td>位于内边距的外边缘以及外边距的内边缘之间</td>
</tr>
<tr>
<td> margin</td>
<td>外边距</td>
</tr>
</tbody>
</table>
<p> <code>实战</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	body &#123;</div><div class="line">	  margin: 0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	#wrapper * &#123;</div><div class="line">	  padding: 20px;</div><div class="line">	  font-size: 20px;</div><div class="line">	  border: 20px solid rgba(0,0,0,0.5);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* specific boxes */</div><div class="line"></div><div class="line">	#wrapper header, #wrapper footer &#123;</div><div class="line">	  background-color: blue;</div><div class="line">	  color: white;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	#wrapper main &#123;</div><div class="line">	  background-color: yellow;</div><div class="line">	&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div id=&quot;wrapper&quot;&gt;</div><div class="line">		  &lt;header&gt;Header&lt;/header&gt;</div><div class="line">		  &lt;main&gt;Main content&lt;/main&gt;</div><div class="line">		  &lt;footer&gt;Footer&lt;/footer&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i1.piimg.com/567571/f29c0ef1d9e3a821.png" alt=""></p>
<p><code>要点：</code></p>
<ul>
<li>当内容的宽度<strong>大于</strong>盒模型的<strong>总宽度</strong>时，<strong>溢出内容如何处理？</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># overflow属性，三种属性值</div><div class="line">auto: 溢出内容会自动隐藏，单行显示，变滚轮显示，让用户可以看到所有内容。</div><div class="line">hidden: 溢出内容自动隐藏</div><div class="line">visible: 溢出内容展示在盒模型之外，这个配置是默认的；</div></pre></td></tr></table></figure>
<ul>
<li>只有块级元素，才能设置宽度，长度等属性，CSS设置为块级元素，用<code>display</code>属性。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># display有三个属性值</div><div class="line">block 「块盒」：整个盒模型是基于块盒之上的，块盒内可以设置自己的长、宽。</div><div class="line">inline 「行内盒」：在行内盒中设置长、宽无效，border、padding是基于text的。</div><div class="line">inline-block「行内块状盒」：结合了block与inline两种属性</div></pre></td></tr></table></figure>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		p &#123;</div><div class="line">		  padding : 1em;</div><div class="line">		  border  : 1px solid black;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		span &#123;</div><div class="line">		  padding : 0.5em;</div><div class="line">		  border  : 1px solid green;</div><div class="line">		  height: 50px;</div><div class="line">		  /* That makes the box visible, regardless of its type */</div><div class="line">		  background-color: yellow;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.inline       &#123; display: inline;       &#125;</div><div class="line">		.block        &#123; display: block;        &#125;</div><div class="line">		.inline-block &#123; display: inline-block; &#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;</div><div class="line">		   Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		   &lt;span class=&quot;inline&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		   Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line"></div><div class="line">		&lt;p&gt;</div><div class="line">		  Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		  &lt;span class=&quot;block&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line"></div><div class="line">		&lt;p&gt;</div><div class="line">		  Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">		  &lt;span class=&quot;inline-block&quot;&gt;Mauris tempus turpis id ante mollis dignissim.&lt;/span&gt;</div><div class="line">		  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.</div><div class="line">		&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>演示效果：</p>
<p><img src="http://i4.buimg.com/567571/f6bf997532ac0d5e.png" alt=""></p>
<h4 id="2）文本对齐"><a href="#2）文本对齐" class="headerlink" title="2）文本对齐"></a>2）文本对齐</h4><p><code>text-align</code>属性终于控制文本对齐，它有以下4个属性值；</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">left: 文本左对齐</div><div class="line">right: 文本右对齐</div><div class="line">center: 文本居中对齐</div><div class="line">justify: 文本扩展使得所有行的文本宽度一致</div></pre></td></tr></table></figure>
<p> <code>实战:</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		p &#123;</div><div class="line">		  padding : 1em;</div><div class="line">		  border  : 1px solid black;</div><div class="line">		&#125;</div><div class="line">		.right  &#123; text-align: right; &#125;</div><div class="line">		.center &#123; text-align: center;        &#125;</div><div class="line">		.left &#123; text-align: left; &#125;</div><div class="line">		.justify&#123; text-align: justify; &#125;</div><div class="line">		strong &#123;color: red;&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Learn CSS&lt;/strong&gt;&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;left&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;right&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;justify&quot;&gt;Learn CSS&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p> <code>运行结果:</code></p>
<p><img src="http://i4.buimg.com/567571/bd335169ff70189e.png" alt=""></p>
<h4 id="3-链接样式"><a href="#3-链接样式" class="headerlink" title="3) 链接样式"></a>3) 链接样式</h4><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a:link</code></td>
<td>未访问时的样式</td>
</tr>
<tr>
<td> <code>a:visited</code></td>
<td>已经访问过的样式</td>
</tr>
<tr>
<td><code>a:hover</code></td>
<td>浮于链接上的样式</td>
</tr>
<tr>
<td> <code>a:focus</code></td>
<td>通过<code>tab</code>选中该链接时的样式</td>
</tr>
<tr>
<td> <code>a:active</code></td>
<td>链接被触发时的样式</td>
</tr>
</tbody>
</table>
<p> <code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		body &#123;</div><div class="line">		  width: 300px;</div><div class="line">		  margin: 0 auto;</div><div class="line">		  font-size: 1.2rem;</div><div class="line">		  font-family: sans-serif;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		p &#123;</div><div class="line">		  line-height: 1.4;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a &#123;</div><div class="line">		  outline: none;</div><div class="line">		  text-decoration: none;</div><div class="line">		  padding: 2px 1px 0;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:link &#123;</div><div class="line">		  color: #265301;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:visited &#123;</div><div class="line">		  color: #437A16;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:focus &#123;</div><div class="line">		  border-bottom: 1px solid;</div><div class="line">		  background: #BAE498;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:hover &#123;</div><div class="line">		  border-bottom: 1px solid;     </div><div class="line">		  background: #CDFEAA;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a:active &#123;</div><div class="line">		  background: #265301;</div><div class="line">		  color: #CDFEAA;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;There are several browsers available, such as </div><div class="line">			&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot;&gt;MozillaFirefox&lt;/a&gt;, </div><div class="line">			&lt;a href=&quot;https://www.google.com/chrome/index.html&quot;&gt;Google Chrome&lt;/a&gt;, and</div><div class="line">			&lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot;&gt;Microsoft Edge&lt;/a&gt;.</div><div class="line">		&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p>通过<code>TAB键选中：即a:focus效果：</code></p>
<p><img src="http://i4.buimg.com/567571/e32e85f5430f6c0e.png" alt=""></p>
<h4 id="4-CSS布局"><a href="#4-CSS布局" class="headerlink" title="4) CSS布局"></a>4) CSS布局</h4><h5 id="1-浮动"><a href="#1-浮动" class="headerlink" title="1 浮动"></a>1 浮动</h5><p>浮动技术允许元素浮动到另外一个元素的左侧或右侧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># float属性有4个属性值:</div><div class="line">left: 将元素浮动到左侧</div><div class="line">right: 将元素浮动到右侧</div><div class="line">none: 默认值，不浮动</div><div class="line">inherit: 继承父元素的浮动元素</div></pre></td></tr></table></figure>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		.blockA &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid;</div><div class="line">			float:left;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockB &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid red;</div><div class="line">			float: left;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockC &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid blue;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.blockD &#123;</div><div class="line">			height: 100px;</div><div class="line">			width: 100px;</div><div class="line">			text-align: center;</div><div class="line">			border: 5px solid green;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">		</div><div class="line">	&lt;body&gt;</div><div class="line">		</div><div class="line">		&lt;div&gt;</div><div class="line">			&lt;div class=&quot;blockC&quot;&gt;C&lt;/div&gt;</div><div class="line">			&lt;div class=&quot;blockD&quot;&gt;D&lt;/div&gt;	</div><div class="line">		&lt;/div&gt;</div><div class="line">		</div><div class="line">		&lt;div&gt;			</div><div class="line">			&lt;div class=&quot;blockA&quot;&gt;A&lt;/div&gt;</div><div class="line">			&lt;div class=&quot;blockB&quot;&gt;B&lt;/div&gt;</div><div class="line">		&lt;/div&gt;		</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i2.muimg.com/567571/894f4e1cd0702d00.png" alt=""></p>
<h5 id="2-定位技术"><a href="#2-定位技术" class="headerlink" title="2 定位技术"></a>2 定位技术</h5><p>定位技术允许我们将一个元素从它在页面的原始位置准确移动到另一个位置。</p>
<p>有4中主要的定位类型：</p>
<ul>
<li>静态定位(static)是每个元素默认的属性</li>
<li>相对定位(relative): 以元素自身作比较，进行移动;</li>
<li>绝对定位(absolute): 以第一个为<code>absolute</code>元素做参考，进行移动,且绝对定位是脱离文档流的； </li>
<li>固定定位(fixed)与绝对定位非常类似，除了它是将一个元素相对浏览器视口固定。</li>
</ul>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		body &#123;</div><div class="line">		  width: 500px;</div><div class="line">		  margin: 0 auto;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		p &#123;</div><div class="line">		  background: aqua;</div><div class="line">		  border: 3px solid blue;</div><div class="line">		  padding: 10px;</div><div class="line">		  margin: 10px;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.positioned &#123;</div><div class="line">		  position: relative;</div><div class="line">		  background: yellow;</div><div class="line">		  top: 30px;</div><div class="line">		  left: 30px;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		.absolute-test&#123;</div><div class="line">			position: absolute;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		.abosolute_div&#123;</div><div class="line">			position: absolute;</div><div class="line">			background: red;</div><div class="line">			text-align: center;</div><div class="line">			height: 50px;</div><div class="line">			width: 50px;</div><div class="line">			top: 0px;</div><div class="line">			left: 0px;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">		</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;p&gt;I am a basic block level element.&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;positioned&quot;&gt;I am a basic block level element.&lt;/p&gt;</div><div class="line">		&lt;p class=&quot;absolute-test&quot;&gt;I am a basic block level element.&lt;/p&gt;	</div><div class="line">		&lt;p class=&quot;abosolute_div&quot;&gt;小哈&lt;/p&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://i1.piimg.com/567571/2f91f17c3c6ceb5a.png" alt=""></p>
<h5 id="3-z-index"><a href="#3-z-index" class="headerlink" title="3 z-index"></a>3 z-index</h5><p>当元素开始重叠，什么时候决定哪些元素出现在其他元素的顶部。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">z-index:1</div></pre></td></tr></table></figure>
<h4 id="4-优先级"><a href="#4-优先级" class="headerlink" title="4) 优先级"></a>4) 优先级</h4><p>优先级就是分配指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。而当优先级与多个CSS声明中任意一个声明的优先级相等的时候，CSS中最后的那个声明将会被应用到元素上。</p>
<p><code>1. !important</code> 规则例外</p>
<p>当在一个样式上使用<code>!important</code>规则时，该样式会覆盖CSS中任何其他的声明。</p>
<p>经验法则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">永远不要在全站范围的css上使用!important</div><div class="line">只在需要覆盖全站或外展css的特定页面中使用!important</div><div class="line">永远不要在你的插件中使用!important</div><div class="line">要优化考虑使用样式规则的优先级来解决问题而不是!important</div></pre></td></tr></table></figure>
<h4 id="5-CSS简写属性"><a href="#5-CSS简写属性" class="headerlink" title="5) CSS简写属性"></a>5) CSS简写属性</h4><h5 id="1-background有以下属性"><a href="#1-background有以下属性" class="headerlink" title="1. background有以下属性"></a>1. background有以下属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">background-color: #000;</div><div class="line">background-image: url(images/bg.gif);</div><div class="line">background-repeat: no-repeat;</div><div class="line">background-position: top right;</div></pre></td></tr></table></figure>
<p>简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: #000 url(images/bg.gif) no-repeat top right;</div></pre></td></tr></table></figure>
<h5 id="2-Font属性"><a href="#2-Font属性" class="headerlink" title="2. Font属性"></a>2. Font属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">font-style: italic;</div><div class="line">font-weight: bold;</div><div class="line">font-size: .8em;</div><div class="line">line-height: 1.2;</div><div class="line">font-family: Arial, sans-serif;</div></pre></td></tr></table></figure>
<p>简写为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font: italic bold .8em/1.2 Arial, sans-serif;</div></pre></td></tr></table></figure>
<h5 id="3-Border属性"><a href="#3-Border属性" class="headerlink" title="3. Border属性"></a>3. Border属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">border-width: 1px;</div><div class="line">border-style: solid;</div><div class="line">border-color: #000;</div></pre></td></tr></table></figure>
<p>简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border: 1px solid #000;</div></pre></td></tr></table></figure>
<h5 id="4-Margin和Padding属性"><a href="#4-Margin和Padding属性" class="headerlink" title="4. Margin和Padding属性"></a>4. Margin和Padding属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">margin-top: 10px;</div><div class="line">margin-right: 5px;</div><div class="line">margin-bottom: 10px;</div><div class="line">margin-left: 5px;</div></pre></td></tr></table></figure>
<p>简写为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">margin: 10px 5px 10px 5px;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties" target="_blank" rel="external">CSS教程 by MND</a> </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[缓存使用规范]]></title>
      <url>http://jianwl.com/2017/04/26/%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="1-使用规则"><a href="#1-使用规则" class="headerlink" title="1. 使用规则"></a>1. 使用规则</h3><ul>
<li>尽量不要强依赖缓存「除非有特殊需求」，参考下面的缓存使用基本方法</li>
<li>如果缓存更新丢失会导致缓存与DB中的数据不一致，<strong>如果允许数据出现短期不一致，通过设置缓存的超时时间</strong></li>
<li>如果缓存采用的Redis，由于Redis是单线程，要特别注意不要放置特别大的对象「超过1K」，避免引起堵塞。</li>
<li>在极端高并发的情况下，考虑使用本地缓存<ul>
<li><strong>针对Java的应用程序，可以考虑使用Guava Cache，Ehcache，ConcurrentHashMap。使用前要做好容量的评估。</strong></li>
<li>针对Python应用程序，要特别Python的多进程模式（本地缓存在某个进程中都有一份copy，在做容量估算，要乘以进程数）</li>
</ul>
</li>
<li>关注高并发下的缓存穿透问题</li>
</ul>
<h3 id="2-缓存使用基本写法"><a href="#2-缓存使用基本写法" class="headerlink" title="2. 缓存使用基本写法"></a>2. 缓存使用基本写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def get_city(city_id):</div><div class="line">    cache_key = &apos;city:&#123;0&#125;&apos;.format(city_id)</div><div class="line">    try:</div><div class="line">        cache_value = cache.get(cache_key)</div><div class="line">        if cache_value is not None:</div><div class="line">            return cache_value</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">     </div><div class="line">    cache_value = get_city_from_db(city_id)</div><div class="line">    try:</div><div class="line">        cache.set(cache_key, cache_value)</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">    return cache_value</div></pre></td></tr></table></figure>
<h3 id="3-高并发下缓存穿透问题"><a href="#3-高并发下缓存穿透问题" class="headerlink" title="3. 高并发下缓存穿透问题"></a>3. 高并发下缓存穿透问题</h3><p>如果因缓存不命中，导致大量的查询请求穿透到DB中，造成DB很大的压力，可能会引发雪崩效应。缓存不命中有几种情况</p>
<ul>
<li>大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID</li>
<li>某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。</li>
<li>在同一时间点有大量的缓存key过期或者被剔除</li>
</ul>
<h4 id="情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID"><a href="#情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID" class="headerlink" title="情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID"></a>情况一：大量访问的缓存数据在DB中不存在导致的，例如：某个不存在ID</h4><p>当该缓存数据不存在时，不是不设置缓存，而是通过设置某个默认值，例如：$$，来避免缓存穿透。</p>
<h4 id="情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。"><a href="#情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。" class="headerlink" title="情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。"></a>情况二：某个大量访问的缓存key因过期或者缓存内存不足，导致的缓存失效。</h4><ul>
<li>根据实际的业务情况，不进行缓存穿透，缓存获取不到或者获取失败的情况下，直接返回空的结果。</li>
<li>将缓存设置为永不过期（提供一个缓存有效时间单独key，或者设置一个单独的字段来标示缓存的有效时间），根据业务的实际情况，来选择是否采用过期的数据</li>
<li>通过对缓存key的进行加锁访问，来控制缓存穿透到数据库的并发。这在一定程度上会降低应用的性能，容易产生请求堆积。</li>
<li>通过定时等手段保证缓存永不过期</li>
</ul>
<h4 id="情况三：在同一时间点有大量的缓存key过期或者被剔除"><a href="#情况三：在同一时间点有大量的缓存key过期或者被剔除" class="headerlink" title="情况三：在同一时间点有大量的缓存key过期或者被剔除"></a>情况三：在同一时间点有大量的缓存key过期或者被剔除</h4><ul>
<li>尽量将缓存过期时间均匀分布，可以通过随机设置一个过期时间</li>
<li>如果因缓存服务器宕机导致的大量key过期，那么需要将缓存服务器做到高可用</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://blog.jobbole.com/83439/" target="_blank" rel="external">那些年我们一起追过的缓存写法</a></li>
<li><a href="http://www.tuicool.com/articles/7jMZFzj" target="_blank" rel="external">缓存穿透与缓存雪崩</a></li>
<li><a href="http://www.tuicool.com/articles/Y36vaib" target="_blank" rel="external">再谈缓存穿透、缓存并发、热点缓存之最佳招式</a></li>
</ol>
<p><a href="http://bdms.hylin.dev.imdada.cn/" target="_blank" rel="external">http://bdms.hylin.dev.imdada.cn/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库开发规范]]></title>
      <url>http://jianwl.com/2017/04/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h3><h4 id="1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割"><a href="#1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割" class="headerlink" title="1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割"></a>1）表名、字段名、索引名使用小写字母、数字，名称偏长的采用下划线分割</h4><ul>
<li>MYSQL有配置参数lower_case_table_names,不可动态更改，linux默认为0，即库表名以实际情况存储，大小写敏感。如果是1，以小写存储，大小写不敏感。如果是2，以实际情况存储，但以小写比较；</li>
<li>如果大小写混用使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。</li>
<li>字段名显式区分大小写，但实际使用不区分，即不可以建立两个名字一样但大小写不一样的字段。</li>
<li>为了统一规范，库名、表名、字段名使用小写字母。</li>
</ul>
<h4 id="2）表名、字段名不超过32个字符"><a href="#2）表名、字段名不超过32个字符" class="headerlink" title="2）表名、字段名不超过32个字符"></a>2）表名、字段名不超过32个字符</h4><ul>
<li>库名、表名、字段名支持最多64个字符，但为了统一规范，易于辨识以及减少传输量，禁止超过32个字符</li>
</ul>
<h4 id="3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。"><a href="#3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。" class="headerlink" title="3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。"></a>3）库名、表名、字段名必须见名知意。命名与业务、产品等相关联。</h4><h4 id="4-索引名称采用idx-前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。"><a href="#4-索引名称采用idx-前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。" class="headerlink" title="4) 索引名称采用idx_前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。"></a>4) 索引名称采用<code>idx_</code>前缀，之后顺序跟随索引的字段名，字段名直接以下划线分割。</h4><ul>
<li>基于这些规范的正确实例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS `mall_coupon_order_map` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;id&apos;,</div><div class="line">  `coupon_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;优惠券编号&apos;,</div><div class="line">  `order_unit_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;订单号&apos;,</div><div class="line">  `bill_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;账单号&apos;,</div><div class="line">  `is_del` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;删除状态：0-正常，1-已删除&apos;,</div><div class="line">  `create_time` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_coupon_bill` (`coupon_id`, `bill_id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商城-使用优惠券与订单映射表&apos;;</div></pre></td></tr></table></figure>
<h4 id="5-不适用保留字，关键字-很重要！"><a href="#5-不适用保留字，关键字-很重要！" class="headerlink" title="5) 不适用保留字，关键字(很重要！)"></a>5) 不适用保留字，关键字(很重要！)</h4><ul>
<li>参考网址：<a href="http://dev.mysql.com/doc/refman/5.6/en/keywords.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/keywords.html</a></li>
<li>当库名、表名、字段名等属性含有保留字时，SQL语句必须用<strong>反引用</strong>属性名称，这将是的SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</li>
</ul>
<h4 id="6-对临时表、备份表的命名规则"><a href="#6-对临时表、备份表的命名规则" class="headerlink" title="6) 对临时表、备份表的命名规则"></a>6) 对临时表、备份表的命名规则</h4><ul>
<li>临时库、表必须以tmp为前缀，并已日期为后缀。例如：tmp_test01_20160704</li>
<li>备份库、表必须以bak为前缀，并以日期为后缀。例如：bak_test01_20160704</li>
</ul>
<h4 id="7-保留字使用全大写；SQL语句中，字符串使用单引号「’’」"><a href="#7-保留字使用全大写；SQL语句中，字符串使用单引号「’’」" class="headerlink" title="7) 保留字使用全大写；SQL语句中，字符串使用单引号「’’」"></a>7) 保留字使用全大写；SQL语句中，字符串使用单引号「’’」</h4><ul>
<li>典例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-- 正确</div><div class="line"> SELECT id, title FROM xiaoqu WHERE id = 1 </div><div class="line"> SELECT id, title FROM xiaoqu WHERE areacode = &apos;000100010001&apos;</div><div class="line">-- 错误</div><div class="line">select ID, title from XiaoQu where id = 1</div><div class="line">SELECT id, title FROM xiaoqu WHERE areacode = &quot;000100010001&quot;</div></pre></td></tr></table></figure>
<h4 id="8-存储实体数据的表，名称使用名词，单数"><a href="#8-存储实体数据的表，名称使用名词，单数" class="headerlink" title="8) 存储实体数据的表，名称使用名词，单数"></a>8) 存储实体数据的表，名称使用名词，单数</h4><h4 id="9-存储实体表多对多对应关系的表，名称建议采用noun-verb-noun这样的模式。例如：member-like-property、property-has-tag。"><a href="#9-存储实体表多对多对应关系的表，名称建议采用noun-verb-noun这样的模式。例如：member-like-property、property-has-tag。" class="headerlink" title="9) 存储实体表多对多对应关系的表，名称建议采用noun_verb_noun这样的模式。例如：member_like_property、property_has_tag。"></a>9) 存储实体表多对多对应关系的表，名称建议采用<code>noun_verb_noun</code>这样的模式。例如：<code>member_like_property</code>、<code>property_has_tag</code>。</h4><h3 id="表设计规范"><a href="#表设计规范" class="headerlink" title="表设计规范"></a>表设计规范</h3><h4 id="1-MYSQL存储引用使用InnoDB"><a href="#1-MYSQL存储引用使用InnoDB" class="headerlink" title="1) MYSQL存储引用使用InnoDB"></a>1) MYSQL存储引用使用InnoDB</h4><ul>
<li>不用纠结，没有特殊原因的情况下，作为在线交易系统「OLTP」的MYSQL使用InnoDB引擎</li>
<li>InnoDB有支持事务、行级锁、还有更好的数据恢复能力，更好的并发性能，同时对多核、大内存、SSD等硬件支持更好，支持数据热备份等。</li>
</ul>
<h4 id="2）表字符集使用UTF-8字符集，后续会用UTF8MB4"><a href="#2）表字符集使用UTF-8字符集，后续会用UTF8MB4" class="headerlink" title="2）表字符集使用UTF-8字符集，后续会用UTF8MB4"></a>2）表字符集使用UTF-8字符集，后续会用UTF8MB4</h4><h4 id="3）正确使用时间类型"><a href="#3）正确使用时间类型" class="headerlink" title="3）正确使用时间类型"></a>3）正确使用时间类型</h4><ul>
<li>精确到秒的时间采用<code>TIMESTAMP</code>,自动更新时间</li>
<li>精确到日期使用<code>DATE</code> </li>
<li>一般不使用<code>DATETIME</code>类型</li>
<li>不允许使用字符串类型存储时间</li>
<li>如果想对时间列建索引，还是用int类型，节省空间，效率高，适合需要大量时间范围的数据表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">`create_time` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `update_time` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_settle_order_id` (`settle_order_id`),</div><div class="line">  KEY `idx_plateform_user_type_user_id` (`plateform`,`user_type`,`user_id`),</div><div class="line">  KEY `idx_create_time` (`create_time`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=195 DEFAULT CHARSET=utf8 COMMENT=&apos;退款结算表&apos;;</div></pre></td></tr></table></figure>
<h4 id="4-字段定义为NOT-NULL，同时设置DEFAULT值。"><a href="#4-字段定义为NOT-NULL，同时设置DEFAULT值。" class="headerlink" title="4) 字段定义为NOT NULL，同时设置DEFAULT值。"></a>4) 字段定义为NOT NULL，同时设置DEFAULT值。</h4><ul>
<li>不是必须要设置NULL，就将字段设置NOT NULL</li>
<li>设置为<code>NOT NULL</code>的字段，需要设置一个缺省值</li>
<li>B树索引不会存储<code>NULL</code>值，所以如果索引字段可以为NULL，索引效率会下降。</li>
<li>建议用0、特殊值或空串代替NULL值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user_feedback` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `uid` int(11) NOT NULL COMMENT &apos;用户id&apos;,</div><div class="line">  `phone` varchar(20) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;手机号&apos;,</div><div class="line">  `feedback_status` int(11) NOT NULL DEFAULT &apos;10&apos; COMMENT &apos;反馈处理状态&apos;,</div><div class="line">  `feedback_type` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;反馈类型&apos;,</div><div class="line">  `supp_info` varchar(800) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;补充内容&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_phone` (`phone`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;意见反馈&apos;;</div></pre></td></tr></table></figure>
<h4 id="5-字段个数不超过32个"><a href="#5-字段个数不超过32个" class="headerlink" title="5) 字段个数不超过32个"></a>5) 字段个数不超过32个</h4><ul>
<li>一个表有很多很多字段，不仅占用空间，而且不方便，请在认真考虑设计是否正确</li>
</ul>
<h4 id="6）不适用浮点类型-FLOAT、DOUBLE"><a href="#6）不适用浮点类型-FLOAT、DOUBLE" class="headerlink" title="6）不适用浮点类型(FLOAT、DOUBLE)"></a>6）不适用浮点类型(FLOAT、DOUBLE)</h4><ul>
<li>没有充分的理由，不要使用浮点数</li>
<li>例如金额可以用分为单位，然后采用<code>INT</code>，如果依然要以元为单位，可以采用<code>DECIMAL</code></li>
</ul>
<h4 id="7-不直接存储图片、音频、视频等大容量内容"><a href="#7-不直接存储图片、音频、视频等大容量内容" class="headerlink" title="7) 不直接存储图片、音频、视频等大容量内容"></a>7) 不直接存储图片、音频、视频等大容量内容</h4><ul>
<li>请使用分布式文件系统来存储图片、音频、视频等内容，数据库内只存储文件位置</li>
</ul>
<h4 id="8）使用INT-UNSIGNED来存储Ipv4地址"><a href="#8）使用INT-UNSIGNED来存储Ipv4地址" class="headerlink" title="8）使用INT UNSIGNED来存储Ipv4地址"></a>8）使用INT UNSIGNED来存储Ipv4地址</h4><ul>
<li>使用 <code>INET_ATON</code> 将 IP 地址的字符串形式转换成数字形式；使用<code>INET_NTOA</code> 将 IP 地址数字形式转换成字符串形式，以便查看。</li>
<li>当程序使用自带的函数进行 IP 地址的字符串形式与数字形式之间的转换时，需要注意数字的存储类型至少应为 32 位的无符号整型（如 <code>uint32_t</code>)，并注意字节数。</li>
<li>当要查询某段的 IP 时，请参考以下示例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT user_id FROM user_ip</div><div class="line">WHERE ip &gt; INET_ATON(&apos;192.168.0.0&apos;) AND ip &lt; INET_ATON(&apos;192.168.255.255&apos;)</div></pre></td></tr></table></figure>
<h4 id="9-所有表都需要添加注释，每张表数据量建议控制在5000W以内"><a href="#9-所有表都需要添加注释，每张表数据量建议控制在5000W以内" class="headerlink" title="9) 所有表都需要添加注释，每张表数据量建议控制在5000W以内"></a>9) 所有表都需要添加注释，每张表数据量建议控制在5000W以内</h4><ul>
<li>除主键外的其他字段都需要增加注释</li>
<li>推荐采用英文标点，避免出现乱码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">--错误：</div><div class="line">CREATE TABLE `push_stat_key` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</div><div class="line">  `stat_key` varchar(32) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `description` varchar(256) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `owner_mail` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `owner_phone` varchar(64) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `del_flag` tinyint(4) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_stat_key` (`stat_key`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line">--正确：</div><div class="line">CREATE TABLE IF NOT EXISTS `mall_coupon_order_map` (</div><div class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;id&apos;,</div><div class="line">  `coupon_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;优惠券编号&apos;,</div><div class="line">  `order_unit_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;订单号&apos;,</div><div class="line">  `bill_id` bigint(20) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;账单号&apos;,</div><div class="line">  `is_del` smallint(6) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;删除状态：0-正常，1-已删除&apos;,</div><div class="line">  `create_time` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;创建时间&apos;,</div><div class="line">  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后更新时间&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_coupon_bill` (`coupon_id`, `bill_id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商城-使用优惠券与订单映射表&apos;;</div></pre></td></tr></table></figure>
<h4 id="10-禁止使用分区表"><a href="#10-禁止使用分区表" class="headerlink" title="10) 禁止使用分区表"></a>10) 禁止使用分区表</h4><ul>
<li>分区表对分区键有严格要求</li>
<li>分区表在表变大后，执行DDL、SHARDING、单表恢复等都变得更加困难</li>
<li>因此禁止使用分区表，并建议业务端手动SHARDING。</li>
</ul>
<h4 id="11）采用合适的分库分表策略，例如千库十表、十库表表等"><a href="#11）采用合适的分库分表策略，例如千库十表、十库表表等" class="headerlink" title="11）采用合适的分库分表策略，例如千库十表、十库表表等"></a>11）采用合适的分库分表策略，例如千库十表、十库表表等</h4><ul>
<li>采用合适的分库分表策略，有利于后期快速对数据库进行水平拆分</li>
<li>同时分库可以有效利用MYSQL的多线程复制特性</li>
</ul>
<h4 id="12-将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据"><a href="#12-将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据" class="headerlink" title="12) 将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据"></a>12) 将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据</h4><ul>
<li>分离冷热数据，有效利用缓存，防止读入无用的冷数据，较少磁盘IO</li>
<li>同时保证热数据常驻内存提高缓存命中率</li>
</ul>
<h4 id="13-强烈建议使用TINYINT来代替ENUM类型"><a href="#13-强烈建议使用TINYINT来代替ENUM类型" class="headerlink" title="13) 强烈建议使用TINYINT来代替ENUM类型"></a>13) 强烈建议使用TINYINT来代替ENUM类型</h4><ul>
<li>ENUM类型在需要修改或增加枚举值时，需要在线DDL，成本较大</li>
<li>ENUM列值如果含有数字类型，可能会引起默认值混淆</li>
</ul>
<h4 id="14-尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR-N-中的N表示字符数而非字节数"><a href="#14-尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR-N-中的N表示字符数而非字节数" class="headerlink" title="14) 尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR(N)中的N表示字符数而非字节数"></a>14) 尽可能不适用TEXT、BLOB类型；使用varchar类型尽可能小的，VARCHAR(N)中的N表示字符数而非字节数</h4><ul>
<li>没有特殊情况一般不用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">create table dj_trade_request_0</div><div class="line">(</div><div class="line">id bigint not null auto_increment comment &apos;自增id&apos;,</div><div class="line">order_type tinyInt not null comment &apos;订单类型:交易;取消交易&apos;,</div><div class="line">order_id bigint not null comment &apos;订单id&apos;,</div><div class="line">controller_scene_id int not null comment &apos;场景id&apos;,</div><div class="line">tradeIdentity bigint not null comment &apos;交易识别id&apos;,</div><div class="line">tradeIdentity_type int not null comment &apos;交易识别type&apos;,</div><div class="line">content text not null comment &apos;请求内容&apos;,</div><div class="line">status tinyInt not null comment &apos;状态&apos;,</div><div class="line">request_times int not null comment &apos;请求次数&apos;,</div><div class="line">execute_times int not null comment &apos;执行次数&apos;,</div><div class="line">identity_success_ids varchar(1024) not null comment &apos;处理成功ids&apos;,</div><div class="line">identity_fail_ids varchar(1024) not null comment &apos;处理失败ids&apos;,</div><div class="line">create_time bigint not null comment &apos;创建时间&apos;,</div><div class="line">update_time bigint not null comment &apos;更新时间&apos;,</div><div class="line">version int not null comment &apos;版本控制&apos;,</div><div class="line">primary key (id)</div><div class="line">)auto_increment = 1 ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;</div></pre></td></tr></table></figure>
<h4 id="15-区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY-UNSIGNED"><a href="#15-区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY-UNSIGNED" class="headerlink" title="15) 区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY UNSIGNED"></a>15) 区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围0-80时，使用TINY UNSIGNED</h4><ul>
<li>对某一列只有一两个值，例如要么是0，要么是1，可以使用tinyint</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table `supplier_contact` add column `addr_type` tinyint(4) not null default &apos;10&apos; comment &apos;地址类型，10 - 达达商家，20 - 达达快送&apos;;</div></pre></td></tr></table></figure>
<h4 id="16-使用VARBINARY存储大小写敏感的变长字符串或二进制内容"><a href="#16-使用VARBINARY存储大小写敏感的变长字符串或二进制内容" class="headerlink" title="16) 使用VARBINARY存储大小写敏感的变长字符串或二进制内容"></a>16) 使用VARBINARY存储大小写敏感的变长字符串或二进制内容</h4><ul>
<li>VARBINARY默认区分大小写,没有字符集概念,速度快</li>
</ul>
<h4 id="17-建议使用UNSIGNED存储非负数值"><a href="#17-建议使用UNSIGNED存储非负数值" class="headerlink" title="17) 建议使用UNSIGNED存储非负数值"></a>17) 建议使用UNSIGNED存储非负数值</h4><h3 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h3><h4 id="1-使用数字主键，不使用联合主键"><a href="#1-使用数字主键，不使用联合主键" class="headerlink" title="1) 使用数字主键，不使用联合主键"></a>1) 使用数字主键，不使用联合主键</h4><ul>
<li>存储实体数据的表，其主键应该是数字类型。</li>
<li>存储实体数据的表，不使用联合主键。</li>
<li>存储实体表间多对多对应关系的表（仅有两个字段）允许例外。</li>
</ul>
<h4 id="2-不使用外键"><a href="#2-不使用外键" class="headerlink" title="2) 不使用外键"></a>2) 不使用外键</h4><ul>
<li>所有的表不建立外键约束。</li>
</ul>
<h4 id="3-表必须有主键-推荐使用UNSIGNED自增列作为主键"><a href="#3-表必须有主键-推荐使用UNSIGNED自增列作为主键" class="headerlink" title="3) 表必须有主键,推荐使用UNSIGNED自增列作为主键"></a>3) 表必须有主键,推荐使用UNSIGNED自增列作为主键</h4><h4 id="4-联合索引字段数不超过-5-个（单个索引中的字段数不超过5个）"><a href="#4-联合索引字段数不超过-5-个（单个索引中的字段数不超过5个）" class="headerlink" title="4) 联合索引字段数不超过 5 个（单个索引中的字段数不超过5个）"></a>4) 联合索引字段数不超过 5 个（单个索引中的字段数不超过5个）</h4><ul>
<li>一个联合索引的字段数太多，很可能是设计得不好，还很难符合命名的规范。</li>
</ul>
<h4 id="5-前缀索引长度不超过-8-个字符，单张表中索引数量最好不超过5个"><a href="#5-前缀索引长度不超过-8-个字符，单张表中索引数量最好不超过5个" class="headerlink" title="5) 前缀索引长度不超过 8 个字符，单张表中索引数量最好不超过5个"></a>5) 前缀索引长度不超过 8 个字符，单张表中索引数量最好不超过5个</h4><ul>
<li>对字符串类型的字段建立索引，采用前缀索引，且长度不超过 8 个字符。</li>
</ul>
<h4 id="6-索引的命名规则"><a href="#6-索引的命名规则" class="headerlink" title="6) 索引的命名规则"></a>6) 索引的命名规则</h4><ul>
<li>非唯一索引按照“idx<em>字段名称[</em>字段名称]”进用行命名。例如idx_age_name</li>
<li>唯一索引按照“uniq<em>字段名称[</em>字段名称]”进用行命名。例如uniq_age_name</li>
<li>组合索引建议包含所有字段名,过长的字段名可以采用缩写形式。例如idx_age_name_add</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--错误：</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `training_id_index` (`training_id`),</div><div class="line">  KEY `site_id_index` (`training_id`,`site_id`),</div><div class="line">  KEY `training_site_id_index` (`is_valid`,`training_id`,`site_id`)</div><div class="line"> </div><div class="line">--正确：</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `idx_settle_order_id` (`settle_order_id`),</div><div class="line">  KEY `idx_plateform_user_type_user_id` (`plateform`,`user_type`,`user_id`),</div><div class="line">  KEY `idx_create_time` (`create_time`)</div></pre></td></tr></table></figure>
<h4 id="7-禁止冗余索引"><a href="#7-禁止冗余索引" class="headerlink" title="7) 禁止冗余索引"></a>7) 禁止冗余索引</h4><ul>
<li>索引是把双刃剑,会增加维护负担,增大IO压力。(a,b,c)、(a,b),后者为冗余索引</li>
<li>可以利用前缀索引来达到加速目的,减轻维护负担</li>
</ul>
<h4 id="8-禁止重复索引"><a href="#8-禁止重复索引" class="headerlink" title="8) 禁止重复索引"></a>8) 禁止重复索引</h4><ul>
<li>例如：primary key a;uniq index a</li>
<li>重复索引增加维护负担、占用磁盘空间,同时没有任何益处</li>
</ul>
<h4 id="9-不在低基数列上建立索引-例如“性别”"><a href="#9-不在低基数列上建立索引-例如“性别”" class="headerlink" title="9) 不在低基数列上建立索引,例如“性别”"></a>9) 不在低基数列上建立索引,例如“性别”</h4><ul>
<li>大部分场景下,低基数列上建立索引的精确查找,相对于不建立索引的全表扫描没有任何优势,而且增大了IO负担</li>
</ul>
<h4 id="10-选择区分度大的列建立索引。组合索引中-区分度大的字段放在最前"><a href="#10-选择区分度大的列建立索引。组合索引中-区分度大的字段放在最前" class="headerlink" title="10) 选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前"></a>10) 选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前</h4><h4 id="11-不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引-或添加CRC32或MD5伪列并建立索引"><a href="#11-不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引-或添加CRC32或MD5伪列并建立索引" class="headerlink" title="11) 不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引"></a>11) 不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引</h4><h4 id="12-合理创建联合索引，合理使用覆盖索引减少IO-避免排序"><a href="#12-合理创建联合索引，合理使用覆盖索引减少IO-避免排序" class="headerlink" title="12) 合理创建联合索引，合理使用覆盖索引减少IO,避免排序"></a>12) 合理创建联合索引，合理使用覆盖索引减少IO,避免排序</h4><ul>
<li>例如：(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)</li>
<li>覆盖索引能从索引中获取需要的所有字段,从而避免回表进行二次查找,节省IO</li>
</ul>
<h3 id="SQL语句规范"><a href="#SQL语句规范" class="headerlink" title="SQL语句规范"></a>SQL语句规范</h3><h4 id="1-禁止在查询条件中对字段进行数学运算、函数调用"><a href="#1-禁止在查询条件中对字段进行数学运算、函数调用" class="headerlink" title="1) 禁止在查询条件中对字段进行数学运算、函数调用"></a>1) 禁止在查询条件中对字段进行数学运算、函数调用</h4><ul>
<li>这类查询语句在使用索引时将非常困难。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE NOW() - update_time &lt; 3600</div><div class="line">SELECT id FROM property WHERE update_time + 3600 &gt; NOW()</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">SELECT id FROM property WHERE update_time &gt; NOW() - 3600</div><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE CHAR_LENGTH(title) &gt; 20</div><div class="line"> </div><div class="line">-- 假设字段 property.status 的类型为 TINYINT</div><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE status = &apos;1&apos;</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">SELECT id FROM property WHERE status = 1</div></pre></td></tr></table></figure>
<h4 id="2-禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE-也不允许隐式类型转换。"><a href="#2-禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE-也不允许隐式类型转换。" class="headerlink" title="2) 禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，INSERT，UPDATE 也不允许隐式类型转换。"></a>2) 禁止隐式类型转换，不仅在查询条件中禁止隐示类型转换，<code>INSERT</code>，<code>UPDATE</code> 也不允许隐式类型转换。</h4><ul>
<li>典例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-- 假设字段 property.status 的类型为 TINYINT</div><div class="line">-- 禁止</div><div class="line">INSERT INTO property (..., status) VALUES (..., &apos;1&apos;)</div><div class="line">UPDATE property SET status = &apos;1&apos; WHERE id = &apos;43&apos;</div><div class="line"> </div><div class="line">-- 改为</div><div class="line">INSERT INTO property (..., status) VALUES (..., 1)</div><div class="line">UPDATE property SET status = 1 WHERE id = 43</div></pre></td></tr></table></figure>
<h4 id="3-禁止使用-前导查询"><a href="#3-禁止使用-前导查询" class="headerlink" title="3) 禁止使用 % 前导查询"></a>3) 禁止使用 % 前导查询</h4><ul>
<li>尽量不要使用like查询，不得不用的情况下也禁止使用%前导查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-- 禁止</div><div class="line">SELECT id FROM property WHERE title LIKE &apos;%最%&apos;</div></pre></td></tr></table></figure>
<h4 id="4-不使用联表查询，不使用子查询，不使用负向查询"><a href="#4-不使用联表查询，不使用子查询，不使用负向查询" class="headerlink" title="4) 不使用联表查询，不使用子查询，不使用负向查询"></a>4) 不使用联表查询，不使用子查询，不使用负向查询</h4><ul>
<li>OLTP 不使用 <code>JOIN</code> 联合查询。</li>
<li>没有特别好的理由，OLTP 不允许使用子查询。必要时用join代替子查询</li>
<li>负向查询是指，如果查询条件描述的是不要什么数据，其余的都要。例如 <code>!=</code>、<code>&lt;&gt;</code>、<code>NOT EXISTS</code>、<code>NOT IN</code> 以及 <code>NOT LIKE</code> 等就是负向查询，它们利用索引将会很辛苦。</li>
</ul>
<h4 id="5-LIMIT-m-n，其中-m-应当小于-500"><a href="#5-LIMIT-m-n，其中-m-应当小于-500" class="headerlink" title="5) LIMIT m, n，其中 m 应当小于 500"></a>5) LIMIT m, n，其中 m 应当小于 500</h4><ul>
<li>使用 <code>SELECT ... LIMIT offset, row_count</code> 或者 <code>SELECT ... LIMIT row_count OFFSET offset</code> 时，当 offset 小于 500 时，允许使用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 允许</div><div class="line">SELECT ... FROM property WHERE broker_id=? ORDER BY update_time LIMIT 40, 20</div><div class="line">-- 不允许</div><div class="line">SELECT ... FROM property WHERE areacode=? ORDER BY update_time LIMIT 4000, 20</div></pre></td></tr></table></figure>
<ul>
<li>能够不使用 offset 的情况应当避免，如下面的例子（其中 id 是主键）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 建议</div><div class="line">SELECT ... FROM property WHERE broker_id=? AND id&gt;? ORDER BY id LIMIT 20</div><div class="line">-- 避免</div><div class="line">SELECT ... FROM property WHERE broker_id=? ORDER BY id LIMIT 40, 20</div></pre></td></tr></table></figure>
<h4 id="6-避免使用-COUNT-函数，其他聚合函数，例如-SUM-、AVG-、MAX-等，同样适用。"><a href="#6-避免使用-COUNT-函数，其他聚合函数，例如-SUM-、AVG-、MAX-等，同样适用。" class="headerlink" title="6) 避免使用 COUNT() 函数，其他聚合函数，例如 SUM()、AVG()、MAX() 等，同样适用。"></a>6) 避免使用 COUNT() 函数，其他聚合函数，例如 <code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code> 等，同样适用。</h4><ul>
<li>能不使用就不使用，尽量用其他方式来解决</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 避免</div><div class="line">SELECT COUNT(*) FROM propertys WHERE broker_id=?</div><div class="line">-- 正确</div><div class="line">SELECT 1 FROM propertys WHERE broker_id=? LIMIT 1</div></pre></td></tr></table></figure>
<h4 id="7-使用prepared-statement-可以提升性能并避免SQL注入"><a href="#7-使用prepared-statement-可以提升性能并避免SQL注入" class="headerlink" title="7) 使用prepared statement,可以提升性能并避免SQL注入"></a>7) 使用prepared statement,可以提升性能并避免SQL注入</h4><h4 id="8-使用IN代替OR。SQL语句中IN包含的值不应过多"><a href="#8-使用IN代替OR。SQL语句中IN包含的值不应过多" class="headerlink" title="8) 使用IN代替OR。SQL语句中IN包含的值不应过多"></a>8) 使用IN代替OR。SQL语句中IN包含的值不应过多</h4><ul>
<li>IN是范围查找,MySQL内部会对IN的列表值进行排序后查找,比OR效率更高</li>
</ul>
<h4 id="9-减少与数据库交互次数-尽量采用批量SQL语句"><a href="#9-减少与数据库交互次数-尽量采用批量SQL语句" class="headerlink" title="9) 减少与数据库交互次数,尽量采用批量SQL语句"></a>9) 减少与数据库交互次数,尽量采用批量SQL语句</h4><ul>
<li>修改同一张表的多条语句，可改为一条语句；多用于修改表结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">--错误</div><div class="line">alter table target_config modify column target_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div><div class="line">alter table target_config modify column real_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div><div class="line"> </div><div class="line">--正确</div><div class="line">alter table target_config modify column target_value decimal(12,4) DEFAULT &apos;0.0000&apos;,modify column real_value decimal(12,4) DEFAULT &apos;0.0000&apos;;</div></pre></td></tr></table></figure>
<h4 id="10-拆分复杂SQL为多个小SQL-避免大事务"><a href="#10-拆分复杂SQL为多个小SQL-避免大事务" class="headerlink" title="10) 拆分复杂SQL为多个小SQL,避免大事务"></a>10) 拆分复杂SQL为多个小SQL,避免大事务</h4><ul>
<li>转化为小SQL，并进行主键的更新</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">--错误</div><div class="line">update test.tmp_qos set feedback=1 where transport_id&lt;=24769887;</div><div class="line"> </div><div class="line">--正确</div><div class="line">update test.tmp_qos set feedback=1 where id=1;</div><div class="line">update test.tmp_qos set feedback=1 where id=2;</div><div class="line">update test.tmp_qos set feedback=1 where id=3;</div><div class="line">update test.tmp_qos set feedback=1 where id=4;</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="11-使用UNION-ALL代替UNION"><a href="#11-使用UNION-ALL代替UNION" class="headerlink" title="11)  使用UNION ALL代替UNION"></a>11)  使用UNION ALL代替UNION</h4><ul>
<li>UNION ALL不需要对结果集再进行排序</li>
</ul>
<h4 id="12-SELECT只获取必要的字段-禁止使用SELECT"><a href="#12-SELECT只获取必要的字段-禁止使用SELECT" class="headerlink" title="12 ) SELECT只获取必要的字段,禁止使用SELECT *"></a>12 ) SELECT只获取必要的字段,禁止使用SELECT <code>*</code></h4><ul>
<li>减少网络带宽消耗</li>
<li>能有效利用覆盖索引</li>
<li>表结构变更对程序基本无影响</li>
</ul>
<h4 id="13-SQL中避免出现now-、rand-、sysdate-、current-user-等不确定结果的函数"><a href="#13-SQL中避免出现now-、rand-、sysdate-、current-user-等不确定结果的函数" class="headerlink" title="13) SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数"></a>13) SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数</h4><ul>
<li>语句级复制场景下,引起主从数据不一致</li>
<li>不确定值的函数,产生的SQL语句无法利用QUERY CACHE</li>
</ul>
<h4 id="14-禁止使用order-by-rand"><a href="#14-禁止使用order-by-rand" class="headerlink" title="14) 禁止使用order by rand()"></a>14) 禁止使用order by rand()</h4><ul>
<li>order by rand()会为表增加一个伪列,然后用rand()函数为每一行数据计算出rand()值,然后基于该行排序, 这通常都会生成磁盘上的临时表,因此效率非常低。</li>
<li>建议先使用rand()函数获得随机的主键值,然后通过主键获取数据</li>
</ul>
<h4 id="15-禁止单条SQL语句同时更新多个表"><a href="#15-禁止单条SQL语句同时更新多个表" class="headerlink" title="15)  禁止单条SQL语句同时更新多个表"></a>15)  禁止单条SQL语句同时更新多个表</h4><h4 id="16-建议使用合理的分页方式以提高分页效率"><a href="#16-建议使用合理的分页方式以提高分页效率" class="headerlink" title="16) 建议使用合理的分页方式以提高分页效率"></a>16) 建议使用合理的分页方式以提高分页效率</h4><h4 id="17-禁止在从库上执行后台管理和统计类功能的QUERY-必要时申请统计类从库"><a href="#17-禁止在从库上执行后台管理和统计类功能的QUERY-必要时申请统计类从库" class="headerlink" title="17) 禁止在从库上执行后台管理和统计类功能的QUERY,必要时申请统计类从库"></a>17) 禁止在从库上执行后台管理和统计类功能的QUERY,必要时申请统计类从库</h4><h4 id="18-程序应有捕获SQL异常的处理机制-必要时通过rollback显式回滚"><a href="#18-程序应有捕获SQL异常的处理机制-必要时通过rollback显式回滚" class="headerlink" title="18) 程序应有捕获SQL异常的处理机制,必要时通过rollback显式回滚"></a>18) 程序应有捕获SQL异常的处理机制,必要时通过rollback显式回滚</h4><h4 id="19-重要SQL必须被索引-update、delete的where条件列、order-by、group-by、distinct字段、多表join字段"><a href="#19-重要SQL必须被索引-update、delete的where条件列、order-by、group-by、distinct字段、多表join字段" class="headerlink" title="19)  重要SQL必须被索引:update、delete的where条件列、order by、group by、distinct字段、多表join字段"></a>19)  重要SQL必须被索引:update、delete的where条件列、order by、group by、distinct字段、多表join字段</h4><h4 id="20）使用EXPLAIN判断SQL语句是否合理使用索引-尽量避免extra列出现-Using-File-Sort、Using-Temporary"><a href="#20）使用EXPLAIN判断SQL语句是否合理使用索引-尽量避免extra列出现-Using-File-Sort、Using-Temporary" class="headerlink" title="20）使用EXPLAIN判断SQL语句是否合理使用索引,尽量避免extra列出现:Using File Sort、Using Temporary"></a>20）使用EXPLAIN判断SQL语句是否合理使用索引,尽量避免extra列出现:Using File Sort、Using Temporary</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell常用命令备忘]]></title>
      <url>http://jianwl.com/2017/04/25/Shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<h3 id="1-ls命令"><a href="#1-ls命令" class="headerlink" title="1. ls命令"></a>1. ls命令</h3><h4 id="1-显示长格式的输出"><a href="#1-显示长格式的输出" class="headerlink" title="1) 显示长格式的输出"></a>1) 显示长格式的输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">### -R 递归显示</div><div class="line">### -A almost-all，类似「-a」，不含「.」、「..」 目录</div><div class="line">### -h --human-readable</div><div class="line">### -r --reverse</div><div class="line"></div><div class="line">$ ls -l</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div></pre></td></tr></table></figure>
<h4 id="2-显示最后访问时间"><a href="#2-显示最后访问时间" class="headerlink" title="2) 显示最后访问时间"></a>2) 显示最后访问时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lu</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff      0  3 12 23:34 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4 25 13:01 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 12:57 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67  3 12 10:02 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49  4 25 12:57 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  4 22 09:54 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  4 25 13:01 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170  4 25 13:02 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374  4 25 13:02 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  4 25 13:02 themes</div></pre></td></tr></table></figure>
<h4 id="3-显示文件的大小"><a href="#3-显示文件的大小" class="headerlink" title="3) 显示文件的大小"></a>3) 显示文件的大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lh</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff     0B 10  1  2016 README.md</div><div class="line">-rw-r--r--    1 jianweilin  staff   1.9K  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff   174B  4 25 13:01 db.json</div><div class="line">-rw-r--r--    1 jianweilin  staff    35B  4  2 08:59 except.txt</div><div class="line">-rwxr-xr-x    1 jianweilin  staff    67B 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff    49B 10  1  2016 hexo-deploy.sh</div><div class="line">drwxr-xr-x  298 jianweilin  staff   9.9K  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff   759B  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff   714B  4 25 12:57 public</div><div class="line">drwxr-xr-x    5 jianweilin  staff   170B 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff   374B 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff   238B  3 11 21:10 themes</div></pre></td></tr></table></figure>
<h4 id="4-按最近修改时间排序"><a href="#4-按最近修改时间排序" class="headerlink" title="4) 按最近修改时间排序"></a>4) 按最近修改时间排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lt</div><div class="line">total 48</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div></pre></td></tr></table></figure>
<h4 id="5-按最近修改时间逆排序"><a href="#5-按最近修改时间逆排序" class="headerlink" title="5) 按最近修改时间逆排序"></a>5) 按最近修改时间逆排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -ltr</div><div class="line">total 48</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div></pre></td></tr></table></figure>
<h4 id="6-按文件大小排序"><a href="#6-按文件大小排序" class="headerlink" title="6) 按文件大小排序"></a>6) 按文件大小排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls -lS</div><div class="line">total 48</div><div class="line">drwxr-xr-x  298 jianweilin  staff  10132  3 11 21:15 node_modules</div><div class="line">-rw-r--r--    1 jianweilin  staff   1960  4  4 18:50 _config.yml</div><div class="line">-rw-r--r--    1 jianweilin  staff    759  3 11 21:15 package.json</div><div class="line">drwxr-xr-x   21 jianweilin  staff    714  4 25 12:57 public</div><div class="line">drwxr-xr-x   11 jianweilin  staff    374 10 30 10:38 source</div><div class="line">drwxr-xr-x    7 jianweilin  staff    238  3 11 21:10 themes</div><div class="line">-rw-r--r--    1 jianweilin  staff    174  4 25 13:01 db.json</div><div class="line">drwxr-xr-x    5 jianweilin  staff    170 10  8  2016 scaffolds</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     67 10  1  2016 github-backup.sh</div><div class="line">-rwxr-xr-x    1 jianweilin  staff     49 10  1  2016 hexo-deploy.sh</div><div class="line">-rw-r--r--    1 jianweilin  staff     35  4  2 08:59 except.txt</div><div class="line">-rw-r--r--    1 jianweilin  staff      0 10  1  2016 README.md</div></pre></td></tr></table></figure>
<h4 id="7-递归显示"><a href="#7-递归显示" class="headerlink" title="7) 递归显示"></a>7) 递归显示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ls -lR</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 1.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 2.txt</div><div class="line">drwxr-xr-x  4 jianweilin  staff  136  4 25 14:51 tmp</div><div class="line"></div><div class="line">./tmp:</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 14:51 3.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 14:51 4.txt</div></pre></td></tr></table></figure>
<h3 id="2-stat命令"><a href="#2-stat命令" class="headerlink" title="2. stat命令"></a>2. stat命令</h3><h4 id="1-显示文件统计信息"><a href="#1-显示文件统计信息" class="headerlink" title="1) 显示文件统计信息"></a>1) 显示文件统计信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ stat db.json</div><div class="line">16777220 18825586 -rw-r--r-- 1 jianweilin staff 0 174 &quot;Apr 25 12:57:01 2017&quot; &quot;Apr 25 13:01:52 2017&quot; &quot;Apr 25 13:01:52 2017&quot; &quot;Apr 25 12:57:00 2017&quot; 4096 8 0 db.json</div></pre></td></tr></table></figure>
<h3 id="3-cat命令"><a href="#3-cat命令" class="headerlink" title="3. cat命令"></a>3. cat命令</h3><h4 id="1-显示行号"><a href="#1-显示行号" class="headerlink" title="1) 显示行号"></a>1) 显示行号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$ cat -n package.json</div><div class="line">     1	&#123;</div><div class="line">     2	  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class="line">     3	  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">     4	  &quot;private&quot;: true,</div><div class="line">     5	  &quot;hexo&quot;: &#123;</div><div class="line">     6	    &quot;version&quot;: &quot;3.2.2&quot;</div><div class="line">     7	  &#125;,</div><div class="line">     8	  &quot;dependencies&quot;: &#123;</div><div class="line">     9	    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class="line">    10	    &quot;hexo-deployer-git&quot;: &quot;^0.1.0&quot;,</div><div class="line">    11	    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class="line">    12	    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class="line">    13	    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class="line">    14	    &quot;hexo-generator-feed&quot;: &quot;^1.2.0&quot;,</div><div class="line">    15	    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</div><div class="line">    16	    &quot;hexo-generator-search&quot;: &quot;^1.0.2&quot;,</div><div class="line">    17	    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;,</div><div class="line">    18	    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class="line">    19	    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class="line">    20	    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</div><div class="line">    21	    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</div><div class="line">    22	    &quot;hexo-server&quot;: &quot;^0.2.0&quot;</div><div class="line">    23	  &#125;,</div><div class="line">    24	  &quot;devDependencies&quot;: &#123;</div><div class="line">    25	    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class="line">    26	    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;</div><div class="line">    27	  &#125;</div><div class="line">    28	&#125;</div></pre></td></tr></table></figure>
<h3 id="4-tar命令"><a href="#4-tar命令" class="headerlink" title="4. tar命令"></a>4. tar命令</h3><h4 id="1-显示当前目录"><a href="#1-显示当前目录" class="headerlink" title="1) 显示当前目录"></a>1) 显示当前目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">### -c 创建一个新的tar归档文件</div><div class="line">### -x 从已有tar归档文件中提取文件</div><div class="line">### -v 在处理文件时显示文件</div><div class="line">### -z 将输出重定向给gzip命令压缩内容</div><div class="line">### -t 列出已有tar归档文件的内容</div><div class="line">### -f file 输出结果到file</div><div class="line"></div><div class="line">### 压缩常用参数 cvzf</div><div class="line">### 解压常用参数 xvzf</div><div class="line"></div><div class="line">$ ls -lR</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 1.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff   13  4 25 13:15 2.txt</div><div class="line">drwxr-xr-x  4 jianweilin  staff  136  4 25 16:50 tmp</div><div class="line"></div><div class="line">./tmp:</div><div class="line">total 16</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 16:50 3.txt</div><div class="line">-rw-r--r--  1 jianweilin  staff  13  4 25 16:50 4.txt</div></pre></td></tr></table></figure>
<h4 id="2-忽略tmp目录打包"><a href="#2-忽略tmp目录打包" class="headerlink" title="2) 忽略tmp目录打包"></a>2) 忽略tmp目录打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar --exclude &quot;tmp&quot; -cvzf test.tgz test</div><div class="line">a test</div><div class="line">a test/1.txt</div><div class="line">a test/2.txt</div></pre></td></tr></table></figure>
<h4 id="3-查看tar归档文件内容"><a href="#3-查看tar归档文件内容" class="headerlink" title="3) 查看tar归档文件内容"></a>3) 查看tar归档文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar -tf test.tgz</div><div class="line">test/</div><div class="line">test/1.txt</div><div class="line">test/2.txt</div></pre></td></tr></table></figure>
<h4 id="4-解压"><a href="#4-解压" class="headerlink" title="4) 解压"></a>4) 解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar -xvzf test.tgz</div><div class="line">x test/</div><div class="line">x test/1.txt</div><div class="line">x test/2.txt</div></pre></td></tr></table></figure>
<h3 id="5-实用命令"><a href="#5-实用命令" class="headerlink" title="5. 实用命令"></a>5. 实用命令</h3><h4 id="1-列出当前目录-文件夹并按大小排序"><a href="#1-列出当前目录-文件夹并按大小排序" class="headerlink" title="1) 列出当前目录|文件夹并按大小排序"></a>1) 列出当前目录|文件夹并按大小排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ du -sh * | sort -nr</div><div class="line"> 53M	node_modules</div><div class="line"> 24M	themes</div><div class="line"> 17M	public</div><div class="line"> 12K	scaffolds</div><div class="line">5.0M	source</div><div class="line">4.0K	package.json</div><div class="line">4.0K	hexo-deploy.sh</div><div class="line">4.0K	github-backup.sh</div><div class="line">4.0K	except.txt</div><div class="line">4.0K	db.json</div><div class="line">4.0K	_config.yml</div><div class="line">  0B	README.md</div></pre></td></tr></table></figure>
<h3 id="6-查看端口是否被占用"><a href="#6-查看端口是否被占用" class="headerlink" title="6 查看端口是否被占用"></a>6 查看端口是否被占用</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-5-6/71012196-file_1494081173977_16732.png" alt=""> </p>
<h3 id="7-查看当前端口的PID"><a href="#7-查看当前端口的PID" class="headerlink" title="7 查看当前端口的PID"></a>7 查看当前端口的PID</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-11-4/29050306.jpg" alt=""></p>
<h3 id="8-参考资料"><a href="#8-参考资料" class="headerlink" title="8. 参考资料"></a>8. 参考资料</h3><ol>
<li><a href="http://fqk.io/shell-some-command/" target="_blank" rel="external">Shell常用命令备忘 by fang</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法基础学习笔记]]></title>
      <url>http://jianwl.com/2017/04/24/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>算法一篇空白，大学所学忘的差不多了，接下来几周会侧重学习算法基础。</p>
<h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h3><h4 id="1-领居好说话-–-冒泡算法"><a href="#1-领居好说话-–-冒泡算法" class="headerlink" title="1) 领居好说话 – 冒泡算法"></a>1) 领居好说话 – 冒泡算法</h4><p><code>基本思想：</code> 每次比较两个相邻的元素，如果他们的顺序错误就把他们交换过来；每一趟只能确定将一个数归位。如<code>12 35 99 18 76</code>这5个数，第一趟确定最大的数排在第1位，第二趟确定第二大的数排在第二位，5个数字，只需要5趟，就能够排好序。</p>
<p><img src="http://i4.buimg.com/567571/c604fc4bd2fa1fa5.png" alt=""></p>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001()&#123;</div><div class="line">    int[] nums = new int[]&#123;12,35,99,18,76&#125;;</div><div class="line">    // 第一层: 待排序数[0,n-2]</div><div class="line">    for (int i = 0; i &lt; nums.length - 1; i++) &#123;</div><div class="line">        // 第二层: 未排序数[i,n-1]</div><div class="line">       for (int j = i; j&lt; nums.length -1; j++) &#123;</div><div class="line">           // 待排序数 VS 未排序数, 比其小则交换</div><div class="line">           if (nums[i] &lt; nums[j+1]) &#123;</div><div class="line">               int t = nums[i];</div><div class="line">               nums[i] = nums[j+1];</div><div class="line">               nums[j+1] = t;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    System.out.println(JSON.toJSONString(nums));</div><div class="line">&#125;</div><div class="line">// 结果 [99,76,35,18,12]</div><div class="line">// 时间复杂度 O(N^2)</div></pre></td></tr></table></figure>
<h4 id="2-最常用的排序-–-快速排序"><a href="#2-最常用的排序-–-快速排序" class="headerlink" title="2) 最常用的排序 – 快速排序"></a>2) 最常用的排序 – 快速排序</h4><p><code>基本思想：</code> 以序列<code>6 1 2 7 9 3 4 5 10 8</code>为例，分别从序列两端探测，先<strong>从右到左</strong>找一个小于6的数，找到之后，停止前进的步伐，再<strong>从左到右</strong>找一个大于6的数，然后交换他们。这里可以用变量i和变量j来表示，知道变量i和变量j相遇,完成第一次排序；</p>
<p><img src="http://i2.muimg.com/567571/e31ef94b0d159921.png" alt=""></p>
<p><code>整个算法处理过程：</code></p>
<p><img src="http://i2.muimg.com/567571/1db0b8aba2e48ad7.png" alt=""></p>
<p><code>实战</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public void quick(Integer[] str) &#123;</div><div class="line">    if (str.length &gt; 0) &#123;    //查看数组是否为空</div><div class="line">        _quickSort(str, 0, str.length - 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">private void _quickSort(Integer[] list, int low, int high) &#123;</div><div class="line">    if (low &lt; high) &#123;</div><div class="line">        int middle = _getMiddle(list, low, high);  //将list数组进行一分为二</div><div class="line">        _quickSort(list, low, middle - 1);        //对低字表进行递归排序</div><div class="line">        _quickSort(list, middle + 1, high);       //对高字表进行递归排序</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">private int _getMiddle(Integer[] list, int low, int high) &#123;</div><div class="line">    int tmp = list[low];   //数组的第一个作为中轴</div><div class="line">    while (low &lt; high) &#123;</div><div class="line">        while (low &lt; high &amp;&amp; list[high] &gt; tmp) &#123;</div><div class="line">            high--;</div><div class="line">        &#125;</div><div class="line">        list[low] = list[high];   //比中轴小的记录移到低端</div><div class="line">        while (low &lt; high &amp;&amp; list[low] &lt; tmp) &#123;</div><div class="line">            low++;</div><div class="line">        &#125;</div><div class="line">        list[high] = list[low];   //比中轴大的记录移到高端</div><div class="line">    &#125;</div><div class="line">    list[low] = tmp;              //中轴记录到尾</div><div class="line">    return low;                   //返回中轴的位置</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 时间复杂度: O(NlogN)</div></pre></td></tr></table></figure>
<h3 id="2-队列、栈、链表"><a href="#2-队列、栈、链表" class="headerlink" title="2. 队列、栈、链表"></a>2. 队列、栈、链表</h3><h4 id="1-解密QQ号-–-队列"><a href="#1-解密QQ号-–-队列" class="headerlink" title="1) 解密QQ号 – 队列"></a>1) 解密QQ号 – 队列</h4><p><code>基本思想：</code> <strong>先进先出</strong>的数据结构，队尾进入，队首出去。</p>
<p><code>场景：</code>新学期开始了，小哈是小哼的新同桌，小哼向小哈询问QQ号，小哈给小哼一串加密过的数字，同时告诉小哼解密规则：将第1个数删除、紧接着将第2个数放到这串数的末尾，再将第三个数删除并将第4个数放到这串数字的末尾，再将第5个数删除….直到剩下最后一个数，将最后一个数也删除。最后将删除的数连在一起就是小哈的QQ。加密的数字为「6 3 1 7 5 8 9 2 4」</p>
<p><code>解题思路：</code> 解密第一步是将第一个数删除，如何在数组中删除一个数呢？最简单的办法是将所有后面的数都往前挪一步，将前面的数覆盖，但这样的做法太耗时了。在这里我们将引入两个变量，head用来记录队列的队首，tail用来记录队列的队尾的下一个位置。为什么tail不直接记录队尾呢，却要记录队尾的下一个位置呢？因为当队列中只剩下一个元素时，队首和队尾重合会带来一些麻烦。</p>
<p><code>解密过程：</code></p>
<p><img src="http://i1.piimg.com/567571/1bb74389d2320537.png" alt=""></p>
<p><code>实战:</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_002()&#123;</div><div class="line">    // init</div><div class="line">    int nums[] = new int[102];</div><div class="line">    List&lt;Integer&gt; initNums = Arrays.asList(6,3,1,7,5,8,9,2,4);</div><div class="line">    for(int i = 0; i &lt; initNums.size(); i ++) &#123;</div><div class="line">        nums[i] = initNums.get(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int head = 0;</div><div class="line">    int tail = initNums.size();</div><div class="line">    while (head &lt; tail) &#123;</div><div class="line">        System.out.print(nums[head] + &quot; &quot;);</div><div class="line">        head ++;</div><div class="line">        nums[tail] = nums[head];</div><div class="line">        tail ++;</div><div class="line">        head ++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 输出结果：6 1 5 9 4 7 2 8 3</div></pre></td></tr></table></figure>
<h4 id="2-解密回文-–-栈"><a href="#2-解密回文-–-栈" class="headerlink" title="2) 解密回文 – 栈"></a>2) 解密回文 – 栈</h4><p><code>基本思想：</code> <strong>后进先出</strong>的数据结构，且只能在一端进行插入和删除操作。</p>
<p><code>生活上的例子：</code>我们在吃桶装薯片的时候，想要吃掉<strong>最后一片</strong>，就必须把前面的全部吃掉；在装子弹的时候，最后装入的那发子弹，是被第一个打出去的；</p>
<p><code>场景：</code> “xyzyx”是一个回文字符串，所谓回文字符串就是正读反读均相同的字符序列。通过栈这个数据结构我们很容易判断一个字符串是否为回文。</p>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">   public void test_003()&#123;</div><div class="line">       String str = &quot;xyzyx&quot;;</div><div class="line"></div><div class="line">       // 偶数一定不是回文</div><div class="line">       if(str.length() % 2 == 0)&#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       int mid = str.length() / 2;</div><div class="line">       int top = -1;</div><div class="line">       char[] strChars = str.toCharArray();</div><div class="line">       char[] firstChars = new char[mid];</div><div class="line"></div><div class="line">       for(int i = 0; i &lt; mid; i ++) &#123;</div><div class="line">           firstChars[++top] = strChars[i];</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       System.out.print(&quot;firstChars =&gt; &quot; + new String(firstChars) + “ : ”);</div><div class="line"></div><div class="line">       // xy mid yx 左右两边是对称的;</div><div class="line">       for(int i = mid + 1; i &lt; str.length()-1; i++) &#123;</div><div class="line">           if(strChars[i] != firstChars[top])&#123;</div><div class="line">               break;</div><div class="line">           &#125;</div><div class="line">           top --;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       System.out.println(top == 0 ? &quot;YES&quot; : &quot;NO&quot;);</div><div class="line">   &#125;</div><div class="line">   // 结果: firstChars =&gt; xy : YES</div></pre></td></tr></table></figure>
<h4 id="3-链表"><a href="#3-链表" class="headerlink" title="3) 链表"></a>3) 链表</h4><p><code>场景：</code> 有一串已经从小到大排好序的数<code>2 3 5 9 10 18 26 32</code>，需要往这串数中插入6，使其得到的新序列仍符合从小到大的排序。</p>
<p><code>解决思路:</code> 方式1，将8和8后面的数都往后挪一位，但这样非常耗时。方式2，采用链表插入的方式「如图」，非常快。</p>
<p><img src="http://i1.piimg.com/567571/a579c9ed51b59186.png" alt=""></p>
<p><code>模拟链表描述：</code> 两个数组，第一个数组data用来存放具体数字，另外一个数组right用来存放当前序列中每个元素右边元素在数组data中的位置。如：right[1]的值为2，表示当前序列中1号元素右边的元素存放在data[2]中。</p>
<p><img src="http://i2.muimg.com/567571/ad75760e34453fb6.png" alt=""></p>
<p>现需要在8前面插入一个6，只需要将6直接存放在数组data的末尾即data[9]=6,接着只需要将right[3]改为9，表示新序列中3号元素右边的元素放在data[9]；再将right[9]改为3，表示新序列中9号元素右边的元素存放在data[3]中。</p>
<p><code>实战：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_004()&#123;</div><div class="line">        List&lt;Integer&gt; init = Arrays.asList(2,3,5,8,9,10,18,26,32);</div><div class="line">        int[] data = new int[init.size()+1];</div><div class="line">        for (int i=0; i&lt; init.size(); i++) &#123;</div><div class="line">            data[i] = init.get(i);</div><div class="line">        &#125;</div><div class="line">        // 在数组末尾加一个数</div><div class="line">        data[data.length-1] = 6;</div><div class="line">        int[] right = new int[data.length];</div><div class="line"></div><div class="line">        for(int i = 0; i &lt; init.size(); i++)&#123;</div><div class="line">            right[i] = 1+i &lt; init.size() ? 1+i : 0;</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;data =&gt; &quot; + JSON.toJSONString(init));</div><div class="line">        System.out.println(&quot;right =&gt; &quot; + JSON.toJSONString(right) + &quot;\n\n&quot;);</div><div class="line"></div><div class="line">        // 从链表头开始遍历</div><div class="line">        int t = -1;</div><div class="line">        while (t!=0) &#123;</div><div class="line">            t = t + 1;</div><div class="line">            if(data[right[t]] &gt; data[data.length-1]) &#123;</div><div class="line">                right[data.length-1] = right[t];</div><div class="line">                right[t] = data.length-1;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            t = right[t];</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;after insert data =&gt; &quot; + JSON.toJSONString(data));</div><div class="line">        System.out.println(&quot;right =&gt; &quot; + JSON.toJSONString(right));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data =&gt; [2,3,5,8,9,10,18,26,32]</div><div class="line">right =&gt; [1,2,3,4,5,6,7,8,0,0]</div><div class="line"></div><div class="line"></div><div class="line">after insert data =&gt; [2,3,5,8,9,10,18,26,32,6]</div><div class="line">right =&gt; [1,2,9,4,5,6,7,8,0,3]</div></pre></td></tr></table></figure>
<p><code>核心代码逻辑图解：</code></p>
<p><img src="http://i4.buimg.com/567571/c1957d0f1373b136.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>啊哈！算法 by 啊哈磊</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React-Router入门]]></title>
      <url>http://jianwl.com/2017/04/23/React-Router%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>真正学会<code>React</code>是一个漫长的过程。你会发现，它不是一个库，也不是一个框架，而是一个庞大的体系，想要发挥它的威力，整个技术栈都要配合它改造。你要学习一整套解决方案，从后端到前端都是全新的做法。</p>
<p>本文介绍<code>React</code>体系的一个重要组成部分：路由库<code>React-Router</code>,它是官方维护的，事实上也是唯一可选的路由库。它通过管理URL，实现组件的切换和状态的变化，开发复杂的应用几乎肯定会用到。</p>
<h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><p>React Router安装命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -S react-router</div></pre></td></tr></table></figure>
<p>使用时，路由器<code>Router</code>就是React的一个组件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; Router &#125; from &apos;react-router&apos;;</div><div class="line">render(&lt;Router/&gt;,document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
<p><code>Router</code>组件本身只是一个容器，真正的路由要通过<code>Route</code>组件来定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; Router, Route, hashHistory &#125; from &apos;react-router&apos;;</div><div class="line"></div><div class="line">render((</div><div class="line">	&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">		&lt;Router path=&quot;/&quot; component=&#123;App&#125;/&gt;</div><div class="line">	&lt;/Router&gt;</div><div class="line">), document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问跟路由<code>/</code>（比如<code>http://www.example.com/</code>）,组件App就会加载到<code>document.getElementById(&#39;app&#39;)</code>。</p>
<p>你可能还注意到，<code>Router</code>组件有一个参数<code>history</code>，它的值<code>hashHistory</code>表示，路由的切换由URL的hash变化决定，即<code>URL</code>的<code>#</code>部分发生变化，举例来说，用户访问<code>http://www.example.com/</code>，实际上看到的是<code>http://www.example.com/#/</code>。</p>
<p><code>Route</code>组件定义了URL路径与组件的对应关系，你可以同时使用多个<code>Route</code>组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">	&lt;Route path=&quot;/&quot; component=&#123;App&#125;/&gt;</div><div class="line">	&lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;/&gt;</div><div class="line">	&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>repos</code>(比如<code>http://localhost:8080/#/repos</code>),加载<code>Repos</code>组件；访问<code>/about</code>(<code>http://localhost:8080/#/about</code>)时，加载<code>About</code>组件。</p>
<h3 id="2-嵌套路由"><a href="#2-嵌套路由" class="headerlink" title="2. 嵌套路由"></a>2. 嵌套路由</h3><p>Route组件可以嵌套</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">	&lt;Route path=&quot;/&quot; component=&#123;App&#125;/&gt;</div><div class="line">		&lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;/&gt;</div><div class="line">		&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</div><div class="line">	&lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>/repos</code>时，会先加载<code>App</code>组件，然后在它的内部再加载<code>Repos</code>组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;App&gt;</div><div class="line">	&lt;Repos&gt;</div><div class="line">&lt;/App&gt;</div></pre></td></tr></table></figure>
<p><code>App</code>组件要写成下面的样子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export default React.createClass(&#123;</div><div class="line">	render() &#123;</div><div class="line">		return &lt;div&gt;</div><div class="line">			&#123;this.props.children&#125;</div><div class="line">			&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上面代码中，<code>App</code>组件的<code>this.props.children</code>属性就是子组件。</p>
<p>子路由也可以不写在<code>Router</code>组件里面，单独传入<code>Router</code>组件的<code>routes</code>属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let routes = &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">	&lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;/&gt;</div><div class="line">	&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Route&gt;</div><div class="line"></div><div class="line">&lt;Router routes=&#123;routes&#125; history=&#123;browserHistory&#125;/&gt;</div></pre></td></tr></table></figure>
<h3 id="3-path属性"><a href="#3-path属性" class="headerlink" title="3. path属性"></a>3. path属性</h3><p><code>Route</code>组件的<code>path</code>属性指定路由的匹配规则，这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件。</p>
<p>试看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">	&lt;Route path=&quot;message/:id&quot; component=&#123;Message&#125;&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，当用户访问<code>/inbox/message/:id</code>,会加载下面的组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Inbox&gt;</div><div class="line">	&lt;Message/&gt;</div><div class="line">&lt;/Inbox&gt;</div></pre></td></tr></table></figure>
<p>如果省略外层<code>Route</code>的path参数，写成下面的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Route component=&#123;Inbox&#125;&gt;</div><div class="line">	&lt;Route path=&quot;inbox/message/:id&quot; component=&#123;Message&#125;&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>现在用户访问<code>/inbox/message/:id</code>时，组件加载还是原来的样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Inbox&gt;</div><div class="line">	&lt;Message/&gt;</div><div class="line">&lt;/Inbox&gt;</div></pre></td></tr></table></figure>
<h3 id="4-通配符"><a href="#4-通配符" class="headerlink" title="4. 通配符"></a>4. 通配符</h3><p><code>path</code>属性可以使用通配符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/hello/:name&quot;&gt;</div><div class="line">// 匹配 /hello/andy</div><div class="line">// 匹配 /hello/lucy</div><div class="line"></div><div class="line">&lt;Route path=&quot;/hello(/:name)&quot;&gt;</div><div class="line">// 匹配 /hello</div><div class="line">// 匹配 /hello/andy</div><div class="line">// 匹配 /hello/lucy</div><div class="line"></div><div class="line">&lt;Route path=&quot;/files/*.*&quot;&gt;</div><div class="line">// 匹配 /files/hello.jpg</div><div class="line">// 匹配 /files/hello.html</div><div class="line"></div><div class="line">&lt;Route path=&quot;/files/*&quot;&gt;</div><div class="line">// 匹配 /files/</div><div class="line">// 匹配 /files/a</div><div class="line">// 匹配 /files/a/b</div><div class="line"></div><div class="line">&lt;Route path=&quot;/**/*.jpg&quot;&gt;</div><div class="line">// 匹配 /files/hello.jpg</div><div class="line">// 匹配 /files/path/to/file.jpg</div></pre></td></tr></table></figure>
<p>通配符的规则如下：</p>
<p>(1) <code>:paramName</code></p>
<p><code>:paramName</code>匹配URL的一个部分，知道遇到下一个<code>/</code>、<code>？</code>、<code>#</code>为止，这个路径参数可以通过<code>this.props.params.paramName</code>取出；</p>
<p>(2) <code>()</code></p>
<p><code>()</code>表示URL的这个部分是可选的；</p>
<p>(3) <code>*</code></p>
<p><code>*</code>匹配任意字符，直到模式里面的下一个字符为止，匹配方式是非贪婪模式；</p>
<p>(4) <code>**</code></p>
<p><code>**</code> 匹配任意字符，知道下一个<code>/</code>、<code>？</code>、<code>#</code>为止。匹配方式是贪婪模式。</p>
<p><code>path</code> 属性也可以使用相对路径(不以<code>/</code>开头)，匹配时就会相对于父组件的路由，可以参考上一节的例子，嵌套路由如果想摆脱这个规则，可以使用绝对路由。</p>
<p>路由匹配规则是从上到下执行，一旦发现匹配，就不再匹配其余的规则了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/comments&quot; ...&gt;</div><div class="line">&lt;Route path=&quot;/comments&quot; ...&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，路径<code>/comments</code>同时匹配两个规则，第二个规则不会生效。</p>
<p>设置路径参数时，需要特别小心这一点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path=&quot;/:userName/:id&quot; component=&#123;UserPage&#125;/&gt;</div><div class="line">  &lt;Route path=&quot;/about/me&quot; component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>/about/me</code>时，不会触发第二个路由规则，因为它会匹配<code>/:username/:id</code>这个规则，因此，带参数的路劲一般要写在路由规则的底部。</p>
<p>此外，<code>URL</code>的查询字符串<code>/foo?bar=baz</code>，可以用<code>this.props.location.query.bar</code>获取。</p>
<h3 id="5-IndexRoute组件"><a href="#5-IndexRoute组件" class="headerlink" title="5. IndexRoute组件"></a>5. IndexRoute组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">    &lt;Route path=&quot;accounts&quot; component=&#123;Accounts&#125;/&gt;</div><div class="line">    &lt;Route path=&quot;statements&quot; component=&#123;Statements&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，访问根路径<code>/</code>，不会加载任何子组件，也就是说，<code>App</code>组件的<code>this.props.children</code>，这时是<code>undefined</code>。</p>
<p><code>IndexRoute</code>就是解决这个问题的，显示指定<code>Home</code>是跟路由的子组件，即默认情况下加载的子组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</div><div class="line">    &lt;Route path=&quot;accounts&quot; component=&#123;Accounts&#125;/&gt;</div><div class="line">    &lt;Route path=&quot;statements&quot; component=&#123;Statements&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>现在，用户访问<code>/</code>的时候，加载的组件结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;App&gt;</div><div class="line">  &lt;Home/&gt;</div><div class="line">&lt;/App&gt;</div></pre></td></tr></table></figure>
<h3 id="6-Redirect组件"><a href="#6-Redirect组件" class="headerlink" title="6. Redirect组件"></a>6. Redirect组件</h3><p><code>&lt;Redirect&gt;</code>组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">	&#123;/* 从/inbox/messages/:id 跳转到 /messages/:id */&#125;</div><div class="line">	&lt;Redirect from=&quot;messages/:id&quot; to=&quot;/messages/:id&quot;&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<h3 id="7-IndexRedirect组件"><a href="#7-IndexRedirect组件" class="headerlink" title="7. IndexRedirect组件"></a>7. IndexRedirect组件</h3><p><code>IndexRedirect</code>组件用于访问跟路由的时候，将用户重定向到某个子组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</div><div class="line">  ＜IndexRedirect to=&quot;/welcome&quot; /&gt;</div><div class="line">  &lt;Route path=&quot;welcome&quot; component=&#123;Welcome&#125; /&gt;</div><div class="line">  &lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问根路径时，将自动重定向到子组件<code>welcome</code>。</p>
<h3 id="8-Link"><a href="#8-Link" class="headerlink" title="8. Link"></a>8. Link</h3><p><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击跳转到另一个路由。它基本上就是<code>&lt;a&gt;</code>元素的<code>React</code>版本，可以接收<code>Router</code>的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">	return &lt;div&gt;</div><div class="line">		&lt;ul role=&quot;nav&quot;&gt;</div><div class="line">			&lt;li&gt;&lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;Link to=&quot;/repos&quot;&gt;Repos&lt;/Link&gt;&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="9-IndexLink"><a href="#9-IndexLink" class="headerlink" title="9.IndexLink"></a>9.IndexLink</h3><p>如果链接到跟路由<code>/</code>，不要使用<code>Link</code>组件，而要使用<code>IndexLink</code>组件，对于跟路由来说<code>activeStyle</code>和<code>activeClassName</code>会失效，或者说总是生效，因为<code>/</code>会匹配任何子路由，而<code>IndexLink</code>组件会使用路径的精确匹配。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;IndexLink to=&quot;/&quot; activeClassName=&quot;active&quot;&gt;</div><div class="line">  Home</div><div class="line">&lt;/IndexLink&gt;</div></pre></td></tr></table></figure>
<h3 id="10-history属性"><a href="#10-history属性" class="headerlink" title="10. history属性"></a>10. history属性</h3><p><code>Router</code>组件的<code>history</code>属性，用来监听浏览器地址栏的变化，并将URL解析成一个地址对象，供<code>React Router</code>匹配。</p>
<p><code>history</code>属性，一共可以设置三种值，分别为 browserHistory、hashHistory、createMemoryHistory。</p>
<p>(1) 如果设为<code>hashHistory</code>，路由将通过URL的hash部分(<code>#</code>)切换，URL的形式类似<code>example.com/#/some/path</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; hashHistory &#125; from &apos;react-router&apos;</div><div class="line"></div><div class="line">render(</div><div class="line">	&lt;Router history= &#123;hashHistory&#125; routes=&#123;routes&#125;/&gt;,</div><div class="line">	document.getElementById(&apos;app&apos;)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>(2) 如果设为<code>browserHistory</code>，浏览器的路由将不再通过<code>Hash</code>完成，而显示正常的路径<code>example.com/some/path</code>,背后调用的是浏览器的History API.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; browserHistory &#125; from &apos;react-router&apos;</div><div class="line"></div><div class="line">render(</div><div class="line">	&lt;Router history= &#123;browserHistory&#125; routes=&#123;routes&#125;/&gt;,</div><div class="line">	document.getElementById(&apos;app&apos;)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>但是，这种情况需要对服务器改造，否则用户直接向服务器请求某个子路由，会显示<code>404</code>。</p>
<p>(3) <code>createMemoryHistory</code>主要用于服务器渲染，它创建一个内存中<code>history</code>对象，不与浏览器<code>URL</code>互动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const history = createMemoryHistory(location)</div></pre></td></tr></table></figure>
<h3 id="11-表单处理"><a href="#11-表单处理" class="headerlink" title="11. 表单处理"></a>11. 表单处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">	&lt;input type=&quot;text&quot; placeholder=&quot;username&quot;/&gt;</div><div class="line">	&lt;input type=&quot;text&quot; placeholder=&quot;repo&quot;&gt;</div><div class="line">	&lt;button type=&quot;submit&quot;&gt;Go&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>第一种方法是使用<code>browserHistory.push</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import &#123; browserHistory &#125; from &apos;react-router&apos;</div><div class="line"></div><div class="line">// ...</div><div class="line"></div><div class="line">handleSubmit(event) &#123;</div><div class="line">	event.preventDefault()</div><div class="line">	const userName = event.target.elements[0].value</div><div class="line">	const repo = event.target.element[1].value</div><div class="line">	const path = `/repos/$&#123;userName&#125;/$&#123;repo&#125;`</div><div class="line">	browserHistory.push(path)</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>第二种方法是使用<code>context</code>对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">export default React.createClass(&#123;</div><div class="line">	contextTypes: &#123;</div><div class="line">		router: React.PropTypes.object</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	handleSubmit(event) &#123;</div><div class="line">		// ...</div><div class="line">		this.context.router.push(path)</div><div class="line">	&#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="12-路由的钩子"><a href="#12-路由的钩子" class="headerlink" title="12. 路由的钩子"></a>12. 路由的钩子</h3><p>每个路由都有<code>Enter</code>和<code>Leave</code>钩子，用户进入或离开时触发。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</div><div class="line">＜Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">  ＜Redirect from=&quot;messages/:id&quot; to=&quot;/messages/:id&quot; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，如果用户离开<code>/messages/:id</code>，进入<code>/about</code>时，会依次触发以下的钩子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/messages/:id的onLeave</div><div class="line">/inbox的onLeave</div><div class="line">/about的onEnter</div></pre></td></tr></table></figure>
<p>下面是一个例子，使用<code>onEnter</code>钩子代替<code>&lt;Redirect&gt;</code>组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</div><div class="line">  &lt;Route</div><div class="line">    path=&quot;messages/:id&quot;</div><div class="line">    onEnter=&#123;</div><div class="line">      (&#123;params&#125;, replace) =&gt; replace(`/messages/$&#123;params.id&#125;`)</div><div class="line">    &#125; </div><div class="line">  /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure>
<p><code>onEnter</code>钩子还可以用来做认证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const requireAuth = (nextState, replace) =&gt; &#123;</div><div class="line">    if (!auth.isAdmin()) &#123;</div><div class="line">        // Redirect to Home page if not an Admin</div><div class="line">        replace(&#123; pathname: &apos;/&apos; &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export const AdminRoutes = () =&gt; &#123;</div><div class="line">  return (</div><div class="line">     &lt;Route path=&quot;/admin&quot; component=&#123;Admin&#125; onEnter=&#123;requireAuth&#125; /&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是一个高级应用，当用户离开一个路径的时候，跳出一个提示框，要求用户确认是否离开。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const Home = withRouter(</div><div class="line">  React.createClass(&#123;</div><div class="line">    componentDidMount() &#123;</div><div class="line">      this.props.router.setRouteLeaveHook(</div><div class="line">        this.props.route, </div><div class="line">        this.routerWillLeave</div><div class="line">      )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    routerWillLeave(nextLocation) &#123;</div><div class="line">      // 返回 false 会继续停留当前页面，</div><div class="line">      // 否则，返回一个字符串，会显示给用户，让其自己决定</div><div class="line">      if (!this.state.isSaved)</div><div class="line">        return &apos;确认要离开？&apos;;</div><div class="line">    &#125;,</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>上面代码中，<code>setRouteLeaveHook</code>方法为<code>Leave</code>钩子指定<code>routerWillLeave</code>函数。该方法如果返回false，将阻止路由的切换，否则就返回一个字符串，提示用户决定是否要切换。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="external">React Router使用教程 by 阮一峰</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux学习笔记]]></title>
      <url>http://jianwl.com/2017/04/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-快速改变当前工作目录的有效方法："><a href="#1-快速改变当前工作目录的有效方法：" class="headerlink" title="1. 快速改变当前工作目录的有效方法："></a>1. 快速改变当前工作目录的有效方法：</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>运行结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td>更改工作目录到你的家目录</td>
</tr>
<tr>
<td>cd -</td>
<td>更改工作目录到先前的工作目录</td>
</tr>
<tr>
<td>cd ~user_name</td>
<td>更改工作目录到用户家目录</td>
</tr>
</tbody>
</table>
<h4 id="2-Linux目录结构"><a href="#2-Linux目录结构" class="headerlink" title="2. Linux目录结构"></a>2. Linux目录结构</h4><table>
<thead>
<tr>
<th>目录</th>
<th>评论</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>根目录，万物起源</td>
</tr>
<tr>
<td>/bin</td>
<td>包含系统启动和运行所必须的二进制程序</td>
</tr>
<tr>
<td>/boot</td>
<td>包含Linux内核，最初的RMA磁盘映像</td>
</tr>
<tr>
<td>/dev</td>
<td>这是一个包含设备结点的特殊目录。 “一切都是文件”，也适用于设备，在这个目录里，内核维护着它支持的设备</td>
</tr>
<tr>
<td>/etc</td>
<td>这个目录包含所有系统层面的配置文件。它也包含一系列的shell脚本，在系统启动时，这些脚本会运行每个系统服务。这个目录中的任何文件都是可读的文本文件。<code>/etc/crontab</code>，定义自动运行的任务；<code>/etc/fstab</code>，包含存储设备的列表，以及与他们相关的挂载点;<code>/etc/passwd</code>，包含用户账号列表;</td>
</tr>
<tr>
<td>/home</td>
<td>在通常的配置环境下，系统会在/home下，给每个用户分配一个目录，普通智能在他们的目录下创建文件。这个限制保护系统免受错误的用户活动破坏。</td>
</tr>
<tr>
<td>/lib</td>
<td>包含核心程序所需的库文件，这些文件与windows中的动态链接库相似</td>
</tr>
<tr>
<td>/lost+found</td>
<td>每个使用Linux文件系统的格式化分区或设备</td>
</tr>
<tr>
<td>/media</td>
<td>可移除媒体设备的挂载点，例如USB驱动器、CD-ROMS等</td>
</tr>
<tr>
<td>/mnt</td>
<td>可移除设备的挂载点</td>
</tr>
<tr>
<td>/opt</td>
<td>安装可选的软件</td>
</tr>
<tr>
<td>/proc</td>
<td>它是一个由Linux内核维护的虚拟文件系统，它所包含的文件时内核的窥视孔</td>
</tr>
<tr>
<td>/root</td>
<td>root账户的家目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>这个目录包含“系统”二进制文件</td>
</tr>
<tr>
<td>/tmp</td>
<td>存储各种程序创建的临时文件的地方</td>
</tr>
<tr>
<td>/usr</td>
<td>包含普通用户所需要的所有程序和文件</td>
</tr>
<tr>
<td>/usr/bin</td>
<td>系统安装的可执行程序</td>
</tr>
<tr>
<td>/usr/lib</td>
<td>程序所用的共享库</td>
</tr>
<tr>
<td>/usr/local</td>
<td>由源码编译的程序会安装在/usr/local/bin目录下</td>
</tr>
<tr>
<td>/usr/sbin</td>
<td>许多系统管理程序</td>
</tr>
<tr>
<td>/usr/share</td>
<td>由/usr/bin目录中的程序使用的共享数据</td>
</tr>
<tr>
<td>/var</td>
<td>各种数据库，假脱机文件、用户邮件等都在这</td>
</tr>
<tr>
<td>/var/log</td>
<td>系统日志</td>
</tr>
</tbody>
</table>
<h4 id="3-硬链接-VS-符号链接"><a href="#3-硬链接-VS-符号链接" class="headerlink" title="3. 硬链接 VS 符号链接"></a>3. 硬链接 VS 符号链接</h4><p><code>硬链接</code></p>
<p><img src="http://i2.muimg.com/567571/c80b86ffcc0477bf.png" alt=""></p>
<p>source.txt与copy.txt共用同一份资源，任何一个文件改动，另外一个文件会跟着变化。</p>
<p><code>符号链接</code></p>
<p><img src="http://i2.muimg.com/567571/aae479ac8ce6f170.png" alt=""></p>
<p>source.txt与sign_copy.txt共用同一份资源，任何一个文件改动，另外一个文件会跟着变化。</p>
<p><code>硬链接 VS 符号链接区别 ？</code></p>
<p>硬链接不能跨越物理设备，硬链接不能关联目录，只能关联文件；符号链接就是为了解决这两个问题，创建符号链接的过程与硬链接相似；</p>
<h4 id="4-which-显示可执行文件的位置"><a href="#4-which-显示可执行文件的位置" class="headerlink" title="4. which 显示可执行文件的位置"></a>4. which 显示可执行文件的位置</h4><p><img src="http://i1.piimg.com/567571/224ff92365521577.png" alt=""></p>
<h4 id="5-重定向"><a href="#5-重定向" class="headerlink" title="5. 重定向"></a>5. 重定向</h4><h5 id="1-重定向标准输出，从头开始写文件"><a href="#1-重定向标准输出，从头开始写文件" class="headerlink" title="1) 重定向标准输出，从头开始写文件"></a>1) 重定向标准输出，从头开始写文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 将标准输出重定向到 ls-output.txt 文件</div><div class="line">ls -l /usr/bin &gt; ls-output.txt</div></pre></td></tr></table></figure>
<p>重复定向测试，这次我们把目录换成一个不存在的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 屏幕上显示 ls: /usr/bins: No such file or directory</div><div class="line">ls -l /usr/bins &gt; ls-output.txt</div></pre></td></tr></table></figure>
<p>为什么错误信息没有被重定向到ls-output.txt文件呢？反而直接抛出在屏幕上，因为我们只定义了标准输出，而没有定向标准错误输出。</p>
<h5 id="2）重定向标准输出，追加文件"><a href="#2）重定向标准输出，追加文件" class="headerlink" title="2）重定向标准输出，追加文件"></a>2）重定向标准输出，追加文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 将内容追加到ls-output.txt</div><div class="line">ls -l /usr/bin &gt;&gt; ls-output.txt</div></pre></td></tr></table></figure>
<h5 id="3-重定向标准错误"><a href="#3-重定向标准错误" class="headerlink" title="3) 重定向标准错误"></a>3) 重定向标准错误</h5><p><img src="http://i2.muimg.com/567571/b024d5f76e8db1a7.png" alt=""></p>
<p>文件描述符2，紧挨着重定向符之前，用来重定向标准错误输出到文件。</p>
<h5 id="4）重定向标准输出和错误到同一个文件"><a href="#4）重定向标准输出和错误到同一个文件" class="headerlink" title="4）重定向标准输出和错误到同一个文件"></a>4）重定向标准输出和错误到同一个文件</h5><p><img src="http://i1.piimg.com/567571/a1958525fdae5dfd.png" alt=""></p>
<p><code>2&gt;&amp;1</code>表示重定向文件描述符<code>2</code>「标准错误」到文件描述符<code>1</code>「标准输出」，注意重定向的顺序非常重要，标准错误的重定向必须总是在标准输出重定向之后，要不然它就不起作用；</p>
<h5 id="5-处理不需要的输出"><a href="#5-处理不需要的输出" class="headerlink" title="5) 处理不需要的输出"></a>5) 处理不需要的输出</h5><p>有时候我们不想要一个命令的输出结果，只想把他们直接扔掉，我们可以将其重定向到一个特殊的叫做<code>/dev/null</code>的文件，它接受输入，并且对输入不做任何处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -l /usr/bins 2&gt; /dev/null</div></pre></td></tr></table></figure>
<h4 id="6-快速移动光标快捷键"><a href="#6-快速移动光标快捷键" class="headerlink" title="6. 快速移动光标快捷键"></a>6. 快速移动光标快捷键</h4><table>
<thead>
<tr>
<th>按键</th>
<th>行动</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl-a</td>
<td>光标移到行首</td>
</tr>
<tr>
<td>Ctrl-e</td>
<td>光标移到行尾</td>
</tr>
<tr>
<td>Ctrl-f</td>
<td>光标前移一个字符</td>
</tr>
<tr>
<td>Ctrl-b</td>
<td>光标后移一个字符</td>
</tr>
<tr>
<td>Ctrl-l</td>
<td>清空屏幕</td>
</tr>
</tbody>
</table>
<h4 id="7-VIM快捷键"><a href="#7-VIM快捷键" class="headerlink" title="7. VIM快捷键"></a>7. VIM快捷键</h4><h5 id="1-移动光标-「命令模式下」"><a href="#1-移动光标-「命令模式下」" class="headerlink" title="1) 移动光标 「命令模式下」"></a>1) 移动光标 「命令模式下」</h5><table>
<thead>
<tr>
<th>按键</th>
<th>移动光标</th>
</tr>
</thead>
<tbody>
<tr>
<td>l</td>
<td>向右移动一个字符</td>
</tr>
<tr>
<td>h</td>
<td>向左移动一个字符</td>
</tr>
<tr>
<td>j</td>
<td>向下移动一行</td>
</tr>
<tr>
<td>k</td>
<td>向上移动一行</td>
</tr>
<tr>
<td>^</td>
<td>移动到当前行的第一个非空字符</td>
</tr>
<tr>
<td><code>$</code></td>
<td>移动到当前行的末尾</td>
</tr>
<tr>
<td>numberG</td>
<td>移动到第number行</td>
</tr>
<tr>
<td>G</td>
<td>移动到文件末尾</td>
</tr>
</tbody>
</table>
<h5 id="2-删除文本"><a href="#2-删除文本" class="headerlink" title="2) 删除文本"></a>2) 删除文本</h5><table>
<thead>
<tr>
<th>按键</th>
<th>删除的文本</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>当前字符</td>
</tr>
<tr>
<td>dd</td>
<td>当前行</td>
</tr>
<tr>
<td>5dd</td>
<td>当前行及随后4行</td>
</tr>
<tr>
<td>dG</td>
<td>当前行到文件末尾</td>
</tr>
<tr>
<td>d20G</td>
<td>当前行到文件的第20行</td>
</tr>
</tbody>
</table>
<h5 id="3-复制文本"><a href="#3-复制文本" class="headerlink" title="3) 复制文本"></a>3) 复制文本</h5><p>通过 dd「剪切」yy「复制」文本，通过 p「粘贴」</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>复制的内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>yy</td>
<td>当前行</td>
</tr>
<tr>
<td>5yy</td>
<td>当前行及随后4行</td>
</tr>
<tr>
<td>yG</td>
<td>当前行到文件末尾</td>
</tr>
<tr>
<td>y20G</td>
<td>当前行到文件的第20行</td>
</tr>
</tbody>
</table>
<h5 id="4-全局查找和替代"><a href="#4-全局查找和替代" class="headerlink" title="4) 全局查找和替代"></a>4) 全局查找和替代</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/Line/line/g</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>条目</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>:</td>
<td>冒号字符运行一个ex命令</td>
</tr>
<tr>
<td>%</td>
<td>指定要操作的行数，%是一个快捷方式，表示从第一行到最后一行。另外也可以用1,<code>$</code>来代替，表示从第一行到文件最后一行</td>
</tr>
<tr>
<td>s</td>
<td>指定操作，在这种情况下是，替换</td>
</tr>
<tr>
<td>Line/line</td>
<td>查找类型与替换文本</td>
</tr>
<tr>
<td>g</td>
<td>文本行中所有匹配的字符串执行查找和替换操作</td>
</tr>
</tbody>
</table>
<h5 id="5-显示行号与关闭行号"><a href="#5-显示行号与关闭行号" class="headerlink" title="5) 显示行号与关闭行号"></a>5) 显示行号与关闭行号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:set nu // 显示行号</div><div class="line">:set nonu // 关闭行号</div></pre></td></tr></table></figure>
<h4 id="8-查找文件"><a href="#8-查找文件" class="headerlink" title="8. 查找文件"></a>8. 查找文件</h4><p><img src="http://i1.piimg.com/567571/062a4bbf1cd6f71f.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>快乐的Linux命令行</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redux入门教程(三)]]></title>
      <url>http://jianwl.com/2017/04/21/Redux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%B8%89/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="http://jianwl.com/2017/04/21/Redux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BA%8C/#more">上一篇文章</a>，介绍了Redux的基本做法：用户发出Action,Reducer函数算出新的State，View重新渲染。但是一个关键的问题没有解决：异步操作怎么办？Action发出以后，Reducer立即算出State，这叫做同步；Action发出以后，过一段时间在执行Reducer，这就是异步。</p>
<p>怎么才能Reducer在异步操作结束后自动执行呢？这就要用到新的工具：中间件(middleware)。</p>
<h3 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h3><p>为了理解中间件，让我们站在框架作者的角度思考问题：如果要添加功能，你会在哪个环节添加？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Reducer: 纯函数，只能承担计算 State 的功能，不适合承担其他功能，也承担不了，因为理论上，纯函数不能进行读写操作。</div><div class="line"></div><div class="line">View：与 State 一一对应，可以看做 State 的视觉层，也不适合承担其他功能。</div><div class="line"></div><div class="line">Action: 存放数据的对象，即消息的载体， 只能被别人操作，自己不能进行任何操作。</div></pre></td></tr></table></figure>
<p>想来想去，只有发送 Action 的这个步骤，即<code>store.dispatch()</code>方法，可以添加功能，距离来说，添加日志功能，把 Action 和 State 打印出来， 可以对<code>store.dispatch</code>进行如下改造。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let next = store.dispatch;</div><div class="line">store.dispatch = function dispatchAndLog(action) &#123;</div><div class="line">	consle.log(&quot;dispatching&quot;,action);</div><div class="line">	next(action);</div><div class="line">	console.log(&apos;next state&apos;, store.getState());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，对<code>store.dispatch</code>进行了重定义，在发送<code>Action</code>前后添加了打印功能，这就是中间件的雏形。中间件就是一个函数，对<code>store.dispatch</code>方法进行了改造，在发出Action 和执行 Reducer 这两步之间，添加了其他功能。</p>
<h3 id="中间件的用法"><a href="#中间件的用法" class="headerlink" title="中间件的用法"></a>中间件的用法</h3><p>上节的日志中间件，是有现成的模块的<a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">redux-logger</a>，这里将介绍如何使用它们。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; applyMiddleware, createStore &#125; from &apos;redux&apos;;</div><div class="line">import createLogger from &apos;redux-logger&apos;;</div><div class="line">const logger = createStore(</div><div class="line">	reducer,</div><div class="line">	applyMiddleware(logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>redux-logger</code>提供一个生成器<code>createLogger</code>,可以生成日志中间件<code>logger</code>,然后，将他放在<code>appleMiddleware</code>方法之中，传入<code>createStore</code>方法，就完成了<code>store.dispatch()</code>的功能增强。</p>
<p>这里有两点需要注意：</p>
<p>（1）<code>createStore</code> 方法可以接受整个应用的初始化状态作为参数，那样的话，<code>applyMiddleware</code>就是第三个参数了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const store = createStore(</div><div class="line">	reducer,</div><div class="line">	initial_state,</div><div class="line">	applyMiddleware(logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>(2) 中间件的次序有讲究</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const store = createStore(</div><div class="line">	reducer,</div><div class="line">	applyMiddleware(thunk, promise, logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>applyMiddleware</code>方法的三个参数，就是三个中间件，有的中间件有次序要求，使用前要查下文档，比如，<code>logger</code>就一定要放在最后，否则输出结果就不对。</p>
<h3 id="applyMiddlewares"><a href="#applyMiddlewares" class="headerlink" title="applyMiddlewares()"></a>applyMiddlewares()</h3><p>看到这里，你可能会问，<code>applyMiddlewares</code>这个方法到底是干什么用的？<br>它是<code>Redux</code>的原生方法，作用是将所有中间件组成一个数组，依次执行，下面是它的源码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">export default function applyMiddleware(...middlewares) &#123;</div><div class="line">	return (createStore) =&gt; (reducer, preloadedState, enhancer) =&gt; &#123;</div><div class="line">		var dispatch = store.dispatch;</div><div class="line">		var chain = [];</div><div class="line">		</div><div class="line">		var middlewareAPI = &#123;</div><div class="line">			getState: store.getState,</div><div class="line">			dispatch: (action) =&gt; dispatch(action)</div><div class="line">		&#125;;</div><div class="line">		chain = middlewares.map(middleware =&gt; middleware(middlewareAPI));</div><div class="line">		dispatch = compose(...chain)(store.dispatch);</div><div class="line">		</div><div class="line">		return &#123;...store,dispatch&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，所有中间件被放进一个数组<code>chain</code>，然后进行嵌套执行，最后执行<code>store.dispatch</code>，可以看到，中间件内部（middlewareAPI）可以拿到<code>getState</code> 和 <code>dispatch</code> 这两个方法。</p>
<h3 id="异步操作的思路"><a href="#异步操作的思路" class="headerlink" title="异步操作的思路"></a>异步操作的思路</h3><p>理解中间件以后，就可以处理异步操作了。</p>
<p>同步操作只需要发出一种Action即可，异步操作的差别是它要发出三种Action。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">操作发起的Action</div><div class="line">操作成功时的Action</div><div class="line">操作失败时的Action</div></pre></td></tr></table></figure>
<p>以向服务器取出数据为例，三种Action可以有两种不同的写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 写法一：名称相同，参数不同</div><div class="line">&#123; type: &apos;FETCH_POSTS&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS&apos;, status: &apos;error&apos;, error: &apos;Oops&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS&apos;, status: &apos;success&apos;, response: &#123; ... &#125; &#125;</div><div class="line"></div><div class="line">// 写法二：名称不同</div><div class="line">&#123; type: &apos;FETCH_POSTS_REQUEST&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS_FAILURE&apos;, error: &apos;Oops&apos; &#125;</div><div class="line">&#123; type: &apos;FETCH_POSTS_SUCCESS&apos;, response: &#123; ... &#125; &#125;</div></pre></td></tr></table></figure>
<p>除了 Action 种类不同，异步操作的 State 也要进行改造，反映不同的操作状态。下面是 State 的一个例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let state = &#123;</div><div class="line">	isFetching: true,</div><div class="line">	didInvalidate: true,</div><div class="line">	lastUpdated: &apos;xxxxx&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中， State的属性<code>isFetching</code>表示是否在抓取数据。<code>didInvalidate</code>表示数据是否过时，<code>lastUpdated</code>表示上一次更新时间。</p>
<p>现在整个异步操作的思路就很清楚了:操作开始时，送出一个 Action，触发 State 更新为”正在操作”状态，View 重新渲染;操作结束后，再送出一个 Action，触发 State 更新为”操作结束”状态，View 再一次重新渲染</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">Redux入门教程二 by 阮一峰</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redux入门教程(二)]]></title>
      <url>http://jianwl.com/2017/04/21/Redux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章<a href="http://jianwl.com/2017/04/19/Redux%E5%85%A5%E9%97%A8/#more">Redux入门</a>，主要偏于实战，这一节主要介绍Redux的基本概念 &amp; API &amp; Reducer拆分。</p>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p><code>Redux</code>的设计思想很简单，就两句话。</p>
<blockquote>
<p>(1) Web 应用是一个状态机，视图与状态是一一对应的。</p>
<p>(2) 所有的状态，保存在一个对象里面。</p>
</blockquote>
<h3 id="基本概念-amp-API"><a href="#基本概念-amp-API" class="headerlink" title="基本概念 &amp; API"></a>基本概念 &amp; API</h3><h4 id="1、Store"><a href="#1、Store" class="headerlink" title="1、Store"></a>1、Store</h4><p><code>Store</code>就是保存数据的地方，你可以把它看成一个容器，整个应用只能有一个<code>Store</code>。<code>Redux</code>提供<code>createStore</code>这个函数，用来生成<code>Store</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;;</div><div class="line">const store = createStore(fn);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>createStore</code>函数接受另一个函数作为参数，返回新生成的<code>Store</code>对象。</p>
<h4 id="2、State"><a href="#2、State" class="headerlink" title="2、State"></a>2、State</h4><p><code>Store</code>对象包含所有数据，如果想得到某个时点的数据，就要对Store生成快照。这种时点的数据集合，就叫<code>State</code>。当前时刻的<code>State</code>，可以通过<code>store.getState()</code>拿到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;</div><div class="line">const store = createStore(fn);</div><div class="line">const state = store.getState();</div></pre></td></tr></table></figure>
<p><code>Redux</code>规定，一个<code>State</code>对应一个<code>View</code>，只要<code>State</code>相同，<code>View</code>就相同，你知道<code>State</code>，就知道<code>View</code>是什么样。</p>
<h4 id="3、Action"><a href="#3、Action" class="headerlink" title="3、Action"></a>3、Action</h4><p><code>State</code>的变化，会导致<code>View</code>的变化，但是，用户接触不到<code>State</code>，只能接触到<code>View</code>，所以<code>State</code>变化必须是<code>View</code>导致的，<code>Action</code>就是<code>View</code>发出的通知，表示<code>State</code>应该要发送变化了。</p>
<p><code>Action</code>是一个对象，其中<code>type</code>属性是必须的，表示<code>Action</code>的名称，其他属性可以自由设置，社区有一个<a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">规范</a>可以参考。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const action = &#123;</div><div class="line">	type: &apos;ADD_TODO&apos;,</div><div class="line">	payload: &apos;Learn Redux&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>Action</code>的名称是<code>ADD_TODO</code>，它携带的信息是字符串<code>Learn Redux</code>。可以这样理解，<code>Action</code>描述当前发生的事情，改变<code>State</code>的唯一方法，就是使用<code>Action</code>，它会运送数据到<code>Store</code>。</p>
<h4 id="4、Action-Creator"><a href="#4、Action-Creator" class="headerlink" title="4、Action Creator"></a>4、Action Creator</h4><p><code>View</code>要发送多少信息，就会有多少种<code>Action</code>，如果都手写，会很麻烦，可以定义一个函数来生成<code>Action</code>，这个函数就叫<code>Action Creator</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const ADD_TODO = &apos;添加 TODO&apos;；</div><div class="line"></div><div class="line">function addTodo(text) &#123;</div><div class="line">	return &#123;</div><div class="line">		type: ADD_TODO,</div><div class="line">		text</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const action = addTodo(&apos;Learn Redux&apos;);</div></pre></td></tr></table></figure>
<p>上面代码中,<code>addTodo</code>函数就是一个<code>Action Creator</code>。</p>
<h4 id="5、store-dispatch"><a href="#5、store-dispatch" class="headerlink" title="5、store.dispatch()"></a>5、store.dispatch()</h4><p><code>store.dispatch()</code>是View发出Action的唯一方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;;</div><div class="line">const store = createStore(fn);</div><div class="line"></div><div class="line">store.dispatch(&#123;</div><div class="line">	type: &apos;ADD_TODO&apos;,</div><div class="line">	payload: &apos;Learn Redux&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>store.dispatch</code>接受一个Action对象作为参数，将他发送出去。<br>结合 <code>Action Creator</code>，这段代码可以改写如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(addTodo(‘Learn Redux’));</div></pre></td></tr></table></figure>
<h4 id="6、Reducer"><a href="#6、Reducer" class="headerlink" title="6、Reducer"></a>6、Reducer</h4><p><code>Store</code>收到<code>Action</code>以后，必须给出一个新的<code>State</code>，这样<code>View</code>才会发生变化，这种<code>State</code>的计算过程就叫做<code>Reducer</code>。<code>Reducer</code>是一个函数，它接受<code>Action</code>和当前<code>State</code>作为参数，返回一个新的<code>State</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const reducer = function(state,action) &#123;</div><div class="line">	// ...</div><div class="line">	return new_state;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个应用的状态，可以作为State的默认值，下面是一个实际例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const defaultState = 0;</div><div class="line">const reducer = (state = defaultState,action) =&gt; &#123;</div><div class="line">	switch (action.type) &#123;</div><div class="line">		case &apos;ADD&apos;:</div><div class="line">			return state + action.payload;</div><div class="line">		default:</div><div class="line">			return state;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const state = reducer(1,&#123;</div><div class="line">	type: &apos;ADD&apos;,</div><div class="line"> 	payload: 2</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>reducer</code>函数收到名为<code>ADD</code>的<code>Action</code>以后，就返回一个新的<code>State</code>,作为加法的计算结果，其他计算的逻辑（比如减法)，也可以根据<code>Action</code>的不同来实现。</p>
<p>实际应用中，<code>reducer</code>函数不用像上面这样手动调用，<code>store.dispatch</code>方法会触发<code>Reducer</code>的自动执行。为此，<code>Store</code>需要知道<code>Reducer</code>函数，做法就是在生成Store的时候，将<code>Reducer</code>传入<code>createStore</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;</div><div class="line">const store = createStore(reducer);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>createStore</code>接受<code>Reducer</code>作为参数，生成一个新的Store，以后每当<code>store.dispatch</code>发送过来一个新的<code>Action</code>，就会自动调用<code>Reducer</code>，得到<code>State</code>。</p>
<p>为什么这个函数叫做<code>Reducer</code>呢？因为它可以作为数据的<code>reduce</code>方法的函数，请看下面的例子，一系列<code>Action</code>对象按照排序作为一个数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const actions = &#123;</div><div class="line">	&#123; type: &apos;ADD&apos;, payload: 0&#125;,</div><div class="line">	&#123; type: &apos;ADD&apos;, payload: 1&#125;,</div><div class="line">	&#123; type: &apos;ADD&apos;, payload: 2&#125;</div><div class="line">&#125;</div><div class="line">const total = actions.reduce(reducer,0); //3</div></pre></td></tr></table></figure>
<p>上面代码中，数组<code>actions</code>表示依次有三个<code>Action</code>，分别是加<code>0</code>、加<code>1</code>和加<code>2</code>。数组的<code>reduce</code>方法接受<code>Reducer</code>函数作为参数，就可以直接得到最终的状态<code>3</code>。</p>
<h4 id="7、纯函数"><a href="#7、纯函数" class="headerlink" title="7、纯函数"></a>7、纯函数</h4><p><code>Reducer</code>函数最重要的特征是，它是一个纯函数，也就是说，只要是同样的输入，必定得到同样的输出。纯函数是函数式编程的概念，必须遵守以下规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不得改写参数</div><div class="line">不能调用系统I/O的API</div><div class="line">不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果</div></pre></td></tr></table></figure>
<p>由于<code>Reducer</code>是纯函数，就可以保证同样的<code>State</code>，必定得到同样的<code>View</code>，但也正因为这一点，<code>Reducer</code>函数里不能改变<code>State</code>，必须返回一个全新的对象。参考下面的写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// State 是一个对象</div><div class="line">function reducer(state, action) &#123;</div><div class="line">	return Object.assign(&#123;&#125;,state,&#123;thingToChange&#125;);</div><div class="line">	// 或者</div><div class="line">	return &#123; ...state,...newState &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// State 是一个数组</div><div class="line">function reducer(state, action) &#123;</div><div class="line">	return [ ...state, newItem ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最好把<code>State</code>对象设成只读，你没法改变它，要得到新的<code>State</code>,唯一办法就是生成一个新对象，这样的好处是，任何时候，与某个View对应的<code>State</code>总是一个不变的对象。</p>
<h4 id="store-subscribe"><a href="#store-subscribe" class="headerlink" title="store.subscribe()"></a>store.subscribe()</h4><p><code>Store</code>允许使用<code>store.subscribe</code>方法设置监听函数，一旦<code>State</code>发生变化，就自动执行这个函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from &apos;redux&apos;;</div><div class="line">const store = createStore(reducer);</div><div class="line"></div><div class="line">store.subscribe(listener);</div></pre></td></tr></table></figure>
<p>显然，只要把<code>View</code>的更新函数（对于React项目，就是组件的render方法或setState方法）放入<code>listen</code>，就会实现<code>View</code>的自动渲染。</p>
<p><code>store.subscribe</code>方法返回一个函数，调用这个函数就可以解除监听。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let unsubscribe = store.subscribe(() =&gt; </div><div class="line">	console.log(store.getState())</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="Reducer拆分"><a href="#Reducer拆分" class="headerlink" title="Reducer拆分"></a>Reducer拆分</h3><p><code>Reducer</code>函数负责生成<code>State</code>，由于整个应用只有一个<code>State</code>对象，包含所有数据，对于大型应用来说，这个<code>State</code>必然十分庞大，导致<code>Reducer</code>函数也十分庞大。<br>请看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const chatReducer = (state = defaultState, action = &#123;&#125;) =&gt; &#123;</div><div class="line">	const &#123; type, payload &#125; = action;</div><div class="line">	switch (type) &#123;</div><div class="line">		case ADD_CHAT:</div><div class="line">			return Object.assign(&#123;&#125;,state,&#123;</div><div class="line">				chatLog: state.chatLog.concat(payload)</div><div class="line">			&#125;);</div><div class="line">		case CHANNGE_STATUS:</div><div class="line">			return Object.assign(&#123;&#125;, state, &#123;</div><div class="line">				statusMessage: payload</div><div class="line">			&#125;);</div><div class="line">		case CHANGE_USERNAME:</div><div class="line">			return Object.assign(&#123;&#125;,state, &#123;</div><div class="line">				userName: payload</div><div class="line">			&#125;);</div><div class="line">		default: return state;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，三种<code>Action</code>分别改变<code>State</code>的三个属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ADD_CHAT: chatLog属性</div><div class="line">CHANGE_STATUS: statusMessage属性</div><div class="line">CHANGE_USERNAME: userName属性</div></pre></td></tr></table></figure>
<p>这三个属性之前没有联系，这提示我们可以把<code>Reducer</code>函数拆分，不同的函数负责处理不同属性，最终把它们合并成一个大的<code>Reducer</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const chatReducer = (state = defaultState, action = &#123;&#125;) =&gt; &#123;</div><div class="line">	return &#123;</div><div class="line">		chatLog: chatLog(state.chatLog,action),</div><div class="line">		statusMessage: statusMessage(state.statusMessage,action),</div><div class="line">		userName: userName(state.userName, action)</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>Reducer</code>函数被拆分成了三个小函数，每一个负责生产对应的属性。</p>
<p>这样一拆，<code>Reducer</code>就容易读写多了，而且，这种拆分与<code>React</code>应用的结构相吻合： 一个<code>React</code>跟组件由许多子组件构成这就是说子组件与子Reducer完全可以对应。</p>
<p>Redux提供了一个<code>combineReducers</code>方法，用于Reducer的拆分，你只要定义各个子<code>Reducer</code>函数，然后用这个方法，将它们合成一个大的<code>Reducer</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; combineReducers &#125; from &apos;redux&apos;</div><div class="line"></div><div class="line">const chatReducer = combineReducers(&#123;</div><div class="line">	chatLog,</div><div class="line">	statusMessage,</div><div class="line">	userName</div><div class="line">&#125;)</div><div class="line"></div><div class="line">export default todoApp;</div></pre></td></tr></table></figure>
<p>这种写法有一个前提，<code>State</code>的属性名必须与子<code>Redecer</code>同名，如果不同名，就要采用下面的写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const reducer = combineReducers(&#123;</div><div class="line">	a: doSomethingWithA,</div><div class="line">	b: processB,</div><div class="line">	c: c</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 等同于</div><div class="line">function reducer(state = &#123;&#125;, action) &#123;</div><div class="line">	return &#123;</div><div class="line">		a: doSomethingWithA(state.a,action),</div><div class="line">		b: processB(state.b,action),</div><div class="line">		c: c(state.c,action)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总之，<code>combineReducers()</code>做的就是产生一个整体的<code>Reducer</code>函数，该函数根据<code>State</code>的key去执行相应的子<code>Reducer</code>，并将返回结果合并成一个大的<code>State</code>对象。</p>
<p>下面是<code>combineReducer</code>的简单实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const combineReducers = reducers =&gt; &#123;</div><div class="line">	return (state = &#123;&#125;, action) =&gt; &#123;</div><div class="line">		return Object.keys(reducers).reduce(</div><div class="line">			(nextState,key) =&gt; &#123;</div><div class="line">				nextState[key] = reducers[key](state[key],action);</div><div class="line">				return nextState;	</div><div class="line">			&#125;,</div><div class="line">			&#123;&#125;</div><div class="line">		);</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>你可以把所有字<code>Reducer</code>放在一个文件里面，然后统一引入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; combineReducers &#125; from &apos;redux&apos;</div><div class="line">import * as reducers from &apos;./reducers&apos;</div><div class="line">const reducer = combineReducers(reducers)</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">Redux 入门教程（一) by 阮一峰</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS之易错点]]></title>
      <url>http://jianwl.com/2017/04/20/JS%E4%B9%8B%E6%98%93%E9%94%99%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚接触JS语法，有许多易出错的点，将这些点记录下来，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-var变量声明提升"><a href="#1-var变量声明提升" class="headerlink" title="1. var变量声明提升"></a>1. var变量声明提升</h4><p>声明变量有三种方式：</p>
<p><code>var</code> 声明一个变量，可以选择将其初始化为一个值</p>
<p><code>let</code> 声明一个块作用域的局部变量，可选择将其初始化为一个值</p>
<p><code>const</code> 声明一个只读的常量</p>
<p><code>案例1：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/54570265-file_1492646127490_12e36.png" alt=""></p>
<p><code>案例2：</code> 变量提升后的变量将返回<code>undefined</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/90885158-file_1492646887623_17d65.png" alt=""></p>
<h4 id="2-字符串字面量"><a href="#2-字符串字面量" class="headerlink" title="2. 字符串字面量"></a>2. 字符串字面量</h4><p>模板字符串提供一些语法糖来构造字符串，例如：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/43060038-file_1492647130780_4999.png" alt=""></p>
<h4 id="3-JS闭包"><a href="#3-JS闭包" class="headerlink" title="3. JS闭包"></a>3. JS闭包</h4><p>当内部函数以某一种方式被任何一个外部函数作用域访问时，就产生闭包了。JS中内部函数可以访问定义在外部函数中的所有变量和函数，但是外部函数却不能访问定义在函数内部的变量和函数。如果需要访问，则可以使用闭包。</p>
<p><code>案例1：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-20/94058572-file_1492653762314_14c1b.png" alt=""></p>
<p><code>案例2：</code></p>
<p><img src="http://i1.piimg.com/567571/cdb2b25d28952ef4.png" alt=""></p>
<h4 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4. 箭头函数"></a>4. 箭头函数</h4><p>箭头函数不绑定自己的<code>this</code>、<code>arguments</code>、<code>super</code>或<code>new.target</code>，此外箭头函数最好在非方法函数中使用，且不能用作构造函数。</p>
<p><code>1、 基础语法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 多参数</div><div class="line">(param1, param2,..., paramN) =&gt; &#123; statements &#125;</div><div class="line">(param1, param2,..., paramN) =&gt; expression</div><div class="line">// 等价于: =&gt; &#123; return expression &#125;</div><div class="line"></div><div class="line">// 一个参数，圆括号可选</div><div class="line">(singleParam) =&gt; &#123;statements&#125;</div><div class="line">singleParam =&gt; &#123;statements&#125;</div><div class="line"></div><div class="line">// 无参的函数需要使用圆括号</div><div class="line">() =&gt; &#123; statements &#125;</div></pre></td></tr></table></figure>
<p><code>2、高级语法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 返回文字表达式时应当用圆括号将其包起来：</div><div class="line">params =&gt; (&#123;foo: bar&#125;)</div><div class="line"></div><div class="line">// 支持 Rest parameters 和 default parameters</div><div class="line">(param1, param2, ...rest) =&gt; &#123; statements &#125;</div><div class="line">(param1 = defaultValue1, param2, ...,paramN = defaultValueN ) =&gt; &#123; statements &#125;</div><div class="line"></div><div class="line">// 支持参数列表中的解构赋值</div><div class="line">var f = ([a,b] = [1,2],&#123;x: c&#125; = &#123;x: a+b&#125;) =&gt; a + b + c;</div></pre></td></tr></table></figure>
<p><code>案例1</code></p>
<p><img src="http://i1.piimg.com/567571/30e0246c31be8206.png" alt=""></p>
<h4 id="5-解构"><a href="#5-解构" class="headerlink" title="5. 解构"></a>5. 解构</h4><p><img src="http://i2.muimg.com/567571/b29447a502915ebf.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#变量声明提升(Variable_hoisting" target="_blank" rel="external">MSDN之JS基础教程</a>)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS之基本数据结构]]></title>
      <url>http://jianwl.com/2017/04/19/JS%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>JavaScript</code>是一种弱类型语言，意味着你不用提前声明变量的类型，在程序运行的过程中，类型会被自动确定。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var foo = 42; // foo is a Number now</div><div class="line">var foo = &quot;bar&quot;; // foo is a String now</div><div class="line">var foo = true; // foo is a Boolean now</div></pre></td></tr></table></figure>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>最新的<code>ECMASCRIPT</code>标准定义了7种数据结构分别为<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>Object</code>。 </p>
<h4 id="1-布尔类型"><a href="#1-布尔类型" class="headerlink" title="1. 布尔类型"></a>1. 布尔类型</h4><p>布尔表示一个逻辑实体，可以有两个值：<code>true</code>和<code>false</code></p>
<h4 id="2-Null-类型"><a href="#2-Null-类型" class="headerlink" title="2. Null 类型"></a>2. Null 类型</h4><p>Null类型只有一个值: null</p>
<h4 id="3-Undefined-类型"><a href="#3-Undefined-类型" class="headerlink" title="3. Undefined 类型"></a>3. Undefined 类型</h4><p>一个没有被赋值的变量会有个默认值<code>undefined</code></p>
<h4 id="4-数字类型"><a href="#4-数字类型" class="headerlink" title="4. 数字类型"></a>4. 数字类型</h4><h4 id="5-字符串类型"><a href="#5-字符串类型" class="headerlink" title="5. 字符串类型"></a>5. 字符串类型</h4><h4 id="6-符号类型"><a href="#6-符号类型" class="headerlink" title="6. 符号类型"></a>6. 符号类型</h4><p>符号「Symbols」是<code>ECMASCRIPT</code>第六版定义的，符号类型是唯一的并且是不可修改的，并且也可以作为Object的key的值。</p>
<h4 id="7-对象"><a href="#7-对象" class="headerlink" title="7. 对象"></a>7. 对象</h4><p>在<code>JavaScript</code>里，对象可以被看作是一组属性的组合。用对象字面量语法来定义对象时，会自动初始化一组属性。 </p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="external">MSDN之JS数据结构</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS之运算符]]></title>
      <url>http://jianwl.com/2017/04/19/JS%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要来学习<code>JS</code>常用的一些运算符，如<code>Spread运算符</code>、<code>typeof运算符</code>、<code>instanceof运算符</code>。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1、Spread运算符「…」"><a href="#1、Spread运算符「…」" class="headerlink" title="1、Spread运算符「…」"></a>1、Spread运算符「…」</h4><p><code>场景：</code> 用于赋值数组的部分</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-19/45847198-file_1492611937925_105b8.png" alt=""></p>
<h4 id="2、typeof运算符"><a href="#2、typeof运算符" class="headerlink" title="2、typeof运算符"></a>2、typeof运算符</h4><p><code>场景：</code>返回一个用于标识表达式的数据类型的字符串,<code>typeof</code> 返回六种可能的值：“数字”、“字符串”、“布尔值”、“对象”、“函数”和“未定义”</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-19/46037312-file_1492612991793_11991.png" alt=""></p>
<h4 id="3、三元运算符「-」"><a href="#3、三元运算符「-」" class="headerlink" title="3、三元运算符「?:」"></a>3、三元运算符「?:」</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-19/48353265-file_1492613129543_743e.png" alt=""></p>
<h4 id="4、IN运算符"><a href="#4、IN运算符" class="headerlink" title="4、IN运算符"></a>4、<code>IN</code>运算符</h4><p><code>场景：</code>测试一个对象中是否存在一种属性。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-19/92241650-file_1492613451214_106bc.png" alt=""></p>
<h4 id="5、instanceof运算符"><a href="#5、instanceof运算符" class="headerlink" title="5、instanceof运算符"></a>5、<code>instanceof</code>运算符</h4><p><code>场景：</code>返回一个布尔值，该值指示一个对象是否为特定类的一个实例。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-19/74839833-file_1492613994605_12dec.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://msdn.microsoft.com/zh-cn/library/dn919259(v=vs.94" target="_blank" rel="external">MSDN之运算符</a>.aspx)</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="external">MSDN之JS数据结构</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redux入门]]></title>
      <url>http://jianwl.com/2017/04/19/Redux%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Redux</code>是参考<code>Flux</code>架构思想的库，对<code>Flux</code>许多冗余的部分做了简化。<code>Redux</code>本身只把自己定位成一个<code>可预测的状态容器</code>，接下来学习<code>Redux</code>的三大原则、并实战<code>Redux</code>和<code>React</code>如何结合使用。</p>
<h3 id="Redux运行流程"><a href="#Redux运行流程" class="headerlink" title="Redux运行流程"></a>Redux运行流程</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-11/53696420-file_1491870916439_e756.png" alt=""></p>
<h3 id="Redux三大原则"><a href="#Redux三大原则" class="headerlink" title="Redux三大原则"></a>Redux三大原则</h3><h4 id="1-单一数据源"><a href="#1-单一数据源" class="headerlink" title="1. 单一数据源"></a>1. 单一数据源</h4><p>在<code>Redux</code>中，一个应用永远只有唯一的数据源，这样做的好处在于整个应用状态都保存在一个对象中，这样我们随时可以提取出整个应用的状态进行持久化。同时<code>Redux</code>提供工具函数<code>combineReducers</code>化解数据源对象过于庞大的问题。后文将会介绍。</p>
<h4 id="2-状态是只读的"><a href="#2-状态是只读的" class="headerlink" title="2. 状态是只读的"></a>2. 状态是只读的</h4><p>在<code>Redux</code>中，会定义一个<code>reducer</code>，他的功能是根据当前触发的action对当前应用的状态来进行迭代，并没有直接修改应用的状态，而是返回一份全新的状态。<code>Redux</code>提供的<code>createStore</code>方法会根据reducer生产store，最后可以利用<code>store.dispatch</code>来修改状态。</p>
<h4 id="3-状态修改均由纯函数完成"><a href="#3-状态修改均由纯函数完成" class="headerlink" title="3. 状态修改均由纯函数完成"></a>3. 状态修改均由纯函数完成</h4><p>在<code>Redux</code>中，通过定义<code>reducer</code>来确定状态的修改，而每一个reducer都是纯函数，这样做的好处是，在<code>reducer</code>里对状态的修改变得简单、纯粹、可测试。</p>
<h3 id="Redux核心API"><a href="#Redux核心API" class="headerlink" title="Redux核心API"></a>Redux核心API</h3><p>在<code>Redux</code>中负责响应<code>action</code>并修改数据的角色就是reducer，reducer本质上是一个函数，其函数签名为<code>reducer(previousState,action) =&gt; newState</code>, 可以看出，<code>reducer</code>在处理<code>action</code>的同时，还需要接受一个<code>previousState</code>参数。所以，<code>render</code>的职责是根据<code>previousState</code>和<code>action</code>计算出<code>newState</code>。</p>
<p><code>reduce范例：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const initialState = &#123;</div><div class="line">	todos: []</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义的todos 这个render 在第一次执行的时候，会返回&#123;todos:[]&#125;作为初始化状态</div><div class="line">function todos(previousState = initialState,action) &#123;</div><div class="line">	switch(action.type) &#123;</div><div class="line">	 	case &apos;XXX&apos;: &#123;</div><div class="line">	 		// 具体的业务逻辑</div><div class="line">	 		return newState;</div><div class="line">	 	&#125;</div><div class="line">	 	</div><div class="line">	 	default:</div><div class="line">	 		return previousState;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>getState</td>
<td>获取store中当前的状态</td>
</tr>
<tr>
<td>dispatch(action)</td>
<td>分发一个action，并返回这个action，这是唯一能改变store中数据的方式。</td>
</tr>
<tr>
<td>subscribe(listener)</td>
<td>注册一个监听者，它在store发生变化时被调用</td>
</tr>
<tr>
<td>replaceReducer(nextReducer)</td>
<td>更新当前state里的reducer</td>
</tr>
</tbody>
</table>
<h3 id="Redux实战-加减乘除"><a href="#Redux实战-加减乘除" class="headerlink" title="Redux实战 - 加减乘除"></a>Redux实战 - 加减乘除</h3><p><code>1、入口：index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line">import &#123; createStore &#125; from &apos;redux&apos;</div><div class="line">import Counter from &apos;./components/Counter&apos;</div><div class="line">import counter from &apos;./reducers&apos;</div><div class="line"></div><div class="line">const store = createStore(counter)</div><div class="line">const rootEl = document.getElementById(&apos;root&apos;)</div><div class="line"></div><div class="line">const render = () =&gt; ReactDOM.render(</div><div class="line">    &lt;Counter</div><div class="line">        value=&#123;store.getState()&#125;</div><div class="line">        onIncrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)&#125;</div><div class="line">        onDecrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;)&#125;</div><div class="line">        onMutil=&#123;() =&gt; store.dispatch(&#123; type : &apos;MUTIL&apos;&#125;)&#125;</div><div class="line">        onDiv=&#123;() =&gt; store.dispatch(&#123; type: &apos;DIV&apos;&#125;)&#125;</div><div class="line">    /&gt;,</div><div class="line">    rootEl</div><div class="line">)</div><div class="line"></div><div class="line">render()</div><div class="line">store.subscribe(render)</div></pre></td></tr></table></figure>
<p><code>2、纯函数：reducers/index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">export default (state = 0, action) =&gt; &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case &apos;INCREMENT&apos;:</div><div class="line">      return state + 1</div><div class="line">    case &apos;DECREMENT&apos;:</div><div class="line">      return state - 1</div><div class="line">    case &apos;MUTIL&apos;:</div><div class="line">      return state * 2</div><div class="line">    case &apos;DIV&apos;:</div><div class="line">      return state / 2</div><div class="line">    default:</div><div class="line">      return state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>3、组件：components/Counter.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;</div><div class="line"></div><div class="line">class Counter extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        value: PropTypes.number.isRequired,</div><div class="line">        onIncrement: PropTypes.func.isRequired,</div><div class="line">        onDecrement: PropTypes.func.isRequired,</div><div class="line">        onMutil: PropTypes.func.isRequired,</div><div class="line">        onDiv: PropTypes.func.isRequired</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementIfOdd = () =&gt; &#123;</div><div class="line">        if (this.props.value % 2 !== 0) &#123;</div><div class="line">            this.props.onIncrement()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementAsync = () =&gt; &#123;</div><div class="line">        setTimeout(this.props.onIncrement, 1000)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123; value, onIncrement, onDecrement, onMutil, onDiv &#125; = this.props</div><div class="line">        return (</div><div class="line">            &lt;p&gt;</div><div class="line">                Clicked: &#123;value&#125; times</div><div class="line">                &#123;&apos; &apos;&#125;</div><div class="line">                &lt;button onClick=&#123;onIncrement&#125;&gt;</div><div class="line">                    +</div><div class="line">                &lt;/button&gt;</div><div class="line">                &#123;&apos; &apos;&#125;</div><div class="line">                &lt;button onClick=&#123;onDecrement&#125;&gt;</div><div class="line">                    -</div><div class="line">                &lt;/button&gt;</div><div class="line">                &#123;&apos; &apos;&#125;</div><div class="line">                &lt;button onClick=&#123;this.incrementIfOdd&#125;&gt;</div><div class="line">                    Increment if odd</div><div class="line">                &lt;/button&gt;</div><div class="line">                &#123;&apos; &apos;&#125;</div><div class="line">                &lt;button onClick=&#123;this.incrementAsync&#125;&gt;</div><div class="line">                    Increment async</div><div class="line">                &lt;/button&gt;</div><div class="line">                &#123;&apos; &apos;&#125;</div><div class="line">                &lt;button onClick=&#123;onMutil&#125;&gt;</div><div class="line">                    *</div><div class="line">                &lt;/button&gt;</div><div class="line">                &#123;&apos; &apos;&#125;</div><div class="line">                &lt;button onClick=&#123;onDiv&#125;&gt;</div><div class="line">                    /</div><div class="line">                &lt;/button&gt;</div><div class="line">            &lt;/p&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Counter</div></pre></td></tr></table></figure>
<p><code>4、运行效果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-19/34742256-file_1492607123287_af13.png" alt=""></p>
<p><code>5、Redux API接口介绍:</code></p>
<p><code>createStore(reducer,[preloadedState], enhancer)</code> 创建一个 Redux store 来以存放应用中所有的 state。</p>
<ul>
<li><code>reducer</code>「function」接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树。</li>
<li><code>[preloadedState]</code>「any」: 初始时的 state</li>
<li><code>enhancer</code> 「function」: <code>Store enhancer</code> 是一个组合 store creator 的高阶函数，返回一个新的强化过的 store creator</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="http://cn.redux.js.org/docs/api/createStore.html" target="_blank" rel="external">Redux中文文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之不常用却很有用的知识点]]></title>
      <url>http://jianwl.com/2017/04/17/Java8%E4%B9%8B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%B4%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="1-forEach-VS-forEachOrdered"><a href="#1-forEach-VS-forEachOrdered" class="headerlink" title="1. forEach VS forEachOrdered"></a>1. forEach VS forEachOrdered</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_005()&#123;</div><div class="line">    List&lt;String&gt; strs = Arrays.asList(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;);</div><div class="line">    strs.stream().parallel().forEach(str -&gt; System.out.println(&quot;forEach =&gt; &quot; + str));</div><div class="line">    strs.stream().parallel().forEachOrdered(str -&gt; System.out.println(&quot;forEachOrdered =&gt; &quot; + str));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-11/96792814-file_1481436578266_14fcc.png" alt=""></p>
<p><code>分析</code></p>
<p>并行处理数据时，<code>forEach</code>处理的数据是无序的，而<code>forEachOrdered</code>处理数据是按照输入流的顺序处理的。</p>
<h4 id="2-合并Map"><a href="#2-合并Map" class="headerlink" title="2. 合并Map"></a>2. 合并Map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@RunWith(JUnit4.class)</div><div class="line">public class BasicTest &#123;</div><div class="line">    /**</div><div class="line">     * 将sub合并至total,若在total中存在该键(key),则键值合并;</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void test_001()&#123;</div><div class="line">        Map&lt;String,List&lt;Integer&gt;&gt; total = Maps.newHashMap();</div><div class="line">        Map&lt;String,List&lt;Integer&gt;&gt; sub = Maps.newHashMap();</div><div class="line"></div><div class="line">        total.put(&quot;num1&quot;, Arrays.asList(1,2,3,4,11));</div><div class="line">        total.put(&quot;num2&quot;,Arrays.asList(1,2,3,4));</div><div class="line">        total.put(&quot;num3&quot;,Arrays.asList(1,2,3,4));</div><div class="line">        total.put(&quot;num4&quot;,Arrays.asList(1,2,3,4));</div><div class="line"></div><div class="line">        sub.put(&quot;num1&quot;,Arrays.asList(1,2,3,4,5,6,7));</div><div class="line">        sub.put(&quot;num2&quot;,Arrays.asList(1,2,3,4,4,5,6,7));</div><div class="line"></div><div class="line">        sub.keySet().forEach(key -&gt; total.merge(key,sub.get(key),(v1,v2) -&gt; Arrays.asList(v1,v2).stream().flatMap(Collection::stream).distinct().collect(Collectors.toList())));</div><div class="line"></div><div class="line">        System.out.println(&quot;total =&gt; &quot; + JSON.toJSONString(total));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-21/83737621-file_1487691562243_10db7.png" alt=""></p>
<h4 id="3-排序Map"><a href="#3-排序Map" class="headerlink" title="3. 排序Map"></a>3. 排序Map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_033() &#123;</div><div class="line">    Map&lt;String,Integer&gt; map = Maps.newHashMap();</div><div class="line">    map.put(&quot;key1&quot;,9);</div><div class="line">    map.put(&quot;key2&quot;,1);</div><div class="line">    map.put(&quot;key3&quot;,3);</div><div class="line">    map.put(&quot;key4&quot;,2);</div><div class="line">    LinkedHashMap&lt;String,Integer&gt; linkedHashMap = map.entrySet().stream().sorted(Map.Entry.comparingByValue((v1,v2) -&gt; v2.compareTo(v1))).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2) -&gt; e1,LinkedHashMap::new));</div><div class="line">    System.out.println(linkedHashMap);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-17/80305570-file_1492423465236_f04f.png" alt=""></p>
<h4 id="4-Collections-toMap重复key的处理方式"><a href="#4-Collections-toMap重复key的处理方式" class="headerlink" title="4. Collections.toMap重复key的处理方式"></a>4. <code>Collections.toMap</code>重复key的处理方式</h4><p><code>声明User对象</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class User&#123;</div><div class="line">    private Integer id;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public User(Integer id, String name) &#123;</div><div class="line">        this.id = id;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(Integer id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>测试类：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">  public void test_034() &#123;</div><div class="line">      User u1 = new User(1,&quot;张三&quot;);</div><div class="line">      User u2 = new User(1,&quot;王武&quot;);</div><div class="line">      User u3 = new User(2,&quot;李四&quot;);</div><div class="line">      Map&lt;Integer,String&gt; map = Arrays.asList(u1,u2,u3).stream().collect(Collectors.toMap(User::getId, User::getName,(v1,v2) -&gt; v1,HashMap::new));</div><div class="line">      System.out.println(map);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>运行结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-17/80087753-file_1492425664414_3370.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React入门实战(二)]]></title>
      <url>http://jianwl.com/2017/04/09/React%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以来都很想去学习React，前一段时间因为业务的需要先去学习<code>Python</code>，Python已基本入门，未来一段时间将会来持续学习React技术栈。</p>
<h3 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h3><p>在<code>React</code>中，数据是自顶向下单向流动的，即从父组件到子组件。<code>state</code>和<code>props</code>是<code>React</code>组件中最重要的概念。<code>state</code>只关心每个组件自己内部的状态，这些状态只能在组件内改变。<code>props</code>是<code>React</code>用来让组件之间互相联系的一种机制。</p>
<h3 id="React组件生命周期"><a href="#React组件生命周期" class="headerlink" title="React组件生命周期"></a>React组件生命周期</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/62453041-file_1491716351303_165d7.png" alt="React生命周期整体流程图"></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-state范例"><a href="#1-state范例" class="headerlink" title="1. state范例"></a>1. <code>state</code>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class App03 extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;date: new Date()&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        this.timerID = setInterval(</div><div class="line">            () =&gt; this.tick(),</div><div class="line">            1000</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        clearInterval(this.timerID);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tick() &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            date: new Date()</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;h1&gt;Hello, world!&lt;/h1&gt;</div><div class="line">                &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(&lt;App03/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/36837049-file_1491716947107_15e99.png" alt=""></p>
<h4 id="2-props范例"><a href="#2-props范例" class="headerlink" title="2. props范例"></a>2. <code>props</code>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component,PropTypes &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class App04 extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        name : PropTypes.string,</div><div class="line">    &#125;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                Hello &#123;this.props.name&#125;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;App04 name=&quot;Judy&quot;/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/62676968-file_1491716985916_8d8d.png" alt=""></p>
<h4 id="3-绑定事件"><a href="#3-绑定事件" class="headerlink" title="3. 绑定事件"></a>3. 绑定事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component,PropTypes &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class App09 extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line"></div><div class="line">        this.handleChange = this.handleChange.bind(this);</div><div class="line"></div><div class="line">        this.state = &#123;</div><div class="line">            coffee : [],</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleChange(e) &#123;</div><div class="line">        const &#123;checked, value &#125; = e.target;</div><div class="line">        let &#123; coffee &#125; = this.state;</div><div class="line"></div><div class="line">        if(checked &amp;&amp; coffee.indexOf(value) === -1) &#123;</div><div class="line">            coffee.push(value);</div><div class="line">        &#125; else &#123;</div><div class="line">            coffee = coffee.filter(i =&gt; i !== value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        this.setState(&#123;</div><div class="line">            coffee,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123;coffee&#125; = this.state;</div><div class="line">        const coffeeItems = coffee.map((c =&gt; &lt;li&gt;&#123;c&#125;&lt;/li&gt;));</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;p&gt;请选择你最喜欢的咖啡:&lt;/p&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_1&quot; checked=&#123;coffee.indexOf(&apos;coffee_1&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_1</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_2&quot; checked=&#123;coffee.indexOf(&apos;coffee_2&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_2</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_3&quot; checked=&#123;coffee.indexOf(&apos;coffee_3&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_3</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot; value=&quot;coffee_4&quot; checked=&#123;coffee.indexOf(&apos;coffee_4&apos;) !== -1&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class="line">                    coffee_4</div><div class="line">                &lt;/label&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;div&gt;</div><div class="line">                    最后选择的咖啡:</div><div class="line">                    &lt;ul&gt;&#123;coffeeItems&#125;&lt;/ul&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;App09/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/44022370-file_1491724470762_50b0.png" alt=""></p>
<h4 id="4-组件间的通信"><a href="#4-组件间的通信" class="headerlink" title="4. 组件间的通信"></a>4. 组件间的通信</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component,PropTypes &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;</div><div class="line"></div><div class="line">class ListItem extends Component &#123;</div><div class="line">    static defaultProps = &#123;</div><div class="line">        text : &apos;&apos;,</div><div class="line">        checked: false,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">           &lt;li&gt;</div><div class="line">               &lt;input type=&quot;checkbox&quot; checked=&#123;this.props.checked&#125; onChange=&#123;this.props.onChange&#125;/&gt;</div><div class="line">               &lt;span&gt;&#123;this.props.value&#125;&lt;/span&gt;</div><div class="line">           &lt;/li&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class List extends Component &#123;</div><div class="line">    static defaultProps = &#123;</div><div class="line">        list: [],</div><div class="line">        handleItemChange: () =&gt; &#123;&#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line"></div><div class="line">        this.state = &#123;</div><div class="line">            list : this.props.list.map(entry =&gt; (&#123;</div><div class="line">                text: entry.text,</div><div class="line">                checked: entry.checked,</div><div class="line">            &#125;)),</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onItemChange(entry)&#123;</div><div class="line">        const &#123; list &#125; = this.state ;</div><div class="line"></div><div class="line">        this.setState(&#123;</div><div class="line">            list: list.map(prevEntry =&gt; (&#123;</div><div class="line">                text: prevEntry.text,</div><div class="line">                checked: prevEntry.text === entry.text ?</div><div class="line">                    !prevEntry.checked : prevEntry.checked,</div><div class="line">            &#125;)),</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        this.props.handleItemChange(entry);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &#123;this.state.list.map((entry,index) =&gt; (</div><div class="line">                        &lt;ListItem key=&#123;`list-$&#123;index&#125;`&#125; value=&#123;entry.text&#125; checked=&#123;entry.checked&#125; onChange=&#123;this.onItemChange.bind(this,entry)&#125;/&gt;</div><div class="line">                    ))&#125;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class App10 extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line"></div><div class="line">        this.handleItemChange = this.handleItemChange.bind(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleItemChange(item) &#123;</div><div class="line">        console.log(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;List list=&#123;[&#123;text: 1&#125;,&#123;text: 2&#125;]&#125; handleItemChange=&#123;this.handleItemChange&#125;/&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;App10/&gt;,document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-9/45259056-file_1491729802101_13081.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="external">React官方文档</a></li>
<li>深入React技术栈</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij 常用快捷键]]></title>
      <url>http://jianwl.com/2017/04/05/Intellij-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>IntelliJ在业界被公认为最好的java开发工具之一,了解其常用快捷键对于工作效率会有一定提升。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>查询最近的文件</strong></p>
<p>应用场景：可以快速跳转到之前刚刚查看过的文件。</p>
<p>快捷键：<code>command + E</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/51543212.jpg" alt=""></p>
<p><strong>查看最近编辑的文件</strong></p>
<p>应用场景：可以快速跳转到之前刚刚编辑过的文件。</p>
<p>快捷键：<code>command + shift +  E</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/51543212.jpg" alt=""></p>
<p><strong>快速定位到大括号的开头或结尾</strong></p>
<p>快捷键：<code>command + ]</code> 或 <code>command + [</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/97015680.jpg" alt=""></p>
<p><strong>快速查找类</strong></p>
<p>快捷键：<code>command + N</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/42335832.jpg" alt=""></p>
<p><strong>格式化代码</strong></p>
<p>快捷键：<code>command + alt + L</code></p>
<p><strong>文本替换</strong></p>
<p>快捷键：<code>command + R</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/60502414.jpg" alt=""></p>
<p><strong>全局查找</strong></p>
<p>快捷键： <code>control + shift + F</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/85182590.jpg" alt=""></p>
<p><strong>删除行</strong></p>
<p>快捷键：<code>command + X</code></p>
<p><strong>复制行</strong></p>
<p>快捷键：<code>command + D</code></p>
<p><strong>跳到方法实现处</strong></p>
<p>使用场景：通常我们会声明一个接口，然后让一个类实现这个接口。那么怎么从接口，跳到方法实现处呢？可以用这个快捷键</p>
<p>快捷键： <code>command + alt + B</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/41820209.jpg" alt=""></p>
<p><strong>隐藏工具窗口</strong></p>
<p>快捷键： <code>shift + esc</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/75772825.jpg" alt=""></p>
<p><strong>定位到具体某一行</strong></p>
<p>快捷键：<code>command + G</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/99125758.jpg" alt=""></p>
<p><strong>复制当前文件的路径</strong></p>
<p>快捷键：<code>command + shift + C</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/26431733.jpg" alt=""></p>
<p><strong>重命名</strong></p>
<p>快捷键：<code>shift + fn + F6</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-11/88468445.jpg" alt=""></p>
<p><strong>根据接口或抽象类找到实现/继承类</strong></p>
<p>快捷键：<code>alt + command + B</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-6/32445215-file_1491438185245_a538.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP之网络基础知识]]></title>
      <url>http://jianwl.com/2017/04/04/TCP%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>TCP</code>是网络编程的基础，这一节我们主要来学习<code>协议分层</code>、<code>ARP</code>、<code>RARP</code>、<code>IP</code> 、<code>Mac地址</code>、<code>OSPF路由协议</code>、<code>硬件设备介绍</code>。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="1-OSI-7层协议-amp-各层的作用"><a href="#1-OSI-7层协议-amp-各层的作用" class="headerlink" title="1. OSI 7层协议 &amp; 各层的作用"></a>1. OSI 7层协议 &amp; 各层的作用</h4><p><code>OSI</code>参考模型分为7层，上下层之间进行交互时所遵循的约定叫<code>接口</code>，同一层之间的交互所遵循的约定叫<code>协议</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">层</th>
<th style="text-align:center">分层名称</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">每层功能概览</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">应用层</td>
<td style="text-align:center">针对特定应用的协议</td>
<td style="text-align:center">如：电子邮件 → 电子邮箱协议；文件传输 → 文件传输协议</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">表示层</td>
<td style="text-align:center">设备固有数据格式和网络标准数据格式的转换</td>
<td style="text-align:center">接收不同表现形式的信息，如文字流、图像、声音等</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">会话层</td>
<td style="text-align:center">负责建立和断开通讯，以及<strong>数据的分割</strong>等数据传输相关的管理</td>
<td style="text-align:center">何时建立连接，何时断开连接以及保持多久的连接？</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">传输层</td>
<td style="text-align:center">只在通信双方的节点上进行处理，而无需再路由器上处理，起着可靠传输的作用。</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/76951531-file_1491280215483_aa6e.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">网络层</td>
<td style="text-align:center">将数据传输到目标地址，目标地址可以是多个网络通过路由器连接而成的某一个地址。这一层主要<strong>负责寻址</strong>和<strong>路由选择</strong>。</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/17373754-file_1491280668058_18508.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">数据链路层</td>
<td style="text-align:center">负责物理层面上的互联、节点之间的通信传输，将<code>0</code>、<code>1</code>序列划分为具有意义的数据帧传给对端</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/4389953-file_1491281059377_14847.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">物理层</td>
<td style="text-align:center">负责<code>0</code>、<code>1</code>比特流与电压高低、光的闪灭之间的互换</td>
<td style="text-align:center"><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/80710941-file_1491281893820_70a6.png" alt=""></td>
</tr>
</tbody>
</table>
<h4 id="2-一个请求的从发送到返回都经历了什么？"><a href="#2-一个请求的从发送到返回都经历了什么？" class="headerlink" title="2. 一个请求的从发送到返回都经历了什么？"></a>2. 一个请求的从发送到返回都经历了什么？</h4><p><code>HTTP请求「应用层」</code> → <code>DNS协议，域名映射IP</code> → <code>HTTP基于TCP/IP协议「传输层」</code> → <code>ARP协议获取接收端Mac地址 通过OSPF路由协议找到目标主机「网络层」</code> → <code>传输数据帧「数据链路层」</code> → <code>将计算机二进制 0、1信号 转换为电压的高低电平「物理层」</code></p>
<h4 id="3-ARP"><a href="#3-ARP" class="headerlink" title="3. ARP"></a>3. ARP</h4><p>只要确定<code>IP</code>地址，就可以向这个目标地址发送<code>IP</code>数据报，然后在<strong>数据链路层</strong>，进行实际通信时需要每个IP地址所对应的<code>MAC</code>地址。</p>
<p><code>ARP</code>是一个解决地址问题的协议，以目标<code>IP</code>地址作为线索，用来定位下一个应该接收数据分包的网络对应的<code>MAC</code>地址。如果目标主机不在同一个链路上，可以<strong>通过代理ARP的路由器</strong>将<code>ARP</code>请求转发给相邻网段。「注：<code>ARP</code>包会被路由器隔离，<code>ARP</code>只适用于<code>IPv4</code>,<code>IPv6</code>用<code>ICMpv6</code>」</p>
<p>举例：</p>
<p><code>主机A</code>为了获取<code>主机B</code>的<code>Mac</code>地址，通过广播发送一个<code>ARP</code>请求包「请求中包含<code>主机B</code>的<code>IP</code>地址」，由于广播的包可以被同一个链路上所有的主机或路由器接收，如果<code>ARP</code>请求包中的目标<code>IP</code>与自己的<code>IP</code>地址一致，那么这个节点就将自己的<code>Mac</code>地址塞入<code>ARP</code>响应包返回给<code>主机A</code>。</p>
<h4 id="4-RARP"><a href="#4-RARP" class="headerlink" title="4. RARP"></a>4. RARP</h4><p><code>RARP</code>是将<code>ARP</code>反过来，从<code>MAC</code>地址定位IP地址的一种协议。</p>
<h4 id="5-IP地址"><a href="#5-IP地址" class="headerlink" title="5. IP地址"></a>5. IP地址</h4><p><code>IP地址</code>处于网络层， 用于在<strong>连接到网络中的所有主机识别出进行通信的目标地址；</strong> <code>IP地址</code>由32位正整数来表示，每8位为一组，分4组，每组以<code>.</code>隔开；<code>IP地址</code>由<strong>网络标识</strong>和<strong>主机标识</strong>两部分组成。相同网段内的主机必须有相同的网络标识，主机标识不允许在同一个网段内重复出现。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/15647844-file_1491288228515_fbc6.png" alt=""></p>
<p>目前引入子网以后，一个IP地址有了两种识别码，一个是<code>IP</code>本身，另一个是<code>子网掩码</code>。子网掩码对应<code>IP网络标识</code>部分的位全部为<code>1</code>，对应<code>IP地址主机识别</code>的部分则全部为<code>0</code>。</p>
<p>举例：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-4/84217771-file_1491288982288_790d.png" alt=""></p>
<h4 id="6-MAC地址"><a href="#6-MAC地址" class="headerlink" title="6. MAC地址"></a>6. MAC地址</h4><p><code>Mac</code>地址用于识别数据链路中的互连的节点，<code>Mac</code>地址长48比特，每个<strong>网卡</strong>都有一个唯一的<code>Mac</code>地址。</p>
<h4 id="7-OSPF"><a href="#7-OSPF" class="headerlink" title="7. OSPF"></a>7. OSPF</h4><p><code>OSPF</code>为链路状态型路由器，相邻路由器之间交换链路状态生成网络拓扑信息，然后在根据这个拓扑信息生成路由控制表。<code>OSPF</code>给每条链路赋予一个权重，并始终选择一个权重最小的路径作为最终路由。「注：连接到同一个链路的路由器称作相邻路由器」</p>
<h4 id="8-硬件设备"><a href="#8-硬件设备" class="headerlink" title="8. 硬件设备"></a>8. 硬件设备</h4><table>
<thead>
<tr>
<th style="text-align:center">设备</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">网卡</td>
<td style="text-align:center">使计算机连网的设备</td>
</tr>
<tr>
<td style="text-align:center">中继器</td>
<td style="text-align:center">从物理上延长网络的设备，由电缆传过来的电信号或光信号经由中继放大器的波形调整和放大再传给另外一个电缆。</td>
</tr>
<tr>
<td style="text-align:center">网桥/2层交换机</td>
<td style="text-align:center">从数据链路层上延长网络的设备，它能识别数据链路层中的数据帧，并将这些数据帧临时存储于内存中，在重新生成信号作为一个全新帧给相连的另一个网段。</td>
</tr>
<tr>
<td style="text-align:center">路由器/3层交换机</td>
<td style="text-align:center">通过网络层转发分组数据的设备，路由器用于连接不同的数据链路。</td>
</tr>
<tr>
<td style="text-align:center">4~7层交换机</td>
<td style="text-align:center">处理传输层以上各层网络传输的设备</td>
</tr>
<tr>
<td style="text-align:center">网关</td>
<td style="text-align:center">转换协议的设备，例子：电脑和手机之间设置了一道网关，是的电脑和手机间可以互发邮件。</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>图解TCP/IP - 竹下隆史</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim之常用快捷键]]></title>
      <url>http://jianwl.com/2017/04/04/Vim%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Vim</code>是最常用的文本编辑器，掌握常用的快捷键，可以极大的增强工作效率。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="1-移动光标"><a href="#1-移动光标" class="headerlink" title="1. 移动光标"></a>1. 移动光标</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gg 光标移动文本首行</div><div class="line">G 光标移到文本末行</div><div class="line">nG 光标移动到第n行</div><div class="line">nEnter 光标下移n行</div><div class="line">0 光标移到本行开头</div><div class="line">$ 光标移到本行末尾</div><div class="line">CTRL+F 下一页</div><div class="line">CTRL+B 上一页</div></pre></td></tr></table></figure>
<h4 id="2-查找-amp-替换"><a href="#2-查找-amp-替换" class="headerlink" title="2. 查找&amp;替换"></a>2. 查找&amp;替换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/word 向下查找word</div><div class="line">n 重复上一个查找</div><div class="line">N 反向查找</div><div class="line">:1,$s/word1/word2/gc 把word1替换成word2</div></pre></td></tr></table></figure>
<h4 id="3-编辑操作"><a href="#3-编辑操作" class="headerlink" title="3. 编辑操作"></a>3. 编辑操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dd 删除光标所在行</div><div class="line">ndd 向下删除n行</div><div class="line">x 删除一个字符</div><div class="line">nx 删除n个字符</div><div class="line">yy 复制光标所在行</div><div class="line">nyy 向下复制n行</div><div class="line">p 粘贴到光标下一行</div></pre></td></tr></table></figure>
<h4 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">u 撤销上一个操作</div><div class="line">CTRL+R 恢复之前的操作</div><div class="line">. 重复上一个操作</div><div class="line">:set nu 显示行号</div><div class="line">:set nonu 不显示行号</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://fqk.io/page/29/" target="_blank" rel="external">vi快捷键备忘</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之正则表达式实战]]></title>
      <url>http://jianwl.com/2017/04/02/JAVA%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节主要来学习，正则表达式在<code>JAVA</code>中的运用。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-获取匹配值"><a href="#1-获取匹配值" class="headerlink" title="1. 获取匹配值"></a>1. 获取匹配值</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/59243831-file_1491135662906_16f46.png" alt=""></p>
<h4 id="2-查找与替换"><a href="#2-查找与替换" class="headerlink" title="2. 查找与替换"></a>2. 查找与替换</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/44125256-file_1491136420354_158ed.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>精通正则表达式 - 余晟</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式入门(二)]]></title>
      <url>http://jianwl.com/2017/04/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="http://jianwl.com/2017/04/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/#more">上一节正则表达式入门</a>,学习了正则表达的基本功，这一节将继续深入学习正则表达式。</p>
<h3 id="正则表达式语法进阶"><a href="#正则表达式语法进阶" class="headerlink" title="正则表达式语法进阶"></a>正则表达式语法进阶</h3><h4 id="1-常用的字符"><a href="#1-常用的字符" class="headerlink" title="1) 常用的字符"></a>1) 常用的字符</h4><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\s</td>
<td>任何”空白”字符「空格符、制表符、进制符等」</td>
</tr>
<tr>
<td>\S</td>
<td>除<code>\s</code>之外的任何字符</td>
</tr>
<tr>
<td>\w</td>
<td><code>[a-zA-Z0-9]</code>在<code>\w+</code>中很有用，可以用来匹配一个单词</td>
</tr>
<tr>
<td>\W</td>
<td>除<code>\w</code>之外的任何字符，也就是<code>[^a-zA-Z0-9]</code></td>
</tr>
<tr>
<td>\d</td>
<td><code>[0-9]</code>,即数字</td>
</tr>
<tr>
<td>\D</td>
<td>除<code>\d</code>外的任何字符，即<code>[^0-9]</code></td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界，只是一个位置，这个位置的一侧是构成单词的字符，另一侧为非单词字符、字符串的开始或结束位置。<code>\b</code>是零宽度的。</td>
</tr>
</tbody>
</table>
<p>实战</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/33870462-file_1491108739351_155aa.png" alt=""></p>
<h4 id="2-输入正整数"><a href="#2-输入正整数" class="headerlink" title="2) 输入正整数"></a>2) 输入正整数</h4><p><code>perl</code>简单语法介绍，<code>=~</code>用来连接正则表达式和待搜索的目标字符串。<code>m/.../</code>告诉<code>Perl</code>该对这个正则表达式进行什么操作。<code>m</code>代表尝试进行<code>正则表达式匹配</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/57253842-file_1491115515846_f21d.png" alt=""></p>
<h4 id="3-输入正-amp-负小数、正-amp-负整数"><a href="#3-输入正-amp-负小数、正-amp-负整数" class="headerlink" title="3) 输入正&amp;负小数、正&amp;负整数"></a>3) 输入正&amp;负小数、正&amp;负整数</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/34044067-file_1491116256845_4c73.png" alt=""></p>
<h4 id="4-使用正则表达式修改文本"><a href="#4-使用正则表达式修改文本" class="headerlink" title="4) 使用正则表达式修改文本"></a>4) 使用正则表达式修改文本</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/231628-file_1491117893226_1375.png" alt=""></p>
<h4 id="5）-四种类型的环视-难点"><a href="#5）-四种类型的环视-难点" class="headerlink" title="5） 四种类型的环视(难点)"></a>5） 四种类型的环视(难点)</h4><table>
<thead>
<tr>
<th>类型</th>
<th>正则表达式</th>
<th>匹配成功的条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>肯定逆序环视</td>
<td><code>?&lt;=...</code></td>
<td>子表达式能够成功匹配<strong>左侧</strong>文本</td>
</tr>
<tr>
<td>肯定顺序环视</td>
<td><code>?=...</code></td>
<td>子表达式能够匹配<strong>右侧</strong>文本 </td>
</tr>
<tr>
<td>否定逆序环视</td>
<td><code>?&lt;!...</code></td>
<td>子表达式不能匹配<strong>左侧</strong>文本</td>
</tr>
<tr>
<td>否定顺序环视</td>
<td><code>?!...</code></td>
<td>子表达式不能匹配<strong>右侧</strong>文本</td>
</tr>
</tbody>
</table>
<p>注意： 环视不消耗正则表达式的匹配字符。</p>
<h5 id="（1）-环视概念与匹配过程示例"><a href="#（1）-环视概念与匹配过程示例" class="headerlink" title="（1）. 环视概念与匹配过程示例"></a>（1）. 环视概念与匹配过程示例</h5><p>对于源字符串<code>ABC</code>，正则<code>(?=A)[A-Z]</code>匹配的是：</p>
<p>1、 <code>(?=A)</code>所在的位置，后面是<code>A</code> </p>
<p>2、 表达式<code>[A-Z]</code>匹配<code>A-Z</code>中任意一个字母，根据两个的先后位置关系，组合在一起，那就是<code>(?=A)</code>所在的位置，后面是A，而且是<code>A-Z</code>中任意一个字母，因此上面正则表达式匹配一个大写字母<code>A</code></p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/29664732-file_1491122472393_140ae.png" alt=""></p>
<h5 id="2-肯定顺序实战："><a href="#2-肯定顺序实战：" class="headerlink" title="(2) . 肯定顺序实战："></a>(2) . 肯定顺序实战：</h5><p><code>[A-Za-z]+(?=;)</code>,字母序列后面跟着<code>；</code></p>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/93389675-file_1491123341579_f721.png" alt=""></p>
<h5 id="3-肯定逆序实战"><a href="#3-肯定逆序实战" class="headerlink" title="(3) . 肯定逆序实战"></a>(3) . 肯定逆序实战</h5><p><code>\b[0-9]\b(?&lt;=[13579])</code>，0-9中的基数;</p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/64931704-file_1491124392441_14979.png" alt=""></p>
<h5 id="4-否定顺序实战"><a href="#4-否定顺序实战" class="headerlink" title="(4) . 否定顺序实战"></a>(4) . 否定顺序实战</h5><p><code>(?!.*?[0h])\b[a-z0-9]+\b</code>，不包含<code>0</code>和<code>h</code>的字母和数字系列</p>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/58656792-file_1491125331588_15359.png" alt=""></p>
<h5 id="5-否定逆序实战"><a href="#5-否定逆序实战" class="headerlink" title="(5) . 否定逆序实战"></a>(5) . 否定逆序实战</h5><p><code>\b[a-z]+(?&lt;!z)\b</code>, 不以<code>z</code>结尾的单词</p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/28220906-file_1491125753738_94b.png" alt=""></p>
<h5 id="6-进阶的练习"><a href="#6-进阶的练习" class="headerlink" title="(6) . 进阶的练习"></a>(6) . 进阶的练习</h5><p>给一组数字从右到左，每三位加一个逗号;</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/43300392-file_1491131531371_d909.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.cnblogs.com/Zjmainstay/p/regexp-lookaround.html" target="_blank" rel="external">环视的用法</a></li>
<li><a href="http://blog.csdn.net/lxcnn/article/details/4355364" target="_blank" rel="external">\b 单词边界</a></li>
<li>精通正则表达式 - 余晟</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式入门]]></title>
      <url>http://jianwl.com/2017/04/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>正则表达式是文本处理&amp;数据爬取的神器，但由于语法难记且在日常工作中用到的机会较少，所以对这一神器知之甚少，这节来学习正则表达式的简单用法。</p>
<h3 id="egrep用法"><a href="#egrep用法" class="headerlink" title="egrep用法"></a>egrep用法</h3><p>文本检索是正则表达式最简单的应用之一 – Mac系统下<code>egrep</code>提供了文本正则表达式的检索功能。举个简单的例子:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-1/87069959-file_1491061667712_8d09.png" alt=""></p>
<h3 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h3><h4 id="1-行的开始和结束"><a href="#1-行的开始和结束" class="headerlink" title="1. 行的开始和结束"></a>1. 行的开始和结束</h4><p><code>^</code>代表一行的开始，<code>$</code>代表结束</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-1/71581110-file_1491061994393_b0fa.png" alt=""></p>
<h4 id="2-字符组"><a href="#2-字符组" class="headerlink" title="2. 字符组"></a>2. 字符组</h4><h5 id="1-范围型字符组"><a href="#1-范围型字符组" class="headerlink" title="1) 范围型字符组"></a>1) 范围型字符组</h5><p>匹配若干字符之一，可以使用结构体<code>[...]</code>,在字符组内部，<strong>字符组元字符</strong><code>-</code>表示一个范围比如<code>[0-9]</code>。特别注意：<strong>连字符</strong><code>-</code>只有在字符组内部才能表示范围，否则就是普通字符。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/54684166-file_1491062598112_9911.png" alt=""></p>
<h5 id="2）排除型字符组"><a href="#2）排除型字符组" class="headerlink" title="2）排除型字符组"></a>2）排除型字符组</h5><p>字符组会匹配任何未列出的字符，可以用结构体<code>[^...]</code>表示，<code>^</code>在字符组的开头表示排除。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/72090159-file_1491095085321_162c1.png" alt=""></p>
<h4 id="3-用点号匹配任意字符"><a href="#3-用点号匹配任意字符" class="headerlink" title="3. 用点号匹配任意字符"></a>3. 用点号匹配任意字符</h4><p>元字符<code>.</code>是用来匹配任意字符的字符组。例如我们要搜索<code>92/06/02</code>、<code>92-06-02</code>、<code>92.06.02</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/77946479-file_1491096549681_13890.png" alt=""></p>
<h4 id="4-匹配任意子表达式"><a href="#4-匹配任意子表达式" class="headerlink" title="4. 匹配任意子表达式"></a>4. 匹配任意子表达式</h4><p><code>|</code>表示或，能够匹配多个子表达式。比如<code>First</code>和<code>1st</code>是两个表达式，用正则表达式匹配<code>(Fir|1)st</code>,括号是必须的。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/9589231-file_1491097579389_ae64.png" alt=""></p>
<h4 id="5-egrep-忽略大小写"><a href="#5-egrep-忽略大小写" class="headerlink" title="5. egrep 忽略大小写"></a>5. egrep 忽略大小写</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/76759955-file_1491097883322_b1d9.png" alt=""></p>
<h4 id="6-可选元素"><a href="#6-可选元素" class="headerlink" title="6. 可选元素"></a>6. 可选元素</h4><p><code>?</code>代表可选项，把它加在一个字符的后面，就表示此处容许出现这个字符。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/34841121-file_1491098454865_70b6.png" alt=""></p>
<h4 id="7-重复元素"><a href="#7-重复元素" class="headerlink" title="7. 重复元素"></a>7. 重复元素</h4><table>
<thead>
<tr>
<th>符号</th>
<th>次数下限</th>
<th>次数上限</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>？</code></td>
<td>无</td>
<td>1</td>
<td><strong>在<code>?</code>之前的元素</strong>可以不出现，也可以只出现一次</td>
</tr>
<tr>
<td><code>*</code></td>
<td>无</td>
<td>无</td>
<td><strong>在<code>*</code>之前出现的元素</strong>可以出现无数次，也可以不出现</td>
</tr>
<tr>
<td><code>+</code></td>
<td>1</td>
<td>无</td>
<td><strong>在<code>+</code>之前出现的元素</strong>可以出现无数次，但至少要出现一次</td>
</tr>
</tbody>
</table>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/93512234-file_1491099677438_125b8.png" alt=""></p>
<p>规定重复出现的次数<code>{min,max}</code> </p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/58020717-file_1491101398884_a930.png" alt=""></p>
<h4 id="8-神奇的转义字符"><a href="#8-神奇的转义字符" class="headerlink" title="8. 神奇的转义字符\"></a>8. 神奇的转义字符<code>\</code></h4><p>使用转义符<code>\</code>，元字符就会失去特殊含义，比如匹配<code>90.06.02</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/35875132-file_1491101901364_14a1a.png" alt=""></p>
<h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p>匹配24小时制<code>HH:MM</code>,特别注意以2开头的时间如 <code>21:59</code></p>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-2/1904614-file_1491103167597_9411.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>符号</th>
<th>元字符</th>
<th>匹配对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>  <code>.</code></td>
<td>点号</td>
<td>匹配单个任意字符</td>
</tr>
<tr>
<td>  <code>[...]</code></td>
<td>字符组</td>
<td>匹配单个列出的字符</td>
</tr>
<tr>
<td><code>[^...]</code></td>
<td>排除型字符组</td>
<td>匹配单个未列出的字符</td>
</tr>
<tr>
<td><code>\char</code></td>
<td>转义字符</td>
<td>若char是元字符，匹配char对应的普通字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>问号</td>
<td>容许匹配一次，但非必需</td>
</tr>
<tr>
<td><code>*</code></td>
<td>星号</td>
<td>容许匹配多次，但也可不匹配</td>
</tr>
<tr>
<td><code>+</code></td>
<td>加号</td>
<td>至少匹配一次，至多可以任意次</td>
</tr>
<tr>
<td><code>{min,max}</code></td>
<td>区间量词</td>
<td>至少需要min次，至多可能任意次「不是所有egrep版本都支持」</td>
</tr>
<tr>
<td><code>^</code></td>
<td>脱字符</td>
<td>匹配一行的开头位置</td>
</tr>
<tr>
<td><code>$</code></td>
<td>美元符</td>
<td>匹配一行的结束位置</td>
</tr>
<tr>
<td><code>(...)</code></td>
<td>括号</td>
<td>限定多选结构的范围</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://item.jd.com/11070361.html" target="_blank" rel="external">精通正则表达式- 余晟</a> </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac下效率神器之autojump]]></title>
      <url>http://jianwl.com/2017/04/01/Mac%E4%B8%8B%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E4%B9%8Bautojump/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>过去常用到的一些命令，习惯在<code>.zshrc</code>文件中添加几行快捷键命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias dada = cd /Users/jianweilin/Work/Java/dada</div><div class="line">alias test = cd /Users/jianweilin/Work/Java/test</div></pre></td></tr></table></figure>
<p>发现一个跳转神器<code>autojump</code>，举个例子</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-4-1/74960136-file_1491052275484_549a.png" alt=""></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、 建议安装<code>zsh</code></p>
<p>2、建议安装<code>homebrew</code></p>
<p>3、 <code>brew install autojump</code></p>
<p>4、 <code>vim ~/.zshrc</code>找到<code>plugins=</code>，在后面添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(git autojump)</div></pre></td></tr></table></figure>
<p>5、然后继续在上述文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure>
<p>6、 <code>source ~/.zshrc</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://barretlee.com/blog/2015/03/30/autojump-in-mac/" target="_blank" rel="external">Mac下的效率工具autojump –阿里小胡子哥</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于代码阅读的思考]]></title>
      <url>http://jianwl.com/2017/04/01/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个工程师，你的价值如何体现？不是掌握了多少知识，而是体现在创造出的系统，否则空有满腹经纶，最后也只是纸上谈兵。学习编写优秀代码的最佳方式，就是阅读高品质的代码，学习别人的高明之处。这一节我们将来学习阅读优秀源码的技巧。</p>
<h3 id="阅读代码"><a href="#阅读代码" class="headerlink" title="阅读代码"></a>阅读代码</h3><h4 id="1-为什么阅读代码"><a href="#1-为什么阅读代码" class="headerlink" title="1. 为什么阅读代码"></a>1. 为什么阅读代码</h4><p>经常花时间阅读别人编写的高质量代码，就像阅读高品质的散文能够丰富词汇，激发想象力，扩展思维一样，分析设计良好的软件系统的内部结构可以学到<code>新的架构模式</code>、<code>数据结构</code>、<code>编码方法</code>、<code>算法</code>、<code>风格</code>和<code>文档规范</code>、<code>应用程序编程接口(API)</code>，同时可以提高编写代码的水准。</p>
<p>阅读代码的过程中，不可避免地会遇到一些在实践中应该尽量避免的代码，能够快速地从坏代码中区分出好代码是一项有价值的技能；接触一些编码的反面例子有助于提高这种能力，通过下面这些征兆，可以很容易识别出低品质的代码：1️⃣ 编码风格不一致 2️⃣ 结构不必要地复杂或难以理解 3️⃣ 明显的逻辑错误或疏忽 4️⃣ 过度使用不可移植的构造 5️⃣ 缺乏维护</p>
<p>大型、有组织体制之下的项目都会采纳一套编码规范、指导原则或约定，代码规范提供风格上的指导，目标是增强代码的可靠性、易读性和可维护性。关注优秀源码的<code>类命名</code>、<code>变量命名</code>、<code>代码缩进</code>、<code>代码编排</code>、<code>命名约定</code>、<code>文档</code>；</p>
<p>通过阅读优秀源码，我们可以学习到<code>分层架构的设计</code>、<code>更加合理的抽象面向对象的结构</code>、<code>如何更加合理的拆分模块</code>、<code>代码重用</code></p>
<h4 id="2-如何阅读代码"><a href="#2-如何阅读代码" class="headerlink" title="2. 如何阅读代码"></a>2. 如何阅读代码</h4><p>有选择地阅读代码，同时还有<code>有自己的目标</code>。想学习新的模式、编码风格还是满足某些需求的方法？或者只是浏览代码，获取其中的某些亮点。</p>
<p>从小型的程序开始阅读，不要立即陷入对大型系统的研究中，编译研究的程序并运行他们，这样可以得到即时的反馈，了解代码预想的工作方式，同时可以获得成就感。</p>
<p>积极介入现实的代码，能够快速从中了解到一些情况，当觉得已经掌握了他们之后，再采取更有组织的方式来学习，比如：阅读相关书籍、文档、手册、参加培训课程。</p>
<h4 id="3-实战"><a href="#3-实战" class="headerlink" title="3. 实战"></a>3. 实战</h4><p>比如：想要了解一个特定的功能是如何实现的。首先使用该系统，得到他的外部接口，根据外部接口，定位目标代码，针对它进行研究分析，忽略不相关的部分。如果觉得在原来的上下文中，理解代码有困难，就将他复制到一个历史文件中，删除所有不相关的部分。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、养成一个习惯，经常花时间阅读别人编写的高品质代码</p>
<p>2、要有选择地阅读代码，同时还要有自己的目标，想学习新的模式、编码风格、还是满足某些需求的方法</p>
<p>3、对于那些大型且组织良好的系统，只需要最低限度地了解它的全部功能，就能够对它做出修改。</p>
<p>4、向系统中增加新功能时，首先的任务就是找到类似特性的代码，将它作为待实现功能的模板。</p>
<p>5、阅读代码寻找重构机会时，先从系统的架构开始，然后逐步细化，能够获得最大的效益。</p>
<p>6、不需要为了效率，牺牲代码的可读性</p>
<p>7、通过浏览项目的源代码树 – 包含项目源代码的层次目录结构，来分析一个项目的组织方式，源码树常常能够反映出项目在架构和软件过程上的结构。</p>
<p>8、<strong>阅读代码时，应该尽可能利用任何能够得到的文档。</strong></p>
<p>9、<strong>阅读一个小时代码所得到的信息只不过相当于阅读一分钟文档</strong></p>
<p>10、可以将系统的设计规格说明作为认知代码结构的路线图，阅读具体代码的指引</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>代码阅读方法与实践</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之易出错语法]]></title>
      <url>http://jianwl.com/2017/03/31/Python%E4%B9%8B%E6%98%93%E5%87%BA%E9%94%99%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要记录<code>Python</code>和<code>Java</code>不一样的语法，用于备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-三目运算"><a href="#1-三目运算" class="headerlink" title="1. 三目运算"></a>1. 三目运算</h4><p>语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">为真的结果  if 判断条件 else 为假的结果</div></pre></td></tr></table></figure>
<p>实战</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/68640470-file_1490942427899_33c0.png" alt=""></p>
<h5 id="2-flask-josnify与json-dumps的区别"><a href="#2-flask-josnify与json-dumps的区别" class="headerlink" title="2. flask.josnify与json.dumps的区别"></a>2. flask.josnify与json.dumps的区别</h5><p>json操作：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/98569674-file_1490945276911_e3be.png" alt=""></p>
<p>jsonify操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def render_success(content=None):</div><div class="line">    data = dict(</div><div class="line">        status=u&apos;ok&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    if content is not None:</div><div class="line">        data.update(</div><div class="line">            content=content</div><div class="line">        )</div><div class="line"></div><div class="line">    return jsonify(data)</div></pre></td></tr></table></figure>
<p>区别：</p>
<p>jsonify在flask中返回<code>flask.Response()</code>已经在返回的对象的<code>Header</code>中塞入<code>content-type: application/json</code>，而<code>json.dumps()</code>仅仅是返回一个编码后的字符串。</p>
<h4 id="3-判断是否是某一类型"><a href="#3-判断是否是某一类型" class="headerlink" title="3. 判断是否是某一类型"></a>3. 判断是否是某一类型</h4><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(object,classinfo)</div></pre></td></tr></table></figure>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/9606019-file_1490947230781_fc6f.png" alt=""></p>
<h4 id="4-args和-kwargs区别？"><a href="#4-args和-kwargs区别？" class="headerlink" title="4. *args和**kwargs区别？"></a>4. <code>*args</code>和<code>**kwargs</code>区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*args 元组,特别注意入参的方式</div><div class="line">**kwargs 字典,特别注意入参的方式</div></pre></td></tr></table></figure>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/7333141-file_1490950330464_129f0.png" alt=""></p>
<h4 id="5-set取交集"><a href="#5-set取交集" class="headerlink" title="5. set取交集"></a>5. <code>set</code>取交集</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/57928855-file_1490953364605_13cda.png" alt=""></p>
<h4 id="6-xrange数据集"><a href="#6-xrange数据集" class="headerlink" title="6. xrange数据集"></a>6. <code>xrange</code>数据集</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/86398939-file_1490953813150_14023.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://stackoverflow.com/questions/7907596/json-dumps-vs-flask-jsonify" target="_blank" rel="external">json-dumps-vs-flask-jsonify</a></li>
<li><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">python官方文档</a></li>
<li><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs" target="_blank" rel="external">args-and-kwargs - stackoverflow</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之时间模块]]></title>
      <url>http://jianwl.com/2017/03/31/Python%E4%B9%8B%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Python</code>自带的时间工具，不支持对月、年的加减，找到一个好用的时间工具包<a href="http://labix.org/python-dateutil#head-1443e0f14ad5dff07efd465e080d1110920673d8" target="_blank" rel="external">python-dateutil</a>，这节主要来学习常用的时间操作。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><h4 id="安装python-deteutil"><a href="#安装python-deteutil" class="headerlink" title="安装python-deteutil"></a>安装<code>python-deteutil</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install python-deteutil==1.5</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1、时间的加减法"><a href="#1、时间的加减法" class="headerlink" title="1、时间的加减法"></a>1、时间的加减法</h4><h5 id="1-获取当前的时间"><a href="#1-获取当前的时间" class="headerlink" title="1) 获取当前的时间"></a>1) 获取当前的时间</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/9612647-file_1490939019028_d0df.png" alt=""></p>
<h5 id="2-加减天数"><a href="#2-加减天数" class="headerlink" title="2) 加减天数"></a>2) 加减天数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/61445044-file_1490936471089_d50a.png" alt=""></p>
<h5 id="3-加减周数"><a href="#3-加减周数" class="headerlink" title="3) 加减周数"></a>3) 加减周数</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/38513613-file_1490936606422_331d.png" alt=""></p>
<h5 id="4-加减月份"><a href="#4-加减月份" class="headerlink" title="4) 加减月份"></a>4) 加减月份</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/2357238-file_1490936532659_681e.png" alt=""></p>
<h5 id="5-加减年"><a href="#5-加减年" class="headerlink" title="5) 加减年"></a>5) 加减年</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/14156409-file_1490936660756_134ee.png" alt=""></p>
<h4 id="2-时间转换"><a href="#2-时间转换" class="headerlink" title="2. 时间转换"></a>2. 时间转换</h4><h5 id="1-转换为固定格式的时间字符串"><a href="#1-转换为固定格式的时间字符串" class="headerlink" title="1) 转换为固定格式的时间字符串"></a>1) 转换为固定格式的时间字符串</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/56887950-file_1490937015674_46a9.png" alt=""></p>
<table>
<thead>
<tr>
<th>日期格式化符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%y</td>
<td>两位数的年份表示</td>
</tr>
<tr>
<td>%Y</td>
<td>四位数的年份表示</td>
</tr>
<tr>
<td>%m</td>
<td>月份</td>
</tr>
<tr>
<td>%d</td>
<td>月内的一天</td>
</tr>
<tr>
<td>%H</td>
<td>24小时制</td>
</tr>
<tr>
<td>%l</td>
<td>12小时制</td>
</tr>
<tr>
<td>%M</td>
<td>分钟数</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
</tr>
</tbody>
</table>
<h5 id="2-固定格式的字符串转化为秒级时间戳"><a href="#2-固定格式的字符串转化为秒级时间戳" class="headerlink" title="2) 固定格式的字符串转化为秒级时间戳"></a>2) 固定格式的字符串转化为秒级时间戳</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/15983829-file_1490937862570_b897.png" alt=""></p>
<h5 id="3-Float类型时间戳转换为固定格式的字符串"><a href="#3-Float类型时间戳转换为固定格式的字符串" class="headerlink" title="3) Float类型时间戳转换为固定格式的字符串"></a>3) <code>Float</code>类型时间戳转换为固定格式的字符串</h5><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/25777888-file_1490938652461_80e1.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.runoob.com/python/python-date-time.html" target="_blank" rel="external">Python 日期和时间</a></li>
<li><a href="http://labix.org/python-dateutil#head-1443e0f14ad5dff07efd465e080d1110920673d8" target="_blank" rel="external">python-dateutil 教程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之SQLAlchemy增删改查]]></title>
      <url>http://jianwl.com/2017/03/30/Python%E4%B9%8BSQLAlchemy%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚接触Python对于DB操作不熟练，简单写了个Demo，用来学习<code>SQLAlchemy</code>的增删改查操作。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-数据库创建表"><a href="#1-数据库创建表" class="headerlink" title="1. 数据库创建表"></a>1. 数据库创建表</h4><p><code>MYSQL</code>的test数据库创建一张表<code>daojia_audit_info</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `daojia_audit_info` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `bd_id` bigint(11) NOT NULL COMMENT &apos;BD编号&apos;,</div><div class="line">  `audit_type` int(11) NOT NULL COMMENT &apos;1 招商审核 2 续签审核&apos;,</div><div class="line">  `collection_id` varchar(11) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;招商审核主键标识，招商审核时一定不为空&apos;,</div><div class="line">  `org_code` varchar(11) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;商家编码，续签审核时肯定不为空&apos;,</div><div class="line">  `left_time` bigint(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;审核剩余时间&apos;,</div><div class="line">  `is_read` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;0 未读 1 已读&apos;,</div><div class="line">  `is_del` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;0 未删除 1 已删除&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h4 id="2-增删改查操作"><a href="#2-增删改查操作" class="headerlink" title="2. 增删改查操作"></a>2. 增删改查操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"># _*_ coding:UTF-8 _*_</div><div class="line">from sqlalchemy import BIGINT</div><div class="line">from sqlalchemy import Column</div><div class="line">from sqlalchemy import Integer</div><div class="line">from sqlalchemy import String</div><div class="line">from sqlalchemy import TIMESTAMP</div><div class="line">from sqlalchemy import create_engine</div><div class="line">from sqlalchemy.ext.declarative import declarative_base</div><div class="line">from sqlalchemy.orm import sessionmaker</div><div class="line"></div><div class="line">DB_CONNECT_STRING = &quot;mysql://root:root@localhost/test&quot;</div><div class="line">engine = create_engine(DB_CONNECT_STRING, echo=False)</div><div class="line"></div><div class="line">DB_Session = sessionmaker(bind=engine)</div><div class="line">session = DB_Session()</div><div class="line"></div><div class="line">BaseModel = declarative_base()</div><div class="line"></div><div class="line">def init_db():</div><div class="line">    BaseModel.metadata.create_all(engine)</div><div class="line"></div><div class="line">def drop_db():</div><div class="line">    BaseModel.metadata.drop_all(engine)</div><div class="line"></div><div class="line">class DaoJiaAuditInfo(BaseModel):</div><div class="line">    __tablename__ = &apos;daojia_audit_info&apos;</div><div class="line">    __table_args__ = &#123;&quot;mysql_engine&quot;: &quot;InnoDB&quot;, &quot;mysql_charset&quot;: &quot;utf8&quot;&#125;</div><div class="line"></div><div class="line">    id = Column(Integer, primary_key=True, nullable=False)</div><div class="line">    bd_id = Column(BIGINT, nullable=False)</div><div class="line">    audit_type = Column(Integer, nullable=False)</div><div class="line">    collection_id = Column(String(11, collation=&quot;utf8_unicode_ci&quot;))</div><div class="line">    org_code = Column(String(11, collation=&quot;utf8_unicode_ci&quot;))</div><div class="line">    is_read = Column(Integer, default=0)</div><div class="line">    is_del = Column(Integer, default=0)</div><div class="line">    left_time = Column(BIGINT, default=0)</div><div class="line">    create_time = Column(TIMESTAMP)</div><div class="line">    update_time = Column(TIMESTAMP)</div><div class="line"></div><div class="line">    db = init_db()</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def select(bd_id):</div><div class="line">        # 获取第一个记录的第一个元素</div><div class="line">        print &quot;return the first row of the first column =&gt; %d &quot; % session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.collection_id).filter(DaoJiaAuditInfo.bd_id == bd_id).scalar()</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    def save(cls,org_code,collection_id,bd_id,left_time,audit_type):</div><div class="line">        obj = cls()</div><div class="line">        obj.org_code = org_code</div><div class="line">        obj.collection_id = collection_id</div><div class="line">        obj.bd_id = bd_id</div><div class="line">        obj.left_time = left_time</div><div class="line">        obj.audit_type = audit_type</div><div class="line">        session.add(obj)</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish save&quot;</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def update(org_code,bd_id):</div><div class="line">        print &quot;before update =&gt; %s &quot; % str(session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.org_code).first())</div><div class="line">        session.query(DaoJiaAuditInfo).filter(DaoJiaAuditInfo.bd_id == bd_id).update(&#123;DaoJiaAuditInfo.org_code : org_code&#125;)</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish update  =&gt; %s &quot; % str(session.query(DaoJiaAuditInfo.bd_id,DaoJiaAuditInfo.org_code).first())</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def delete(bd_id):</div><div class="line">        session.query(DaoJiaAuditInfo).filter(DaoJiaAuditInfo.bd_id == bd_id).delete()</div><div class="line">        session.commit()</div><div class="line">        print &quot;finish delete&quot;</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    # 增</div><div class="line">    DaoJiaAuditInfo.save(&quot;xxx_2&quot;, &quot;xxxx_2&quot;, 1010, 22222, 1)</div><div class="line"></div><div class="line">    # 查</div><div class="line">    DaoJiaAuditInfo.select(1010)</div><div class="line"></div><div class="line">    # 改</div><div class="line">    DaoJiaAuditInfo.update(&quot;xxxx_5&quot;,1010);</div><div class="line"></div><div class="line">    # 删</div><div class="line">    DaoJiaAuditInfo.delete(1010)</div><div class="line">    </div><div class="line">    # 主键查询</div><div class="line">    # DaoJiaAuditInfo.query.get(主键ID)</div></pre></td></tr></table></figure>
<h4 id="3-运行结果"><a href="#3-运行结果" class="headerlink" title="3. 运行结果"></a>3. 运行结果</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-31/22646587-file_1490889902432_a8d0.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://itindex.net/detail/40939-sqlalchemy-%E7%BB%8F%E9%AA%8C" target="_blank" rel="external">SQLAlchemy使用经验 - IT瘾 </a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maven设置JDK版本]]></title>
      <url>http://jianwl.com/2017/03/29/Maven%E8%AE%BE%E7%BD%AEJDK%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>pom</code>文件中设置<code>JDK</code>的版本号，一个很常用的配置。记录下来，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>pom.xml</code>文件配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;  </div><div class="line">    &lt;plugins&gt;  </div><div class="line">        &lt;plugin&gt;  </div><div class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  </div><div class="line">            &lt;configuration&gt;  </div><div class="line">                &lt;source&gt;1.8&lt;/source&gt;  </div><div class="line">                &lt;target&gt;1.8&lt;/target&gt;  </div><div class="line">            &lt;/configuration&gt;  </div><div class="line">        &lt;/plugin&gt;  </div><div class="line">    &lt;/plugins&gt;  </div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之并发问题]]></title>
      <url>http://jianwl.com/2017/03/27/MYSQL%E4%B9%8B%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MYSQL</code>很少在单用户环境下使用，通常它会同时处理很多的连接线程，这些线程来自不同的用户，执行不同的任务。这些并行连接可能访问同样的数据库和表，所以当某个连接发生问题的时候，很难判断数据库的状态。</p>
<p><code>MYSQL</code>服务器有内部机制来避免其他用户损坏其他用户的数据，其使<strong>锁</strong>和<strong>事务</strong>来处理对表的并发访问，接下来将会学习<code>锁的类型</code>和<code>事务处理</code>，然后介绍排错的技术。</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><code>MYSQL</code>服务器和独立存储引擎都可以设置锁，<code>读锁(共享锁)</code>允许并发线程读取加锁的数据，但禁止写数据；<code>写锁</code>阻止其他线程读写操作。</p>
<h4 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h4><p><code>MYSQL</code>有四种类型的锁：1️⃣ 表锁，会锁住整个表，没有人可以访问表中任何行，直到持有锁解锁该表；2️⃣ 行锁，仅会锁住一行或者正在被线程访问的任何几行，因此同一个表中的其他行可以并发线程访问；3️⃣ 页锁，会锁住一页，仅在比较少见的<code>BDB存储引擎</code>存在。 4️⃣ 元数据锁是<code>MYSQL 5.5</code>版本中的新特性。仅对表中的元数据启用，当有线程使用表的时候，元数据锁会锁住表的所有元数据。<strong>元数据是DDL语句的更改信息，如CREATE、DROP、ALTER等修改方案的语句</strong>，引入元数据锁是为了解决线程可以在其他线程的并发事务使用相同表的情况下修改表定义或是删除表的问题。</p>
<h5 id="1）表锁"><a href="#1）表锁" class="headerlink" title="1）表锁"></a>1）表锁</h5><p>定义：触发表锁时，整个表会被锁住。</p>
<p>在<code>MyISAM</code>存储引擎创建一张表&amp;初始化数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 建表</div><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE= MyISAM DEFAULT CHARSET=latin1;</div><div class="line"></div><div class="line"># 插入数据</div><div class="line">INSERT INTO `user` (`id`) VALUES (&apos;1&apos;),(&apos;2&apos;),(&apos;3&apos;),(&apos;4&apos;);</div></pre></td></tr></table></figure>
<p>模拟表锁场景:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 用一个客户端，更新数据并休眠</div><div class="line">UPDATE user set id = sleep(60) where id = 1</div><div class="line"></div><div class="line"># 另一个客户端，查询数据user表</div><div class="line">SELECT * FROM user</div></pre></td></tr></table></figure>
<p>为何同样一个查询，一个花了<strong>51s</strong>，另一个是<strong>秒查</strong>呢？</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/39621214-file_1490662837316_7505.png" alt=""></p>
<p>在<strong>查询正在进行中</strong>时，在MYSQL客户端执行<code>SHOW PROCESSLIST \G</code>，观察如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/88029875-file_1490662629751_e877.png" alt=""></p>
<p>在查询<code>user</code>表时，另一个<code>MYSQL</code>客户端对<code>user</code>表执行更新操作，将整个表锁住，其他用户此时不可读写<code>user</code>表，等待<code>user</code>表释放锁。</p>
<p>调试技巧 1️⃣ ：当你怀疑是并发线程影响了查询的时候，使用<code>SHOW PROCESSLIST</code>命令查看状态.</p>
<h5 id="2-行锁"><a href="#2-行锁" class="headerlink" title="2) 行锁"></a>2) 行锁</h5><p>定义：触发行锁时，会锁住一些行而不是整个表；</p>
<p>在<code>InnoDB</code>存储引擎中创建表&amp;初始化表数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 建表</div><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</div><div class="line"></div><div class="line"># 插入数据</div><div class="line">INSERT INTO `user` (`id`) VALUES (&apos;1&apos;),(&apos;2&apos;),(&apos;3&apos;),(&apos;4&apos;);</div></pre></td></tr></table></figure>
<p>模拟行锁场景:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 用一个客户端，更新数据并休眠</div><div class="line">UPDATE user set id = sleep(60) where id = 1</div><div class="line"></div><div class="line"># 另一个客户端</div><div class="line">SELECT * FROM user;</div><div class="line"></div><div class="line">SELECT * FROM user where id = 1;</div><div class="line"></div><div class="line">update user set id = 111 where id = 1;</div></pre></td></tr></table></figure>
<p>操作1: 更新并休眠</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/98337967-file_1490675424759_11f2c.png" alt=""></p>
<p>操作2: 另一个客户端，查询<code>user</code>表，<strong>行锁</strong>在此处为<strong>读锁</strong>，不影响其他用户的<code>读操作</code>。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/29004933-file_1490675511078_d6f8.png" alt=""></p>
<p>操作3: 另一个客户端，更新<code>操作1</code>相同的行, 触发行锁，需要等待读锁释放，才能更新数据。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/69956688-file_1490675659555_e2ed.png" alt=""></p>
<p>在<strong>查询正在进行中</strong>时，在MYSQL客户端执行<code>SHOW PROCESSLIST \G</code>，观察如下：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/34057315-file_1490675865544_4f11.png" alt=""></p>
<p>调试技巧 2️⃣ : 分析并发语句事务用<code>SHOW ENGINE INNODB STATUS \G</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-28/25021109-file_1490696658342_b8d.png" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>MYSQL排错指南</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于刻意练习的思考]]></title>
      <url>http://jianwl.com/2017/03/26/%E5%85%B3%E4%BA%8E%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>没有充分的练习，你不可能精通任何脑力活</p>
</blockquote>
<p>如果带球的同时还要思考踢球的角度和速度，你不太可能成为一个优秀的足球选手。像这样的<strong>低层次过程必须不假思索，才能给更高层次的过程，比如战术策略提供足够的空间。</strong> 这一节主要来解释为何<code>刻意练习</code>如此重要、哪些内容值得练习、怎么安排练习可以增加练习的趣味性。</p>
<h3 id="为什么要刻意练习"><a href="#为什么要刻意练习" class="headerlink" title="为什么要刻意练习"></a>为什么要刻意练习</h3><p>一个职业网球选手每次都能将球打到对方的场地上，但他还是不停练习以求提高球的速度和落点的准确度，通过不断地<code>刻意练习</code>可以加强基础技能，为学习更先进的技能做准备，防止遗忘和改善迁移。</p>
<h3 id="练习是为了日后更好地学习"><a href="#练习是为了日后更好地学习" class="headerlink" title="练习是为了日后更好地学习"></a>练习是为了日后更好地学习</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/93014436-file_1490498430054_180b8.png" alt=""></p>
<p>如图显示工作记忆是思考的空间，思考在你重新组合信息时产生，这一信息可能来自于环境，也可能来自于长期记忆，或者两者都有。</p>
<p>工作记忆的一个显著特点是它的空间有限，如果你同时放入太多东西或者他们的太多方面，你会失去正在思考的线索。比如我问: 蝴蝶、蜻蜓、筷子、药盒和稻草人有什么共同点，那么要同时比较的东西太多了，当你在思考药盒和筷子的关系时，你已经忘记其他物品是什么了。</p>
<p>据我们所知，工作记忆的大小是固定不变的 – 得到多少就是多少，练习不会改变它。但还是有窍门的，可以通过<strong>压缩信息</strong>来维持工作记忆中更多的信息，通过<strong>合并，你将几个独立的事物看做一个单元。</strong></p>
<h3 id="刻意练习的优点"><a href="#刻意练习的优点" class="headerlink" title="刻意练习的优点"></a>刻意练习的优点</h3><p>1️⃣ 形成最基本的本领(比如青少年用手动档练习开车，直到完全掌握为止) 2️⃣ 达到精通(比如高尔夫选手挥杆以提高准确性) 3️⃣ 让思考过程变得省力 4️⃣ 让记忆更持久 5️⃣ 增加知识迁移的几率</p>
<h3 id="该练习什么"><a href="#该练习什么" class="headerlink" title="该练习什么"></a>该练习什么</h3><p>不是每件事都需要无限度地练习的，首先没有这么多时间给你练习，更重要的是，不是每件事情都需要练习，我所说的练习的好处是能够给我们一些选择上的提示。如果练习可以让思考过程变得更加省力，我们就要问，哪些过程需要自动化？从记忆中取出关于数字的要点和字母的发音就可以入选。科学课的教师一般还会要求学生熟练掌握化学元素的基本特征，总的来说就是，需要自动化的过程往往是自动化后效益能达到最大值的技能的基础。所谓基础也就是人在某一个领域一遍又一遍重复的事情，它们为日后更高级的工作奠定了基础。</p>
<h3 id="分散练习时间"><a href="#分散练习时间" class="headerlink" title="分散练习时间"></a>分散练习时间</h3><p>没有必要把关于一个概念的所有练习集中在很短的一段时间里完成。分散练习后记忆会更持久，持续不断地练习同一项技能是很无聊的事，最好能有点变化。还有就是有更多的时间思考如何将所学到的东西加以应用。</p>
<h3 id="在进阶环境中练习"><a href="#在进阶环境中练习" class="headerlink" title="在进阶环境中练习"></a>在进阶环境中练习</h3><p>基本技能是需要练习直到熟练掌握的，但这不代表不能够在更高阶的环境中练习它，比如需要练习找到字母相对应的发音，在条件允许的情况下，为什么不将这一练习与有趣的阅读相结合呢？会玩桥牌的人要先算手里的牌点才能叫牌，如果我是桥牌教练，我会让学生一直数点数，直到他们能脱口而出为止。自动化需要很多练习，聪明的办法是<strong>既分散练习的时间，又分散练习的环境。</strong>尽量多设计有创意的方法来练习最关键的技巧，同时能够在更高阶的环境中学到基本技能。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>为什么学生不喜欢上学？ </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL主从服务搭建]]></title>
      <url>http://jianwl.com/2017/03/25/MYSQL%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MYSQL</code>主从服务器，主服务器用于<strong>写操作</strong>，从服务器用于<strong>读操作</strong>，从服务器通过<code>bin-log</code>日志，与主服务器数据完全同步。对于主从服务的搭建，之前处于空白状态，这一节主要来学习，主从服务器搭建，实现从服务器<strong>实时复制</strong>主服务器的数据。</p>
<h3 id="主服务器配置"><a href="#主服务器配置" class="headerlink" title="主服务器配置"></a>主服务器配置</h3><p>1、 打开主服务器配置文件<code>/etc/my.cnf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/my.cnf</div></pre></td></tr></table></figure>
<p>2、 在<code>/etc/my.cnf</code>配置文件中，配置服务器为本机IP</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind-address=192.168.1.102</div></pre></td></tr></table></figure>
<p>本机IP查看</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/87553736-file_1490453723082_127f2.png" alt=""></p>
<p>3、 在<code>/etc/my.cnf</code>配置文件中,设置<code>server-id</code>,你可以选择任意一个数字(这里设定为1)，但这个数字必须是唯一的，不能和集群中的其他的<code>server-id</code>相同</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service-id=1</div></pre></td></tr></table></figure>
<p>4、 在<code>/etc/my.cnf</code>配置文件中,开启<code>bin-log</code>日志，从服务器将会同步主服务器的改变，通过<code>bin-log</code>日志。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log_bin = mysql-bin</div></pre></td></tr></table></figure>
<p>5、 在<code>/etc/my.cnf</code>配置文件中,配置主服务器中需要同步到从服务器的数据库。可以设置多个数据库，重复以下配置即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binlog_do_db=test</div></pre></td></tr></table></figure>
<p>6、重启MYSQL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
<p>主服务器MYSQL配置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/90687897-file_1490454303385_14e6e.png" alt=""></p>
<h3 id="登录主服务器MYSQL的操作"><a href="#登录主服务器MYSQL的操作" class="headerlink" title="登录主服务器MYSQL的操作"></a>登录主服务器MYSQL的操作</h3><h4 id="1-登录MYSQL"><a href="#1-登录MYSQL" class="headerlink" title="1. 登录MYSQL"></a>1. 登录MYSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h4 id="2-创建一个账号，允许从服务器复制主服务器"><a href="#2-创建一个账号，允许从服务器复制主服务器" class="headerlink" title="2. 创建一个账号，允许从服务器复制主服务器"></a>2. 创建一个账号，允许从服务器复制主服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GRANT REPLICATION SLAVE ON *.* TO &apos;slave_user&apos;@&apos;%&apos; IDENTIFIED BY &apos;slave_user&apos;;</div><div class="line"></div><div class="line"># 只有刷新之后，该账号才生效</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h4 id="3-切换到需要同步的库"><a href="#3-切换到需要同步的库" class="headerlink" title="3. 切换到需要同步的库"></a>3. 切换到需要同步的库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">USER test;</div></pre></td></tr></table></figure>
<h4 id="4-锁住test数据库，防止新的写入操作。"><a href="#4-锁住test数据库，防止新的写入操作。" class="headerlink" title="4. 锁住test数据库，防止新的写入操作。"></a>4. 锁住<code>test</code>数据库，防止新的写入操作。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLUSH TABLES WITH READ LOCK;</div></pre></td></tr></table></figure>
<h4 id="5-查看主服务器的状态"><a href="#5-查看主服务器的状态" class="headerlink" title="5. 查看主服务器的状态"></a>5. 查看主服务器的状态</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/30036109-file_1490454974982_11ad4.png" alt=""></p>
<h4 id="6-用mysqldump导出test数据库-此操作是在Shell中执行，不是在MYSQL命令行"><a href="#6-用mysqldump导出test数据库-此操作是在Shell中执行，不是在MYSQL命令行" class="headerlink" title="6. 用mysqldump导出test数据库(此操作是在Shell中执行，不是在MYSQL命令行)"></a>6. 用<code>mysqldump</code>导出test数据库(此操作是在Shell中执行，不是在MYSQL命令行)</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/25607642-file_1490459549608_10bb9.png" alt=""></p>
<h4 id="7-回到原来MYSQL的命令行窗口，解锁数据库"><a href="#7-回到原来MYSQL的命令行窗口，解锁数据库" class="headerlink" title="7. 回到原来MYSQL的命令行窗口，解锁数据库"></a>7. 回到原来MYSQL的命令行窗口，解锁数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UNLOCK TABLES;</div><div class="line">QUIT;</div></pre></td></tr></table></figure>
<h3 id="配置从服务器"><a href="#配置从服务器" class="headerlink" title="配置从服务器"></a>配置从服务器</h3><h4 id="1-登录从服务器，并创建需要同步的数据库"><a href="#1-登录从服务器，并创建需要同步的数据库" class="headerlink" title="1. 登录从服务器，并创建需要同步的数据库"></a>1. 登录从服务器，并创建需要同步的数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE test;</div><div class="line">EXIT</div></pre></td></tr></table></figure>
<h4 id="2-远程复制主服务器的test-sql到从服务器"><a href="#2-远程复制主服务器的test-sql到从服务器" class="headerlink" title="2. 远程复制主服务器的test.sql到从服务器"></a>2. 远程复制主服务器的<code>test.sql</code>到从服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/30040145-file_1490455882333_f6a2.png" alt=""></p>
<h4 id="3-将test-sql导入到从服务器"><a href="#3-将test-sql导入到从服务器" class="headerlink" title="3. 将test.sql导入到从服务器"></a>3. 将<code>test.sql</code>导入到从服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/61737716-file_1490456057973_8831.png" alt=""></p>
<h4 id="4-配置从服务器-etc-my-cnf文件"><a href="#4-配置从服务器-etc-my-cnf文件" class="headerlink" title="4. 配置从服务器/etc/my.cnf文件"></a>4. 配置从服务器<code>/etc/my.cnf</code>文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server-id = 2</div><div class="line">relay-log = mysql-relay</div><div class="line">log-bin=mysql-bin</div><div class="line">binlog_do_db</div></pre></td></tr></table></figure>
<p>从服务器的配置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/74025224-file_1490456239753_4f5b.png" alt=""></p>
<h4 id="5-重启从服务器服务"><a href="#5-重启从服务器服务" class="headerlink" title="5. 重启从服务器服务"></a>5. 重启从服务器服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
<h4 id="6-登录从服务器-更改以下配置"><a href="#6-登录从服务器-更改以下配置" class="headerlink" title="6. 登录从服务器,更改以下配置"></a>6. 登录从服务器,更改以下配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CHANGE MASTER TO MASTER_HOST=&apos;192.168.1.102&apos;,MASTER_USER=&apos;slave_user&apos;, MASTER_PASSWORD=&apos;slave_user&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000006&apos;, MASTER_LOG_POS=637;</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/71580385-file_1490457323447_5f79.png" alt=""></p>
<p>完成以上配置则实现以下几个功能点：1️⃣ 指定当前服务器为主数据库的从库；2️⃣ 提供<code>从库</code>登录<code>主库</code>的账号，可以复制bin-log，实现数据同步; 3️⃣ 从服务器知道从哪里开始同步主库，主库的<code>bin-log</code>日志文件和<code>position</code>位置都已知。</p>
<h4 id="7-激活从库"><a href="#7-激活从库" class="headerlink" title="7. 激活从库"></a>7. 激活从库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">START SLAVE</div></pre></td></tr></table></figure>
<h4 id="8-查看从库状态，-G让信息更加可读"><a href="#8-查看从库状态，-G让信息更加可读" class="headerlink" title="8. 查看从库状态，\G让信息更加可读"></a>8. 查看从库状态，<code>\G</code>让信息更加可读</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/74608681-file_1490457653091_134b8.png" alt=""></p>
<h3 id="验证主从是否同步"><a href="#验证主从是否同步" class="headerlink" title="验证主从是否同步"></a>验证主从是否同步</h3><h4 id="1-主库中person表的数据"><a href="#1-主库中person表的数据" class="headerlink" title="1. 主库中person表的数据"></a>1. 主库中<code>person</code>表的数据</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/97547013-file_1490457820526_1585e.png" alt=""></p>
<h4 id="2-从库中person表的数据"><a href="#2-从库中person表的数据" class="headerlink" title="2. 从库中person表的数据"></a>2. 从库中<code>person</code>表的数据</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/14095639-file_1490457857983_118.png" alt=""></p>
<h4 id="3-主库对person表新增一条记录"><a href="#3-主库对person表新增一条记录" class="headerlink" title="3. 主库对person表新增一条记录"></a>3. 主库对<code>person</code>表新增一条记录</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/68583068-file_1490457930231_9fa.png" alt=""></p>
<h4 id="4-查看从库person表，是否同步新增了一条记录"><a href="#4-查看从库person表，是否同步新增了一条记录" class="headerlink" title="4. 查看从库person表，是否同步新增了一条记录"></a>4. 查看从库<code>person</code>表，是否同步新增了一条记录</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-26/45737952-file_1490457975198_ef73.png" alt=""></p>
<p>从库同步主库数据，至此完成主从库的配置。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-in-mysql" target="_blank" rel="external">How To Set Up Master Slave Replication in MySQL</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[客户端免密码登录服务器]]></title>
      <url>http://jianwl.com/2017/03/25/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节主要来学习使用public key免密登录服务器。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-客户端生成公钥"><a href="#1-客户端生成公钥" class="headerlink" title="1. 客户端生成公钥"></a>1. 客户端生成公钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/83784257-file_1490425255076_ce1b.png" alt=""></p>
<h4 id="2-将客户端公钥id-rsa-pub的内容，添加服务器的authorized-keys中"><a href="#2-将客户端公钥id-rsa-pub的内容，添加服务器的authorized-keys中" class="headerlink" title="2. 将客户端公钥id_rsa.pub的内容，添加服务器的authorized_keys中"></a>2. 将客户端公钥<code>id_rsa.pub</code>的内容，添加服务器的<code>authorized_keys</code>中</h4><p>查看公钥id_rsa.pub</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/31140109-file_1490425420722_d9e0.png" alt=""></p>
<p>将客户端公钥内容添加到服务器<code>authorized_keys</code>，此处显示添加后的结果。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/97597421-file_1490426288907_118ad.png" alt=""></p>
<h4 id="3-客户端免密码登录服务器"><a href="#3-客户端免密码登录服务器" class="headerlink" title="3. 客户端免密码登录服务器"></a>3. 客户端免密码登录服务器</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/10331226-file_1490426155457_f122.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL允许远程登录]]></title>
      <url>http://jianwl.com/2017/03/25/MYSQL%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在虚拟机安装了<code>MYSQL</code>并启动服务，在虚拟机中能够登录到<code>MYSQL</code>,但通过<code>Sequal Pro</code>远程登录虚拟机中的MYSQL却始终连不上。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-防火墙对外增加3306端口"><a href="#1-防火墙对外增加3306端口" class="headerlink" title="1. 防火墙对外增加3306端口"></a>1. 防火墙对外增加<code>3306端口</code></h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/76701170-file_1490427451254_f1e7.png" alt=""></p>
<h4 id="2-重启防火墙"><a href="#2-重启防火墙" class="headerlink" title="2. 重启防火墙"></a>2. 重启防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure>
<h4 id="3-测试本地能否连上服务器的3306端口"><a href="#3-测试本地能否连上服务器的3306端口" class="headerlink" title="3. 测试本地能否连上服务器的3306端口"></a>3. 测试本地能否连上服务器的<code>3306</code>端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 10.211.55.3为服务端的IP,3306为MYSQL服务的端口</div><div class="line">telnet 10.211.55.3 3306</div></pre></td></tr></table></figure>
<p>实战:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/72064355-file_1490429141344_8010.png" alt=""></p>
<h4 id="4-配置MYSQL允许远程登录"><a href="#4-配置MYSQL允许远程登录" class="headerlink" title="4. 配置MYSQL允许远程登录"></a>4. 配置MYSQL允许远程登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 登录MYSQL</div><div class="line">mysql -u root -p</div><div class="line"></div><div class="line"># 允许MYSQL远程登录</div><div class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</div><div class="line"></div><div class="line"># 刷新权限</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<p>实战：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/82480994-file_1490428841050_fdc5.png" alt=""></p>
<h4 id="5-本机Sequel-Pro登录远程MYSQL"><a href="#5-本机Sequel-Pro登录远程MYSQL" class="headerlink" title="5. 本机Sequel Pro登录远程MYSQL"></a>5. 本机<code>Sequel Pro</code>登录远程MYSQL</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-25/43607247-file_1490430126336_10444.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.cnblogs.com/yjdcoder/p/5927358.html" target="_blank" rel="external">navicat连接虚拟机(centos)中的mysql</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[install mysql on centos7]]></title>
      <url>http://jianwl.com/2017/03/23/install-mysql-on-centos7/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前只在<code>Window</code>和<code>Mac</code>环境下安装过<code>MYSQL</code>，这一节主要来学习在<code>CentOS7</code>上安装<code>MYSQL</code>。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-下载-amp-添加库-amp-更新"><a href="#1-下载-amp-添加库-amp-更新" class="headerlink" title="1. 下载 &amp; 添加库 &amp; 更新"></a>1. 下载 &amp; 添加库 &amp; 更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</div><div class="line">sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line">yum update</div></pre></td></tr></table></figure>
<h4 id="2-安装MYSQL"><a href="#2-安装MYSQL" class="headerlink" title="2. 安装MYSQL"></a>2. 安装MYSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install mysql-server</div></pre></td></tr></table></figure>
<h4 id="3-两种方式启动服务"><a href="#3-两种方式启动服务" class="headerlink" title="3. 两种方式启动服务"></a>3. 两种方式启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 方式1</div><div class="line">sudo systemctl start mysqld</div><div class="line"></div><div class="line"># 方式2</div><div class="line">service mysqld start</div></pre></td></tr></table></figure>
<h4 id="4-登录数据库"><a href="#4-登录数据库" class="headerlink" title="4. 登录数据库"></a>4. 登录数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h4 id="5-关闭服务"><a href="#5-关闭服务" class="headerlink" title="5. 关闭服务"></a>5. 关闭服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl stop mysqld</div></pre></td></tr></table></figure>
<h4 id="6-重置密码"><a href="#6-重置密码" class="headerlink" title="6. 重置密码"></a>6. 重置密码</h4><h5 id="1-以不需要登录密码的方式，重启服务"><a href="#1-以不需要登录密码的方式，重启服务" class="headerlink" title="1) 以不需要登录密码的方式，重启服务"></a>1) 以不需要登录密码的方式，重启服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mysqld_safe --skip-grant-tables &amp;</div></pre></td></tr></table></figure>
<h5 id="2-重连上MYSQL-Server的Root账号"><a href="#2-重连上MYSQL-Server的Root账号" class="headerlink" title="2) 重连上MYSQL-Server的Root账号"></a>2) 重连上MYSQL-Server的Root账号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root</div></pre></td></tr></table></figure>
<h5 id="3-重置密码"><a href="#3-重置密码" class="headerlink" title="3) 重置密码"></a>3) 重置密码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">update user SET PASSWORD=PASSWORD(&quot;root&quot;) WHERE USER=&quot;root&quot;;</div><div class="line">flush privileges;</div><div class="line">exit</div></pre></td></tr></table></figure>
<h5 id="4-重启MYSQL"><a href="#4-重启MYSQL" class="headerlink" title="4) 重启MYSQL"></a>4) 重启MYSQL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start mysqld</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.linode.com/docs/databases/mysql/how-to-install-mysql-on-centos-7" target="_blank" rel="external">How to Install MySQL on CentOS 7</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之基础教程&实战]]></title>
      <url>http://jianwl.com/2017/03/23/Python%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要是用来练习Python基本功，参考这篇文章<a href="http://www.runoob.com/python/python-tutorial.html" target="_blank" rel="external">Python基础教程</a>，另外根据教程，写了些小练习<a href="http://git.oschina.net/shuangziliuyun/Python_Basic" target="_blank" rel="external">在这个项目中的chapter_02</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之变量类型]]></title>
      <url>http://jianwl.com/2017/03/20/Python%E4%B9%8B%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节我们来学习Python变量的基本类型以及其常用方法,<a href="http://git.oschina.net/shuangziliuyun/Python_Basic" target="_blank" rel="external">本节实战的代码请查看这里chapter_01</a>；</p>
<h3 id="理论-amp-实战"><a href="#理论-amp-实战" class="headerlink" title="理论 &amp; 实战"></a>理论 &amp; 实战</h3><h4 id="1-变量赋值"><a href="#1-变量赋值" class="headerlink" title="1. 变量赋值"></a>1. 变量赋值</h4><p><code>Python</code>中的变量赋值不需要类型声明，每个变量在内存中创建，在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/63585377-file_1490022387614_5327.png" alt=""></p>
<h4 id="2-多变量赋值"><a href="#2-多变量赋值" class="headerlink" title="2. 多变量赋值"></a>2. 多变量赋值</h4><p>Python允许你同时为多个变量赋值；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/61524509-file_1490022684600_9741.png" alt=""></p>
<h4 id="3-标准数据类型"><a href="#3-标准数据类型" class="headerlink" title="3. 标准数据类型"></a>3. 标准数据类型</h4><p>Python有五个标准的数据类型：Number(数字)、String(字符串)、List(列表)、Tuple(元组)、Dictionary(字典)</p>
<h5 id="1）数字"><a href="#1）数字" class="headerlink" title="1）数字"></a>1）数字</h5><p>Python支持4种不同的数字类型：1️⃣ int(有符号整型) 2️⃣ long(长整形)  3️⃣ float(浮点型) 4️⃣ complex(复数)</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/61536331-file_1490023177580_6fdf.png" alt=""></p>
<h5 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2) 字符串"></a>2) 字符串</h5><p>字符串是由数字、字母、下划线组成的，有两种取值的顺序1️⃣ 从左到右默认从0开始 2️⃣ 从右到左默认-1开始</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/10908781-file_1490023740462_7a8f.png" alt=""></p>
<h5 id="3-列表"><a href="#3-列表" class="headerlink" title="3) 列表"></a>3) 列表</h5><p>List(列表)是Python中使用最频繁的数据结构，加号(+)是列表运算符，星号(*)是重复操作。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/12281863-file_1490024341078_15a2f.png" alt=""></p>
<h5 id="4-元组"><a href="#4-元组" class="headerlink" title="4) 元组"></a>4) 元组</h5><p>元组类似于列表，但元组不能二次赋值，相当于只读列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/70503194-file_1490025007659_e7e1.png" alt=""></p>
<h5 id="5-字典"><a href="#5-字典" class="headerlink" title="5) 字典"></a>5) 字典</h5><p>字典是除列表以外最灵活的内置数据结构类型，列表是有序的对象结合，字典是无序的对象集合。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-20/3467668-file_1490025356039_5bab.png" alt=""></p>
<h4 id="4-Python数据类型转换"><a href="#4-Python数据类型转换" class="headerlink" title="4. Python数据类型转换"></a>4. Python数据类型转换</h4><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>int(x[,base])</td>
<td>将x转化为一个整数</td>
</tr>
<tr>
<td>long(x[,base])</td>
<td>将x转化为一个长整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转化为一个浮点数</td>
</tr>
<tr>
<td>complex(real[,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象x转化为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象x转化为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式，并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列s转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列s转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典，d必须是一个序列(key,value)元组</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>创建不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x)</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转化为他的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转化为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转化为一个八进制字符串</td>
</tr>
</tbody>
</table>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-21/39388905-file_1490026722871_148f8.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.<a href="http://www.runoob.com/python/python-variable-types.html" target="_blank" rel="external">Python变量类型</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用Git命令清单]]></title>
      <url>http://jianwl.com/2017/03/19/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>发现一个非常好的Git总结，基本上涵盖了所有日常用到的Git命令，记录下来，备忘。</p>
<h3 id="常用Git命令清单"><a href="#常用Git命令清单" class="headerlink" title="常用Git命令清单"></a>常用Git命令清单</h3><p>Git中有几个专有名词的译名如下：</p>
<ol>
<li>Workspace:工作区</li>
<li>Index/Stage:暂存区</li>
<li>Repository: 仓库区</li>
<li>Remote: 远程仓库</li>
</ol>
<h4 id="1-新建代码库"><a href="#1-新建代码库" class="headerlink" title="1.新建代码库"></a>1.新建代码库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 在当前目录新建一个Git代码库</div><div class="line">$ git init</div><div class="line"></div><div class="line"># 新建一个目录，将其初始化为Git代码库</div><div class="line">$ git init「project-name」</div><div class="line"></div><div class="line"># 下载一个项目和他的整个代码历史</div><div class="line">$ git clone「url」</div></pre></td></tr></table></figure>
<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><p>Git的设置文件为<code>.gitconfig</code>,它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 显示当前的Git配置</div><div class="line">$ git config --list</div><div class="line"></div><div class="line"># 编辑Git配置文件</div><div class="line">$ git config -e [--global]</div><div class="line"></div><div class="line"># 设置提交代码时的用户信息</div><div class="line">$ git config [--global] user.name &quot;[name]&quot;</div><div class="line">$ git config [--global] user.email &quot;[email address]&quot;</div></pre></td></tr></table></figure>
<h4 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3. 增加/删除文件"></a>3. 增加/删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 添加指定文件到暂存区</div><div class="line">$ git add [file1] [file2] ....</div><div class="line"></div><div class="line"># 添加指定目录到暂存区，包括子目录</div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"># 添加当前目录的所有文件到暂存区</div><div class="line">$ git add .</div><div class="line"></div><div class="line"># 删除工作区文件，并且将这次删除放入暂存区</div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"># 停止追踪指定文件，但该文件会保留在工作区</div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"># 该名文件，并且将这个改名放入暂存区</div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h4 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 提交暂存区到仓库区</div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"># 提交暂存区的指定文件到仓库区</div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"># 提交时显示所有diff信息</div><div class="line">$ git commit -v</div></pre></td></tr></table></figure>
<h4 id="5-分支"><a href="#5-分支" class="headerlink" title="5. 分支"></a>5. 分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># 列出所有本地分支</div><div class="line">$ git branch</div><div class="line"></div><div class="line"># 列出所有远程分支</div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"># 列出所有本地分支和远程分支</div><div class="line">$ git branch -a</div><div class="line"></div><div class="line"># 新建一个分支，但依旧停留在当前分支</div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"># 新建一个分支，并切换到该分支</div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"># 新建一个分支，指向指定commit</div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"># 新建一个分支，与指定的远程分支建立追踪关系</div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"># 切换到指定分支，并更新工作区</div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"># 建立追踪关系，与现有分支与指定的远程分支之间</div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"># 合并指定分支到当前分支</div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"># 删除分支</div><div class="line">$ git branch -d [branch-name]</div><div class="line"></div><div class="line"># 删除远程分支</div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote-branch]</div></pre></td></tr></table></figure>
<h4 id="6-标签"><a href="#6-标签" class="headerlink" title="6.标签"></a>6.标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 列出所有tag</div><div class="line">$ git tag</div><div class="line"></div><div class="line"># 新建一个tag在当前commit</div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"># 新建一个tag在指定commit</div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"># 查看tag信息</div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"># 提交指定tag</div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"># 提交所有tag</div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"># 新建一个分支，指向某个tag</div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h4 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 显示有变更的文件</div><div class="line">$ git status</div><div class="line"></div><div class="line"># 显示当前分支的版本历史</div><div class="line">$ git log</div><div class="line"></div><div class="line"># 显示commit历史，以及每次commit发生变更的文件</div><div class="line">$ git log --stat</div><div class="line"></div><div class="line"># 显示某个文件的版本历史，包括文件改名</div><div class="line">$ git log --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"># 显示指定文件相关的每一次diff</div><div class="line">$ git log -p [file]</div><div class="line"></div><div class="line"># 显示指定文件时什么人什么时间修改过的</div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"># 显示暂存区和工作区的差异</div><div class="line">$ git diff</div><div class="line"></div><div class="line"># 显示暂存区和上一个commit的差异</div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"># 显示工作区与当前分支最新commit之间的差异</div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"># 显示两次提交之间的差异</div><div class="line">$ git diff [first-branch] [second-branch]</div><div class="line"></div><div class="line"># 显示某次提交的元数据和内容变化</div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"># 显示某次提交发生变化的文件</div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"># 显示某次提交时，某个文件的内容</div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"># 显示当前分支的最近几次提交</div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h4 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8. 远程同步"></a>8. 远程同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 下载远程仓库的所有变动</div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"># 显示所有远程仓库</div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"># 显示某个远程仓库的信息</div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"># 增加一个新的远程仓库，并命名</div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line"># 取回远程仓库的变化，并与本地分支合并</div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"># 上传本地指定分支到远程仓库</div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"># 强行推送当前分支到远程仓库，即使有冲突</div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"># 推送所有分支到远程仓库</div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h4 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9. 撤销"></a>9. 撤销</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 恢复暂存区的指定文件到工作区</div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"># 恢复某个commit的指定文件到工作区</div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"># 恢复上一个commit的所有文件到工作区</div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"># 重置暂存区的指定文件，与上次commit保持一致，但工作区不变</div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"># 重置暂存区与工作区，与上一次commit保持一致</div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</div><div class="line">$ git reset --keep [commit]</div></pre></td></tr></table></figure>
<h4 id="10-gitignore不生效解决方案"><a href="#10-gitignore不生效解决方案" class="headerlink" title="10. gitignore不生效解决方案"></a>10. gitignore不生效解决方案</h4><p>通常情况下：gitignore不生效，是因为文件已经被纳入版本管理中，需要修改.gitignore不生效；解决版本是先把本地缓存删除，然后在提交；</p>
<p>解决方案:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached . // 删除本地所有缓存</div><div class="line">git add .</div><div class="line">git commit -m &apos;提交&apos;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git读书笔记]]></title>
      <url>http://jianwl.com/2017/03/18/Git%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Git非常强大，本节主要记录些常用，但之前不知道的技巧；在此之前Git操作基本按照以下这个套路：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.git init //初始化本地仓库</div><div class="line">2.git clone git@git.oschina.net:shuangziliuyun/Hexo.git //拷贝远程项目到本地</div><div class="line">3.touch README.md //新建文件</div><div class="line">4.git add . //提交新建文件到暂存区(Stage)</div><div class="line">5.git commit -m &quot;新增README.md文件&quot;//将暂存区的文件提交到本地仓库</div><div class="line">6.git pull origin master //下载远端主分支，并合并到本地主分支。</div><div class="line">7.git push origin master //提交本地分支到远端</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-删除索引中的文件-但在工作区中保留它"><a href="#1-删除索引中的文件-但在工作区中保留它" class="headerlink" title="1. 删除索引中的文件,但在工作区中保留它"></a>1. 删除索引中的文件,但在工作区中保留它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached</div></pre></td></tr></table></figure>
<p>场景：Git项目一开始没有新增<code>.gitignore</code>文件，后续增加<code>.gitignore文件</code>无法忽略已存在的文件，需要将这些文件标记为未追踪。– 以a.txt文件为例；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git rm --cached a.txt 「暂存区的a.txt文件删除，并将a.txt文件退回到工作区」</div><div class="line">git commit -m &quot;将暂存区的内容提交到本地仓库&quot;</div><div class="line">git add a.txt 「将工作区的a.txt文件提交到暂存区」</div><div class="line">git commit -m &quot;将a.txt文件重新放到本地仓库&quot;</div><div class="line">git push origin master  「将本地仓库提交到远程仓库，此时.gitignore文件将生效，会忽略a.txt文件」</div></pre></td></tr></table></figure>
<p>本地<code>.gitignore</code>文件和本地文件</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/38737859-file_1489819916053_1297a.png" alt=""></p>
<p>远端分支：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/73891144-file_1489820008800_eb7b.png" alt=""></p>
<h4 id="2-查看某个文件修改的全部历史记录"><a href="#2-查看某个文件修改的全部历史记录" class="headerlink" title="2. 查看某个文件修改的全部历史记录"></a>2. 查看某个文件修改的全部历史记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --follow 文件名</div></pre></td></tr></table></figure>
<p>修改<code>index.html文件的提交记录</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline --follow index.html</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/15470718-file_1489820728948_b196.png" alt=""></p>
<p>全量提交记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/77055950-file_1489820652429_231a.png" alt=""></p>
<h4 id="3-GIT用于特定目的的特殊符号引用"><a href="#3-GIT用于特定目的的特殊符号引用" class="headerlink" title="3. GIT用于特定目的的特殊符号引用"></a>3. GIT用于特定目的的特殊符号引用</h4><table>
<thead>
<tr>
<th style="text-align:center">特殊符号</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">HEAD始终指向当前分支的最新提交，当切换分支时，HEAD会更新为指向新分支的最近提交</td>
</tr>
<tr>
<td style="text-align:center">ORIG_HEAD</td>
<td style="text-align:center">某些操作，例如合并(merge)和复位(reset)，会把调整为新值之前的先前版本的HEAD记录到ORIG_HEAD中。可以使用ORIG_HEAD来恢复或回滚到之前的状态或者做一个比较</td>
</tr>
<tr>
<td style="text-align:center">FETCH_HEAD</td>
<td style="text-align:center">当使用远程库时，git fetch命令将所有抓取分支的头记录到<code>.git/FETCH_HEAD</code>中。FETCH_HEAD是最近抓取的分支HEAD的简写，并且仅在刚刚抓取操作之后才有效。</td>
</tr>
<tr>
<td style="text-align:center">MERGE_HEAD</td>
<td style="text-align:center">当一个合并操作正在进行时，其他分支的头暂时记录在MERGE_HEAD中。换言之，MERGE_HEAD是正在合并进HEAD的提交</td>
</tr>
</tbody>
</table>
<h4 id="4-当版本出现问题时，用于查找版本的工具"><a href="#4-当版本出现问题时，用于查找版本的工具" class="headerlink" title="4. 当版本出现问题时，用于查找版本的工具"></a>4. 当版本出现问题时，用于查找版本的工具</h4><p>操作1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git bisect start 「从干净的工作中启动bisect」</div><div class="line">git bisect bad 「默认当前版本是有问题的版本」</div><div class="line">git bisect good 版本SHA-A值 「设定认为一定没有问题的版本，此时HEAD会跳到**当前版本**和**认为是一定是好的版本的中间**」</div></pre></td></tr></table></figure>
<p>图示1：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/14250483-file_1489822730415_9bf1.png" alt=""></p>
<p>结果1：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/7113223-file_1489822865951_3b76.png" alt=""></p>
<hr>
<p>操作2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git bisect good 「认为版本是好的，HEAD会向前进一个提交的记录，知道找到有问题的版本」</div><div class="line"></div><div class="line">或</div><div class="line"></div><div class="line">git bisect bad 「认为版本是坏的，HEAD会向后退一个提交的记录，知道找到有问题的版本」</div></pre></td></tr></table></figure>
<p>图示2：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/93829162-file_1489823104402_15067.png" alt=""></p>
<p>结果2：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/2013385-file_1489823069103_6c3b.png" alt=""></p>
<h4 id="5-变基提交"><a href="#5-变基提交" class="headerlink" title="5. 变基提交"></a>5. 变基提交</h4><p>什么是变基呢？用一个图来说明：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/46864201-file_1489824210279_245c.png" alt=""></p>
<p>实战：</p>
<p>dev 分支的提交记录</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/62076278-file_1489826998750_1802.png" alt=""></p>
<p>topic 分支的提交记录</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/78783161-file_1489827077268_253f.png" alt=""></p>
<p>所在分支是topic分支，执行变基：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/29230732-file_1489827178578_16545.png" alt=""></p>
<p>变基后topic分支的提交记录：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/60646943-file_1489827247580_2db0.png" alt=""></p>
<p>提示：</p>
<p>执行变基的过程，有很大概率会出现冲突。如果多个开发人员，更改同一文件时，将会出现</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Git版本控制管理 – 王迪 丁彦 译</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot之下载文件&下载zip文件]]></title>
      <url>http://jianwl.com/2017/03/18/SpringBoot%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6-%E4%B8%8B%E8%BD%BDzip%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>下载文件这一块之前都没接触过，话不多说直接贴出代码，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-下载文件"><a href="#1-下载文件" class="headerlink" title="1. 下载文件"></a>1. 下载文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/download&quot;,method = RequestMethod.POST)</div><div class="line">public ResponseEntity&lt;InputStreamResource&gt; downloadFile(@RequestParam String gifUrl) throws IOException &#123;</div><div class="line">    InputStream inputStream = new URL(gifUrl).openStream();</div><div class="line">    HttpHeaders headers = new HttpHeaders();</div><div class="line">    headers.add(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</div><div class="line">    headers.add(&quot;Content-Disposition&quot;, String.format(&quot;attachment; filename=\&quot;%s\&quot;.gif&quot;, UUID.randomUUID().toString()));</div><div class="line">    headers.add(&quot;Pragma&quot;, &quot;no-cache&quot;);</div><div class="line">    headers.add(&quot;Expires&quot;, &quot;0&quot;);</div><div class="line"></div><div class="line">    return ResponseEntity</div><div class="line">            .ok()</div><div class="line">            .headers(headers)</div><div class="line">            .contentType(MediaType.parseMediaType(&quot;application/octet-stream&quot;))</div><div class="line">            .body(new InputStreamResource(inputStream));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-下载zip文件"><a href="#2-下载zip文件" class="headerlink" title="2. 下载zip文件"></a>2. 下载zip文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/batch/download&quot;,method = RequestMethod.POST,produces=&quot;application/zip&quot;)</div><div class="line">    public void batchDownload(@RequestParam String gifUrls,HttpServletResponse response) throws IOException &#123;</div><div class="line">        response.setStatus(HttpServletResponse.SC_OK);</div><div class="line">        response.addHeader(&quot;Content-Disposition&quot;,String.format(&quot;attachment; filename=\&quot;%s\&quot;.zip&quot;, UUID.randomUUID().toString()));</div><div class="line"></div><div class="line">        ZipOutputStream zipOutputStream = new ZipOutputStream(response.getOutputStream());</div><div class="line">        List&lt;String&gt; gifs = Arrays.asList(gifUrls.split(&quot;,&quot;));</div><div class="line">        System.out.println(&quot;gifs =&gt; &quot; + gifs.size());</div><div class="line">        if(gifs.size() == 0)&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for(String gif : gifs)&#123;</div><div class="line">            zipOutputStream.putNextEntry(new ZipEntry(UUID.randomUUID().toString().concat(&quot;.gif&quot;)));</div><div class="line">            InputStream inputStream = new URL(gif).openStream();</div><div class="line">            IOUtils.copy(inputStream, zipOutputStream);</div><div class="line">            inputStream.close();</div><div class="line">            zipOutputStream.closeEntry();</div><div class="line">        &#125;</div><div class="line">        zipOutputStream.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之IO]]></title>
      <url>http://jianwl.com/2017/03/18/JAVA%E4%B9%8BIO/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以来对JAVA IO这一块都很陌生，最近接触的项目涉及到这一块，因为不熟悉所以做起来稍微花了点时间，这一节，主要学习<code>JAVA IO</code>的基础知识点；</p>
<h3 id="本节目标"><a href="#本节目标" class="headerlink" title="本节目标"></a>本节目标</h3><ul>
<li>了解 java.io.File类的主要用途</li>
<li>了解如何使用字节流和字符流</li>
<li>理解如何从文件读取数据和向其中写入数据</li>
</ul>
<h3 id="JAVA-IO基础"><a href="#JAVA-IO基础" class="headerlink" title="JAVA IO基础"></a>JAVA IO基础</h3><h4 id="1-流的概念"><a href="#1-流的概念" class="headerlink" title="1. 流的概念"></a>1. 流的概念</h4><p><code>JAVA</code>中将输入输出抽象成流，流通过输入输出系统与物理设备连接，尽管与他们连接的物理设备不尽相同，所有流的行为具有同样的方式。将数据从外部（包括磁盘文件、键盘、套接字）读入到内存中的流称为输入流，将从内存写入到外部设备（控制台、磁盘文件或网络）的称为输出流。</p>
<h4 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2. 流的分类"></a>2. 流的分类</h4><p>流序列中的数据既可以是未加工的原始二进制数据，也可以是经一定编码处理后符合某种规格的特定数据，因此Java中的流分为两种:</p>
<ul>
<li>字节流(8bits) : 用于读取或写二进制数据</li>
<li>字符流(16bits) : JAVA中的字符是Unicode编码，一个字符占两个字节。</li>
</ul>
<p>提示：</p>
<p>在最底层，所有的输入、输出都是字节形式的，基于字符的流只为处理字符提供方便有效的方法。</p>
<h4 id="3-字节流"><a href="#3-字节流" class="headerlink" title="3. 字节流"></a>3. 字节流</h4><p>字节流的最顶层是两个抽象类：InputStream和OutputStream,其他关于处理字节的类都是他们的子类，这些子类对不同的外设进行处理，例如磁盘、网络连接、甚至是内存缓冲区。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BufferedInputStream</td>
<td style="text-align:center">缓冲输入流</td>
</tr>
<tr>
<td style="text-align:center">BufferedOutputStream</td>
<td style="text-align:center">缓冲输出流</td>
</tr>
<tr>
<td style="text-align:center">ByteArrayInputStream</td>
<td style="text-align:center">从字节数组读取的输入流</td>
</tr>
<tr>
<td style="text-align:center">DataInputStream</td>
<td style="text-align:center">包含读取Java标准数据类型方法的输入流</td>
</tr>
<tr>
<td style="text-align:center">DataOutputStream</td>
<td style="text-align:center">包含编写Java 标准数据类型方法的输出流</td>
</tr>
<tr>
<td style="text-align:center">FileInputStream</td>
<td style="text-align:center">读取文件的输入流</td>
</tr>
<tr>
<td style="text-align:center">FileOutputStream</td>
<td style="text-align:center">写文件的输出流</td>
</tr>
<tr>
<td style="text-align:center">FilterInputStream</td>
<td style="text-align:center">实现 InputStream</td>
</tr>
<tr>
<td style="text-align:center">FilterOutputStream</td>
<td style="text-align:center">实现 OutputStream</td>
</tr>
<tr>
<td style="text-align:center">InputStream</td>
<td style="text-align:center">描述流输入的抽象类</td>
</tr>
<tr>
<td style="text-align:center">OutputStream</td>
<td style="text-align:center">描述流输出的抽象类</td>
</tr>
<tr>
<td style="text-align:center">PipedInputStream</td>
<td style="text-align:center">输入管道</td>
</tr>
<tr>
<td style="text-align:center">PipedOutputStream</td>
<td style="text-align:center">输出管道</td>
</tr>
<tr>
<td style="text-align:center">PrintStream</td>
<td style="text-align:center">包含print( ) 和 println( )的输出流</td>
</tr>
<tr>
<td style="text-align:center">PushbackInputStream</td>
<td style="text-align:center">支持向输入流返回一个字节的单字节的“unget”的输入流</td>
</tr>
<tr>
<td style="text-align:center">RandomAccessFile</td>
<td style="text-align:center">支持随机文件输入/输出</td>
</tr>
<tr>
<td style="text-align:center">SequenceInputStream</td>
<td style="text-align:center">两个或两个以上顺序读取的输入流组成的输入流</td>
</tr>
</tbody>
</table>
<p>抽象类InputStream和OutputStream中定义了实现其他流类的关键方法<code>read()</code>和<code>write</code>，他们分别是对数据的字节进行读写，两种方法都是抽象方法，被子类重载。</p>
<p>文件按字节流的方式拷贝：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class CopyFileByte &#123;</div><div class="line">   public static void main(String args[]) throws IOException</div><div class="line">   &#123;</div><div class="line">      FileInputStream in = null;</div><div class="line">      FileOutputStream out = null;</div><div class="line">      try &#123;</div><div class="line">         in = new FileInputStream(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">         out = new FileOutputStream(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line">         int c;</div><div class="line">         while ((c = in.read()) != -1) &#123;</div><div class="line">            out.write(c);</div><div class="line">         &#125;</div><div class="line">      &#125;finally &#123;</div><div class="line">         if (in != null) &#123;</div><div class="line">            in.close();</div><div class="line">         &#125;</div><div class="line">         if (out != null) &#123;</div><div class="line">            out.close();</div><div class="line">         &#125;</div><div class="line">      &#125; </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/47337851-file_1489806018819_6ceb.png" alt=""></p>
<p>上面使用的是文件名来创建FileInputStream和FileOutputStream，实际上还可以使用文件对象来创建输入输出流，字节流的每次操作都是一个数据单位–字节。<code>input.txt</code>中包含<code>Hello World</code>，那么他将复制完<code>H</code>之后，再复制<code>e</code>接着是<code>l</code>,如此类推直到结束。in.read()每次从输入流中读取一个字节，如果达到文件尾部就返回-1.使用完了，还要关闭这些字节流，调用close方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File inFile = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">File outFile = new File(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line"></div><div class="line">FileInputStream in = new FileInputStream(inFile);</div><div class="line">FileOutputStream out = new FileOutputStream(outFile);</div></pre></td></tr></table></figure>
<h4 id="4-字符流"><a href="#4-字符流" class="headerlink" title="4. 字符流"></a>4. 字符流</h4><p>JAVA是使用16字节来存储字符数据的，涉及到的大多数是字符操作，在程序中使用字符流比字节流更加合适，类似于字节流，字符流的两个顶层抽象类是Reader和Writer，以下是它们的子类处理字符流。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BufferedReader</td>
<td style="text-align:center">缓冲输入字符流</td>
</tr>
<tr>
<td style="text-align:center">BufferedWriter</td>
<td style="text-align:center">缓冲输出字符流</td>
</tr>
<tr>
<td style="text-align:center">CharArrayReader</td>
<td style="text-align:center">从字符数组读取数据的输入流</td>
</tr>
<tr>
<td style="text-align:center">CharArrayWriter</td>
<td style="text-align:center">向字符数组写数据的输出流</td>
</tr>
<tr>
<td style="text-align:center">FileReader</td>
<td style="text-align:center">读取文件的输入流</td>
</tr>
<tr>
<td style="text-align:center">FileWriter</td>
<td style="text-align:center">写文件的输出流</td>
</tr>
<tr>
<td style="text-align:center">FilterReader</td>
<td style="text-align:center">过滤读</td>
</tr>
<tr>
<td style="text-align:center">FilterWriter</td>
<td style="text-align:center">过滤写</td>
</tr>
<tr>
<td style="text-align:center">InputStreamReader</td>
<td style="text-align:center">把字节转换成字符的输入流</td>
</tr>
<tr>
<td style="text-align:center">LineNumberReader</td>
<td style="text-align:center">计算行数的输入流</td>
</tr>
<tr>
<td style="text-align:center">OutputStreamWriter</td>
<td style="text-align:center">把字符转换成字节的输出流</td>
</tr>
<tr>
<td style="text-align:center">PipedReader</td>
<td style="text-align:center">输入管道</td>
</tr>
<tr>
<td style="text-align:center">PipedWriter</td>
<td style="text-align:center">输出管道</td>
</tr>
<tr>
<td style="text-align:center">PrintWriter</td>
<td style="text-align:center">包含print( )和println( )的输出流</td>
</tr>
<tr>
<td style="text-align:center">PushbackReader</td>
<td style="text-align:center">允许字符返回到输入流的输入流</td>
</tr>
<tr>
<td style="text-align:center">StringReader</td>
<td style="text-align:center">读取字符串的输入流</td>
</tr>
<tr>
<td style="text-align:center">StringWriter</td>
<td style="text-align:center">写字符串的输出流</td>
</tr>
<tr>
<td style="text-align:center">Writer</td>
<td style="text-align:center">描述字符流输出的抽象类</td>
</tr>
<tr>
<td style="text-align:center">Reader</td>
<td style="text-align:center">描述字符流输入的抽象类</td>
</tr>
</tbody>
</table>
<p>类似于字节，字符的抽象类Reader和Writer中也定义了关键方法<code>read()</code>和<code>writer()</code>，它们分别对字符进行读写，两种方法也都是抽象方法，被子类重载；</p>
<p>文件按字符流的方式拷贝</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">//Character streams are used to perform input and output for 16-bit unicode</div><div class="line">public class CopyFileCharacter &#123;</div><div class="line">   public static void main(String args[]) throws IOException</div><div class="line">   &#123;</div><div class="line">      FileReader in = null;</div><div class="line">      FileWriter out = null;</div><div class="line">      try &#123;</div><div class="line">         in = new FileReader(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">         out = new FileWriter(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line"></div><div class="line">         int c;</div><div class="line">         while ((c = in.read()) != -1) &#123;</div><div class="line">            out.write(c);</div><div class="line">         &#125;</div><div class="line">      &#125;finally &#123;</div><div class="line">         if (in != null) &#123;</div><div class="line">            in.close();</div><div class="line">         &#125;</div><div class="line">         if (out != null) &#123;</div><div class="line">            out.close();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/88832472-file_1489808155695_709d.png" alt=""></p>
<p>与字节流例子对比，只有声明的I/O流的类名不同，这里使用的FileReader和FileWriter，他们操作的最小单位是一个字符(16bits)，而FileInputStream和FileOutputStream最小单位则是一个字节(8bits)</p>
<h3 id="JAVA自定义的标准流"><a href="#JAVA自定义的标准流" class="headerlink" title="JAVA自定义的标准流"></a>JAVA自定义的标准流</h3><p>标准输入流<code>System.in</code>读取标准输入设备数据，例如键盘输入(默认)，其类型是InputStream，三个重要的读入方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int read() 从输入流中读取数据的下一个字节，返回ASCLL码，若返回值==-1，说明没有读取到任何字节，读取工作结束</div><div class="line">int read(byte[] b)  从输入流中读取一定数量的字节，并将这些数据存储到缓冲区数据b中</div><div class="line">int read(byte[] b,int off,int len) 将输入流中最多len个字节读入到字节数组b中</div></pre></td></tr></table></figure>
<p>标准输入流<code>System.out</code>向标准的输出设备写入数据，默认情况下指控制台，其类型是<code>PrintStream</code>，包含两个重要的方法：print()、println()</p>
<p>标准错误流<code>System.err</code>默认也是控制台，类型和<code>System.out</code>相同说<code>PrintStream</code></p>
<p>提示：</p>
<p>这些流都有默认的设备，但它们可以重定向到任何兼容的输入/输出设备。</p>
<h3 id="控制台的输入和输出"><a href="#控制台的输入和输出" class="headerlink" title="控制台的输入和输出"></a>控制台的输入和输出</h3><p>控制台的输入和输出是由System.in和System.out来完成的，目前，读取控制台的输入输出的首选方法的是字符流，但完成控制台输入的唯一方法是字节流，因而java提供了InputStreamReader和OutputStreamWriter将字节流转化为字符流，BufferedReader是缓冲输入字符流，正如我们在例子中看到的，Java允许使用<code>System.out</code>向控制台写数据，但在实际项目中，推荐使用PrintWriter，他是基于字符的；</p>
<p>控制台输入字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">public class ConsoleInOut&#123;</div><div class="line">    public static void main(String args[])throws IOException&#123;</div><div class="line">           char c;</div><div class="line">            InputStreamReader isr = new InputStreamReader(System.in); //①</div><div class="line">            BufferedReader br = new BufferedReader(isr); //②</div><div class="line">            System.out.println(&quot;Enter characters, &apos;q&apos; to exit.&quot;);</div><div class="line">            c=(char)br.read();</div><div class="line">            while(c != &apos;q&apos;)&#123;</div><div class="line">                System.out.println(c);</div><div class="line">                c = (char) br.read();                </div><div class="line">            &#125; ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/55041445-file_1489809083755_c258.png" alt=""></p>
<p>①和②两行创建了一个与键盘相连的BufferedReader对象，这里使用read()方法来读取字符，当到达流的末尾时返回-1，输出q退出程序，输出使用的是println()方法，每次输出后都会换行。</p>
<h3 id="文件的输入和输出"><a href="#文件的输入和输出" class="headerlink" title="文件的输入和输出"></a>文件的输入和输出</h3><p>文件File位于<code>java.io</code>包中，用于描述文件和目录的操作，创建文件对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File file = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;)</div></pre></td></tr></table></figure>
<p>File相关的方法如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">exists()</td>
<td style="text-align:center">判断文件或目录是否存在</td>
</tr>
<tr>
<td style="text-align:center">mkdir()</td>
<td style="text-align:center">创建目录</td>
</tr>
<tr>
<td style="text-align:center">createNewFile()</td>
<td style="text-align:center">创建文件</td>
</tr>
<tr>
<td style="text-align:center">isFile()/isDirectory()</td>
<td style="text-align:center">判断是文件还是目录</td>
</tr>
<tr>
<td style="text-align:center">delete()</td>
<td style="text-align:center">删除文件</td>
</tr>
<tr>
<td style="text-align:center">getPath()</td>
<td style="text-align:center">获取文件或者目录的路径</td>
</tr>
<tr>
<td style="text-align:center">list()</td>
<td style="text-align:center">将目录中所有文件名保存在字符串数组中返回</td>
</tr>
</tbody>
</table>
<p>文件相关的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">public class TestAbstract &#123;  </div><div class="line">    public static void main(String args[]) throws IOException &#123;  </div><div class="line">        File file1 = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">        if (!file1.exists())</div><div class="line">            file1.createNewFile();  </div><div class="line">        System.out.println(&quot;file1&apos;s AbsolutePath=  &quot; + file1.getAbsolutePath());</div><div class="line">        System.out.println(&quot;file1 can read=&quot; + file1.canRead());</div><div class="line">        System.out.println(&quot;file1&apos;s len= &quot; + file1.length());  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/29701927-file_1489810785272_10b66.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://zhuanlan.zhihu.com/p/21444494" target="_blank" rel="external">JAVA IO输入、输出</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-perry-io/index.html" target="_blank" rel="external">IBM:IO</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/io/streams.html" target="_blank" rel="external">IO官方教程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maven依赖的有效范围]]></title>
      <url>http://jianwl.com/2017/03/16/Maven%E4%BE%9D%E8%B5%96%E7%9A%84%E6%9C%89%E6%95%88%E8%8C%83%E5%9B%B4/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Maven项目中某些依赖，只需要在编译阶段有效，运行时不需要该依赖，该如何配置？之前对依赖的有效范围的配置理解的很模糊，这一节主要来学习Maven依赖的有效范围配置。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>声明一个依赖可以包含以下元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">	&lt;type&gt;jar&lt;/type&gt;</div><div class="line">	&lt;optional&gt;true&lt;/optional&gt;</div><div class="line">	&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">	&lt;exclusions&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">	&lt;/exclusions&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>groupId、artifactId、version：依赖的基本坐标</p>
<p>type: 依赖的类型</p>
<p>optional:标记依赖是否可选</p>
<p>exclusions: 用来排除传递性依赖</p>
<p>scope: 依赖的有效范围</p>
<table>
<thead>
<tr>
<th style="text-align:center">依赖范围</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">compile</td>
<td style="text-align:center">没有指定默认依赖范围，对于编译、测试、运行三种classpath都有效</td>
<td style="text-align:center">大部分依赖</td>
</tr>
<tr>
<td style="text-align:center">test</td>
<td style="text-align:center">只对测试classpath有效</td>
<td style="text-align:center">测试依赖</td>
</tr>
<tr>
<td style="text-align:center">provided</td>
<td style="text-align:center">对于编译和测试classpath均有效，运行时无效</td>
<td style="text-align:center">servlet-api，编译和测试项目时需要该依赖，运行时无效，因为运行时容器已提供该依赖</td>
</tr>
<tr>
<td style="text-align:center">runtime</td>
<td style="text-align:center">对测试和运行classpath有效，编译主代码时无效</td>
<td style="text-align:center">JDBC驱动实现，项目主代码的编译主需要JDK提供的接口，只有在测试或者运行时才需要实现上述接口的具体JDBC驱动</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Maven实战</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell脚本基本功]]></title>
      <url>http://jianwl.com/2017/03/15/Shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E5%8A%9F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要介绍Shell常用的命令和语法，这个章节会持续更新，<a href="http://git.oschina.net/shuangziliuyun/shell" target="_blank" rel="external">本节练习脚本请查看GIT</a></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-数值比较"><a href="#1-数值比较" class="headerlink" title="1. 数值比较"></a>1. 数值比较</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/94282744-file_1489584983851_14e8a.png" alt=""></p>
<p>数字比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>n1 -eq n2</td>
<td>n1是否与n2相等</td>
</tr>
<tr>
<td>n1 -ge n2</td>
<td>n1是否大于或等于n2</td>
</tr>
<tr>
<td>n1 -gt n2</td>
<td>n1是否大于n2</td>
</tr>
<tr>
<td>n1 -le n2</td>
<td>n1是否小于或等于n2</td>
</tr>
<tr>
<td>n1 -lt n2</td>
<td>n1是否小于n2</td>
</tr>
<tr>
<td>n1 -ne n2</td>
<td>n1是否不等于n2</td>
</tr>
</tbody>
</table>
<p>字符串比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>str1 = str2</td>
<td>str1和str2相同</td>
</tr>
<tr>
<td>str1 != str2</td>
<td>str1和str2不相等</td>
</tr>
<tr>
<td>str1 &lt; str2</td>
<td>str1是否比str2小</td>
</tr>
<tr>
<td>str1 &gt; str2</td>
<td>str1是否比str2大</td>
</tr>
<tr>
<td>-n str1</td>
<td>str1的长度是否非0</td>
</tr>
<tr>
<td>-z str1</td>
<td>str2的长度是否为0</td>
</tr>
</tbody>
</table>
<h4 id="2-文件比较"><a href="#2-文件比较" class="headerlink" title="2. 文件比较"></a>2. 文件比较</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/5842677-file_1489586826777_16d8c.png" alt=""></p>
<p>文件比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d file</td>
<td>file是否存在并是一个目录</td>
</tr>
<tr>
<td>-e file</td>
<td>file是否存在</td>
</tr>
<tr>
<td>-f file</td>
<td>file是否存在并是个文件</td>
</tr>
<tr>
<td>-r file</td>
<td>file是否存在并可读</td>
</tr>
<tr>
<td>-s file</td>
<td>file是否存在并非空</td>
</tr>
<tr>
<td>-w file</td>
<td>file是否存在并可写</td>
</tr>
<tr>
<td>-x file</td>
<td>file是否存在并可执行</td>
</tr>
<tr>
<td>-O file</td>
<td>file是否存在并属当前用户所有</td>
</tr>
<tr>
<td>-G file</td>
<td>file是否存在并且默认组与当前用户相同</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>file1是否比file2新</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>file1是否比file2旧</td>
</tr>
</tbody>
</table>
<h4 id="3-for命令"><a href="#3-for命令" class="headerlink" title="3. for命令"></a>3. for命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/79683869-file_1489587635186_1b43.png" alt=""></p>
<h4 id="4-修改分割符"><a href="#4-修改分割符" class="headerlink" title="4. 修改分割符"></a>4. 修改分割符</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/21867516-file_1489588386921_5740.png" alt=""></p>
<table>
<thead>
<tr>
<th>分割符设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>IFS=<code>$&#39;\n&#39;</code></td>
<td>设置换行符为分隔符</td>
</tr>
<tr>
<td>IFS=<code>$&#39;\n:;&quot;&#39;</code></td>
<td>设置换行符、冒号、分好、双引号为分隔符</td>
</tr>
</tbody>
</table>
<h4 id="5-while命令"><a href="#5-while命令" class="headerlink" title="5. while命令"></a>5. while命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/34656202-file_1489588951940_12c28.png" alt=""></p>
<h4 id="6-continue命令"><a href="#6-continue命令" class="headerlink" title="6. continue命令"></a>6. continue命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/19067708-file_1489589502995_10596.png" alt=""></p>
<h4 id="7-case命令"><a href="#7-case命令" class="headerlink" title="7. case命令"></a>7. case命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/50152327-file_1489591476267_3699.png" alt=""></p>
<h4 id="8-创建函数"><a href="#8-创建函数" class="headerlink" title="8. 创建函数"></a>8. 创建函数</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/31595596-file_1489590492602_f1cf.png" alt=""></p>
<p>bash shell会把函数当做小型脚本，运行结束时会返回一个退出状态码,用<code>$?</code>判断程序的运行状态。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>命令成功结束 </td>
</tr>
<tr>
<td>1</td>
<td>通用未知错误</td>
</tr>
<tr>
<td>2</td>
<td>误用shell命令</td>
</tr>
<tr>
<td>126</td>
<td>命令不可执行</td>
</tr>
</tbody>
</table>
<p>…</p>
<h4 id="9、特殊参数变量"><a href="#9、特殊参数变量" class="headerlink" title="9、特殊参数变量"></a>9、特殊参数变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`$0` 读取程序名</div><div class="line">`$#` 命令行参数个数</div><div class="line">`$&#123;!#&#125;` 最后一个参数值</div><div class="line">`$*` 单个变量中存储所有的命令行参数</div><div class="line">`$@` 单个变量中存储所有的命令行参数</div></pre></td></tr></table></figure>
<p> <code>params.sh</code></p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/19213513-file_1489592788517_3396.png" alt=""></p>
<p> 运行：</p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/3625461-file_1489592376768_13f93.png" alt=""></p>
<p> 特别注意：<code>“$*”</code>变量会将所有参数当做单个参数，<code>“$@”</code>会单独处理每个参数;而<code>$*</code>变量和<code>$@</code>变量均会将所有参数当做单个参数。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.Linux命令行与Shell脚本编程大全</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python操作MYSQL数据库]]></title>
      <url>http://jianwl.com/2017/03/12/Python%E6%93%8D%E4%BD%9CMYSQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Python操作MySQL数据库是入门必须要掌握的技能，这节主要学习Python对MYSQL的增删改查操作。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装Python-MySQL</div><div class="line">pip install MySQL-python</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>mysql_test.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"># -*- coding: UTF-8 -*-</div><div class="line"></div><div class="line">import MySQLdb</div><div class="line"></div><div class="line"></div><div class="line">def init_db():</div><div class="line">    return MySQLdb.connect(&quot;localhost&quot;, &quot;root&quot;, &apos;&apos;, &quot;dada&quot;)</div><div class="line"></div><div class="line"></div><div class="line">def create(db):</div><div class="line">    print &quot;========= create start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;&quot;&quot;CREATE TABLE EMPLOYEE (</div><div class="line">                     FIRST_NAME  CHAR(20) NOT NULL,</div><div class="line">                     LAST_NAME  CHAR(20),</div><div class="line">                     AGE INT,</div><div class="line">                     SEX CHAR(1),</div><div class="line">                     INCOME FLOAT )&quot;&quot;&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        print &quot;========= create end==========&quot;</div><div class="line">    except:</div><div class="line">        print &quot;Error: unable to create table&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def select(db):</div><div class="line">    cursor = db.cursor()</div><div class="line">    sql = &quot;SELECT * FROM EMPLOYEE \</div><div class="line">           WHERE INCOME &gt; &apos;%d&apos;&quot; % (1000)</div><div class="line"></div><div class="line">    try:</div><div class="line">        print &quot;========= select start==========&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        results = cursor.fetchall()</div><div class="line">        for row in results:</div><div class="line">            fname = row[0]</div><div class="line">            lname = row[1]</div><div class="line">            age = row[2]</div><div class="line">            sex = row[3]</div><div class="line">            income = row[4]</div><div class="line">            # 打印结果</div><div class="line">            print &quot;fname=%s,lname=%s,age=%d,sex=%s,income=%d&quot; % \</div><div class="line">                  (fname, lname, age, sex, income)</div><div class="line">        print &quot;========= select end==========&quot;</div><div class="line"></div><div class="line">    except:</div><div class="line">        print &quot;Error: unable to fecth data&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def save(db):</div><div class="line">    print &quot;========= save start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">    	 # 三引号可输入多行文本</div><div class="line">        sql = &quot;&quot;&quot;INSERT INTO EMPLOYEE(FIRST_NAME,</div><div class="line">         LAST_NAME, AGE, SEX, INCOME)</div><div class="line">         VALUES (&apos;Mac&apos;, &apos;Mohan&apos;, 20, &apos;M&apos;, 2000)&quot;&quot;&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= save end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def update(db):</div><div class="line">    print &quot;========= update start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = &apos;%c&apos;&quot; % (&apos;M&apos;)</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= update end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line">def delete(db):</div><div class="line">    print &quot;========= delete start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;DELETE FROM EMPLOYEE WHERE AGE &gt; &apos;%d&apos;&quot; % (20)</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= delete end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    # 初始化db</div><div class="line">    db = init_db()</div><div class="line"></div><div class="line">    # 保存一条记录</div><div class="line">    save(db)</div><div class="line"></div><div class="line">    # 查看记录</div><div class="line">    select(db)</div><div class="line"></div><div class="line">    # 修改记录</div><div class="line">    update(db)</div><div class="line"></div><div class="line">    # 查看修改后的记录</div><div class="line">    select(db)</div><div class="line"></div><div class="line">    # 删除记录</div><div class="line">    delete(db)</div><div class="line"></div><div class="line">    # 查看删除后的记录</div><div class="line">    select(db)</div></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python mysql_test.py</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/23315645-file_1489332690876_12b7e.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之字典]]></title>
      <url>http://jianwl.com/2017/03/11/Python%E4%B9%8B%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>字典是Python中唯一内建的映射类型，构造字典的目的是通过某个特定的键，轻松找到其对应的值。</p>
<h3 id="初始化字典"><a href="#初始化字典" class="headerlink" title="初始化字典"></a>初始化字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = dict(one=1, two=2, three=3)</div><div class="line">b = &#123;&apos;one&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3&#125;</div><div class="line">c = dict(zip([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;], [1, 2, 3]))</div><div class="line">d = dict([(&apos;two&apos;, 2), (&apos;one&apos;, 1), (&apos;three&apos;, 3)])</div><div class="line">e = dict(&#123;&apos;three&apos;: 3, &apos;one&apos;: 1, &apos;two&apos;: 2&#125;)</div><div class="line">a == b == c == d == e</div></pre></td></tr></table></figure>
<h3 id="字典基本操作"><a href="#字典基本操作" class="headerlink" title="字典基本操作"></a>字典基本操作</h3><p>字典的基本操作包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">字典常用方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">len(d)</td>
<td style="text-align:center">返回d中键值对的数量</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">d[k]</td>
<td style="text-align:center">返回关联到键k上的值</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">d[k] = v</td>
<td style="text-align:center">将值v关联到键k上</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">del d[k]</td>
<td style="text-align:center">删除键为k的项</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">k in d</td>
<td style="text-align:center">检查d中是否有含有键为k的项</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">clear</td>
<td style="text-align:center">清除字典中所有的项</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">copy</td>
<td style="text-align:center">返回一个具有相同键值对的字典</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">fromkeys</td>
<td style="text-align:center">使用给定的键建立新字典，每个键对应一个默认值None</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">get</td>
<td style="text-align:center">获取字典项，若不存在该键，会出错</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">has_key</td>
<td style="text-align:center">检查字典中是否含有特定的键</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">items、iteritems</td>
<td style="text-align:center">将字典所有项以列表方式返回</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">keys、iterkeys</td>
<td style="text-align:center">将字典所有的键以列表方式返回</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">pop</td>
<td style="text-align:center">获取给定键值，并建这个键值对从字典中删除</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">popitems</td>
<td style="text-align:center">弹出<strong>随机</strong>的项</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">setdefault</td>
<td style="text-align:center">设置键的值，若键存在，返回该键位的值，否则，为该键设置值</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">update</td>
<td style="text-align:center">利用一个字典，更新另外一个字典</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">values、itervaues</td>
<td style="text-align:center">将字典中所有的值以列表方式返回</td>
</tr>
</tbody>
</table>
<h4 id="1）len"><a href="#1）len" class="headerlink" title="1）len"></a>1）len</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/51156140-file_1489285794306_25da.png" alt=""></p>
<h4 id="2-d-k"><a href="#2-d-k" class="headerlink" title="2) d[k]"></a>2) d[k]</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/30802879-file_1489285860276_3fd1.png" alt=""></p>
<h4 id="3-d-k-v"><a href="#3-d-k-v" class="headerlink" title="3) d[k] = v"></a>3) d[k] = v</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/62014407-file_1489285908551_1509c.png" alt=""></p>
<h4 id="4-del-d-k"><a href="#4-del-d-k" class="headerlink" title="4) del d[k]"></a>4) del d[k]</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/62540962-file_1489285964580_1059.png" alt=""></p>
<h4 id="5-k-in-d"><a href="#5-k-in-d" class="headerlink" title="5) k in d"></a>5) k in d</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/99042578-file_1489286045292_15b09.png" alt=""></p>
<h4 id="6-clear"><a href="#6-clear" class="headerlink" title="6) clear"></a>6) clear</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/19340560-file_1489286089117_15e4f.png" alt=""></p>
<h4 id="7-copy"><a href="#7-copy" class="headerlink" title="7) copy"></a>7) copy</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/1088979-file_1489286221891_a032.png" alt=""></p>
<h4 id="8-fromkeys"><a href="#8-fromkeys" class="headerlink" title="8) fromkeys"></a>8) fromkeys</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/11813325-file_1489286328979_137e.png" alt=""></p>
<h4 id="9-get"><a href="#9-get" class="headerlink" title="9) get"></a>9) get</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/62310043-file_1489286393838_46f1.png" alt=""></p>
<h4 id="10-has-key"><a href="#10-has-key" class="headerlink" title="10) has_key"></a>10) has_key</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/29896375-file_1489286444406_54ba.png" alt=""></p>
<h4 id="11-items、iteritems"><a href="#11-items、iteritems" class="headerlink" title="11) items、iteritems"></a>11) items、iteritems</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/67390503-file_1489286499089_aec8.png" alt=""></p>
<h4 id="12-keys、iterkeys"><a href="#12-keys、iterkeys" class="headerlink" title="12) keys、iterkeys"></a>12) keys、iterkeys</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/10181597-file_1489286546021_4e01.png" alt=""></p>
<h4 id="13-pop"><a href="#13-pop" class="headerlink" title="13) pop"></a>13) pop</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/57529412-file_1489286599806_163f5.png" alt=""></p>
<h4 id="14-popitems"><a href="#14-popitems" class="headerlink" title="14) popitems"></a>14) popitems</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/26922130-file_1489286675036_b62b.png" alt=""></p>
<h4 id="15-setdefault"><a href="#15-setdefault" class="headerlink" title="15) setdefault"></a>15) setdefault</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/96093454-file_1489286800270_298b.png" alt=""></p>
<h4 id="16）update"><a href="#16）update" class="headerlink" title="16）update"></a>16）update</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/5491167-file_1489286924873_d5e3.png" alt=""></p>
<h4 id="17-values"><a href="#17-values" class="headerlink" title="17) values"></a>17) values</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/5253501-file_1489286967576_e7bf.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Python基础教程</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之列表和元组]]></title>
      <url>http://jianwl.com/2017/03/11/Python%E4%B9%8B%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Python包含6种内建的序列：列表、元组、字符串、Unicode字符串、buffer对象、xrange对象，这节主要来学习列表和元组。<strong>列表和元组的区别在于，列表可以修改，元组不可以。</strong></p>
<h3 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h3><p>所有序列类型都可以进行这些操作：索引、分片、加、乘、以及检查某个元素是否属于该序列的成员、序列长度、找出最大元素、最小元素。</p>
<h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1) 索引"></a>1) 索引</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/14523041-file_1489217087380_3e78.png" alt=""></p>
<h4 id="2-分片"><a href="#2-分片" class="headerlink" title="2) 分片"></a>2) 分片</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/86520910-file_1489217253044_6475.png" alt=""></p>
<p>获取最后三个元素：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/2981895-file_1489217362541_2232.png" alt=""></p>
<p>更大步长：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/81377151-file_1489217450167_8f65.png" alt=""></p>
<h4 id="3-加"><a href="#3-加" class="headerlink" title="3) 加"></a>3) 加</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/55587129-file_1489217507183_666e.png" alt=""></p>
<h4 id="4-乘"><a href="#4-乘" class="headerlink" title="4) 乘"></a>4) 乘</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/63363847-file_1489217608021_1294.png" alt=""></p>
<h4 id="5-长度、最大值、最小值"><a href="#5-长度、最大值、最小值" class="headerlink" title="5) 长度、最大值、最小值"></a>5) 长度、最大值、最小值</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/65898019-file_1489217734808_186c.png" alt=""></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表除了适用序列的标准操作方法，本节还会介绍一些可以改变列表的方法：元素赋值、元素删除、分片赋值、以及列表方法</p>
<h4 id="1）改变列表元素"><a href="#1）改变列表元素" class="headerlink" title="1）改变列表元素"></a>1）改变列表元素</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/39445538-file_1489218070573_559e.png" alt=""></p>
<h4 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2) 删除元素"></a>2) 删除元素</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/83266752-file_1489218148529_12224.png" alt=""></p>
<h4 id="3-分片赋值"><a href="#3-分片赋值" class="headerlink" title="3) 分片赋值"></a>3) 分片赋值</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/68678272-file_1489218225510_75a7.png" alt=""></p>
<h4 id="4-列表方法"><a href="#4-列表方法" class="headerlink" title="4) 列表方法"></a>4) 列表方法</h4><p>4.1) <code>append</code> 列表末尾追加元素</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/63479534-file_1489218330479_b5b6.png" alt=""></p>
<p>4.2) <code>count</code> 统计某个元素在列表中出现的次数</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/33437808-file_1489218501030_e517.png" alt=""></p>
<p>4.3) <code>extend</code> 在列表后，一次性追加新的一个列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/81047607-file_1489218616823_b8c0.png" alt=""></p>
<p>4.4) <code>index</code> 从列表中找出某个值，第一个匹配项的索引位置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/87902781-file_1489218827874_12817.png" alt=""></p>
<p>4.5) <code>insert</code> 将对象插入列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/87119013-file_1489218933650_15ae9.png" alt=""></p>
<p>4.6) <code>pop</code> 默认移除最后一个元素，并返回该元素的值</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/94076650-file_1489219047630_175f8.png" alt=""></p>
<p>4.7) <code>reverse</code> 将列表中的元素反向存放</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/46157796-file_1489219161800_1183d.png" alt=""></p>
<p>4.8) <code>sort</code> 对列表元素排序</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/97781689-file_1489219230515_13a99.png" alt=""></p>
<p>4.9) 高级排序</p>
<p>sort方法有两个可选的参数–key和reverse</p>
<p>a) <code>key</code> 根据函数，为每个元素创建一个键，然后根据键来排序；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/32829610-file_1489219789896_8d71.png" alt=""></p>
<p>b）<code>reverse</code>，指明列表是否需要进行反序</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/99489690-file_1489219907483_ef90.png" alt=""></p>
<h3 id="元组：不可变序列"><a href="#元组：不可变序列" class="headerlink" title="元组：不可变序列"></a>元组：不可变序列</h3><p>元组与列表一样，也是一种序列，不同的是元组不能修改。</p>
<p>1）空元组</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/66845723-file_1489220816664_686a.png" alt=""></p>
<p>2) 单元素元组，—必须加个逗号</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/79464689-file_1489220865683_34a9.png" alt=""></p>
<p>3) 创建多元素元组</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/24763301-file_1489220747488_f833.png" alt=""></p>
<p>4) <code>tuple</code> 将一个序列转化为元组</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/85051282-file_1489220996689_13c72.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Python基础教程</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React技术栈介绍]]></title>
      <url>http://jianwl.com/2017/02/26/React%E6%8A%80%E6%9C%AF%E6%A0%88%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React整个技术栈涉及到的技术非常多，零基础的人入门总是望而却步，几个月之前就想认真学习React技术栈一直拖延至今。最近会抽出大部分时间，好好研究React技术栈。这一节我们来学习React涉及到的技术栈。</p>
<h3 id="React技术栈"><a href="#React技术栈" class="headerlink" title="React技术栈"></a>React技术栈</h3><h4 id="1-React"><a href="#1-React" class="headerlink" title="1. React"></a>1. React</h4><p>React是一个声明式、高效、灵活的、创建用户界面的JavaScript库，让我们来逐一解读：</p>
<h5 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h5><p>使用React描述组件的样子就可以改变用户界面。传统方式是命令式地操作DOM，不仅需要记住大量的API，而且还会增加代码的耦合度，使得项目难以维护。React使用自己的魔法改变界面，让开发者最大限度地减少DOM交互，较低处理视图的难度。</p>
<h5 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h5><p>React高性能的Diff算法，让我们在刷新全部界面时只更新需要改变的那部分界面，其使用单向数据流改变界面，抛弃传统的数据绑定，减少了样板代码和重量。</p>
<h5 id="灵活"><a href="#灵活" class="headerlink" title="灵活"></a>灵活</h5><p>React作为视图层与其他技术栈配合使用，比如与Redux搭配等等。</p>
<h4 id="2-Redux"><a href="#2-Redux" class="headerlink" title="2. Redux"></a>2. Redux</h4><p>Redux是一个JavaScript状态容器，提供可预测的状态管理。Redux可以用三条基本准则来描述：单一数据源；state只读；使用纯函数来执行修改。</p>
<h5 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h5><p>整个应用的state被存储在一棵对象树中，并且这个对象树只存在唯一一个store中。这里的state指的是数据。</p>
<h5 id="state只读"><a href="#state只读" class="headerlink" title="state只读"></a>state只读</h5><p>不是无法改变state，这里的只读指的是不允许直接对state这个变量重写赋值，但可以通过action和reducer返回一个新的state，而且只能使用这一方法。</p>
<h5 id="使用纯函数来执行修改"><a href="#使用纯函数来执行修改" class="headerlink" title="使用纯函数来执行修改"></a>使用纯函数来执行修改</h5><p>更新state的reducer只是一些纯函数，它接收先前的state和action，并返回新的state。</p>
<p>了解以上规则后，或许你会问为什么要使用Redux?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">可预测： Redux只有一个数据源，想要修改它只能发起action，reducer又是纯函数，相同的输入永远会得到相同的输出。这一切使得程序运作变得可控、可预测。</div><div class="line"></div><div class="line">便于组织管理代码：严格而明确的程序结构是的代码更容易组织和管理，也方便团队协作。</div><div class="line"></div><div class="line">支持Universal渲染：单一数据源这一原则可以帮助解决Universal渲染中的数据传递问题，服务端渲染后只需给客户端传递一个变量即可，这个变量就是存储state的对象树。</div><div class="line"></div><div class="line">容易测试：编写可测试的代码，最重要的一条规则就是写单一功能的、没有外界依赖的小型函数。</div></pre></td></tr></table></figure>
<h4 id="3-Node与Universal渲染"><a href="#3-Node与Universal渲染" class="headerlink" title="3.Node与Universal渲染"></a>3.Node与Universal渲染</h4><p>React与Redux既可以在浏览器运行也可以在服务器端运行，这里的服务器端指的是Node服务器。</p>
<p>和传统Web服务器相比，Node更简单，它是单线程，与平台无关的，我们可以实现Universal渲染 – 用同一套代码在服务端和客户端渲染。</p>
<h4 id="4-Babel"><a href="#4-Babel" class="headerlink" title="4.Babel"></a>4.Babel</h4><p>Babel是一个JavaScript编译器，可以让开发者提前使用下一代的JavaScript。</p>
<h4 id="5-Webpack"><a href="#5-Webpack" class="headerlink" title="5.Webpack"></a>5.Webpack</h4><p>Webpack是当下最热门的前端资源模块化管理和打包工具，它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。通过加载器(loader)的转换，任何形式的资源都可以视作模块，比如CommonJS模块、AMD模块、ES2015模块、CSS、图片、JSON、LESS、Coffeescript等等。</p>
<p>Webpack主要功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">编译、加载使用ES2015和JSX语法的模块</div><div class="line">实现开发服务器与热替换</div><div class="line">加载图片文件</div><div class="line">加载字体文件</div><div class="line">加载样式文件</div><div class="line">加载JSON文件</div><div class="line">视同同构工具实现同构渲染</div><div class="line">压缩代码</div><div class="line">哈希命名</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.React与Redux开发实例精解</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之SET、Map数据结构]]></title>
      <url>http://jianwl.com/2017/02/26/ES6%E4%B9%8BSET%E3%80%81Map%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节我们来学习在工作中最常用的两个数据结构<code>Set</code>和<code>Map</code>，介绍两种数据结构的基本用法。</p>
<h3 id="SET实战"><a href="#SET实战" class="headerlink" title="SET实战"></a>SET实战</h3><p>定义：类似于数组，但成员都是唯一，没有重复的</p>
<h4 id="1-初始化SET"><a href="#1-初始化SET" class="headerlink" title="1. 初始化SET"></a>1. 初始化SET</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/27685484-file_1488086345162_a031.png" alt=""></p>
<h4 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2. 常用方法"></a>2. 常用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add : 新增某个成员</div><div class="line">delete: 删除某个成员</div><div class="line">has: 判断是否有该成员</div><div class="line">clear: 清楚所有成员</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/37263173-file_1488086504381_112f0.png" alt=""></p>
<h4 id="3-遍历"><a href="#3-遍历" class="headerlink" title="3. 遍历"></a>3. 遍历</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/3967547-file_1488086882638_3a52.png" alt=""></p>
<h3 id="MAP实战"><a href="#MAP实战" class="headerlink" title="MAP实战"></a>MAP实战</h3><p>定义：键值对的集合，ES6提供的<code>Map</code>数据结构的键的范围不限于字符串，各种类型的值(包括对象)都可以当作键</p>
<h4 id="1-初始化MAP"><a href="#1-初始化MAP" class="headerlink" title="1. 初始化MAP"></a>1. 初始化MAP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/69357943-file_1488098923626_8f95.png" alt=""></p>
<h4 id="2-常用方法-1"><a href="#2-常用方法-1" class="headerlink" title="2. 常用方法"></a>2. 常用方法</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/8039268-file_1488099286728_504e.png" alt=""></p>
<h4 id="3-遍历-1"><a href="#3-遍历-1" class="headerlink" title="3. 遍历"></a>3. 遍历</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/86767862-file_1488100323638_7af1.png" alt=""></p>
<h4 id="4-Map转数组"><a href="#4-Map转数组" class="headerlink" title="4. Map转数组"></a>4. Map转数组</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/78684823-file_1488100481693_81a3.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>ES6标准入门 – 阮一峰</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot配置Filter、Interceptor]]></title>
      <url>http://jianwl.com/2017/02/25/SpringBoot%E9%85%8D%E7%BD%AEFilter%E3%80%81Interceptor/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SpringBoot自动配置的功能「加了EnableAutoConfiguration注解」，创建了一堆默认的配置，以前在web.xml中的配置，现在都可以通过Spring Bean的方式进行配置，由Spring进行生命周期的管理。本节主要来学习在SpringBoot中如何配置Filter,Interceptor。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-RequestReplaceFilter，包装请求流，允许多次读"><a href="#1-RequestReplaceFilter，包装请求流，允许多次读" class="headerlink" title="1. RequestReplaceFilter，包装请求流，允许多次读"></a>1. RequestReplaceFilter，包装请求流，允许多次读</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">public class RequestReplaceFilter extends OncePerRequestFilter &#123;</div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</div><div class="line">        if (!(request instanceof CustomServletRequestWrapper)) &#123;</div><div class="line">            request = new CustomServletRequestWrapper(request);</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    class CustomServletRequestWrapper extends HttpServletRequestWrapper &#123;</div><div class="line">        private final byte[] body;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Construct a wrapper for the specified request.</div><div class="line">         *</div><div class="line">         * @param request The request to be wrapped</div><div class="line">         */</div><div class="line">        public CustomServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</div><div class="line">            super(request);</div><div class="line">            body = toByteArray(super.getInputStream());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public BufferedReader getReader() throws IOException &#123;</div><div class="line">            return new BufferedReader(new InputStreamReader(getInputStream()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public ServletInputStream getInputStream() throws IOException &#123;</div><div class="line">            return new RequestBodyCachingInputStream(body);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private class RequestBodyCachingInputStream extends ServletInputStream &#123;</div><div class="line">            private byte[] body;</div><div class="line">            private int lastIndexRetrieved = -1;</div><div class="line">            private ReadListener listener;</div><div class="line"></div><div class="line">            public RequestBodyCachingInputStream(byte[] body) &#123;</div><div class="line">                this.body = body;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public int read() throws IOException &#123;</div><div class="line">                if (isFinished()) &#123;</div><div class="line">                    return -1;</div><div class="line">                &#125;</div><div class="line">                int i = body[lastIndexRetrieved + 1];</div><div class="line">                lastIndexRetrieved++;</div><div class="line">                if (isFinished() &amp;&amp; listener != null) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        listener.onAllDataRead();</div><div class="line">                    &#125; catch (IOException e) &#123;</div><div class="line">                        listener.onError(e);</div><div class="line">                        throw e;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                return i;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean isFinished() &#123;</div><div class="line">                return lastIndexRetrieved == body.length - 1;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean isReady() &#123;</div><div class="line">                // This implementation will never block</div><div class="line">                // We also never need to call the readListener from this method, as this method will never return false</div><div class="line">                return isFinished();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void setReadListener(ReadListener listener) &#123;</div><div class="line">                if (listener == null) &#123;</div><div class="line">                    throw new IllegalArgumentException(&quot;listener cann not be null&quot;);</div><div class="line">                &#125;</div><div class="line">                if (this.listener != null) &#123;</div><div class="line">                    throw new IllegalArgumentException(&quot;listener has been set&quot;);</div><div class="line">                &#125;</div><div class="line">                this.listener = listener;</div><div class="line">                if (!isFinished()) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        listener.onAllDataRead();</div><div class="line">                    &#125; catch (IOException e) &#123;</div><div class="line">                        listener.onError(e);</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    try &#123;</div><div class="line">                        listener.onAllDataRead();</div><div class="line">                    &#125; catch (IOException e) &#123;</div><div class="line">                        listener.onError(e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public int available() throws IOException &#123;</div><div class="line">                return body.length - lastIndexRetrieved - 1;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void close() throws IOException &#123;</div><div class="line">                lastIndexRetrieved = body.length - 1;</div><div class="line">                body = null;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-SignInterceptor-签名验证拦截器"><a href="#2-SignInterceptor-签名验证拦截器" class="headerlink" title="2. SignInterceptor 签名验证拦截器"></a>2. SignInterceptor 签名验证拦截器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class SignInterceptor extends HandlerInterceptorAdapter &#123;</div><div class="line">    @Override</div><div class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</div><div class="line"></div><div class="line">        String reqHash = request.getHeader(AppHeaders.VERIFICATION_HASH);</div><div class="line">        Map&lt;String, String[]&gt; reqParameterMap = request.getParameterMap();</div><div class="line"></div><div class="line">        log.info(&quot;Request-Url =&gt; &quot; + request.getRequestURL());</div><div class="line">        log.info(&quot;Request-Hash =&gt; &quot; + reqHash);</div><div class="line">        log.info(&quot;Request-params =&gt; &quot; + JSON.toJSONString(reqParameterMap));</div><div class="line"></div><div class="line">        if (StringUtils.isNotEmpty(reqHash)) &#123;</div><div class="line">            if (ApiConstants.NO_CHECK_SIGN_HASH.contains(reqHash)) &#123;</div><div class="line">                log.info(&quot;hash pass&quot;);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Object[] key_arr = reqParameterMap.keySet().toArray();</div><div class="line">            Arrays.sort(key_arr);</div><div class="line">            StringBuilder str = new StringBuilder();</div><div class="line">            for (Object key : key_arr) &#123;</div><div class="line">                String[] values = reqParameterMap.get(key);</div><div class="line">                str.append(key).append(&quot;=&quot;).append(values[values.length - 1]).append(&quot;&amp;&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            String paramStr = str.toString();</div><div class="line">            if (StringUtils.isNotBlank(paramStr)) &#123;</div><div class="line">                paramStr = paramStr.substring(0, paramStr.length() - 1);</div><div class="line">            &#125;</div><div class="line">            log.info(&quot;Server Md5 str =&gt; &quot; + paramStr);</div><div class="line"></div><div class="line">            String serverHash = DigestUtils.md5Hex(paramStr + SaltKeys.BDMS_API_SALT.getKey());</div><div class="line">            log.info(&quot;Server md5 hash =&gt; &quot; + serverHash);</div><div class="line">            if (reqHash.equals(serverHash)) &#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</div><div class="line">        response.getWriter().write(</div><div class="line">                JSON.toJSONString(ApiResponse.failed(ErrorCode.SIGN_ERROR))</div><div class="line">        );</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-注册拦截器、过滤器-amp-配置拦截器、过滤器的路径"><a href="#3-注册拦截器、过滤器-amp-配置拦截器、过滤器的路径" class="headerlink" title="3. 注册拦截器、过滤器 &amp; 配置拦截器、过滤器的路径"></a>3. 注册拦截器、过滤器 &amp; 配置拦截器、过滤器的路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class FilterRegister extends WebMvcConfigurerAdapter &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</div><div class="line">        // 签名校验</div><div class="line">        registry.addInterceptor(new SignInterceptor())</div><div class="line">        .addPathPatterns(&quot;/**&quot;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Bean</div><div class="line">    public FilterRegistrationBean getRequestFilter()&#123;</div><div class="line">        RequestReplaceFilter filter = new RequestReplaceFilter();</div><div class="line">        FilterRegistrationBean registrationBean = new FilterRegistrationBean();</div><div class="line">        registrationBean.setFilter(filter);</div><div class="line">        List&lt;String&gt; urlPatterns = new ArrayList&lt;&gt;();</div><div class="line">        urlPatterns.add(&quot;/*&quot;);</div><div class="line">        registrationBean.setUrlPatterns(urlPatterns);</div><div class="line">        registrationBean.setOrder(1);</div><div class="line">        return registrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议详解]]></title>
      <url>http://jianwl.com/2017/02/23/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们日常生活中经常会使用浏览器访问Web站点，但大家有思考过在这个过程中到底发生了什么吗？为什么我们在浏览器上输入要访问的URL就可以访问Web页面呢？</p>
<p>当我们在浏览器地址栏上输入要访问的URL后，浏览器会分析出URL上的域名，然后通过NDS服务器查询出域名映射的IP地址，浏览器根据查询到的IP地址与Web服务器进行通信，而<strong>通信的协议就是HTTP协议。</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-25/53842035-file_1487985982597_a3ff.png" alt=""></p>
<p>浏览器与Web服务器使用HTTP协议进行通信，接下来我们会详细介绍HTTP协议的相关知识。</p>
<h3 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h3><p>HTTP协议交互的信息称为HTTP报文，请求端的HTTP报文称为请求报文，响应端的被称为响应报文。</p>
<h4 id="1-报文结构"><a href="#1-报文结构" class="headerlink" title="1.报文结构"></a>1.报文结构</h4><p>HTTP报文大致分为报文首部和报文主体两部分，两者由最初出现的空行来划分。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/63335022-file_1487776806455_14596.png" alt=""></p>
<h4 id="2-请求报文结构"><a href="#2-请求报文结构" class="headerlink" title="2.请求报文结构"></a>2.请求报文结构</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/18159996-file_1487777311008_1c4d.png" alt=""></p>
<p>举个例子：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/94747527-file_1487777973466_aaae.png" alt=""></p>
<h4 id="3-响应报文结构"><a href="#3-响应报文结构" class="headerlink" title="3.响应报文结构"></a>3.响应报文结构</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/73324972-file_1487777733759_13411.png" alt=""></p>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/50444905-file_1487777764748_115e3.png" alt=""></p>
<h3 id="HTTP首部字段"><a href="#HTTP首部字段" class="headerlink" title="HTTP首部字段"></a>HTTP首部字段</h3><h4 id="1-通用首部字段"><a href="#1-通用首部字段" class="headerlink" title="1.通用首部字段"></a>1.通用首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Cache-Control</td>
<td style="text-align:center">控制缓存的行为</td>
</tr>
<tr>
<td style="text-align:center">Connection</td>
<td style="text-align:center">逐跳首部、连接的管理</td>
</tr>
<tr>
<td style="text-align:center">Date</td>
<td style="text-align:center">创建报文的日期时间</td>
</tr>
<tr>
<td style="text-align:center">Pragma</td>
<td style="text-align:center">报文指令</td>
</tr>
<tr>
<td style="text-align:center">Trailer</td>
<td style="text-align:center">报文末端的首部一览</td>
</tr>
<tr>
<td style="text-align:center">Transfer-Encoding</td>
<td style="text-align:center">指定报文主体的<strong>传输编码方式</strong></td>
</tr>
<tr>
<td style="text-align:center">Upgrade</td>
<td style="text-align:center">升级为其他协议</td>
</tr>
<tr>
<td style="text-align:center">Via</td>
<td style="text-align:center">代理服务器的相关信息</td>
</tr>
<tr>
<td style="text-align:center">Warning</td>
<td style="text-align:center">错误通知</td>
</tr>
</tbody>
</table>
<h4 id="2-请求首部字段"><a href="#2-请求首部字段" class="headerlink" title="2.请求首部字段"></a>2.请求首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept</td>
<td style="text-align:center">用户代理可处理的媒体类型</td>
</tr>
<tr>
<td style="text-align:center">Accept-Charset</td>
<td style="text-align:center">优先的字符集</td>
</tr>
<tr>
<td style="text-align:center">Accept-Encoding</td>
<td style="text-align:center">优先的内容编码</td>
</tr>
<tr>
<td style="text-align:center">Accept-Language</td>
<td style="text-align:center">优先的语言</td>
</tr>
<tr>
<td style="text-align:center">Authorization</td>
<td style="text-align:center">Web认证信息</td>
</tr>
<tr>
<td style="text-align:center">Expect</td>
<td style="text-align:center">期待服务器的特定行为</td>
</tr>
<tr>
<td style="text-align:center">From</td>
<td style="text-align:center">用户的电子邮箱地址</td>
</tr>
<tr>
<td style="text-align:center">Host</td>
<td style="text-align:center">请求资源所在服务器</td>
</tr>
<tr>
<td style="text-align:center">If-Match</td>
<td style="text-align:center">比较实体标记ETag</td>
</tr>
<tr>
<td style="text-align:center">If-Modified-Since</td>
<td style="text-align:center">比较资源的更新时间</td>
</tr>
<tr>
<td style="text-align:center">If-None-Match</td>
<td style="text-align:center">比较实体标记（与If-Match相反）</td>
</tr>
<tr>
<td style="text-align:center">If-Range</td>
<td style="text-align:center">资源未更新时发送实体Byte的范围请求</td>
</tr>
<tr>
<td style="text-align:center">If-Unmodified-Since</td>
<td style="text-align:center">比较资源的更新时间 （与If-Modified-Since相反）</td>
</tr>
<tr>
<td style="text-align:center">Max-Forwards</td>
<td style="text-align:center">最大传输逐跳数</td>
</tr>
<tr>
<td style="text-align:center">Proxy-Authorization</td>
<td style="text-align:center">代理服务器要求客户端的认证信息</td>
</tr>
<tr>
<td style="text-align:center">Range</td>
<td style="text-align:center">实体的字节范围请求</td>
</tr>
<tr>
<td style="text-align:center">Referer</td>
<td style="text-align:center">对请求中URI的原始获取方</td>
</tr>
<tr>
<td style="text-align:center">TE</td>
<td style="text-align:center">传输编码的优先级</td>
</tr>
<tr>
<td style="text-align:center">User-Agent</td>
<td style="text-align:center">HTTP客户端程序的信息</td>
</tr>
</tbody>
</table>
<h4 id="3-响应首部字段"><a href="#3-响应首部字段" class="headerlink" title="3. 响应首部字段"></a>3. 响应首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept-Ranges</td>
<td style="text-align:center">是否接受字节范围请求</td>
</tr>
<tr>
<td style="text-align:center">Age</td>
<td style="text-align:center">推算资源创建经过时间</td>
</tr>
<tr>
<td style="text-align:center">ETag</td>
<td style="text-align:center">资源的匹配信息</td>
</tr>
<tr>
<td style="text-align:center">Location</td>
<td style="text-align:center">令客户端重定向至指定URI</td>
</tr>
<tr>
<td style="text-align:center">Proxy-Authenticate</td>
<td style="text-align:center">代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td style="text-align:center">Retry-After</td>
<td style="text-align:center">对再次发起请求的时机要求</td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center">HTTP服务器的安装信息</td>
</tr>
<tr>
<td style="text-align:center">Vary</td>
<td style="text-align:center">代理服务器缓存的管理信息</td>
</tr>
<tr>
<td style="text-align:center">WWW-Authenticate</td>
<td style="text-align:center">服务器对客户端的认证信息</td>
</tr>
</tbody>
</table>
<h4 id="4-实体首部字段"><a href="#4-实体首部字段" class="headerlink" title="4.实体首部字段"></a>4.实体首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Allow</td>
<td style="text-align:center">资源可支持的HTTP方法</td>
</tr>
<tr>
<td style="text-align:center">Content-Encoding</td>
<td style="text-align:center">实体主体适用的编码方式</td>
</tr>
<tr>
<td style="text-align:center">Content-Language</td>
<td style="text-align:center">实体主体的自然语言</td>
</tr>
<tr>
<td style="text-align:center">Content-Length</td>
<td style="text-align:center">实体主体的大小(单位：字节)</td>
</tr>
<tr>
<td style="text-align:center">Content-Location</td>
<td style="text-align:center">替代对应资源的URI</td>
</tr>
<tr>
<td style="text-align:center">Content-MD5</td>
<td style="text-align:center">实体主体的报文摘要</td>
</tr>
<tr>
<td style="text-align:center">Content-Range</td>
<td style="text-align:center">实体主体的位置范围</td>
</tr>
<tr>
<td style="text-align:center">Content-Type</td>
<td style="text-align:center">实体主体的媒体类型</td>
</tr>
<tr>
<td style="text-align:center">Expires</td>
<td style="text-align:center">实体主体的过期时间</td>
</tr>
<tr>
<td style="text-align:center">Last-Modified</td>
<td style="text-align:center">资源的最后修改日期时间</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>图解HTTP - 上野宣</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP缓存机制]]></title>
      <url>http://jianwl.com/2017/02/23/HTTP%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>HTTP缓存机制作为Web性能优化的重要手段，这一节我们主要来学习HTTP缓存，先贴出2道题，大家可以尝试解答下：</p>
<p>以下为<code>page.html</code>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">    &lt;title&gt;page页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</div><div class="line">    &lt;img src=&quot;images/head.png&quot; /&gt;</div><div class="line">    &lt;a href=&quot;page.html&quot;&gt;重新访问page页&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>首次访问该页面，页面中head.png响应头信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Cache-Control: no-cache</div><div class="line">Content-Type: image/png</div><div class="line">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</div><div class="line">Accept-Ranges: bytes</div><div class="line">Date: Thu, 10 Nov 2016 02:48:50 GMT</div><div class="line">Content-Length: 3534</div></pre></td></tr></table></figure>
<p><strong>问题1：</strong> 请问当点击<code>重新访问page页</code>链接重新加载该页面后，head.png如何二次加载？</p>
<p><strong>问题2：</strong>如果将上述信息中的Cache-Controller设置为private，那么结果又会如何呢？</p>
<p>以上2道题，如果你能答对，说明你已经对这些知识理解非常透彻了，否则请继续往下看。接下来我们将从系统化角度来讲讲HTTP缓存是如何协同工作的</p>
<h3 id="HTTP缓存体系"><a href="#HTTP缓存体系" class="headerlink" title="HTTP缓存体系"></a>HTTP缓存体系</h3><p>HTTP缓存体系分为以下三个部分：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-23/15685593-file_1487864473858_e48d.png" alt=""></p>
<h4 id="1-缓存存储策略"><a href="#1-缓存存储策略" class="headerlink" title="1. 缓存存储策略"></a>1. 缓存存储策略</h4><p>用来确定HTTP响应内容是否可以被客户端缓存，以及可以被哪些客户端存储，这个策略的作用只有一个，用于决定HTTP响应内容是否可缓存到客户端。</p>
<p>对于<code>Cache-Controller</code>里头的Public、Private、no-cache、max-age、no-store他们都是用来指明响应内容是否可以被客户端存储的，其中前4个都会缓存文件数据(关于no-cache应理解为不建议使用本地缓存，其仍然会缓存数据到本地)，后者no-store则不会在客户端缓存任何响应数据。</p>
<p>通过<code>Cache-Controller:</code>Public设置我们可以将HTTP响应数据存储到本地，但此时并不意味着后续浏览器会直接从缓存中读取数据并使用，为啥？因为它无法确定本地缓存的数据是否可用，还必须借助一套鉴别机制来确定才行，这就是我们下面将到的缓存过期策略</p>
<h4 id="2-缓存过期策略"><a href="#2-缓存过期策略" class="headerlink" title="2. 缓存过期策略"></a>2. 缓存过期策略</h4><p>客户端用来确认存储在本地的缓存数据是否过期，进而决定是否要发请求到服务端获取数据，这个策略的作用也只有一个，那就是决定客户端是否可直接从本地缓存数据中加载数据并展示，否则就发请求到服务器获取。</p>
<p>刚上面我们已阐述了数据缓存到了本地还需要经过判断才能使用，那么浏览器通过什么条件来判断呢？答案是<code>Expires</code>，Expires指名了缓存数据绝对时间，告诉客户端到这个时间点后本地缓存就作废了。</p>
<p>注意：<br>当Cache-Control: max-age=10 与 <code>Expires</code>同时存在时，后者会被覆盖掉；</p>
<h4 id="3-缓存对比策略"><a href="#3-缓存对比策略" class="headerlink" title="3. 缓存对比策略"></a>3. 缓存对比策略</h4><p>将缓存在客户端的数据标识发往服务端，服务端通过标识来判断客户端缓存数据是否仍有效，进而决定是否要重发数据。</p>
<p>客户端检查到数据过期或浏览器刷新后，往往会重新发起一个HTTP请求到服务器，服务器此时并不急于返回数据，而是按请求头有没有带标识(If-Modified-Since、If-None-Match)过来，如果判断标识仍然有效，则返回304告诉客户端取本地缓存数据来用即可(这里要注意的是你必须要在首次响应时输出相应的头信息(Last-Modified、ETags)到客户端。至此我们明白了上面所说的本地缓存数据即使被认为过期，并不等于数据从此没用的道理。</p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ" target="_blank" rel="external">HTTP缓存策略</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[awk及sed简明教程]]></title>
      <url>http://jianwl.com/2017/02/20/awk%E5%8F%8Ased%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://coolshell.cn/articles/9104.html" target="_blank" rel="external">SED简明教程 – 酷壳</a></li>
<li><a href="http://coolshell.cn/articles/9070.html" target="_blank" rel="external">AWK简明教程 – 酷壳</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[InnoDB存储引擎之B+树索引内部实现]]></title>
      <url>http://jianwl.com/2017/02/19/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BB-%E6%A0%91%E7%B4%A2%E5%BC%95%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>B+</code>树索引是InnoDB最为常用和最为有效的索引，其构造类似于<code>二叉树</code>，<code>B+</code>树中的B代表的是平衡(balance)，因为<code>B+</code>树是从最早的平衡二叉树演化而来的。</p>
<p>在学习索引之前先介绍与之密切相关的一些算法与数据结构，有助于更好的理解B+树索引的工作方式。</p>
<h4 id="1-二分查找法"><a href="#1-二分查找法" class="headerlink" title="1. 二分查找法"></a>1. 二分查找法</h4><p>基本思想：先以<strong>有序数列</strong>的中点位置为比较对象，如果找的元素值小于该中点元素，则将待查序列缩小为左半部分，否则为右半部分。通过一次比较，将查找区间缩小一半。</p>
<p>举个例子：从以下10个数中，查找48这条记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">5 10 19 21 31 37(✅) 42 48 50 55</div><div class="line"></div><div class="line">5 10 19 21 31 37 42 48 50(✅) 55</div><div class="line"></div><div class="line">5 10 19 21 31 37 42 48(✅) 50 55</div><div class="line"></div><div class="line">顺序查找平均次数: (1+2+3+4+5+6+7+8+9+10)/10 = 5.5次</div><div class="line"></div><div class="line">二分查找法平均次数: (4+3+2+4+3+1+4+3+2+3)/10 = 4次</div></pre></td></tr></table></figure>
<h4 id="2-二叉查找树"><a href="#2-二叉查找树" class="headerlink" title="2. 二叉查找树"></a>2. 二叉查找树</h4><p>定义：在二叉查找树中，左子树的键值总是小于跟的键值，右子树的键值总是大于根的键值。</p>
<p>三种遍历方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">前序遍历：根节点-&gt;左子树-&gt;右子树</div><div class="line">中序遍历：左子树-&gt;根节点-&gt;右子树</div><div class="line">后序遍历：左子树-&gt;右子树-&gt;根节点</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/62647480-file_1487492747619_129e8.gif" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">前序遍历：abdefgc</div><div class="line">中序遍历：debgfac</div><div class="line">后序遍历：edgfbca</div></pre></td></tr></table></figure>
<h4 id="3-平衡二叉树"><a href="#3-平衡二叉树" class="headerlink" title="3. 平衡二叉树"></a>3. 平衡二叉树</h4><p>定义：符合二叉查找树的定义，其次必须满足任何节点的两个子数的高度最大差为1.</p>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+ 树"></a>B+ 树</h3><p>定义：B+树中，所有记录节点都按键值的大小的顺序存放在同一层的叶子节点上，由各叶子节点指针进行连接。先来看一个B+树，其高度为2，<strong>每页可存放4条记录</strong>，扇出(fan out)为5。</p>
<p>从图1-1可以看出，所有记录都在叶子节点上，并且是顺序存放的，如果用户从最左边的叶子节点开始顺序遍历，可以得到所有键值的顺序排序：5、10、15、20、25、30、50、55、60、65、75、80、85、90。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/79936845-file_1487501076247_17452.png" alt="图1-1"></p>
<h4 id="1-插入操作"><a href="#1-插入操作" class="headerlink" title="1. 插入操作"></a>1. 插入操作</h4><table>
<thead>
<tr>
<th style="text-align:center">Leaf Page满</th>
<th style="text-align:center">Index Page满</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">直接将记录插入到叶子节点</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">1）拆分Leaf Page  2) 将中间的节点放入到Index Page中 3）小于中间节点的记录放左边</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:left">1）拆分Leaf Page 2) 小于中间节点的记录放左边 3）大于或等于中间节点的记录放右边 4）拆分Index Page 5) 小于中间节点的记录放左边 6）大于中间节点放右边 7） 中间节点放入上一层Index Page</td>
</tr>
</tbody>
</table>
<p>操作1. 用户插入28键值，发现当前Leaf Page与Index Page都没有满</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/73962338-file_1487501771494_c1ff.png" alt=""></p>
<p>操作2. 继操作1之后，再插入70这个键值，此时Leaf Page满了，但Index Page还没有满</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/91261615-file_1487502263260_fa07.png" alt=""></p>
<p>操作3. 继操作2之后，再插入键值95，此时Leaf Page与Index Page都满了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/87480241-file_1487503232532_1e17.png" alt=""></p>
<h4 id="2-删除操作"><a href="#2-删除操作" class="headerlink" title="2. 删除操作"></a>2. 删除操作</h4><table>
<thead>
<tr>
<th style="text-align:center">叶子节点小于填充因子</th>
<th style="text-align:center">中间节点小于填充因子</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">直接将记录从叶子节点删除，如果该节点还是Index Page的节点，用该节点的右节点代替</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">合并叶子节点和他的兄弟节点，同时更新Index Page</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:left">1) 合并叶子节点和它的兄弟节点 2）更新Index Page 3) 合并Index Page和它的兄弟节点</td>
</tr>
</tbody>
</table>
<p>操作1. 删除键值为70的记录，符合上述第一种情况：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/52906554-file_1487511007704_aa56.png" alt=""></p>
<p>操作2. 继操作1之后，删除键值为25记录，符合上述第二种情况：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/63451589-file_1487511457231_11319.png" alt=""></p>
<p>操作3. 继操作2之后，删除键值60的记录，填充因子小于50%，进行合并操作，符合上述第三种情况：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/67245038-file_1487511783693_b9ba.png" alt=""></p>
<h3 id="B-索引类型"><a href="#B-索引类型" class="headerlink" title="B+ 索引类型"></a>B+ 索引类型</h3><p>B+树索引可以分为聚集索引、辅助索引，但不管是聚集还是辅助索引，其内部都是B+树的，高度平衡，叶子节点存放着所有的数据。</p>
<h4 id="1-聚集索引"><a href="#1-聚集索引" class="headerlink" title="1. 聚集索引"></a>1. 聚集索引</h4><p>定义：按照每张表的主键构造一棵B+树，同时叶子节点中存放的即为整张表的行记录数据，也将聚集索引的叶子节点称为数据页。</p>
<p>好处：</p>
<p>1）对于主键的排序查找和范围查找速度非常快。由于B+数索引是双向链表，用户可以快速找到最后一个数据页。</p>
<p>举个例子：<br>因为B+树索引是双向链表的，可以快速找到最后一个数据页，并获取10条记录。<br><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/86953295-file_1487513202735_1c86.png" alt=""></p>
<h4 id="2-辅助索引"><a href="#2-辅助索引" class="headerlink" title="2. 辅助索引"></a>2. 辅助索引</h4><p>定义：叶子节点并不包含行记录的全部数据，叶子节点除了包含键值以外，每个叶子节点中的索引行还包含了一个书签。该书签用来告诉InnoDB存储引擎哪里可以找到索引相对应的行数据。由于InnoDB存储引擎表是索引组织表，因此InnoDB存储引擎的辅助索引的书签就是相应的行数据的聚集索引键。</p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>MYSQL技术内幕</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[InnoDB存储引擎之日志文件]]></title>
      <url>http://jianwl.com/2017/02/19/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8B%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>InnoDB存储引擎表的有以下几种文件：</p>
<table>
<thead>
<tr>
<th style="text-align:center">文件</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">参数文件</td>
<td style="text-align:center">告诉MYSQL启动时，哪里可以找到数据库文件，并指定某些初始化参数，这些参数定义了某种内存结构的大小</td>
</tr>
<tr>
<td style="text-align:center">日志文件</td>
<td style="text-align:center">记录MYSQL实例对某种条件作出响应时写入的文件，如：错误日志、二进制日志文件、慢查询日志文件、查询日志文件等</td>
</tr>
<tr>
<td style="text-align:center">socket文件</td>
<td style="text-align:center">当用UNIX域套接字进行连接时需要的文件</td>
</tr>
<tr>
<td style="text-align:center">pid文件</td>
<td style="text-align:center">MYSQL实例的进程ID</td>
</tr>
<tr>
<td style="text-align:center">MySQL表结构文件</td>
<td style="text-align:center">存放MYSQL表结构定义文件</td>
</tr>
<tr>
<td style="text-align:center">存储引擎文件</td>
<td style="text-align:center">因MYSQ表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据，这些存储引擎真正存储了记录和索引等数据。</td>
</tr>
</tbody>
</table>
<p>这一节，我们主要介绍日志文件。</p>
<h3 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1. 错误日志"></a>1. 错误日志</h3><p>1）错误日志文件的位置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/65048571-file_1487482229292_773f.png" alt=""></p>
<p>2）查看错误日志</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/6724899-file_1487482372203_17997.png" alt=""></p>
<h3 id="2-慢查询日志"><a href="#2-慢查询日志" class="headerlink" title="2. 慢查询日志"></a>2. 慢查询日志</h3><p>1）MYSQL启动时设了一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询日志文件中，阈值可通过参数<code>long_query_time</code>来设置，默认为10,代表10秒。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/70209826-file_1487482647488_b735.png" alt=""></p>
<p>2）慢查询日志参数，默认是<code>OFF</code>，需要手动设置为<code>ON</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/56036822-file_1487482980959_aa98.png" alt=""></p>
<p>3）没有使用索引的慢查询参数，默认是OFF，需要手动设置为<code>ON</code>：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/25689763-file_1487483450794_166ec.png" alt=""></p>
<p>4）启动慢查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set global slow_query_log = ON;</div><div class="line">set global log_queries_not_using_indexes = ON;</div></pre></td></tr></table></figure>
<p>5）慢查询日志文件位置：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/36049973-file_1487483823605_cd92.png" alt=""></p>
<p>6）查看慢查询日志：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/22431008-file_1487483956114_4b85.png" alt=""></p>
<p>7）越来越多的SQL查询记录到慢查询日志文件中，此时要分析该文件显得不是那么简单和直观了。MYSQL提供<code>mysqldumpslow</code>命令可以很好解决该问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 查询执行时间最长的10条SQL语句</div><div class="line"></div><div class="line">sudo mysqldumpslow -s al -n 10 /usr/local/mysql/data/jianweilindeMacBook-Pro-slow.log</div><div class="line"></div><div class="line">-s ORDER what to sort by(al、at、ar、c、l、r、t),&apos;at&apos; is default</div><div class="line">   al : average lock time</div><div class="line">   ar : average row sent</div><div class="line">   at : average query time</div><div class="line">   c  : count</div><div class="line">   l  : lock time</div><div class="line">   r  : rows sent</div><div class="line">   t  : query time</div><div class="line"></div><div class="line">-r reverse the sort order</div><div class="line">-n Num  abstract numbers with at least n dights within names</div></pre></td></tr></table></figure>
<h3 id="3-查询日志"><a href="#3-查询日志" class="headerlink" title="3. 查询日志"></a>3. 查询日志</h3><p>查询日志记录了所有对MYSQL数据库请求的信息，无论这些请求是否得到了正确的执行。默认文件名为：主机名.log。</p>
<p>1）查询日志参数：默认是<code>OFF</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/15106561-file_1487485005374_3283.png" alt=""></p>
<p>2）手动启动查询日志<code>ON</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set global general_log = ON;</div></pre></td></tr></table></figure>
<p>3）查看日志文件位置：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/73309992-file_1487485312775_16e30.png" alt=""></p>
<p>4）查看日志文件：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/14055636-file_1487485396146_1862e.png" alt=""></p>
<h3 id="4-二进制日志"><a href="#4-二进制日志" class="headerlink" title="4. 二进制日志"></a>4. 二进制日志</h3><p>二进制日志(binary log)记录了对MYSQL数据库执行更改的所有操作，但不包括<code>SELECT</code>和<code>SHOW</code>这类操作，因为这类操作对数据库本身并没有修改。二进制文件有以下几个作用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">恢复(recovery)：某些数据的恢复需要二进制日志，例如，在一个数据库全备文件恢复后，用户可以通过二进制日志进行point-in-time恢复。</div><div class="line"></div><div class="line">复制(replication)：其原理与恢复类似，通过复制和执行二进制日志使一台远程的MYSQL数据库(slave)与一台MYSQL数据库(master)进行实时同步。</div><div class="line"></div><div class="line">审计(aduit)：用户可以通过二进制日志中的信息来进行审计，判断是否有对数据库进行注入攻击。</div></pre></td></tr></table></figure>
<p>1) 启动二进制文件</p>
<p>MYSQL二进制日志由配置文件my.cnf的<code>log_bin</code>选项负责启用的:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/20551906-file_1487487869672_1052.png" alt=""></p>
<p>2) 二进制文件位置<br><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/70390816-file_1487487919637_78fc.png" alt=""></p>
<p>这里的<code>mysql-bin.000001</code>即为二进制文件，我们在配置文件中指定了名字，所以没有用默认的文件名。<code>mysql-bin.indx</code>为二进制的索引文件，用来存储过往产生的二进制日志序号。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.MySQL技术内幕 – InnoDB存储引擎</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL存储引擎间的比较]]></title>
      <url>http://jianwl.com/2017/02/17/MYSQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>存储引擎是MYSQL体系结构的核心，本节我们通过比较存储引擎加深对其的了解。</p>
<h3 id="存储引擎对比"><a href="#存储引擎对比" class="headerlink" title="存储引擎对比"></a>存储引擎对比</h3><table>
<thead>
<tr>
<th style="text-align:center">Feature</th>
<th style="text-align:center">MyISAM</th>
<th style="text-align:center">BDB</th>
<th style="text-align:center">Memory</th>
<th style="text-align:center">InnoDB</th>
<th style="text-align:center">Archive</th>
<th style="text-align:center">NDB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Storage Limits</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">64TB</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">Transactions</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Locking granularity</td>
<td style="text-align:center">Table</td>
<td style="text-align:center">Page</td>
<td style="text-align:center">Table</td>
<td style="text-align:center">Row</td>
<td style="text-align:center">Row</td>
<td style="text-align:center">Row</td>
</tr>
<tr>
<td style="text-align:center">MVCC/Snapshot Read</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Geospatial support</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">B-Tree indexes</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Hash indexes</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Full text search index</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Clustered index</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Data Caches</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Index Caches</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Compressed data</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Encrypted data</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Storage cost</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">High</td>
<td style="text-align:center">Very Low</td>
<td style="text-align:center">Low</td>
</tr>
<tr>
<td style="text-align:center">Memory cost</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Medium</td>
<td style="text-align:center">High</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">High</td>
</tr>
<tr>
<td style="text-align:center">Bulk Insert Speed</td>
<td style="text-align:center">High</td>
<td style="text-align:center">High</td>
<td style="text-align:center">High</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Very High</td>
<td style="text-align:center">High</td>
</tr>
<tr>
<td style="text-align:center">Cluster database support</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Replication support</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Foreign key support</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Backup/Point-in-time recovery</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Query cache support</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Update Statistics for Data Dictionary</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
</tbody>
</table>
<h4 id="1-InnoDB-存储引擎"><a href="#1-InnoDB-存储引擎" class="headerlink" title="1. InnoDB 存储引擎"></a>1. InnoDB 存储引擎</h4><p>InnoDB存储引擎支持事务，其特点是行锁设计、支持外键，InnoDB通过多版本并发控制(MVCC)来获得高并发性，并且实现了SQL标准的4中隔离级别，默认为Repeatable级别，同时使用一种被称为<code>next-key locking</code>的策略来避免幻读。InnoDB存储引擎采用了聚集的方式，因此每张表的存储都是按主键的顺序进行存放。</p>
<h4 id="2-MyISAM-存储引擎"><a href="#2-MyISAM-存储引擎" class="headerlink" title="2. MyISAM 存储引擎"></a>2. MyISAM 存储引擎</h4><p>MyISAM存储引擎不支持事务、表锁设计、支持全文索引，此外<strong>它的缓冲池只缓存索引文件，而不缓冲数据文件，这点和大多数的数据都非常不同。</strong></p>
<h4 id="3-NDB-存储引擎"><a href="#3-NDB-存储引擎" class="headerlink" title="3. NDB 存储引擎"></a>3. NDB 存储引擎</h4><p>NDB存储引擎是一个集群存储引擎，其特点是数据全部放在内存中(从MYSQL5.1版本开始可以将非索引数据放在磁盘上)，因此主键查找的数据极快，并且添加NDB数据存储节点可以线性提高数据性能。还有一点，<strong>NDB存储引擎的连接操作是在MYSQL数据库层完成的，而不是在存储引擎层完成的，解决了连接操作巨大的网络开销。</strong></p>
<h4 id="4-Memory-存储引擎"><a href="#4-Memory-存储引擎" class="headerlink" title="4. Memory 存储引擎"></a>4. Memory 存储引擎</h4><p>Memory存储引擎将表中的数据存放在内存中，如果数据库重启或者发生奔溃，表中的数据都将消失，Memory存储引擎默认使用哈希索引，而不是我们熟悉的B+树索引。</p>
<h4 id="5-Archive-存储引擎"><a href="#5-Archive-存储引擎" class="headerlink" title="5. Archive 存储引擎"></a>5. Archive 存储引擎</h4><p>Archive存储引擎只支持INSERT和SELECT操作，从MYSQL5.1开始支持索引，其使用<code>zlib</code>算法将数据行(Row)进行压缩后存储，压缩比一般可达1:10。</p>
<h4 id="6-Federated-存储引擎"><a href="#6-Federated-存储引擎" class="headerlink" title="6. Federated 存储引擎"></a>6. Federated 存储引擎</h4><p>Federated存储引擎表并不存放数据，它只是指向一台远程MYSQL数据库服务器上的表。</p>
<h4 id="7-Maria-存储引擎"><a href="#7-Maria-存储引擎" class="headerlink" title="7. Maria 存储引擎"></a>7. Maria 存储引擎</h4><p>Maria存储引擎是新开发的引擎，其特点是支持缓存数据和索引文件，应用行锁设计，提供MVCC功能，支持事务和非事务，以及更好的BLOB字符类型的处理性能。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>MySQL技术内幕</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL体系结构]]></title>
      <url>http://jianwl.com/2017/02/16/MYSQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接触MYSQL多年，却对MYSQL体系结构知之甚少，这一节主要学习这方面的知识点。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="1-定义数据库和实例"><a href="#1-定义数据库和实例" class="headerlink" title="1. 定义数据库和实例"></a>1. 定义数据库和实例</h4><ul>
<li>数据库：物理操作系统文件或其他文件类型的集合</li>
<li>数据库实例：MYSQL数据库由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。数据库实例才是真正用于操作数据库文件的。</li>
</ul>
<p>这两个词很容易混淆，要特别注意。MYSQL数据库实例在系统上的表现是一个进程，其被设计为一个单进程多线程架构的数据库。</p>
<p>Mac系统下启动MYSQL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql/support-files</div><div class="line">sudo ./mysql.server start</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-16/49796817-file_1487258098966_6c52.png" alt=""></p>
<p>进程号为929就是MYSQL实例，启动实例时，MYSQL数据库会去读取配置文件，根据配置文件的参数来启动数据库实例。读取的顺序为<code>/etc/my.cnf</code> -&gt; <code>/etc/mysql/my.cnf</code> -&gt; <code>/usr/local/mysql/etc/my.cnf</code> -&gt; <code>~/.my.cnf</code>,如果几个配置文件都有同一个参数，MYSQL会以最后一个配置文件的参数为准。</p>
<h4 id="2-MYSQL体系结构"><a href="#2-MYSQL体系结构" class="headerlink" title="2. MYSQL体系结构"></a>2. MYSQL体系结构</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-16/56429664-file_1487259812820_9ded.png" alt="图1-1 MYSQL体系结构"></p>
<p>由图1-1可知，MYSQL由以下几部分组成：</p>
<p>连接池组件、管理组件和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲组件、插件式存储引擎、物理文件</p>
<p>特别注意，存储引擎是基于表的，而不是数据库。</p>
<h4 id="3-连接MYSQL"><a href="#3-连接MYSQL" class="headerlink" title="3. 连接MYSQL"></a>3. 连接MYSQL</h4><p>连接MYSQL操作是一个连接进程和MySQL数据库实例进行通信。常用的进程通信方式有管道、命名管道、TCP/IP套接字、UNIX域套接字。</p>
<p><strong>1）TCP/IP方式</strong></p>
<p>客户端在一台服务器上，MYSQL实例在另外一台服务器上，这两台机器通过TCP/IP网络连接。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-17/32797080-file_1487261300938_33f5.png" alt=""></p>
<p><strong>2）UNIX域套接字方式</strong></p>
<p>UNIX域套接字其实不是一个网络协议，所以<strong>只能在MYSQL客户端和数据库实例在一台服务器上</strong>的情况下使用。用户可以通过下列命令进行UNIX域套接字文件的查找:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-17/32760164-file_1487261521375_d445.png" alt=""></p>
<p>在知道了UNIX域套接字文件的路径后，就可以通过该方式进行连接了：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-17/52720077-file_1487261638596_2970.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、MySQL技术内幕 - InnoDB存储引擎</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL性能查看常用命令]]></title>
      <url>http://jianwl.com/2017/02/14/MySQL%E6%80%A7%E8%83%BD%E6%9F%A5%E7%9C%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1、-场景：显示哪些线程正在运行"><a href="#1、-场景：显示哪些线程正在运行" class="headerlink" title="1、 场景：显示哪些线程正在运行"></a>1、 场景：显示哪些线程正在运行</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/84951625-file_1487082323314_593c.png" alt=""></p>
<h4 id="2、场景：显示SQL的执行计划"><a href="#2、场景：显示SQL的执行计划" class="headerlink" title="2、场景：显示SQL的执行计划"></a>2、场景：显示SQL的执行计划</h4><p>表结构：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/38715377-file_1487082561514_1082c.png" alt="表结构"></p>
<p>执行计划：</p>
<p>有索引：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/98390318-file_1487082868500_135a2.png" alt=""></p>
<p>全表遍历(全表共829条记录)：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/83614830-file_1487082737342_17766.png" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://dev.mysql.com/doc/refman/5.7/en/explain.html" target="_blank" rel="external">MYSQL官方文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL最佳实践]]></title>
      <url>http://jianwl.com/2017/02/11/MySQL%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前一阵听了我司首席DBA分享关于MYSQL优化的实战经验，将要点总结出来，方便在后续MYSQL实战中使用。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1、表字段选型"><a href="#1、表字段选型" class="headerlink" title="1、表字段选型"></a>1、表字段选型</h4><p>1、原则：适用就好，越小越好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅ TINYINT(1 Byte) &lt; SMALLINT(2 Bytes) &lt; MEDIUMINT(4 Bytes) &lt; INT(8 Bytes) </div><div class="line">✅ FLOAT(4 B) 、 DOUBLE(8 B)</div><div class="line">✅ DECIMAL(M,D) 「M+2 B」</div><div class="line">✅ Char(n) 「n Bytes」、Varchar(n) 「n + 1 Bytes」</div></pre></td></tr></table></figure>
<p>2、避免使用NULL字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">✅ 很难进行查询优化</div><div class="line">✅ NULL列加索引，需要额外空间</div><div class="line">✅ 含NULL复合索引无效</div></pre></td></tr></table></figure>
<p>3、尽量不要使用TEXT/BLOB</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅ TEXT类型处理性能远低于VARCHAR</div><div class="line">✅ 强制生成硬盘临时表</div><div class="line">✅ 浪费更多空间</div><div class="line">✅ 如需使用则拆分到独立的表存放</div></pre></td></tr></table></figure>
<h4 id="表数据量预估"><a href="#表数据量预估" class="headerlink" title="表数据量预估"></a>表数据量预估</h4><p>1、单表数据量预估</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">✅ 纯INT单表 &lt; 2000W Rows</div><div class="line">✅ 含CHAR单表 &lt; 1000W Rows</div></pre></td></tr></table></figure>
<p>2、表字段少而精</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅ 单行不超过200Bytes</div><div class="line">✅ 单表不超过50个INT字段</div><div class="line">✅ 单表不超过20个CHAR(10)字段</div><div class="line">✅ 单表字段数上限控制在50个以内</div></pre></td></tr></table></figure>
<p>3、合理分表「不超载」</p>
<h4 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h4><p>1、平衡是门艺术</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">✅ 严格遵循三大范式？</div><div class="line">✅ 效率优先，提升性能</div><div class="line">✅ 没有绝对的对与错</div><div class="line">✅ 适当牺牲范式，加入冗余</div><div class="line">✅ 会增加代码复杂度</div></pre></td></tr></table></figure>
<h4 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a>InnoDB索引</h4><p>1、结构</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-11/33686351-file_1486799408569_10b41.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">✅ 排好序</div><div class="line">✅ InnoDB主索引 = 数据文件</div><div class="line">✅ 叶子节点包含完整的数据记录(聚集索引)</div><div class="line">✅ 关键字可能分布在多个节点</div><div class="line">✅ 叶节点间双向链表</div></pre></td></tr></table></figure>
<p>2、InnoDB索引适合查询场景</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; 等值匹配（=、in、or）</div><div class="line">✅ SELECT * FROM point_score WHERE NAME=?</div><div class="line"></div><div class="line">&gt; 范围查询30% (&gt;、&lt;、between)</div><div class="line">✅ SELECT * FROM point_score WHERE score &gt; ? and score &lt; ?</div></pre></td></tr></table></figure>
<p>3、InnoDB索引不适合的场景</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; 非等值查询 (!=、not in)</div><div class="line">❌ SELECT * FROM point_score WHERE NAME!=?</div><div class="line"></div><div class="line">&gt; 模糊查询（%**%）</div><div class="line">❌ SELECT * FROM point_score WHERE NAME like ‘%aa%’</div><div class="line"></div><div class="line">&gt; 运算查询</div><div class="line">❌ SELECT * FROM point_score WHERE date_index + 30 &gt;= now()</div><div class="line"></div><div class="line">&gt; 方法查询</div><div class="line">❌ SELECT * FROM point_score WHERE abs(now - date_index) &lt;= 30</div></pre></td></tr></table></figure>
<h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><p>1、最左前缀原理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">假设table有col1~col5五列，已创建组合索引idx_1(col1、col2、col3)</div><div class="line"></div><div class="line">✅ Select * from table where col1=?</div><div class="line">✅ Select * from table where col1=? And col2=?</div><div class="line">✅ Select * from table where col1=? And col2=? And col3=?</div><div class="line">❌ Select * from table where col2=?</div><div class="line">❌ Select * from table where col3=?</div><div class="line">❌ Select * from table where col2=? And col3=?</div></pre></td></tr></table></figure>
<p>2、联合索引匹配传递原则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">第1等级：&quot;=&quot;，可向后传递</div><div class="line">第2等级：&quot;IN&quot;，如果后面是“=”或“IN”则可传递</div><div class="line">第3等级：“&lt;”，&quot;&gt;&quot; ,&quot;GROUP BY&quot;, &quot;ORDER BY&quot;, &quot;LIKE&quot;不会向后传递</div></pre></td></tr></table></figure>
<p>3、练习</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">1、假设table已建索引idx_1 (col1,col3,col4)，分析下面的sql有如下的操作符号‘=’、‘&gt;’ 、‘&lt;’、‘IN’、‘GROUP BY’、‘ORDER BY’ 、‘LIKE’ 会用到 col4 这列嘛？</div><div class="line"></div><div class="line">SELECT * FROM table WHERE col1=? AND col2&gt;? AND col2&lt;? AND col3 IN(?) AND col4 LIKE ? GROUP BY col5 LIMIT ?</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">答案: 会，SQL会自动选择查询条件的最佳顺序即执行时实际为：</div><div class="line"></div><div class="line">SELECT * FROM table WHERE col1=? AND col3 IN(?) AND col4 LIKE ? AND col2&gt;? AND col2&lt;? GROUP BY col5 LIMIT ?</div><div class="line"></div><div class="line"></div><div class="line">2、假设某个表有一个复合索引 （c1,c2,c3,c4）</div><div class="line"></div><div class="line">WHERE c1=X AND c2=X AND c3&gt;X AND c4 = X</div><div class="line">WHERE c1=X AND c2=X AND c4 = X ORDER BY c3</div><div class="line">WHERE c1=X AND c2=X AND c4 = X GROUP BY c3</div><div class="line">WHERE c1=X AND c4=X GROUP BY c2,c3</div><div class="line"></div><div class="line">这四条语句分别怎么使用这个索引？</div><div class="line"></div><div class="line">如果需要设计两个最佳索引，你会怎么设计？</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、Schema总结</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">字段长度(大小)使用就好，越小越好</div><div class="line">预估表数据量</div><div class="line">控制表字段数</div><div class="line">避免使用NULL字段</div><div class="line">尽量不用TEXT/BLOB</div><div class="line">合理拆分数据表</div><div class="line">打破传统，适当冗余</div></pre></td></tr></table></figure>
<p>2、索引总结</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">等值查询最优</div><div class="line">范围查询也可</div><div class="line">禁用反向查找、运算查找、方法查找</div><div class="line">最左匹配</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git实战]]></title>
      <url>http://jianwl.com/2017/02/10/Git%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Source Tree</code>图形化界面用多了，在服务器操作时，Git命令行大部分都遗忘了。本节主要记录Git常用命令</p>
<h3 id="工作区、暂存区的概念"><a href="#工作区、暂存区的概念" class="headerlink" title="工作区、暂存区的概念"></a>工作区、暂存区的概念</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/50500847-file_1484059096086_3789.jpg" alt=""></p>
<p>把文件往GIT版本库里添加的时候是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<h3 id="GIT实战"><a href="#GIT实战" class="headerlink" title="GIT实战"></a>GIT实战</h3><p><code>场景1：添加文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/31507464-file_1484059818873_b118.png" alt=""></p>
<p><code>场景2：将暂存区的修改回退到工作区</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/9343551-file_1484060480734_811a.png" alt=""></p>
<p><code>场景3：放弃工作区中所有的修改</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/82204251-file_1484060562988_e215.png" alt=""></p>
<p><code>场景4：当前分支回退到某次提交(已提交到「远程分支」和「本地分支」均可实现回滚)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/60922523-file_1484062431722_f5f1.png" alt=""></p>
<p><code>场景5：查看提交日志信息</code></p>
<p><strong>方式1</strong></p>
<p><code>git log --pretty=oneline</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/31517947-file_1484063163364_a911.png" alt=""></p>
<p><strong>方式2</strong></p>
<p><code>git log --graph</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/49133052-file_1484063099366_109d7.png" alt=""></p>
<p><code>场景6：显示、创建、切换分支</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-10/70304771-file_1484063405708_bf84.png" alt=""></p>
<p><code>场景7: 暂存区删除文件但工作区内容不变，命令常用于项目后期添加.gitignore文件，需要在暂存区先删除不需要的文件，再重新添加到git分支，忽略才能生效</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-10/45154025-file_1486707415977_16269.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="external">廖雪峰Git教程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RabbitMQ的基本概念和模型]]></title>
      <url>http://jianwl.com/2017/02/08/RabbitMQ%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有个场景：平台每日订单量超过百万，需要实时获取订单状态，最初的方案是通过HTTP方式，实时获取每个订单状态。通过HTTP方式获取订单状态，发现大量通知会丢失。经过调研了解，使用中间件RabbitMQ可以完美解决目前出现的问题。这节主要来学习RabbitMQ的基本概念和模型。</p>
<h3 id="RabbitMQ是什么？"><a href="#RabbitMQ是什么？" class="headerlink" title="RabbitMQ是什么？"></a>RabbitMQ是什么？</h3><p>RabbitMQ是一种消息队列，用于程序间的通信。形象地说，MQ就想一个邮局，发送者将消息写入MQ，MQ负责把消息发送给接收者。RabbitMQ可支持Java、PHP、Python、Go、JavaScript、Ruby等多种语言。</p>
<h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-8/87560623-file_1486568151391_82c0.png" alt="图1 rabbit_model"></p>
<p>RabbitMQ的基本模型如图1所示，先介绍一些术语：</p>
<p><strong>生产者（producer）</strong></p>
<p>在图中为P，表示消息的发送者。</p>
<p><strong>交换机（exchanges）</strong></p>
<p>在图中为X，生产者发过来的消息需要经过交换机，交换机将决定消息放到哪些队列当中。</p>
<p><strong>队列（queue）</strong></p>
<p>队列在图1中由红色矩阵阵列表示，负责保存消息和发放消息。</p>
<p><strong>消费者（consumer）</strong></p>
<p>在图中为C，代表等待接收消息的程序。</p>
<h3 id="信息流"><a href="#信息流" class="headerlink" title="信息流"></a>信息流</h3><p>消息是怎么从生产者传递到消费者的呢？<br>首先，生产者发送消息到交换机，同时发送一个key，通过这个key，交换机就知道把消息发送到哪个队列。随后交换机把消息发送到相应的队列中，由队列将消息发送给消费者。消费者监听某些队列，当有消息过来时，就立即处理消息。</p>
<p>那么接下来就有两个问题：</p>
<p>1）、交换机是如何根据key来分配消息到队列？<br>2）、队列怎样将消息发送给消费者？</p>
<h3 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h3><p>这部分将回答第一个问题，交换机如何根据key来分配消息到队列？<br>RabbitMQ的交换机有四种类型：direct、topic、headers、fanout</p>
<p><strong>Fanout</strong></p>
<p>fanout交换机就跟广播一样，对消息不作选择地发给所有绑定的队列。以图1为例，两个队列都将收到消息。</p>
<p><strong>Direct</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-9/64687545-file_1486607052126_b755.png" alt="图2 direct"></p>
<p>在direct模式里，交换机和队列之间绑定了一个key，只有消息的key与绑定的key相同时，交换机才会把消息发给该队列。如图2所示，消息的key为orange时，消息将进入队列Q1，key为black或green时，消息将进入队列Q2.若消息的key是其他字符串，被交换机直接遗弃。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-9/96740032-file_1486607059259_25b2.png" alt="图3 多重绑定"></p>
<p>同时，交换机支持多重绑定，多个队列可以以相同的key与交换机绑定。如图3所示，当消息的key为black时，消息将进入Q1和Q2.</p>
<p><strong>Topic</strong></p>
<p>topic模式可以理解为主题模式，当key包含某个主题时，即可进入该主题的队列，topic模式的key必须具有固定的格式：以「.」作为间隔的一串单词比如「quick.orange.rabbit」,key最多不能超过255byte。交换机和队列的key可以以类似正则表达式的方式存在，有两种语法：</p>
<p>1、「*」可以替代一个单词<br>2、「#」可以替代0个或多个单词</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-9/45749176-file_1486607063361_10969.png" alt="图4 topic"><br>举个例子：图中Q1和交换机绑定的key为「<em>.orange.</em>」，故当消息的key为3个单词，且中间的单词为orange时，消息将进入Q1。Q2与exchange绑定的key为「rabbit.#」，当消息的key为rabbit开头时，消息将进入Q2.</p>
<p><strong>Headers</strong><br>官网没介绍这个模式，大概不常用。</p>
<p><strong>队列分发消息的方式</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-9/30963342-file_1486607954707_232f.png" alt="图5 Round-robin dispatching"></p>
<p><strong>循环发放（Round-robin dispatching）</strong></p>
<p>队列分发消息给消费者的方式采用循环分发，举例来说，若队列里有四个消息w,x,y,z,则C1将得到消息z和x，C2将得到消息y和w。即每个消费者按顺序每人发一个消息。注意，在这种分配方式下，消息其实在刚进入队列的时候就已经内定好将要被分发的消费者。即z,x一定给C1，y,w一定给C2。这种方式存在一些隐患，如果z和x都是耗时的命令，y,z都是简单的命令，C1将不停地工作，而C2就比较空闲，造成资源的浪费。公平发放解决了上述问题。</p>
<p><strong>公平发放(fair dispatching)</strong></p>
<p>这种方式下，队列只会把消息给空闲的消费者，如果他看到某个消费者正忙，就查找下一个空闲的消费者。</p>
<p><strong>消息的确认（Message acknowledgment）</strong></p>
<p>若没有特别设定，消息一旦被队列分发给消费者，就被rabbitmq从内存中删除。在这种情况下，如果将一个正在处理消息的消费者强行关闭，那么，消息将未被完全处理，且RabbitMQ完全不知情。</p>
<p>为了解决上述问题，可以配置使得消息处理完后，向RabbitMQ返回一个acknowledgment。RabbitMQ直到收到acknowledgment，才将消息删除。当消费者死亡时（its channel is closed,connection is closed or TCP connection is lost）,RabbitMQ会知道这个消费者发生问题了，将重新发送消息给空闲的消费者。消息没有timeout，即使消费者处理很长很长时间，RabbitMQ也认为消费者正在处理。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html" target="_blank" rel="external">RabbitMQ Tutorials</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之建造者模式「Builder Pattern」]]></title>
      <url>http://jianwl.com/2017/02/04/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%E3%80%8CBuilder-Pattern%E3%80%8D/</url>
      <content type="html"><![CDATA[<h3 id="何为建造者模式？"><a href="#何为建造者模式？" class="headerlink" title="何为建造者模式？"></a>何为建造者模式？</h3><p>一步步创建一个包含多个组成部件的完整对象，使用相同的构建过程构建不同的产品，建造者模式是一种对象创建型模式。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>用于复杂对象的组装和创建、对象间具有较多的共同点或组成部分相似；</li>
<li>生成对象的属性相互依赖,需要指定其生成顺序；</li>
<li>对象的创建过程独立于创建该对象的类，隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的对象。</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public final class User &#123;</div><div class="line">    private final String username;</div><div class="line">    private final String addresss;</div><div class="line">    private final Integer age;</div><div class="line">    private final String whereFrom;</div><div class="line"></div><div class="line">    public User(Builder builder)&#123;</div><div class="line">        this.username = builder.username;</div><div class="line">        this.addresss = builder.addresss;</div><div class="line">        this.age = builder.age;</div><div class="line">        this.whereFrom = builder.whereFrom;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUsername() &#123;</div><div class="line">        return username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getAddresss() &#123;</div><div class="line">        return addresss;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getAge() &#123;</div><div class="line">        return age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getWhereFrom() &#123;</div><div class="line">        return whereFrom;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;User&#123;&quot; +</div><div class="line">                &quot;username=&apos;&quot; + username + &apos;\&apos;&apos; +</div><div class="line">                &quot;, addresss=&apos;&quot; + addresss + &apos;\&apos;&apos; +</div><div class="line">                &quot;, age=&quot; + age +</div><div class="line">                &quot;, whereFrom=&apos;&quot; + whereFrom + &apos;\&apos;&apos; +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class Builder&#123;</div><div class="line">        private   String username;</div><div class="line">        private   String addresss;</div><div class="line">        private   Integer age;</div><div class="line">        private   String whereFrom;</div><div class="line"></div><div class="line">        public Builder(String username,Integer age)&#123;</div><div class="line">            this.username = username;</div><div class="line">            this.age =age;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder withAddress(String address)&#123;</div><div class="line">            this.addresss = address;</div><div class="line">            return this ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        public Builder withWhereFrom(String whereFrom)&#123;</div><div class="line">            this.whereFrom = whereFrom;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public User builder()&#123;</div><div class="line">            return new User(this);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        System.out.println(new User.Builder(&quot;张三&quot;,12).withAddress(&quot;上海&quot;).withWhereFrom(&quot;中国&quot;).builder());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结]]></title>
      <url>http://jianwl.com/2017/02/04/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="2016年，我做了什么？"><a href="#2016年，我做了什么？" class="headerlink" title="2016年，我做了什么？"></a>2016年，我做了什么？</h3><h4 id="1、搭建个人站，至今写了150多篇文章"><a href="#1、搭建个人站，至今写了150多篇文章" class="headerlink" title="1、搭建个人站，至今写了150多篇文章"></a>1、搭建个人站，至今写了150多篇文章</h4><p>去年4月份，有跳槽的想法，便开始准备面试相关的知识储备，搭建个人站，用于记录所学过程中的心得体会。一来，将所学的知识，通过文字的方式记录下来，有了输出，对学习的积极性有一定的提高；二来，想通过个人站记录成长的过程，这样当一年过去了，可以很清晰的知道，这一年我到底做了什么？最后，想通过个人站激励自己，不断学习。</p>
<h4 id="2、看了20多本技术书"><a href="#2、看了20多本技术书" class="headerlink" title="2、看了20多本技术书"></a>2、看了20多本技术书</h4><p>去年，跳槽了2次，每次跳槽在面试前，都做足了准备；针对相关技术，购买经典书籍，查缺补漏；同时根据面试的反馈，不断弥补自身的不足；</p>
<h4 id="3、读了6本投资理财📚"><a href="#3、读了6本投资理财📚" class="headerlink" title="3、读了6本投资理财📚"></a>3、读了6本投资理财📚</h4><p>人民币不断贬值，每年CPI上涨2%左右。学习投资理财的相关知识，是今后的一大重点；去年，开始尝试玩股票，炒短线，最后亏损离场。体验下来，现阶段的我不适合炒股，过于花时间且考验人性。今年会涉足基金，考虑长期投资，并学习相关基金知识。</p>
<h4 id="4、独立1人，负责整个项目"><a href="#4、独立1人，负责整个项目" class="headerlink" title="4、独立1人，负责整个项目"></a>4、独立1人，负责整个项目</h4><p>早先的项目，或多或少都是多个同事一起参与完成的(一个架构师、2个工程师「加上我」)，今年跳槽到另一家公司B，开始一个人hold住整个项目，刚开始是有所畏惧的，接手下来，一路过关斩将，技术上感觉成长了许多。</p>
<h4 id="5、个人项目"><a href="#5、个人项目" class="headerlink" title="5、个人项目"></a>5、个人项目</h4><p>去年开始做些个人项目，接触到了许多在平时工作中接触不到东西，个人项目对于技术的提升是一大助力。同时，可以为今后的求职，增加很大的筹码；</p>
<h3 id="2016年的几点思考"><a href="#2016年的几点思考" class="headerlink" title="2016年的几点思考"></a>2016年的几点思考</h3><h4 id="1、工程师不止眼前的逻辑和代码，还有底层的框架和架构"><a href="#1、工程师不止眼前的逻辑和代码，还有底层的框架和架构" class="headerlink" title="1、工程师不止眼前的逻辑和代码，还有底层的框架和架构"></a>1、工程师不止眼前的逻辑和代码，还有底层的框架和架构</h4><p>工作中，我经常忙于业务代码逻辑，并囤于业务之中，忘记了开发的初衷，关注于当前框架的易用性、可扩展性，当前使用框架的优劣，并思考未来项目中自己如何去搭建架构、去设计。</p>
<h4 id="2、金字塔目标计划落实"><a href="#2、金字塔目标计划落实" class="headerlink" title="2、金字塔目标计划落实"></a>2、金字塔目标计划落实</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-4/4368253-file_1486199535149_1531e.jpg" alt=""></p>
<p>在制定计划时发现，上面的金字塔计划模型，对我来说很管用，主要体现在：</p>
<p>1、能清楚明了的看到目标内容和时间节点</p>
<p>2、能督促我以时间节点为目标，考核自己计划任务的落实、阶段目标的完成。</p>
<p>如果不写出来，很容易忘记我当初设定的目标和方向。如果不写出来，很容易到「终极目标节点」时，连「近期目标」的内容都没有完成。</p>
<h4 id="3、人生中有很多比刷「朋友圈」、关注「今日头条」更重要的事情"><a href="#3、人生中有很多比刷「朋友圈」、关注「今日头条」更重要的事情" class="headerlink" title="3、人生中有很多比刷「朋友圈」、关注「今日头条」更重要的事情"></a>3、人生中有很多比刷「朋友圈」、关注「今日头条」更重要的事情</h4><p>「朋友圈」的优势是以时间轴的形式，记录生活的点滴。但是，我们手里的它已然叛离了初衷。「朋友圈」里充斥着各种伪奢靡的浪漫，「朋友圈」的东西渐成为给别人看的东西，这和生活的真相是完全背道而驰的。</p>
<p>「今日头条」的推荐功能也是投我们兴趣所好，延绵不断的推送各种浏览量相关度高的新闻、消息。在海量的信息轰炸中，多的是撅头，少的是诚意，有的是速度，缺的是思考深度。严重消磨了心智，使得我们变得人云亦云，缺乏独立思考。</p>
<p>今年开始会有意识的减少刷朋友圈的频率，现在是重度患者，有瘾需要逐步戒除。</p>
<h4 id="4、花钱能搞定的事情，不要浪费其他资源"><a href="#4、花钱能搞定的事情，不要浪费其他资源" class="headerlink" title="4、花钱能搞定的事情，不要浪费其他资源"></a>4、花钱能搞定的事情，不要浪费其他资源</h4><p>有时候会遇到问题需要麻烦朋友，但深入思考会发现「能自己花钱搞定的事情，不要浪费其他资源」，这里的其他资源包括麻烦朋友</p>
<h4 id="5、专精一门技术"><a href="#5、专精一门技术" class="headerlink" title="5、专精一门技术"></a>5、专精一门技术</h4><p>缺乏持续深入钻研和学习一门技术的毅力，往往是有所小成，就停滞不前了。这是非常可怕的事情，设定计划，一步一个脚印，不断修炼基本功。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>思路越发清晰，前行的步伐也就越发稳健，<strong>向着光亮那方，奔跑前进。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[何为自我意识？]]></title>
      <url>http://jianwl.com/2017/01/27/%E4%BD%95%E4%B8%BA%E8%87%AA%E6%88%91%E6%84%8F%E8%AF%86%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>2016本命年是一个波折的一年，发生了很多事，大部分事情，我都没法搞定。我开始意识到，我对自己的认识是那么浅薄，我根本就不了解自己。当我在笑的时候，我无法意识到自己在笑，当我开心的时候，我无法享受着我笑的那一刻。我发现大多数情况下，我都处于无意识或半意识下，靠条件反射去应付生活中的所有事情。换言之，控制自己的行为和思考的，仅仅只是本能而已。这是一个让人很后怕的事情，为了让自己尽快地摆脱现状，我想我需要尽快的去了解它。</p>
<p>何为自我意识？就是意识到“自我”的存在。</p>
<p>一个优秀的人，你所看到的他的优秀只是他的外部而已，你所看不到的是他内在的高度自律和思想的完整秩序。就如同一棵参天大树，你感叹它的奇伟挺拔，你却不知道这棵树的根基扎得有多深多广。当你尝试跟他交流的时候，你才发现，他的知识广博远超乎你的想象，他的见解深刻到你膜拜不已。你会觉得，究竟是怎么的大脑，经过怎样的训练，才能有如此的见识与智慧。</p>
<p>感受力高的人拥有更多的自我意识，也就是–他能突然意识到自己的心理变化过程，从而意识到问题的存在。感受力低的人往往意识不到问题所在，我的意思是说：根本！意识不到！问题所在！</p>
<p>举个例子：坚持</p>
<p>情商高的人更懂坚持,然后呢？你只看到他无比厉害的外表 – 然后他怎么坚持下去的?当你实在找不到原因的时候，只能把原因归功于“他情商高”。</p>
<p>问题的关键在于：<strong>情商高的人他能注意到坚持过程中自己的负面情绪，从而及时处理这些问题，但是情商低的人他不会注意到这也是一个问题–我，正在讨厌这件事，这是一个不好的信号，所以，他需要被解决。</strong>你有没有意识到你的情绪，有没有注意到自己的一些想法。</p>
<p>在举个例子：自我为中心</p>
<p>写作中如何加粗是一个学问：因为你认为你能了解到的东西，人家不一定能有耐心–意识到其中的“自我中心”也是一个问题。一个人会突然意识到，我看到的，感觉到的，和别人是不同的！如何加粗，如何排版，如何使阅读体验最大化，是一个需要被注意到的问题。</p>
<p><strong>这个世界究竟是怎么样的，不是你头脑认为如何就是如何的。那些厉害的人，一定是发现了什么不可告人的认知世界的方式</strong></p>
<blockquote>
<p>人是思想的产物，心里想的是什么，就会变成什么样的人。 –甘地</p>
</blockquote>
<p>既然自我意识那么重要，那我该如何改变现状，让自我意识为我所用？我调研了下，具体有几个关键性概念。</p>
<p><strong>1、自我监视</strong></p>
<p>自我监视和反思不同点在于：自我监视更强调集中观察 – 在做事情的时候就意识到，属于及时反馈。反思是经过一段时间后的整体感知，例如写日记往往在意的是今天影响最深的东西，而无法注意到最细微的当时感受。</p>
<p>自我监视常常容易被事后遗忘，建立一套及时信息记录系统非常有必要。高三时，有位学霸有个习惯非常值得深思：每次考完月考考试时，他就会把一些想法记下来 – 因为他知道当把月考试卷发回到手里的时候，很多感觉就不见了。这些感觉不限于针对知识点，还有心态调节，各种方面。</p>
<p><strong>2、可视化</strong></p>
<p>关注自己的内心是一种非常抽象的探索，有时候这种感觉只是一道闪光就不见了。<strong>只有很少一部分最懂得关注自我的人能把这些体验用图像呈现在脑海中，这就是体验的可视化。</strong></p>
<p><strong>3、悦纳与接受</strong></p>
<p>人天生就有一种让自己只看到想看到的东西的本领，<strong>选择性过滤也许是自我监视最大的敌人 – 我们时时刻刻被一些不重要的但困扰着我们的东西所干扰着，但是我们不想也不愿去正视它们。</strong>但是坦然接受一切，再重新审视什么在困扰着你的时候，你也许能够发现问题所在。</p>
<p><strong>4、刻意练习、实验</strong></p>
<p>当我们发现了内心的冲突的时候，心理问题也许仅仅采取接受的方法就能解决，但是<strong>有很多高阶的、更加复杂的问题则需要进行刻意练习。</strong> 其实可以练习理论根本上来自于对自我的关注，没有对自我的关注和反馈就永远不可能有提升。</p>
<p>刻意练习理论需要有<strong>最好的教练和最强大的意志力，很多时候我们只是不知道自己处于一种什么样的水平，我们需要什么样的训练，这才是刻意练习最难的地方。</strong></p>
<p>最后提一点：<strong>问题从来都是不一样的，解决问题时候内心的感受很多时候都是相同的，你模糊地感受到了同样的感觉，就能够指引你从别处找到方法。自我意识是一个成熟的理性人所拥有的最明显和本质的标志，而成长，必然是一个充满顿悟、反惯性、痛苦、枯燥但不乏趣味的自我意识过程。唯有一个意识到问题存在的人才能进步，这事通往成熟和自我完善的门，而自我意识就是这扇门的钥匙。问题，永远是自己思维的问题 – 你需要更多的自我意识，需要注意更多的问题。</strong> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015携程Java工程师面试题]]></title>
      <url>http://jianwl.com/2017/01/13/2015%E6%90%BA%E7%A8%8BJava%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近来被业务缠身，有一段时间没有学习新知识了，感觉诚惶诚恐。今天刷某社交软件时，碰到一个很经典的面试题。一开始我也还真做错了，说明这块基础不扎实，知识点虽懂了，不代表真正理解了。话不多说，让我们来看下<code>2015年携程的JAVA工程师面试题</code></p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class BasicDemo &#123;</div><div class="line">    private String str = &quot;base&quot;;</div><div class="line"></div><div class="line">    public BasicDemo() &#123;</div><div class="line">        callName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void callName()&#123;</div><div class="line">        System.out.println(str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class SudDemo extends BasicDemo&#123;</div><div class="line">        private String str = &quot;sub&quot;;</div><div class="line"></div><div class="line">        public void callName()&#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        BasicDemo basicDemo = new SudDemo();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>求这段程序的输出值？</p>
<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-1-13/25754236-file_1484321521055_383f.png" alt=""></p>
<p>可以看到结果为「null」，但为什么呢？</p>
<blockquote>
<p>类的加载顺序：父类静态块 -&gt; 子类静态块 -&gt; 父类初始化语句 -&gt; 父类构造函器 -&gt; 子类初始化语句 -&gt; 子类构造器</p>
</blockquote>
<p><strong>程序运行顺序</strong></p>
<p>1、<code>new SudDemo</code>调用SudDemo构造器，因子类没有声明无参构造器，故调用父类的无参构造器。</p>
<p>2、父类无参构造器调用<code>callName</code>方法，因该方法在子类中被重构，故调用子类的<code>callName</code>方法，其输出的是子类中的<code>str</code>参数，因该参数未被初始化，故输出null。即其调用顺序是 : 主函数 -&gt; 初始化父类<code>str参数</code> -&gt; 父类构造器 -&gt; 子类重构的<code>callName</code>方法 -&gt; 初始化子类<code>str参数</code></p>
<h3 id="涉及的知识点"><a href="#涉及的知识点" class="headerlink" title="涉及的知识点"></a>涉及的知识点</h3><ol>
<li>类初始化的加载顺序、JVM类加载顺序（这部分知识点，还是挺模糊的，需要加强。）</li>
<li>继承（子类和父类有相同字段，父类字段会隐藏，而不是覆盖父类字段）</li>
<li>多态</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://maimai.cn/article/detail?fid=79085975" target="_blank" rel="external">2015年携程的JAVA工程师面试题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA8之Stream特性总结]]></title>
      <url>http://jianwl.com/2016/12/11/JAVA8%E4%B9%8BStream%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="常用方法梳理"><a href="#常用方法梳理" class="headerlink" title="常用方法梳理"></a>常用方法梳理</h3><table>
<thead>
<tr>
<th style="text-align:left">常用方法</th>
<th style="text-align:center">返回值</th>
<th style="text-align:center">类型/使用<code>Function Interface</code>接口</th>
<th style="text-align:center"><code>Function Interface</code>描述符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">filter</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">distinct</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">skip</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">limit</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">map</td>
<td style="text-align:center"><code>Stream&lt;R&gt;</code></td>
<td style="text-align:center"><code>Function&lt;T, R&gt;</code></td>
<td style="text-align:center"><code>T -&gt; R</code></td>
</tr>
<tr>
<td style="text-align:left">flatMap</td>
<td style="text-align:center"><code>Stream&lt;R&gt;</code></td>
<td style="text-align:center"><code>Function&lt;T,Stream&lt;R&gt;&gt;</code></td>
<td style="text-align:center"><code>T -&gt; Stream&lt;R&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">sorted</td>
<td style="text-align:center"><code>Stream&lt;T&gt;</code></td>
<td style="text-align:center"><code>Comparator&lt;T&gt;</code></td>
<td style="text-align:center"><code>(T,T) -&gt; int</code></td>
</tr>
<tr>
<td style="text-align:left">anyMatch</td>
<td style="text-align:center"><code>boolean</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">noteMatch</td>
<td style="text-align:center"><code>boolean</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">allMatch</td>
<td style="text-align:center"><code>boolean</code></td>
<td style="text-align:center"><code>Predicate&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; boolean</code></td>
</tr>
<tr>
<td style="text-align:left">findAny</td>
<td style="text-align:center"><code>Optional&lt;T&gt;</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">findFirst</td>
<td style="text-align:center"><code>Optional&lt;T&gt;</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">forEach</td>
<td style="text-align:center"><code>void</code></td>
<td style="text-align:center"><code>Consumer&lt;T&gt;</code></td>
<td style="text-align:center"><code>T -&gt; void</code></td>
</tr>
<tr>
<td style="text-align:left">collect</td>
<td style="text-align:center"><code>R</code></td>
<td style="text-align:center"><code>Collector&lt;T, A, R&gt;</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">reduce</td>
<td style="text-align:center"><code>Optional&lt;T&gt;</code></td>
<td style="text-align:center"><code>BinaryOperator&lt;T&gt;</code></td>
<td style="text-align:center"><code>(T, T) -&gt; T</code></td>
</tr>
<tr>
<td style="text-align:left">count</td>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">   public void test_004()&#123;</div><div class="line">       List&lt;Integer&gt; nums = Arrays.asList(1,1,1,2,2,2,2,2,3,4,5,6,7,8,9);</div><div class="line">       List&lt;List&lt;Integer&gt;&gt; numsList = Arrays.asList(Arrays.asList(1,2,3),Arrays.asList(4,5,6),Arrays.asList(7,8,9));</div><div class="line"></div><div class="line">       // filter</div><div class="line">       Stream&lt;Integer&gt; filter = nums.stream().filter(num -&gt; num &gt; 5);</div><div class="line">       System.out.println(&quot;filter =&gt; &quot; + JSON.toJSONString(filter.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // distinct</div><div class="line">       Stream&lt;Integer&gt; distinct = nums.stream().distinct();</div><div class="line">       System.out.println(&quot;distinct =&gt; &quot; + JSON.toJSONString(distinct.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // skip</div><div class="line">       Stream&lt;Integer&gt; skip = nums.stream().skip(5);</div><div class="line">       System.out.println(&quot;skip =&gt; &quot; + JSON.toJSONString(skip.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // limit</div><div class="line">       Stream&lt;Integer&gt; limit = nums.stream().limit(5);</div><div class="line">       System.out.println(&quot;limit =&gt; &quot; + JSON.toJSONString(limit.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // map</div><div class="line">       Stream&lt;Integer&gt; map = nums.stream().map(num -&gt; num * 2);</div><div class="line">       System.out.println(&quot;map =&gt; &quot; + JSON.toJSONString(map.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // flatMap</div><div class="line">       Stream&lt;Integer&gt; flatMap = numsList.stream().flatMap(ns -&gt; ns.stream());</div><div class="line">       System.out.println(&quot;flatMap =&gt; &quot; + JSON.toJSONString(flatMap.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // sorted</div><div class="line">       Stream&lt;Integer&gt; sorted = nums.stream().sorted((n1,n2) -&gt; n2.compareTo(n1));</div><div class="line">       System.out.println(&quot;sorted =&gt; &quot; + JSON.toJSONString(sorted.collect(Collectors.toList())));</div><div class="line"></div><div class="line">       // anyMatch</div><div class="line">       boolean anyMatch = nums.stream().anyMatch(num -&gt; num == 1);</div><div class="line">       System.out.println(&quot;anyMatch =&gt; &quot; + anyMatch);</div><div class="line"></div><div class="line">       // noneMatch</div><div class="line">       boolean noneMatch = nums.stream().noneMatch(num -&gt; num == 1);</div><div class="line">       System.out.println(&quot;noneMatch =&gt; &quot; + noneMatch);</div><div class="line"></div><div class="line">       // allMatch</div><div class="line">       boolean allMatch = nums.stream().allMatch(num -&gt; num &gt; 0);</div><div class="line">       System.out.println(&quot;allMatch =&gt; &quot; + allMatch);</div><div class="line"></div><div class="line">       // findAny</div><div class="line">       Optional&lt;Integer&gt; findAny = nums.stream().findAny();</div><div class="line">       System.out.println(&quot;findAny =&gt; &quot; + JSON.toJSONString(findAny));</div><div class="line"></div><div class="line">       // findAny</div><div class="line">       Optional&lt;Integer&gt; findFirst = nums.stream().findFirst();</div><div class="line">       System.out.println(&quot;findFirst =&gt; &quot; + JSON.toJSONString(findFirst));</div><div class="line"></div><div class="line">       // forEach</div><div class="line">       nums.stream().filter(num -&gt; num == 9).forEach(num -&gt; System.out.println(&quot;forEach =&gt; &quot; + num ++));</div><div class="line"></div><div class="line">       // collect</div><div class="line">       Map&lt;Integer,List&lt;Integer&gt;&gt; groupBy = nums.stream().collect(Collectors.groupingBy(num -&gt; num));</div><div class="line">       System.out.println(&quot;collect =&gt; &quot; + JSON.toJSONString(groupBy));</div><div class="line"></div><div class="line">       // reduce</div><div class="line">       Optional&lt;Integer&gt; reduce1 = nums.stream().reduce((n1,n2) -&gt; n1 + n2);</div><div class="line">       Integer reduce2 = nums.stream().reduce(0,(n1,n2) -&gt; n1 + n2);</div><div class="line">       System.out.println(&quot;reduce1 =&gt; &quot; + reduce1.get() + &quot; reduce2 =&gt; &quot; + reduce2);</div><div class="line"></div><div class="line">       // count</div><div class="line">       Long count = nums.stream().count();</div><div class="line">       System.out.println(&quot;count =&gt; &quot; + count);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-11/38986855-file_1481433637180_11981.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Java8 in action</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之FlatMap用法]]></title>
      <url>http://jianwl.com/2016/12/10/Java8%E4%B9%8BFlatMap%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="flatMap的作用"><a href="#flatMap的作用" class="headerlink" title="flatMap的作用"></a>flatMap的作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String[]&gt;   	  -&gt; flatMap  -&gt;   Stream&lt;String&gt;</div><div class="line">Stream&lt;Set&lt;String&gt;&gt;   -&gt; flatMap  -&gt;   Stream&lt;String&gt;</div><div class="line">Stream&lt;List&lt;String&gt;&gt;  -&gt; flatMap  -&gt;   Stream&lt;String&gt;</div><div class="line">Stream&lt;List&lt;Object&gt;&gt;  -&gt; flatMap  -&gt;   Stream&lt;Object&gt;</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>范例1</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@RunWith(JUnit4.class)</div><div class="line">public class StreamTest &#123;</div><div class="line">    public static class Tech&#123;</div><div class="line">        private String name;</div><div class="line">        private List&lt;String&gt; hobies;</div><div class="line"></div><div class="line">        public static Tech initTech()&#123;</div><div class="line">            Random random = new Random();</div><div class="line">            List&lt;String&gt; names = Arrays.asList(&quot;张三&quot;,&quot;李四&quot;,&quot;刘二麻子&quot;,&quot;李爱武&quot;);</div><div class="line">            List&lt;String&gt; hobies = Arrays.asList(&quot;溜溜球&quot;,&quot;集邮&quot;,&quot;羽毛球&quot;,&quot;足球&quot;);</div><div class="line">            Tech tech = new Tech();</div><div class="line">            tech.setName(names.get(random.nextInt(4)));</div><div class="line">            tech.setHobies(Arrays.asList(hobies.get(random.nextInt(3)),hobies.get(random.nextInt(3))));</div><div class="line">            return tech;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getName() &#123;</div><div class="line">            return name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setName(String name) &#123;</div><div class="line">            this.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public List&lt;String&gt; getHobies() &#123;</div><div class="line">            return hobies;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setHobies(List&lt;String&gt; hobies) &#123;</div><div class="line">            this.hobies = hobies;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_001()&#123;</div><div class="line">        List&lt;Tech&gt; techList = Arrays.asList(Tech.initTech(),Tech.initTech(),Tech.initTech(),Tech.initTech());</div><div class="line">        List&lt;String&gt; allHobies = techList.stream().map(tech -&gt; tech.getHobies()).flatMap(hobies -&gt; hobies.stream()).map(hoby -&gt; hoby.concat(&quot; - modify&quot;)).collect(Collectors.toList());</div><div class="line">        System.out.println(JSON.toJSONString(allHobies));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果1</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-10/90787855-file_1481380649544_134aa.png" alt=""></p>
<p><code>范例2</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_002()&#123;</div><div class="line">        List&lt;String&gt; strs = Arrays.asList(&quot;我,在,学&quot;,&quot;Java8,的&quot;,&quot;新,特,性&quot;);</div><div class="line">        List&lt;String[]&gt; strArray = strs.stream().map(str -&gt; str.split(&quot;,&quot;)).collect(Collectors.toList());</div><div class="line">        List&lt;String&gt; strList = strs.stream().map(str -&gt; str.split(&quot;,&quot;)).flatMap(Arrays::stream).collect(Collectors.toList());</div><div class="line"></div><div class="line">        System.out.println(&quot;strArray =&gt; &quot; + JSON.toJSONString(strArray));</div><div class="line">        System.out.println(&quot;strList =&gt; &quot; + JSON.toJSONString(strList));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-10/33004085-file_1481381376033_c47b.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java8中的Stream流可以处理通过<code>map</code>方法处理基本类型及(String)，但却无法对数组和列表进行操作，<code>flatMap</code>方法弥补了这一不足。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx入门篇]]></title>
      <url>http://jianwl.com/2016/11/17/Nginx%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h3><p><strong>Nginx是什么？</strong></p>
<p><code>Nginx</code>是一个高性能的<code>HTTP</code>和反向代理服务器，也是一个<code>IMAP/POP3/SMTP</code>代理服务器。</p>
<p>由于Nginx使用基于事件驱动的架构，能够并发处理百万级别的<code>TCP</code>连接，高度模块化的设计和自由的许可证使得其作为<code>Web</code>服务器被广泛应用到大流量的网站上，包含淘宝、腾讯、新浪、京东等访问量巨大的网站。</p>
<p><strong>反向代理是什么？</strong></p>
<p>反向代理是代理服务器的一种，它根据客户端的请求，从后端的服务器上（如<code>Web</code>服务器）获取资源，然后再讲这些资源返回给客户端。如图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/xx2.jpg" alt=""></p>
<p><strong>为什么选择Nginx</strong></p>
<ol>
<li><code>处理响应请求很快</code>：在正常的情况下，单次请求会得到更快的响应，在高峰期Nginx可以比其他的Web服务器更快的响应请求。</li>
<li><code>高并发连接</code>：Nginx支持的并发连接上限取决于你的内存，10万远未封顶。</li>
<li><code>低的内存消耗</code>：1万个非活跃的HTTP Keep-Alive连接在Nginx中仅消耗2.5MB的内存</li>
<li><code>很高的可靠性</code>：优秀的核心架构设计，且这些模块非常稳定</li>
<li><code>高扩展性</code>：Nginx的设计是由多个不同功能、不同层次、不同类型且耦合度极低的模块组成，具有极大的扩展性。</li>
<li><code>热部署</code>：master管理进程和worker工作进程的分离设计，使得Nginx具有热部署的功能，可以在7*24小时不间断服务的前提下，升级Nginx的可执行文件。</li>
<li><code>自由的BSD许可协议</code>：允许用于商业用途</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong><code>Mac</code>环境安装<code>Nginx</code></strong></p>
<ul>
<li><a href="http://brew.sh/" target="_blank" rel="external"><code>brew</code></a>安装<code>Nginx</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx</div></pre></td></tr></table></figure>
<ul>
<li>修改配置<code>/usr/local/etc/nginx/nginx.conf</code></li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-17/12669164.jpg" alt=""></p>
<ul>
<li>启动<code>Nginx</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<ul>
<li>访问<code>http://localhost</code></li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-17/73904106.jpg" alt=""></p>
<ul>
<li><code>Nginx</code>停止服务</li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-17/45565169.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86" target="_blank" rel="external">反向代理 - 维基百科</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim保存只读文件的修改内容]]></title>
      <url>http://jianwl.com/2016/11/13/Vim%E4%BF%9D%E5%AD%98%E5%8F%AA%E8%AF%BB%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>有时候使用<code>Vim</code>编辑文件时，辛辛苦苦写了一大堆东西，写完后输入<code>：wq</code>准备结束战斗时，却突然发现<code>Vim</code>报错了：</p>
<blockquote>
<p>E45: ‘readonly’ option is set (add ! to override)</p>
</blockquote>
<p>这种情况一般都是权限不够，文件只有读权限，没有写权限。</p>
<p><strong>解决办法</strong></p>
<p>这时可以在<code>Vim</code>使用一条特殊的命令解决问题：</p>
<blockquote>
<p>:w !sudo tee %</p>
</blockquote>
<p><strong>分析</strong></p>
<p>这条命令的作用是什么呢？</p>
<ol>
<li><code>:w</code>执行写操作，写的位置是哪里呢？这里调用了<code>sudo</code>命令，使得我们有<code>root</code>权限；</li>
<li>将文件写入到<code>tee</code>来处理，tee是什么？它复制标准输入到标准输出(例如文件)，tee的后缀参数为文件名。</li>
<li><code>%</code>在<code>Vim</code>中表示当前文件名</li>
</ol>
<p>将以上这些联系起来就明白了：我们将当前文件内容首先读入到<code>tee</code>，然后再利用<code>sudo</code>获取的<code>root</code>权限覆盖原文件保存。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.commandlinefu.com/commands/view/1204/save-a-file-you-edited-in-vim-without-the-needed-permissions" target="_blank" rel="external">Save a file you edited in vim without the needed permissions</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之HashMap源码学习]]></title>
      <url>http://jianwl.com/2016/11/10/Java%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>总是在写重复代码，有没有觉得很煎熬？对代码多点挑剔，你会想法设法尽量去避免写重复代码。学习和借鉴优秀源码的设计思想，用于实际项目中，让你的代码变得更加优雅。</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/public/16-11-10/90063033.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1. <code>Map</code>接口</strong></p>
<p>解读<code>Map</code>源码，学到了以下几点：</p>
<ol>
<li>泛型的使用</li>
<li><code>default</code>声明方法体的方法；</li>
<li>接口中可声明静态方法</li>
<li>接口中嵌套接口</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public interface Map&lt;K, V&gt; &#123;</div><div class="line"></div><div class="line">    // 1. 通用接口方法</div><div class="line">    boolean containsKey(Object key);</div><div class="line"></div><div class="line">    // 2. 泛型</div><div class="line">    V get(Object key);</div><div class="line"></div><div class="line">    // 3. 泛型共同父类</div><div class="line">    void putAll(Map&lt;? extends K, ? extends V&gt; m);</div><div class="line"></div><div class="line">    // 4. 接口中声明接口</div><div class="line">    interface Entry&lt;K, V&gt; &#123;</div><div class="line"></div><div class="line">        K getKey();</div><div class="line"></div><div class="line">        V getValue();</div><div class="line"></div><div class="line">        // 5. 接口中声明静态方法</div><div class="line">        public static &lt;K extends Comparable&lt;? super K&gt;, V&gt; Comparator&lt;Entry&lt;K,V&gt;&gt; comparingByKey() &#123;</div><div class="line">            return (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</div><div class="line">                    (c1, c2) -&gt; c1.getKey().compareTo(c2.getKey());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 6. 接口中声明默认方法</div><div class="line">    default V getOrDefault(Object key, V defaultValue) &#123;</div><div class="line">        V v;</div><div class="line">        return (((v = get(key)) != null) || containsKey(key))</div><div class="line">                ? v</div><div class="line">                : defaultValue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Set&lt;Entry&lt;K, V&gt;&gt; entrySet();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. <code>MapAbstract</code>抽象方法</strong></p>
<p>解读<code>MapAbstract</code>源码，学习到以下几点：</p>
<ol>
<li>抽象类中，至少要有一个抽象方法。</li>
<li>抽象类，不能有接口，除了抽象方法，方法必须有方法体。</li>
<li>抽象类中，可以声明静态类。 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public abstract class AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt; &#123;</div><div class="line"></div><div class="line">    // 1. 实现containsKey接口方法</div><div class="line">    public boolean containsKey(Object key) &#123;</div><div class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</div><div class="line">        if (key==null) &#123;</div><div class="line">            while (i.hasNext()) &#123;</div><div class="line">                Entry&lt;K,V&gt; e = i.next();</div><div class="line">                if (e.getKey()==null)</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            while (i.hasNext()) &#123;</div><div class="line">                Entry&lt;K,V&gt; e = i.next();</div><div class="line">                if (key.equals(e.getKey()))</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 2. 声明抽象方法体,没有方法体,继承类必须实现该方法</div><div class="line">    public abstract Set&lt;Entry&lt;K,V&gt;&gt; entrySet();</div><div class="line"></div><div class="line">    // 3. 抽象方法中可声明静态类</div><div class="line">    public static class SimpleEntry&lt;K,V&gt;</div><div class="line">        implements Entry&lt;K,V&gt;, java.io.Serializable</div><div class="line">    &#123;</div><div class="line">        private static final long serialVersionUID = -8499721149061103585L;</div><div class="line"></div><div class="line">        private final K key;</div><div class="line">        private V value;</div><div class="line">        </div><div class="line">        public SimpleEntry(K key, V value) &#123;</div><div class="line">            this.key   = key;</div><div class="line">            this.value = value;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        public K getKey() &#123;</div><div class="line">            return key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public V getValue() &#123;</div><div class="line">            return value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>未完待续….</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>JDK1.8源码</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL查询优化]]></title>
      <url>http://jianwl.com/2016/11/02/MySQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>临近双11，达达App的流量突然猛增，日单量破百万单。这几天数据库出现几次报警，排查下来是某些SQL性能很差，导致慢查询。本节我们主要来学习，优化SQL。</p>
<h3 id="查询原理"><a href="#查询原理" class="headerlink" title="查询原理"></a>查询原理</h3><p>当我们向MySQL发送一个请求时，它到底做了什么？大概有一下几个步骤：</p>
<ol>
<li>客户端发送一条查询给服务器</li>
<li>服务器先检查查询缓存，如果命中缓存则立刻返回存储在缓存中的结果，否则进入下一个阶段。</li>
<li>服务器进行SQL解析、预处理，再由优化器生成对应的执行计划</li>
<li>MySQL根据优化器生成的执行计划，调用存储引用的API来执行查询。</li>
<li>将结果返回给客户端。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、查询执行计划</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-11-2/73226876.jpg" alt=""></p>
<p>通过执行计划知道，<code>type=index</code>表示通过索引查询，预估得到2条记录<code>rows=2</code>;</p>
<p><strong>2、不要使用count(非索引字段)</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-11-2/4766428.jpg" alt=""></p>
<p>通过执行计划可知，使用<code>count(非索引字段)</code>使用全表扫描查询，而使用<code>count(*)</code>或<code>count(索引字段)</code>使用索引查询。</p>
<p><strong>3、切分查询</strong></p>
<p><code>场景：</code> 有时候一个大查询我们需要<code>分而治之</code>，将大查询切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一部分查询结果。</p>
<p><code>举个🌰</code></p>
<blockquote>
<p>定期删除大量数据时，如果用一个大的语句一次性完成的话，则可能需要一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多很小的但很重要的查询。将一个大的DELETE语句切分成多个小的查询可以尽可能小地影响MYSQL性能，同时还可以减少MYSQL复制的延时。</p>
</blockquote>
<p><code>再举个线上环境的🌰</code></p>
<p><code>场景：</code> 假设我需要一次查询1万个用户的信息；</p>
<p><code>大查询：</code> SELECT * FROM ‘dada’ WHERE dada_id IN (1万个id);</p>
<p><code>小查询:</code> SELECT * FROM ‘dada’ WHERE dada_id IN (1千个id); 查询10次；</p>
<p><code>结果：</code> 使用<code>大查询</code>很可能出现慢查询，导致性能问题，而使用<code>小查询</code>，对服务器性能影响小很多。</p>
<p><strong>4、分解关联查询</strong></p>
<p><code>关联查询</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM &apos;tag&apos;</div><div class="line">JOIN &apos;tag_post&apos; ON tag_post.tag_id=tag.id </div><div class="line">JOIN &apos;post&apos; ON tag_post.post_id=post.id </div><div class="line">WHERE tag.tag=&apos;mysql&apos;;</div></pre></td></tr></table></figure>
<p><code>分解查询</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM &apos;tag&apos; WHERE tag=&apos;mysql&apos;;</div><div class="line">SELECT * FROM &apos;tag_post&apos; WHERE tag_id=1234;</div><div class="line">SELECT * FROM &apos;post&apos; WHERE post.id in(123,456,567,9098,8904);</div></pre></td></tr></table></figure>
<p><code>关联查询分解为多个查询的好处</code></p>
<ol>
<li>缓存效率更高，如:上面查询中的<code>tag=mysql</code>已经被缓存了，那么应用就可以跳过第一个查询。再如，应用已经缓存<code>post.id为123、456</code>的内容，那么第三个查询的<code>IN</code>就可以少查询几个<code>post.id</code>。如果表结构变了，就不能使用查询缓存了。</li>
<li>查询分解后，执行单个查询可以减少锁的竞争。</li>
<li>应用层做分解后，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。</li>
<li>查询效率会有所提升，使用<code>IN</code>代替关联查询，可让MYSQL按照ID顺序进行查询，这可能比随机关联更高效。</li>
<li>减少冗余记录的查询，在应用层做分解查询，意味着对于某条记录应用只需查询一次，而在数据库做关联查询，则需要重复访问一部分数据，可减少网路和内存的消耗。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>高性能MYSQL(第三版)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux之高级命令]]></title>
      <url>http://jianwl.com/2016/10/29/Linux%E4%B9%8B%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、grep高级用法</strong></p>
<p><code>语法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">grep [-A] [-B] [-n] &apos;搜索字符串&apos;</div><div class="line"></div><div class="line">-A ：后面可加数字，为after的意思，除了列出该行之后，后续的n行也列出来。</div><div class="line">-B ：后面可加数字，为before的意思，除了列出该行之后，前面的n行也列出来。</div><div class="line">-n : 将找到的关键字显色，且加上行号来表示</div></pre></td></tr></table></figure>
<p><code>实战1</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/14.jpg" alt=""></p>
<p><strong>2、nl命令</strong></p>
<p>输出文件内容，并自动加上行号</p>
<p><code>实战2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/15.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>鸟哥的Linux私房菜</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之观察者模式]]></title>
      <url>http://jianwl.com/2016/10/29/JAVA%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>半年前写过一篇<a href="http://jianwl.com/2016/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">观察者模式</a>,当我再次翻阅这篇文章时，我已看不懂，我当初写这篇文章的主线是什么？仅仅是将「Head First设计模式」书中的代码搬过来。这样没有经过思考的学习笔记，对知识的理解是很浅的，且忘记后再看原文不容易重新拾起。本文将重新梳理「JAVA观察者模式」。</p>
<h3 id="观察者模式介绍"><a href="#观察者模式介绍" class="headerlink" title="观察者模式介绍"></a>观察者模式介绍</h3><p>一个目标对象管理所有依赖于它的观察者对象，并且在它本身的状态改变时，主动发出通知。</p>
<p><code>优点</code></p>
<p>观察者和被观察者是抽象耦合的</p>
<p><code>缺点</code></p>
<ol>
<li>如果一个目标对象有很多的观察者，通知所有观察者会花费很多时间</li>
<li>目标对象和观察者之间有循环依赖的话，会触发循环调用，导致系统崩溃。</li>
<li>观察者模式没有相应的机制让观察者知道目标对象是怎么发生变化的，仅仅只是知道观察目标发生了变化。</li>
</ol>
<p><code>组成</code></p>
<ol>
<li><code>抽象主题角色「Subject」:</code>把所有观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</li>
<li><code>具体主题角色 「ConcreteSubject」：</code>存入具体观察者对象，在具体主题的内部状态改变时，给所有登记过的观察者发出通知。</li>
<li><code>抽象观察者角色「Observer」：</code>为所有的具体观察者定义一个接口，在得到主题的通知时，更新自己。</li>
<li><code>具体观察角色「ConsreteObserver」：</code>具体观察者实现抽象观察者所要求的所有接口。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、定义抽象观察者角色</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Observer</div><div class="line"> * @param &lt;S&gt; Subject</div><div class="line"> * @param &lt;O&gt; Observer</div><div class="line"> * @param &lt;A&gt; Argument type</div><div class="line"> */</div><div class="line">public interface Observer&lt;S extends Observable&lt;S, O, A&gt;, O extends Observer&lt;S, O, A&gt;, A&gt; &#123;</div><div class="line"></div><div class="line">  void update(S subject, A argument);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Race.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public interface Race extends Observer&lt;GWeather, Race, WeatherType&gt; &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2、定义具体观察者角色</strong></p>
<p><code>具体观察者角色：GOrcs.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class GOrcs implements Race &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void update(GWeather weather, WeatherType weatherType) &#123;</div><div class="line">    switch (weatherType) &#123;</div><div class="line">      case COLD:</div><div class="line">        System.out.println(&quot;The orcs are freezing cold.&quot;);</div><div class="line">        break;</div><div class="line">      case RAINY:</div><div class="line">        System.out.println(&quot;The orcs are dripping wet.&quot;);</div><div class="line">        break;</div><div class="line">      case SUNNY:</div><div class="line">        System.out.println(&quot;The sun hurts the orcs&apos; eyes.&quot;);</div><div class="line">        break;</div><div class="line">      case WINDY:</div><div class="line">        System.out.println(&quot;The orc smell almost vanishes in the wind.&quot;);</div><div class="line">        break;</div><div class="line">      default:</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>具体观察者角色：GHobbits.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class GHobbits implements Race &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void update(GWeather weather, WeatherType weatherType) &#123;</div><div class="line">    switch (weatherType) &#123;</div><div class="line">      case COLD:</div><div class="line">        System.out.println(&quot;The hobbits are shivering in the cold weather.&quot;);</div><div class="line">        break;</div><div class="line">      case RAINY:</div><div class="line">        System.out.println(&quot;The hobbits look for cover from the rain.&quot;);</div><div class="line">        break;</div><div class="line">      case SUNNY:</div><div class="line">        System.out.println(&quot;The happy hobbits bade in the warm sun.&quot;);</div><div class="line">        break;</div><div class="line">      case WINDY:</div><div class="line">        System.out.println(&quot;The hobbits hold their hats tightly in the windy weather.&quot;);</div><div class="line">        break;</div><div class="line">      default:</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3、定义抽象主题角色</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Subject</div><div class="line"> * @param &lt;S&gt; Subject</div><div class="line"> * @param &lt;O&gt; Observer</div><div class="line"> * @param &lt;A&gt; Argument type</div><div class="line"> */</div><div class="line">public abstract class Observable&lt;S extends Observable&lt;S, O, A&gt;, O extends Observer&lt;S, O, A&gt;, A&gt; &#123;</div><div class="line"></div><div class="line">  protected List&lt;O&gt; observers;</div><div class="line"></div><div class="line">  public Observable() &#123;</div><div class="line">    this.observers = new CopyOnWriteArrayList&lt;&gt;();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void addObserver(O observer) &#123;</div><div class="line">    this.observers.add(observer);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void removeObserver(O observer) &#123;</div><div class="line">    this.observers.remove(observer);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Notify observers</div><div class="line">   */</div><div class="line">  @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">  public void notifyObservers(A argument) &#123;</div><div class="line">    for (O observer : observers) &#123;</div><div class="line">      observer.update((S) this, argument);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4、定义具体的主题</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class GWeather extends Observable&lt;GWeather, Race, WeatherType&gt; &#123;</div><div class="line"></div><div class="line">  private WeatherType currentWeather;</div><div class="line"></div><div class="line">  public GWeather() &#123;</div><div class="line">    currentWeather = WeatherType.SUNNY;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Makes time pass for weather</div><div class="line">   */</div><div class="line">  public void timePasses() &#123;</div><div class="line">    WeatherType[] enumValues = WeatherType.values();</div><div class="line">    currentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];</div><div class="line">    System.out.println(&quot;The weather changed to &quot; + currentWeather + &quot;.&quot;);</div><div class="line">    notifyObservers(currentWeather);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>WeatherType.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public enum WeatherType &#123;</div><div class="line"></div><div class="line">  SUNNY, RAINY, WINDY, COLD;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public String toString() &#123;</div><div class="line">    return this.name().toLowerCase();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5、运行观察者模式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        GWeather gWeather = new GWeather();</div><div class="line">        gWeather.addObserver(new GOrcs());</div><div class="line">        gWeather.addObserver(new GHobbits());</div><div class="line"></div><div class="line">        gWeather.timePasses();</div><div class="line">        gWeather.timePasses();</div><div class="line">        gWeather.timePasses();</div><div class="line">        gWeather.timePasses();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/13.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">观察者模式-维基百科</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法基础之插入排序]]></title>
      <url>http://jianwl.com/2016/10/29/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>算法对一个工程师来说是极其重要的，初级工程师虽然在工作中，鲜有用到算法，但对算法的训练仍不能有丝毫的含糊，算法对工程师的思维训练也是有极大的好处的。从基础算法起步，逐步学习算法。本节主要介绍插入排序算法。</p>
<h3 id="插入排序介绍"><a href="#插入排序介绍" class="headerlink" title="插入排序介绍"></a>插入排序介绍</h3><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p><code>举个实际生活中的例子</code></p>
<blockquote>
<p>排序一手扑克牌，开始时，我们的左手为空并且桌子上的牌面向下，然后我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，拿在左手上的牌总是排序好的。</p>
</blockquote>
<h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p><code>时间复杂度</code></p>
<p>O(n^2)</p>
<p><code>空间复杂度</code></p>
<p>O(n),需要辅助空间O(1)</p>
<h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol>
<li>第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素「已排序」大于新元素，将该元素移动下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001() &#123;</div><div class="line">    // 初始化数组</div><div class="line">    int[] arr = &#123;6, 2, 4, 1, 5, 9&#125;;</div><div class="line"></div><div class="line">    // 默认第一个元素为已排序(以「i = 1」,简述流程)</div><div class="line">    for (int i = 1; i &lt; arr.length; i++) &#123;</div><div class="line"></div><div class="line">        // 当前新插入元素 arr[1] = 2;</div><div class="line">        int temp = arr[i];</div><div class="line"></div><div class="line">        // 当前已排序的最大下标位是0,结束条件是「下标位&gt;=0 且 已排序元素大于插入元素」</div><div class="line">        for (int j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j--) &#123;</div><div class="line">            // 从后往前,交换插入新元素 和 已排序的元素</div><div class="line">            arr[j + 1] = arr[j];</div><div class="line">            arr[j] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    System.out.println(&quot;inserted sorted ==&gt; &quot; + JSON.toJSON(arr));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/10.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#Java" target="_blank" rel="external">插入排序-维基百科</a></li>
<li>算法导论(第三版)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA8之java.util.stream.Collectors实战]]></title>
      <url>http://jianwl.com/2016/10/29/JAVA8%E4%B9%8Bjava-util-stream-Collectors%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Java8</code>新增了一个集合工具类<code>java.util.stream.Collectors</code>，超级好用，在平时处理业务逻辑时，会经常用到。熟练掌握其用法，对于提高工作效率有很大的帮助。当然，这仅仅是最初级的，之后会抽空写一篇关于其源码解读的文章。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>对象模型</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    private String name;</div><div class="line">    private Integer age;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(String name, Integer age) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getAge() &#123;</div><div class="line">        return age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAge(Integer age) &#123;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>1、聚合对象某一属性<code>Collectors.toList()</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_001() &#123;</div><div class="line">        // 初始化用户对象</div><div class="line">        List&lt;User&gt; users = Collections.unmodifiableList(Arrays.asList(new User(&quot;对象C&quot;, 21), new User(&quot;对象B&quot;, 27), new User(&quot;对象A&quot;, 22), new User(&quot;对象D&quot;, 22)));</div><div class="line">        // 此处JSON类引用「阿里巴巴的fastjson包」</div><div class="line">        System.out.println(&quot;users ==&gt; &quot; + JSON.toJSON(users));</div><div class="line"></div><div class="line">        // 获取用户年龄的集合,包含重复年龄</div><div class="line">        List&lt;Integer&gt; ages = users.stream().map(User::getAge).collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;ages ==&gt; &quot; + JSON.toJSON(ages));</div><div class="line"></div><div class="line">        // 获取年龄的集合,并去重</div><div class="line">        List&lt;Integer&gt; distinctAges = users.stream().map(User::getAge).distinct().collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;distinctAges ==&gt; &quot; + JSON.toJSON(distinctAges));</div><div class="line"></div><div class="line">        // 按年龄排序 小 -&gt; 大</div><div class="line">        List&lt;User&gt; ageSortedUser = users.stream().sorted((u1,u2) -&gt; u1.getAge() - u2.getAge()).collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;ageSortedUser ==&gt; &quot; + JSON.toJSON(ageSortedUser));</div><div class="line"></div><div class="line">        // 按名字排序按字母从 A - &gt; Z || a - &gt; z</div><div class="line">        List&lt;User&gt; nameSortedUser = users.stream().sorted((u1,u2) -&gt; u1.getName().compareTo(u2.getName())).collect(Collectors.toList());</div><div class="line">        System.out.println(&quot;nameSortedUser ==&gt; &quot; + JSON.toJSON(nameSortedUser));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>提一点</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/8.jpg" alt=""></p>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/4.jpg" alt=""></p>
<p><strong>2、将每个年龄的用户分组<code>Collectors.groupingBy()</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_002() &#123;</div><div class="line">        // 初始化用户对象</div><div class="line">        List&lt;User&gt; users = Collections.unmodifiableList(Arrays.asList(new User(&quot;对象A&quot;, 21), new User(&quot;对象B&quot;, 22), new User(&quot;对象C&quot;, 22)));</div><div class="line"></div><div class="line">        // 每个年龄的用户分组</div><div class="line">        Map&lt;Integer, List&lt;User&gt;&gt; usersGroup = users.stream().collect(Collectors.groupingBy(User::getAge));</div><div class="line">        System.out.println(&quot;usersGroup ==&gt; &quot; + JSON.toJSON(usersGroup));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/2.jpg" alt=""></p>
<p><strong>3、其他</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void test_003() &#123;</div><div class="line">        // 初始化用户对象</div><div class="line">        List&lt;User&gt; users = Collections.unmodifiableList(Arrays.asList(new User(&quot;对象C&quot;, 21), new User(&quot;对象B&quot;, 27), new User(&quot;对象A&quot;, 22), new User(&quot;对象D&quot;, 22)));</div><div class="line"></div><div class="line">        // 用户平均年龄</div><div class="line">        Double averageAge = users.stream().collect(Collectors.averagingInt(User::getAge));</div><div class="line">        System.out.println(&quot;averageAge ==&gt; &quot; + averageAge);</div><div class="line"></div><div class="line">        // 计算年龄大于22岁的人数</div><div class="line">        Long objectCount = users.stream().filter(user -&gt; user.getAge() &gt; 22).collect(Collectors.counting());</div><div class="line">        System.out.println(&quot;objectCount ==&gt; &quot; + objectCount);</div><div class="line"></div><div class="line">        // 将所有对象用「,」拼接</div><div class="line">        String userNames = users.stream().map(User::getName).collect(Collectors.joining(&quot;,&quot;));</div><div class="line">        System.out.println(&quot;userNames ==&gt; &quot; + userNames);</div><div class="line"></div><div class="line">        // =================================== 聚合为映射 ===========================================================================</div><div class="line"></div><div class="line">        // 将用户分为「大于22岁」和「小于等于22岁」两组</div><div class="line">        Map&lt;Boolean, List&lt;User&gt;&gt; partitionUsers = users.stream().collect(Collectors.partitioningBy(user -&gt; user.getAge() &gt; 22));</div><div class="line">        System.out.println(&quot;partitionUsers ==&gt;  &quot; + JSON.toJSON(partitionUsers));</div><div class="line"></div><div class="line">        // 将用户列表转化为「对象名 -&gt; 对象」的映射关系</div><div class="line">        Map&lt;String, User&gt; userMap = users.stream().collect(Collectors.toMap(User::getName, user -&gt; user));</div><div class="line">        System.out.println(&quot;userMap ==&gt; &quot; + JSON.toJSON(userMap));</div><div class="line"></div><div class="line">        // =================================== 映射排序 ===========================================================================</div><div class="line"></div><div class="line">        // 对用户映射表userMap排序 从大 -&gt; 小</div><div class="line">        Map&lt;String, User&gt; descUserMap = new LinkedHashMap&lt;&gt;();</div><div class="line">        userMap.entrySet().stream().sorted(Map.Entry.&lt;String, User&gt;comparingByKey().reversed()).forEachOrdered(entry -&gt; descUserMap.put(entry.getKey(), entry.getValue()));</div><div class="line">        System.out.println(&quot;descUserMap ==&gt;&quot; + descUserMap);</div><div class="line">        // 「特别需要注意JSON.toJSON()会对内容顺序重排」 --&gt; 对比上一条输出</div><div class="line">        System.out.println(&quot;descUserMap ==&gt;&quot; + JSON.toJSON(descUserMap));</div><div class="line"></div><div class="line">        // 对用户映射表userMap排序 从小 -&gt; 到</div><div class="line">        Map&lt;String, User&gt; ascUserMap = new LinkedHashMap&lt;&gt;();</div><div class="line">        userMap.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEachOrdered(entry -&gt; ascUserMap.put(entry.getKey(), entry.getValue()));</div><div class="line">        System.out.println(&quot;ascUserMap ==&gt;&quot; + ascUserMap);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>提一点</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/6.jpg" alt=""></p>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/5.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Java8官方文档之<code>java.util.stream.Collectors</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之ArrayList源码学习]]></title>
      <url>http://jianwl.com/2016/10/26/JAVA%E4%B9%8BArrayList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接触<code>JAVA</code>2年多了，写代码总是随心所遇，怎么快，怎么来。写代码时，没有去思考怎么避免重复代码，降低多个模块间的耦合，都是事后填坑。看优秀的源码是一个很好地学习方式,同时有助于加深理解。</p>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-28/26213741.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>为何ArrayList能够动态扩容？</strong></p>
<p><code>1. 定义变量</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 默认容量</div><div class="line">private static final int DEFAULT_CAPACITY = 10;</div><div class="line">    </div><div class="line">// 数组元素,其长度代表总的容量,实际元素个数，小于总容量</div><div class="line">transient Object[] elementData; </div><div class="line">  </div><div class="line">// 实际元素个数</div><div class="line">private int size;</div><div class="line">    </div><div class="line">// 默认空实例</div><div class="line">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div></pre></td></tr></table></figure>
<p><code>2. 初始化，实际元素个数为0</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public ArrayList() &#123;</div><div class="line">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>3.增加元素</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">// 确保数组的容量够，不够自动扩容，具体来看下实现。</div><div class="line">   ensureCapacityInternal(size + 1);</div><div class="line">        </div><div class="line">// 数组指定位置赋值</div><div class="line">   elementData[size++] = e;</div><div class="line">   return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ensureCapacityInternal 具体实现</code></p>
<p>简单叙述一下步骤：</p>
<ol>
<li>初始化,元素个数(<code>size=0</code>)为0</li>
<li>此时<code>elementData</code>为空，故<code>minCapacity=10</code> </li>
<li>因<code>minCapacity=10</code>而<code>elementData.length=0</code>故第一次自动扩容。</li>
<li><code>当前元素的个数 * 1.5 = 0</code>小于<code>minCapacity=10</code>,所以扩容的长度为10.</li>
<li>赋值<code>elementData</code>的长度为10。自此完成一次完整扩容。</li>
<li>再次增加元素，因<code>minCapacity - elementData.length == 0</code>，故不会再次扩容，直到元素的个数为11个，此时<code>minCapacity=11</code>而<code>elementData.length=10</code>，将再次触发扩容。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">private void ensureCapacityInternal(int minCapacity) &#123;</div><div class="line">      if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">          minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ensureExplicitCapacity(minCapacity);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  private void ensureExplicitCapacity(int minCapacity) &#123;</div><div class="line">      modCount++;</div><div class="line"></div><div class="line">      // 实际元素个数大于数组容量时,进行扩容。</div><div class="line">      if (minCapacity - elementData.length &gt; 0)</div><div class="line">          grow(minCapacity);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  // 扩容</div><div class="line">  private void grow(int minCapacity) &#123;</div><div class="line">      // overflow-conscious code</div><div class="line">      int oldCapacity = elementData.length;</div><div class="line">      </div><div class="line">      // 新容量为当前元素个数的1.5倍</div><div class="line">      int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</div><div class="line">      if (newCapacity - minCap。、acity &lt; 0)</div><div class="line">          newCapacity = minCapacity;</div><div class="line">      if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</div><div class="line">          newCapacity = hugeCapacity(minCapacity);</div><div class="line">      // minCapacity is usually close to size, so this is a win:</div><div class="line">      elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>JDK8源码</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之简单工厂模式]]></title>
      <url>http://jianwl.com/2016/10/24/JAVA%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一节我们学习了<a href="http://jianwl.com/2016/10/17/Java%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/">模板方法</a>，这一节让我们来学习简单工厂模式。</p>
<p><code>定义</code></p>
<p>工厂模式就是按照要求返回一个类型的对象。</p>
<p><code>目的</code></p>
<p>使对象的实例化与主程序代码解耦。</p>
<p><code>设计原则</code></p>
<ul>
<li>变量不要持有具体类的引用</li>
<li>不要让类继承具体类，要继承抽象类或接口</li>
<li>不要覆盖基类中已实现的方法</li>
</ul>
<p><code>优点</code></p>
<ul>
<li>简单工厂模式实现了对责任的分割，提供了专门的工厂类创建对象</li>
<li>引入配置文件，在不需要修改客户端代码的情况下更换和增加新的产品类，一定程度提高系统的灵活性。</li>
</ul>
<p><code>缺点</code></p>
<ul>
<li>扩展困难，一旦添加新产品需要修改工厂逻辑</li>
<li>产品类型较多时，可能造成工厂逻辑过于复杂，不利于系统扩展和维护</li>
<li>工厂类集中了所有产品创建逻辑，一旦不能工作，整个系统将受影响。</li>
<li>简单工厂模式会增加系统中类的个数，一定程度上增加了系统的复杂性和理解难度</li>
<li>使用静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li>
</ul>
<p><code>应用场景A</code></p>
<p>我们与银行有业务来往，需要与银行方进行报文通信，不同的业务的报文不同，为此我们需要有一个工厂来简单创建不同的报文。</p>
<p><code>应用场景B</code></p>
<p>写一个Servlet处理客户端请求的时候，往往会给一个Servlet处理多个业务逻辑，为此我们需要有一个工厂类简单创建不同的Servlet。</p>
<h3 id="实战-应用场景A："><a href="#实战-应用场景A：" class="headerlink" title="实战 - 应用场景A："></a>实战 - 应用场景A：</h3><p><strong>1. 定义产品接口</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IProduct &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 定义一个抽象类，他是所有产品的父类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public abstract class AnswerHead &#123;</div><div class="line">    protected String requestType;</div><div class="line">    protected String agentCode;</div><div class="line">    protected String trnCode;</div><div class="line">    protected String frontTraceno;</div><div class="line">    public abstract String toXML();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. 产品类A，只应答报文头</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class AnswerHeadOnly extends AnswerHead &#123;</div><div class="line">    @Override</div><div class="line">    public String toXML() &#123;</div><div class="line">        System.out.println(&quot;AnswerHeadOnly to xml&quot;);</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4. 产品类B，只应答报文体</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class AnswerBodyMobile extends AnswerHead &#123;</div><div class="line">    @Override</div><div class="line">    public String toXML() &#123;</div><div class="line">        System.out.println(&quot;AnswerBodyMobile to xml&quot;);</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. 简单工厂类，根据参数不同生成不同的实例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class ProductFactory &#123;</div><div class="line">    public static AnswerHead createProduct(String type)&#123;</div><div class="line">       switch (type)&#123;</div><div class="line">           case &quot;answerHeadOnly&quot;:</div><div class="line">               return new AnswerHeadOnly();</div><div class="line">           case &quot;answerHeadMobile&quot;:</div><div class="line">               return new AnswerBodyMobile();</div><div class="line">           default:</div><div class="line">               return null;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ProductFactory.createProduct(&quot;answerHeadOnly&quot;).toXML();</div><div class="line">        ProductFactory.createProduct(&quot;answerHeadMobile&quot;).toXML();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>6、结果</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-25/57629976.jpg" alt=""></p>
<h3 id="实战-应用场景B"><a href="#实战-应用场景B" class="headerlink" title="实战 - 应用场景B"></a>实战 - 应用场景B</h3><p>我们在写一个Servlet处理客户端请求的时候，往往会一个Servlet处理多个业务逻辑，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) &#123;</div><div class="line">    String flag = request.getParameter(&quot;flag&quot;);</div><div class="line">    if(flag.equals(&quot;service1&quot;)) &#123;</div><div class="line">        service1();</div><div class="line">    &#125;else if(flag.equals(&quot;service2&quot;)) &#123;</div><div class="line">        service2();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是我们的Servlet处理多业务逻辑的常规方法，写一坨<code>if else</code>语句，一种比较好的办法就是，将请求的分发与Servlet分离，让Servlet之处理业务逻辑。我们把各种请求的Servlet看做产品类，<code>javax.servlet.HttpServlet</code>是产品父类，<code>javax.servlet.Servlet</code>是产品接口，这样我们定义一个<code>ServletFactory</code>,在过滤器里解析url请求并交给<code>ServletFactory</code>来处理就可以了。这是一个典型的简单工厂应用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@WebFilter(&quot;/TransRequest&quot;)</div><div class="line">public class TransRequest implements Filter&#123;</div><div class="line">    private String servletName;</div><div class="line">    @Override</div><div class="line">    public void doFilter(ServletRequest request, ServletResponse response,</div><div class="line">            FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">        HttpServletRequest myRequest = (HttpServletRequest)request;</div><div class="line">        //拿到请求的servlet名字， 这里我们约定请求都是/servletName形式</div><div class="line">        String names[] = myRequest.getRequestURI().trim().split(&quot;/&quot;);</div><div class="line">        servletName = names[2];</div><div class="line">        if( servletName != null) &#123;</div><div class="line">        //以下是最典型的两句简单工厂的例子</div><div class="line">            Servlet servlet = ServletFactory.createServlet(servletName);</div><div class="line">            servlet.service(request, response);</div><div class="line">        &#125;else</div><div class="line">            chain.doFilter(request, response);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>每次类一个请求我们用工厂生产一个Servlet，这样可以免去xml配置大量的servlet路径信息比较方便，逻辑也更加清晰。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> public class ServletFactory &#123;</div><div class="line">    public static Servlet createServlet(String servletName) throws ServletException &#123;</div><div class="line">        if(servletName.equals(&quot;servletName1&quot;)) &#123;</div><div class="line">            return new Service1();</div><div class="line">        &#125;else if(servletName.equals(&quot;servletName2&quot;))&#123;</div><div class="line">            return new Service2();</div><div class="line">        &#125;else&#123;</div><div class="line">            throw new ServletException(&quot;No such servlet&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.csdn.net/zuoxiaolong8810/article/details/9044033" target="_blank" rel="external">简单工厂模式详解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[KeyNote技巧之次序]]></title>
      <url>http://jianwl.com/2016/10/22/KeyNote%E6%8A%80%E5%B7%A7%E4%B9%8B%E6%AC%A1%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>内容呈现的<code>次序</code>，对于演讲者来说是经常会碰到的。一般来说，演讲的内容会分为好多点来呈现，当然你可以用最简单的方式，每一页呈现一点，但听众可能听到后面会忘了前面的内容。这一节我们将会来学习，怎么在一页中呈现所有点，并且在讲解当前点时，观众不会被其他点分散注意力。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><code>描述：</code> 第一点说完，讲解第二点时，将第一点置为透明；讲解第3点时，将第2点至为透明；讲解第4点时，将第3点至为透明；最后将所有点都呈现出来。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/56992915.jpg" alt=""></p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>1、介绍个人履历</strong></p>
<p><code>描述：</code>在介绍个人履历时，介绍某个阶段时，将之前的经历至为透明，避免观众分散注意力。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/65788428.jpg" alt=""></p>
<p><strong>2、英语读物推荐</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/634423.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、出现「数字2时将数字1透明」</strong></p>
<p><code>设置「数字2」的出现效果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/46206252.jpg" alt=""></p>
<p><code>设置「数字1」的透明程度为90%</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/7820640.jpg" alt=""></p>
<p><code>设置构建的顺序，当「数字2」出现时，「数字1」变为透明</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/55957232.jpg" alt=""></p>
<p><code>效果图</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/68799891.jpg" alt=""></p>
<p><strong>2、介绍好所有点，最后将所有点都非透明呈现出来</strong></p>
<p><code>拷贝所有点到新的一页，设置新的一页和之前一页的出现次序为「渐隐渐现」</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/73577781.jpg" alt=""></p>
<p><code>实现效果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/93172671.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.youtube.com/watch?v=f3tZhoX82v0&amp;index=5&amp;list=PLnt8-ZhVs2dupUpGriwiVceamkpVdZ5yF" target="_blank" rel="external">许岑KeyNote教学 –需要翻墙</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[KeyNote技巧之参考线与对齐]]></title>
      <url>http://jianwl.com/2016/10/22/KeyNote%E6%8A%80%E5%B7%A7%E4%B9%8B%E5%8F%82%E8%80%83%E7%BA%BF%E4%B8%8E%E5%AF%B9%E9%BD%90/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近遇到一个比较困惑的问题：<code>项目工程做出来了，但是怎么样展示项目，让别人了解它。</code>用<code>KeyNote</code>是一种比较好的展现方式，所以学习<code>KeyNote</code>使用技巧是非常有必要的。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1.文字水平&amp;竖直居中</strong></p>
<p><code>操作：拖动文字当文字呈现出一个十字标识时，处于水平、竖直居中位置</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/6424996.jpg" alt=""></p>
<p><strong>2.文字间距相同</strong></p>
<p><code>操作：移动「平凡之路」与「参考线与对齐」出现双箭头时，说明「平凡之路」、「参考线与对齐」、「走在平坦的路上」间距相同，当出现竖线时，说明它们竖直居中对齐</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/32772264.jpg" alt=""></p>
<p><strong>3.文字左对齐</strong></p>
<p><code>方式1：手动左对齐</code></p>
<p><code>操作</code></p>
<p>1、 <code>Command + R</code>快捷键，开启标签<br>2、 拉出一条对齐线</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/9811713.jpg" alt=""></p>
<p>3、 调节直到文字在一条直线上，且间距相同。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/45974538.jpg" alt=""> </p>
<p><code>方式2：自动左对齐</code></p>
<p><code>操作</code></p>
<p>1、 选中所有文字, 在其中一个文字旁右键选择对齐方式</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/30119857.jpg" alt=""></p>
<p>2、得到左对齐文字后，在一个文字旁右键选择<code>分布对象</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/18045225.jpg" alt=""></p>
<p>3、得到左对齐且竖直间距相同的文字</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/34020849.jpg" alt=""></p>
<p><strong>4.调整图片为相同大小</strong></p>
<p><code>操作</code></p>
<p>1、有两张比例相同，但大小不同的图片</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/45034017.jpg" alt=""></p>
<p>2、按比例缩放一张图片，当图片的长宽均出现双箭头时，此时两张图片大小一致</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-22/24118872.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.youtube.com/watch?v=Z02qoRAWULE&amp;list=PLnt8-ZhVs2dupUpGriwiVceamkpVdZ5yF&amp;index=4" target="_blank" rel="external">许岑KeyNote教学</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之模板方法]]></title>
      <url>http://jianwl.com/2016/10/17/Java%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>模板方法之前写过一篇<a href="http://jianwl.com/2016/08/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">Java设计模式之模板方法模式</a>,当回过头来再看这篇文章时，发现原来的文章过于累赘，无法让人快速理解，故重新梳理。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p><strong>什么是模板方法？</strong></p>
<p>提取了类库中的公共行为，将公共行为放在父类中，通过其子类来实现不同的行为。</p>
<p><strong>优点</strong></p>
<ol>
<li>将不变的行为搬到超类，去除了子类中的重复代码</li>
<li>子类实现算法的细节，有助于算法的扩展。</li>
<li>父类调用子类实现的操作，通过子类扩展新的行为，符合开闭原则。</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>每个不同的实现都需要定义一个子类，这会导致类的个数的增加，设计更加抽象。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1. 定义算法骨架</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public abstract class StealingMethod &#123;</div><div class="line"></div><div class="line">  protected abstract String pickTarget();</div><div class="line"></div><div class="line">  protected abstract void confuseTarget(String target);</div><div class="line"></div><div class="line">  protected abstract void stealTheItem(String target);</div><div class="line"></div><div class="line">  public void steal() &#123;</div><div class="line">    String target = pickTarget();</div><div class="line">    System.out.println(&quot;The target has been chosen as &quot; + target + &quot;.&quot;);</div><div class="line">    confuseTarget(target);</div><div class="line">    stealTheItem(target);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 主对象使用骨架算法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class HalflingThief &#123;</div><div class="line"></div><div class="line">  private StealingMethod method;</div><div class="line"></div><div class="line">  public HalflingThief(StealingMethod method) &#123;</div><div class="line">    this.method = method;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void steal() &#123;</div><div class="line">    method.steal();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void changeMethod(StealingMethod method) &#123;</div><div class="line">    this.method = method;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. 子类A实现骨架算法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class HitAndRunMethod extends StealingMethod &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected String pickTarget() &#123;</div><div class="line">    return &quot;old goblin woman&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void confuseTarget(String target) &#123;</div><div class="line">    System.out.println(&quot;Approach the &quot; + target + &quot; from behind.&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void stealTheItem(String target) &#123;</div><div class="line">    System.out.println(&quot;Grab the handbag and run away fast!&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4. 子类B实现骨架算法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class SubtleMethod extends StealingMethod &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected String pickTarget() &#123;</div><div class="line">    return &quot;shop keeper&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void confuseTarget(String target) &#123;</div><div class="line">    System.out.println(&quot;Approach the &quot; + target + &quot; with tears running and hug him!&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void stealTheItem(String target) &#123;</div><div class="line">    System.out.println(&quot;While in close contact grab the &quot; + target + &quot;&apos;s wallet.&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. Main方法运行</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">  public static void main(String[] args) &#123;</div><div class="line">    HalflingThief thief = new HalflingThief(new HitAndRunMethod());</div><div class="line">    thief.steal();</div><div class="line">    thief.changeMethod(new SubtleMethod());</div><div class="line">    thief.steal();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-17/79477811.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之HashMap新特性]]></title>
      <url>http://jianwl.com/2016/10/17/Java8%E4%B9%8BHashMap%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>简介</code></p>
<p><code>Hash table</code>也是基于<code>Map接口</code>实现的，功能与<code>HashMap</code>基本相似，不同的是<code>HashMap</code>允许key和value插入空值，且<code>HashMap</code>是一个线程不安全类。</p>
<p><code>性能</code></p>
<p><code>HashMap</code>影响其性能的有两个参数：初始化容量(<code>initial capacity</code>)和负载因子(<code>load factor</code>)。初始化容量是哈希表创建时的容量。负载因子决定了哈希表充分哈希的比例多大时，自动扩容。当哈希表中的数量大于负载因子乘以哈希表的容量时，哈希表将扩容并重新哈希已存入的数据。</p>
<p>默认负载因子是<code>0.75</code>是时间和空间成本的权衡比较好的一个平衡点。那负载因子为何是<code>0.75</code>？增大负载因子有什么影响？ 增大负载因子会降低空间开销，但提高查找成本（体现HashMap类的操作，包括get和put)。后文会举例说明。</p>
<p><code>如何提高性能</code></p>
<p>预估向<code>HashMap</code>塞的数量来设置初始容量，尽可能减少重新哈希(<code>rehash</code>)的操作，如果初始化容量大于最大条目数<code>除以</code>负载因子，重新哈希操作(<code>rehash</code>)将不会发生。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、无设置初始化容量 VS 设置初始化容量</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001() &#123;</div><div class="line">    long start = System.currentTimeMillis();</div><div class="line">    Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">    for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">        map.put(String.valueOf(i), i);</div><div class="line">    &#125;</div><div class="line">    System.out.println(&quot;not init capacity =&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void test_002() &#123;</div><div class="line">    long start = System.currentTimeMillis();</div><div class="line">    Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(20560000);</div><div class="line">    for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">        map.put(String.valueOf(i), i);</div><div class="line">    &#125;</div><div class="line">    System.out.println(&quot;init capacity=&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%8812.32.06.png" alt=""></p>
<p>很明显，设置初始化容量之后的效率会更高。</p>
<p><strong>2、默认负载因子(0.75f)  VS 设置更高的负载因子</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line"> public void test_002() &#123;</div><div class="line">     long start = System.currentTimeMillis();</div><div class="line">     Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(20560000, 075f);</div><div class="line">     for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">         map.put(String.valueOf(i), i);</div><div class="line">     &#125;</div><div class="line">     System.out.println(&quot;default load capacity=&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> @Test</div><div class="line"> public void test_0021() &#123;</div><div class="line">     long start = System.currentTimeMillis();</div><div class="line">     Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(20560000, 0.9f);</div><div class="line">     for (int i = 0; i &lt; 10000000; i++) &#123;</div><div class="line">         map.put(String.valueOf(i), i);</div><div class="line">     &#125;</div><div class="line">     System.out.println(&quot;0.9 load capacity =&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%8812.55.36.png" alt=""></p>
<p>很明显，增大负载因子后，效率变低。</p>
<p><strong>3、compute方法</strong></p>
<p><code>作用：</code>新增数据时，若<code>Map</code>中已存在该Key,可以对Value进行操作。</p>
<p><code>场景：</code>统计一个数字出现的次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_011() &#123;</div><div class="line">    List&lt;Integer&gt; list = Arrays.asList(1, 1, 1, 2, 3, 4, 4, 5, 5, 8);</div><div class="line">    Map&lt;Integer, Integer&gt; numCounts = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    list.stream().forEach(num -&gt; &#123;</div><div class="line">        if (numCounts.containsKey(num)) &#123;</div><div class="line">            numCounts.compute(num, (k, v) -&gt; (v != null) ? v = v + 1 : v);</div><div class="line">        &#125; else &#123;</div><div class="line">            numCounts.put(num, 1);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    numCounts.forEach((k, v) -&gt; System.out.println(&quot;key -&gt; &quot; + k + &quot; value -&gt; &quot; + v));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.22.00.png" alt=""></p>
<p><strong>4、遍历forEach</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_006() &#123;</div><div class="line">    Map&lt;String, String&gt; map = new HashMap&lt;&gt;(16, 0.75f);</div><div class="line">    map.put(&quot;1&quot;, &quot;1&quot;);</div><div class="line">    map.put(&quot;2&quot;, &quot;2&quot;);</div><div class="line">    map.put(&quot;3&quot;, &quot;3&quot;);</div><div class="line">    map.forEach((k, v) -&gt; System.out.println(&quot; key -&gt; &quot; + k + &quot; value -&gt; &quot; + v));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.24.14.png" alt=""></p>
<p><strong>5、合并merge</strong></p>
<p><code>作用：</code>新增数据，当存在该key，则对该value做处理，反之则新增数据。</p>
<p><code>场景：</code>统计一个数字出现的次数；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> @Test</div><div class="line">public void test_012() &#123;</div><div class="line">    List&lt;Integer&gt; list = Arrays.asList(1, 1, 1, 2, 3, 4, 4, 5, 5, 8);</div><div class="line">    Map&lt;Integer, Integer&gt; numCounts = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    list.stream().forEach(num -&gt; &#123;</div><div class="line">        numCounts.merge(num,1,Integer::sum);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    numCounts.forEach((k, v) -&gt; System.out.println(&quot;key -&gt; &quot; + k + &quot; value -&gt; &quot; + v));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.22.00.png" alt=""></p>
<p><strong>6、获取所有键值values()</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_008() &#123;</div><div class="line">    Map&lt;String, String&gt; map = new HashMap&lt;&gt;(16, 0.75f);</div><div class="line">    map.put(&quot;1&quot;, &quot;1&quot;);</div><div class="line">    map.put(&quot;2&quot;, &quot;2&quot;);</div><div class="line">    map.put(&quot;3&quot;, &quot;Oh!&quot;);</div><div class="line">    System.out.println(JSON.toJSON(map.values()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%881.36.30.png" alt=""></p>
<p><strong>7、按键值排序顺序或逆序</strong></p>
<p><code>用LinkedHashMap排序</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_013()&#123;</div><div class="line">    Map&lt;String,Double&gt; map = new LinkedHashMap&lt;&gt;();</div><div class="line">    Map&lt;String,Double&gt; sortedMapA = new LinkedHashMap&lt;&gt;();</div><div class="line">    Map&lt;String,Double&gt; sortedMapB = new LinkedHashMap&lt;&gt;();</div><div class="line">    map.put(&quot;1&quot;,1.0);</div><div class="line">    map.put(&quot;4&quot;,4.0);</div><div class="line">    map.put(&quot;3&quot;,3.0);</div><div class="line">    map.put(&quot;2&quot;,2.0);</div><div class="line">    map.put(&quot;5&quot;,5.0);</div><div class="line">    </div><div class="line">    map.entrySet().stream().sorted(Map.Entry.&lt;String,Double&gt;comparingByValue().reversed()).forEachOrdered(entry -&gt; sortedMapA.put(entry.getKey(),entry.getValue()));</div><div class="line">    map.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEachOrdered(entry -&gt; sortedMapB.put(entry.getKey(),entry.getValue()));</div><div class="line"></div><div class="line">    // 逆序</div><div class="line">    System.out.println(sortedMapA);</div><div class="line"></div><div class="line">    // 顺序</div><div class="line">    System.out.println(sortedMapB);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-20/30575157.jpg" alt=""></p>
<p>但是….如果用<code>HashMap</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-20/60385941.jpg" alt=""></p>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-20/71588571.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>JAVA8官方文档之HashMap</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分享「代码家」的学习过程和学习方法]]></title>
      <url>http://jianwl.com/2016/10/17/%E5%88%86%E4%BA%AB%E3%80%8C%E4%BB%A3%E7%A0%81%E5%AE%B6%E3%80%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E5%92%8C%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天逛博客的时候，发现一篇非常棒的文章，出自「<a href="http://blog.daimajia.com/fen-xiang-yi-xie-zi-ji-de-xue-xi-guo-cheng-he-xue-xi-fang-fa/" target="_blank" rel="external">代码家</a>」之手，觉得一时可能难以消化所有的知识，转录过来,方便后续随时查阅。</p>
<p><code>注：以下内容均来自于「代码家」的博客</code></p>
<p>每天，都会有人在微博上私信我，问我关于学习和成长的问题。这种问题我一般都不会回复某个j，毕竟每个人的情况不一样，每个人对待事物的性格也不一样，我不能夸下海口的说，你看某本书几个月就能如何如何，我能做的多数时候只是鼓励鼓励，其次我也从不认为我已经成长到一个多高的境界上，让我去给别人做指导，我还是当之有愧的。</p>
<p>但是，有时候看到大家私信我的时候，确实是处于一种很痛苦或是需要帮助的状态上。 最近晚上有空，就想写写自己从第一次接触程序，到一路颠簸学到今天的一些故事和经验，希望对大家有所帮助。</p>
<h3 id="学习的三个阶段"><a href="#学习的三个阶段" class="headerlink" title="学习的三个阶段"></a>学习的三个阶段</h3><p><strong>第一阶段：消费者阶段</strong></p>
<p>我在快上高中的时候，开始接触的程序。那会儿家里有一本 Visual Basic 的书，30 多页左右，也是家里唯一一本计算机类书籍，是我哥学校发的一本课外书，他对计算机貌似没有什么兴趣，就一直堆在家里，直到无意中被我翻到。</p>
<p>书里的程序格外的简单，几行简单的英语代码，就能让计算机弹出一个对话框，当时看到简直神奇极了！跃跃欲试的在老妈店里的电脑上一步一步的敲下代码，弹出一个简单的对话框，那一瞬间，感觉像是推开了新世界的大门，从此一发不可收拾。 实践完 VB 后，又在小书摊，看到了一本 《黑客 X 档案》，看着各路高深的入侵，木马，盗号，试图努力学会这些技能，然后去跟朋友们炫耀，但一直都无法入门。因为需要太多计算机的基础知识了，不是写个弹框，或者计算器水平的人能搞定的。</p>
<p>那会儿家里也没有懂电脑的，也没有人可以问，又处在小城市，连个培训班都没有。</p>
<p>随即，开始漫漫买书求学路。</p>
<blockquote>
<p>一旦开始买书，就进入了学习的第一个阶段：消费者阶段。当个消费者其实是个挺轻松的事情，对着书本照猫画虎，一会儿就能跑起来一个看着很有趣的程序。</p>
</blockquote>
<p>那会儿，疯狂的买各种书，但是由于周围没有人指导，买了很多类似 21 天 xxx 系列的书，那会儿真的有这种书，我还抱有幻想⋯⋯觉得 21 天后我就⋯⋯</p>
<p>现在想想国内的图书市场简直恶劣到一定程度。很多高校，教师升职评比需要考察发表书籍情况，导致国内一大批烂书其实都是高校老师发出来的。我现在依然认为国内 95% 的技术类书籍是不值得买的，除了像侯杰老师这种文笔很好的技术人以外。</p>
<p>很多作者总是做不到『以读者能理解的顺序，而非自己认为的顺序』写文章，坑害了不少对计算机有兴趣的同学。我一直很崇拜侯杰老师的另一个原因是侯杰老师的书，总是能把你最想问的，如同庖丁解牛，深入浅出的解答出来。就如同 MFC 框架（很早前的一个 Windows SDK 框架，现在已经用的很少了），MFC 是很复杂的一个框架，所有初学的人，都会问一样的问题：”这玩意儿是怎么工作起来的？！”，但所有国产的 Visual C++ 的书，都避而不答，让你照猫画虎的做，就能弹出一个窗体。当初国内只有 《深入浅出 MFC》一书，讲明白了背后的一切。</p>
<p>学完一些基础知识后，就进入了学习的第二个阶段 <strong>实践者阶段</strong> 阶段。所谓实践者，就是开始用自己所学，去开发程序，成为一名专业或非专业的码农，很多人的职业生涯，也就停留在了这个阶段，过上了小富即安的程序员的日子。</p>
<p>我从<strong>消费者阶段</strong>过度到<strong>实践者阶段</strong>大概用了三四年的时间，其实已经挺长的了。我一直都认为我是一只笨鸟，无意中起飞，却飞了很久的那种。</p>
<p><strong>第二阶段：实践者阶段</strong></p>
<p>我真正开始实践的，是在本科学校做的几个网站。</p>
<p>第一个是个学校的匿名聊天系统，就是所有人都可以登录学校的站点，然后会匿名匹配到一个异性，开始聊天，当时用的 Asp.net 做的开发，配合 ajax + jquery，但由于当时技术太差，导致很多人聊着聊着就断线了，导致小产品不告而终。</p>
<p>第二个是给我们信息学院开发的一个官网，用的 PHP。在做这个网站的同时，我选修了一门叫《网络安全》的课程，这门课的老师叫陈路，我曾当着老师的面儿，夸下海口，我开发的官网，坚不可摧…(大概这个意思😳)陈老师知道了我做的网站，随即下达一个作业:”谁能攻陷我们的官网，一个漏洞加五分…”，后来，咳咳⋯网站数据没有了⋯⋯ 有个同学用一个很通用的扫描工具，在他也不知道发生了什么的情况下，工具把网站内容都删除了⋯⋯恩，我犯了个超低级的错误⋯⋯ GET 请求可以删除数据，外加身份认证代码有误⋯⋯</p>
<p>幸好，查看 Apache 日志的时候，发现删除请求到来的前几分钟，Google 爬虫来过（那会儿 Google 还能用），随即马上去 Google 的缓存里找回了所有的数据。 后来陈路老师被学校批斗了一顿，批斗的罪名是『鼓励学生攻击校园网络』，我其实是极力跟学校执事说明这个错误是我犯的，陈老师做的并没有错，而且我到现在还是很喜欢陈老师这种教学方法，毕竟实践出真知。</p>
<blockquote>
<p>可能现在陈老师在教《网络安全》课程的时候，会以 “当年有个学生….” 作为开头，有时候想想也挺有意思的。</p>
</blockquote>
<p>再后来我花了很多实践学习 Web 安全相关的知识。写各种 Web 程序时，都会最大程度的考虑安全问题。 网站攻陷后没多久，Android 出来了，我买了第一部 Android 手机，然后自己照着官方文档开始学 Android，动力的源头，是我听说写 App 能赚钱。赚钱真是学技术的很强的动力，之前写网站零零星星的赚了六七千块钱，作为同学里的小土豪，我又把目光转到了刚出来没多久的 Android 上。 当时先定了一个目标，写一个图片类 App，打算叫『无尽画廊』。因为很喜欢 WeHeartIt 这个小众文艺图片网站。随即计划利用正则解析图片地址，然后用把图片呈现在 App 上。那会儿 Java 和 Android 完全零基础。</p>
<p>自己在入门 Android 的时候真的超级拼。早上 6 点起床，然后开始悄悄下床（不能吵着舍友），打开电脑开始研究加开发。折腾到早上 7点半左右就和舍友一起去吃早饭，然后上课。中午回来也不午休，开发到快上课，晚上基本都会熬到 12 点左右。持续了 1 个月左右，终于从零基础到开发出一个粗糙的 1.0 版本，发到了国内的几个 App 市场。反馈不是很多，但是都挺积极，随即决定开发 2.0 版本，还加入了广告积分墙。就这样超拼的持续了 3 个月左右。现在网上能看到的基本都是 2.0 版本。我从这个 App 里，也赚到了一些广告费，大概几百块。但是因为广告服务商倒闭了⋯⋯ 钱到现在还没取出来⋯⋯ 心痛⋯⋯ 持续更新那个 App 到快毕业的时候，选择了保送到北师大。</p>
<p>暑假的时候去上海一家小公司去实习了，在实习的这家小公司，我做了一个到现在来看依然很屌的功能。现在来看是一个相当不错的 Growth Hacker 的一个案例（那会儿可没有增长黑客这个概念）。</p>
<p>实习所在的公司，是做类似小米盒子的东西。当时的盒子，最重要的当属内容，版权还处于蛮荒时代的时候，大家纷纷解析优酷，土豆这类的网站，以最少的成本，盗用优酷的带宽。简单点而来说，就是做视频聚合。视频聚合最麻烦的就是提取视频的真实文件地址，这样能为所有的创业公司免去版权纠纷，同时解决带宽费用问题。</p>
<p>我去那家公司实习的主要内容，就是用 Node 语言做视频地址解析，费劲功夫搞定了几乎所有的视频网站，各种黑科技都用上了，抓包，逆向，Headless Browser 等等。搞定所有网站后，也算勉强跟竞争对手站在同一起跑线。实习第二周的时候，已经有些没事儿干了，就在这会儿疯狂的想法出现了！</p>
<p>可能很多人还记得当年伟大的迅雷云播，解救了不知道多少个少男寂寞的夜。我们疯狂的想法就是要让我们的小盒子，能够流畅的播放用户从电脑上推送的任意种子文件，无需等待。在那会儿 TV 上，这种功能简直就是创举！</p>
<p>想法出来后，我抗下大旗，开始用代码模拟迅雷云播的全套流程。开发的过程十分艰难，得从不同平台的迅雷上抓包，寻找蛛丝马迹。优先从 Web 端模拟登陆和提交种子文件，这些都相对容易一些，最难的是如何提取到视频的真实地址。花了大概一周时间攻陷了所有的流程，然后公司买了 10 几个迅雷会员，又和各路 BT 网站开始合作，开启了浩浩荡荡的用户增长之旅。具体增长了多少新用户，其实我心里没有数，但是看见旁边的小朋友，每天都在加服务器，优化 Socket 连接数，我猜那一周得新增了 5 - 10万用户，更为壮观的是每到夜里，所有的迅雷账号里就瞬间塞满各种不可描述的日本电影，全部清空后，又被瞬间塞满。以至于后来，实习到第十七八天的时候，我的老板和 CTO 喊我过去，直接送了我 20 万期权，那感觉也是蛮爽的。后来微博上，这个功能也是火了一阵子，不过很快就挂了，起因是有用户在微博上 at 了小米电视和迅雷，让他们跟我们学着点儿⋯⋯ 然后，不超过半小时⋯⋯ 服务就挂掉了⋯⋯ 不过挂掉没几天我就去帝都准备研究生报名了。</p>
<p>还有一件很爽的事，就是我上了研究生后的半年里，那家公司一直给我支付着工资⋯⋯ 每个月轻轻松松就有几千块钱零花钱⋯⋯ 再后来的后来，那家公司倒闭了⋯⋯</p>
<p>快从上海实习结束的时候（实习一个月），我又认识了少楠，加入了 AT！组织。AT! 组织是一个分享优质原创动画的小团队，从此我从一枚野生开发正式晋升为一枚正规军。少楠是一枚非常优秀的产品经理兼设计师，跟着他学到了很多产品的知识和团队协作的技巧，也让我最后真的开发出了近百万用户的 App。AT！组织到现在都是我爱的组织，大家虽然从事不同行业，但就跟亲人一样。每次聚会都是一年一度最嗨皮的日子，都是我经历过最真诚的聊天。从后来做了 AnimeTaste 再到 EverMemo，我第一感觉到团队的重要性，第一次见识到优秀的设计师和 iOS 开发者。</p>
<p>以上的诸多经历也为自己创业埋下了很多伏笔。这些都是我是我的实践者阶段，漫长的三四年。</p>
<p><strong>第三阶段：创造者阶段</strong></p>
<p>实践者阶段之后，自己开始尝试创造。也是我认为学习的第三个阶段 — 创造者阶段，这个阶段是没有结束节点，就一直这么存在着。</p>
<p>我大致是研究生一年级的时候开始摸到创造者阶段的门梁，大三的时候接触的 GitHub，感觉是我学程序来，打开的第二个世界的大门（第一个，算是那个 VB 程序的弹框）。接触到 GitHub 让我第一次开始学习和研究脚本语言（ Python，Node，PhantomJS 等等），第一次开始接触真正的生产工具（类似 Less，Sass 等等），GitHub 简直是求学者的宝库，你会很期待明天的 Trending 榜单上会是什么新东西冒了出来。</p>
<p>那会儿在研究生阶段，每个月有了公司发的几千块钱，也开始入手了人生第一台 iPhone，一台土豪金版的 iPhone5s，买 App 太贵便折腾起了越狱（现在都是买 App 了）。装了一款越狱后的 Store（我忘了叫什么了），那个 Store，在下载一个 App 的时候，有个超漂亮的进度条，我每次都会认真的的盯着那个进度条，一边看，一边感叹，一边也暗许自己也要在 Android 上实现一套，这也是我开始第一次开发自定义组件的初衷，也是 NumberProgressBar 诞生的最初原因。</p>
<p>啃下第一个自定义组件，对很多人来说都是很痛苦的，我也一样，那会儿的 Android 组件少的可怜，不断的看文档，看源码，读别人的代码，试图搞清楚更多更底层的东西，不断的尝试运行，折腾了一周左右（每天超过 10 小时投入），终于做出来了，照猫画虎的写好文档，做好测试，小心翼翼的发布到 GitHub，然后发表到当时为数不多的 GitHub Android 分享社群里。地址在这里：<a href="https://plus.google.com/+daimajia/posts/d6DJhLhLn1c" target="_blank" rel="external">https://plus.google.com/+daimajia/posts/d6DJhLhLn1c</a></p>
<p>再到后来的几个月，又陆续写了一些其他的库，发到 GitHub 上，其实我根本没想到会有那么多人去 Star，可能跟下手比较早有关，恩。</p>
<p>创造者阶段，就是努力创造那些没有的，源自你脑海里的东西，而不是别人安排给你的。努力做到让更多的人用到，可以是一个 App，可以是一个帮助人们提高效率的 Chrome 插件，也可以是一个简单的组件。创造是最挑战你对一个行业的热爱程度的。</p>
<p>我从来不反对重复发明轮子。每一个轮子即便有一些小的改进，都是适应自然法则，优胜劣汰的。</p>
<p>就我身边而言，我最崇拜的创造者是尤小右，将一个小的 Framework，一点点的做大，再到做出国际影响力，真是个不得了的事情，也是很多技术人梦寐以求的事情。</p>
<p><strong>总而言之</strong></p>
<p>如果你忽然觉得自己这几年一直处在一个很稳定的状态中，觉得自己没有提升，那你得想想是不是我卡在了某个阶段，一直无法突破，你是否需要做些什么，突破到下一阶段去。随后的文章我也总结了一些误区和突破方法</p>
<h3 id="被误以为的学习"><a href="#被误以为的学习" class="headerlink" title="被误以为的学习"></a>被误以为的学习</h3><p>当年，有一本书刊特别流行，叫《故事会》。《故事会》后来销声匿迹了，在我眼里，取代《故事会》的是知乎。对，就是那个知乎。 我其实一直很反对一个论调：“上知乎，学知识”。醒醒吧。知乎明显就是现代版的故事会好吗？！ 我不否认知乎存在有价值的知识，但，根本不值得你花那么多时间，去发现那少的可怜的知识。去读书吧。用最系统的逻辑，去学会一项技能，哪怕你去《硅谷百年史》里去读那些振奋人心的仙童半导体的故事，也比你不断的知乎看着水的一笔的帖子要强的多。现在，最可怕的是大家在知乎上消费着垃圾，却依然觉得自己在吃着奶酪，学习的过程都是伴随着思考和痛苦的，如果你边笑边学习，那你真的得醒醒了。</p>
<h3 id="目标和激励很重要"><a href="#目标和激励很重要" class="headerlink" title="目标和激励很重要"></a>目标和激励很重要</h3><p>我在大三下半学期被保研后，开始了另一个小项目，一个叫 小熊词典 的 App，起因是因为在学英语的时候，所有词典类 App 想要获取最全的词语解释都需要联网，流量消耗大不说，电量是最大问题，自习一早上电量就没了。所以，自己想动手写一个词典 App，主打离线词库和快速查询。</p>
<p>但最后的时候，小项目胎死腹中。说实话，整个 App，已经开发到 95% 了，抓取了非常多有名的词库的数据，并且整理成了规范格式。但项目最后还是放弃了。即便今天来看这个词典依然很酷！（最丰富的词库和最快的查询速度）</p>
<p>现在想想，当初一个人开发的时候，每次想到一个很酷的功能，就决定加进来，项目进度遥遥无期。完全没有项目管理的思路，也没有意识到这样会很快拖垮我的体力，消磨掉自己的意志和热情。</p>
<p>对于很多初学者来说，总是抱着书学，其实也是同样的后果，你无法获得任何的反馈和激励，以至于觉得一件事情越做越难。学习的过程，最好能定一个简单的目标，比如：“我即便现在什么都不会，我就要做个小游戏出来，这个游戏应该是这样的一个玩儿法，blablabla。”，做出来后，快些去找用户，可以是你的朋友，也可以是你的父母，最好是那些不吝惜赞美的朋友们，让他们无形之中给你一些动力。</p>
<h3 id="你永远无法一步达到完美"><a href="#你永远无法一步达到完美" class="headerlink" title="你永远无法一步达到完美"></a>你永远无法一步达到完美</h3><p>我认识的朋友中，他们都有各种稀奇古怪的想法亟待实现，但最后，以信誓旦旦开始 Side projects，最后却都销声匿迹了，这是不无原因的。因为很多的开发者在刚开始的时候，缺乏清晰的计划，却想一步登顶完美的境地。这是很可怕的想法。就好比，我一个很少登山的人，却在第一次的时候，就决定登顶珠峰，结果自然可想而知。在实践自己想法的时候，最好能考虑以最低成本去展现你想法的核心部分，而非一个大而全的方案。</p>
<p>从最小成本的想法核心，一步步的去验证自己的想法，去收集反馈，调整策略。最终抵达一个正确的目标。</p>
<h3 id="赶在兴趣消失之前，去学习新知"><a href="#赶在兴趣消失之前，去学习新知" class="headerlink" title="赶在兴趣消失之前，去学习新知"></a>赶在兴趣消失之前，去学习新知</h3><p>不得不承认懒惰是人的共性，当你看到别的朋友做出来很酷的小游戏的时候，你是否也有几分钟冲动的想要去学习游戏制作。不要等！快去买两本书抓紧学起来，哪怕你知道你这个热情的苗头很快会熄灭，但请不要放弃任何发现新大陆的机会，在学习冲动消失之前，去入个门先。</p>
<p>我每次跟人互相分享初高中生涯的时候，我总是能想起来我初中时候的一位语文老师，微胖，性格和蔼。 她在一次自由复习准备期末考试的时候给我说： “你复习，不要局限在课本上，你背会 24 节气都是很有意义的，想看什么书，就去看，不要等，不要担心自己学不会。” 这话对我学习新东西影响特别深，现在我基本上想学习什么东西，立马去学，即便可能一周后气馁了，放弃了，但是从来不会怀疑学这些零碎知识的意义。 我学过吉他，写过毛笔字，写过 Delphi，用 Sketch 画过 icon，用 Blender 画过 3D 保龄球，写过 Unity 小游戏⋯⋯ 很多我都没坚持下来，但给我带来的最大改变就是我不会惧怕去接受新事物，思考问题的时候总是能把很多场景考虑到。也能慢慢的找到自己最爱做的那件事情，更清楚的定位自己。 所以，当你忽然对某件事情有兴趣的时候，抓住那几分钟，那几天，赶紧去学点新东西。 毕竟，点总是会串成线的。</p>
<h3 id="少看别人写的文章，多看优秀的代码"><a href="#少看别人写的文章，多看优秀的代码" class="headerlink" title="少看别人写的文章，多看优秀的代码"></a>少看别人写的文章，多看优秀的代码</h3><p>我做 Gank 以来，很多开发者都投稿过，以至于现在后台还挤压着 2000 多个投稿没有处理。看过这么一圈而后，我开始不主张去看别人写的技术类文章。看别人的文章，你看到的是他想讲给你的，而这些可能只是他在自己的项目里用到的，而不是一个客观全面的角度。时间一长，以至于你只知道这个东西的一两种用法，更可怕的是你可能已经对思考丧失兴趣，总想走捷径，可能这样前期学习效果显著，但是后期会很快到达瓶颈。我想如果你经常读各种语言的官方文档，总是会有 “啊哈！这样都可以，我以前都不知道还有这种方法存在。” 的感叹，但你看别人的文章，却很少有这种感觉。</p>
<p>至于主张看优秀的代码，其实是希望学习一个技术细节，是伴随着思考的。其实，评价某一种方案好与不好，是没有意义的。只有多积累其他人解决同一问题的方法，才能在下一次做决策的时候，找到适合当前场景的最优解，很多时候，也能触类旁通，给解决其他问题提供思路。</p>
<h3 id="慢慢减少对二手知识的依赖"><a href="#慢慢减少对二手知识的依赖" class="headerlink" title="慢慢减少对二手知识的依赖"></a>慢慢减少对二手知识的依赖</h3><p>技术提升这个过程，其实是你对二手知识减少依赖的过程。二手知识是什么？就是那些经过别人翻译，总结的文章。一开始入门，大家看到的都是二手知识（也可能是三手，四手的知识），但，想要提升自己的能力，强迫自己多去看些更官方的文档，体系化去学习。这个过程是很消耗体力和脑力的，但多坚持，一定会有明显改善的。</p>
<h3 id="收藏的意义不大，收藏也不能改变什么"><a href="#收藏的意义不大，收藏也不能改变什么" class="headerlink" title="收藏的意义不大，收藏也不能改变什么"></a>收藏的意义不大，收藏也不能改变什么</h3><p>很多人看到不错的文章，总要 @我的印象笔记⋯⋯ 我之前也会这么干，经常把一些不错的文章，存到 Pocket 或者 Readability 里，但，真的回顾去看那些文章的机会太少了，而收藏这些文章给我带来不少压力。有的文章，我只是浅显的读了读，脑子里总是得记着有时间了再去读完剩下部分，正如大多数人一样，再也不会去读了。久而久之，拖延症也就变得理所应当。</p>
<p>有可能你会说万一哪天用到呢？其实我觉得再 Google 一次就好啦，可能会找到比这篇文章更好的。就这样。</p>
<p>现在，看到一篇不错的文章，首先从标题推测下内容，再扫一眼，如果跟我猜测的八九不离十，我基本就关掉了。如果有跟我的推测大相径庭，我一定会一口气读完，而不是收藏起来以后再读。</p>
<p>之所以我说收藏什么也改变不了，是因为读别人的东西，思考的过程是别人的。努力去减少从别人文章里阅读学习的频率，多去读一手资料然后自己总结。</p>
<h3 id="培养一些对产品的感觉"><a href="#培养一些对产品的感觉" class="headerlink" title="培养一些对产品的感觉"></a>培养一些对产品的感觉</h3><p>你有没有在 PM 说了要实现某个效果或者功能的时候，你站出来反对，说这样并不合理。如果你有过，那么我想你也是一个有理想的开发者，而不是一个“码农”。聪明人喜欢跟聪明人合作，大家一开口就互相明白了。没有人是天生聪明的，只是看的多了，想的多了，就显得聪明了。</p>
<p>看些什么呢？看看一个优秀的 App 早起的冷启动是怎么做的，看看 Apple Store 或者 Google Play 上最近有没有什么新奇的 App 出现，看看 Tech Crunch 上最近又有什么天马行空的项目融到了钱。</p>
<p>想些什么呢？想想一个产品功能的存在有没有意义，他的下个阶段又会怎么发展，想想某段文案是否会降低产品某个功能的转换率，想想某个动画效果是否是很恼人的存在，如果你可以对微信加一个功能，减一个功能，你又会作何选择。</p>
<h3 id="每个人都应该有个-idea-list"><a href="#每个人都应该有个-idea-list" class="headerlink" title="每个人都应该有个 idea list"></a>每个人都应该有个 idea list</h3><p>我在西安读大学那会儿开始，就有一个小本子，记录着突然冲入自己脑海的一些靠谱或是离谱小想法。上面会写着类似：</p>
<ul>
<li>做个 Every big moment，用手机记录自己的每个值得纪念的瞬间，然后打印成相册发给我或者放在网上当做自己的 Profile。</li>
<li>狗狗出门便便，主人打扫很不方便，有没有更好的方案？</li>
<li>程序一旦崩溃，直接发送操作记录和堆栈信息到 Dashboard，而不要让测试人员努力重现，写个 SDK，搭建一套服务，一定会很好用。</li>
<li>很多的 Bug 追踪服务，为什么不在错误堆栈旁边，展示出来这个 Bug 的解决方案，哪怕是一个 StackOverflow 的链接也好，这样我就不用去自己搜索了。</li>
</ul>
<p>那个小本上记录了自己好多做产品的想法，有不少，后来市面上都出来了相应的产品。也有一些现在看来很可笑，有的想法今天再翻看的时候，仍然会冲动的想要组团队去实现。</p>
<p>Idea list 总是能激发你去创造的欲望，有空，就去不断的记录自己的 Idea list 吧。</p>
<p>另外，不要把自己的 idea 当做一个秘密，多和人去讨论自己的想法，在不断的否认和肯定中，完善自己的想法，idea 是不值钱的，只有实现它才是有价值的。</p>
<h3 id="争取去更优秀的地方"><a href="#争取去更优秀的地方" class="headerlink" title="争取去更优秀的地方"></a>争取去更优秀的地方</h3><p>这句话可能大家都懂，但我的体会却比大家都深刻。</p>
<p>我在西安一个叫西北大学的地方读的大学，是一个普通的 211。计算机专业客观来说比较一般，在来北京师范大学读研究生之前，我甚至没听说过 ACM。</p>
<p>Python、Ruby、Node 这种编程语言在我们的计算机系，根本连影子都没有，所以正统的计算机技能点基本都是 C，C++这样，这并没有什么错⋯⋯ 但路子就变窄了很多，学长毕业去个腾讯、阿里，已经能被大家推上神坛。</p>
<p>本科学校大二会给计算机系开一门日语课。为什么会给计算机系开日语课呢？因为很多外包来自日本。这个逻辑我一直都接受不能。这都什么年代了，我们早都不需要用外包支撑我国的 IT 产业了。</p>
<p>学校给学生的定位更多是一个学校展示就业率的棋子，你会什么不重要啦，只要你最后有个工作就好了，不要拖累了学校的名声。</p>
<p>来师大后，感受到了前所未有的转变。学校整体的气氛相当自由，很多老师们，都是各自领域的专家，你问一个问题，他们能给你引导出很多有意思的点。久而久之，你也会被这些感染到。有时候，我也会想，以后稳定下来之后，要不要去申请个美国名校读一读。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.daimajia.com/fen-xiang-yi-xie-zi-ji-de-xue-xi-guo-cheng-he-xue-xi-fang-fa/" target="_blank" rel="external">分享一些自己的学习过程和学习方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程入门]]></title>
      <url>http://jianwl.com/2016/10/16/Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Shell</code>是基于命令行的解释器，它连接用户和操作系统，允许通过编写脚本来执行系统命令。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p><strong>1、环境变量</strong></p>
<p><code>实战1：查看环境变量env</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/33734703.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HOME : 代表用户主文件夹</div><div class="line">SHELL : 目前这个环境使用的SHELL是哪个程序</div><div class="line">PATH : 执行文件查找路径，目录与目录中间以冒号`:`分隔</div><div class="line">LANG : 语系数据，很多信息都会用到它。</div></pre></td></tr></table></figure>
<p><strong>2、文件系统及程序的限制关系：ulimit</strong></p>
<p><code>场景：</code>Linux主机里同时登陆10个人，每个人同时打开100个文件，每个文件10MB，那么Linux主机内存需要<code>10 * 100 * 10 = 10000MB = 10G</code>,这样系统不挂掉才怪，为了预防这种情况<code>bash</code>可以限制用户的某些系统资源，具体配置用<code>ulimit</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-H : 严格设置，必定不能超过这个设置的数值</div><div class="line">-S : 警告设置，可以超过这个数值，但若超过则有警告信息</div><div class="line">-a : 后面不接任何参数，可列出所有限制额度</div><div class="line">-c : 当某些进程发成错误时，系统可能会将进程在内存中的信息写成文件，这种文件成为内核文件。</div><div class="line">-f : 此SHELL可以创建的最大文件容量(一般设为2GB)单位KB</div><div class="line">-d : 进程可使用的最大断裂内存容量</div><div class="line">-l : 可用于锁定内存量</div><div class="line">-t : 可使用最大CPU时间</div><div class="line">-u : 单一用户可以使用的最大进程数量</div></pre></td></tr></table></figure>
<p><code>实战1：查看当前用户的所有限制数据值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/71746717.jpg" alt=""></p>
<p><code>实战2：限制用户仅仅能创建10MB容量以下的文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/80080741.jpg" alt=""></p>
<p><strong>3、一次执行多个命令 &amp;&amp; 、||</strong></p>
<p><code>场景：</code>很多命令我想要一次输入去执行，而不想分次执行。有两个办法，一个是编写<code>shell script</code>脚本去执行，另一个是一次性输入多重命令。</p>
<p><code>基本语法如下</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmd1 &amp;&amp; cmd2 --&gt; 若cmd1成功，$?(命令回传码)=0，则执行cmd2，反之cmd1失败，$?≠0，则cmd2不执行</div><div class="line"></div><div class="line">cmd1 || cmd2 --&gt; 若cmd1成功，$?(命令回传码)=0，则不执行cmd2，反之cmd1失败，$?≠0，则cmd2执行</div></pre></td></tr></table></figure>
<p><code>实战1：&amp;&amp;命令</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/3250026.jpg" alt=""></p>
<p><code>实战2：||命令,cmd1执行不成功，执行cmd2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/27649803.jpg" alt=""></p>
<p><code>实战3：||命令，cmd2执行成功，不执行cmd2</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/78874389.jpg" alt=""></p>
<p><strong>4、选取命令cut、grep</strong></p>
<p><code>cut</code>命令，可以将一段信息的某一段切出来，处理的信息是以行为单位，基本语法<code>cut -d &#39;分隔字符&#39; -f &#39;第几段&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-d : 后面接分隔字符，与-f一起使用</div><div class="line">-f : 依据-d的分隔符将一段信息切割成为数段，用-f取出第几段的意思；</div><div class="line">-c : 以字符的单位取出固定字符区间</div></pre></td></tr></table></figure>
<p><code>实战1：将PATH变量取出，找出第5个路径</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/34433783.jpg" alt=""></p>
<p><code>实战2，将PATH变量取出，找出第3个和第5个路径</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/77994451.jpg" alt=""></p>
<p><code>grep命令</code>是分析一行信息，若当中有需要的信息，将该行拿出来，基本语法<code>grep [-acinv] [--color=auto] &#39;查找字符串&#39; filename</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-a : 将binary文件以text文件的方式查找数据</div><div class="line">-c : 计算找到&apos;查找字符串&apos;的次数</div><div class="line">-i : 忽略大小写的不同</div><div class="line">-v : 反向选择</div><div class="line">--color=auto : 可以将找到的关键字部分加上颜色；</div></pre></td></tr></table></figure>
<p><code>实战1：将last当中出现jianweilin的那一行取出来</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/64550336.jpg" alt=""></p>
<p><code>实战2：取出jianweilin那一行的第一列</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/56948030.jpg" alt=""></p>
<p><code>实战3：取出文件中包含console的行，并标红关键字</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/65838802.jpg" alt=""></p>
<p><strong>5、排序命令sort、wc、uniq</strong></p>
<p><code>sort</code>命令可以依据不同的数据类型来排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-f : 忽略大小写的差异</div><div class="line">-b : 忽略最前面的空格符部分</div><div class="line">-M : 以月份的名字来排序</div><div class="line">-n : 使用纯数字来进行排序</div><div class="line">-r : 反向排序</div><div class="line">-u : uniq，相同的数据中，仅出现一行代表</div><div class="line">-t : 分隔符</div><div class="line">-k : 以那个区间来进行排序</div></pre></td></tr></table></figure>
<p><code>实战1：利用last输出的数据，并加以排序</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/47905704.jpg" alt=""></p>
<p><code>实战2：1.log的内容，每行的数据以:分隔，按第2列来排序</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/77485521.jpg" alt=""></p>
<p><code>uniq</code>命令，将重复的数据仅列出一个显示<code>uniq [-ic]</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-i : 忽略大小写字符</div><div class="line">-c : 进行计数</div></pre></td></tr></table></figure>
<p><code>实战1：统计每个用户登录的总次数</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/83045345.jpg" alt=""></p>
<p><code>wc</code>命令，用于统计文件里有多少字，多少行，多少字符,基本语法<code>wc [-lwm]</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-l : 仅列出行</div><div class="line">-w : 仅列出多少字</div><div class="line">-m : 多少字符</div></pre></td></tr></table></figure>
<p><code>实战1：统计行数、单词数、字符数</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/17425650.jpg" alt=""></p>
<p><code>6、字符转换命令tr</code></p>
<p><code>tr</code>命令可以删除一段信息中的文字，并用其他文字信息进行替换。语法为<code>tr [-ds] set1  set</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-d ：删除信息中‘set1’字符串</div><div class="line">-s : 用‘set’字符串替换‘set1’</div></pre></td></tr></table></figure>
<p><code>实战1：将小写字符换成大写字符</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/38444009.jpg" alt=""></p>
<p><code>实战2：PATH路径，删除&#39;:&#39;</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/24188455.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Linux鸟哥的私房菜</li>
<li>Linux命令行与shell脚本编程大全</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux之常用命令]]></title>
      <url>http://jianwl.com/2016/10/15/Linux%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Linux命令非常多，我的策略是熟练掌握常用的命令，遇到不懂的用<code>man</code>命令查下即可。下面总结下常用的Linux命令。</p>
<h3 id="理论-amp-实战"><a href="#理论-amp-实战" class="headerlink" title="理论 &amp; 实战"></a>理论 &amp; 实战</h3><p><strong>1、cd命令</strong></p>
<p>用于切换当前名录</p>
<p><code>实战1：切换到上一层目录</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-15/12530934.jpg" alt=""></p>
<p><code>实战2：切换到下一层目录</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-15/95348529.jpg" alt=""></p>
<p><strong>2、ls命令</strong></p>
<p>查看文件与目录的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-l : 列出长数据串，包含文件的属性与权限数据等</div><div class="line">-a : 列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用） </div><div class="line">-d ：仅列出目录本身，而不是列出目录的文件数据</div><div class="line">-h ：将文件容量以较易读的方式（GB，kB等）列出来  </div><div class="line">-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</div></pre></td></tr></table></figure>
<p><code>实战1：查看当前文件下的所有文件，并显示文件属性和权限数据</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/32656794.jpg" alt=""></p>
<p><strong>3、grep命令</strong></p>
<p>用于一些命令的输出进行筛选</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-a ：将binary文件以text文件的方式查找数据  </div><div class="line">-c ：计算找到‘查找字符串’的次数</div><div class="line">-i ：忽略大小写的区别，即把大小写视为相同</div><div class="line">-v ：反向选择，即显示出没有‘查找字符串’内容的那一行</div></pre></td></tr></table></figure>
<p><code>实战1：检索Java文件夹</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/4322651.jpg" alt=""></p>
<p><code>实战2：统计名为Java文件夹的数量</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/85863738.jpg" alt=""></p>
<p><strong>4、find命令</strong></p>
<p><code>find</code>是一个基于查找的功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 与时间有关的参数：</div><div class="line">-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；</div><div class="line">-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；</div><div class="line">-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；</div><div class="line">-newer file : 列出比file还要新的文件名   </div><div class="line"></div><div class="line"># 与文件权限及名称有关的参数：</div><div class="line">-name filename ：找出文件名为filename的文件</div></pre></td></tr></table></figure>
<p><code>实战1：查找今天内改过的文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/93572660.jpg" alt=""></p>
<p><code>实战2：查找Work目录下的test.txt文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/49366537.jpg" alt=""></p>
<p><strong>5、cp命令</strong></p>
<p>复制文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-a ：将文件的特性一起复制</div><div class="line">-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</div><div class="line">-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行</div><div class="line">-r ：递归持续复制，用于目录的复制行为 </div><div class="line">-u ：目标文件与源文件有差异时才会复制</div></pre></td></tr></table></figure>
<p><code>实战1：复制文件若目标文件已存在，会询问是否覆盖</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/73728478.jpg" alt=""></p>
<p><strong>6、mv命令</strong></p>
<p>移动文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  </div><div class="line">-i ：若目标文件已经存在，就会询问是否覆盖  </div><div class="line">-u ：若目标文件已经存在，且比目标文件新，才会更新</div></pre></td></tr></table></figure>
<p><code>实战1：移动文件</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/42236280.jpg" alt=""></p>
<p><strong>7、rm命令</strong></p>
<p>删除文件或目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息 </div><div class="line">-i ：互动模式，在删除前会询问用户是否操作</div><div class="line">-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</div></pre></td></tr></table></figure>
<p><code>实战1：删除文件前，会询问用户是否删除</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/42206997.jpg" alt=""></p>
<p><strong>8、ps命令</strong></p>
<p>将某个时间点的进程运行情况选取下来并输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-A ：所有的进程均显示出来 </div><div class="line">-a ：不与terminal有关的所有进程</div><div class="line">-u ：有效用户的相关进程</div><div class="line">-x ：一般与a参数一起使用，可列出较完整的信息 </div><div class="line">-l ：较长，较详细地将PID的信息列出</div></pre></td></tr></table></figure>
<p><code>ps</code>命令常用搭配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps aux # 查看系统所有的进程数据</div><div class="line">ps ax # 查看不与terminal有关的所有进程 </div><div class="line">ps -lA # 查看系统所有的进程数据</div></pre></td></tr></table></figure>
<p><code>实战1：查看系统所有进程</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/17901898.jpg" alt=""></p>
<p><strong>9、kill命令</strong></p>
<p>向某个PID传送一个信号,基本语法如下：<code>kill -signal PID</code></p>
<p><code>signal常用参数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1：SIGHUP，启动被终止的进程  </div><div class="line">2：SIGINT，相当于输入ctrl+c，中断一个程序的进行  </div><div class="line">9：SIGKILL，强制中断一个进程的进行 </div><div class="line">15：SIGTERM，以正常的结束进程方式来终止进程 </div><div class="line">17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行</div></pre></td></tr></table></figure>
<p><code>实战1：杀死某个PID</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/64733197.jpg" alt=""></p>
<p><strong>10、file命令</strong></p>
<p>判断文件的基本数据，基本语法<code>file filename</code></p>
<p><code>实战1：确定文件的基本数据</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/47080888.jpg" alt=""></p>
<p><strong>11、tar命令</strong></p>
<p>对文件进行打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-c ：新建打包文件 </div><div class="line">-t ：查看打包文件的内容含有哪些文件名 </div><div class="line">-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中 </div><div class="line">-j ：通过bzip2的支持进行压缩/解压缩</div><div class="line">-z ：通过gzip的支持进行压缩/解压缩 </div><div class="line">-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来</div><div class="line">-f filename ：filename为要处理的文件</div><div class="line">-C dir ：指定压缩/解压缩的目录dir</div></pre></td></tr></table></figure>
<p><code>tar命令常用组合</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># tar包</div><div class="line">tar -cvf text_02.tar text_02.txt 压缩text_02.txt为text_02.tar</div><div class="line">tar -xvf text_02.tar 解压text_02.tar为text_02.txt</div><div class="line"> </div><div class="line"># tar.gz包</div><div class="line">tar -czf text_02.tar.gz text_02.txt 压缩text_02.txt为text_02.tar.gz</div><div class="line">tar -xzvf text_02.tar.gz 解压text_02.tar.gz为text_02.txt</div></pre></td></tr></table></figure>
<p><code>实战1：压缩为tar.gz包</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/44362048.jpg" alt=""></p>
<p><code>实战2：解压tar.gz包</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/7921494.jpg" alt=""></p>
<p><strong>12、chown命令</strong></p>
<p>用于改变文件的所有者，基本语法是<code>chown 用户:用户组 需要修改的文件名</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-c :显示更改的部分的信息</div><div class="line">-f :忽略错误信息</div><div class="line">-h :修复符号链接</div><div class="line">-R :处理指定目录以及其子目录下的所有文件</div><div class="line">-v :显示详细的处理信息</div></pre></td></tr></table></figure>
<p><code>实战1：改变test_02.txt文件的拥有者为root权限,用户组为staff</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/50637932.jpg" alt=""></p>
<p><code>实战2：改变test_02.txt文件的拥有者为jianweilin权限</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/49550628.jpg" alt=""></p>
<p><strong>13、chmod命令</strong></p>
<p>用于改变文件的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-c 当发生改变时，报告处理信息</div><div class="line">-f 错误信息不输出</div><div class="line">-R 处理指定目录以及其子目录下的所有文件</div><div class="line">-v 运行时显示详细处理信息</div><div class="line"></div><div class="line"># 权限范围</div><div class="line">u ：目录或者文件的当前的用户</div><div class="line">g ：目录或者文件的当前的群组</div><div class="line">o ：除了目录或者文件的当前用户或群组之外的用户或者群组</div><div class="line">a ：所有的用户及群组</div><div class="line"></div><div class="line"># 权限代号</div><div class="line">r ：读权限，用数字4表示</div><div class="line">w ：写权限，用数字2表示</div><div class="line">x ：执行权限，用数字1表示</div><div class="line">- ：删除权限，用数字0表示</div></pre></td></tr></table></figure>
<p><code>实战1：test_02.txt文件删除当前用户的读权限</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/14943806.jpg" alt=""></p>
<p><code>实战2：test_02.txt文件给当前用户及所有用户组加上写权限</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-16/13772423.jpg" alt=""><br>未完待续….</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Linux命令行与Shell脚本编程大全</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之日期函数运算]]></title>
      <url>http://jianwl.com/2016/10/13/MYSQL%E4%B9%8B%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常项目中，常常需要查询某个时间的数据，那么熟练运用<code>MYSQL</code>的日期函数就显得很有用了。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>场景1:获取当前时间</strong></p>
<p><code>方式1：获取年月日时分秒 -&gt; SELECT NOW()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/1444048.jpg" alt=""></p>
<p><code>方式2：获取年月日时分秒 -&gt; SELECT CURRENT_TIMESTAMP()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/92157935.jpg" alt=""></p>
<p><code>方式3: 获取年月日 -&gt; SELECT current_date()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/2987579.jpg" alt=""></p>
<p><code>方式4: 获取时分秒 -&gt; SELECT current_time()</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/43833424.jpg" alt=""></p>
<p><strong>场景2:时间加法&amp;减法运算</strong></p>
<p><code>方式1: 增加天数 -&gt;  SELECT date_add(NOW(),interval &#39;1 01:01:01&#39; day_second)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/54720309.jpg" alt=""></p>
<p><code>方式2：增加小时 -&gt; SELECT date_add(NOW(),interval &#39;01:01:01&#39; hour_second)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/49340433.jpg" alt=""></p>
<p><code>方式3：增加月数 -&gt; SELECT date_add(now(),interval 1 month)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/82457234.jpg" alt=""></p>
<p><code>减法运算与加法运算相似,减少月数 -&gt; SELECT  date_sub(NOW(),interval 1 month)</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-13/91908338.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://ylive.blog.51cto.com/881983/537257" target="_blank" rel="external">Mysql日期函数</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo报错Module version mismatch. Expected 47, got 46.]]></title>
      <url>http://jianwl.com/2016/10/13/Hexo%E6%8A%A5%E9%94%99Module-version-mismatch-Expected-47-got-46/</url>
      <content type="html"><![CDATA[<p>升级了Node.js后，发现在项目目录中执行hexo相关命令会报出错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[Error: Module version mismatch. Expected 47, got 46.]</div><div class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div></pre></td></tr></table></figure>
<p><code>解决方案：</code> </p>
<ol>
<li>执行<code>npm uninstall hexo</code>卸载<code>hexo</code>；</li>
<li>重新安装hexo，<code>npm install -g hexo</code>；</li>
<li>到博客目录执行<code>npm install</code>，<code>hexo clean</code>，<code>hexo generate</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之垃圾回收器]]></title>
      <url>http://jianwl.com/2016/10/10/Java%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>内存的动态分配与内存回收技术已相当成熟，那为什么我们还要去了解GC和内存分配呢？答案很简单，当需要排查各种内存溢出、内存泄露问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们需要对这些“自动化”的技术实施必要的监控和调节。</p>
<h3 id="垃圾回收器理论知识"><a href="#垃圾回收器理论知识" class="headerlink" title="垃圾回收器理论知识"></a>垃圾回收器理论知识</h3><p>要完成GC需要考虑以下三件事情：1.哪些内存需要回收？2.什么时候回收？3.如何回收？接下来会一一解答这些问题。</p>
<p><strong>哪些内存需要回收</strong></p>
<p>Java内存运行时，程序计数器、虚拟栈、本地方法栈这3个区域随线程生，随线程灭，每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知了，因此这几个区域的内存分配和回收都具备确定性，不需要过多考虑回收的问题，因为方法或线程结束了，内存自然就回收了。</p>
<p>而Java堆和方法区则不一样，一个方法中的多个分支需要的内存可能不一样，只有在运行期间时才知道会创建哪些对象，这部分内存的分配和回收都是动态的，是垃圾回收器关注的对象。</p>
<p><strong>什么时候回收</strong></p>
<p>没有被引用的对象将被GC回收。</p>
<p><strong>如何回收</strong></p>
<p><code>引用计数算法</code>：给对象添加一个引用计数器，每当一个地方引用它，计数器值就加1，当引用失效时，计数器值就减1，任何时刻计数器为0的对象就不可能再被使用了。</p>
<p>很多人都认为GC是这种回收策略，但实际上主流的Java虚拟机都没有使用<code>引用计数算法</code>，因为它难以解决循环引用的问题。</p>
<p>举个例子：对象A和对象B都有instance字段，<code>A.instance = B，B.instance = A</code>,这两个对象互相引用对方，导致他们的引用计数都不为0，如果GC使用引用计数算法，那么他们不会被回收。但实际呢？让我们来实践一下。</p>
<p><code>ReferenceCountingGC.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// VM args: -XX:+PrintGCDetails 用于输出GC的详细日志 </div><div class="line">public class ReferenceCountingGC &#123;</div><div class="line"></div><div class="line">    public Object instance = null;</div><div class="line">    private static final int _1MB = 1024 * 1024 ;</div><div class="line"></div><div class="line">    // 这个成员的唯一意义就是占点内存,以便能在GC日志中看清楚是否被回收过</div><div class="line">    private byte[] bigSize = new byte[2 * _1MB];</div><div class="line"></div><div class="line">    public static void testGC()&#123;</div><div class="line">        ReferenceCountingGC objA = new ReferenceCountingGC();</div><div class="line">        ReferenceCountingGC objB = new ReferenceCountingGC();</div><div class="line">        objA.instance = objB;</div><div class="line">        objB.instance = objA;</div><div class="line"></div><div class="line">        objA = null;</div><div class="line">        objB = null;</div><div class="line"></div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        testGC();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-10/83029188.jpg" alt=""></p>
<p><code>分析：</code></p>
<p>GC日志中包含<code>6758K -&gt; 496K</code>意味着虚拟机并没有因为对象互相引用就不回收他们，侧面说明虚拟机并不是通过引用算法来判断的。那虚拟机是中什么算法来回收的呢？</p>
<p><code>可达性分析算法</code></p>
<p>主流的Java虚拟机是用可达性分析来判断对象是否可回收的。基本思想是通过一系列<code>GC Roots</code>的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链。当一个对象到<code>GC Roots</code>没有任何引用链条相连，代表此对象可回收。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-10/72297953.jpg" alt=""></p>
<p>可作为<code>GC Roots对象</code>有：</p>
<ol>
<li>虚拟栈中引用对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>Native方法引用对象</li>
</ol>
<p><strong>引用</strong></p>
<p>在<code>JDK1.2</code>以前，一个对象只有引用和没有引用两种状态，<code>JDK1.2</code>之后，对引用概念进行扩充，将引用分为<code>强引用</code>、<code>软引用</code>、<code>弱引用</code>、<code>虚引用</code>4中，强度依次递减。</p>
<p><code>强引用</code>：类似于<code>Object a = new Object()</code>,只要强引用存在，垃圾回收器永远不会回收引用对象。</p>
<p><code>软引用</code>：描述一些有用，但并非必须的引用。在系统发生内存溢出异常之前，将会把这些对象回收，如果回收后还没有足够内存，才会抛出内存溢出异常。</p>
<p><code>弱引用</code>：描述非必需对象，弱引用关联对象只能生存到下一次垃圾收集器发生之前，当垃圾回收期工作时，无论当前内存是否足够，都会回收弱引用对象。</p>
<p><code>虚引用</code>：一个对象是否有虚引用，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。唯一的目的就是能够在这个对象被回收器回收时会收到系统通知。</p>
<p><code>引用实战</code></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解Java虚拟机</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之内存区域]]></title>
      <url>http://jianwl.com/2016/10/09/Java%E4%B9%8B%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于Java开发人员来说，由于在虚拟机自动内存管理机制的帮助下，不在需要为每一个<code>new</code>的对象去配对<code>free</code>代码，不容易出现内存泄露的问题，但一旦出现内存泄露方面的问题，如果不了解虚拟机是怎么使用内存的，那么排错误将会成为一项异常艰难的问题。接下来，让我们一起来学习虚拟机的内存分配。</p>
<h3 id="Java虚拟机运行时数据区"><a href="#Java虚拟机运行时数据区" class="headerlink" title="Java虚拟机运行时数据区"></a>Java虚拟机运行时数据区</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/69952506.jpg" alt=""></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1、 堆内存溢出报OutOfMemoryError</strong></p>
<p>限制Java堆最小值<code>-Xms</code>和最大值<code>-Xmx</code>为20M，避免自动扩展。通过参数<code>-XX:+HeapDumpOnOutOfMemoryError</code>可以让虚拟机在出现内存溢出时<code>Dump</code>出当前的内存堆转储快照以便之后分析。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// VM Args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</div><div class="line">public class HeapOOM &#123;</div><div class="line">    static class OOMObject&#123;&#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        while (true)&#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/10597433.jpg" alt=""></p>
<p><strong>2、栈内存溢出报StackOverFlowError</strong></p>
<p><code>实验1：</code></p>
<p>使用<code>-Xss</code>参数减少栈内存容量，结果:抛出<code>StackOverflowError</code>异常，异常出现时输出堆栈深度相应缩小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// VM Args: -Xss160k</div><div class="line">public class JavaVMStackSOF &#123;</div><div class="line">    private int stackLength = 1;</div><div class="line"></div><div class="line">    public void stackLeak()&#123;</div><div class="line">        stackLength ++;</div><div class="line">        stackLeak();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        JavaVMStackSOF oom = new JavaVMStackSOF();</div><div class="line">        try&#123;</div><div class="line">            oom.stackLeak();</div><div class="line">        &#125;catch (Throwable e)&#123;</div><div class="line">            System.out.println(&quot;stack length : &quot; + oom.stackLength);</div><div class="line">            throw e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/62380876.jpg" alt=""></p>
<p><code>实验2：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// VM args: -Xss4096M(不妨设大些)</div><div class="line">public class JavaVMStackOOM &#123;</div><div class="line">    private void dontStop()&#123;</div><div class="line">        while (true)&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void stackLeakByThread()&#123;</div><div class="line">        while (true)&#123;</div><div class="line">            Thread thread = new Thread(() -&gt; dontStop());</div><div class="line">            thread.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Throwable&#123;</div><div class="line">        JavaVMStackOOM oom = new JavaVMStackOOM();</div><div class="line">        oom.stackLeakByThread();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果:</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/93987125.jpg" alt=""></p>
<p><code>分析:</code><br>栈分配的内存越大，越容易出现内存溢出,其原因不难理解，操作系统分配给每个进程的内存是有限制的，譬如32的Windows限制为2GB，虚拟机提供参数来控制<code>JAVA</code>堆和方法区这两部分的最大内存。 <strong>剩余内存2G -&gt; 减去最大堆内存(Xmx) -&gt; 减去最大方法区容量(MaxPermSize) -&gt; 程序计数器消耗内存很小忽略 -&gt; 剩下就是虚拟栈和本地方法栈。</strong>栈越大，建立线程时越容易把剩下的内存耗尽。</p>
<p><strong>3、方法区和运行时常量池溢出</strong></p>
<p>String.intern()是一个Native方法，他的作用是如果字符串常量池中包含一个等于此String对象的字符串，则返回池中这个字符串的String对象，否则对象包含的字符串添加到常量池中，并返回String对象的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// JDK1.7前有效，到JDK1.8已移除永久代 </div><div class="line">// VM args: -XX:PermSize=10M -XX:MaxPermSize=10M</div><div class="line">public class RuntimeConstantPoolOOM &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 使用List保持着常量池引用,避免FULL GC回收常量池行为</div><div class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        // 10MB的PermSize在interger范围内足够产生OOM了</div><div class="line">        int i = 0;</div><div class="line">        while(true)&#123;</div><div class="line">            list.add(String.valueOf(i++).intern());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/63281885.jpg" alt=""></p>
<p><strong>4、直接内存溢出(DirectOutOfMemory)</strong></p>
<p><code>DirectMemory</code>容量可通过<code>-XX:MaxDirectMemorySize</code>指定，如果不指定，则默认与Java堆最大值一样。以下代码通过反射获取Unsafe实例进行内存分配，抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是<code>unsafe.allocateMemory()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// VM args: -Xmx20M -XX:MaxDirectMemorySize=10M</div><div class="line">public class DirectMemoryOOM &#123;</div><div class="line">    private static final int _1MB = 1024 * 1024 * 1024;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        Field unsaftField = Unsafe.class.getDeclaredFields()[0];</div><div class="line">        unsaftField.setAccessible(true);</div><div class="line">        Unsafe unsafe = (Unsafe) unsaftField.get(null);</div><div class="line">        while (true)&#123;</div><div class="line">            unsafe.allocateMemory(_1MB);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果:</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-10/69040604.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>深入理解Java虚拟机 – 周志明</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud之服务注册与发现]]></title>
      <url>http://jianwl.com/2016/10/08/SpringCloud%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="为什么要使用服务发现"><a href="#为什么要使用服务发现" class="headerlink" title="为什么要使用服务发现"></a>为什么要使用服务发现</h3><p>设想一下，我们的代码用<code>REST API</code>和<code>Thrift API</code>来调用服务，为了完成一次请求，代码需要知道服务实例的网络位置(IP地址和端口)，传统应用都运行在物理硬件上，服务实例的网络位置都是相对固定的，例如，代码可以从一个经常变更的配置文件中读取网络位置。</p>
<p>而对于一个现代的，基于微服务的应用来说，这却是一个麻烦的问题，架构如图所示。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/1336276.jpg" alt=""></p>
<p>服务实例的网络位置都是动态分配的，而且因为扩展、失效和升级需求，服务实例会经常动态改变，因为，客户端代码需要使用一种更加复杂的服务发现机制。</p>
<p>目前有两大类服务发现模式：<a href="http://microservices.io/patterns/client-side-discovery.html?utm_source=service-discovery-in-a-microservices-architecture&amp;utm_medium=blog" target="_blank" rel="external">客户端发现</a>和<a href="http://microservices.io/patterns/server-side-discovery.html?utm_source=service-discovery-in-a-microservices-architecture&amp;utm_medium=blog" target="_blank" rel="external">服务端发现</a></p>
<h3 id="客户端发现模式"><a href="#客户端发现模式" class="headerlink" title="客户端发现模式"></a>客户端发现模式</h3><p>当使用客户端发现模式时，客户端负责决定相应的服务实例的网络位置，并且对请求实现负责均衡。客户端从一个注册服务中查询，其中是所有可用服务实例的库,客户端使用负载均衡算法从多个服务实例中选择出一个，然后发出请求。架构如图所示：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/13733713.jpg" alt=""></p>
<p>服务实例的网络位置是在启动时注册到服务注册表中，并且服务终止时从注册表中删除，服务实例注册信息一般使用心跳机制来定期刷新。</p>
<p><a href="https://netflix.github.io/" target="_blank" rel="external">Netflix OSS</a>提供了一种非常棒的客户端发现模式，<a href="https://github.com/Netflix/eureka" target="_blank" rel="external">Netflix Eureka</a>是一个注册服务表，为服务实例注册管理和查询可用实例，提供了REST API接口。<a href="https://github.com/Netflix/ribbon" target="_blank" rel="external">Netflix Ribbon</a>是一种IPC客户端，与Eureka合同工作实现对请求的负载均衡。</p>
<p><code>优点</code></p>
<p>除了服务注册表，没有其他改变的因素，客户端知道可用服务注册表信息，因此客户端可以使用哈希一直性变得更加聪明，更加有效的负载均衡。</p>
<p><code>缺点</code></p>
<p>需要针对不同的编程语言注册不同的服务，在客户端需要为每种语言开发不同的服务。</p>
<h3 id="服务端发现模式"><a href="#服务端发现模式" class="headerlink" title="服务端发现模式"></a>服务端发现模式</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/19412124.jpg" alt=""></p>
<p>客户端通过负载均衡器向各某个服务器提出请求，负载均衡器向服务注册表发出请求，将每个请求转发往可用的服务实例，跟客户端发现一样，服务实例在服务注册表中注册或注销。</p>
<p>AWS Elastic Load Balancer(ELB)是一种服务端发现路由的例子，ELB一般用于均衡从网络来的访问流量，也可以使用ELB来均衡VPC内部的流量，客户端使用DNS，通过ELB发出请求(HTTP或者TCP)，ELB负载均衡器负载在注册的EC2实例或者ECS容器之间均衡负载，并不存在一个分离的注册表，而EC2实例和ECS实例也想ELB注册。</p>
<p>HTTP服务和类似NGNIX和<a href="https://www.nginx.com/products/" target="_blank" rel="external">NGINX Plus</a>的负载均衡器都可以作为服务端发现均衡器，例如，<a href="https://www.airpair.com/scalable-architecture-with-docker-consul-and-nginx" target="_blank" rel="external">这篇博文</a>就描述如何使用<a href="https://github.com/hashicorp/consul-template" target="_blank" rel="external">Consul Template</a>来动态配置NGNIX反向代理。Consul Template是周期性从存放在Consul Template注册表中配合数据重建配置文件的工具。当文件发生变化时，会运行一个命令，在如何博客中，Consul Template产生了一个nginx.conf文件，用于配置反向代理，然后运行一个命令，告诉NGINX重新调入配置文件，更复杂的例子可以用HTTP API或者DNS动态重新配置NGINX Plus.</p>
<p>某些部署环境，例如<a href="https://github.com/kubernetes/kubernetes/blob/master/docs/design/architecture.md" target="_blank" rel="external">Kubernetes</a>和<a href="https://mesosphere.github.io/marathon/docs/service-discovery-load-balancing.html" target="_blank" rel="external">Marathon</a>在集群每个节点上运行一个代理，此代理作为服务端发现负载均衡器，为了向服务发出请求，客户端使用主机IP和分配的端口通过代理请求路由发出去，代理将次请求透明的转发到集群中可用的服务实例。</p>
<p><code>优点</code></p>
<p>客户端无需关注发现的细节，客户端只需简单的向负载均衡器发送请求，实际上减少了编程语言框架需要完成的发现逻辑。</p>
<p><code>缺点</code></p>
<p>除非部署环境提供负载均衡器，否则负载均衡器是另一个需要配置管理的高可用系统功能。</p>
<h3 id="服务注册表"><a href="#服务注册表" class="headerlink" title="服务注册表"></a>服务注册表</h3><p><a href="http://microservices.io/patterns/service-registry.html" target="_blank" rel="external">服务注册表</a>是服务发现很重要的部分，它是包含服务实例网络地址的数据库，服务注册表需要高可用而且随时更新，客户端可以缓存从服务注册表获得的网络地址，然而，这些信息最终会变得过时，客户端也无法服务实例。因此，服务注册表由若干使用复制协议保持同步的服务器构成。</p>
<p>如前所述，<a href="https://github.com/Netflix/eureka" target="_blank" rel="external">Netflix Eureka</a>是一个服务注册表很好地例子，提供了REST API注册和请求服务实例，服务实例使用POST请求注册网络地址，每30秒必须使用PUT方法更新注册表，使用HTTP DELETE请求或者实例超时来注销。客户端可以使用HTTP GET请求接受注册服务实例信息。</p>
<p>Netflix通过在每个AWS EC2域运行一个或者多个Eureka服务实现高可用性，每个Eureka服务器都运行在拥有弹性IP地址的EC2实例上，DNS TEXT记录用于存储Eureka集群配置，其中存放从可用域到一系列Eureka服务器网络地址的列表。当Eureka服务启动时，向DNS请求接受Eureka集群配置，确认同伴位置，给自己分配一个未被使用的弹性IP地址。</p>
<p>Eureka客户端 —&gt; 服务和服务客户端 —&gt; 向DNS请求发现Eureka服务的网络地址，客户端首选使用同一域内的服务。然而，如果没有可用服务，客户端会使用另外一个可用域的Eureka服务。</p>
<p>另外一些服务注册表例子包括：</p>
<ul>
<li><a href="https://github.com/coreos/etcd" target="_blank" rel="external">etcd</a> – 是一个高可用，分布式的，一致性的，键值表，用于共享配置和服务发现。两个著名案例包括Kubernetes和Cloud Foundry。</li>
<li><a href="https://www.consul.io/" target="_blank" rel="external">consul</a> – 是一个用于发现和配置的服务。提供了一个API允许客户端注册和发现服务。Consul可以用于健康检查来判断服务可用性。</li>
<li><a href="http://zookeeper.apache.org/" target="_blank" rel="external">Apache ZooKeeper</a> – 是一个广泛使用，为分布式应用提供高性能整合的服务。Apache ZooKeeper最初是Hadoop的子项目，现在已经变成顶级项目。</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>注册服务中心</strong></p>
<p>创建一个SpringBoot工程，并在<code>pom.xml</code>中引入需要依赖的内容</p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;springclouddemo&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">    &lt;name&gt;SpringCloudDemo&lt;/name&gt;</div><div class="line">    &lt;description&gt;SpringCloudDemo&lt;/description&gt;</div><div class="line"></div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;properties&gt;</div><div class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">    &lt;/properties&gt;</div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">            &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line">    &lt;dependencyManagement&gt;</div><div class="line">        &lt;dependencies&gt;</div><div class="line">            &lt;dependency&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">                &lt;version&gt;Brixton.RELEASE&lt;/version&gt;</div><div class="line">                &lt;type&gt;pom&lt;/type&gt;</div><div class="line">                &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">            &lt;/dependency&gt;</div><div class="line">        &lt;/dependencies&gt;</div><div class="line">    &lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><code>@EnableEurekaServer</code>注解启动一个服务注册中心提供给其他应用进行对话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableEurekaServer</div><div class="line">public class SpringCloudDemoApplication &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		new SpringApplicationBuilder(SpringCloudDemoApplication.class).web(true).run(args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在默认配置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用他的客户端注册行为。</p>
<p><code>application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server.port=1111</div><div class="line">eureka.client.register-with-eureka=false</div><div class="line">eureka.client.fetch-registry=false</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:$&#123;server.port&#125;/eureka/</div></pre></td></tr></table></figure>
<p>启动工程后，访问：<code>http:localhost:1111</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/4076123.jpg" alt=""></p>
<p><a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/SpringCloudDemo?dir=1&amp;filepath=SpringCloudDemo&amp;oid=7ea641a1decaf22920670bfb29e9e198b701def7&amp;sha=66fe516db609fdcb2d95a59d2930d970c2c1be82" target="_blank" rel="external">SpringCloudDemo项目链接</a></p>
<p><strong>创建服务提供方</strong></p>
<p><code>场景：</code> 假设我们有一个提供计算功能的微服务模块，我们实现一个RESTFUL API，通过传入两个参数<code>valueA</code>和<code>valueB</code>的微服务模块，我们实现一个RESTFUL API，通过传入两个参数<code>valueA</code>和<code>valueB</code>,最后返回<code>valueA + valueB</code>的结果。</p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;computeservice&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;ComputeService&lt;/name&gt;</div><div class="line">	&lt;description&gt;ComputeService&lt;/description&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;dependencyManagement&gt;</div><div class="line">		&lt;dependencies&gt;</div><div class="line">			&lt;dependency&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;Brixton.RELEASE&lt;/version&gt;</div><div class="line">				&lt;type&gt;pom&lt;/type&gt;</div><div class="line">				&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">			&lt;/dependency&gt;</div><div class="line">		&lt;/dependencies&gt;</div><div class="line">	&lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>实现<code>/add</code>请求处理接口，通过<code>DiscoveryClient</code>对象，在日志中打印出服务实例的相关内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class ComputeController &#123;</div><div class="line">    private static final Logger logger = LoggerFactory.getLogger(ComputeController.class);</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private DiscoveryClient client;</div><div class="line"></div><div class="line">    @RequestMapping(value = &quot;/add&quot;,method = RequestMethod.GET)</div><div class="line">    public Integer add(@RequestParam Integer valueA,@RequestParam Integer valueB)&#123;</div><div class="line">        ServiceInstance instance = client.getLocalServiceInstance();</div><div class="line">        Integer result = valueA + valueB;</div><div class="line">        logger.info(&quot;/add, host: &quot; + instance.getHost() + &quot; service_id : &quot; + instance.getServiceId() + &quot;, result: &quot; + result);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在主类中加上<code>@EnableDiscoveryClient</code>注解，该注解能激活Eureka中的<code>DiscoveryClient</code>实现，才能实现Controller中对服务信息的输出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">public class ComputeServiceApplication &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		new SpringApplicationBuilder(ComputeServiceApplication.class).web(true).run(args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 指定微服务名称后续在调用只需使用名称就可以进行服务访问了</div><div class="line">spring.application.name=compute-service</div><div class="line"></div><div class="line"># 为了在本机上测试区分服务提供方和服务注册中心，设置端口。</div><div class="line">server.port=2222</div><div class="line"></div><div class="line"># 服务注册中心的位置</div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/</div></pre></td></tr></table></figure>
<p>启动工程后，再次访问：<code>http:localhost:1111/</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-10-9/98601009.jpg" alt=""></p>
<p>可以看到，我们定义的服务被注册了。</p>
<p><a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/ComputeService?dir=1&amp;filepath=ComputeService&amp;oid=8233018cf6b98106be981444bb5fe1ecf7d73630&amp;sha=66fe516db609fdcb2d95a59d2930d970c2c1be82" target="_blank" rel="external">ComputeService项目链接</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/?utm_source=deploying-microservices&amp;utm_medium=blog" target="_blank" rel="external">Service Discovery in a Microservices Architecture </a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[规划好技术路线，如何将想法落地?]]></title>
      <url>http://jianwl.com/2016/09/29/%E8%A7%84%E5%88%92%E5%A5%BD%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%EF%BC%8C%E5%A6%82%E4%BD%95%E5%B0%86%E6%83%B3%E6%B3%95%E8%90%BD%E5%9C%B0%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个工程师，多多少少都有自己的技术路线的规划，怎么这些规划落地，真正地去磨练技术，这是个值得思考的问题？本文介绍一个方法<code>三段分解法</code>，即：<code>将一个宏大或者长远的目标经过三次分解，得到一个个短期内能够达到的小目标。</code></p>
<p><code>Tips</code>: 以下内容引用于<code>阿里巴巴李运华</code>。</p>
<h3 id="正确的做法"><a href="#正确的做法" class="headerlink" title="正确的做法"></a>正确的做法</h3><p><strong>一段分解：瞄准目标</strong></p>
<p>我想10年成为大牛，这个目标虽然比较长远比较宏大，但并不意味着，我们在没有没有成为大牛之前，都是菜鸟。从菜鸟到大牛的过程中，中间其实有几个关键的里程碑，这些里程碑就是我们的一段目标。</p>
<p>以技术人员为例，技术人员典型的发展路径基本上都是下面的这个模式：</p>
<p>1）0 ~ 1年：菜鸟，需要别人手把手来教</p>
<p>2）1 ~ 3年：初级，需要别人带你做</p>
<p>3）3 ~ 5年：高级，能独当一面，可以带初级技术人员了</p>
<p>4）5 ~ 8年：资深，能独挡多面</p>
<p>5）8 ~ 10年：大牛，统筹规划，高屋建瓴</p>
<p>通过这种分解方法，再核对一下自己目前所处的位置，然后先瞄准下一个目标，全力以赴其实也就2 ~ 3年时间，这样来看一段目标其实是比较容易达成的。</p>
<p>这种目标分解的方法除了适合技术人员外，其它很多领域也都适应，比如说产品人员、运营人员、甚至公务员！</p>
<p><strong>二段分解：掌握技能</strong></p>
<p>经过一段分解后，明确自己目前所处的位置和下一个目标，接下来就要看这个一段目标如何实现了。虽然说每个一段目标持续时间在 2~3年，但3年时间说长不长，说短也不短，如果没有好好利用，可能到了2年多的时候回头一看，好像什么都没达成，还是原地踏步。因此，为了更好的利用这3年时间，我们需要进一步分解，这就是“二段分解”。</p>
<p>还是以技术人员为例，假设经过自我评估，认为自己目前处于初级阶段，而且初级阶段的事情已经做得比较顺手和熟练了，那么下一个一段目标自然就是达到“高级”水平。“高级”与“初级”相比，有哪些不同的技能要求呢？</p>
<p>这就需要我们根据各自不同的行业和方向详细列出来了，如果自己想不出来，网上有很多资料都可以搜索到，最方便的就是到一个招聘网站，多看看几个招聘需求的描述，然后归纳总结一下。</p>
<p>我们随便到网上搜索一个，例如达达的“高级Java开发工程师”招聘：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-29/17450031.jpg" alt=""></p>
<p>多看几个类似的职位招聘，基本上我们就能明白“高级Java开发工程师”的一些基本要求。当然实际上的技能要求比招聘需求的描述还要更加细致，我个人的习惯是将这些要求整理为一个思维导图，详细列出每个技术点。例如：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-29/45436716.jpg" alt=""></p>
<p>有了这样一个思维导图后，我们就可以开始真正进行二段分解了，分解的方法很简单：哪里不懂补哪里！例如：我感觉目前我的数据库水平一般，仅仅会写CRUD语句，其它的东西都不懂，那我就开始专攻数据库这一部分，经过一段时间的专攻来提升自己的水平。</p>
<p>二段目标持续时间一般建议是6个月，既不能太短也不能太长。太短容易让人陷入为了目标而做的误区，没有真正得到有效提升；时间太长的话，3年时间又不够完成其它目标了，例如要是我定一个目标说2年提升数据库，那操作系统怎么办？网络怎么办？……等等。以6个月为一个周期，基本上刚刚好。</p>
<p>经过分解，最终的二段目标可以分解为如下的几个更小的目标：</p>
<p>1）2016.06 ~ 2017.01：提升数据库水平</p>
<p>2）2017.01 ~ 2017.06：提升Linux水平</p>
<p>3）2017.06 ~ 2017.12：提升网络和网络编程水平</p>
<p>当然，二段分解目标并不是一成不变的，很多时候需要根据我们工作的内容进行调整。例如老大正好安排我来负责优化系统性能，降低机器负载，那么我完全可以将“提升Linux水平”安排到“提升数据库水平”之前。</p>
<p><strong>三段分解: 规划执行</strong></p>
<p>二段分解得到的小目标后，接下来关键就是要实现这个目标，这就是三段分解的主要目的，即，将技能目标分解为具体要做的事情，然后按计划执行。</p>
<p>比如说我的二段目标是“提升Linux水平”，那怎么样才能提升呢？可以上网搜索，也可以去问有经验的朋友。明确要做的事情后，三段分解需要将二段分解的6个月目标更加细化，分为1个月或者两个月一个目标。</p>
<p>以我当时加入UC的情况为例，我在华为的时候是在Windows平台上用VC6进行开发，而到了UC的时候是在Linux平台上用C++开发，我当时定了“提升Linux水平”的目标，然后通过上网查，找别人问等方法，最终将这个目标分解为几个步骤：</p>
<p>1）1个月：通读《UNIX环境高级编程》</p>
<p>2）1个月：通读《Linux系统编程》</p>
<p>3）2个月：通读《UNIX网络编程 卷1》</p>
<p>4）1个月：Linux常用命令实战：tcpdump、ps、top等</p>
<p>通过这种方法，将6个月的目标又进一步分解为1个月的目标，实施起来就简单多了，每1 ~ 2个月专注一个具体目标，每次完成后都很有成就感，既感觉自己的水平有了提升，又佩服自己能够坚持按计划按目标完成任务，双重奖赏让自己更有动力进行下一个目标。我大约花了2年的时间将Linux、网络、MySQL三个重点技能从一无所知提升到高级的水平，很多同事都问我之前在华为是不是就是做这方面的，因为他们觉得短时间能达到这个水平是不太可能的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综合前面的分析，我们将三段分解提炼一下：一段分解“等级”，二段分解“技能”，三段分解“行动”。</p>
<p>Tips:<code>学习时，尽量获取第一手资料，往后你会发现这样做是多么的正确。</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994070&amp;idx=1&amp;sn=7bd89e8d208b87a8c47b5b172cdc335d&amp;chksm=bdbf0dc58ac884d3de1640df97494ab50280dd350910445392c540ab7e7e4130d109b1d465d2&amp;scene=21#wechat_redirect" target="_blank" rel="external">技术人的小目标：10000小时理论落地，你就是大牛 – 阿里李运华</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天天写「业务代码」，如何成为「技术大牛」]]></title>
      <url>http://jianwl.com/2016/09/29/%E5%A4%A9%E5%A4%A9%E5%86%99%E3%80%8C%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E3%80%8D%EF%BC%8C%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E3%80%8C%E6%8A%80%E6%9C%AF%E5%A4%A7%E7%89%9B%E3%80%8D/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>「一直写业务代码，能够成长为技术大牛？」这也是我一直困惑的地方，今早在地铁上看到<code>阿里李运华</code>的这篇文章，感悟良多，现阶段的我，思维存在一定的误区，内心有些浮躁，梳理文章要点, 规划修炼之路，并将文中所提及的方法付诸实践。</p>
<p><code>Tips</code>: 以下内容引用于<code>阿里巴巴李运华</code>。</p>
<h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p><strong>拜大牛为师</strong></p>
<blockquote>
<p>知乎上有人认为想成为大牛最简单直接、快速有效的方式是拜团队技术大牛为师，让他们平时给你开小灶，给你分配一些有难度的工作。</p>
</blockquote>
<p>个人觉得这个方法不现实；</p>
<ol>
<li>大牛很忙，不太可能单独给你开小灶，更不可能每天都给你开一个小时的小灶。</li>
<li>因为第一个原因，所以一般找大牛，都是带着问题去请教或探讨。</li>
<li>大牛不多，不可能每个团队都有技术大牛，只能说团队里会有比你水平高的人，即使每天给你开小灶，最终你也只能提升到他的水平。</li>
</ol>
<p>综上所述的几个原因，对于大部分人来说，要想成为大牛，首先还是要明白“主要靠自己”。</p>
<p><strong>业务代码一样很牛逼</strong></p>
<blockquote>
<p>知乎上有人回答认为写业务代码一样可以很牛逼，理由是业务代码一样可以有各种技巧，日志记录好了问题，问题定位效率可以提升10倍…等等</p>
</blockquote>
<p>业务代码有技术含量这是肯定的，业务代码中的技术是每个程序员的基础，但只是掌握这些技巧，并不能成为技术大牛。就想游戏中升级打怪一样，开始打小怪，经验值很高，越到后面经验值越少，打小怪已经不能提升经验值了。这个时候就需要打一些更高级的怪，刷一些有挑战的副本了，没看到哪个游戏，只要一直打小怪就能升到顶级的。</p>
<p>成为技术大牛的路也类似，要不断提升自己的水平，然后面临更大的挑战，通过应对这些挑战从而使自己的水平更上一级。写业务代码只是打怪升级路上的一个挑战而已，而且是一个比较初级的挑战。</p>
<p>所以，业务代码都写不好的程序员肯定无法成为技术大牛，但只把业务代码写好的程序员也还不能成为技术大牛。</p>
<p><strong>上班太忙没时间自学</strong></p>
<blockquote>
<p>很多人认为自己没有成为技术大牛并不是自己不聪明，也不是自己不努力，而是中国的这个环境下，技术人员加班太多，导致自己没有额外的时间进行学习。</p>
</blockquote>
<p>有几个误区导致了这种想法</p>
<ol>
<li>上班做的都是重复工作，要想提升必须自己额外去学习</li>
<li>学习需要大段的连续时间，实际上做法正好相反，我们应该在工作中学习和提升，因为学以致用，或者有实例参考，学习的效果是最好的，其次工作后学习不需要打算时间，而是要挤出时间，利用时间碎片来学习。</li>
</ol>
<h3 id="正确的做法"><a href="#正确的做法" class="headerlink" title="正确的做法"></a>正确的做法</h3><p><strong>DO MORE</strong></p>
<p>1.<code>熟悉更多业务 &amp; 代码</code></p>
<p> 熟悉更多业务，不管是不是你负责的;熟悉更多代码，不管是不是你写的；</p>
<p> 2.<code>熟悉端到端</code></p>
<p> 比如说你负责后端web后台开发，但实际用户发起一个HTTP请求，要经过很多中间步骤才能到你的服务器(例如浏览器缓存、NDS、Nginx等)，但服务器一般又会经过很多处理才到你写的那部分代码(路由、权限等)这整个流程中的很多系统或者步骤，绝大部分人是不可能参与写代码的，但掌握这些知识对你的综合水平有很大的作用。</p>
<p>3.<code>自学</code></p>
<p>以<code>Java</code>为例，大部分业务代码就是<code>if-else</code>加个数据库操作，但我们完全可以自己学写更<code>java</code>的知识，例如垃圾回收、调优、网络编程等，这些可能暂时没用，但真要用的时候，不是Google一下就可以了，这个时候谁已经掌握了相关知识和技能，机会就是谁的。 </p>
<p>以垃圾回收为例，平时抽时间学习了这些知识，学了1年都没用上，但后来用上了几次，每次都解决了卡死的问题，而有的同学，写了几年的<code>java</code>代码，对于<code>stop-the-world</code>是什么概念都不知道，更不要说去优化了。</p>
<p>很多开源软件，更加需要自己平时去学，例如<code>Nignx、Redis、Mongodb、ElasticSearch等</code>在合适的时机引入这些技术，能够能够带来很大的价值。</p>
<p><strong>DO BETTER</strong></p>
<p>世界上没有完美的东西，你负责的系统和业务，总有不合理和可以改进的地方，这些不合理和可改进的地方，都是更高级别的怪物，打完后能够增加更多的经验值。识别出这些地方，并且给出解决方案。</p>
<p>例如：</p>
<ul>
<li>重复代码太多，是否可以引入设计模式？</li>
<li>系统系能一般，可否进行优化？</li>
<li>目前是单机，如果做成双机是否更好？</li>
<li>版本开发质量不高，是否引入高效的单元测试和集成测试方案？</li>
<li>目前的系统太庞大，是否可以通过重构和解耦改为3个系统？</li>
<li>阿里中间件有一些系统感觉我们也可以用，是否可以引入？</li>
</ul>
<p>只要你去想，其实总能发现可以改进得地方，如果你觉得系统哪里都没有改进的地方，那就说明你的水平还不够，可以多学习相关技术，多看看业界其他公司怎么做，BAT都怎么做。</p>
<p><strong>DO EXERCISE</strong></p>
<p>在执行过程中，发现确实做到了<code>DO MORE 、DO BETTER</code>,但光看不用效果很差，怎么办？</p>
<p>例如：</p>
<ul>
<li>学习了JVM的垃圾回收，但是线上比较少出现FGC导致的卡顿问题，就算出现了，恢复业务也是第一位的，不太可能线上出现问题然后让每个同学都去练一下手，那么怎么去实践这些JVM的只是和技能呢？</li>
<li>Netty我也看了，也了解了Reactor原理，但是我不可能参与Netty开发，怎么让自己真正掌握Reactor异步模式呢？</li>
<li>看了«高性能MySQL»，但是线上的数据库都是DBA管理的，测试环境的数据库感觉又是随便配置的，我怎么去验证这些技术呢？</li>
<li>框架封装了DAL层，数据库的访问我们都不需要操心，我们怎么去了解分库分表实现？</li>
</ul>
<p>诸如此类问题，总结下来就是三个词：<code>Learning</code>、<code>Trying</code>、<code>Teaching</code></p>
<p>1.<code>Learning</code></p>
<p>这是第一阶段，看书、Google、看视频、看别人的博客都可以，但要注意一点是<code>系统化</code>，特别是一些基础性的东西，例如JVM原理、Java编程、网络编程、HTTP协议等等，这些基础技术不能只通过Google或者博客学习，我的做法一般是先完整看完一本书全面的了解，然后在通过Google、视频、博客有针对性的查找一些有疑问的地方或者一些技巧。</p>
<p>2.<code>Trying</code></p>
<p><code>自己动手丰衣足食</code>，也就是自己去尝试搭建一些模拟环境，自己写一些测试程序。例如：</p>
<ul>
<li>JVM垃圾回收：可以自己写个简单的测试程序，分配内存不释放，然后调整各种JVM启动参数，在运行的过程使用Jstack、Jstat等命令查看JVM的堆内存分布和垃圾回收情况。</li>
<li>Reactor原理：自己真正尝试写一个Reactor模式的Demo，不要以为这个很难，简单的Reactor模式代码量不超过200行(可以参考Doug Lee的PPT)，自己写完后，再看看netty怎么做，一对比理解就更加深刻了。</li>
<li>MySQL:既然有线上的配置可以参考，那可以直接让DBA将线上配置发给我们，直接学习，然后搭建一个MySQL环境，用线上的配置启动；</li>
<li>框架封装了DAL层，可以自己用JDBC尝试去写一个分库分表的简单实现，然后与框架的实现进行对比，看看差异在哪里？</li>
<li>用浏览器的工具查看HTTP缓存实现，看看不同种类的网站、不同类型的资源，具体是如何控制缓存的，也可以自己用Python写一个简单的HTTP服务器，模拟返回各种HTTP Headers来观察浏览器的反应。</li>
</ul>
<p>真正想去实践，很多场景其实可以自己模拟，当然如果在实际工作中使用，效果会更好，毕竟线上的环境和业务服务度不是我们写个模拟程序就能够模拟的，但这样的机会可遇不可求，大部分情况，我们还真只能靠自己模拟，然后等到真正业务要用的时候，能够信手捏来。 </p>
<p>3.<code>Teaching</code></p>
<p>一般来说，经过Learning和Trying，能够掌握70%左右，但要到真正掌握，我觉得一定要做到能够跟别人讲清楚，因为在讲的时候，我们既需要将一个知识点系统化，也需要考虑各种细节，这会促使我们进一步思考和学习。同时，讲出来后看或听的人有不同的理解，或者有新的补充，相当于继续晚上整个知识技能体系。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994277&amp;idx=1&amp;sn=f0d3c25d805503264a78ab5eeb29044d&amp;chksm=bdbf0e368ac88720da10e901457fdbee77a90a426c20a3b95316fcbc6c8ab7b1afbd55950ad3&amp;mpshare=1&amp;scene=1&amp;srcid=0929Z1bTPNoOJWSebrDHoiwl#rd" target="_blank" rel="external">天天写「业务代码」，如何成为「技术大牛」 – 李运华</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程设计模式之保护性暂挂(Guarged Suspension)]]></title>
      <url>http://jianwl.com/2016/09/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%9A%82%E6%8C%82-Guarged-Suspension/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>多线程编程中，为了提高并发性，往往会将一个任务分解为不同的部分，将其交由不同的线程来执行。这些线程间互相协作时，仍然可能出现一个线程去等待另一个线程完成一定的操作，其自身才能继续运行的情形。好比，汽车行驶过程中油量不足时，司机只好到加油站等工作人员将油加满才能继续行驶。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>场景</strong></p>
<p>多线程获取共享资源需要条件时，这时候就需要用到保护性暂挂模式了。常见的例子是客户端与服务端的通信，客户端会不断的发送请求给服务端，服务端会不停的接受请求，假设我们用队列去存储请求，那么服务端就不能再队列为空的时候去接受请求，<code>这个是存取的条件 -- 队列不能为空</code></p>
<p><strong>数据模型：<code>Request.Java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Request &#123;</div><div class="line">    private final String name;</div><div class="line"></div><div class="line">    public Request(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;[ Request &quot; + name + &quot; ]&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>用<code>LinkedList</code>来存放<code>Request</code>：<code>RequestQueue.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class RequestQueue &#123;</div><div class="line">    private final LinkedList queue = new LinkedList();</div><div class="line"></div><div class="line">    public synchronized Request getRequest() &#123;</div><div class="line">        while (queue.size() &lt;= 0) &#123;</div><div class="line">            try &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot;: wait() begins, queue = &quot; + queue);</div><div class="line">                wait();</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot;: wait() ends, queue = &quot; + queue);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return (Request) queue.removeFirst();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public synchronized void putRequest(Request request) &#123;</div><div class="line">        queue.addLast(request);</div><div class="line">        System.out.println(Thread.currentThread().getName() + &quot;: notifyAll() begins, queue = &quot; + queue);</div><div class="line">        notifyAll();</div><div class="line">        System.out.println(Thread.currentThread().getName() + &quot;: notifyAll() ends, queue = &quot; + queue);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>客户端不断发出请求：<code>ClientThread.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class ClientThread extends Thread &#123;</div><div class="line">    private Random random;</div><div class="line">    private RequestQueue requestQueue;</div><div class="line"></div><div class="line">    public ClientThread(RequestQueue requestQueue, String name, long seed) &#123;</div><div class="line">        super(name);</div><div class="line">        this.requestQueue = requestQueue;</div><div class="line">        this.random = new Random(seed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">                Request request = new Request(&quot;No.&quot; + i);</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot; requests &quot; + request);</div><div class="line">                requestQueue.putRequest(request);</div><div class="line">                Thread.sleep(random.nextInt(1000));</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>服务端检验队列是否为空，不为空才取，否则线程阻塞:<code>ServerThread.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class ServerThread extends Thread &#123;</div><div class="line">    private Random random;</div><div class="line">    private RequestQueue requestQueue;</div><div class="line"></div><div class="line">    public ServerThread(RequestQueue requestQueue, String name, long seed) &#123;</div><div class="line">        super(name);</div><div class="line">        this.requestQueue = requestQueue;</div><div class="line">        this.random = new Random(seed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">                Request request = requestQueue.getRequest();</div><div class="line">                System.out.println(Thread.currentThread().getName() + &quot; handles &quot; + request);</div><div class="line">                Thread.sleep(random.nextInt(1000));</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>主函数：Main.java</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 启动执行器</div><div class="line">        RequestQueue requestQueue = new RequestQueue();</div><div class="line">        Thread alice = new ClientThread(requestQueue, &quot;Alice&quot;, 314159L);</div><div class="line">        Thread bobby = new ServerThread(requestQueue, &quot;Bobby&quot;, 265358L);</div><div class="line">        alice.start();</div><div class="line">        bobby.start();</div><div class="line">        try &#123;</div><div class="line">            // 等待约10s</div><div class="line">            Thread.sleep(10000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;***** calling interrupt *****&quot;);</div><div class="line">        // 呼叫interrupt方法</div><div class="line">        alice.interrupt();</div><div class="line">        bobby.interrupt();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Java多线程编程实战指南 – 黄文海</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之不可变对象]]></title>
      <url>http://jianwl.com/2016/09/25/Java%E4%B9%8B%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>多线程共享变量的情况下，为了保证数据一致性，往往需要对这些变量的访问进行加锁。而锁本身又会带来一些问题和开销。<code>Immutable Object</code>使得我们可以在不使用锁的情况下，既保证共享变量访问的线程安全，又能避免锁引入带来的问题和开销。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li><strong>被建模对象的状态变化不频繁</strong></li>
<li><strong>同时对一组相关的数据进行写操作，需要保证原子性</strong></li>
<li><strong>使用某个对象作为安全的HashMap的Key</strong>，一个对象作为<code>HashMap</code>的Key被放入<code>HashMap</code>之后，若该对象状态变化导致了其<code>Hash Code</code>的变化，则会导致后面再同样的对象作为<code>Key</code>去<code>get</code>的时候无法获取关联的值，但由于不可变对象的状态不变，因此其<code>Hash Code</code>也不变。</li>
</ol>
<h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><ol>
<li>被建模对象的状态变更频繁，此时不见得不能使用不可变对象，只是状态变更需要频繁创建不可变对象，增加JVM垃圾回收。</li>
<li>防御性赋值，如果不可变对象本身包含一些状态需要对外暴露，而相应的字段本身又是可变的。那么返回这些字段的方法，还是需要做防御性复制，以避免外部代码修改了其内部的状态。</li>
</ol>
<h3 id="如何让类不可变"><a href="#如何让类不可变" class="headerlink" title="如何让类不可变"></a>如何让类不可变</h3><blockquote>
<p><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html" target="_blank" rel="external">JAVA文档，有关如何定义不可变类指南</a></p>
</blockquote>
<ol>
<li>不提供<code>setter</code>方法，setter方法用于修改属性和对象引用。这个原则阐述了在类定义的所有可变属性中，不提供setter方法，setter方法意味着你能够改变这个属性的状态，必须阻止提供setter方法。</li>
<li>所有的属性修饰添加<code>private</code>和<code>final</code>。这是另一种增加不可变的方式，属性声明为<code>private</code>为了在类之外不能够被访问到，final修饰符为了让你不能随便的改变他们。</li>
<li>不允许子类重写方法。最简单的方式声明类为final，final类不允许重写。</li>
<li>当属性中存在可变对象变量时，要特别留意。对象分为不可变和可变，当对象可变时，对可变对象的内容进行复制，并创建一个新对象赋值给它，这样保证可变对象的不可变。</li>
<li>定义一个private的构造方法，通过工厂方法构造对象。</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>创建不可变类：ImmutableClass.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">package immutable;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">/**</div><div class="line">* Always remember that your instance variables will be either mutable or immutable.</div><div class="line">* Identify them and return new objects with copied content for all mutable objects.</div><div class="line">* Immutable variables can be returned safely without extra effort.</div><div class="line">* */</div><div class="line">public final class ImmutableClass</div><div class="line">&#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">    * Integer class is immutable as it does not provide any setter to change its content</div><div class="line">    * */</div><div class="line">    private final Integer immutableField1;</div><div class="line">    /**</div><div class="line">    * String class is immutable as it also does not provide setter to change its content</div><div class="line">    * */</div><div class="line">    private final String immutableField2;</div><div class="line">    /**</div><div class="line">    * Date class is mutable as it provide setters to change various date/time parts</div><div class="line">    * */</div><div class="line">    private final Date mutableField;</div><div class="line"></div><div class="line">    //Default private constructor will ensure no unplanned construction of class</div><div class="line">    private ImmutableClass(Integer fld1, String fld2, Date date)</div><div class="line">    &#123;</div><div class="line">        this.immutableField1 = fld1;</div><div class="line">        this.immutableField2 = fld2;</div><div class="line">        this.mutableField = new Date(date.getTime());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //Factory method to store object creation logic in single place</div><div class="line">    public static ImmutableClass createNewInstance(Integer fld1, String fld2, Date date)</div><div class="line">    &#123;</div><div class="line">        return new ImmutableClass(fld1, fld2, date);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //Provide no setter methods</div><div class="line"></div><div class="line">    /**</div><div class="line">    * Integer class is immutable so we can return the instance variable as it is</div><div class="line">    * */</div><div class="line">    public Integer getImmutableField1() &#123;</div><div class="line">        return immutableField1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">    * String class is also immutable so we can return the instance variable as it is</div><div class="line">    * */</div><div class="line">    public String getImmutableField2() &#123;</div><div class="line">        return immutableField2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">    * Date class is mutable so we need a little care here.</div><div class="line">    * We should not return the reference of original instance variable.</div><div class="line">    * Instead a new Date object, with content copied to it, should be returned.</div><div class="line">    * */</div><div class="line">    public Date getMutableField() &#123;</div><div class="line">        return new Date(mutableField.getTime());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return immutableField1 +&quot; - &quot;+ immutableField2 +&quot; - &quot;+ mutableField;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>验证以上为不可变类：MainTest.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">public class MainTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ImmutableClass im = ImmutableClass.createNewInstance(100, &quot;test&quot;, new Date());</div><div class="line">        System.out.println(im);</div><div class="line">        tryModification(im.getImmutableField1(), im.getImmutableField2(), im.getMutableField());</div><div class="line">        System.out.println(im);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void tryModification(Integer immutableField1, String immutableField2, Date mutableField) &#123;</div><div class="line">        immutableField1 = 10000;</div><div class="line">        immutableField2 = &quot;test changed&quot;;</div><div class="line">        mutableField.setDate(10);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<p>不可变对象包含(Integer、String、Date，其中Date为一个可变对象)，创建不可变对象后，更改入参的Date，并不会对不可变对象产生影响。故验证其为不可变对象类。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-25%20%E4%B8%8B%E5%8D%883.14.00.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://howtodoinjava.com/core-java/related-concepts/how-to-make-a-java-class-immutable/" target="_blank" rel="external">how-to-make-a-java-class-immutable</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html" target="_blank" rel="external">Java官方文档-不可变类</a> </li>
<li>Java多线程编程实战指南(设计模式篇) - 黄文海 </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java序列化]]></title>
      <url>http://jianwl.com/2016/09/24/Java%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="序列化是什么？"><a href="#序列化是什么？" class="headerlink" title="序列化是什么？"></a>序列化是什么？</h3><p>序列化是一种用来处理对象流的机制，所谓对象流就是将对象的内容进行流化，可以对流化后的对象进行读写操作，也可以将流化后的对象传输于网络之间。</p>
<p><code>序列化</code>：将数据分解成字节流，以便存储在文件中或在网络上传输。</p>
<p><code>反序列化</code>：打开字节流并重构对象。对象序列化不仅要将基本数据类型转换成字节表示，还有恢复数据的对象实例。</p>
<h3 id="序列化使用场景"><a href="#序列化使用场景" class="headerlink" title="序列化使用场景"></a>序列化使用场景</h3><ul>
<li>对象序列化可以实现分布式对象，如RMI要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象一样。</li>
<li><code>JAVA</code>对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。可以将整个对象层次写入字节流中，可以保存在文件中或网络连接上传递。利用对象序列化可以进行对象的深复制，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong> Employee序列化</strong></p>
<p><code>serialVersionUID序列化ID</code> ：序列化ID不同，对象是无法相互序列化和反序列化的。</p>
<p><code>transient</code> ： 在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Employee implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = -5310833892778578686L;</div><div class="line">    private String name;</div><div class="line">    private String address;</div><div class="line">    private transient Integer SSN;</div><div class="line">    private Integer number;</div><div class="line">	</div><div class="line">	// 此处省略Getter &amp; Setter 方法</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>将序列化对象赋值后存入文件中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class SerializeDemo &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Employee e = new Employee();</div><div class="line">        e.setAddress(&quot;上海&quot;);</div><div class="line">        e.setName(&quot;张三&quot;);</div><div class="line">        e.setSSN(123);</div><div class="line">        e.setNumber(123);</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            FileOutputStream fileOut = new FileOutputStream(&quot;/tmp/employee.ser&quot;);</div><div class="line">            ObjectOutputStream out = new ObjectOutputStream(fileOut);</div><div class="line">            out.writeObject(e);</div><div class="line">            out.close();</div><div class="line">            fileOut.close();</div><div class="line">            System.out.printf(&quot;Serialized data is saved in /tmp/employee.ser&quot;);</div><div class="line">        &#125; catch (IOException i) &#123;</div><div class="line">            i.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>查看存入文件中的序列化对象</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-24/99793188.jpg" alt=""></p>
<p><strong>从文件中反序列化字节码为Employee对象</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class DeserializeDemo &#123;</div><div class="line"></div><div class="line">   public static void main(String [] args) &#123;</div><div class="line">      Employee e = null;</div><div class="line">      try &#123;</div><div class="line">         FileInputStream fileIn = new FileInputStream(&quot;/tmp/employee.ser&quot;);</div><div class="line">         ObjectInputStream in = new ObjectInputStream(fileIn);</div><div class="line">         e = (Employee) in.readObject();</div><div class="line">         in.close();</div><div class="line">         fileIn.close();</div><div class="line">      &#125;catch(IOException i) &#123;</div><div class="line">         i.printStackTrace();</div><div class="line">         return;</div><div class="line">      &#125;catch(ClassNotFoundException c) &#123;</div><div class="line">         System.out.println(&quot;Employee class not found&quot;);</div><div class="line">         c.printStackTrace();</div><div class="line">         return;</div><div class="line">      &#125;</div><div class="line">      System.out.println(&quot;Employee&quot; + JSON.toJSONString(e));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>反序列化结果</strong></p>
<p>被声明为<code>transient</code>的<code>SSN</code>属性没有序列化，故没有反序列化出来。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-24/15700843.jpg" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>一个类进行序列化和反序列化其序列化ID必须一致，否则将出错。</li>
<li>子类实现序列化接口，父类未实现序列化接口，反序列化中，父类的属性与序列化不一致，解决办法，将父类也实现序列化接口。</li>
<li>对于对象中不需要序列化的属性前加<code>transient</code>关键字</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot中的事务管理]]></title>
      <url>http://jianwl.com/2016/09/23/SpringBoot%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在项目应用开发时，用户一个操作实际是对数据读写的多步操作的结合，由于数据操作在顺序执行的过程中，任何一步操作都有可能发生异常，异常会导致后续操作无法完成，此时由于业务逻辑并没有正确完成，之前成功操作数据并不可靠，需要在这种情况下进行回退。</p>
<h3 id="事务的作用"><a href="#事务的作用" class="headerlink" title="事务的作用"></a>事务的作用</h3><p>事务是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有异常发生就回退到事务刚开始未进行操作的状态；事务管理是Spring框架中最为常用的功能之一，我们在使用SpringBoot开发时，大部分情况下也都需要使用事务；</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>未完待续….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot中使用JavaMailSender发送邮件]]></title>
      <url>http://jianwl.com/2016/09/18/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8JavaMailSender%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用过Spring的开发者都知道Spring提供了非常好用的<code>JavaMailSender</code>接口实现邮件发送，在SpringBoot的Starter模块中也为此提供了自动化配置。</p>
<h3 id="实战1-发送简单邮件-项目的Git链接"><a href="#实战1-发送简单邮件-项目的Git链接" class="headerlink" title="实战1:发送简单邮件 项目的Git链接"></a>实战1:发送简单邮件 <a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/SpringMailSenderDemo?dir=1&amp;filepath=SpringMailSenderDemo&amp;oid=56c7fdd75afebd32f0bb1aa71da5349f0cd42d70&amp;sha=4940a0702b65b0ce4022441ad12f4be49824374e" target="_blank" rel="external">项目的Git链接</a></h3><p><strong>1.创建SpringBoot工程，并引入<code>spring-boot-starter-mail</code>依赖</strong></p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;springmailsenderdemo&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">    &lt;name&gt;SpringMailSenderDemo&lt;/name&gt;</div><div class="line">    &lt;description&gt;SpringMailSenderDemo&lt;/description&gt;</div><div class="line"></div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">        &lt;relativePath/&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;properties&gt;</div><div class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">    &lt;/properties&gt;</div><div class="line">	</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--mail--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">            &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><strong>2.在<code>application.properties</code>配置相应属性内容(注意替换<code>username</code> &amp; <code>password</code>)</strong></p>
<p><code>application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.mail.host=smtp.163.com</div><div class="line">spring.mail.username=username@163.com</div><div class="line">spring.mail.password=password</div><div class="line">spring.mail.properties.mail.smtp.auth=true</div><div class="line">spring.mail.properties.mail.smtp.starttls.enable=true</div><div class="line">spring.mail.properties.mail.smtp.starttls.required=true</div></pre></td></tr></table></figure>
<p><strong>3.单元测试实现简单一封邮件的发送</strong></p>
<p><code>MailTest.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class MailTest &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private JavaMailSender javaMailSender;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void sendSimpleMail()&#123;</div><div class="line">        SimpleMailMessage message = new SimpleMailMessage();</div><div class="line">        message.setFrom(&quot;soso_jwl@163.com&quot;);</div><div class="line">        message.setTo(&quot;soso_jwl@163.com&quot;);</div><div class="line">        message.setSubject(&quot;主题:这是一份测试邮件&quot;);</div><div class="line">        message.setText(&quot;测试邮件内容&quot;);</div><div class="line"></div><div class="line">        javaMailSender.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4.遇到的问题</strong></p>
<p>最开始用QQ邮箱来测试，<code>application.properties</code>中邮件服务器更改为<code>spring.mail.host=smtp.qq.com</code>,出现以下错误：<img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-18/24716938.jpg" alt=""></p>
<p><code>解决方案：</code>更改邮箱服务器为163的，用163邮箱测试。</p>
<p><strong>5.测试的结果</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-18/11547717.jpg" alt=""></p>
<h3 id="实战2：发送带附件的邮件"><a href="#实战2：发送带附件的邮件" class="headerlink" title="实战2：发送带附件的邮件"></a>实战2：发送带附件的邮件</h3><p><code>测试用例:MailTest.class</code></p>
<p>发送一份带两个附件的邮件耗时<code>2.5s</code>，每个附件为400k的照片。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class MailTest &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private JavaMailSender javaMailSender;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void sendAttachmentsMail() throws MessagingException &#123;</div><div class="line">        Long start = System.currentTimeMillis();</div><div class="line"></div><div class="line">        MimeMessage mimeMessage = javaMailSender.createMimeMessage();</div><div class="line"></div><div class="line">        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage,true);</div><div class="line">        helper.setFrom(&quot;soso_jwl@163.com&quot;);</div><div class="line">        helper.setTo(&quot;soso_jwl@163.com&quot;);</div><div class="line">        helper.setSubject(&quot;主题:这是带附件的测试邮件&quot;);</div><div class="line">        helper.setText(&quot;附件...&quot;);</div><div class="line"></div><div class="line">        FileSystemResource file = new FileSystemResource(new File(&quot;my.png&quot;));</div><div class="line">        helper.addAttachment(&quot;附件-1.png&quot;,file);</div><div class="line">        helper.addAttachment(&quot;附件-2.png&quot;,file);</div><div class="line"></div><div class="line">        javaMailSender.send(mimeMessage);</div><div class="line"></div><div class="line">        System.out.println(&quot;SPEND TIME ==&gt; &quot; + (System.currentTimeMillis() - start));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>测试结果</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-18/76088226.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot中使用@Async实现异步调用]]></title>
      <url>http://jianwl.com/2016/09/17/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8-Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="什么是异步调用"><a href="#什么是异步调用" class="headerlink" title="什么是异步调用"></a>什么是异步调用</h3><p><code>异步调用</code>对应的是<code>同步调用</code>，<code>同步调用</code>指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；<code>异步调用</code>指程序在顺序执行时，不等待异步调用返回的结果，就执行后面的程序了。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>案例1：同步调用</strong></p>
<p>创建三个处理函数分别模拟三个执行任务的操作，操作耗时随机取(10s内)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class Task &#123;</div><div class="line">    public static Random random =new Random();</div><div class="line"></div><div class="line">    public void doTaskOne() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务一&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务一，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void doTaskTwo() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务二&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务二，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void doTaskThree() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务三&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务三，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>测试方法：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class TaskTest &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private Task task;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void taskExec() throws Exception &#123;</div><div class="line">        task.doTaskOne();</div><div class="line">        task.doTaskTwo();</div><div class="line">        task.doTaskThree();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>执行结果:</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/44690361.jpg" alt=""></p>
<p><strong>案例2：异步调用</strong></p>
<p><code>在Spring Boot的主程序增加@EnableAsyn，为了让@Async注解生效</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@EnableAsync</div><div class="line">@SpringBootApplication</div><div class="line">public class SpringDemoApplication &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(SpringDemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>三个异步调用函数：AsyncTask.class</code></p>
<p>特别注意：@Async所修饰的函数不要定义为static类型，这样异步调用不会生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class AsyncTask &#123;</div><div class="line">    public static Random random =new Random();</div><div class="line"></div><div class="line">    @Async</div><div class="line">    public Future&lt;String&gt; doTaskOne() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务一&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务一，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line"></div><div class="line">        return new AsyncResult&lt;&gt;(&quot;任务一已完成!!!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Async</div><div class="line">    public Future&lt;String&gt; doTaskTwo() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务二&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务二，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">        return new AsyncResult&lt;&gt;(&quot;任务二已完成!!!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Async</div><div class="line">    public Future&lt;String&gt; doTaskThree() throws Exception &#123;</div><div class="line">        System.out.println(&quot;开始做任务三&quot;);</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Thread.sleep(random.nextInt(10000));</div><div class="line">        long end = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;完成任务三，耗时：&quot; + (end - start) + &quot;毫秒&quot;);</div><div class="line">        return new AsyncResult&lt;&gt;(&quot;任务三已完成!!!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>执行的结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/20718204.jpg" alt=""></p>
<p><code>分析</code></p>
<p>对比<code>同步调用</code>和<code>异步调用</code>案例，很明显，异步调用让任务1、2、3并发执行，有效的减少了程序的总运行时间。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot使用AOP统一处理Web请求日志]]></title>
      <url>http://jianwl.com/2016/09/17/SpringBoot%E4%BD%BF%E7%94%A8AOP%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86Web%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Spring</code>有两个重要的特性一个是<code>IOC</code>,另一个<code>AOP</code>。<code>IOC</code>在Spring项目中被广泛使用，<code>AOP</code>却是一个盲点。今日初探<code>AOP</code>,深深感觉到它的强大。本文主要讲解在SpringBoot中引入Aop功能 &amp; 使用AOP做切面去统一处理Web请求日志。</p>
<h3 id="AOP是什么？"><a href="#AOP是什么？" class="headerlink" title="AOP是什么？"></a><code>AOP</code>是什么？</h3><p><code>AOP</code>为<code>Aspect Oriented Programming</code>的缩写，意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。<code>AOP</code>通过对既有程序定义一个切入点，然后在其前后切入不同的执行内容，比如常见的有：打开数据库连接 &amp; 关闭数据库连接 &amp; 打开事务 &amp; 关闭事务 &amp; 记录日志等。基于AOP不会破坏原来程序逻辑，因此它可以很好地对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<h3 id="实战-项目Git链接"><a href="#实战-项目Git链接" class="headerlink" title="实战 项目Git链接"></a>实战 <a href="http://git.oschina.net/shuangziliuyun/SpringBoot-Learning/tree/master/SpringAopDemo?dir=1&amp;filepath=SpringAopDemo&amp;oid=006ff95faa36663be27ce9d0ae93f8058ec82901&amp;sha=4940a0702b65b0ce4022441ad12f4be49824374e" target="_blank" rel="external">项目Git链接</a></h3><p><strong>1.搭建本地SpringBoot项目</strong></p>
<p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springaopdemo&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;SpringAopDemo&lt;/name&gt;</div><div class="line">	&lt;description&gt;SpringAopDemo&lt;/description&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;!--lombok--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.16.10&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--fast json--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.17&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--springBoot--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--AOP--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!--Log4j--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-log4j&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><code>Controller层：AdminController.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">@RequestMapping(value = &quot;/admin&quot;)</div><div class="line">public class AdminController &#123;</div><div class="line">    @RequestMapping(value = &quot;/info&quot;,method = RequestMethod.GET)</div><div class="line">    public String info(@RequestParam String username, @RequestParam String password)&#123;</div><div class="line">        return JSON.toJSONString(new Admin(username,password));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>数据模型:Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class Admin &#123;</div><div class="line">    private final String username;</div><div class="line">    private final String password;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，我们实现了一个简单请求处理，通入<code>username</code> &amp; <code>password</code>，返回<code>Admin</code>的JSON字符串。下面我们可以对上面的<code>/admin/info</code>请求，进行切面日志记录。</p>
<p><strong>Web层的日志切面</strong></p>
<p>SpringBoot中默认是开启AOP的，所以不需要增加<code>@EnableAspectJAutoProxy</code>注解。而当我们需要使用<code>CGLIB</code>来实现AOP的时候，需要配置<code>spring.aop.proxy-target-class=true</code>，不然默认使用的是标准<code>Java</code>的实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># AOP</div><div class="line">spring.aop.auto=true # Add @EnableAspectJAutoProxy.</div><div class="line">spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as</div><div class="line"> opposed to standard Java interface-based proxies (false).</div></pre></td></tr></table></figure>
<p><code>AOP切面的几个要素</code></p>
<ul>
<li><code>@Aspect</code>注解将Java类定义为切面类</li>
<li><code>@Pointcut</code>注解定义一个切入点，切入点的表达式筛选规则<code>execution(&lt;方法修饰符&gt; ? &lt;方法返回值类型&gt; &lt;包名&gt;.&lt;类名&gt;.&lt;方法名&gt;(&lt;参数类型&gt;) [throws &lt;异常类型&gt;]?)</code>;<br><code>*</code>代表0个或多个任意字符 &amp; 包名中<code>..</code>代表当前包及其子包 &amp; 参数列表中<code>..</code>代表任意个参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Pointcut(&quot;execution(public * com.dada.controller..*.*(..))&quot;)</div><div class="line">  public void webLog()&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>@Before</code>在切入点开始处切入内容</li>
<li><code>@After</code>在切入点结尾处切入内容</li>
<li><code>@AfterReturning</code>在切入点return内容之后，切入内容。可以对处理返回值做些加工处理</li>
<li><code>@Around</code>在切入点前后切入内容，并自己控制何时执行切入点自身的内容。</li>
<li><code>@AfterThrowing</code>用来处理当切入内容部分抛出异常之后的处理逻辑</li>
</ul>
<p><code>声明切面类：WebLogAspect.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@Aspect</div><div class="line">@Component</div><div class="line">public class WebLogAspect &#123;</div><div class="line">    private Logger logger = Logger.getLogger(getClass());</div><div class="line"></div><div class="line">    @Pointcut(&quot;execution(public * com.dada.controller..*.*(..))&quot;)</div><div class="line">    public void webLog()&#123;&#125;</div><div class="line"></div><div class="line">    @Before(&quot;webLog()&quot;)</div><div class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</div><div class="line">        // 接收到请求，记录请求内容</div><div class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</div><div class="line">        HttpServletRequest request = attributes.getRequest();</div><div class="line">        // 记录下请求内容</div><div class="line">        logger.info(&quot;URL : &quot; + request.getRequestURL().toString());</div><div class="line">        logger.info(&quot;HTTP_METHOD : &quot; + request.getMethod());</div><div class="line">        logger.info(&quot;IP : &quot; + request.getRemoteAddr());</div><div class="line">        logger.info(&quot;CLASS_METHOD : &quot; + joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName());</div><div class="line">        logger.info(&quot;ARGS : &quot; + Arrays.toString(joinPoint.getArgs()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</div><div class="line">    public void doAfterReturning(Object ret) throws Throwable &#123;</div><div class="line">        // 处理完请求，返回内容</div><div class="line">        logger.info(&quot;RESPONSE : &quot; + ret);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求”/admin/info”接口，得到以下日志信息：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/22783585.jpg" alt=""></p>
<h3 id="AOP切面中的同步问题"><a href="#AOP切面中的同步问题" class="headerlink" title="AOP切面中的同步问题"></a>AOP切面中的同步问题</h3><p>在WebLogAspect切面中，分别通过<code>doBefore</code> &amp; <code>doAfterReturning</code>两个独立函数实现了切点头部和切点返回后执行的内容，若我们想统计请求的处理时间，就需要在doBefore出记录时间，并在doAfterReturning处通过当前时间与开始处的时间计算得到请求处理的消耗时间。</p>
<p>那么我们是否可以在WebLogAspect切面中定义一个成员变量来给doBefore和doAfterReturning一起访问呢？是否会有同步问题呢？</p>
<p>直接在这里定义基本类型肯定会有同步问题，所以我们引入ThreadLocal对象，以这种方式记录，就可以解决同步的问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Aspect</div><div class="line">@Component</div><div class="line">public class WebLogAspect &#123;</div><div class="line">    private Logger logger = Logger.getLogger(getClass());</div><div class="line">    </div><div class="line">    ThreadLocal&lt;Long&gt; start = new ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    @Pointcut(&quot;execution(public * com.dada.controller..*.*(..))&quot;)</div><div class="line">    public void webLog()&#123;&#125;</div><div class="line"></div><div class="line">    @Before(&quot;webLog()&quot;)</div><div class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</div><div class="line">        start.set(System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</div><div class="line">    public void doAfterReturning(Object ret) throws Throwable &#123;</div><div class="line">        // 处理完请求，返回内容</div><div class="line">        logger.info(&quot;RESPONSE : &quot; + ret);</div><div class="line">        logger.info(&quot;SPEND TIME:&quot; + System.currentTimeMillis() - start.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AOP切面的优先级"><a href="#AOP切面的优先级" class="headerlink" title="AOP切面的优先级"></a>AOP切面的优先级</h3><p>由于通过AOP实现，程序得到了很好地解耦，但也会带来一些问题，比如我们可能会对Web层做多个切面，校验用户，校验头信息等等，这个时候会碰到切面的处理顺序问题。</p>
<p>所以，我们需要定义每个切面的优先级，我们需要<code>@Order(i)</code>注解来标识切面的优先级，i的值越小，优先级越高。假设我们还有一个切面是<code>CheckNameAspect</code>用来校验name必须是liuyun，我们为其设置<code>@Order(10)</code>,而上文中WebLogAspect设置为<code>@Order(5)</code>所以WebLogAspect有更高的优先级，这个时候的执行顺序是这样的；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@Before中`@Order(5)`的内容 -&gt; @Before中`@Order(10)`的内容 -&gt; `@After`和`@AfterReturning`中`@Order(10)`的内容 -&gt; `@After`和`@AfterReturning`中`@Order(5)`的内容</div></pre></td></tr></table></figure>
<p>故得到这样的结论:</p>
<ul>
<li>切入点前的操作，按Order的值由小到大执行；</li>
<li>切入点后的操作，按Order的值由大到小执行；</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit入门]]></title>
      <url>http://jianwl.com/2016/09/17/Retrofit%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a><code>Retrofit</code>简介</h3><p><code>Retrofit</code>是<code>Square</code>公司开发的一个类型安全的<code>Java</code> &amp; <code>Android</code>的<code>REST</code>客户端库，这个库为网路认证、API请求以及用<code>OkHttp</code>发送网络请求提供了强大的框架。<code>Retrofit</code>库使得从<code>Web API</code>下载<code>JSON</code> 或者 <code>XML</code>数据变得非常简单直接，一旦数据下载完成即将其解析成普通的<code>Java</code>类(<code>POJO</code>).</p>
<p><code>Retrofit</code>使用的最核心的两个技术是：动态代理和<code>Java</code>反射。<code>Retrofit</code>非常巧妙的用注解来描述<code>HTTP</code>请求，将一个<code>HTTP</code>请求抽象成一个<code>Java</code>接口，然后用<code>Java</code>动态代理的方式，动态的将这个接口的注解“解释”成一个<code>HTTP</code>请求，最后在执行这个HTTP请求。</p>
<p><code>Retrofit</code>无非是让用户创建接口，并在接口中指定网络访问路径、规则，把接口传入<code>Retrofit</code>；<code>Retrofit</code>进行解析，然后调用<code>OkHttp</code>完成实际的网络请求并将请求结果处理后返回给用户。</p>
<p>另：<code>Retrofit</code>支持<code>Java 7</code>或<code>Android2.3</code>以上版本</p>
<h3 id="Retrofit优势"><a href="#Retrofit优势" class="headerlink" title="Retrofit优势"></a><code>Retrofit</code>优势</h3><ol>
<li>底层使用<code>OkHttp</code>进行网络传输，性能好、速度快</li>
<li>拥有出色的<code>API</code>文档和社区支持</li>
<li>自动将<code>REST API</code>返回的数据转化为<code>Java</code>对象，且支持多种数据格式转换(<code>JSON</code>、<code>XML</code>…) </li>
<li>使用<code>Java</code>注解声明<code>HTTP</code>请求</li>
<li>支持<code>Multipart</code>请求和文件上传</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>1.搭建本地测试服务,以<code>SpringBoot</code>框架为例</strong></p>
<p><code>Controller层：AdminController.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">@RequestMapping(value = &quot;/admin&quot;)</div><div class="line">public class AdminController &#123;</div><div class="line">    @RequestMapping(value = &quot;/get&quot;,method = RequestMethod.GET)</div><div class="line">    public JsonResult&lt;Admin&gt; get(@RequestParam String name, @RequestParam String password)&#123;</div><div class="line">        return JsonResult.ok(new Admin(name,password));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>对象模型: Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 注： @Data为lombok插件注解，表示Getter &amp; Setter 方法，声明为final类型的属性为构造方法属性，详情可以参考[lombok官网](https://projectlombok.org/) </div><div class="line"></div><div class="line">@Data</div><div class="line">public class Admin &#123;</div><div class="line">    private final String name;</div><div class="line">    private final String password;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>工具类:JsonResult.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class JsonResult&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    private boolean success;</div><div class="line"></div><div class="line">    @JsonInclude(JsonInclude.Include.NON_NULL)</div><div class="line">    private T data;</div><div class="line"></div><div class="line">    @JsonInclude(JsonInclude.Include.NON_NULL)</div><div class="line">    private Integer errorCode;</div><div class="line"></div><div class="line">    @JsonInclude(JsonInclude.Include.NON_NULL)</div><div class="line">    private String errorMessage;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; ok() &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setSuccess(true);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; ok(T data) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setSuccess(true);</div><div class="line">        result.setData(data);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error(Code code) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(code.getCode());</div><div class="line">        result.setErrorMessage(code.getMessage());</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error(String message) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(SERVER_ERROR.getCode());</div><div class="line">        result.setErrorMessage(message);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error() &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(SERVER_ERROR.getCode());</div><div class="line">        result.setErrorMessage(SERVER_ERROR.getMessage());</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; JsonResult&lt;T&gt; error(Integer code ,String message) &#123;</div><div class="line">        JsonResult&lt;T&gt; result = new JsonResult&lt;&gt;();</div><div class="line">        result.setErrorCode(code);</div><div class="line">        result.setErrorMessage(message);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>错误常量枚举：Code.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 注: @Getter 为lombok插件注解 功能与Getter方法等价</div><div class="line">@Getter</div><div class="line">public enum Code &#123;</div><div class="line">    // 基础响应码</div><div class="line">    SERVER_ERROR(1, &quot;服务异常&quot;),</div><div class="line">    BASE_NOT_FOUND(2, &quot;资源不存在&quot;),</div><div class="line">    BASE_UNAUTHORIZED(3, &quot;未授权&quot;),</div><div class="line">    BASE_FORBIDDEN(4, &quot;拒绝访问&quot;),</div><div class="line">    BASE_BAD_PARAMS(5, &quot;请求参数错误&quot;);</div><div class="line"></div><div class="line">    private int code;</div><div class="line">    private String message;</div><div class="line"></div><div class="line">    Code(int code, String message) &#123;</div><div class="line">        this.message = message;</div><div class="line">        this.code = code;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. Retrofit运用实例</strong></p>
<p><code>将网络请求API转换为一个Java接口: UserApi.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface AdminApi &#123;</div><div class="line">    @GET(&quot;/admin/get&quot;)</div><div class="line">    Call&lt;JsonResult&lt;Admin&gt;&gt; get(@Query(&quot;name&quot;) String name, @Query(&quot;password&quot;) String password);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Retrofit生成UserApi接口实现 &amp; 创建同步远程请求:RetrofitBootStrap.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RetrofitBootStrap &#123;</div><div class="line">    private static final String LOCAL_HOST = &quot;http://127.0.0.1:8080&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Retrofit retrofit = new Retrofit.Builder().baseUrl(LOCAL_HOST)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        // retrofit生成UserApi接口实现</div><div class="line">        UserApi service = retrofit.create(AdminApi.class);</div><div class="line"></div><div class="line">        Call&lt;JsonResult&lt;Admin&gt;&gt; postMsg = service.get(&quot;zhangsan&quot;, &quot;123456&quot;);</div><div class="line">        try &#123;</div><div class="line">            // 创建同步远程请求</div><div class="line">            System.out.println(JSON.toJSONString(postMsg.execute().body()));</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.执行步骤</strong></p>
<ol>
<li>启动<code>SpringBoot</code>，将本地测试服务开启来；</li>
<li>执行<code>RetrofitBootStrap.class</code>的<code>main</code>方法，请求本地测试服务的<code>/admin/get的请求路径接口</code>，得到相应结果为：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-17/72733150.jpg" alt=""></li>
</ol>
<h3 id="Retrofit知识点"><a href="#Retrofit知识点" class="headerlink" title="Retrofit知识点"></a>Retrofit知识点</h3><p><strong>注解</strong></p>
<p><code>案例1：GET请求路径带路径参数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</div><div class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) Integer groupId);</div></pre></td></tr></table></figure>
<p><code>案例2：GET请求，带查询参数；类似于Spring中的@RequestParam注解</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;group/user&quot;)</div><div class="line">Call&lt;List&lt;User&gt;&gt; getUser(@Query(&quot;name&quot;) String name);</div></pre></td></tr></table></figure>
<p><code>案例3: POST请求，参数是一个对象，类似于Spring中的@RequestBody注解</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@POST(&quot;/users/new&quot;)</div><div class="line">Call&lt;User&gt; createUser(@Body User user);</div></pre></td></tr></table></figure>
<p><code>案例4: 请求内容类型为</code>form-encoded<code>格式</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//每一个key-value键值对用@Field表示 </div><div class="line">@FormUrlEncoded</div><div class="line">@POST(&quot;user/edit&quot;)</div><div class="line">Call&lt;User&gt; updateUser(@Field(&quot;firstName&quot;) String first,@Field(&quot;lastName&quot;) String last);</div></pre></td></tr></table></figure>
<p><code>案例5：声明请求头参数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 单个请求头参数</div><div class="line">@Headers(&quot;Cache-Control: max-age=640000&quot;)</div><div class="line">@GET(&quot;widget/list&quot;)</div><div class="line">Call&lt;List&lt;Widget&gt;&gt; widgetList();</div><div class="line"></div><div class="line">// 多个请求头参数</div><div class="line">@Headers(&#123;</div><div class="line">    &quot;Accept: application/vnd.github.v3.full+json&quot;,</div><div class="line">    &quot;User-Agent: Retrofit-Sample-App&quot;</div><div class="line">&#125;)</div><div class="line">@GET(&quot;users&quot;)</div><div class="line">Call&lt;User&gt; getUser();</div><div class="line"></div><div class="line">// 参数中带请求头</div><div class="line">@GET(&quot;user&quot;)</div><div class="line">Call&lt;User&gt; getUser(@Header(&quot;Authorization&quot;) String authorization)</div></pre></td></tr></table></figure>
<p><strong>转化器</strong></p>
<p>默认情况下，<code>Retrofit</code>只能反序列化<code>HTTP</code>的<code>Body</code>到<code>okhttp</code>的<code>ResponseBody</code>，并且<code>@Body</code>注解只能接收<code>RequestBody</code>的类型数据。</p>
<p>转换器可以被添加来支持其它类型。下面是6个流行的序列化库来方便操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Gson: com.squareup.retrofit2:converter-gson</div><div class="line">Jackson: com.squareup.retrofit2:converter-jackson</div><div class="line">Moshi: com.squareup.retrofit2:converter-moshi</div><div class="line">Protobuf: com.squareup.retrofit2:converter-protobuf</div><div class="line">Wire: com.squareup.retrofit2:converter-wire</div><div class="line">Simple XML: com.squareup.retrofit2:converter-simplexml</div></pre></td></tr></table></figure>
<p><code>案例：新增Gson转换器</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder().baseUrl(LOCAL_HOST)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://square.github.io/retrofit/" target="_blank" rel="external">retrofit官网</a></li>
<li><a href="https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/" target="_blank" rel="external">用Retrofit2简化HTTP请求</a></li>
<li><a href="https://my.oschina.net/purplesense/blog/650123" target="_blank" rel="external">Retrofit介绍</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA技能树]]></title>
      <url>http://jianwl.com/2016/09/16/JAVA%E6%8A%80%E8%83%BD%E6%A0%91/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 常常问自己，一个合格的工程师应该掌握哪些技能？技术之海太大，时间有限，精力有限，不能遍历；最好的方式是，选取一个方向做深，之后再增加广度，做一个T字型工程师。那对于JAVA工程师，需要掌握哪些必备技能呢？经过调研总结如下，记录下来，时刻鞭策自己，不断学习。</p>
<h3 id="JVM-基础篇"><a href="#JVM-基础篇" class="headerlink" title="JVM (基础篇)"></a>JVM (基础篇)</h3><p><strong>1.1 Java内存模型、Java内存管理、Java堆和栈、垃圾回收</strong></p>
<blockquote>
<p>参考链接：</p>
<p><a href="http://ifeve.com/jmm-faq/" target="_blank" rel="external">Java内存模型FAQ</a></p>
<p><a href="https://www.jcp.org/en/jsr/detail?id=133" target="_blank" rel="external">官方JCP</a></p>
</blockquote>
<p><strong>1.2 了解JVM各种参数及调优</strong></p>
<p><strong>1.3 学习使用Java工具</strong></p>
<blockquote>
<p>jps, jstack, jmap, jconsole, jinfo, jhat, javap, …</p>
<p><a href="http://kenai.com/projects/btrace" target="_blank" rel="external">http://kenai.com/projects/btrace</a></p>
<p><a href="http://www.crashub.org/" target="_blank" rel="external">http://www.crashub.org/</a></p>
<p><a href="https://github.com/taobao/TProfiler" target="_blank" rel="external">https://github.com/taobao/TProfiler</a></p>
<p><a href="https://github.com/CSUG/HouseMD" target="_blank" rel="external">https://github.com/CSUG/HouseMD</a></p>
<p><a href="http://wiki.cyclopsgroup.org/jmxterm" target="_blank" rel="external">http://wiki.cyclopsgroup.org/jmxterm</a></p>
<p><a href="https://github.com/jlusdy/TBJMap" target="_blank" rel="external">https://github.com/jlusdy/TBJMap</a></p>
</blockquote>
<p><strong>1.4 学习Java诊断工具</strong></p>
<blockquote>
<p><a href="http://www.eclipse.org/mat/" target="_blank" rel="external">http://www.eclipse.org/mat/</a></p>
<p><a href="http://visualvm.java.net/oqlhelp.html" target="_blank" rel="external">http://visualvm.java.net/oqlhelp.html</a></p>
</blockquote>
<p><strong>1.5 自己编写各种outofmemory,stackoverflow程序</strong></p>
<blockquote>
<p>HeapOutOfMemory</p>
<p>Young OutOfMemory</p>
<p>MethodArea OutOfMemory</p>
<p>ConstantPool OutOfMemory</p>
<p>DirectMemory OutOfMemory</p>
<p>Stack OutOfMemory Stack OverFlow</p>
</blockquote>
<p><strong>1.6 使用工具尝试解决一下问题，并写下总结</strong></p>
<blockquote>
<p>当一个Java程序响应很慢时，如何查找问题；</p>
<p>当一个Java程序频繁FullGC时，如何解决问题，如何查看垃圾回收日志</p>
<p>当一个Java应用发生OutOfMerrory时该如何解决，年轻代、年老代、永久代解决办法不同，导致原因也不同</p>
<p>参考资料：</p>
<p><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/" target="_blank" rel="external">http://docs.oracle.com/javase/specs/jvms/se7/html/</a></p>
<p><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/" target="_blank" rel="external">http://www.cs.umd.edu/~pugh/java/memoryModel/</a></p>
<p><a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html" target="_blank" rel="external">http://gee.cs.oswego.edu/dl/jmm/cookbook.html</a></p>
<p><a href="http://www.guru99.com/java-virtual-machine-jvm.html" target="_blank" rel="external">http://www.guru99.com/java-virtual-machine-jvm.html</a></p>
</blockquote>
<h3 id="JAVA基础知识"><a href="#JAVA基础知识" class="headerlink" title="JAVA基础知识"></a>JAVA基础知识</h3><p><strong>2.1 阅读源代码</strong></p>
<blockquote>
<p><code>java.lang.String</code> <code>java.lang.Integer</code> <code>java.lang.Long</code> <code>java.lang.Enum</code> <code>java.math.BigDecimal</code> <code>java.lang.ThreadLocal</code> <code>java.lang.ClassLoader</code>  <code>java.net.URLClassLoader</code> <code>java.util.ArrayList</code>  <code>java.util.LinkedList</code> <code>java.util.HashMap</code>  <code>java.util.LinkedHashMap</code> <code>java.util.TreeMap</code> <code>java.util.HashSet</code> <code>java.util.LinkedHashSet</code> <code>java.util.TreeSet</code></p>
</blockquote>
<p><strong>2.2 熟悉Java中各种变量类型</strong></p>
<p><strong>2.3 熟悉Java String的使用，熟悉String的各种函数</strong></p>
<p><strong>2.4 熟悉Java中各种关键字</strong></p>
<p><strong>2.5 学会使用List、Map、Stack、Queue、Set</strong></p>
<blockquote>
<p>上述数据结构的遍历、排序、去重；</p>
</blockquote>
<p><strong>2.6 Java IO &amp; Java NIO,并使用</strong></p>
<blockquote>
<p><code>java.io.*</code> <code>java.nio.*</code>nio和reactor设计模式 文件编码 字符集</p>
</blockquote>
<p><strong>2.7 Java反射 &amp; javassist</strong></p>
<blockquote>
<p>反射与工厂模式 <code>java.lang.reflect.*</code></p>
</blockquote>
<p><strong>2.8 Java序列化</strong></p>
<blockquote>
<p><code>java.io.Serializable</code> 什么是序列化，为什么序列化 序列化与单例模式 google序列化protobuf</p>
</blockquote>
<p><strong>2.9 虚引用、弱引用、软引用</strong></p>
<blockquote>
<p><code>java.lang.ref.*</code>实验这里引用的回收;</p>
</blockquote>
<p><strong>2.10 熟悉Java系统属性</strong></p>
<blockquote>
<p><code>java.util.Properties</code></p>
</blockquote>
<p><strong>2.11 熟悉Annotation用法</strong></p>
<blockquote>
<p><code>java.lang.annotation.*</code></p>
</blockquote>
<p><strong>2.12 JMS</strong></p>
<blockquote>
<p><code>javax.jms.*</code></p>
</blockquote>
<p><strong>2.13 JMX</strong></p>
<blockquote>
<p><code>java.lang.management.*</code> <code>javax.management.*</code></p>
</blockquote>
<p><strong>2.14 泛型和继承，泛型和擦除</strong></p>
<p><strong>2.15 自动拆箱装箱与字节码</strong></p>
<p><strong>2.16 实现Callback</strong></p>
<p><strong>2.17 java.lang.Void类使用</strong></p>
<p><strong>2.18 java Agent premain函数</strong></p>
<blockquote>
<p><code>java.lang.instrument</code></p>
</blockquote>
<p><strong>2.19 单元测试</strong></p>
<blockquote>
<p><a href="http://junit.org/" target="_blank" rel="external">Junit</a></p>
<p><a href="https://code.google.com/p/jmockit/" target="_blank" rel="external">Jmockit</a></p>
<p><a href="http://works.dgic.co.jp/djunit/" target="_blank" rel="external">djUnit</a></p>
</blockquote>
<p><strong>2.20 Java实现通过正则表达式提取一段文本中的电子邮件，并将@替换为#输出</strong></p>
<blockquote>
<p><code>java.lang.util.regex.*</code></p>
</blockquote>
<p><strong>2.21 学习使用常用的Java工具库</strong></p>
<blockquote>
<p><code>commons.lang</code> <code>commons.*...</code> <code>guava-libraries</code> <code>netty</code></p>
<p>参考资料</p>
<p><a href="http://openjdk.java.net/" target="_blank" rel="external">http://openjdk.java.net/</a></p>
<p><a href="http://commons.apache.org/" target="_blank" rel="external">http://commons.apache.org/</a></p>
<p><a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">https://code.google.com/p/guava-libraries/</a></p>
<p><a href="http://netty.io/" target="_blank" rel="external">http://netty.io/</a></p>
<p><a href="http://stackoverflow.com/questions/2954372/difference-between-spi-and-api" target="_blank" rel="external">http://stackoverflow.com/questions/2954372/difference-between-spi-and-api</a></p>
<p><a href="http://stackoverflow.com/questions/11404230/how-to-implement-the-api-spi-pattern-in-java" target="_blank" rel="external">http://stackoverflow.com/questions/11404230/how-to-implement-the-api-spi-pattern-in-java</a></p>
</blockquote>
<p><strong>2.22 什么API &amp; SPI</strong></p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="external">API维基百科</a></p>
<p><a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="external">SPI维基百科</a></p>
</blockquote>
<h3 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h3><p><strong>3.1 阅读源代码，并学会使用</strong></p>
<blockquote>
<p><code>java.lang.Thread</code> <code>java.lang.Runnable</code> <code>java.util.concurrent.Callable</code> <code>java.util.concurrent.locks.ReentrantLock</code> <code>java.util.concurrent.locks.ReentrantReadWriteLock</code> <code>java.util.concurrent.atomic.Atomic*</code> <code>java.util.concurrent.Semaphore</code> <code>java.util.concurrent.CountDownLatch</code> <code>java.util.concurrent.CyclicBarrier</code> <code>java.util.concurrent.ConcurrentHashMap</code> <code>java.util.concurrent.Executors</code></p>
</blockquote>
<p><strong>3.2 学习使用线程池，自己设计线程池需要注意什么</strong></p>
<p><strong>3.3 锁</strong></p>
<blockquote>
<p>什么是锁，锁的种类有哪些，每种锁有什么特点，适用场景是什么，在并发编程中所的意义是什么</p>
</blockquote>
<p><strong>3.4 <code>synchronized</code>的作用是什么，<code>synchronized</code>和<code>lock</code></strong></p>
<p><strong>3.5 sleep和wait</strong></p>
<p><strong>3.6 <code>wait</code>和<code>notify</code></strong></p>
<p><strong>3.7 写一个死锁的程序</strong></p>
<p><strong>3.8 什么是守护线程，守护线程和非守护线程的区别以及用法</strong></p>
<p><strong>3.9 <code>volatile</code>关键字的理解</strong></p>
<blockquote>
<p>C ++ volatile关键字和Java volatile关键字 happens-before语义 编译器指令重排和CPU指令重排</p>
<p>参考资料</p>
<p><a href="https://en.wikipedia.org/wiki/Memory_ordering" target="_blank" rel="external">Memory ordering 维基百科</a></p>
<p><a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming" target="_blank" rel="external">volatile维基百科</a>)</p>
<p><a href="http://preshing.com/20130702/the-happens-before-relation/" target="_blank" rel="external">The Happens-Before Relation</a></p>
</blockquote>
<p><strong>3.10 以下代码是不是线程安全？为什么？如果为count加上volatile修饰是否能够做到线程安全？你觉得该怎么做是线程安全？</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Sample &#123;</div><div class="line">  private static int count = 0;</div><div class="line">  public static void increment() &#123;</div><div class="line">    count++;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.11 解释一下下面两段代码的差别？</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 代码1</div><div class="line">public class Sample &#123;</div><div class="line">  private static int count = 0;</div><div class="line">  synchronized public static void increment() &#123;</div><div class="line">    count++;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 代码2</div><div class="line">public class Sample &#123;</div><div class="line">  private static AtomicInteger count = new AtomicInteger(0);</div><div class="line">  public static void increment() &#123;</div><div class="line">    count.getAndIncrement();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考资料</p>
<p><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="external">Java并发编程实战</a></p>
</blockquote>
<h3 id="Java底层知识-进阶篇"><a href="#Java底层知识-进阶篇" class="headerlink" title="Java底层知识(进阶篇)"></a>Java底层知识(进阶篇)</h3><p><strong>4.1 了解字节码、<code>class</code>文件格式</strong></p>
<blockquote>
<p><a href="http://en.wikipedia.org/wiki/Java_class_file" target="_blank" rel="external">http://en.wikipedia.org/wiki/Java_class_file</a><br><a href="http://en.wikipedia.org/wiki/Java_bytecode" target="_blank" rel="external">http://en.wikipedia.org/wiki/Java_bytecode</a><br><a href="http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings" target="_blank" rel="external">http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings</a><br><a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/" target="_blank" rel="external">http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/</a><br><a href="http://asm.ow2.org/" target="_blank" rel="external">http://asm.ow2.org/</a></p>
</blockquote>
<p><strong>4.2 写一个程序要求实现javap的功能(手工完成，不借助ASM等工具)</strong></p>
<p><code>Java源码</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">   int i = 0;</div><div class="line">   i += 1;</div><div class="line">   i *= 1;</div><div class="line">   System.out.println(i);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>编译后读取class文件输出以下代码</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">  Code:</div><div class="line">   Stack=2, Locals=2, Args_size=1</div><div class="line">   0:   iconst_0</div><div class="line">   1:   istore_1</div><div class="line">   2:   iinc    1, 1</div><div class="line">   5:   iload_1</div><div class="line">   6:   iconst_1</div><div class="line">   7:   imul</div><div class="line">   8:   istore_1</div><div class="line">   9:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">   12:  iload_1</div><div class="line">   13:  invokevirtual   #3; //Method java/io/PrintStream.println:(I)V</div><div class="line">   16:  return</div><div class="line">  LineNumberTable: </div><div class="line">   line 4: 0</div><div class="line">   line 5: 2</div><div class="line">   line 6: 5</div><div class="line">   line 7: 9</div><div class="line">   line 8: 16</div></pre></td></tr></table></figure>
<p><strong>4.3 CPU缓存，L1,L2,L3和伪共享</strong></p>
<blockquote>
<p><a href="http://duartes.org/gustavo/blog/post/intel-cpu-caches/" target="_blank" rel="external">http://duartes.org/gustavo/blog/post/intel-cpu-caches/</a><br><a href="http://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html" target="_blank" rel="external">http://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html</a></p>
</blockquote>
<p><strong>4.4 什么是尾递归</strong></p>
<p><strong>4.5 熟悉位运算</strong></p>
<blockquote>
<p>用位运算实现加、减、乘、除、取余</p>
<p>参考资料：</p>
<ol>
<li><a href="https://book.douban.com/subject/1138768/" target="_blank" rel="external">深入Java虚拟机</a></li>
<li><a href="https://book.douban.com/subject/6522893/" target="_blank" rel="external">深入理解Java虚拟机</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_class_file" target="_blank" rel="external">Java class file维基百科</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_bytecode" target="_blank" rel="external">Java bytecode维基百科</a></li>
<li><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings" target="_blank" rel="external">Java bytecode instruction listings维基百科</a></li>
</ol>
</blockquote>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><strong>5.1 实现AOP</strong></p>
<blockquote>
<p><a href="http://cglib.sourceforge.net/" target="_blank" rel="external">CGLIB和InvocationHandler的区别</a></p>
<p><a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/" target="_blank" rel="external">动态代理模式Javassist实现AOP</a></p>
<p><a href="http://asm.ow2.org/" target="_blank" rel="external">ASM实现AOP</a></p>
<p><strong>5.2 使用模板方法设计模式和策略设计模式实现IOC</strong></p>
</blockquote>
<p><strong>5.3 不使用<code>synchronized</code>和<code>Lock</code>，实现线程安全的单例模式</strong></p>
<p><strong>5.4 nio和reactor设计模式</strong></p>
<h3 id="网络编程知识"><a href="#网络编程知识" class="headerlink" title="网络编程知识"></a>网络编程知识</h3><p><strong>6.1 <code>Java RMI</code>、<code>Socket</code>、<code>HttpClient</code></strong></p>
<p><strong>6.2 用<code>Java</code>写一个简单的静态文件的<code>HTTP</code>服务器</strong></p>
<blockquote>
<p>实现客户端缓存功能，支持返回304实现可并发下载一个文件，使用线程池处理客户端请求，使用nio处理客户端请求，支持简单的rewrite规则。上述功能在实现的时候需要满足<a href="https://en.wikipedia.org/wiki/Open/closed_principle" target="_blank" rel="external">“开闭原则”</a></p>
</blockquote>
<p><strong>6.3 了解Nignx和Apache服务器的特性并搭建一个对应的服务器</strong></p>
<blockquote>
<p><a href="http://nginx.org/" target="_blank" rel="external">Nginx官方链接</a></p>
<p><a href="http://httpd.apache.org/" target="_blank" rel="external">Apache官方链接</a></p>
</blockquote>
<p><strong>6.4 用Java实现FTP、SMTP协议</strong></p>
<p><strong>6.5 什么是CND? 如何实现？DNS起到什么作用？</strong></p>
<blockquote>
<p>搭建一个DNS服务器 搭建一个 Squid 或 Apache Traffic Server 服务器 <a href="http://www.squid-cache.org/" target="_blank" rel="external">http://www.squid-cache.org/</a> <a href="http://trafficserver.apache.org/" target="_blank" rel="external">http://trafficserver.apache.org/</a> <a href="http://en.wikipedia.org/wiki/Domain_Name_System" target="_blank" rel="external">http://en.wikipedia.org/wiki/Domain_Name_System</a></p>
</blockquote>
<h3 id="框架知识"><a href="#框架知识" class="headerlink" title="框架知识"></a>框架知识</h3><p><strong>7 Spring框架 &amp; Mybatis</strong></p>
<blockquote>
<p>阅读 Sping、Spring MVC、Mybatis主要源码；用Spring和Mybatis搭建Java Server</p>
</blockquote>
<h3 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h3><p><strong>8 常用应用服务器</strong></p>
<blockquote>
<p>熟悉使用<a href="http://www.jboss.org/" target="_blank" rel="external">JBoss</a></p>
<p>熟悉使用<a href="http://tomcat.apache.org/" target="_blank" rel="external">Tomcat</a></p>
<p>熟悉使用<a href="http://www.eclipse.org/jetty/" target="_blank" rel="external">Jetty</a></p>
</blockquote>
<h3 id="编译原理知识"><a href="#编译原理知识" class="headerlink" title="编译原理知识"></a>编译原理知识</h3><p><strong>9.1 用Java实现以下表达式解析并返回结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sysdate</div><div class="line">sysdate - 1</div><div class="line">sysdate - 1/24</div><div class="line">sysdate - 1/(12*2)</div></pre></td></tr></table></figure>
<p><strong>9.2 实现对一个List通过DSL筛选</strong></p>
<p>要求返回列表中匹配的对象，即最后两个对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">QList&lt;Map&lt;String, Object&gt;&gt; mapList = new QList&lt;Map&lt;String, Object&gt;&gt;;</div><div class="line">  mapList.add(&#123;&quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: -1,&quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 0, &quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;test test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;hatter test&quot;&#125;);</div><div class="line">  mapList.add(&#123;&quot;id&quot;: 3, &quot;name&quot;: &quot;test hatter&quot;&#125;);</div><div class="line">  mapList.query(&quot;id is not null and id &gt; 0 and name   like &apos;%hatter%&apos;&quot;);</div></pre></td></tr></table></figure>
<p><strong>9.3 用Java实现以下程序（语法和变量作用域处理都和JavaScript类似</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = 2;</div><div class="line">var c = function() &#123;</div><div class="line">  var a = 3;</div><div class="line">  println(a);</div><div class="line">  println(b);</div><div class="line">&#125;;</div><div class="line">c();</div><div class="line">println(a);</div><div class="line">println(b);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">2</div><div class="line">1</div><div class="line">2</div></pre></td></tr></table></figure>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><strong>10 常用操作系统</strong></p>
<blockquote>
<p><code>Ubuntu Centos</code> 使用<code>Linix</code>，熟悉<code>Shell</code>脚本</p>
</blockquote>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p><strong>11.1 关系型数据库</strong></p>
<blockquote>
<p><code>MySQL</code> 如何看执行计划 如何搭建<code>MySQL</code>主备 <code>binlog</code>是什么 <code>Derby</code>，<code>H2</code>，<code>PostgreSQL</code> <code>SQLite</code></p>
</blockquote>
<p><strong>11.2 NoSQL</strong></p>
<blockquote>
<p><a href="http://redis.io/" target="_blank" rel="external">Redis</a></p>
<p><a href="https://memcached.org/" target="_blank" rel="external">Memecached</a></p>
<p><a href="http://cassandra.apache.org/" target="_blank" rel="external">cassandra</a></p>
<p><a href="https://code.google.com/p/leveldb/" target="_blank" rel="external">Leveldb</a></p>
<p><a href="http://hbase.apache.org/" target="_blank" rel="external">HBase</a></p>
<p><a href="http://www.mongodb.org/" target="_blank" rel="external">MongoDB</a></p>
<p><a href="http://www.neo4j.org/" target="_blank" rel="external">图数据库neo4j</a></p>
</blockquote>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><p><strong>12.1 <code>Zookeeper</code>,在<code>Linix</code>上部署ZK</strong></p>
<p><strong>12.2 <code>Solr</code>、<code>Lucence</code>、<code>ElasticSearch</code></strong></p>
<blockquote>
<p>在<code>Linux</code>上部署<code>Solr</code>、<code>solrCloud</code>、新增、删除、查询索引</p>
</blockquote>
<p><strong>12.3 <code>Storm</code> 流式计算，了解<code>Spark</code> <code>S4</code></strong></p>
<blockquote>
<p>在<code>Linux</code>上部署<code>Storm</code>，用<code>Zookeeper</code>做协调，运行Storm Hello World;Local和Remote 模式运行调试<code>storm topology</code></p>
</blockquote>
<p><strong>12.4 Hadoop,离线计算</strong></p>
<blockquote>
<p><code>HDFS</code>: 部署<code>NameNode</code> <code>SecondaryNameNode</code> <code>DataNode</code>、上传文件、打开文件、更改文件、删除文件</p>
<p><code>MapReduce</code>：部署<code>JobTracker</code>，<code>TaskTracker</code>，编写mr job</p>
<p><code>Hive</code>：部署<code>hive</code>，书写hive sql，得到结果</p>
<p><code>Presto</code>：类<code>hive</code>，不过比<code>hive</code>快，非常值得学习署</p>
</blockquote>
<p><strong>12.5 分布式日志收集<code>Flume</code>、<code>Kafka</code>、<code>Logstash</code></strong></p>
<p><strong>12.6 数据挖掘，<code>Mahout</code></strong></p>
<h3 id="网络安全知识"><a href="#网络安全知识" class="headerlink" title="网络安全知识"></a>网络安全知识</h3><p><strong>13.1 什么是<code>DES</code>、<code>AES</code></strong></p>
<p><strong>13.2 什么是<code>RSA</code>、<code>DSA</code></strong></p>
<p><strong>13.3 什么是<code>MD5</code>，<code>SHA1</code></strong></p>
<p><strong>13.4 什么是<code>SSL</code>、<code>TLS</code>，为什么<code>HTTPS</code>相对比较安全</strong></p>
<p><strong>13.5 什么是中间人攻击、如果避免中间人攻击</strong></p>
<p><strong>13.6 什么是<code>DOS</code>、<code>DDOS</code>、<code>CC</code>攻击</strong></p>
<p><strong>13.7 什么是<code>CSRF</code>攻击</strong></p>
<p><strong>13.8 什么是<code>CSS</code>攻击</strong></p>
<p><strong>13.9 什么是<code>SQL</code>注入攻击</strong></p>
<p><strong>13.10 什么是<code>Hash</code>碰撞拒绝服务攻击</strong></p>
<p><strong>13.11 了解并学习下面几种增强安全的技术</strong></p>
<blockquote>
<p>参考资料<br><a href="http://www.openauthentication.org/" target="_blank" rel="external">http://www.openauthentication.org/</a><br>HOTP <a href="http://www.ietf.org/rfc/rfc4226.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc4226.txt</a><br>TOTP <a href="http://tools.ietf.org/rfc/rfc6238.txt" target="_blank" rel="external">http://tools.ietf.org/rfc/rfc6238.txt</a><br>OCRA <a href="http://tools.ietf.org/rfc/rfc6287.txt" target="_blank" rel="external">http://tools.ietf.org/rfc/rfc6287.txt</a><br><a href="http://en.wikipedia.org/wiki/Salt_(cryptography" target="_blank" rel="external">http://en.wikipedia.org/wiki/Salt_(cryptography</a>)</p>
</blockquote>
<p><strong>13.12 用<code>openssl</code>签一个证书部署到<code>apache</code>或<code>nginx</code></strong></p>
<blockquote>
<p>参考资料<br><a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function" target="_blank" rel="external">http://en.wikipedia.org/wiki/Cryptographic_hash_function</a><br><a href="http://en.wikipedia.org/wiki/Block_cipher" target="_blank" rel="external">http://en.wikipedia.org/wiki/Block_cipher</a><br><a href="http://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="external">http://en.wikipedia.org/wiki/Public-key_cryptography</a><br><a href="http://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="external">http://en.wikipedia.org/wiki/Transport_Layer_Security</a><br><a href="http://www.openssl.org/" target="_blank" rel="external">http://www.openssl.org/</a><br><a href="https://code.google.com/p/google-authenticator/" target="_blank" rel="external">https://code.google.com/p/google-authenticator/</a></p>
</blockquote>
<h3 id="扩展技能"><a href="#扩展技能" class="headerlink" title="扩展技能"></a>扩展技能</h3><p><strong>14.1 云计算、分布式、高可用、可扩展</strong></p>
<p><strong>14.2 虚拟化</strong></p>
<blockquote>
<p><a href="https://linuxcontainers.org/" target="_blank" rel="external">https://linuxcontainers.org/</a></p>
<p><a href="http://www.linux-kvm.org/page/Main_Page" target="_blank" rel="external">http://www.linux-kvm.org/page/Main_Page</a></p>
<p><a href="http://www.xenproject.org/" target="_blank" rel="external">http://www.xenproject.org/</a></p>
<p><a href="https://www.docker.io/" target="_blank" rel="external">https://www.docker.io/</a></p>
</blockquote>
<p><strong>14.3 监控</strong></p>
<blockquote>
<p><a href="http://www.nagios.org/" target="_blank" rel="external">http://www.nagios.org/</a></p>
<p><a href="http://ganglia.info/" target="_blank" rel="external">http://ganglia.info/</a></p>
</blockquote>
<p><strong>14.4 负载均衡</strong></p>
<blockquote>
<p><a href="http://www.linuxvirtualserver.org/" target="_blank" rel="external">http://www.linuxvirtualserver.org/</a></p>
</blockquote>
<p><strong>14.5 学会使用Git</strong></p>
<blockquote>
<p><a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></p>
<p><a href="https://git.oschina.net/" target="_blank" rel="external">https://git.oschina.net/</a></p>
</blockquote>
<p><strong>14.6 学会使用<code>Maven</code></strong></p>
<blockquote>
<p><a href="http://maven.apache.org/" target="_blank" rel="external">http://maven.apache.org/</a></p>
</blockquote>
<p><strong>14.7 学习一个小语种语言</strong></p>
<blockquote>
<p><code>Groovy</code> <code>Scala</code> <code>LISP</code>  <code>Common LISP</code> <code>Schema</code>, <code>Clojure</code> <code>R</code> <code>Julia</code> <code>Lua</code> <code>Ruby</code></p>
</blockquote>
<p><strong>14.8 尝试了解编码的本质</strong></p>
<blockquote>
<p>了解以下概念<code>ASCLL</code>，<code>ISO-8859-1</code> <code>GB2312</code> <code>GBK</code> <code>GB18030 Unicode</code>,<code>UTF-8</code>不使用<code>String.getBytes()</code>等其他工具类/函数完成下面功能</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws IOException &#123;</div><div class="line">    String str = &quot;Hello, 我们是中国人。&quot;;</div><div class="line">    byte[] utf8Bytes = toUTF8Bytes(str);</div><div class="line">    FileOutputStream fos = new FileOutputStream(&quot;f.txt&quot;);</div><div class="line">    fos.write(utf8Bytes);</div><div class="line">    fos.close();</div><div class="line">&#125;</div><div class="line">public static byte[] toUTF8Bytes(String str) &#123;</div><div class="line">    return null; // TODO</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>想以下上面的程序能不能写一个转GBK的？写个程序自动判断一个文件时哪一种编码？</p>
</blockquote>
<p><strong>14.9 尝试了解时间的本质</strong></p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Time_zone" target="_blank" rel="external">时区</a> &amp; 冬令时 &amp; 夏令时</p>
<p><a href="https://en.wikipedia.org/wiki/Leap_year" target="_blank" rel="external">闰年</a></p>
<p><a href="ftp://ftp.iana.org/tz/data/leapseconds" target="_blank" rel="external">闰秒</a></p>
</blockquote>
<h3 id="横向扩展技能"><a href="#横向扩展技能" class="headerlink" title="横向扩展技能"></a>横向扩展技能</h3><p><strong>15.1 <code>JavaScript</code>知识</strong></p>
<p><strong>15.2 什么是<code>prototype</code></strong></p>
<blockquote>
<p>修改代码，是程序输出 <code>1 3 5</code>  <code>http://jsfiddle.net/Ts7Fk/</code></p>
</blockquote>
<p><strong>15.3 什么是闭包</strong></p>
<blockquote>
<p>看一下这段代码，并解释一下为什么按<code>Button1</code>时没有<code>alert</code>出<code>This is button: 1</code>，如何修改:<code>http://jsfiddle.net/FDPj3/1/</code></p>
</blockquote>
<p><strong>15.4 学习一个JS框架</strong></p>
<blockquote>
<p><code>React</code> <code>ArgularJS</code> <code>ExtJS</code> <code>JQuery</code></p>
</blockquote>
<p><strong>15.5 写一个<a href="http://en.wikipedia.org/wiki/Greasemonkey" target="_blank" rel="external">Greasemonkey</a>插件</strong></p>
<p><strong>15.6 学习<a href="http://nodejs.org/" target="_blank" rel="external">node.js</a></strong></p>
<p><strong>15.7 学习<code>Html5</code></strong></p>
<blockquote>
<p><a href="https://docs.angularjs.org/api" target="_blank" rel="external">ArgularJS</a></p>
</blockquote>
<p>未完待续….</p>
<h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><blockquote>
<p><a href="http://www.hollischuang.com/archives/489?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">七周七语言</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=522029636170" target="_blank" rel="external">七周七数据库</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=525319334615" target="_blank" rel="external">Hadoop技术内幕</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=25826348062&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073093_2k4_386928692&amp;pvid=200_10.176.139.147_1100_1474073093283" target="_blank" rel="external">Hbase In Action</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=521649099033&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073128_3k1_97638280&amp;pvid=200_10.176.139.154_1162_1474073128458" target="_blank" rel="external">这就是搜索引擎</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=521912282578&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073152_3k2_1235641721&amp;pvid=200_10.176.139.184_1216_1474073152748" target="_blank" rel="external">深入分析Java Web技术内幕</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=520125493740&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073190_2k7_326211549&amp;pvid=200_10.176.139.160_1042_1474073190008" target="_blank" rel="external">大型网站技术架构</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=522994008657&amp;ali_trackid=2:mm_42606752_12122458_44532463:1474073238_214_523050217&amp;pvid=200_10.176.139.147_473_1474073238628" target="_blank" rel="external">算法导论</a></p>
<p><a href="https://detail.tmall.com/item.htm?id=525443498378" target="_blank" rel="external">代码大全</a></p>
<p>JavaScript权威指南</p>
<p>高性能MySQL</p>
<p>计算机程序设计艺术</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring数据校验]]></title>
      <url>http://jianwl.com/2016/09/14/Spring%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有一句话怎么说来着？对于外部输入的数据都是不可信的，都需要进行校验。故对于入参的校验是后端必不可少的工作,<code>JAVA</code>中提供了一套注解可供校验入参时不为NULL，不为空。</p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>场景：入参是一个对象，需要保证对象中的某些参数不为空，或不为NULL。</p>
<p>注意事项：</p>
<ol>
<li>对象前加<code>@Valid</code>注解，表示对象中的参数严格按照注解规范</li>
<li>属性前加<code>@NotNull</code>注解，表示对象中的属性不能为NULL，但允许为空，即(“”、”空格1”、”空格1空格2”)这三种情况均可。</li>
<li>属性前加<code>@NotEmpty</code>注解，表示对象中的属性不能为NULL，且长度必须大于0，，即(“空格1”、”空格1空格2”)这两种情况均可，(“”)这种情况长度为0，不是满足条件的。</li>
<li>属性前加<code>@NotBlank</code>注解，该注解只能作用于<code>String</code>上，不能为NULL，而且调用trim()后，长度必须大于0；</li>
</ol>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>对象模型User.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    @NotNull</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    @NotEmpty</div><div class="line">    private String password;</div><div class="line"></div><div class="line">    @NotBlank</div><div class="line">    private String nickName;</div><div class="line"></div><div class="line">    @Valid</div><div class="line">    private Address address;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User user = new User();</div><div class="line">        Address address = new Address();</div><div class="line">        address.setPlaceNo(234);</div><div class="line">        address.setPlace(&quot;shanghai&quot;);</div><div class="line">        user.setPassword(&quot;12321&quot;);</div><div class="line">        user.setName(&quot;zhangsan&quot;);</div><div class="line">        user.setName(&quot;zhaowu&quot;);</div><div class="line">        user.setAddress(address);</div><div class="line">        System.out.println(JSON.toJSONString(user));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 此处省略 Getter &amp; Setter方法</div></pre></td></tr></table></figure>
<p><strong>对象模型Address.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Address &#123;</div><div class="line">    @NotNull</div><div class="line">    private String place;</div><div class="line">    @NotNull</div><div class="line">    private Integer placeNo;</div><div class="line">    </div><div class="line">    // 此处省略 Getter &amp; Setter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>SpringBoot的Controller层: AdminController.class</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class AdminController &#123;</div><div class="line">    @RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.POST)</div><div class="line">    public String get(@RequestBody @Valid User user)&#123;</div><div class="line">        return JSON.toJSONString(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要特别注意的是，一个对象中包含另外一个子对象，需要对子对象中的参数进行校验，子对象前需要加上<code>@Valid</code>注解。</p>
<p><strong>提示：</strong> 为了让例子更加简单，将<code>AdminController</code>原来返回的<code>JsonResult</code>对象改为了<code>String</code>，故验证部分的返回值和按照上述教程所得到的返回值是不一致的。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><strong>尝试1：验证加上@NotNull注解，该属性不能为NULL</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/7654533.jpg" alt=""></p>
<p><strong>尝试2：验证加上@NotEmpty注解，该入参长度需大于0</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/98161087.jpg" alt=""></p>
<p><strong>尝试3：验证加上@NotEmpty注解，该入参长度需大于0，包含空格</strong><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/6368009.jpg" alt=""></p>
<p><strong>尝试4：验证加上@NotBlank注解，该入参长度在去除空格之后，长度大于0</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-16/51683357.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA代码规范]]></title>
      <url>http://jianwl.com/2016/09/14/JAVA%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 代码是写给人看的，顺便在计算机上运行而已。把常用的标准记录下来，时常检验自己的代码是否符合规范，避免写烂代码。</p>
<h3 id="烂代码是如何出现？"><a href="#烂代码是如何出现？" class="headerlink" title="烂代码是如何出现？"></a>烂代码是如何出现？</h3><blockquote>
<ol>
<li>未经思考就开始编码</li>
<li>功能完成就结束编码</li>
<li>修改已有代码</li>
</ol>
</blockquote>
<h3 id="Java代码的一些规范"><a href="#Java代码的一些规范" class="headerlink" title="Java代码的一些规范"></a>Java代码的一些规范</h3><p><strong>命名</strong></p>
<ol>
<li>私有方法以「_ 」作为前缀</li>
<li>以获取为目的的数据库查询方法以get作为前缀，以搜索为目的的数据库查询方法以find作为前缀。</li>
<li>测试方法以test最为前缀</li>
<li>类名一般以名词结尾，方法名应该是动词或者动词短语</li>
<li>接口类以字母I作为前缀(常量类除外)</li>
<li>抽象父类以Base作为前缀</li>
<li>普通父类以类别作为后缀，比如xxxController,xxxService,xxxConstants,xxxVO(页面模型)、xxxQO(查询模型)、xxxHelper(带状态工具类),xxxUtils(无状态工具类)等</li>
<li>测试类以Test作为后缀，与被测试类使用同一包名</li>
<li>VO、QO的成员同一命名(包括大小写)</li>
<li>增加重要细节，比如时间变量的单位</li>
<li>对于作用域大的变量使用较长的名字。</li>
</ol>
<p><strong>代码</strong></p>
<ol>
<li>尽量编码使用NULL、使用Optional.ofNullable替代</li>
<li>不要使用Optional作为默认参数，使用重载或者拆分方法</li>
<li>Stream仅限于方法内部使用，接口层面使用List或Set</li>
<li>循环流程中尽量避免自动装箱，显式调用Integer.intValue()或Integer.valueOf()</li>
<li>工具类不应该捕获异常，而应将异常抛出由调用方处理</li>
<li>使用JAVA8的DateTime，不要用JodaTime.</li>
<li>除非会有多个实现，或者有解耦需求，不要使用Inteface.</li>
<li>与常量做比较时，应该把常量放在前面避免空指针异常</li>
<li>私有常量直接定义在类层面，而非方法层面。</li>
</ol>
<h3 id="抽象-amp-分类"><a href="#抽象-amp-分类" class="headerlink" title="抽象 &amp; 分类"></a>抽象 &amp; 分类</h3><p><code>抽象和分类是程序员/架构师最重要的能力</code></p>
<p>架构和编程都是一个不断抽象的过程，我们把业务需求抽象成数据模型、服务和应用，面向对象就是抽象出类和对象，面向过程就是抽象出方法和函数。</p>
<p>抽象出模块后，需要合理的将功能分到不同的模块，清楚的定义模块的边界，才能保证模块的可维护性和健壮性。</p>
<p>抽象和分类是将复杂的东西简单化的过程。对于司机，汽车是一个抽象，它的接口是方向盘、档位、刹车和油门。 对于汽车，轮胎是一个抽象，轮胎的规格都是固定的几种，可以安装在不同的汽车上。</p>
<h3 id="单一职责原则-Simple-Responsibility-Principle-SRP"><a href="#单一职责原则-Simple-Responsibility-Principle-SRP" class="headerlink" title="单一职责原则 Simple Responsibility Principle SRP"></a>单一职责原则 Simple Responsibility Principle SRP</h3><p><code>一个模块，只应该做一件事，并把这件事做好，或者只有一个引起该模块变化的原因。</code></p>
<h3 id="开放封闭原则-Open-Closed-Principle-OCP"><a href="#开放封闭原则-Open-Closed-Principle-OCP" class="headerlink" title="开放封闭原则 Open/Closed Principle,OCP"></a>开放封闭原则 Open/Closed Principle,OCP</h3><p>对扩展开放，对修改封闭。当需求改变时，我们可以扩展模块以满足新的需求，但扩展时，不应该需要修改原模块的实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class Square &#123; </div><div class="line">    public double side;</div><div class="line">&#125;</div><div class="line">public class Rectangle &#123; </div><div class="line">    public double height;</div><div class="line">    public double width;</div><div class="line">&#125;</div><div class="line">public class Circle &#123; </div><div class="line">    public double radius;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Geometry &#123;</div><div class="line">    public double area(Object shape) &#123;</div><div class="line">        if (shape instanceof Square) &#123;</div><div class="line">            Square s = (Square)shape;</div><div class="line">            return s.side * s.side;</div><div class="line">        &#125; else if (shape instanceof Rectangle) &#123;</div><div class="line">            Rectangle r = (Rectangle)shape;</div><div class="line">            return r.height * r.width;</div><div class="line">        &#125; else if (shape instanceof Square) &#123;</div><div class="line">            Circle c = (Circle)shape;</div><div class="line">            return PI * c.radius * c.radius;</div><div class="line">        &#125; else &#123;</div><div class="line">            throw new NoSuchShareException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Square implements Share &#123; </div><div class="line">    public double side;</div><div class="line">    </div><div class="line">    public double area() &#123;</div><div class="line">        return side * side;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Rectangle implements Share &#123; </div><div class="line">    public double height;</div><div class="line">    public double width;</div><div class="line">    </div><div class="line">    public double area() &#123;</div><div class="line">        return height * width;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Circle implements Share &#123; </div><div class="line">    public double radius;</div><div class="line">    </div><div class="line">    public double area() &#123;</div><div class="line">        return PI * radius * radius;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过程式代码难以添加新数据结构，面向对象代码难以添加新方法。</p>
<p>如果要添加一个新的形状(比如椭圆)，那面向对象的实现会方便些；</p>
<p>如果要添加一个新的方法(比如计算周长)，那过程式的实现会方便些。</p>
<h3 id="依赖倒置原则-Dependency-Inversion-Principle，DIP"><a href="#依赖倒置原则-Dependency-Inversion-Principle，DIP" class="headerlink" title="依赖倒置原则(Dependency Inversion Principle，DIP)"></a>依赖倒置原则(Dependency Inversion Principle，DIP)</h3><p>高层模块不应该依赖于底层模块的实现，两者都应该依赖于抽象，抽象不应该依赖于细节，细节应该依赖于抽象。</p>
<p><code>所有的协议和标准化都是DIP的一种实现</code></p>
<ol>
<li>TCP、HTTP等网络协议</li>
<li>JDBC和SQL</li>
<li>操作系统、JVM</li>
<li>Spring框架及各种设计模式</li>
<li>编程语言 </li>
</ol>
<p><code>生活中也有很多例子</code></p>
<ol>
<li>汽车和轮胎</li>
<li>铅笔和笔芯</li>
<li>电源插座</li>
<li>USB接口</li>
</ol>
<h3 id="里氏替换原则-Liskov-Substitution-Principle-LSP"><a href="#里氏替换原则-Liskov-Substitution-Principle-LSP" class="headerlink" title="里氏替换原则 Liskov Substitution Principle,LSP"></a>里氏替换原则 Liskov Substitution Principle,LSP</h3><p>子类必须能够替换他们的基类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Rectangle &#123; </div><div class="line">    public double height;</div><div class="line">    public double width;</div><div class="line">    </div><div class="line">    public void setHeight(int height) &#123; ... &#125;</div><div class="line">    public void setWidth(int width) &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Square extends Rectangle &#123; </div><div class="line">    ???</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正方形是一个特殊的长方形，那么，正方形可以是长方形的子类吗？</p>
<h3 id="接口隔离原则-Interface-Segregation-Principle-ISP"><a href="#接口隔离原则-Interface-Segregation-Principle-ISP" class="headerlink" title="接口隔离原则(Interface Segregation Principle, ISP)"></a>接口隔离原则(Interface Segregation Principle, ISP)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">interface Shape &#123;</div><div class="line">    public function area();</div><div class="line">    public function volume();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Square extends Shape &#123; </div><div class="line">    ???</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果正方形继承了Shape接口，该如何计算体积以实现volume方法？</p>
<h3 id="迪米特法则-Law-of-Demeter"><a href="#迪米特法则-Law-of-Demeter" class="headerlink" title="迪米特法则(Law of Demeter)"></a>迪米特法则(Law of Demeter)</h3><p>模块不应该了解它所操作的对象的内部情况。</p>
<p><code>生活中案例</code></p>
<p>如果你想让你的狗跑的话，你会对狗狗说，还是对四条狗腿说？<br>如果你去店里买东西，你会把钱交给店员，还是会把钱包交给店员让他自己拿？</p>
<p><code>代码例子</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</div></pre></td></tr></table></figure>
<p>这样的代码把对象内部实现暴露了出来，应该考虑讲该功能直接暴露为接口，或者合理使用设计模式（如Facade）。</p>
<h3 id="其他原则"><a href="#其他原则" class="headerlink" title="其他原则"></a>其他原则</h3><ul>
<li>Don’t Repeat Yourself (DRY)</li>
<li>Keep It Simple, Stupid (KISS)</li>
<li>You Ain’t Gonna Need It (YAGNI)</li>
<li>命令/查询分离原则(Command-Query Separation, CQS)</li>
<li>惯例优于配置原则(Convention over Configuration, CoC)</li>
<li>高内聚/低耦合(High Cohesion &amp; Loose Coupling)</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.devtf.cn/?p=1134" target="_blank" rel="external">http://www.devtf.cn/?p=1134</a></li>
<li><a href="http://www.jianshu.com/p/7645a5ea7f46" target="_blank" rel="external">http://www.jianshu.com/p/7645a5ea7f46</a></li>
<li><a href="http://blog.2baxb.me/archives/1343" target="_blank" rel="external">http://blog.2baxb.me/archives/1343</a></li>
<li><a href="http://blog.2baxb.me/archives/1378" target="_blank" rel="external">http://blog.2baxb.me/archives/1378</a></li>
<li><a href="http://blog.2baxb.me/archives/1499" target="_blank" rel="external">http://blog.2baxb.me/archives/1499</a></li>
<li><a href="http://beiyuu.com/readable-code/" target="_blank" rel="external">http://beiyuu.com/readable-code/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=408703236&amp;idx=1&amp;sn=3f78abcca906d5edee06ff85b2d22416&amp;scene=0#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=408703236&amp;idx=1&amp;sn=3f78abcca906d5edee06ff85b2d22416&amp;scene=0#wechat_redirect</a></li>
<li><a href="http://coolshell.cn/articles/4535.html" target="_blank" rel="external">http://coolshell.cn/articles/4535.html</a></li>
<li><a href="http://blog.jobbole.com/86267/" target="_blank" rel="external">http://blog.jobbole.com/86267/</a></li>
<li><a href="http://www.importnew.com/10656.html" target="_blank" rel="external">http://www.importnew.com/10656.html</a></li>
<li><a href="http://luopq.com/2016/02/21/write-good-function/" target="_blank" rel="external">http://luopq.com/2016/02/21/write-good-function/</a></li>
</ul>
<hr>
<ul>
<li><a href="http://book.douban.com/subject/4199741/" target="_blank" rel="external">「代码整洁之道」</a></li>
<li><a href="https://book.douban.com/subject/10797189/" target="_blank" rel="external">「编写可读代码的艺术」</a></li>
<li><a href="http://book.douban.com/subject/1140457/" target="_blank" rel="external">「敏捷软件开发：原则、模式与实践」</a></li>
<li><a href="http://book.douban.com/subject/1467587/" target="_blank" rel="external">「UNIX编程艺术」</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL之查询性能优化]]></title>
      <url>http://jianwl.com/2016/09/14/MySQL%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现有的项目，对于数据库查询的性能要求挺高的，对于查询性能的优化也是迫在眉睫，接下来，让我们一同来学习MySQL查询性能优化。</p>
<p>查询性能低下，最基本的原因是访问的数据太多。大部分性能低下的查询都可以通过减少访问的数据量的方式进行优化。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>查询不需要的记录</strong></p>
<p>场景：有些开发者习惯先使用<code>SELECT</code>语句查询大量的结果，然后获取前面N行后关闭结果集，他们认为MYSQL会执行查询，并只返回他们需要的10条数据，然后停止查询。但实际是MYSQL回查询出所有的结果集。客户端接受所有结果集，然后抛弃大部分数据。最有效的方式是在查询后加上LIMIT。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT username from USER LIMIT 10</div></pre></td></tr></table></figure>
<p><strong>多表关联时返回全部的列</strong></p>
<p>场景：我想获取电影My Love中出现的演员</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM actor </div><div class="line">INNER JOIN film_actor USIGN(actor_id)</div><div class="line">INNER JOIN film USIGN(film_id)</div><div class="line">WHERE film.title = &quot;My Love&quot;</div></pre></td></tr></table></figure>
<p>这将返回三个表的全部数据列，正确的做法应该是<code>SELECT actor.* FROM actor ....</code></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>高性能MySQL第三版</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决拦截器读取Request中的流,Controller读取不到的问题]]></title>
      <url>http://jianwl.com/2016/09/13/%E8%A7%A3%E5%86%B3%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AF%BB%E5%8F%96Request%E4%B8%AD%E7%9A%84%E6%B5%81-Controller%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天和同事对接项目，对方请求我的服务，请求参数是一个<code>JSON</code>；在进入服务之前，需要做一个签名验证，所以在拦截器部分，读取了请求参数。但拦截器读取完请求参数之后，Controller层便不能读取了。因为<code>Spring MVC</code>中<code>@RequestBody</code>是流的读取方式，而流只能读取一次，在拦截器中读取了，在Controller中再次读取便为空数据。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>SpringMVC解决方案</strong></p>
<p>流只能读一次，读了就没有了，为了后面的代码还能够取得的流，应该将其写出去。封装请求流，将请求流写出去。</p>
<p><code>CustomServletRequestWrapper.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 包装HttpServletRequest</div><div class="line"> */</div><div class="line">public class CustomServletRequestWrapper extends HttpServletRequestWrapper &#123;</div><div class="line"></div><div class="line">    private final byte[] body;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Construct a wrapper for the specified request.</div><div class="line">     *</div><div class="line">     * @param request The request to be wrapped</div><div class="line">     */</div><div class="line">    public CustomServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</div><div class="line">        super(request);</div><div class="line">        body = toByteArray(super.getInputStream());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public BufferedReader getReader() throws IOException &#123;</div><div class="line">        return new BufferedReader(new InputStreamReader(getInputStream()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ServletInputStream getInputStream() throws IOException &#123;</div><div class="line">        return new RequestBodyCachingInputStream(body);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class RequestBodyCachingInputStream extends ServletInputStream &#123;</div><div class="line">        private byte[] body;</div><div class="line">        private int lastIndexRetrieved = -1;</div><div class="line">        private ReadListener listener;</div><div class="line"></div><div class="line">        public RequestBodyCachingInputStream(byte[] body) &#123;</div><div class="line">            this.body = body;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int read() throws IOException &#123;</div><div class="line">            if (isFinished()) &#123;</div><div class="line">                return -1;</div><div class="line">            &#125;</div><div class="line">            int i = body[lastIndexRetrieved + 1];</div><div class="line">            lastIndexRetrieved++;</div><div class="line">            if (isFinished() &amp;&amp; listener != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                    throw e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isFinished() &#123;</div><div class="line">            return lastIndexRetrieved == body.length - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isReady() &#123;</div><div class="line">            // This implementation will never block</div><div class="line">            // We also never need to call the readListener from this method, as this method will never return false</div><div class="line">            return isFinished();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void setReadListener(ReadListener listener) &#123;</div><div class="line">            if (listener == null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener cann not be null&quot;);</div><div class="line">            &#125;</div><div class="line">            if (this.listener != null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener has been set&quot;);</div><div class="line">            &#125;</div><div class="line">            this.listener = listener;</div><div class="line">            if (!isFinished()) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int available() throws IOException &#123;</div><div class="line">            return body.length - lastIndexRetrieved - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void close() throws IOException &#123;</div><div class="line">            lastIndexRetrieved = body.length - 1;</div><div class="line">            body = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>设置过滤器，封装请求流: RequestReplaceFilter.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 替换Request对象</div><div class="line"> */</div><div class="line">public class RequestReplaceFilter extends OncePerRequestFilter &#123;</div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</div><div class="line">        if (!(request instanceof CustomServletRequestWrapper)) &#123;</div><div class="line">            request = new CustomServletRequestWrapper(request);</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>在web.xml中添加过滤器</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;requestReplaceFilter&lt;/filter-name&gt;</div><div class="line">	&lt;filter-class&gt;com.dada.bd.filter.RequestReplaceFilter&lt;/filter-class&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line"></div><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;requestReplaceFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure>
<p><strong>SpringBoot解决方案</strong></p>
<p><code>CustomServletRequestWrapper.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 包装HttpServletRequest</div><div class="line"> */</div><div class="line">public class CustomServletRequestWrapper extends HttpServletRequestWrapper &#123;</div><div class="line"></div><div class="line">    private final byte[] body;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Construct a wrapper for the specified request.</div><div class="line">     *</div><div class="line">     * @param request The request to be wrapped</div><div class="line">     */</div><div class="line">    public CustomServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</div><div class="line">        super(request);</div><div class="line">        body = toByteArray(super.getInputStream());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public BufferedReader getReader() throws IOException &#123;</div><div class="line">        return new BufferedReader(new InputStreamReader(getInputStream()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ServletInputStream getInputStream() throws IOException &#123;</div><div class="line">        return new RequestBodyCachingInputStream(body);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class RequestBodyCachingInputStream extends ServletInputStream &#123;</div><div class="line">        private byte[] body;</div><div class="line">        private int lastIndexRetrieved = -1;</div><div class="line">        private ReadListener listener;</div><div class="line"></div><div class="line">        public RequestBodyCachingInputStream(byte[] body) &#123;</div><div class="line">            this.body = body;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int read() throws IOException &#123;</div><div class="line">            if (isFinished()) &#123;</div><div class="line">                return -1;</div><div class="line">            &#125;</div><div class="line">            int i = body[lastIndexRetrieved + 1];</div><div class="line">            lastIndexRetrieved++;</div><div class="line">            if (isFinished() &amp;&amp; listener != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                    throw e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isFinished() &#123;</div><div class="line">            return lastIndexRetrieved == body.length - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean isReady() &#123;</div><div class="line">            // This implementation will never block</div><div class="line">            // We also never need to call the readListener from this method, as this method will never return false</div><div class="line">            return isFinished();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void setReadListener(ReadListener listener) &#123;</div><div class="line">            if (listener == null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener cann not be null&quot;);</div><div class="line">            &#125;</div><div class="line">            if (this.listener != null) &#123;</div><div class="line">                throw new IllegalArgumentException(&quot;listener has been set&quot;);</div><div class="line">            &#125;</div><div class="line">            this.listener = listener;</div><div class="line">            if (!isFinished()) &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                try &#123;</div><div class="line">                    listener.onAllDataRead();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    listener.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int available() throws IOException &#123;</div><div class="line">            return body.length - lastIndexRetrieved - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void close() throws IOException &#123;</div><div class="line">            lastIndexRetrieved = body.length - 1;</div><div class="line">            body = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>添加@Component注解，注册过滤器</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 替换Request对象</div><div class="line"> */</div><div class="line">@Component</div><div class="line">public class RequestReplaceFilter extends OncePerRequestFilter &#123;</div><div class="line">    private static final Logger logger = LoggerFactory.getLogger(RequestReplaceFilter.class);</div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</div><div class="line">        if (!(request instanceof CustomServletRequestWrapper)) &#123;</div><div class="line">            request = new CustomServletRequestWrapper(request);</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud入门]]></title>
      <url>http://jianwl.com/2016/09/13/SpringCloud%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h3><p><code>SpringCloud</code>是一个基于<code>SpringBoot</code>的云应用开发工具，它为基于<code>JVM</code>的云应用开发中的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态等操作提供了一种简单的开发方式。</p>
<p>SpringCloud包含了许多子项目，比如<code>Spring Cloud Config</code>、<code>Spring Cloud Netflix</code>、<code>Spring Cloud CloudFoundry</code>、<code>Spring Cloud AWS</code>、<code>Spring Cloud Security</code>、<code>Spring Cloud Commons</code>、<code>Spring Cloud Zookeeper</code>、<code>Spring Cloud CLI</code>等项目。</p>
<h3 id="微服务架构是什么？"><a href="#微服务架构是什么？" class="headerlink" title="微服务架构是什么？"></a>微服务架构是什么？</h3><p>微服务架构是将一个完整的应用从数据存储开始垂直拆分多个不同的服务，每个服务都能够独立部署、独立维护、独立扩展、服务和服务间通过诸如<code>RestFul API</code>的方式互相调用。</p>
<h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><p>在简单介绍了Spring Cloud和微服务架构之后，接下来将会使用Spring Cloud搭建服务注册和发现模块，这里我们会用到Spring Cloud Netflix,该项目是Spring Cloud的子项目之一，主要对Netflix一系列开源的产品的包装，通过简单的注解，开发者可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)、客户端负载均衡(Ribbon)等。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>未完待续….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql服务启动错误 The server quit without updating PID file]]></title>
      <url>http://jianwl.com/2016/09/08/Mysql%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF-The-server-quit-without-updating-PID-file/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本地MySQL一直都能够正常启动的，昨晚关机了Mac，今早启动MySQL,出错了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-8/77573533.jpg" alt=""></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>删除下面这个错误文件就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /usr/local/var/mysql/jianweilindeMacBook-Pro.local.err</div></pre></td></tr></table></figure></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-8/23129111.jpg" alt=""></p>
<p>由于<code>jianweilindeMacBook-Pro.local.err</code>的用户权限是<code>_mysql</code>,而不是我自己的用户权限，故启动的时候会报错。删除这个文件或修改用户权限均可。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://pein0119.github.io/2015/03/25/MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF-The-server-quit-without-updating-PID-file/" target="_blank" rel="external">MySQL服务器启动错误<code>The server quit without updating PID file</code></a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之数组的扩展]]></title>
      <url>http://jianwl.com/2016/09/07/ES6%E4%B9%8B%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上篇文章介绍了<a href="http://jianwl.com/2016/09/06/ES6%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/">ES6之字符串的扩展</a>，本文将学习ES6中数组的扩展，数组在实际项目中比较常用，所以非常有必要了解一下。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>将数组对象转化为真正的数组：<code>Array.from</code></strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/44455334.jpg" alt=""></p>
<p><strong>将一组值转化为数组：Array.of</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/42839910.jpg" alt=""></p>
<p><strong>将当前数组内部指定位置的成员复制到其他的位置：copyWithin</strong></p>
<p>具体语法为<code>Array.prototype.copyWithin(target,start = 0, end = this.length)</code>,接受三个参数，target(必选)，从当前位置开始替换数据，start(可选)，从该位置开始读取数据，负数表示倒数，end(可选)，默认为数组长度；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/3645079.jpg" alt=""></p>
<p><strong>寻找数组中符合条件的元素：find和findIndex</strong></p>
<p><code>find</code>方法，数组中每个元素都会执行回调函数，若找到返回这个元素，没找到则返回<code>undefine</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/91334943.jpg" alt=""></p>
<p><code>findIndex</code>，数组中每个元素都会执行回调函数，找到返回具体的索引位置，找不到返回 -1</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/86472470.jpg" alt=""></p>
<p><strong>定值填充数组</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/35563292.jpg" alt=""></p>
<p><strong>数组实例的entries、keys、values</strong></p>
<p><code>keys</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/20213197.jpg" alt=""></p>
<p><code>values:报错，暂时不清楚什么原因？后续解决🤔</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/67413393.jpg" alt=""></p>
<p><code>entries</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/89340245.jpg" alt=""></p>
<p><strong>数组实例includes</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/36818030.jpg" alt=""></p>
<p><strong>数组空位</strong><br><code>比如Array构造函数返回的数组都是空位 Array[3] // [,,,]</code>；空位没有任何值，一个位置的值等于undefined仍是有值得。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/68402315.jpg" alt=""></p>
<p><strong>数组推导</strong></p>
<p>数组推导允许直接通过现有数组生成新数组。</p>
<p><code>案例1：暂时不清楚其为何报错，后续解决🤔</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-7/18821221.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 – 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之字符串的扩展]]></title>
      <url>http://jianwl.com/2016/09/06/ES6%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章学习了<a href="http://jianwl.com/2016/09/03/ES6%E4%B9%8B%E8%A7%A3%E6%9E%84/#more">ES6之解构</a>，本文将学习ES6中字符串的扩展。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>字符串遍历:由for…of循环遍历</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/54541215.jpg" alt=""></p>
<p>除了遍历以外，这个遍历器最好的优点是可以识别大于<code>0xFFFF</code>的码点，传统的for循环无法识别这样的码点。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/2647027.jpg" alt=""></p>
<p><strong>新增includes()、startWith()、endsWith()方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">includes()</td>
<td style="text-align:center">是否找到参数字符串</td>
</tr>
<tr>
<td style="text-align:left">startsWith</td>
<td style="text-align:center">是否以参数字符串开头</td>
</tr>
<tr>
<td style="text-align:left">endsWith</td>
<td style="text-align:center">是否以参数字符串结尾</td>
</tr>
</tbody>
</table>
<p><code>案例1</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/27503911.jpg" alt=""></p>
<p><strong>模板字符串</strong></p>
<p>传统的JavaScript输出模板通常是这样写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var world = &quot;liuMing&quot;;</div><div class="line">$(&quot;#result&quot;).append(&quot;Hello: &quot; + world + &quot;!&quot;);</div></pre></td></tr></table></figure></p>
<p>ES6引入了模板字符串来解决这个问题，用反引号 ` 标识，它可以当做普通字符串、也可以定义多行字符串，也可以在字符串中嵌入变量。<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-6/47264420.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 – 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot配置多个数据源]]></title>
      <url>http://jianwl.com/2016/09/05/SpringBoot%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上篇文章介绍<a href="http://jianwl.com/2016/09/04/SpringBoot%E9%9B%86%E6%88%90JOOQ/">SpringBoot集成JOOQ</a>，本文是其之上的延伸，将介绍在<code>SpringBoot</code>下，<code>JOOQ</code>如何配置多个数据源。</p>
<h3 id="为何需要配置多个数据库？"><a href="#为何需要配置多个数据库？" class="headerlink" title="为何需要配置多个数据库？"></a>为何需要配置多个数据库？</h3><p>默认情况下，<code>SpringBoot</code>使用的是单数据库配置（通过spring.datasource.*配置具体数据库连接信息）。对于绝大多数<code>SpringBoot</code>应用，这是符合其使用场景的，因为<code>Spring Boot</code>提倡的是微服务理念，每个应用对应一个单独的业务领域。但在某些特殊情况下，一个应用对应多个数据库又是无法避免的，例如实施数据库分库后原本单个数据库变为多个数据库。本文就结合实际代码介绍如何在单个<code>Boot</code>应用中配置多数据库，以及与之相关的<code>Druid</code>，<code>jOOQ</code>数据服务框架的配置改造。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>数据对象</strong></p>
<p><code>TEST库Admin表</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `nick_name` varchar(20) DEFAULT NULL,</div><div class="line">  `address` varchar(20) DEFAULT NULL,</div><div class="line">  `is_del` int(11) DEFAULT &apos;0&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `username` (`username`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><code>DADA库User表</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `user` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(11) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `is_del` int(11) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><strong>pom.xml</strong></p>
<p>可参考这篇文章<a href="http://jianwl.com/2016/09/04/SpringBoot%E9%9B%86%E6%88%90JOOQ/">SpringBoot集成JOOQ</a>的<code>pom.xml</code>,增加如下配置：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-5/43787554.jpg" alt=""></p>
<p><strong>自动生成代码</strong></p>
<p>在控制台，执行<code>mvn clean compile</code>，JOOQ会读取相应数据库的表生成对应的POJO。</p>
<p><strong>Druid连接池</strong></p>
<p>Druid是阿里巴巴开源的数据库连接池，提供了强大的监控支持，号称Java语言中最好的连接池。创建两个配置类分别注册对应TEST库和DADA库。<em>特别注意，声明多个库时，需要声明某一个库为默认装配实例，用注解@Primary，否则将报错，不能同时注册多个实例。</em></p>
<p><code>TestDbConfig.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class TestDbConfig &#123;</div><div class="line">    @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</div><div class="line">    @ConfigurationProperties(prefix = &quot;db.test&quot;)</div><div class="line">    @Primary</div><div class="line">    public DataSource dataSourceA() &#123;</div><div class="line">        return new DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    @Primary</div><div class="line">    public DataSourceTransactionManager transactionManagerA() &#123;</div><div class="line">        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</div><div class="line">        transactionManager.setDataSource(dataSourceA());</div><div class="line">        return transactionManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>DadaDbConfig.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class DadaDbConfig &#123;</div><div class="line">    @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</div><div class="line">    @ConfigurationProperties(prefix = &quot;db.dada&quot;)</div><div class="line">    public DataSource dataSourceB() &#123;</div><div class="line">        return new DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public DataSourceTransactionManager transactionManagerB() &#123;</div><div class="line">        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</div><div class="line">        transactionManager.setDataSource(dataSourceB());</div><div class="line">        return transactionManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>数据库参数配置：application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">db.test.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</div><div class="line">db.test.username=root</div><div class="line">db.test.password=</div><div class="line">db.test.initialSize=1</div><div class="line">db.test.minIdle=1</div><div class="line">db.test.maxActive=100</div><div class="line">db.test.filters=stat</div><div class="line"></div><div class="line">db.dada.url=jdbc:mysql://127.0.0.1:3306/dada?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</div><div class="line">db.dada.username=root</div><div class="line">db.dada.password=</div><div class="line">db.dada.initialSize=1</div><div class="line">db.dada.minIdle=1</div><div class="line">db.dada.maxActive=100</div><div class="line">db.dada.filters=stat</div></pre></td></tr></table></figure>
<p><strong>JOOQ配置</strong></p>
<p>特别注意，需要声明某一个数据库为默认装载数据库，用注解<code>@Primary</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class JooqConfig &#123;</div><div class="line">    @Bean</div><div class="line">    public DataSourceConnectionProvider dataSourceConnectionProviderA(</div><div class="line">            @Qualifier(&quot;dataSourceA&quot;) DataSource dataSourceA) &#123;</div><div class="line">        return new DataSourceConnectionProvider(</div><div class="line">                new TransactionAwareDataSourceProxy(dataSourceA));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SpringTransactionProvider transactionProviderA(</div><div class="line">            @Qualifier(&quot;transactionManagerA&quot;) DataSourceTransactionManager txManagerW) &#123;</div><div class="line">        return new SpringTransactionProvider(txManagerW);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public DataSourceConnectionProvider dataSourceConnectionProviderB(</div><div class="line">            @Qualifier(&quot;dataSourceB&quot;) DataSource dataSourceB) &#123;</div><div class="line">        return new DataSourceConnectionProvider(</div><div class="line">                new TransactionAwareDataSourceProxy(dataSourceB));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SpringTransactionProvider transactionProviderB(</div><div class="line">            @Qualifier(&quot;transactionManagerB&quot;) DataSourceTransactionManager txManagerB) &#123;</div><div class="line">        return new SpringTransactionProvider(txManagerB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Configuration</div><div class="line">    public static class DslContextConfig &#123;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordMapperProvider recordMapperProvider;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private Settings settings;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordListenerProvider[] recordListenerProviders;</div><div class="line"></div><div class="line">        @Autowired</div><div class="line">        private ExecuteListenerProvider[] executeListenerProviders;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private VisitListenerProvider[] visitListenerProviders;</div><div class="line"></div><div class="line">        @Bean</div><div class="line">        @Primary</div><div class="line">        public DefaultDSLContext dslContextA(@Qualifier(value = &quot;dataSourceConnectionProviderA&quot;) DataSourceConnectionProvider connectionProviderA,</div><div class="line">                                             @Qualifier(&quot;transactionProviderA&quot;) SpringTransactionProvider transactionProviderA) &#123;</div><div class="line">            return new DefaultDSLContext(configuration(connectionProviderA, transactionProviderA));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Bean</div><div class="line">        public DefaultDSLContext dslContextB(@Qualifier(value = &quot;dataSourceConnectionProviderB&quot;) DataSourceConnectionProvider connectionProviderB,</div><div class="line">                                             @Qualifier(&quot;transactionProviderB&quot;) SpringTransactionProvider transactionProviderB) &#123;</div><div class="line">            return new DefaultDSLContext(configuration(connectionProviderB, transactionProviderB));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private DefaultConfiguration configuration(ConnectionProvider connectionProvider, TransactionProvider transactionProvider) &#123;</div><div class="line">            DefaultConfiguration configuration = new DefaultConfiguration();</div><div class="line">            configuration.setSQLDialect(SQLDialect.MYSQL);</div><div class="line">            configuration.set(connectionProvider);</div><div class="line">            configuration.set(transactionProvider);</div><div class="line">            if (this.recordMapperProvider != null) &#123;</div><div class="line">                configuration.set(this.recordMapperProvider);</div><div class="line">            &#125;</div><div class="line">            if (this.settings != null) &#123;</div><div class="line">                configuration.set(this.settings);</div><div class="line">            &#125;</div><div class="line">            configuration.set(this.recordListenerProviders);</div><div class="line">            configuration.set(this.executeListenerProviders);</div><div class="line">            configuration.set(this.visitListenerProviders);</div><div class="line">            return configuration;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>事务配置</strong></p>
<p><code>SpringTransaction.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class SpringTransaction implements Transaction &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final TransactionStatus transactionStatus;</div><div class="line"></div><div class="line">    SpringTransaction(TransactionStatus transactionStatus) &#123;</div><div class="line">        this.transactionStatus = transactionStatus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TransactionStatus getTxStatus() &#123;</div><div class="line">        return this.transactionStatus;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>SpringTransactionProvider.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class SpringTransactionProvider implements TransactionProvider &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final PlatformTransactionManager transactionManager;</div><div class="line"></div><div class="line">    public SpringTransactionProvider(PlatformTransactionManager transactionManager) &#123;</div><div class="line">        this.transactionManager = transactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void begin(TransactionContext context) &#123;</div><div class="line">        TransactionDefinition definition = new DefaultTransactionDefinition(</div><div class="line">                TransactionDefinition.PROPAGATION_NESTED);</div><div class="line">        TransactionStatus status = this.transactionManager.getTransaction(definition);</div><div class="line">        context.transaction(new SpringTransaction(status));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void commit(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.commit(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void rollback(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.rollback(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private TransactionStatus getTransactionStatus(TransactionContext ctx) &#123;</div><div class="line">        SpringTransaction transaction = (SpringTransaction) ctx.transaction();</div><div class="line">        return transaction.getTxStatus();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此完成了，在SpringBoot下JOOQ配置多个数据源。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://emacoo.cn/blog/spring-boot-multi-db" target="_blank" rel="external">【Spring】如何在单个Boot应用中配置多数据库？</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell入门]]></title>
      <url>http://jianwl.com/2016/09/04/Shell%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>移动互联网应用的流行使得每周都有成百上千的应用部署在云平台上，而背后支撑这些云的正是<code>Linux</code>.<code>Linux</code>服务器上大量的数据处理和管理工作需要使用命令行和<code>Shell</code>脚本。</p>
<h3 id="命令实战"><a href="#命令实战" class="headerlink" title="命令实战"></a>命令实战</h3><p><strong>文件权限符</strong><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/30894252.jpg" alt=""></p>
<p>上述红色框圈出的部分是描述文件和目录权限码，具体含义如下（从左到右）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 第一个字符代表对象类型</div><div class="line">- 代表文件</div><div class="line">d 代表目录</div><div class="line">l 代表链接</div><div class="line">c 代表字符型设备</div><div class="line">b 代表块设备</div><div class="line">n 代表网络设备</div><div class="line"></div><div class="line">//之后有3组三个字符的码</div><div class="line">r 代表对象是可读的</div><div class="line">w 代表对象是可写的</div><div class="line">x 代表对象是可执行的</div><div class="line"></div><div class="line">// 3组三字码对应对象的三个安全级别</div><div class="line">对象的属主</div><div class="line">对象的属组</div><div class="line">系统其他用户</div></pre></td></tr></table></figure>
<p><code>案例1：修改所属主权限</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/88563757.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">u 代表用户</div><div class="line">g 代表组</div><div class="line">o 代表其他</div><div class="line">a 代表上述所有</div></pre></td></tr></table></figure>
<p><code>将该文件的三个安全级别均设为可读、写、执行</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/47093815.jpg" alt=""></p>
<p><code>案例2：改变所属关系</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/99885145.jpg" alt=""><br>改变所属关系用chown命令，语法为<code>chown owner:group file</code></p>
<p><code>查询所有组</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/8200700.jpg" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Linux命令行与Shell脚本编程大全（第2版）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot集成JOOQ]]></title>
      <url>http://jianwl.com/2016/09/04/SpringBoot%E9%9B%86%E6%88%90JOOQ/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前写过<a href="http://jianwl.com/2016/06/14/JOOQ%E5%85%A5%E9%97%A8%E7%AF%87/">JOOQ入门篇</a>和<a href="http://jianwl.com/2016/06/18/SpringBoot%E5%85%A5%E9%97%A8%E7%AF%87/">SpringBoot入门篇</a>这两篇文章，如果不了解JOOQ和SpringBoot可以先看看之前的文章。最近新入职，发现公司现有的项目是基于<code>SpringMVC和MyBatis</code>，SpringMVC需要设置各种配置文件，Mybatis需要生成各有<code>Mapper.xml</code>感觉挺繁琐的，所以想尝试引入<code>SpringBoot和JOOQ</code>框架。本文主要介绍SpringBoot如何集成JOOQ。</p>
<h3 id="SpringBoot集成JOOQ实战"><a href="#SpringBoot集成JOOQ实战" class="headerlink" title="SpringBoot集成JOOQ实战"></a>SpringBoot集成JOOQ实战</h3><p><strong>数据表</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `nick_name` varchar(20) DEFAULT NULL,</div><div class="line">  `address` varchar(20) DEFAULT NULL,</div><div class="line">  `is_del` int(11) DEFAULT &apos;0&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `username` (`username`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><strong>创建SpringBootJOOQ项目</strong></p>
<p>新建项目选择<code>spring Initializr</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/15159353.jpg" alt=""></p>
<p>勾选<code>JOOQ</code>，点击<code>Next</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/93706206.jpg" alt=""></p>
<p><strong>pom.xml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.dada&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;springjooqdemo&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">    &lt;name&gt;SpringJOOQDemo&lt;/name&gt;</div><div class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">        &lt;relativePath/&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;properties&gt;</div><div class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">    &lt;/properties&gt;</div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;!--lombok--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.16.10&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--连接池--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.0.24&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--mysql connector java--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;5.1.39&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--springboot start--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-jooq&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">            &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;!--springboot end--&gt;</div><div class="line"></div><div class="line">        &lt;!-- utils start--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;3.4&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;commons-collections&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;3.2.2&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;guava&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;19.0&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.2.16&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;!-- utils end--&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;configuration&gt;</div><div class="line">                    &lt;skip&gt;true&lt;/skip&gt;</div><div class="line">                &lt;/configuration&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;executions&gt;</div><div class="line">                    &lt;execution&gt;</div><div class="line">                        &lt;phase&gt;generate-sources&lt;/phase&gt;</div><div class="line">                        &lt;goals&gt;</div><div class="line">                            &lt;goal&gt;add-source&lt;/goal&gt;</div><div class="line">                        &lt;/goals&gt;</div><div class="line">                        &lt;configuration&gt;</div><div class="line">                            &lt;sources&gt;</div><div class="line">                                &lt;source&gt;gensrc/main/java&lt;/source&gt;</div><div class="line">                            &lt;/sources&gt;</div><div class="line">                        &lt;/configuration&gt;</div><div class="line">                    &lt;/execution&gt;</div><div class="line">                &lt;/executions&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">        &lt;pluginManagement&gt;</div><div class="line">            &lt;plugins&gt;</div><div class="line">                &lt;plugin&gt;</div><div class="line">                    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</div><div class="line">                    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</div><div class="line">                    &lt;version&gt;$&#123;jooq.version&#125;&lt;/version&gt;</div><div class="line">                    &lt;executions&gt;</div><div class="line">                        &lt;execution&gt;</div><div class="line">                            &lt;goals&gt;</div><div class="line">                                &lt;goal&gt;generate&lt;/goal&gt;</div><div class="line">                            &lt;/goals&gt;</div><div class="line">                        &lt;/execution&gt;</div><div class="line">                    &lt;/executions&gt;</div><div class="line">                    &lt;dependencies&gt;</div><div class="line">                        &lt;dependency&gt;</div><div class="line">                            &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">                            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">                            &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</div><div class="line">                        &lt;/dependency&gt;</div><div class="line">                    &lt;/dependencies&gt;</div><div class="line">                    &lt;configuration&gt;</div><div class="line">                        &lt;generator&gt;</div><div class="line">                            &lt;generate&gt;</div><div class="line">                                &lt;pojos&gt;true&lt;/pojos&gt;</div><div class="line">                                &lt;fluentSetters&gt;true&lt;/fluentSetters&gt;</div><div class="line">                            &lt;/generate&gt;</div><div class="line">                        &lt;/generator&gt;</div><div class="line">                    &lt;/configuration&gt;</div><div class="line">                &lt;/plugin&gt;</div><div class="line">            &lt;/plugins&gt;</div><div class="line">        &lt;/pluginManagement&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line"></div><div class="line">    &lt;profiles&gt;</div><div class="line">    &lt;profile&gt;</div><div class="line">        &lt;id&gt;gensrc-clinic&lt;/id&gt;</div><div class="line">        &lt;activation&gt;</div><div class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</div><div class="line">        &lt;/activation&gt;</div><div class="line">        &lt;build&gt;</div><div class="line">            &lt;plugins&gt;</div><div class="line">                &lt;plugin&gt;</div><div class="line">                    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</div><div class="line">                    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</div><div class="line">                    &lt;configuration&gt;</div><div class="line">                        &lt;jdbc&gt;</div><div class="line">                            &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;</div><div class="line">                            &lt;url&gt;jdbc:mysql://127.0.0.1:3306/test&lt;/url&gt;</div><div class="line">                            &lt;user&gt;root&lt;/user&gt;</div><div class="line">                            &lt;password&gt;&lt;/password&gt;</div><div class="line">                        &lt;/jdbc&gt;</div><div class="line">                        &lt;generator&gt;</div><div class="line">                            &lt;database&gt;</div><div class="line">                                &lt;name&gt;org.jooq.util.mysql.MySQLDatabase&lt;/name&gt;</div><div class="line">                                &lt;includes&gt;.*&lt;/includes&gt;</div><div class="line">                                &lt;excludes&gt;</div><div class="line">                                    schema_version</div><div class="line">                                &lt;/excludes&gt;</div><div class="line">                                &lt;inputSchema&gt;test&lt;/inputSchema&gt;</div><div class="line">                            &lt;/database&gt;</div><div class="line">                            &lt;target&gt;</div><div class="line">                                &lt;packageName&gt;com.dada.test.domain&lt;/packageName&gt;</div><div class="line">                                &lt;directory&gt;$&#123;basedir&#125;/gensrc/main/java&lt;/directory&gt;</div><div class="line">                            &lt;/target&gt;</div><div class="line">                        &lt;/generator&gt;</div><div class="line">                    &lt;/configuration&gt;</div><div class="line">                &lt;/plugin&gt;</div><div class="line">            &lt;/plugins&gt;</div><div class="line">        &lt;/build&gt;</div><div class="line">    &lt;/profile&gt;</div><div class="line">    &lt;/profiles&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p><strong>自动生成代码</strong></p>
<p>在控制台中执行<code>mvn clean compile</code>，jooq会读取相应数据库的表生成对应的POJO。执行之后，将生成以下代码<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/11303630.jpg" alt=""><br>具体连接的数据库是在<code>pom.xml</code>设置的：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/46566376.jpg" alt=""></p>
<p><strong>JOOQ配置</strong></p>
<p><code>JooqConfig.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">package com.dada.config;</div><div class="line"></div><div class="line">import org.jooq.*;</div><div class="line">import org.jooq.conf.Settings;</div><div class="line">import org.jooq.impl.DataSourceConnectionProvider;</div><div class="line">import org.jooq.impl.DefaultConfiguration;</div><div class="line">import org.jooq.impl.DefaultDSLContext;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.beans.factory.annotation.Qualifier;</div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.context.annotation.Primary;</div><div class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</div><div class="line">import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/9/2.</div><div class="line"> */</div><div class="line">@Configuration</div><div class="line">public class JooqConfig &#123;</div><div class="line">    @Bean</div><div class="line">    public DataSourceConnectionProvider dataSourceConnectionProviderA(</div><div class="line">            @Qualifier(&quot;dataSourceA&quot;) DataSource dataSourceA) &#123;</div><div class="line">        return new DataSourceConnectionProvider(</div><div class="line">                new TransactionAwareDataSourceProxy(dataSourceA));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public SpringTransactionProvider transactionProviderA(</div><div class="line">            @Qualifier(&quot;transactionManagerA&quot;) DataSourceTransactionManager txManagerW) &#123;</div><div class="line">        return new SpringTransactionProvider(txManagerW);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Configuration</div><div class="line">    public static class DslContextConfig &#123;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordMapperProvider recordMapperProvider;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private Settings settings;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private RecordListenerProvider[] recordListenerProviders;</div><div class="line"></div><div class="line">        @Autowired</div><div class="line">        private ExecuteListenerProvider[] executeListenerProviders;</div><div class="line"></div><div class="line">        @Autowired(required = false)</div><div class="line">        private VisitListenerProvider[] visitListenerProviders;</div><div class="line"></div><div class="line">        @Bean</div><div class="line">        @Primary</div><div class="line">        public DefaultDSLContext dslContextA(@Qualifier(value = &quot;dataSourceConnectionProviderA&quot;) DataSourceConnectionProvider connectionProviderA,</div><div class="line">                                             @Qualifier(&quot;transactionProviderA&quot;) SpringTransactionProvider transactionProviderA) &#123;</div><div class="line">            return new DefaultDSLContext(configuration(connectionProviderA, transactionProviderA));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private DefaultConfiguration configuration(ConnectionProvider connectionProvider, TransactionProvider transactionProvider) &#123;</div><div class="line">            DefaultConfiguration configuration = new DefaultConfiguration();</div><div class="line">            configuration.setSQLDialect(SQLDialect.MYSQL);</div><div class="line">            configuration.set(connectionProvider);</div><div class="line">            configuration.set(transactionProvider);</div><div class="line">            if (this.recordMapperProvider != null) &#123;</div><div class="line">                configuration.set(this.recordMapperProvider);</div><div class="line">            &#125;</div><div class="line">            if (this.settings != null) &#123;</div><div class="line">                configuration.set(this.settings);</div><div class="line">            &#125;</div><div class="line">            configuration.set(this.recordListenerProviders);</div><div class="line">            configuration.set(this.executeListenerProviders);</div><div class="line">            configuration.set(this.visitListenerProviders);</div><div class="line">            return configuration;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>事务配置：SpringTransaction.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SpringTransaction implements Transaction &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final TransactionStatus transactionStatus;</div><div class="line"></div><div class="line">    SpringTransaction(TransactionStatus transactionStatus) &#123;</div><div class="line">        this.transactionStatus = transactionStatus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TransactionStatus getTxStatus() &#123;</div><div class="line">        return this.transactionStatus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>事务配置：SpringTransactionProvider.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class SpringTransactionProvider implements TransactionProvider &#123;</div><div class="line"></div><div class="line">    // Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ</div><div class="line"></div><div class="line">    private final PlatformTransactionManager transactionManager;</div><div class="line"></div><div class="line">    public SpringTransactionProvider(PlatformTransactionManager transactionManager) &#123;</div><div class="line">        this.transactionManager = transactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void begin(TransactionContext context) &#123;</div><div class="line">        TransactionDefinition definition = new DefaultTransactionDefinition(</div><div class="line">                TransactionDefinition.PROPAGATION_NESTED);</div><div class="line">        TransactionStatus status = this.transactionManager.getTransaction(definition);</div><div class="line">        context.transaction(new SpringTransaction(status));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void commit(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.commit(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void rollback(TransactionContext ctx) &#123;</div><div class="line">        this.transactionManager.rollback(getTransactionStatus(ctx));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private TransactionStatus getTransactionStatus(TransactionContext ctx) &#123;</div><div class="line">        SpringTransaction transaction = (SpringTransaction) ctx.transaction();</div><div class="line">        return transaction.getTxStatus();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>数据库配置：TestDbConfig</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class TestDbConfig &#123;</div><div class="line"></div><div class="line">    @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</div><div class="line">    @ConfigurationProperties(prefix = &quot;db.test&quot;)</div><div class="line">    public DataSource dataSourceA() &#123;</div><div class="line">        return new DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public DataSourceTransactionManager transactionManagerA() &#123;</div><div class="line">        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</div><div class="line">        transactionManager.setDataSource(dataSourceA());</div><div class="line">        return transactionManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>配置数据库参数：application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.test.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</div><div class="line">db.test.username=root</div><div class="line">db.test.password=</div><div class="line">db.test.initialSize=1</div><div class="line">db.test.minIdle=1</div><div class="line">db.test.maxActive=100</div><div class="line">db.test.filters=stat</div></pre></td></tr></table></figure>
<p><strong>封装基础通用DAO库</strong></p>
<p><code>DbConstants.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface DbConstants &#123;</div><div class="line">	String DSL_TEST = &quot;dslContextA&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>TableConstants.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface TableConstants &#123;</div><div class="line">    Admin ADMIN = Tables.ADMIN;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractRepository.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public abstract class AbstractRepository implements TableConstants ,DbConstants&#123;</div><div class="line">    @Autowired</div><div class="line">    @Qualifier(DSL_TEST)</div><div class="line">    protected DSLContext dsl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractSingleReporitory.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(&quot;unused&quot;)</div><div class="line">public abstract class AbstractSingleRepository&lt;E extends Serializable&gt; extends AbstractRepository &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * OR-Mapping的基础映射</div><div class="line">     *</div><div class="line">     * @return (Object, Relationship)</div><div class="line">     */</div><div class="line">    protected abstract Pair&lt;Class&lt;E&gt;, Table&lt;? extends UpdatableRecord&gt;&gt; mapping();</div><div class="line"></div><div class="line">    protected Class&lt;E&gt; type() &#123;</div><div class="line">        return mapping().getLeft();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected Table&lt;? extends UpdatableRecord&gt; table() &#123;</div><div class="line">        return mapping().getRight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------查------------------------------------*/</div><div class="line">    public List&lt;E&gt; findAll() &#123;</div><div class="line">        return dsl.selectFrom(table()).fetchInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Optional&lt;E&gt; findOptionalById(Integer id) &#123;</div><div class="line">        return findOptional(_pk(), id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; List&lt;E&gt; find(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.selectFrom(table()).where(field.eq(value)).fetchInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; Optional&lt;E&gt; findOptional(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.selectFrom(table()).where(field.eq(value)).fetchOptionalInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Optional&lt;E&gt; findOptional(Condition condition) &#123;</div><div class="line">        return select(condition).fetchOptionalInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;E&gt; find(Condition... condition) &#123;</div><div class="line">        return select(condition).fetchInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;T extends E&gt; List&lt;T&gt; find(Condition condition, Class&lt;T&gt; subType) &#123;</div><div class="line">        return select(condition).fetchInto(subType);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public long countAll() &#123;</div><div class="line">        return dsl.selectCount().from(table()).fetchOneInto(long.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; long count(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.selectCount().from(table()).where(field.eq(value)).fetchOneInto(long.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long count(Condition... condition) &#123;</div><div class="line">        return dsl.selectCount().from(table()).where(condition).fetchOneInto(long.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public boolean existsById(Integer id) &#123;</div><div class="line">        return exists(_pk(), id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; boolean exists(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return count(field, value) &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean exists(Condition... condition) &#123;</div><div class="line">        return count(condition) &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean notExists(Condition... condition) &#123;</div><div class="line">        return count(condition) == 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------增------------------------------------*/</div><div class="line">    public boolean insert(E entity) &#123;</div><div class="line">        return record(entity, false).insert() == 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 新增记录并返回新增后的记录</div><div class="line">     *</div><div class="line">     * @apiNote 先执行insert, 再执行select</div><div class="line">     */</div><div class="line">    public &lt;T extends E&gt; E insertAndReturn(T entity) &#123;</div><div class="line">        return dsl.insertInto(table()).set(record(entity, false)).returning().fetchOne().into(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 新增记录并返回主键ID</div><div class="line">     *</div><div class="line">     * @apiNote 只执行insert</div><div class="line">     */</div><div class="line">    public &lt;T extends E&gt; Integer insertAndReturnId(T entity) &#123;</div><div class="line">        UpdatableRecord record = record(entity, false);</div><div class="line">        record.insert();</div><div class="line">        return record.getValue(_pk());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 保存一条记录, 如果主键/唯一键重复, 则更新, 否则新增</div><div class="line">     *</div><div class="line">     * @param saveMap 待保存记录</div><div class="line">     * @return 受影响行数</div><div class="line">     */</div><div class="line">    public Integer save(Map&lt;? extends Field&lt;?&gt;, ?&gt; saveMap) &#123;</div><div class="line">        if (saveMap == null || saveMap.isEmpty()) &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        return dsl.insertInto(table()).set(saveMap).onDuplicateKeyUpdate().set(saveMap).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------改------------------------------------*/</div><div class="line">    public &lt;T extends E&gt; boolean update(T entity) &#123;</div><div class="line">        return record(entity, true).update() == 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;T extends E&gt; E updateAndReturn(T entity) &#123;</div><div class="line">        UpdatableRecord&lt;?&gt; record = record(entity, true);</div><div class="line">        Integer id = record.getValue(_pk());</div><div class="line">        if (id == null) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;id can not be null for update&quot;);</div><div class="line">        &#125;</div><div class="line">        record.update();</div><div class="line">        return select(_pk().eq(id)).fetchOneInto(type());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param record     待更新的数据</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public int update(UpdatableRecord record, List&lt;Condition&gt; conditions) &#123;</div><div class="line">        return dsl.update(table()).set(record).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param record     待更新的数据</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public int update(UpdatableRecord record, Condition... conditions) &#123;</div><div class="line">        return dsl.update(table()).set(record).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param map        待更新的数据</div><div class="line">     * @param conditions 更新条件</div><div class="line">     * @apiNote 如果多个更新项之间有严格的先后顺序, 务必使用有序Map</div><div class="line">     */</div><div class="line">    public int update(Map&lt;? extends Field&lt;?&gt;, ?&gt; map, List&lt;Condition&gt; conditions) &#123;</div><div class="line">        return dsl.update(table()).set(map).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param map       待更新的数据</div><div class="line">     * @param condition 更新条件</div><div class="line">     * @apiNote 如果多个更新项之间有严格的先后顺序, 务必使用有序Map</div><div class="line">     */</div><div class="line">    public int update(Map&lt;? extends Field&lt;?&gt;, ?&gt; map, Condition condition) &#123;</div><div class="line">        return dsl.update(table()).set(map).where(condition).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 更新指定的字段</div><div class="line">     *</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public &lt;Z&gt; int update(Field&lt;Z&gt; field, Z value, List&lt;Condition&gt; conditions) &#123;</div><div class="line">        return dsl.update(table()).set(field, value).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 更新指定的字段</div><div class="line">     *</div><div class="line">     * @param conditions 更新条件</div><div class="line">     */</div><div class="line">    public &lt;Z&gt; int update(Field&lt;Z&gt; field, Z value, Condition... conditions) &#123;</div><div class="line">        return dsl.update(table()).set(field, value).where(conditions).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*------------------------------------删------------------------------------*/</div><div class="line">    public boolean deleteById(Integer... ids) &#123;</div><div class="line">        if (ids.length == 1) &#123;</div><div class="line">            return dsl.delete(table()).where(_pk().eq(ids[0])).execute() == 1;</div><div class="line">        &#125;</div><div class="line">        return dsl.delete(table()).where(_pk().in(ids)).execute() == ids.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public &lt;Z&gt; int deleteBy(Field&lt;Z&gt; field, Z value) &#123;</div><div class="line">        return dsl.delete(table()).where(field.eq(value)).execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    protected UpdatableRecord&lt;?&gt; record(E entity, boolean forUpdate) &#123;</div><div class="line">        Field&lt;Integer&gt; field = _pk();</div><div class="line">        UpdatableRecord&lt;?&gt; record = dsl.newRecord(table(), entity);</div><div class="line">        if (forUpdate &amp;&amp; field != null) &#123;</div><div class="line">            record.changed(field, false);</div><div class="line">        &#125;</div><div class="line">        // 如果实体属性为NULL,但数据库列为NOT NULL, 则允许数据库应用列的默认值</div><div class="line">        int size = record.size();</div><div class="line">        for (int i = 0; i &lt; size; i++)</div><div class="line">            if (record.getValue(i) == null &amp;&amp; !record.field(i).getDataType().nullable())</div><div class="line">                record.changed(i, false);</div><div class="line">        return record;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected List&lt;UpdatableRecord&lt;?&gt;&gt; records(Collection&lt;E&gt; entities, boolean forUpdate) &#123;</div><div class="line">        return entities.stream().map(entity -&gt; record(entity, forUpdate)).collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Field&lt;Integer&gt; _pk() &#123;</div><div class="line">        UniqueKey&lt;?&gt; key = table().getPrimaryKey();</div><div class="line">        if (key == null) &#123;</div><div class="line">            throw new DataAccessException(&quot;no primary key&quot;);</div><div class="line">        &#125;</div><div class="line">        Field&lt;?&gt;[] fields = key.getFieldsArray();</div><div class="line">        if (fields.length == 0) &#123;</div><div class="line">            throw new DataAccessException(&quot;no primary key&quot;);</div><div class="line">        &#125;</div><div class="line">        return fields[0].cast(Integer.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected SelectConditionStep&lt;? extends Record&gt; select(Condition... condition) &#123;</div><div class="line">        if (condition == null) &#123;</div><div class="line">            return dsl.selectFrom(table()).where(trueCondition());</div><div class="line">        &#125;</div><div class="line">        return dsl.selectFrom(table()).where(condition);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AdminReporitory.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Repository</div><div class="line">public class AdminRepository extends AbstractSingleRepository&lt;AdminRecord&gt;&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Pair&lt;Class&lt;AdminRecord&gt;, Table&lt;? extends UpdatableRecord&gt;&gt; mapping() &#123;</div><div class="line">        return Pair.of(AdminRecord.class, ADMIN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  根据id查询用户</div><div class="line">     */</div><div class="line">    public List&lt;Admin&gt; findById(Integer id)&#123;</div><div class="line">        AdminQO query = AdminQO.builder().id(id).build();</div><div class="line">        return dsl.select().from(ADMIN).where(query.conditions()).fetchInto(Admin.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>查询类：AdminQO.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Getter</div><div class="line">@Builder</div><div class="line">public class AdminQO implements Conditional&#123;</div><div class="line">    private Integer id;</div><div class="line">    private String username;</div><div class="line">    private String password;</div><div class="line">    private String nickName;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;Condition&gt; conditions() &#123;</div><div class="line">        List&lt;Condition&gt; conditions = Lists.newArrayList();</div><div class="line">        if(id != null)&#123;</div><div class="line">            conditions.add(ADMIN.ID.eq(id));</div><div class="line">        &#125;</div><div class="line">        if(username != null)&#123;</div><div class="line">            conditions.add(ADMIN.USERNAME.eq(username));</div><div class="line">        &#125;</div><div class="line">        if(password != null)&#123;</div><div class="line">            conditions.add(ADMIN.PASSWORD.eq(password));</div><div class="line">        &#125;</div><div class="line">        if(nickName != null)&#123;</div><div class="line">            conditions.add(ADMIN.NICK_NAME.eq(nickName));</div><div class="line">        &#125;</div><div class="line">        return conditions;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Conditional.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public interface Conditional &#123;</div><div class="line">    /**</div><div class="line">     * 获取查询条件</div><div class="line">     */</div><div class="line">    List&lt;Condition&gt; conditions();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 合并查询条件</div><div class="line">     */</div><div class="line">    default Condition toCondition() &#123;</div><div class="line">        return conditions().stream().reduce(Condition::and).orElse(trueCondition());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/9/4.</div><div class="line"> */</div><div class="line">@SpringBootTest</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">public class AdminTest &#123;</div><div class="line">    @Autowired</div><div class="line">    private AdminRepository adminRepository;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void findAdmin()&#123;</div><div class="line">        Integer id = 1;</div><div class="line">        List&lt;Admin&gt; admins = adminRepository.findById(id);</div><div class="line">        System.out.println(JSON.toJSON(admins));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，完成<code>SpringBoot</code>和<code>JOOQ</code>的集成。若要实现多个数据库，可以在<code>JooqConfig.class</code>中配置。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之解构]]></title>
      <url>http://jianwl.com/2016/09/03/ES6%E4%B9%8B%E8%A7%A3%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="什么是解构"><a href="#什么是解构" class="headerlink" title="什么是解构"></a>什么是解构</h3><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</p>
<h3 id="解构实战"><a href="#解构实战" class="headerlink" title="解构实战"></a>解构实战</h3><p><strong>模式匹配</strong></p>
<p><code>案例1：从数组中提取值对变量赋值</code></p>
<p>以前为变量赋值,只能直接指定值。<code>var a = 1; var b = 2; var c = 3;</code>,而ES6允许写成下面这样：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/62199557.jpg" alt=""></p>
<p>可以从数组中提取值，按照位置的对应关系对变量赋值。</p>
<p><code>案例2：输出指定参数</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/21789363.jpg" alt=""></p>
<p><code>案例3:获取除第一个元素外的数组元素</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/80722503.jpg" alt=""></p>
<p><code>案例4：部分解构成功</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/3511189.jpg" alt=""></p>
<p>变量解构不成功为<code>undefined</code>,数组解构不成功为<code>[]</code></p>
<p><code>案例5：指定默认值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/22448401.jpg" alt=""></p>
<p><strong>对象解构</strong></p>
<p><code>案例1：常规对象解构</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/33755818.jpg" alt=""></p>
<p>对象的解构与数组有一个重要的不同，数组的元素是按次序排列的，变量的取值由它的位置决定，而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。类似于<code>Java</code>的<code>Map</code></p>
<p><code>案例2：变量名与属性名不一致</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/50682927.jpg" alt=""></p>
<p>对象的解构赋值的内部机制是先找到同名属性，然后在赋给对应的变量，真正被赋值的是后者即<code>first和second变量</code></p>
<p><code>案例3：声明默认值</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/88888167.jpg" alt=""></p>
<p>默认值生效的条件的条件是，对象的属性值严格等于undefined;如下这种情况默认值是不会生效的。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/53746649.jpg" alt=""></p>
<p><strong>字符串解构</strong></p>
<p><code>案例1：字符串被转换成类似数组的对象</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/27671791.jpg" alt=""></p>
<p><code>案例2：字符串属性解构赋值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/67194660.jpg" alt=""></p>
<p><strong>函数解构</strong></p>
<p><code>案例1：常规函数解构</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/49058450.jpg" alt=""><br>函数add的参数实际上不是一个数组，而是通过解构得到的变量x和y；</p>
<p><code>案例2：函数默认值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-4/16643905.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 - 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6之let和const命令]]></title>
      <url>http://jianwl.com/2016/09/03/ES6%E4%B9%8Blet%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有很多会问<code>ECMAScript和JavaScript</code>有什么关系？要讲清楚这个问题，需要回顾历史，<code>JavaScript</code>的创造者<code>Netscapt公司</code>将JavaScript交给国际标准化组织<code>ECMA</code>，希望这种语言能成为国际标准，而JavaScript本身已被注册为商标，为了保证这门语言的开发性和中立性，故<code>ECMA</code>将其取名为<code>ECMAScript</code>。因此，<code>ECMAScript</code>是<code>JavaScript</code>的规格，而<code>JavaScript</code>是<code>ECMAScript</code>的一种实现。</p>
<p>​    为了更好的熟悉ES6，将会了解其各个命令的用法。本文主要介绍<code>let</code>和<code>const</code>命令。</p>
<h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>1、let命令声明的变量只在所在的代码块内有效</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/4545513.jpg" alt=""></p>
<p><strong>应用场景</strong></p>
<p><code>var声明变量全局有效</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/7696539.jpg" alt=""></p>
<p><code>let声明变量，块级作用域有效</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/35110355.jpg" alt=""></p>
<hr>
<p>2、let声明变量不存在变量提升</p>
<p><code>let声明变量不存在提升</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/85962982.jpg" alt=""></p>
<p><code>var声明变量会提升，但没有赋值</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/67602230.jpg" alt=""></p>
<hr>
<p>3、只要块级作用域内存在let命令，它所声明的变量就绑定这个区域，不再受外部影响。</p>
<p><code>暂时性死区</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/30615566.jpg" alt=""></p>
<p>代码中存在全局变量temp，但在块级作用域内用let又声明了一个局部变量temp，导致后者绑定到这个块级作用域，故let在声明变量前赋值会报错。<br><code>对比1:用var声明变量🤔</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/76273734.jpg" alt=""></p>
<p><code>对比2:用var变量声明🤔</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/50001912.jpg" alt=""></p>
<p>此处有疑问？对比1和对比2输出的结果为何不一致？</p>
<hr>
<p>4、let不允许在相同作用域内重复声明同一个变量</p>
<p><code>范例1❌</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/50645938.jpg" alt=""></p>
<p><code>范例2❌</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/25937104.jpg" alt=""></p>
<p><code>范例3✔️：非同一作用域，故正确</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/35044719.jpg" alt=""></p>
<hr>
<p>5、块级作用域</p>
<blockquote>
<p>为什么需要块级作用域? ES5只有全局作用域和函数作用域，没有块级作用域，可能造成以下不合理的场景？</p>
</blockquote>
<p><code>场景1：内存变量覆盖外层变量</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/65058203.jpg" alt=""></p>
<p><code>var</code>声明的变量提升，导致内层的<code>tep</code>变量覆盖了外层的<code>tep</code>变量。</p>
<p><code>场景2：计数的循环变量泄露为全局变量</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/74483314.jpg" alt=""></p>
<p><code>ES6使用块级作用域</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/2688486.jpg" alt=""></p>
<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><p>1、<code>const</code>是声明常量，声明之后，不能改变它的值。<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/3573997.jpg" alt=""></p>
<p>2、<code>const</code>声明变量，必须初始化；<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/51809303.jpg" alt=""></p>
<p>3、<code>const</code>的有效区为声明的块级作用域；<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/13875615.jpg" alt=""></p>
<p>4、<code>const</code>变量不能主动提升<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/9835388.jpg" alt=""></p>
<p>5、<code>const</code>变量不能重复声明<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/20566241.jpg" alt=""></p>
<p>6、<code>const</code>声明数组，地址不变，地址的内容可变<br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/33621124.jpg" alt=""></p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>1、<code>window.global 等价于 global</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/18776994.jpg" alt=""></p>
<p>2、<code>let声明的变量不属于全局属性</code><br><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-3/69124545.jpg" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ES6标准入门 - 阮一峰</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React入门实战]]></title>
      <url>http://jianwl.com/2016/09/02/React%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h3><p><code>React</code> 是一个<code>Facebook</code> 和<code>Instagram</code> 用来创建用户界面的<code>JavaScript</code> 库，其<code>Github</code>地址是<code>http://github.com/facebook/react</code>,截至目前已经获取48369个star，说明了<code>React</code>受到了很大的重视。</p>
<p><strong>React主要特点</strong></p>
<ol>
<li><code>作为UI</code>：<code>React</code>可以只作为视图<code>View</code>在MVC中使用，并且在已有项目中，很容易使用<code>React</code>开发新功能</li>
<li><code>虚拟DOM</code>:这是React的一个亮点，可以很好地优化视图的渲染和刷新。以前我们更新视图时，需要先清空<code>DOM</code>容器中的内容，然后将最新的<code>DOM</code>和数据追加到容器中，现在<code>React</code>将这一操作放进内存中，<code>React</code>认为内存的操作远比视图全部更新来的高效。</li>
<li><code>数据流</code>：<code>React</code>实现了单向的数据流，并相对于传统的数据绑定而言，<code>React</code>更加灵活，便捷。</li>
</ol>
<h3 id="React-实战"><a href="#React-实战" class="headerlink" title="React 实战"></a>React 实战</h3><p><strong>HTML模板</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">  	// ** our code goes here !**</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>scipt标签</code>的<code>type</code>属性为<code>type/babel</code>，这是因为React独有的JSX语法与<code>JavaScript</code>不兼容。上述代码一共用了三个库：<code>react.js</code>、<code>react-dom.js</code>、<code>Browser.js</code>，他们必须首先加载，<code>react.js</code>是<code>React</code>的核心库，<code>react-dom.js</code>是提供与<code>DOM</code>相关的功能，<code>Browser.js</code>是将JSX语法转化为<code>JavaScript</code>语法,这一步很耗时，实际上线应该放到服务器完成。</p>
<p><strong>Render &amp; JSX</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">      ReactDOM.render(</div><div class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</div><div class="line">        document.getElementById(&apos;example&apos;)</div><div class="line">      );</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>JSX</code>是React模板语法，它允许在<code>JavaScript</code>中插入<code>HTML语言</code>，<code>ReactDOM.reader()</code>用于将模板转化为<code>HTML</code>语言，并插入到指定的<code>DOM</code>节点。</p>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-2/93411408.jpg" alt=""></p>
<p><strong>在JSX中使用JavaScript</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">      var names = [&apos;Alice&apos;, &apos;Emily&apos;, &apos;Kate&apos;];</div><div class="line">      ReactDOM.render(</div><div class="line">        &lt;div&gt;</div><div class="line">        &#123;</div><div class="line">          names.map(function (name) &#123;</div><div class="line">            return &lt;div&gt;Hello, &#123;name&#125;!&lt;/div&gt;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">        &lt;/div&gt;,</div><div class="line">        document.getElementById(&apos;example&apos;)</div><div class="line">      );</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>JSX</code>的基本语法规则：遇到HTML标签（以 <code>&lt;</code>开头），就用<code>HTML</code>规则解析，遇到代码块(以<code>{</code>开头)，就用<code>JavaScript</code>解析。</p>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-2/82806925.jpg" alt=""></p>
<hr>
<p><strong>组件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">      var HelloMessage = React.createClass(&#123;</div><div class="line">        render: function() &#123;</div><div class="line">          return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      ReactDOM.render(</div><div class="line">        &lt;HelloMessage name=&quot;John&quot; /&gt;,</div><div class="line">        document.getElementById(&apos;example&apos;)</div><div class="line">      );</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>React</code>运行将代码封装成组件，然后像插入普通<code>HTML</code>标签一样，在网页中插入这个组件，<code>React.createClass</code>用于生成一个组件类。注意，组件类的第一个字母必须大写，否则会报错，比如<code>HelloMessage</code>不能写成<code>helloMessage</code>,另外，组件类只能包含一个顶层标签，否则也会报错。</p>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-2/87496917.jpg" alt=""></p>
<p>未完待续….</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><code>React Native</code> 入门与实战</li>
</ul>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external"><code>React</code>入门实例教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iTerm2工具介绍]]></title>
      <url>http://jianwl.com/2016/09/01/iTerm2%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h3 id="iTerm2简介"><a href="#iTerm2简介" class="headerlink" title="iTerm2简介"></a>iTerm2简介</h3><p><code>iTerm2</code>是Mac下最好的终端工具，为了在工作中，更高效的利用它，让我们来熟悉这个工具。以下将介绍其常用的功能。</p>
<p><strong>查询</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/36067323.jpg" alt=""></p>
<p>场景：<code>用于搜索关键字，按Tab键可以自动补全单词，且补全的单词可以直接粘贴到他处</code></p>
<p>快捷键：<code>command + f</code></p>
<p><strong>切屏</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/33677033.jpg" alt=""></p>
<p>场景描述：<code>水平分割，不想新建窗口，将一个窗口分割为上下两部分</code></p>
<p>快捷键：<code>command + shift + d</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/28476179.jpg" alt=""></p>
<p>场景描述：<code>垂直分割</code></p>
<p>快捷键：<code>command + d</code></p>
<p><strong>快速呼出<code>iTerm2</code></strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/40272002.jpg" alt=""></p>
<p>场景：<code>在浏览网页时，将控制台悬浮于网页之上，且呈现透明状</code></p>
<p><code>快捷键设置</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-9-1/57025295.jpg" alt=""></p>
<p>快捷键：<code>command + \</code>快速呼出<code>iTerm2</code></p>
<p><strong>全屏切换</strong></p>
<p>快捷键：<code>command + enter</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.iterm2.com/features.html" target="_blank" rel="external">iTerm2官方文档</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac技巧]]></title>
      <url>http://jianwl.com/2016/09/01/Mac%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/46842244.jpg" alt=""></p>
<p>手势：<code>三个手指向上滑</code></p>
<p>快捷键：<code>F3</code></p>
<h3 id="双屏"><a href="#双屏" class="headerlink" title="双屏"></a>双屏</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/77570248.jpg" alt=""></p>
<p>操作：<code>鼠标长按绿色按钮</code></p>
<h3 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h3><ul>
<li>截取全屏：<code>command + shift + 3</code></li>
<li>自由截屏：<code>command + shift + 4</code></li>
<li>所截图图片不存于桌面，而存于剪切板中: <code>command +control + shift + 3</code></li>
<li>标注截屏重点: <code>打开图片，点击小工具箱</code></li>
</ul>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/78386366.jpg" alt=""></p>
<h3 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h3><p>Mac应用有时会出现无法响应的问题，强制退出没有任何效果，可以使用任务管理器，强制杀死某些进程。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/6728135.jpg" alt=""></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-19/65099399.jpg" alt=""></p>
<h3 id="删除文件-amp-清空垃圾箱"><a href="#删除文件-amp-清空垃圾箱" class="headerlink" title="删除文件&amp;清空垃圾箱"></a>删除文件&amp;清空垃圾箱</h3><p>删除文件：<code>command + delete</code></p>
<p>清空垃圾箱: <code>command + shift + delete</code></p>
<h3 id="浏览器中快速到顶部和尾部"><a href="#浏览器中快速到顶部和尾部" class="headerlink" title="浏览器中快速到顶部和尾部"></a>浏览器中快速到顶部和尾部</h3><p>顶部： <code>command + ⬆️</code></p>
<p>尾部：<code>command + ⬇️</code></p>
<h3 id="Spotlight-查找文件"><a href="#Spotlight-查找文件" class="headerlink" title="Spotlight 查找文件"></a>Spotlight 查找文件</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-19%20%E4%B8%8B%E5%8D%885.36.24.png" alt=""></p>
<p>快捷键： <code>command + space</code></p>
<h3 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h3><p>场景：<code>有时候离开座位，又不想让别人看到你电脑上的资料，选择让电脑休眠,特别注意了，此快捷键容易与关机的快捷键command + ctrl + power混淆</code></p>
<p>快捷键：<code>command + alt + power</code></p>
<h3 id="去除格式粘贴"><a href="#去除格式粘贴" class="headerlink" title="去除格式粘贴"></a>去除格式粘贴</h3><p>场景：<code>有时候复制一段文字，文字中存在超链接，字体等等格式，如果我只想粘贴纯文本信息，怎么办呢？</code></p>
<p>快捷键: <code>command + shift + V</code></p>
<h3 id="浏览网页时，快速定位到地址栏"><a href="#浏览网页时，快速定位到地址栏" class="headerlink" title="浏览网页时，快速定位到地址栏"></a>浏览网页时，快速定位到地址栏</h3><p>快捷键：<code>command +L</code></p>
<h3 id="关闭应用程序"><a href="#关闭应用程序" class="headerlink" title="关闭应用程序"></a>关闭应用程序</h3><p>场景：<code>以往关闭程序，都是通过双击图标按钮点击退出，发现配合切换程序Commad + Tab来使用关闭程序command + Q效果非常好。</code></p>
<p>快捷键：<code>command + Q</code></p>
<h3 id="在Finder中打开当前目录文件"><a href="#在Finder中打开当前目录文件" class="headerlink" title="在Finder中打开当前目录文件"></a>在Finder中打开当前目录文件</h3><p>场景：<code>在终端输入 open + . 可以在Finder中开发当前目录</code></p>
<h3 id="三指拖动文件设置"><a href="#三指拖动文件设置" class="headerlink" title="三指拖动文件设置"></a>三指拖动文件设置</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/11683794.jpg" alt=""></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/63458286.jpg" alt=""></p>
<h3 id="显示资源库"><a href="#显示资源库" class="headerlink" title="显示资源库"></a>显示资源库</h3><p>Mac 10.7系统开始，可能是出于系统安全考虑，默认隐藏用户文件夹下的资源库文件夹</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/6579604.jpg" alt=""></p>
<p>操作：在终端下运行:<code>ln -s ~/Library/ ~/资源库</code>,创建资源库快捷方式</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/26224025.jpg" alt=""></p>
<h3 id="快速呼出emoji表情"><a href="#快速呼出emoji表情" class="headerlink" title="快速呼出emoji表情"></a>快速呼出emoji表情</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/67739359.jpg" alt=""></p>
<p>快捷键:<code>command + control + 空格键</code></p>
<h3 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h3><p>场景：<code>全屏和退出全屏是一个平时比较常用的功能</code></p>
<p>快捷键：<code>command + control + f</code></p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.cnblogs.com/chijianqiang/archive/2013/01/25/mactech.html" target="_blank" rel="external">池建强的Blog</a></li>
<li><a href="http://thiswan.coding.me/technology/how-use-qiniu-to-hexo/" target="_blank" rel="external">使用七牛云做Hexo图床</a></li>
<li><a href="http://wdxtub.com/2016/02/18/mac-tips/" target="_blank" rel="external">Mac使用技巧</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之索引]]></title>
      <url>http://jianwl.com/2016/08/28/MYSQL%E4%B9%8B%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>索引是存储引擎用于快速找到记录的一种数据结构</p>
<h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ul>
<li>让服务器快速定位到表的指定位置</li>
<li>大大减少了服务器需要扫描的数据量</li>
<li>帮助服务器避免排序和临时表</li>
<li>将随机IO变为顺序IO</li>
</ul>
<h3 id="高性能索引策略"><a href="#高性能索引策略" class="headerlink" title="高性能索引策略"></a>高性能索引策略</h3><p>1、<code>查询中索引列不能是表达式的一部分，否则MYSQL不会使用索引</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT admin_id FROM test.admin where nickname = &apos;张三&apos;</div></pre></td></tr></table></figure>
<p>2、<code>有时候需要索引很长的字符列，这会让索引变得大而慢，通过索引开始的部分字符，可以大大节约索引空间，从而提高索引效率。但这样会降低索引的选择性，索引的选择性指，不重复的索引值和数据表的记录总数的比值，选择性越高，查询效率越高。唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查询各个城市出现的次数</div><div class="line">mysql&gt; SELECT COUNT(*) AS cnt,city FROM test.city_demo</div><div class="line"></div><div class="line"># 查询各个城市前几个字母出现的次数</div><div class="line">mysql&gt; SELECT COUNT(*) AS cnt,LEFT(city,3) FROM test.city_demo</div><div class="line"></div><div class="line"># 增加city的查询长度，直至这个前缀的选择性接近于完整的选择性。</div><div class="line">mysql&gt; SELECT COUNT(*) AS cnt,LEFT(city,7) FROM test.city_demo</div></pre></td></tr></table></figure>
<p><strong>创建前缀索引</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE test.city_demo ADD KEY(city(7))</div></pre></td></tr></table></figure>
<p>前缀索引是一种能使索引更小，更快的有效方法，但另外一方面前缀索引无法做<code>ORDER BY、GROUP BY 操作</code></p>
<p>3、<code>选择合适的索引列顺序，将选择性最高的列放到索引最前列。</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT * FROM payment WHERE staff_id = 2 AND customer_id = 584</div><div class="line"></div><div class="line"># 跑一些查询确定这个表中值得分布 sum(staff_id = 2)=7992</div><div class="line">mysql&gt; SELECT SUM(staff_id = 2) FROM payment</div><div class="line"></div><div class="line"># sum(customer_id = 584)=30</div><div class="line">mysql&gt; SELECT SUM(customer_id = 584) FROM payment </div><div class="line"></div><div class="line"># 通过以上结果 我们可以优化查询</div><div class="line">mysql&gt; SELECT * FROM payment WHERE customer_id = 584 AND  staff_id = 2</div></pre></td></tr></table></figure>
<p>4、<code>移除重复索引，MYSQL允许在相同列上创建多个索引，重复索引会影响性能，发现后应该立即移除</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) NOT NULL PRIMARY KEY,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  UNIQUE(id),</div><div class="line">  INDEX(id)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p>一些经验不足的用户可能想创建一个主键，先加上一个唯一限制，然后在加上索引供查询使用，事实上，MYSQL的唯一键和主键限制都是通过索引来实现的。因此上面的写法实际上在相同列上创建了三个重复的索引。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>高性能MYSQL(第三版)</li>
</ul>
<p>未完待续…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis入门]]></title>
      <url>http://jianwl.com/2016/08/28/Mybatis%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>MyBatis</code>是一个<code>Java</code>持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来。与<code>JDBC</code>相比，<code>Mybatis</code>简化了相关代码：<code>SQL</code>语句在一行代码就能执行，<code>MyBatis</code>提供了一个映射引擎，声明式的把<code>SQL</code>语句执行结果与对象数映射起来。</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><code>pom.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">     &lt;!--mybatis--&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;3.4.1&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;6.0.3&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;4.12&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line">     &lt;!--Gson--&gt;</div><div class="line">     &lt;dependency&gt;</div><div class="line">         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</div><div class="line">         &lt;artifactId&gt;gson&lt;/artifactId&gt;</div><div class="line">         &lt;version&gt;2.7&lt;/version&gt;</div><div class="line">     &lt;/dependency&gt;</div><div class="line"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<p><code>数据模型：Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Admin &#123;            </div><div class="line">    private Integer id;         </div><div class="line">    private String username;    </div><div class="line">    private String password;    </div><div class="line">    private Date createdTime;   </div><div class="line">    private Date updatedTime; </div><div class="line">    </div><div class="line">    // 此处省略Getter &amp; Setter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>接口：AdminDao.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface AdminDao &#123;</div><div class="line">    Admin getAdminById(SqlSession sqlSession,Integer id);</div><div class="line">    Integer saveAdmin(SqlSession sqlSession,Admin admin);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>映射类：AdminMapper.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface AdminMapper &#123;</div><div class="line">    Admin getAdminById(Integer id);</div><div class="line">    Integer saveAdmin(Admin admin);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>接口实现类:AdminDaoImpl.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class AdminDaoImpl implements AdminDao &#123;</div><div class="line">    @Override</div><div class="line">    public Admin getAdminById(SqlSession sqlSession, Integer id) &#123;</div><div class="line">        AdminMapper mapper = sqlSession.getMapper(AdminMapper.class);</div><div class="line">        return mapper.getAdminById(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Integer saveAdmin(SqlSession sqlSession, Admin admin) &#123;</div><div class="line">        AdminMapper mapper = sqlSession.getMapper(AdminMapper.class);</div><div class="line">        return mapper.saveAdmin(admin);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>生成sqlSessionFactory工具类:MybatisUtil.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class MybatisUtil &#123;</div><div class="line">    private static SqlSessionFactory sqlSessionFactory = null;</div><div class="line">    private final static String LOCAL_JDBC = &quot;jdbc/mybatis-conf.xml&quot;;</div><div class="line">    static &#123;</div><div class="line">        System.out.println(&quot;====INIT Mybatis BEGIN ====&quot;);</div><div class="line">        Reader rdr;</div><div class="line">        try &#123;</div><div class="line">            rdr = Resources.getResourceAsReader(LOCAL_JDBC);</div><div class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(rdr);</div><div class="line">            rdr.close();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;====INIT Mybatis END ====&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static SqlSessionFactory getSqlSessionFactory()&#123;</div><div class="line">        return sqlSessionFactory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MyBatis核心配置：jdbc/mybatis-conf.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE configuration</div><div class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;properties resource=&quot;mysql/config.properties&quot;&gt;&lt;/properties&gt;</div><div class="line"></div><div class="line">    &lt;!--别名--&gt;</div><div class="line">    &lt;typeAliases&gt;</div><div class="line">        &lt;typeAlias type=&quot;domain.Admin&quot; alias=&quot;Admin&quot;/&gt;</div><div class="line">    &lt;/typeAliases&gt;</div><div class="line"></div><div class="line">    &lt;!--3套配置环境,具体使用那一套可由参数设置--&gt;</div><div class="line">    &lt;environments default=&quot;$&#123;environment&#125;&quot;&gt;</div><div class="line">        &lt;environment id=&quot;local&quot;&gt;</div><div class="line">            &lt;transactionManager type=&quot;$&#123;transactionManager_type&#125;&quot;/&gt;</div><div class="line">            &lt;dataSource type=&quot;$&#123;datasource_type&#125;&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;hermes-url&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;hermes-username&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;hermes-password&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumIdleConnections&quot; value=&quot;$&#123;jdbc.minPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumActiveConnections&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolTimeToWait&quot; value=&quot;$&#123;jdbc.maxIdleTime&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingQuery&quot; value=&quot;SELECT NOW()&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingEnabled&quot; value=&quot;true&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">        &lt;environment id=&quot;development&quot;&gt;</div><div class="line">            &lt;transactionManager type=&quot;$&#123;transactionManager_type&#125;&quot;/&gt;</div><div class="line">            &lt;dataSource type=&quot;$&#123;datasource_type&#125;&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;interact-url&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;hermes-username&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;hermes-password&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumIdleConnections&quot; value=&quot;$&#123;jdbc.minPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumActiveConnections&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolTimeToWait&quot; value=&quot;$&#123;jdbc.maxIdleTime&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingQuery&quot; value=&quot;SELECT NOW()&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingEnabled&quot; value=&quot;true&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">        &lt;environment id=&quot;production&quot;&gt;</div><div class="line">            &lt;transactionManager type=&quot;$&#123;transactionManager_type&#125;&quot;/&gt;</div><div class="line">            &lt;dataSource type=&quot;$&#123;datasource_type&#125;&quot;&gt;</div><div class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;hermes-url&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;hermes-username&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;hermes-password&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumIdleConnections&quot; value=&quot;$&#123;jdbc.minPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolMaximumActiveConnections&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolTimeToWait&quot; value=&quot;$&#123;jdbc.maxIdleTime&#125;&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingQuery&quot; value=&quot;SELECT NOW()&quot; /&gt;</div><div class="line">                &lt;property name=&quot;poolPingEnabled&quot; value=&quot;true&quot; /&gt;</div><div class="line">            &lt;/dataSource&gt;</div><div class="line">        &lt;/environment&gt;</div><div class="line">    &lt;/environments&gt;</div><div class="line"></div><div class="line">    &lt;!--映射表--&gt;</div><div class="line">    &lt;mappers&gt;</div><div class="line">        &lt;mapper resource=&quot;mapper/AdminMapper.xml&quot;/&gt;</div><div class="line">    &lt;/mappers&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p><code>数据库参数值：mysql/config.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">environment=local</div><div class="line">transactionManager_type=JDBC</div><div class="line">datasource_type=POOLED</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line"></div><div class="line">jdbc.initialPoolSize=1</div><div class="line">jdbc.minPoolSize=1</div><div class="line">jdbc.maxPoolSize=5</div><div class="line">jdbc.acquireIncrement=1</div><div class="line">jdbc.maxIdleTime=200</div><div class="line">jdbc.checkoutTimeout=3000</div><div class="line"></div><div class="line">hermes-url=jdbc:mysql://localhost/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</div><div class="line">hermes-username=root</div><div class="line">hermes-password=</div></pre></td></tr></table></figure>
<p><code>XML映射文件:mapper/AdminMapper.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</div><div class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</div><div class="line">&lt;mapper namespace=&quot;mapper.AdminMapper&quot;&gt;</div><div class="line">    &lt;resultMap type=&quot;Admin&quot; id=&quot;admin&quot;&gt;</div><div class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</div><div class="line">        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</div><div class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;</div><div class="line">        &lt;result property=&quot;createdTime&quot; column=&quot;created_time&quot;/&gt;</div><div class="line">        &lt;result property=&quot;updatedTime&quot; column=&quot;updated_time&quot;/&gt;</div><div class="line">    &lt;/resultMap&gt;</div><div class="line"></div><div class="line">    &lt;select id=&quot;getAdminById&quot; parameterType=&quot;integer&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM admin</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    &lt;/select&gt;</div><div class="line"></div><div class="line">    &lt;insert id=&quot;saveAdmin&quot; parameterType=&quot;domain.Admin&quot;&gt;</div><div class="line">        INSERT INTO ADMIN(username)</div><div class="line">        VALUES (#&#123;username&#125;)</div><div class="line">    &lt;/insert&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<p><code>数据库创建表</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<p><code>Test测试样例</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class AdminTest &#123;</div><div class="line">   private static final SqlSessionFactory sqlSessionFactory = MybatisUtil.getSqlSessionFactory();</div><div class="line">   AdminDao adminDao = new AdminDaoImpl();</div><div class="line"></div><div class="line">   @Test</div><div class="line">   public void saveAdmin()&#123;</div><div class="line">      Admin admin = new Admin();</div><div class="line">      admin.setUsername(&quot;吴芳&quot;);</div><div class="line">      admin.setPassword(&quot;123456&quot;);</div><div class="line">      SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">      adminDao.saveAdmin(sqlSession,admin);</div><div class="line">      sqlSession.commit();</div><div class="line">      sqlSession.close();</div><div class="line">      System.out.println(&quot;INSERT ADMIN&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Test</div><div class="line">   public void getAdminById()&#123;</div><div class="line">      Integer id = 1;</div><div class="line">      SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">      Admin admin = adminDao.getAdminById(sqlSession,id);</div><div class="line">      System.out.println(new Gson().toJson(admin));</div><div class="line">      sqlSession.close();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照以上步骤，我们已经把Mybatis的运行环境搭建起来了，后续将研究MyBatis的特性。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/MyBatis" target="_blank" rel="external">Mybatis维基百科</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis之动态SQL]]></title>
      <url>http://jianwl.com/2016/08/27/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81SQL/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章<a href="http://jianwl.com/2016/08/28/Mybatis%E5%85%A5%E9%97%A8/">MyBatis入门</a>，已经搭建好了<code>Mybatis</code>的运行环境，这一章主要学习动态SQL。文章只贴出主要SQL。</p>
<p><code>修改数据模型为：Admin.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Admin &#123;</div><div class="line">    private Integer id;</div><div class="line">    private String username;</div><div class="line">    private String password;</div><div class="line">    private String nickName;</div><div class="line">    private String address;</div><div class="line">    private Integer isDel;</div><div class="line">    private Date createdTime;</div><div class="line">    private Date updatedTime;</div><div class="line">    </div><div class="line">    //此处省略 Getter &amp; Setter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>创建数据表admin</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `admin` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `password` varchar(20) DEFAULT &apos;&apos;,</div><div class="line">  `nick_name` varchar(20) DEFAULT NULL,</div><div class="line">  `address` varchar(20) DEFAULT NULL,</div><div class="line">  `is_del` int(11) DEFAULT &apos;0&apos;,</div><div class="line">  `created_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</div><div class="line">  `updated_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>场景1:查询条件有多个字段,根据不为空的字段查询记录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByUserNameOrNickname&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">    SELECT * FROM admin</div><div class="line">    WHERE 1=1</div><div class="line">    &lt;if test=&quot;nickName != null&quot;&gt;</div><div class="line">        AND nick_name = #&#123;nickName&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">    &lt;if test=&quot;username != null&quot;&gt;</div><div class="line">        AND username = #&#123;username&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>查询条件为多个字段，且字段可能存在也可能不存在，该场景下适用<code>if 判断语句</code></p>
<p><strong>场景2：有多个查询条件，只想执行其中某一个执行条件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByAnyOneCondition&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">    SELECT * FROM admin</div><div class="line">    WHERE 1=1</div><div class="line">    &lt;choose&gt;</div><div class="line">        &lt;when test=&quot;username != null&quot;&gt;</div><div class="line">            AND username = #&#123;username&#125;</div><div class="line">        &lt;/when&gt;</div><div class="line">        &lt;when test=&quot;nickName != null&quot;&gt;</div><div class="line">            AND nick_name = #&#123;nickName&#125;</div><div class="line">        &lt;/when&gt;</div><div class="line">        &lt;otherwise&gt;</div><div class="line">            AND is_del = 0</div><div class="line">        &lt;/otherwise&gt;</div><div class="line">    &lt;/choose&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>思想类似于<code>Java</code>中的<code>switch case default</code>，只能选择其中一个条件执行。</p>
<p><strong>场景3：不存在匹配条件时，消除多余WHERE导致的错误</strong></p>
<p><code>样例</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByUserNameOrNickname&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT * FROM admin</div><div class="line">        WHERE </div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;</div><div class="line">             nick_name = #&#123;nickName&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;</div><div class="line">            AND username = #&#123;username&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">    &lt;/select&gt;</div></pre></td></tr></table></figure>
<p>上述<code>SQL</code>是有问题的，当<code>nickName不存在，username存在时，多余一个AND关键字；当nickName和username均不存在时多余一个WHERE关键字</code>,如何解决？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByUserNameOrNickname&quot; parameterType=&quot;domain.Admin&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT * FROM admin</div><div class="line">        &lt;where&gt;</div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;</div><div class="line">             nick_name = #&#123;nickName&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;</div><div class="line">            AND username = #&#123;username&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>通过<code>&lt;where&gt;&lt;/where&gt;,它能够识别如果nickName不存在，username存在时，将AND关键字剔除，当nickName和username均不存在时，将where字段剔除</code></p>
<p><strong>场景4：用于剔除不必要的关键字或字符串</strong></p>
<p><code>样例</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> &lt;update id=&quot;updateById&quot; parameterType=&quot;domain.Admin&quot;&gt;</div><div class="line">    UPDATE admin</div><div class="line">    &lt;set&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;address != null&quot;&gt;address=#&#123;address&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;nick_name=#&#123;nickName&#125;&lt;/if&gt;</div><div class="line">    &lt;/set&gt;</div><div class="line">    WHERE id = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<p>上述<code>SQL</code>按理说是有问题的，<code>当nickName不存在时，其他字段均存在时，多余逗号将导致SQL错误</code>，但实际执行却不报错，这点还没搞清楚为何？</p>
<p>官方文档说通过<code>trim可以剔除多余的关键字标签</code>,故进行以下实验</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;update id=&quot;updateById&quot; parameterType=&quot;domain.Admin&quot;&gt;</div><div class="line">    UPDATE admin</div><div class="line">    &lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;</div><div class="line">        &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;password != null&quot;&gt;,password=#&#123;password&#125;&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;address != null&quot;&gt;,address=#&#123;address&#125;&lt;/if&gt;</div><div class="line">        &lt;if test=&quot;nickName != null&quot;&gt;,nick_name=#&#123;nickName&#125;&lt;/if&gt;</div><div class="line">    &lt;/trim&gt;</div><div class="line">    WHERE id = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<p><code>当username不存在，其余字段均存在时，trim并不能剔除多余的逗号，导致SQL报错,故trim字段不能剔除多余逗号</code>，也许是我操作有误，这点之后继续研究。</p>
<p><strong>场景5：遍历</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;getAdminByAdmins&quot; parameterType=&quot;java.util.List&quot; resultMap=&quot;admin&quot;&gt;</div><div class="line">        SELECT *</div><div class="line">        FROM admin</div><div class="line">        WHERE id in</div><div class="line">            &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; </div><div class="line">            open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</div><div class="line">                #&#123;item.id&#125;</div><div class="line">            &lt;/foreach&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p><code>open为前缀，close为后缀,separator为每个参数分隔符故遍历的结果为:(id1,id2,id3,id4)这种形式的结果</code></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="external">Dynamic SQL</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot集成Swagger]]></title>
      <url>http://jianwl.com/2016/08/24/SpringBoot%E9%9B%86%E6%88%90Swagger/</url>
      <content type="html"><![CDATA[<h3 id="Swagger是什么？"><a href="#Swagger是什么？" class="headerlink" title="Swagger是什么？"></a>Swagger是什么？</h3><p><code>swagger</code> 是最早也是最成熟的 API 接口设计工具。它可以使用 <code>json/yaml</code> 来描述 API 的接口，使用 <code>swagger</code> 来设计和描述 API 有很多好处：API 的文档化，API 的接口的可视化，各种语言的客户端类库的自动生成，甚至服务端代码也能够自动生成。包括代码生成工具在内的完整而成熟的工具链是 <code>swagger</code> 的杀手锏，也是众多 API 厂商优先选择 <code>swagger</code> 的一个重要因素。</p>
<h3 id="实战集成Swagger"><a href="#实战集成Swagger" class="headerlink" title="实战集成Swagger"></a>实战集成Swagger</h3><p><strong>1、修改pom.xml，添加maven依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!--springboot--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">	&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;!--swagger--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.5.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.5.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p><strong>2、添加Swagger配置类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableSwagger2</div><div class="line">public class SwaggerConfig &#123;</div><div class="line">    /**</div><div class="line">     * 可以定义多个组，比如本类中定义把hello1和hello2区分开了</div><div class="line">     * （访问页面就可以看到效果了）</div><div class="line">     */</div><div class="line">    @Bean</div><div class="line">    public Docket helloApi1() &#123;</div><div class="line">        return new Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .groupName(&quot;hello1&quot;)</div><div class="line">                .genericModelSubstitutes(DeferredResult.class)</div><div class="line">                .useDefaultResponseMessages(false)</div><div class="line">                .forCodeGeneration(true)</div><div class="line">                .pathMapping(&quot;/&quot;)// base，最终调用接口后会和paths拼接在一起</div><div class="line">                .select()</div><div class="line">                .paths(or(regex(&quot;/hello1/.*&quot;)))//过滤的接口</div><div class="line">                .build()</div><div class="line">                .apiInfo(getInfo1());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private ApiInfo getInfo1() &#123;</div><div class="line">        return new ApiInfo(&quot;标题 -- 记录点滴成长&quot;,</div><div class="line">                &quot;描述 -- 记录平时所学&quot;,</div><div class="line">                &quot;版本 -- 1.00&quot;,</div><div class="line">                &quot;网址 -- www.jianwl.com&quot;,</div><div class="line">                new Contact(&quot;jianwl --姓名&quot;, &quot;jianwl.com --url&quot;, &quot;soso_jwl@163.com--邮箱&quot;),</div><div class="line">                &quot;证书 -- no license&quot;,</div><div class="line">                &quot;证书链接 -- no&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public Docket helloApi2() &#123;</div><div class="line">        return new Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .groupName(&quot;hello2&quot;)</div><div class="line">                .genericModelSubstitutes(DeferredResult.class)</div><div class="line">                .useDefaultResponseMessages(false)</div><div class="line">                .forCodeGeneration(true)</div><div class="line">                .pathMapping(&quot;/&quot;)// base，最终调用接口后会和paths拼接在一起</div><div class="line">                .select()</div><div class="line">                .paths(or(regex(&quot;/hello2/.*&quot;)))//过滤的接口</div><div class="line">                .build()</div><div class="line">                .apiInfo(getInfo2());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private ApiInfo getInfo2() &#123;</div><div class="line">        return new ApiInfo(&quot;标题 -- 记录点滴成长&quot;,</div><div class="line">                &quot;描述 -- 记录平时所学&quot;,</div><div class="line">                &quot;版本 -- 2.00&quot;,</div><div class="line">                &quot;网址 -- www.jianwl.com&quot;,</div><div class="line">                new Contact(&quot;jianwl --姓名&quot;, &quot;jianwl.com --url&quot;, &quot;soso_jwl@163.com--邮箱&quot;),</div><div class="line">                &quot;证书 -- no license&quot;,</div><div class="line">                &quot;证书链接 -- no&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>创建Controller</strong></p>
<p><code>HelloController1</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/8/24.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/hello1/api&quot;)</div><div class="line">public class HelloController1 &#123;</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/put&quot;, method = RequestMethod.PUT, consumes = &quot;application/text&quot;, produces = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value = &quot;推送数据&quot;, notes = &quot;将BI数据推送到服务端&quot;)</div><div class="line">    public String push(@ApiParam(required = true, name = &quot;username&quot;, value = &quot;用户名&quot;) @RequestParam String username) &#123;</div><div class="line">        return &quot;push data to server&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST, consumes = &quot;application/json&quot;, produces = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value = &quot;登录&quot;, notes = &quot;用户登录网站&quot;)</div><div class="line">    public String login(@ApiParam(required = true, name = &quot;user&quot;, value = &quot;用户对象&quot;) @RequestBody User user) &#123;</div><div class="line">        return &quot;login&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/user/list&quot;, method = RequestMethod.GET, produces = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value = &quot;获取信息&quot;, notes = &quot;获取用户信息&quot;)</div><div class="line">    public String list(@ApiParam(required = true, name = &quot;username&quot;, value = &quot;姓名&quot;) @RequestParam String username,</div><div class="line">                       @ApiParam(required = true, name = &quot;password&quot;, value = &quot;密码&quot;) @RequestParam String password,</div><div class="line">                       @ApiParam(required = true, name = &quot;address&quot;, value = &quot;地址&quot;) @RequestParam String address) &#123;</div><div class="line">        return username + &quot; : &quot; + password + &quot; : &quot; + address;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>HelloController2</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jianweilin on 16/8/24.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/hello2/api&quot;)</div><div class="line">public class HelloController2 &#123;</div><div class="line">    @ResponseBody</div><div class="line">    @RequestMapping(value = &quot;/put&quot;,method = RequestMethod.PUT,consumes = &quot;application/text&quot;)</div><div class="line">    @ApiOperation(value=&quot;推送数据&quot;,notes=&quot;将BI数据推送到服务端&quot;)</div><div class="line">    public String push(@ApiParam(required = true,name = &quot;username&quot;,value = &quot;用户名&quot;)</div><div class="line">                       @RequestParam String username)&#123;</div><div class="line">        return &quot;push data2 to server&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Swagger2</code>默认将所有的<code>Controller</code>中<code>RequestMapping</code>方法都会暴露出来，然而在实际开发中，我们并不一定所有API都体现出来，可以通过<code>@ApiIgnore</code>来解决，如果应用在<code>Controller</code>范围上，则当前<code>Controller</code>的所有方法都会被忽略。</p>
<p>最后，启动<code>SpringBoot</code>服务，访问<code>http://localhost:8080/swagger-ui.html#/</code>就可以访问到swagger页面了。<img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-25/98283651.jpg" alt=""></p>
<h3 id="Swagger-常用注解"><a href="#Swagger-常用注解" class="headerlink" title="Swagger 常用注解"></a>Swagger 常用注解</h3><table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@Api</code></td>
<td><code>修饰整个类，描述Controller的作用</code></td>
</tr>
<tr>
<td><code>@ApiOperation</code></td>
<td><code>描述一个接口</code></td>
</tr>
<tr>
<td><code>@ApiParam</code></td>
<td><code>单个参数描述</code></td>
</tr>
<tr>
<td><code>@ApiModel</code></td>
<td><code>用对象来接受参数</code></td>
</tr>
<tr>
<td><code>@ApiProperty</code></td>
<td><code>用对象接受参数时，描述对象的一个字段</code></td>
</tr>
<tr>
<td><code>@ApiResponses</code></td>
<td><code>HTTP响应整体描述</code></td>
</tr>
<tr>
<td><code>@ApiResponse</code></td>
<td><code>HTTP响应其中一个描述</code></td>
</tr>
<tr>
<td><code>ApiErrors</code></td>
<td></td>
</tr>
<tr>
<td><code>@ApiParamsImplicit</code></td>
</tr>
</tbody>
</table>
<p>未完待续…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6常见的坑]]></title>
      <url>http://jianwl.com/2016/08/22/ES6%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ECMAScript6.0（简称ES6）是JavaScript语言的标准。</p>
<p>推荐资源</p>
<ul>
<li><a href="[https://babeljs.io/docs/learn-es2015/](https://babeljs.io/docs/learn-es2015/">ES2015学习</a> </li>
<li><a href="[https://babeljs.io/repl/](https://babeljs.io/repl/">在线编辑器</a></li>
</ul>
<h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><p><strong>var示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var a = &apos;永和&apos;,</div><div class="line">    b = &apos;新马泰&apos;;</div><div class="line">function fn()&#123;</div><div class="line">  console.log(a); //1</div><div class="line">  console.log(b);// 2</div><div class="line">  var a = &apos;真功夫&apos;; //3</div><div class="line">  console.log(a); // 4</div><div class="line">&#125;</div><div class="line">fn();</div><div class="line">console.log(a); //5</div><div class="line"></div><div class="line">//示例2</div><div class="line">for(var i=0;i&lt;10;i++)&#123;&#125;</div><div class="line">console.log(i);//?</div></pre></td></tr></table></figure>
<p>你知道示例1和示例2会输出什么答案么？示例1的答案是<code>undefined、新马泰、真功夫、永和</code>为何？<code>//3定义a为var变量，当//1访问a变量时，变量a会提升至函数开始位置，定义变量a但未赋值，故//1为undefined;函数中定义的变量，之作用域块级域中，故//5为永和</code>示例2的答案为<code>10</code>，因为非块级元素的定义，在块级之外是有效的。</p>
<p><strong>let示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      let a = 1;</div><div class="line">      &#123;</div><div class="line">          console.log(a);//?</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  console.log(a);//?</div></pre></td></tr></table></figure>
<p>结果为<code>1 、undefined</code>因为变量a的作用域在块级域内。</p>
<p><strong>let不存在变量提升</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">function fn()&#123;</div><div class="line">    console.log(a);</div><div class="line">    let a = 1;</div><div class="line">&#125;</div><div class="line">fn();//?</div><div class="line">//示例2</div><div class="line">var a = 123;</div><div class="line">if (true) &#123;</div><div class="line">  a = &apos;abc&apos;;//?</div><div class="line">  let a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果为<code>均报引用错误</code>，为何？示例1中，由于在函数中let声明的变量a，变量不能提升，其在使用之后声明故出现引用错误。示例2中，由于在块级作用域中用let声明了a变量，变量不能被提升且因为声明在块内声明了变量a，故不能访问块外的变量a，所以报引用错误。</p>
<p><strong>let不允许重复声明</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//ES5 示例1</div><div class="line">   var a = 1;</div><div class="line">   var a = 2;</div><div class="line">   </div><div class="line">   //ES6 示例2</div><div class="line">   let b = 1;</div><div class="line">   let b = 2;//或者var b = 2;</div><div class="line">  </div><div class="line">  //Switch 示例3</div><div class="line">   let a = 1;</div><div class="line">   switch(a)&#123;</div><div class="line">       case 1:</div><div class="line">           let a = 1;</div><div class="line">           break;</div><div class="line">       case 2:</div><div class="line">           let a = 2;</div><div class="line">           break;</div><div class="line">       default:</div><div class="line">           let a = 0;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述示例1、2、3是否会报错呢？<code>示例1正确、示例2、3错误</code>，let变量不允许重复声明，特别注意在switch cast中，即使仅能执行一个case，示例3仍会报错，编译器把其看成重复声明。</p>
<p><strong>const示例</strong></p>
<p>块级变量 + 常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">  const weipeng = &apos;真功夫&apos;;</div><div class="line">  //?</div><div class="line">  weipeng = &apos;张伟鹏&apos;;</div><div class="line">  //示例2</div><div class="line">  const weipeng;</div><div class="line">  //示例3</div><div class="line">  &#123;</div><div class="line">      const a = 1；</div><div class="line">  &#125;</div><div class="line">  //?</div><div class="line">  console.log(a);</div><div class="line">  </div><div class="line">  //示例4</div><div class="line">  const array = [1, 2, 3];</div><div class="line">  //？</div><div class="line">  array.push(4);</div><div class="line">  //？</div><div class="line">  array.length = 0;</div><div class="line">  //？</div><div class="line">  array = [1, 2, 3, 4];</div></pre></td></tr></table></figure>
<p>结果<code>示例1、示例2、示例3均报错，示例1，const声明的为常量，不能改变其引用。示例2，声明常量要有初始值。示例3，常量a作用域为块内</code>；示例4会出现什么结果呢？<code>push、length设为0均可成功，将数组指向另外一个引用错误。</code></p>
<p><strong>从属关系</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var a = 1; </div><div class="line">b = 2; //1</div><div class="line">window.c = 3;//2</div><div class="line">console.log(a, b, c);//?</div><div class="line">//示例2</div><div class="line">let a = 1;</div><div class="line">const b= 2;</div><div class="line">console.log(window.a, window.b);</div></pre></td></tr></table></figure>
<p>结果为<code>示例1结果为1，2，3；示例2结果为undefined,undefined</code>为何？示例1中<code>//1</code>声明的变量b相当于<code>window.b全局变量</code>而示例2中<code>window.a和window.b</code>都没有被声明</p>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">   var a = 1,</div><div class="line">       b = 2,</div><div class="line">       c = 3;</div><div class="line">   var [a, b, c] = [1, 2, 3];</div><div class="line">   </div><div class="line">   //示例2</div><div class="line">   var [a, , c] = [1, 2, 3];</div><div class="line">   console.log(a, c); // 1,3</div><div class="line">   </div><div class="line">   //示例3</div><div class="line">   var [a, ...other] = [1, 2, 3, 4, 5, 6];</div><div class="line">   console.log(a, other); // 1 ,[2,3,4,5,6]</div><div class="line">   </div><div class="line">   //示例4</div><div class="line">   var [a, b] = [&apos;真功夫&apos;];</div><div class="line">   console.log(a, b); // 真功夫，undefined</div><div class="line">   </div><div class="line">   //示例5</div><div class="line">   var [a, b=&apos;伟鹏&apos;] = [&apos;真功夫&apos;];</div><div class="line">   console.log(a, b);// 真功夫，伟鹏</div><div class="line">   </div><div class="line">   //示例7</div><div class="line">   var [a, b=&apos;永和&apos;, ...other] = [&apos;蒸功夫&apos;];</div><div class="line">   console.log(a, b, other);// 蒸功夫,永和,[]</div></pre></td></tr></table></figure>
<p><strong>数组合并</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">let arr1 = [1, 2, 3];</div><div class="line">let arr2 = [4, 5, 6];</div><div class="line">let arr = [...arr1, ...arr2];</div><div class="line">console.log(arr); //[1,2,3,4,5,6]</div></pre></td></tr></table></figure>
<p><strong>对象解构</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var &#123; name, age, sex &#125; = &#123; name: &apos;郎平&apos;, age: 53&#125;;</div><div class="line">console.log(name, age, sex); // 郎平,53,undefined</div><div class="line"></div><div class="line">//示例2</div><div class="line">var &#123; name, ...others &#125; = &#123; name: &apos;郎平&apos;&#125;;</div><div class="line">console.log(name, others);//郎平,&#123;&#125;</div><div class="line"></div><div class="line">//示例3</div><div class="line">var &#123; name: value &#125; = &#123;name : &apos;郎平&apos;&#125;;</div><div class="line">console.log(name, value);// 郎平,郎平</div><div class="line"></div><div class="line">//示例4</div><div class="line">var &#123; name=&quot;郎平&quot; &#125; = &#123;&#125;;</div><div class="line">console.log(name);//郎平</div></pre></td></tr></table></figure>
<p>对象合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let obj1 = &#123;</div><div class="line">     name: &apos;郎平&apos;</div><div class="line"> &#125;;</div><div class="line"> let obj2 = &#123;</div><div class="line">     age: 53</div><div class="line"> &#125;</div><div class="line"> let obj = &#123;</div><div class="line">     ...obj1,</div><div class="line">     ...obj2</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>解构扩展</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let &#123; length &#125; = &apos;hello&apos;; // 等价于 var _hello = &quot;hello&quot;; var length = _hello.length;</div><div class="line"> let &#123; toString &#125; = 123;</div><div class="line"> let &#123; toString &#125; = true;</div><div class="line"> let [a, b, c] = &apos;hello&apos;;</div><div class="line"> let array = [...&apos;hello&apos;];</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line"> fn(&#123;</div><div class="line">     name: &apos;fn&apos;,</div><div class="line">     id: 1</div><div class="line"> &#125;);</div><div class="line"> function fn(&#123; name, id &#125;)&#123;</div><div class="line">     do something...</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> //示例2</div><div class="line"> fuction fn(&#123; name=&apos;真功夫&apos;, id &#125;)&#123;</div><div class="line">     do something...</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"> //示例3</div><div class="line"> fn(1, 2, 3);</div><div class="line"> function fn(...params)&#123;</div><div class="line">     console.log(params);//[1，2，3]</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> //示例4</div><div class="line"> fn([1, 2, 3]);//怎么做?</div><div class="line"> function fn(a, b, c)&#123;</div><div class="line">     console.log(a, b, c); //[1,2,3]</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>默认参数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">function fn(page=1, pageNo=10)&#123;</div><div class="line">    do something...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参数作用域</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line">var a = 1;</div><div class="line">function fn(a, b=a)&#123;</div><div class="line">    console.log(a, b);</div><div class="line">&#125;</div><div class="line">fn(5);// 5,5</div></pre></td></tr></table></figure>
<p><strong>箭头函数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let fn = () =&gt; &#123;</div><div class="line">        do something...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>默认return</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//示例1</div><div class="line"> let fn = (name) =&gt; name;</div><div class="line"> let result = fn(&apos;hello&apos;);</div><div class="line"> console.log(result)//hello</div><div class="line"> </div><div class="line"> //示例2</div><div class="line"> let fn = name =&gt; name;</div><div class="line"> let result = fn(&apos;hello&apos;);</div><div class="line"> console.log(result)//hello</div></pre></td></tr></table></figure>
<p><strong>不能作为构造函数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//示例1(✅)</div><div class="line">  function Person(name, age)&#123;</div><div class="line">      this.name = name;</div><div class="line">      this.age = age;</div><div class="line">  &#125;</div><div class="line">  let p1 = new Person(&apos;郎平&apos;, 53);</div><div class="line">  </div><div class="line">  //示例2(❌)</div><div class="line">  const Person = (name ,age) =&gt; &#123;</div><div class="line">      this.name = name;</div><div class="line">      this.age = age;</div><div class="line">  &#125;</div><div class="line">  let p1 = new Person(&apos;郎平&apos;, 53);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之枚举]]></title>
      <url>http://jianwl.com/2016/08/21/Java%E4%B9%8B%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<h3 id="引入枚举的背景"><a href="#引入枚举的背景" class="headerlink" title="引入枚举的背景"></a>引入枚举的背景</h3><p><strong>场景</strong></p>
<p>为彩虹描绘出其中颜色，通常可以通过定义常量的方式来实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class RainbowColor &#123;</div><div class="line">    public static final int RED = 0;</div><div class="line">    public static final int ORANGE = 1;</div><div class="line">    public static final int YELLOW = 2;</div><div class="line">    public static final int GREEN = 3;</div><div class="line">    public static final int CYAN = 4;</div><div class="line">    public static final int BLUE = 5;</div><div class="line">    public static final int PURPLE = 6;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但这种方式会存在以下这几个问题：</p>
<p><strong>类型不安全</strong></p>
<p>由于颜色常量的对应值是整数型，所以程序执行过程中很有可能给颜色变量传入一个任意的整数值，导致出现错误。</p>
<p><strong>类型无指意性</strong></p>
<p>由于颜色变量值仅仅是一些无包含任何含义的整数值，如果在运行期调试时候，你就会发现日志中有很多魔术数字，但除了程序员本身，其他人很难明白其中奥秘。</p>
<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>为了改进Java语言在这方面的不足，<code>JDK1.5</code>之后，增加了枚举类型。<code>枚举是限定有限种可能值的一种手段，使用枚举可以降低程序出错的几率，并可以提高代码的可读性和可维护性</code></p>
<p><strong>枚举定义</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum  RainbowEnum &#123;</div><div class="line">    RED, ORANGE, YELLOW, GREEN, CYAN, BLUE, PURPLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>常规用法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class EnumDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        RainbowEnum color = RainbowEnum.GREEN;</div><div class="line">        switch (color)&#123;</div><div class="line">            case GREEN:</div><div class="line">                System.out.println(&quot;this is GREEN&quot;);</div><div class="line">                break;</div><div class="line">            case CYAN:</div><div class="line">                System.out.println(&quot;this is CYAN&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                System.out.println(&quot;other color&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>枚举提供了几个方法供开发者在需要时调用。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>vlaues()</td>
<td><code>返回当前枚举中所有枚举项的集合</code></td>
</tr>
<tr>
<td>oridinal()</td>
<td><code>返回枚举项在枚举对象中的序号</code></td>
</tr>
<tr>
<td>name()</td>
<td><code>返回枚举项的名称，与toString()效果相同</code></td>
</tr>
<tr>
<td>getDeclaringClass()</td>
<td><code>取得当前枚举值所在类的完整名称</code></td>
</tr>
<tr>
<td>valueOf(“xx”)</td>
<td><code>返回名称为xx的枚举项</code></td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class EnumDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        for (RainbowEnum colorEnum : RainbowEnum.values()) &#123;</div><div class="line">            System.out.println(colorEnum);</div><div class="line">            System.out.println(colorEnum.ordinal());</div><div class="line">            System.out.println(colorEnum.name());</div><div class="line">            System.out.println(colorEnum.getDeclaringClass() + &quot;\n&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(&quot;&lt;h5&gt;BLUE&lt;/h5&gt;&quot;);</div><div class="line">        RainbowEnum red = RainbowEnum.valueOf(&quot;BLUE&quot;);</div><div class="line">        System.out.println(red.ordinal());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>为枚举添加构造器和成员方法</strong></p>
<p><code>RainBowEnum.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public enum RainbowEnum &#123;</div><div class="line">    RED(1, &quot;red&quot;),</div><div class="line">    ORANGE(2, &quot;orange&quot;),</div><div class="line">    YELLOW(3, &quot;yellow&quot;),</div><div class="line">    GREEN(4, &quot;green&quot;),</div><div class="line">    CYAN(5, &quot;cyan&quot;),</div><div class="line">    BLUE(6, &quot;blue&quot;),</div><div class="line">    PURPLE(7, &quot;purple&quot;);</div><div class="line"></div><div class="line">    private Integer code;</div><div class="line">    private String desc;</div><div class="line"></div><div class="line">    RainbowEnum(Integer code, String desc) &#123;</div><div class="line">        this.code = code;</div><div class="line">        this.desc = desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getCode() &#123;</div><div class="line">        return code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCode(Integer code) &#123;</div><div class="line">        this.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDesc() &#123;</div><div class="line">        return desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDesc(String desc) &#123;</div><div class="line">        this.desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>EnumDemo.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class EnumDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        for (RainbowEnum colorEnum : RainbowEnum.values()) &#123;</div><div class="line">            System.out.println(&quot;code = &quot; + colorEnum.getCode());</div><div class="line">            System.out.println(&quot;desc = &quot; + colorEnum.getDesc());</div><div class="line">        &#125;</div><div class="line">        RainbowEnum color = RainbowEnum.valueOf(&quot;RED&quot;); //非red,故valueOf(&quot;枚举名称&quot;)</div><div class="line">        System.out.println(&quot;code = &quot; + color.getCode());</div><div class="line">        System.out.println(&quot;desc = &quot; + color.getDesc());</div><div class="line">        System.out.println(&quot;name = &quot; + color.name());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="枚举集合"><a href="#枚举集合" class="headerlink" title="枚举集合"></a>枚举集合</h3><table>
<thead>
<tr>
<th>集合对象</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>EnumSet</code></td>
<td><code>EnumSet用于保存枚举项的集合，在枚举项本身并不互斥的情况下特别有用。例如，一个应用系统通常会有多种角色，而某些人在系统中可能承担不止一种角色。如果这些角色是通过枚举定义的，则此时EnumSet将可以将多种角色保存在一起，标识特定用户承担的全部角色</code></td>
</tr>
<tr>
<td><code>EnumMap</code></td>
<td><code>EnumMap是必须使用枚举项作为其KEY的Map，其法与普通Map类似</code></td>
</tr>
</tbody>
</table>
<p><strong>EnumSet</strong></p>
<p><code>RoleEnum.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum RoleEnum &#123;</div><div class="line">    SYSADMIN,ROLEA,ROLEB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>EnumSetDemo.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class EnumSetDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        EnumSet&lt;RoleEnum&gt; es = EnumSet.of(RoleEnum.ROLEA,RoleEnum.ROLEB);</div><div class="line">        es.add(RoleEnum.SYSADMIN);</div><div class="line">        es.add(RoleEnum.ROLEA); // 重复元素自动去重</div><div class="line">        for(RoleEnum role: es)&#123;</div><div class="line">            System.out.println(role);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>EnumMap</strong></p>
<p><code>RoleEnum.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum RoleEnum &#123;</div><div class="line">    SYSADMIN,ROLEA,ROLEB;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>EnumMapDemo.class</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class EnumMapDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        EnumMap&lt;RoleEnum,String&gt; em = new EnumMap&lt;RoleEnum, String&gt;(RoleEnum.class);</div><div class="line">        em.put(RoleEnum.SYSADMIN,&quot;系统管理员&quot;);</div><div class="line">        em.put(RoleEnum.ROLEA,&quot;角色A&quot;);</div><div class="line">        System.out.println(&quot; size = &quot;+em.size());</div><div class="line">        System.out.println(em.get(RoleEnum.SYSADMIN));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.csdn.net/ishallwin/article/details/9440251" target="_blank" rel="external">Java枚举</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-enum/" target="_blank" rel="external">Java 语言中 Enum 类型的使用介绍</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac技巧之指令篇]]></title>
      <url>http://jianwl.com/2016/08/21/Mac%E6%8A%80%E5%B7%A7%E4%B9%8B%E6%8C%87%E4%BB%A4%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>1、查看每个目录的所占空间</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/16550157.jpg" alt=""></p>
<hr>
<p>2、定位某个命令所在文件路径</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/70271327.jpg" alt=""></p>
<hr>
<p>3、尝试根据文件内容输出文件类型</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/90832702.jpg" alt=""></p>
<hr>
<p>4、清除内存和硬盘的缓存，与重启Mac的效果差不多</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/34745593.jpg" alt=""></p>
<hr>
<p>5、查看服务列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/85445991.jpg" alt=""></p>
<hr>
<p>6、语音功能</p>
<p>场景：<code>say命令可以让Mac说英文单词</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-8-21/97540405.jpg" alt=""></p>
<hr>
<h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之泛型]]></title>
      <url>http://jianwl.com/2016/08/21/Java%E4%B9%8B%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>泛型是<code>JDK1.5</code>之后增加的特性，其作用是<code>告诉编译器可接受哪些对象</code>；泛型这一块知识点，之前了解的比较浅，故重新学习，并记录于此文。</p>
<h3 id="为什么需要泛型？"><a href="#为什么需要泛型？" class="headerlink" title="为什么需要泛型？"></a>为什么需要泛型？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List list = new ArrayList();</div><div class="line">        list.add(&quot;Lucy&quot;);</div><div class="line">        list.add(&quot;Tracy&quot;);</div><div class="line">        list.add(22);</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; list.size(); i++) &#123;</div><div class="line">            String name = (String) list.get(i);</div><div class="line">            System.out.println(&quot; name: &quot; + name); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码，在编译阶段正常，在运行时会出现<code>java.lang.ClassCastException</code>的异常，为何？观察代码，发现存在两个问题。</p>
<ol>
<li>将对象放入集合中，集合不会检验对象类型，换句话说，任何对象都可以放到这个集合中。</li>
<li>从集合取出元素时，强制类型转换为<code>目标类型String</code>,故出现<code>java.lang.ClassCastException</code>异常</li>
</ol>
<p>有什么办法可以让集合记住元素类型，即集合存储的对象均为同一类型对象，答案是使用泛型。</p>
<h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><p>泛型程序设计是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。</p>
<p>看起来好像有点复杂，通过例子来演示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;String&gt; list = new ArrayList();</div><div class="line">        list.add(&quot;Lucy&quot;);</div><div class="line">        list.add(&quot;Tracy&quot;);</div><div class="line">        //list.add(22); //1 提示编译错误</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; list.size(); i++) &#123;</div><div class="line">            String name = (String) list.get(i);</div><div class="line">            System.out.println(&quot;name: &quot; + name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>采用泛型写法后，在<code>//1</code>处想加入一个Integer类型的对象会出现编译错误。<code>List&lt;String&gt;中</code>，<code>String</code>是<code>类型实参</code>，也就是<code>List</code>接口中肯定包含<code>类型形参</code>，看下<code>List</code>接口的部分源码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public interface List&lt;E&gt; extends Collection&lt;E&gt; &#123;</div><div class="line">    &lt;T&gt; T[] toArray(T[] a);</div><div class="line"></div><div class="line">    boolean addAll(Collection&lt;? extends E&gt; c);</div><div class="line"></div><div class="line">    boolean removeAll(Collection&lt;?&gt; c);</div><div class="line"></div><div class="line">    void add(int index, E element);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>观察源码，我们发现源码中有一些特殊参数如<code>T 、E 、？</code>，泛型命名有其规范，具体如下</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>E</td>
<td><code>Element，元素 如：List&lt;E&gt;,Iterator&lt;E&gt;,Set&lt;E&gt;</code></td>
</tr>
<tr>
<td>K、V</td>
<td><code>Key，Value，代表Map的键值对</code></td>
</tr>
<tr>
<td>N</td>
<td><code>Number，数字</code></td>
</tr>
<tr>
<td>T</td>
<td><code>Type，类型，如String，Integer等等</code></td>
</tr>
<tr>
<td>？</td>
<td><code>类型通配符，用于替代具体的类型实参</code></td>
</tr>
</tbody>
</table>
<h3 id="自定义泛型接口、类、方法"><a href="#自定义泛型接口、类、方法" class="headerlink" title="自定义泛型接口、类、方法"></a>自定义泛型接口、类、方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User&lt;String&gt; username = new User&lt;String&gt;(&quot;tracy&quot;);</div><div class="line">        User&lt;Integer&gt; age = new User&lt;Integer&gt;(24);</div><div class="line">        User&lt;String&gt; country = new User&lt;String&gt;(&quot;China&quot;);</div><div class="line">        System.out.println(&quot;info = &quot; + username.getInfo());</div><div class="line">        System.out.println(&quot;info = &quot; + age.getClass());</div><div class="line">        System.out.println(&quot;info = &quot; + country.getClass());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class User&lt;T&gt; &#123;</div><div class="line">    private T info;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(T info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getInfo() &#123;</div><div class="line">        return info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用泛型类时，虽然传入了不同的泛型参数，但实际生产的是相同的类型。究其原因，在于Java的泛型概念提出的目的，只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型相关信息擦除。换句话说，成功编译过后的class文件中是不包含任何泛型信息的，泛型信息不回进入到运行时阶段。总结为一句话就是，<code>泛型类型在逻辑上可以看成是多个不同的类型，实际上都是相同的基本类型。</code></p>
<p><strong>类型通配符</strong></p>
<p>场景：<code>User&lt;Integer&gt;和User&lt;Number&gt;实际上都是User类型，那么是否可以实现把它们看成具有父子关系的泛型呢？</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User&lt;String&gt; username = new User&lt;String&gt;(&quot;tracy&quot;);</div><div class="line">        User&lt;Integer&gt; age = new User&lt;Integer&gt;(24);</div><div class="line">        User&lt;Number&gt; ageN = new User&lt;Number&gt;(24);</div><div class="line"></div><div class="line">        getInfo(ageN);</div><div class="line">        getInfo(age); //编译错误</div><div class="line">    &#125;</div><div class="line">    public static void getInfo(User&lt;Number&gt; user)&#123;</div><div class="line">        System.out.println(user.getInfo());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class User&lt;T&gt; &#123;</div><div class="line">    private T info;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(T info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getInfo() &#123;</div><div class="line">        return info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码会出现编译错误，通过提示信息，了解到<code>User&lt;Number&gt;</code>不能视为<code>User&lt;Integer&gt;</code>的父类。通过<code>？类型通配符，可以解决这个问题</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class GenericDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        User&lt;String&gt; username = new User&lt;String&gt;(&quot;tracy&quot;);</div><div class="line">        User&lt;Integer&gt; age = new User&lt;Integer&gt;(24);</div><div class="line">        User&lt;Number&gt; ageN = new User&lt;Number&gt;(24);</div><div class="line"></div><div class="line">        getInfo(ageN);</div><div class="line">        getInfo(age); </div><div class="line">    &#125;</div><div class="line">    public static void getInfo(User&lt;? extends Number&gt; user)&#123;</div><div class="line">        System.out.println(user.getInfo());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class User&lt;T&gt; &#123;</div><div class="line">    private T info;</div><div class="line"></div><div class="line">    public User() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public User(T info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getInfo() &#123;</div><div class="line">        return info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B3%9B%E5%9E%8B" target="_blank" rel="external">泛型 - 维基百科</a></li>
<li><a href="http://www.cnblogs.com/lwbqqyumidi/p/3837629.html" target="_blank" rel="external">Java泛型</a></li>
<li>Effective Java(第2版)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之类与继承]]></title>
      <url>http://jianwl.com/2016/08/20/Python%E4%B9%8B%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文延续上文<a href="http://jianwl.com/2016/08/20/Python%E4%B9%8B%E5%88%97%E8%A1%A8%E5%92%8C%E9%9B%86%E5%90%88/">Python之列表和集合</a>的场景，为了让数据结构与数据相匹配，先后采用了变量、字典、类、继承这几种方式来实现对数据结构和数据的关联。通过对比，可以加深对它们的理解。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>虽然教练可以获取到运动员的成绩，但不知道该成绩属于谁，故向各个数据文件添加了姓名和出生年月属性。读取文件数据，并获取运动员前三名的成绩。</li>
</ol>
<p><strong>数据文件<code>sarah2.txt</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sarah Sweeney,2002-6-17,2:58,2.58,2:39,2-25,2-55,2:54,2.18,2:55,2:55,2:22,2-21,2.22</div></pre></td></tr></table></figure>
<p><strong>获取运动员前三名成绩</strong></p>
<p><code>变量</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline()</div><div class="line">        return data.strip().split(&quot;,&quot;)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return(None)</div><div class="line"></div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line">(sarah_name, sarah_bob) = sarah.pop(0), sarah.pop(0)</div><div class="line">print(sarah_name + &quot;&apos;s fastest time are&quot; + str(sorted([sanitize(t) for t in sarah])[0:3]))</div></pre></td></tr></table></figure>
<p>观察以上代码，发现需要为每个运动员定义三个变量，那如果需要处理100，1000个运动员，就会到处充斥着变量，显然不可取，要进行优化。观察数据，发现数据由三部分组成姓名、出生年月、成绩。可以通过字典，将数据结构和数据进行关联。<code>字典是将数据值和键关联的数据结构</code>，优化代码如下：</p>
<p><code>字典</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline().strip().split(&quot;,&quot;)</div><div class="line">        return &#123;&quot;name&quot;: data.pop(0), &quot;dob&quot;: data.pop(0), &quot;scores&quot;: sorted(set([sanitize(t) for t in data]))[0:3]&#125;</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return (None)</div><div class="line">        </div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line">print (sarah[&quot;name&quot;] + &quot;&apos;s fastest  time are&quot; + str(sarah[&quot;scores&quot;]))</div></pre></td></tr></table></figure>
<p>除了用字典，有么有一种更加简便的方法，可以将数据结构和数据关联在一起呢？与其他语言一样，Python允许创建并定义面向对象。</p>
<p><code>类</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class Athlete:</div><div class="line">    def __init__(self,name,dob=None,times=[]):</div><div class="line">        self.name = name</div><div class="line">        self.dob = dob</div><div class="line">        self.times = times</div><div class="line"></div><div class="line">    def __top3__(self):</div><div class="line">        return sorted([sanitize(t) for t in self.times])[0:3]</div><div class="line"></div><div class="line">    def add_time(self,addtimes):</div><div class="line">        if isinstance(addtimes,list):</div><div class="line">            self.times.extend(addtimes)</div><div class="line">        else:</div><div class="line">            self.times.append(addtimes)</div><div class="line"></div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline().strip().split(&quot;,&quot;)</div><div class="line">            return Athlete(data.pop(0),data.pop(0),data)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return (None)</div><div class="line"></div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line">print (sarah.name + &quot;&apos;s fastest time are&quot; + str(sarah.__top3__()))</div></pre></td></tr></table></figure>
<p><code>Athlete</code>有点像列表，它提供了一些列表的功能，比如add_time(),可以通过继承list，来获取他的方法。具体实现如下：</p>
<p><code>继承</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># 继承list类</div><div class="line">class AthleteList(list):</div><div class="line">    def __init__(self,name,dob=None,times=[]):</div><div class="line">        list.__init__([])</div><div class="line">        self.name = name</div><div class="line">        self.dob = dob</div><div class="line">        self.extend(times)</div><div class="line"></div><div class="line">    def __top3__(self):</div><div class="line">        return sorted([sanitize(t) for t in self])[0:3]</div><div class="line"></div><div class="line"># 处理脏数据，将&quot;:&quot;和&quot;-&quot;替换成&quot;.&quot;</div><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div><div class="line"></div><div class="line"># 读取文件数据，并返回列表数据</div><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline().strip().split(&quot;,&quot;)</div><div class="line">            return AthleteList(data.pop(0),data.pop(0),data)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return (None)</div><div class="line">        </div><div class="line">sarah = get_coach_data(&quot;sarah2.txt&quot;)</div><div class="line"></div><div class="line"># 继承了list,使用其extend方法 </div><div class="line">sarah.extend([&quot;2.1333333&quot;,&quot;2.111111&quot;])</div><div class="line">print (str(sarah))</div><div class="line">print (sarah.name + &quot;&apos;s fastest  time are&quot; + str(sarah.__top3__()))</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>使用dict()或{}创建空字典</li>
<li>类似于列表和集合，Python的字典会随着新数据增加到这个数据结构而动态扩大</li>
<li>类定义<code>__init__()</code> 来初始化对象实例</li>
<li>类定义的每个方法都必须提供<code>self</code>作为第一参数</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之列表和集合]]></title>
      <url>http://jianwl.com/2016/08/20/Python%E4%B9%8B%E5%88%97%E8%A1%A8%E5%92%8C%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文章从场景实例出发，先采用常规做法，之后通过采用列表和集合的特性来解决问题，通过比较可以很清晰的了解到列表和集合特性的好处，加深对其的了解。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>教练手上有<code>James</code>、<code>Julie</code>、<code>Mikey</code>、<code>Sarah</code> 这四名运动员的训练成绩,将他们的成绩分别放到四个列表中</li>
<li>运动员的成绩，有些格式有点问题，需要将其转换成正确的格式</li>
<li>需要将每名运动员的各次训练成绩从低到高排序</li>
<li>取出每名运动员成绩最好的3次，且不包含重复的成绩</li>
</ol>
<p><strong>运动员成绩</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># james.txt</div><div class="line">2-34,3:21,2.34,2.45,3.01,2:01,2:01,3:10,2-22</div><div class="line"></div><div class="line"># julie.txt</div><div class="line">2.59,2.11,2:11,2:23,3-10,2-23,3:10,3.21,3-21</div><div class="line"></div><div class="line"># mikey.txt</div><div class="line">2:22,3.01,3:01,3.02,3:02,3.02,3:22,2.49,2:38</div><div class="line"></div><div class="line"># sarah.txt</div><div class="line">2:58,2.58,2:39,2-25,2-55,2:54,2.18,2:55,2:55</div></pre></td></tr></table></figure>
<p><strong>将成绩存于四个列表</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">with open(&quot;james.txt&quot;) as james:</div><div class="line">    james_score = james.readline().strip().split(&quot;,&quot;)</div><div class="line"></div><div class="line">with open(&quot;julie.txt&quot;) as julie:</div><div class="line">    julie_score = julie.readline().strip().split(&quot;,&quot;)</div><div class="line"></div><div class="line">with open(&quot;mikey.txt&quot;) as mikey:</div><div class="line">    mikey_score = mikey.readline().strip().split(&quot;,&quot;)</div><div class="line">    </div><div class="line">with open(&quot;sarah.txt&quot;) as sarah:</div><div class="line">    sarah_score = sarah.readline().strip().split(&quot;,&quot;)</div><div class="line">    </div><div class="line">print(james_score)</div><div class="line">print(julie_score)</div><div class="line">print(mikey_score)</div><div class="line">print(sarah_score)</div></pre></td></tr></table></figure>
<p>观察以上代码，发现有重复代码，可以将重复代码抽到一个小函数中，且没有对文件不存在进行处理，可以优化代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">def get_coach_data(filename):</div><div class="line">    try:</div><div class="line">        with open(filename) as file:</div><div class="line">            data = file.readline()</div><div class="line">        return data.strip().split(&quot;,&quot;)</div><div class="line">    except IOError as err:</div><div class="line">        print(&quot;file error&quot; + str(err))</div><div class="line">        return(None)</div><div class="line"></div><div class="line">james_score = get_coach_data(&quot;james.txt&quot;)</div><div class="line">julie_score = get_coach_data(&quot;julie.txt&quot;)</div><div class="line">mikey_score = get_coach_data(&quot;mikey.txt&quot;)</div><div class="line">sarah_score = get_coach_data(&quot;sarah.txt&quot;)</div><div class="line"></div><div class="line">print(james_score)</div><div class="line">print(julie_score)</div><div class="line">print(mikey_score)</div><div class="line">print(sarah_score)</div></pre></td></tr></table></figure>
<p><strong>成绩排序</strong></p>
<p>Python有两种排序排序方式，一种是<code>原地排序,按你指定的顺序排列数据，用排序后的数据替换原来的数据，原来的顺序会丢失</code>，另一种是<code>复制排序,原数据依然保留，只是对一个副本进行排序</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">data1 = [1,8,3,4,2]</div><div class="line"></div><div class="line"># in-space sort</div><div class="line">data1.sort()</div><div class="line">print (data1)</div><div class="line"></div><div class="line"># copies sort</div><div class="line">data2 = [1,8,3,4,2]</div><div class="line">data3 = sorted(data2)</div><div class="line">print (data2)</div><div class="line">print (data3)</div></pre></td></tr></table></figure>
<p>对其中一名运动员成绩排序<code>print(sorted(james_score))</code>其结果为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&apos;2-22&apos;, &apos;2-34&apos;, &apos;2.34&apos;, &apos;2.45&apos;, &apos;2:01&apos;, &apos;2:01&apos;, &apos;3.01&apos;, &apos;3:10&apos;, &apos;3:21&apos;]</div></pre></td></tr></table></figure>
<p>这个数据排序有问题，观察数据，发现是部分数据格式有问题，需要将<code>-</code>和<code>:</code>改为<code>.</code> 定义一个函数<code>sanitize</code>，实现对脏数据处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def sanitize(time_string):</div><div class="line">    if &quot;-&quot; in time_string:</div><div class="line">        spliter = &quot;-&quot;</div><div class="line">    elif &quot;:&quot; in time_string:</div><div class="line">        spliter = &quot;:&quot;</div><div class="line">    else:</div><div class="line">        return time_string</div><div class="line">    (min, second) = time_string.split(spliter)</div><div class="line">    return min + &quot;.&quot; + second</div></pre></td></tr></table></figure>
<p>但仅仅定义函数还不够，需要对每个运动员成绩都进行处理。具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">james_arr = []</div><div class="line">julie_arr = []</div><div class="line">mikey_arr = []</div><div class="line">sarah_arr = []</div><div class="line">for score in james_score:</div><div class="line">    james_arr.append(sanitize(score))</div><div class="line"></div><div class="line">for score in julie_score:</div><div class="line">    julie_arr.append(sanitize(score))</div><div class="line"></div><div class="line">for score in mikey_score:</div><div class="line">    mikey_arr.append(sanitize(score))</div><div class="line"></div><div class="line">for score in sarah_score:</div><div class="line">    sarah_arr.append(sanitize(score))</div><div class="line"></div><div class="line">print(sorted(james_arr))</div><div class="line">print(sorted(julie_arr))</div><div class="line">print(sorted(mikey_arr))</div><div class="line">print(sorted(sarah_arr))</div></pre></td></tr></table></figure>
<p>通过以上代码确实可以实现对运动员成绩的排序，但有没发现其中包含重复代码。<code>代码创建4个列表来保存数据文件读取的数据，然后再创建4个列表保存经过清理的数据。</code></p>
<p>Python提供了一个工具<code>列表推导</code>可以毫不费力的完成这种转换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mins = [1, 2, 3]</div><div class="line"></div><div class="line"># 列表推导</div><div class="line">secs = [m * 60 for m in mins]</div><div class="line"></div><div class="line"># 结果：[60，120，180]</div><div class="line">print (secs)</div></pre></td></tr></table></figure>
<p>故优化排序后代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">james_arr = [sanitize(score) for score in james_score]</div><div class="line">julie_arr = [sanitize(score) for score in julie_score]</div><div class="line">mikey_arr = [sanitize(score) for score in mikey_score]</div><div class="line">sarah_arr = [sanitize(score) for score in sarah_score]</div><div class="line"></div><div class="line">print(sorted(james_arr))</div><div class="line">print(sorted(julie_arr))</div><div class="line">print(sorted(mikey_arr))</div><div class="line">print(sorted(sarah_arr))</div></pre></td></tr></table></figure>
<p><strong>对成绩去重,取前三名成绩</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">james_uni = []</div><div class="line">julie_uni = []</div><div class="line">mikey_uni = []</div><div class="line">sarah_uni = []</div><div class="line">for score in james_arr:</div><div class="line">    if score not in james_uni:</div><div class="line">        james_uni.append(score)</div><div class="line"></div><div class="line">for score in julie_arr:</div><div class="line">    if score not in julie_uni:</div><div class="line">        julie_uni.append(score)</div><div class="line"></div><div class="line">for score in mikey_arr:</div><div class="line">    if score not in mikey_uni:</div><div class="line">        mikey_uni.append(score)</div><div class="line"></div><div class="line">for score in sarah_arr:</div><div class="line">    if score not in sarah_uni:</div><div class="line">        sarah_uni.append(score)</div><div class="line"></div><div class="line">print(sorted(james_uni)[0:3])</div><div class="line">print(sorted(julie_uni)[0:3])</div><div class="line">print(sorted(mikey_uni)[0:3])</div><div class="line">print(sorted(sarah_uni)[0:3])</div></pre></td></tr></table></figure>
<p>Python中提供了集合数据结构<code>set</code>，集合最突出的特征就是数据项无序，且不允许重复。优化去重代码，以下是其实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(sorted(set(james_arr))[0:3])</div><div class="line">print(sorted(set(julie_arr))[0:3])</div><div class="line">print(sorted(set(mikey_arr))[0:3])</div><div class="line">print(sorted(set(sarah_arr))[0:3])</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>方法/关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>sort()</td>
<td><code>原地改变列表顺序 如:data.sort()</code></td>
</tr>
<tr>
<td>sorted()</td>
<td><code>对列表副本进行排序 如:data;data1 = sorted(data)</code></td>
</tr>
<tr>
<td>my_list[0:3]</td>
<td><code>返回列表第0、1、2个元素的列表，可以访问列表的多个数据项</code></td>
</tr>
<tr>
<td>set()</td>
<td><code>使用set()工厂创建一个集合，集合不允许重复元素</code></td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之保存数据到文件]]></title>
      <url>http://jianwl.com/2016/08/20/Python%E4%B9%8B%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>这篇文章是<a href="http://jianwl.com/2016/08/19/Python%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8E%E5%BC%82%E5%B8%B8/">Python之文件与异常</a>场景的延续，若是之前没有接触过Python文件读取操作,可以先看一下上一篇文章。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol>
<li>读取数据文件<code>data.txt</code>  ，将<code>Man</code>和<code>Other Man</code>这两个人的对话,分别存入<code>man</code>列表和<code>other</code>列表</li>
<li>将<code>man</code>、<code>other</code>列表以一定的格式分别存入<code>man_data.txt</code>和<code>other_data.txt</code>文件</li>
</ol>
<p><strong>数据文件<code>data.txt</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Man :Is this the right room for an argument?</div><div class="line">Other Man :I&apos;ve told you once.</div><div class="line">Man :No you haven&apos;t</div><div class="line">Other Man :Yea I have.</div><div class="line">Man : You most certainly did not!</div><div class="line">Other Man : Now let&apos;s get one thing quite clear: I most definityly toly you!</div><div class="line">pause</div><div class="line">pause</div></pre></td></tr></table></figure>
<p><strong>读取文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">try:</div><div class="line">    data = open(&quot;../resource/data.txt&quot;)</div><div class="line">    man = []</div><div class="line">    other = []</div><div class="line">    for each_line in data:</div><div class="line">        try:</div><div class="line">            (role, line_spoken) = each_line.split(&apos;:&apos;, 1)</div><div class="line">            line_spoken = line_spoken.strip()</div><div class="line">            role = role.strip()</div><div class="line">            if role == &apos;Man&apos;:</div><div class="line">                man.append(line_spoken)</div><div class="line">            elif role == &apos;Other Man&apos;:</div><div class="line">                other.append(line_spoken)</div><div class="line">        except ValueError:</div><div class="line">            pass</div><div class="line">    print(man)</div><div class="line">    print(other)</div><div class="line">except IOError as err:</div><div class="line">    print(&quot;the data file is missing!&quot; + str(err))</div><div class="line">finally:</div><div class="line">	# locals() 返回当前作用域中定义名的集合</div><div class="line">    if &apos;data&apos; in locals():</div><div class="line">        data.close()</div></pre></td></tr></table></figure>
<p><strong>存储文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    with open(&quot;../resource/man_data.txt&quot;, &quot;w&quot;) as man_data:</div><div class="line">        print(man, file=man_data)</div><div class="line">    with open(&quot;../resource/other_data.txt&quot;, &quot;w&quot;) as other_data:</div><div class="line">        print(other, file=other_data)</div><div class="line">except IOError as err:</div><div class="line">	# err与字符串类型不兼容，故需强转为字符串str(err)</div><div class="line">    print(&quot;File Error:&quot; + str(err))</div></pre></td></tr></table></figure>
<p>使用<code>w</code>模式，如果文件已存在，会清空文件的数据。要追加一个文件，要使用<code>a</code>模式。使用<code>with</code>不需要担心关闭打开的文件，等同于读取文件中<code>finally部分</code>。运行代码，可得<code>man_data.txt</code>和<code>other_data.txt</code>的数据分别为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># man_data.txt</div><div class="line">[&apos;Is this the right room for an argument?&apos;, &quot;No you haven&apos;t&quot;, &apos;You most certainly did not!&apos;]</div><div class="line"></div><div class="line"># other_data.txt</div><div class="line">[&quot;I&apos;ve told you once.&quot;, &apos;Yea I have.&apos;, &quot;Now let&apos;s get one thing quite clear: I most definityly toly you!&quot;]</div></pre></td></tr></table></figure>
<p>如果我想让列表中的数据一行一行的显示，该如何做呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def print_lol(the_list,indent=False,level=0,fn=sys.stdout):</div><div class="line">    for each_item in the_list:</div><div class="line">        if isinstance(each_item, list):</div><div class="line">            print_lol(each_item,indent,level+1,fn)</div><div class="line">        else:</div><div class="line">            if indent:</div><div class="line">                for tab_stop in range(level):</div><div class="line">                    print (&quot;\t&quot;,end=&apos;&apos;,file=fn)</div><div class="line">            print (each_item,file=fn)</div></pre></td></tr></table></figure>
<p>定义函数<code>print_lol</code>,该函数能够将列表的数据一行一行打印出来，且可以控制数据的缩进。修改之后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    with open(&quot;../resource/man_data.txt&quot;,&quot;w&quot;) as man_data:</div><div class="line">        print_lol(man,True,2,man_data)</div><div class="line">    with open(&quot;../resource/other_data.txt&quot;,&quot;w&quot;) as other_data:</div><div class="line">        print_lol(other,False,0,other_data)</div><div class="line">except IOError as err:</div><div class="line">    print (&quot;File Error &quot; + str(err))</div></pre></td></tr></table></figure>
<p><code>man_data.txt</code>和<code>other_data.txt</code>文件存入的数据一个是有缩进的，一个是没有缩进的。运行实例可看到效果。</p>
<p>最后，介绍一下，Python中一个可供保存和加载数据对象的通用库<code>pickle</code>.其思想是，将Python内存中的数据存入到pickle引擎，输出腌制后的数据。若要读取数据文件，则将持久存储的腌制数据解除腌制，在Python内存中，用原来的数据形式重新创建数据。具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import pickle</div><div class="line"># &quot;b&quot;,Python以二进制模式打开文件</div><div class="line">with open(&apos;mydata.pickle&apos;,&apos;wb&apos;) as mysavedata:</div><div class="line">	# dump 保存数据</div><div class="line">    pickle.dump([1,2,&apos;three&apos;],mysavedata)</div><div class="line">with open(&apos;mydata.pickle&apos;,&apos;rb&apos;) as myrestoredata:</div><div class="line">	# load 从文件恢复数据</div><div class="line">    a_list = pickle.load(myrestoredata)</div><div class="line">print (a_list)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>方法/关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>strip()</td>
<td><code>从字符串中去除左右两边的空白符</code></td>
</tr>
<tr>
<td>print()</td>
<td><code>BIF的file参数控制将文件保存到哪里，如print([1,2,&quot;three&quot;,file=data.txt])</code></td>
</tr>
<tr>
<td>finally</td>
<td><code>不论try/except语法是否出现异常，总会执行finally组</code></td>
</tr>
<tr>
<td>as</td>
<td><code>向except组传入异常对象，使用as赋至另一个标识符，如except IOError as err</code></td>
</tr>
<tr>
<td>str()</td>
<td><code>任何数据对象字符串的转换</code></td>
</tr>
<tr>
<td>locals()</td>
<td><code>返回当前作用域中的变量集合</code></td>
</tr>
<tr>
<td>with</td>
<td><code>会自动处理所有已打开文件的关闭工作</code></td>
</tr>
<tr>
<td>pickle.dump()</td>
<td><code>数据保存到磁盘</code></td>
</tr>
<tr>
<td>pickle.load()</td>
<td><code>从磁盘恢复数据</code></td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之文件与异常]]></title>
      <url>http://jianwl.com/2016/08/19/Python%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8E%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节，主要用代码来增强对Python文件读取和异常处理的理解。</p>
<h3 id="Python文件输入"><a href="#Python文件输入" class="headerlink" title="Python文件输入"></a>Python文件输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># This allows you to use the Python 3.0 style print function </div><div class="line">from __future__ import print_function</div><div class="line"></div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">print(data.readline(), end=&apos;&apos;)</div><div class="line">print(data.readline(), end=&apos;&apos;)</div><div class="line">print(data.readline(), end=&apos;&apos;)</div><div class="line">print (&quot;&lt;/br&gt;&quot;)</div><div class="line"></div><div class="line"># 返回文件的起始位置</div><div class="line">data.seek(0)</div><div class="line">for each_line in data:</div><div class="line">    print(each_line,end=&apos;&apos;)</div><div class="line"></div><div class="line"># 关闭文件</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<h3 id="数据文件内容data-txt"><a href="#数据文件内容data-txt" class="headerlink" title="数据文件内容data.txt"></a>数据文件内容<code>data.txt</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Man :Is this the right room for an argument?</div><div class="line">Other Man :I&apos;ve told you once.</div><div class="line">Man :No you haven&apos;t</div><div class="line">Other Man :Yea I have.</div><div class="line">Man : You most certainly did not!</div><div class="line">Other Man : Now let&apos;s get one thing quite clear: I most definityly toly you!</div><div class="line">pause</div><div class="line">pause</div></pre></td></tr></table></figure>
<h3 id="抽取数据行中的各部分"><a href="#抽取数据行中的各部分" class="headerlink" title="抽取数据行中的各部分"></a>抽取数据行中的各部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># This allows you to use the Python 3.0 style print function</div><div class="line">from __future__ import print_function</div><div class="line"></div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    (role, line_spoken) = each_line.split(&apos;:&apos;)</div><div class="line">    print(role, end=&apos;&apos;)</div><div class="line">    print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">    print(line_spoken, end=&apos;&apos;)</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p>运行程序，发现一个运行时错误,为何？原因在于<code>Other Man : Now let&#39;s get one thing quite clear: I most definityly toly you!</code>这行数据有两个冒号，split()方法将这一行为3部分。代码没有告诉split()如何处理第3部分，所以Python解释器会产生ValueError，抱怨值过多，然后终止。如何处理呢？<code>split(&#39;:&#39;,1)</code>这个方法只会处理第一个为冒号的分割字符。修改之后的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># This allows you to use the Python 3.0 style print function</div><div class="line">from __future__ import print_function</div><div class="line"></div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    (role, line_spoken) = each_line.split(&apos;:&apos;,1)</div><div class="line">    print(role, end=&apos;&apos;)</div><div class="line">    print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">    print(line_spoken, end=&apos;&apos;)</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p>运行之后，仍然有错，为何？原因在于<code>pause</code>这一行数据中没有冒号，故Python解释器在抱怨没有足够的数据来处理。如何处理呢？两种方案</p>
<ol>
<li>增加额外的逻辑来处理意外的情况</li>
<li>允许这些错误发生，然后只需在各个错误发生时，相应处理即可。</li>
</ol>
<p><strong>方案1</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    if not each_line.find(&quot;:&quot;) == -1:</div><div class="line">        (role, line_spoken) = each_line.split(&apos;:&apos;)</div><div class="line">        print(role, end=&apos;&apos;)</div><div class="line">        print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">        print(line_spoken, end=&apos;&apos;)</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p><strong>方案2</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">data = open(&apos;../resource/data.txt&apos;)</div><div class="line">for each_line in data:</div><div class="line">    try:</div><div class="line">        (role, line_spoken) = each_line.split(&apos;:&apos;, 1)</div><div class="line">        print(role, end=&apos;&apos;)</div><div class="line">        print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">        print(line_spoken, end=&apos;&apos;)</div><div class="line">    except ValueError:</div><div class="line">        pass</div><div class="line">data.close()</div></pre></td></tr></table></figure>
<p><strong>方案1和方案2哪种方案好呢？</strong></p>
<p>使用方案1，随着考虑的情况越来越多，增加额外的逻辑代码也会越来越多，方案的复杂性随之增加，之后最后可能掩盖程序本来的作用。</p>
<p>使用方案2，你可以关注代码真正需要什么，而不必操心哪里出现问题。</p>
<p><strong>附上完整代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from __future__ import print_function</div><div class="line">try:</div><div class="line">    data = open(&apos;../resource/data.txt&apos;)</div><div class="line">    for each_line in data:</div><div class="line">        try:</div><div class="line">            (role, line_spoken) = each_line.split(&apos;:&apos;, 1)</div><div class="line">            print(role, end=&apos;&apos;)</div><div class="line">            print(&apos;said: &apos;, end=&apos;&apos;)</div><div class="line">            print(line_spoken, end=&apos;&apos;)</div><div class="line">        except ValueError:</div><div class="line">            print(&quot;inner error&quot;)</div><div class="line">            pass</div><div class="line">    data.close()</div><div class="line">except IOError:</div><div class="line">    print(&apos;the data file is missing!&apos;)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th style="text-align:left">方法/关键字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">open()</td>
<td style="text-align:left"><code>打开一个磁盘文件</code></td>
</tr>
<tr>
<td style="text-align:left">readline()</td>
<td style="text-align:left"><code>从一个打开文件中读取一行数据</code></td>
</tr>
<tr>
<td style="text-align:left">seek()</td>
<td style="text-align:left"><code>将文件退回到起始位置</code></td>
</tr>
<tr>
<td style="text-align:left">close()</td>
<td style="text-align:left"><code>关闭之前打开的文件</code></td>
</tr>
<tr>
<td style="text-align:left">split()</td>
<td style="text-align:left"><code>将一个字符串分解为子串列表</code></td>
</tr>
<tr>
<td style="text-align:left">find()</td>
<td style="text-align:left"><code>方法会在一个字符串中查找特定子串</code></td>
</tr>
<tr>
<td style="text-align:left">not</td>
<td style="text-align:left"><code>将条件取反</code></td>
</tr>
<tr>
<td style="text-align:left">try/except</td>
<td style="text-align:left"><code>提供异常处理机制</code></td>
</tr>
<tr>
<td style="text-align:left">pass</td>
<td style="text-align:left"><code>Python的空语句或null语句，它什么也不做</code></td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之正则表达式]]></title>
      <url>http://jianwl.com/2016/08/19/JAVA%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很早之前就接触过正则表达式，但因其难以理解而浅尝辄止，网络上很多关于正则表达式的资料，但往往过于偏重语法。重要的不是你记住了多少个特殊字符，而是你会不会运用它们去解决实际问题。最近面试，问到了关于正则表达式的一些问题，深知这一块知识点处于空白区域，故重新学起，以入门级的心态来学习之。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>正则表达式是一些用来匹配和处理的字符串，其是内置于其他语言的”迷你”语言。</p>
<h3 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h3><p>正则表达式是人们为了解决某一类专门的问题而发明的，要想理解正则表达式，最好的办法就是了解他们能够解决什么样的问题？请考虑以下场景</p>
<ol>
<li>你正在搜索一个文件，这个文件里包含单词car(不区分大小写)，但你不想把包含着字符串car的其他单词(比如scar、carry等)也找出来。</li>
<li>你创建了一份包含着一张表单的Web页面，这张表单用来收集用户信息，但其中包括一个用户姓名。你需要检查用户姓名中是否存在”张”这个字。</li>
<li>你正在编辑一段源代码并且要把所有的size都替换成isize，但这种替换仅限于单词size本身而不涉及那些包含着字符串size的其他单词。</li>
</ol>
<p>以上场景大家在编写程序时都会遇到，但任何一种支持条件处理和字符串操作的语言都能解决他们，但问题是解决方案会变得十分复杂。比较容易想到的方案是：<code>遍历那些单词在循环体总用if语句来进行测试，用大量的标记来记录你已经找到了什么，你还没有找到什么，还需要检查空白字符串和特殊字符等等</code></p>
<p>另一种解决方案是使用正则表达式,比如说场景一的解决方案<code>\b[Cc][Aa][Rr]\b</code></p>
<h3 id="正则表达式用途"><a href="#正则表达式用途" class="headerlink" title="正则表达式用途"></a>正则表达式用途</h3><p>认真思考一下那些问题场景，归纳起来，正则表达式的用途无非就是<code>搜索</code>和<code>替换</code></p>
<h3 id="JAVA正则表达式"><a href="#JAVA正则表达式" class="headerlink" title="JAVA正则表达式"></a>JAVA正则表达式</h3><p><strong>包&amp;类</strong></p>
<p>java.util.regex包提供以下三个类用于处理正则表达式</p>
<table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Pattern</td>
<td style="text-align:left">pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。</td>
</tr>
<tr>
<td style="text-align:left">Matcher</td>
<td style="text-align:left">Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。</td>
</tr>
<tr>
<td style="text-align:left">PatternSyntaxException</td>
<td style="text-align:left">一个非强制异常类，它表示一个正则表达式模式中的语法错误。</td>
</tr>
</tbody>
</table>
<p><strong>JAVA实战</strong></p>
<p>场景1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class RegexMatches &#123;</div><div class="line">    private static final String REGEX = &quot;\\b[Cc][Aa][Rr]\\b&quot;;</div><div class="line">    private static final String INPUT = &quot;car cAr CaR cartie CAr&quot;;</div><div class="line"></div><div class="line">    public static void main(String args[]) &#123;</div><div class="line">        Pattern p = Pattern.compile(REGEX);</div><div class="line">        Matcher m = p.matcher(INPUT); // 获取 matcher 对象</div><div class="line">        int count = 0;</div><div class="line"></div><div class="line">        while (m.find()) &#123;</div><div class="line">            count++;</div><div class="line">            // 匹配的个数</div><div class="line">            System.out.println(&quot;Match number &quot; + count);</div><div class="line"></div><div class="line">            // 匹配元素的起始下标</div><div class="line">            System.out.println(&quot;start(): &quot; + m.start());</div><div class="line"></div><div class="line">            // 匹配元素的终止下标</div><div class="line">            System.out.println(&quot;end(): &quot; + m.end());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>场景2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RegexMatches &#123;</div><div class="line">    private static final String REGEX = &quot;张&quot;;</div><div class="line">    private static final String INPUT = &quot;张成四&quot;;</div><div class="line">    private static Pattern pattern;</div><div class="line">    private static Matcher matcher;</div><div class="line"></div><div class="line">    public static void main(String args[]) &#123;</div><div class="line">        pattern = Pattern.compile(REGEX);</div><div class="line">        matcher = pattern.matcher(INPUT);</div><div class="line"></div><div class="line">        System.out.println(&quot;Current REGEX is: &quot; + REGEX);</div><div class="line">        System.out.println(&quot;Current INPUT is: &quot; + INPUT);</div><div class="line"></div><div class="line">        //lookingAt不需要整个序列都匹配，存在匹配的项即可</div><div class="line">        System.out.println(&quot;lookingAt(): &quot; + matcher.lookingAt());</div><div class="line"></div><div class="line">        //matcher要求整个序列都匹配</div><div class="line">        System.out.println(&quot;matches(): &quot; + matcher.matches());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>场景3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class RegexMatches &#123;</div><div class="line">    private static String REGEX = &quot;\\bsize\\b&quot;;</div><div class="line">    private static String INPUT = &quot;the size of the array is three! testsize,thissize,size&quot;;</div><div class="line">    private static String REPLACE = &quot;isize&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Pattern p = Pattern.compile(REGEX);</div><div class="line">        Matcher m = p.matcher(INPUT);</div><div class="line"></div><div class="line">        // 替换字符串</div><div class="line">        INPUT = m.replaceAll(REPLACE);</div><div class="line">        System.out.println(INPUT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>正则表达式必知必会(修订版)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python入门篇]]></title>
      <url>http://jianwl.com/2016/08/18/Python%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="什么是Python"><a href="#什么是Python" class="headerlink" title="什么是Python?"></a>什么是Python?</h3><p>Python是一种解释型的、面向对象的、带有动态语义的高级程序设计语言。</p>
<h3 id="Python相对Java的优劣之处"><a href="#Python相对Java的优劣之处" class="headerlink" title="Python相对Java的优劣之处"></a>Python相对Java的优劣之处</h3><p><strong>优点</strong></p>
<ul>
<li>Python作为动态语言更适合初学编程者，Python可以让初学者把精力集中在编程对象和思维方法上，而不用去担心语法、类型等等外在因素。</li>
<li>Python清晰简洁的语法使得它调试起来比Java简单的多</li>
<li>Python有一些Java没有的强大的架构，可以表达非常复杂的逻辑；比如<a href="http://www.scipy-lectures.org/advanced/advanced_python/" target="_blank" rel="external">Advanced Python Constructs</a></li>
<li>Python有非常强大的支持异步的框架，如<a href="http://eventlet.net/" target="_blank" rel="external">Eventlet Networking Library</a>，而Java要实现这些功能要麻烦的多。</li>
<li>Python作为脚本语言，更适合开发小的应用，而且极其适合在应用发展初期时用来做原型。</li>
</ul>
<p><strong>不足</strong></p>
<ul>
<li>由于是动态语言，所以比Java慢，可以想象一下，Python编译器对于没有类型的变量，需要一个个去check具体是什么类型所消耗的时间，Java相比起C++等等本来就不快，可想而知更慢的效果。</li>
<li>Java很适合发展跨平台应用，而Python不适合</li>
</ul>
<h3 id="Python入门示例"><a href="#Python入门示例" class="headerlink" title="Python入门示例"></a>Python入门示例</h3><p><strong>创建列表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">movies = [&quot;movies-1&quot;,1975,&quot;movies-2&quot;,1979,&quot;movies-3&quot;,1983]</div><div class="line">print(movies)</div></pre></td></tr></table></figure></p>
<p>Python变量标识符没有类型，且列表可以包含混合类型的数据</p>
<p><strong>遍历列表数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">movies = [&quot;movies-1&quot;,1975,&quot;movies-2&quot;,1979,&quot;movies-3&quot;,1983]</div><div class="line">for each_movies in movies :	</div><div class="line">    print(each_movies)</div></pre></td></tr></table></figure></p>
<p>for循环的结构为<code>for 目标标识符  in  列表 :</code>  in将目标标识符和列表分开，冒号表示列表处理开始</p>
<p><strong>定义函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 函数定义</div><div class="line">def print_arr(arrs) :</div><div class="line">	for arr in arrs :</div><div class="line">		if isinstance(arr,list) :</div><div class="line">			print_arr(arr)</div><div class="line">		else :</div><div class="line">			print(arr)</div><div class="line">            </div><div class="line"># 函数调用</div><div class="line">movies = [&quot;movies-1&quot;,&quot;movies-2&quot;,[&quot;movies-3&quot;,[&quot;movies-4&quot;,&quot;movies-5&quot;]]];</div><div class="line">print_arr(movies);</div></pre></td></tr></table></figure></p>
<p>函数定义的结构<code>def 函数名 (参数) ：</code>，参数表是可选的，但括号不可少，括号后的冒号，表示函数代码组开始</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>标识符没有类型，用于表示数据对象的名字，但标识符所指示的数据对象有类型</li>
<li>列表可以存放任意数据，且数据可以是混合类型</li>
<li>isinstance() 用于判断一个标识符是否是指定的某个类型的数据对象。</li>
<li>用def来定义一个函数</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.zhihu.com/question/23111456" target="_blank" rel="external">Python相比Java的优势和劣势</a></li>
<li>Head First Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA之异常]]></title>
      <url>http://jianwl.com/2016/08/16/JAVA%E4%B9%8B%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h3 id="异常机制设计初衷"><a href="#异常机制设计初衷" class="headerlink" title="异常机制设计初衷"></a>异常机制设计初衷</h3><p>顾名思义，异常应该只用于异常的情况，永远不应该用于正常的流程控制。</p>
<h3 id="异常类层次结构"><a href="#异常类层次结构" class="headerlink" title="异常类层次结构"></a>异常类层次结构</h3><p><img src="../images/JAVA异常.jpg" alt=""><br>  在 Java 中，所有的异常都有一个共同的祖先 <code>Throwable</code>。<code>Throwable</code> 指定代码中可用异常传播机制通过 Java 应用程序传输的任何问题的共性。</p>
<p><strong>Throwable</strong><br>有两个重要的子类：<code>Exception</code> 和 <code>Error</code>，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p>
<p><strong>Error</strong><br><code>Error</code>是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误<code>Virtual MachineError</code>，当 JVM 不再有继续执行操作所需的内存资源时，将出现<code>OutOfMemoryError</code>。这些异常发生时，JVM一般会选择线程终止。这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如JVM运行错误<code>Virtual MachineError</code>、类定义错误<code>NoClassDefFoundError</code>等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</p>
<p><strong>Exception</strong><br><code>Exception</code>是程序本身可以处理的异常，其有一个重要的子类 <code>RuntimeException</code>。<code>RuntimeException</code> 类及其子类表示“JVM 常用操作”引发的错误。例如，若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（<code>NullPointerException</code>、<code>ArithmeticException</code>）和 <code>ArrayIndexOutOfBoundException</code>。</p>
<p><strong>Exception和Error的区别</strong><br><code>Exception</code>能被程序本身可以处理，<code>Error</code>是无法处理。</p>
<h3 id="JAVA异常类型"><a href="#JAVA异常类型" class="headerlink" title="JAVA异常类型"></a>JAVA异常类型</h3><p>Java的异常分为可查的异常(编译器要求必须处置的异常)和不可查的异常((编译器不要求强制处置的异常)。</p>
<p><strong>可查的异常</strong><br> 除了<code>RuntimeException</code>及其子类以外，其他的<code>Exception</code>类及其子类都属于可查异常。正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用<code>try-catch</code>语句捕获它，要么用<code>throws</code>子句声明抛出它，否则编译不会通过。</p>
<p><strong>不可查异常</strong><br><code>RuntimeException</code>与其子类和<code>Error</code>都属于不可查异常。运行时异常，如<code>NullPointerException</code>(空指针异常)、<code>IndexOutOfBoundsException</code>(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用<code>try-catch</code>语句捕获它，也没有用<code>throws</code>子句声明抛出它，也会编译通过</p>
<h3 id="处理异常机制"><a href="#处理异常机制" class="headerlink" title="处理异常机制"></a>处理异常机制</h3><p>异常处理机制为抛出异常、捕捉异常</p>
<p><strong>抛出异常</strong><br>当一个方法出现错误引发异常时，方法创建异常对象并交付运行时系统，异常对象中包含了异常类型和异常出现时的程序状态等异常信息。运行时系统负责寻找处置异常的代码并执行</p>
<p><strong>捕获异常</strong><br>在方法抛出异常之后，运行时系统将转为寻找合适的异常处理器（exception handler）。潜在的异常处理器是异常发生时依次存留在调用栈中的方法的集合。当异常处理器所能处理的异常类型与方法抛出的异常类型相符时，即为合适 的异常处理器。运行时系统从发生异常的方法开始，依次回查调用栈中的方法，直至找到含有合适异常处理器的方法并执行。当运行时系统遍历调用栈而未找到合适 的异常处理器，则运行时系统终止。同时，意味着Java程序的终止。</p>
<h3 id="JAVA常见异常"><a href="#JAVA常见异常" class="headerlink" title="JAVA常见异常"></a>JAVA常见异常</h3><p><strong> RuntimeException子类</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>java.lang.ArrayIndexOutOfBoundsException</code></td>
<td style="text-align:left">数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.ArithmeticException</code></td>
<td style="text-align:left">算术条件异常。譬如：整数除零等</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.NullPointerException</code></td>
<td style="text-align:left">空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.ClassNotFoundException</code></td>
<td style="text-align:left">找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.NegativeArraySizeException</code></td>
<td style="text-align:left">数组长度为负异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.ArrayStoreException</code></td>
<td style="text-align:left">数组中包含不兼容的值抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.SecurityException</code></td>
<td style="text-align:left">安全性异常</td>
</tr>
<tr>
<td style="text-align:left"><code>java.lang.IllegalArgumentException</code></td>
<td style="text-align:left">非法参数异常</td>
</tr>
</tbody>
</table>
<p><strong>IOException</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>IOException</code></td>
<td style="text-align:left">操作输入流和输出流时可能出现的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>EOFException</code></td>
<td style="text-align:left">文件已结束异常</td>
</tr>
<tr>
<td style="text-align:left"><code>FileNotFoundException</code></td>
<td style="text-align:left">文件未找到异常</td>
</tr>
</tbody>
</table>
<p><strong>其他</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>ClassCastException</code></td>
<td style="text-align:left">类型转换异常类</td>
</tr>
<tr>
<td style="text-align:left"><code>ArrayStoreException</code></td>
<td style="text-align:left">数组中包含不兼容的值抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>SQLException</code></td>
<td style="text-align:left">操作数据库异常类</td>
</tr>
<tr>
<td style="text-align:left"><code>NoSuchFieldException</code></td>
<td style="text-align:left">字段未找到异常</td>
</tr>
<tr>
<td style="text-align:left"><code>NoSuchMethodException</code></td>
<td style="text-align:left">方法未找到抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>NumberFormatException</code></td>
<td style="text-align:left">字符串转换为数字抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>StringIndexOutOfBoundsException</code></td>
<td style="text-align:left">字符串索引超出范围抛出的异常</td>
</tr>
<tr>
<td style="text-align:left"><code>IllegalAccessException</code></td>
<td style="text-align:left">不允许访问某类异常</td>
</tr>
<tr>
<td style="text-align:left"><code>InstantiationException</code></td>
<td style="text-align:left">当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</td>
</tr>
</tbody>
</table>
<h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><p>用户自定义异常类，只需继承Exception类即可</p>
<p><strong>使用自定义异常类步骤</strong></p>
<ol>
<li>创建自定义异常类。</li>
<li>在方法中通过<code>throw</code>关键字抛出异常对象。</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用<code>try-catch</code>语句捕获并处理；否则在方法的声明处通过<code>throws</code>关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调用者中捕获并处理异常。</li>
</ol>
<h3 id="JAVA实战-未完待续…"><a href="#JAVA实战-未完待续…" class="headerlink" title="JAVA实战 未完待续….."></a>JAVA实战 未完待续…..</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Effective Java 第2版</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA线程池]]></title>
      <url>http://jianwl.com/2016/08/14/JAVA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。</p>
<h3 id="线程池的作用"><a href="#线程池的作用" class="headerlink" title="线程池的作用"></a>线程池的作用</h3><p>限制系统中执行线程的数量，根据系统环境情况，自动/手动设置线程数量，达到最佳效果。</p>
<h3 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h3><ol>
<li>减少创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>
<li>可以根据系统的承受能力，调整线程池中工作线程的数量，防止因为消耗过多内存，而把服务器拖垮。</li>
</ol>
<h3 id="线程池介绍"><a href="#线程池介绍" class="headerlink" title="线程池介绍"></a>线程池介绍</h3><p><strong>线程池中比较重要的类</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>ExecutorService</code></td>
<td style="text-align:left">真正的线程池接口</td>
</tr>
<tr>
<td style="text-align:left"><code>ScheduledExecutorService</code></td>
<td style="text-align:left">定时任务</td>
</tr>
<tr>
<td style="text-align:left"><code>ThreadPoolExecutor</code></td>
<td style="text-align:left"><code>ExecutorService默认实现</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ScheduledThreadPoolExecutor</code></td>
<td style="text-align:left">继承<code>ThreadPoolExecutor</code>的<code>ScheduledExecutorService</code>接口实现周期性任务调度</td>
</tr>
</tbody>
</table>
<p><strong>常用的线程池</strong><br>利用Executors中的静态方法来创建线程池</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>newFixedThreadPool</code></td>
<td style="text-align:left">创建一个固定长度的线程池</td>
</tr>
<tr>
<td style="text-align:left"><code>newCacheThreadPool</code></td>
<td style="text-align:left">创建一个可缓存的线程池，如果线程池当前规模超过处理需求，将回收空闲线程</td>
</tr>
<tr>
<td style="text-align:left"><code>newSingleThreadExecutor</code></td>
<td style="text-align:left">创建一个单线程的<code>Executor</code> ,</td>
</tr>
<tr>
<td style="text-align:left"><code>newScheduledThreadPool</code></td>
<td style="text-align:left">创建一个固定长度的线程池，以延迟/定时的方式来执行任务</td>
</tr>
</tbody>
</table>
<h3 id="JAVA-实战"><a href="#JAVA-实战" class="headerlink" title="JAVA 实战"></a>JAVA 实战</h3><p><strong>创建定时任务线程池</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ScheduledDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1);</div><div class="line">        executor.scheduleAtFixedRate(() -&gt; System.out.println(&quot;============&quot;),1000,5000, TimeUnit.MILLISECONDS);</div><div class="line">        </div><div class="line">        //每隔一段时间打印系统时间，证明两者是互不影响的</div><div class="line">        executor.scheduleAtFixedRate(() -&gt; System.out.println(OffsetDateTime.now()),1000,2000,TimeUnit.MILLISECONDS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>创建固定长度的线程池</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class FixedThreadDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ExecutorService pool = Executors.newFixedThreadPool(2);</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        pool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + &quot;正在执行...&quot;));</div><div class="line">        // 关闭线程池</div><div class="line">        pool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B%E6%B1%A0" target="_blank" rel="external">线程池定义</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生产者-消费者模式]]></title>
      <url>http://jianwl.com/2016/08/14/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在实际的开发过程中，经常会碰到如下场景，某个某块负责生成数据，这些数据由另一个模块来负责处理，产生数据的模块，就形象地称为生产者，而处理数据的模块就称为消费者。</p>
<p>单单抽象出生产者和消费者，还谈不上生产者/消费者模式，该模式还需要有一个缓冲区处于生产者和消费之间，作为一个中介。生产者把数据放入缓冲区，而消费者从缓冲区取出数据。大概的结构如下图：<br><img src="../images/producer_consumer.jpg" alt=""></p>
<p><strong>场景示例</strong><br>为了不至于太抽象，我们举一个寄信的例子，假设你要寄一封平信，大致过程如下：</p>
<ol>
<li>你把信写好 – 相当于生成者生产数据</li>
<li>你把信放入邮筒 – 相当于生产者把数据放到缓冲区</li>
<li>邮递员把信从邮筒取出 – 相当于消费者把数据取出缓冲区</li>
<li>邮递员把信拿去邮局做响应的处理 – 相当于消费者处理数据</li>
</ol>
<h3 id="缓存区有何作用？"><a href="#缓存区有何作用？" class="headerlink" title="缓存区有何作用？"></a>缓存区有何作用？</h3><p><strong>解耦</strong><br>如果让生产者直接调用消费者的消费方法，那么生产者对于消费者就会产生依赖(即耦合)，将来如果消费者代码变化了，可能会影响到生产者，如果两者都依赖于缓冲区，两者之间不直接依赖，耦合也就相应降低了。</p>
<p><strong>支持并发</strong><br>如果生产者直接调用消费者的消费方法，由于函数调用时同步的，在消费者的方法没有返回之前，生产者只好一直等待，万一消费者处理数据很慢，生产者就白白浪费大好时光了。</p>
<p>使用了生产者/消费者模式之后，生产者生产出来的数据往缓存区一丢，就可以再去生产下一个数据了，基本上不依赖消费者的处理速度。</p>
<p><strong>支持忙闲不均</strong><br>如果生产数据的速度时快时慢，缓冲区的好处就体现出来了，当数据生产快的时候，消费者来不及处理，未处理的数据可以暂时存在缓冲区，等生产者生产速度慢下来，消费者再慢慢处理。</p>
<h3 id="JAVA实现"><a href="#JAVA实现" class="headerlink" title="JAVA实现"></a>JAVA实现</h3><p><strong>方法1：阻塞队列方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class ProducerConsumer &#123;</div><div class="line">    // 建立一个阻塞队列</div><div class="line">    private LinkedBlockingQueue&lt;Object&gt; queue = new LinkedBlockingQueue&lt;Object&gt;(10);</div><div class="line"></div><div class="line">    public ProducerConsumer() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void start() &#123;</div><div class="line">        new Producer().start();</div><div class="line">        new Consumer().start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        ProducerConsumer bootstrap = new ProducerConsumer();</div><div class="line">        bootstrap.start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //生产者</div><div class="line">    class Producer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                try &#123;</div><div class="line">                    Object o = new Object();</div><div class="line">                    // 存入一个对象</div><div class="line">                    queue.put(o);</div><div class="line">                    System.out.println(&quot;Producer: &quot; + o);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    System.out.println(&quot;producer is interrupted!&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //消费者</div><div class="line">    class Consumer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                try &#123;</div><div class="line">                    // 取出一个对象</div><div class="line">                    Object o = queue.take();</div><div class="line">                    System.out.println(&quot;Consumer: &quot; + o);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    System.out.println(&quot;producer is interrupted!&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>方法2：线程锁方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">public class ProducerConsumer &#123;</div><div class="line">    private LinkedList&lt;Object&gt; myList = new LinkedList&lt;Object&gt;();</div><div class="line">    private int MAX = 10;</div><div class="line">    private final Lock lock = new ReentrantLock();</div><div class="line">    private final Condition full = lock.newCondition();</div><div class="line">    private final Condition empty = lock.newCondition();</div><div class="line"></div><div class="line">    public ProducerConsumer() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void start() &#123;</div><div class="line">        new Producer().start();</div><div class="line">        new Consumer().start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        ProducerConsumer s2 = new ProducerConsumer();</div><div class="line">        s2.start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //生产者</div><div class="line">    class Producer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                lock.lock();</div><div class="line">                try &#123;</div><div class="line">                    while (myList.size() == MAX) &#123;</div><div class="line">                        System.out.println(&quot;warning: it&apos;s full!&quot;);</div><div class="line">                        full.await();</div><div class="line">                    &#125;</div><div class="line">                    Object o = new Object();</div><div class="line">                    if (myList.add(o)) &#123;</div><div class="line">                        System.out.println(&quot;Producer: &quot; + o);</div><div class="line">                        empty.signal();</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (InterruptedException ie) &#123;</div><div class="line">                    System.out.println(&quot;producer is interrupted!&quot;);</div><div class="line">                &#125; finally &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    // 消费者</div><div class="line">    class Consumer extends Thread &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            while (true) &#123;</div><div class="line">                lock.lock();</div><div class="line">                try &#123;</div><div class="line">                    while (myList.size() == 0) &#123;</div><div class="line">                        System.out.println(&quot;warning: it&apos;s empty!&quot;);</div><div class="line">                        empty.await();</div><div class="line">                    &#125;</div><div class="line">                    Object o = myList.removeLast();</div><div class="line">                    System.out.println(&quot;Consumer: &quot; + o);</div><div class="line">                    full.signal();</div><div class="line">                &#125; catch (InterruptedException ie) &#123;</div><div class="line">                    System.out.println(&quot;consumer is interrupted!&quot;);</div><div class="line">                &#125; finally &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.csdn.net/kaiwii/article/details/6758942" target="_blank" rel="external">生产者/消费者模式</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>http://jianwl.com/2016/08/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><p><strong>时间复杂度</strong><br>算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。</p>
<p><strong>空间复杂度</strong><br>空间复杂度是算法运行过程中所需辅助空间的度量</p>
<p><strong>等差数列公式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S(n) = n(a1 + an)/2</div></pre></td></tr></table></figure></p>
<p><strong>等比数列公式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S(n) = a1(1-q^n)/1-q (q为等比系数不等于1)</div></pre></td></tr></table></figure></p>
<h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><p><strong>前置条件</strong><br>待查找的数组有序</p>
<p><strong>算法思想</strong><br>查找的元素时,首先与数组中间的元素进行比较,如果大于这个元素,则在当前数组的后半部分继续查找,如果小于这个元素,则在当前数组的前半部分继续查找,直到找到相同的元素,或者所查找的数组范围为空为止.</p>
<p><strong>时间复杂度</strong><br>O(lgn)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static int binarySearch0(long[] a, int fromIndex, int toIndex,</div><div class="line">                                 long key) &#123;</div><div class="line">    int low = fromIndex;</div><div class="line">    int high = toIndex - 1;</div><div class="line"></div><div class="line">    while (low &lt;= high) &#123;</div><div class="line">        int mid = (low + high) &gt;&gt;&gt; 1;</div><div class="line">        long midVal = a[mid];</div><div class="line"></div><div class="line">        if (midVal &lt; key)</div><div class="line">            low = mid + 1;</div><div class="line">        else if (midVal &gt; key)</div><div class="line">            high = mid - 1;</div><div class="line">        else</div><div class="line">            return mid; // key found</div><div class="line">    &#125;</div><div class="line">    return -(low + 1);  // key not found.</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>算法思想</strong><br>在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，至此选择排序完成。</p>
<p><strong>空间复杂度</strong><br>O(1)</p>
<p><strong>时间复杂度</strong><br>O(n^2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 比较次数</div><div class="line">n + (n-1) + (n-2) + .... + 1 = n*(n+1)/2</div></pre></td></tr></table></figure></p>
<p><strong>稳定性</strong><br>不稳定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 举个栗子</div><div class="line">数组[5, 5, 3]，用选择排序法进行升序排列[3,5,5]，相等数值5的前后顺序颠倒了。故该算法不稳定</div></pre></td></tr></table></figure></p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static int[] chooseSort(int[] intArr)&#123;</div><div class="line">    for(int i=0;i&lt;intArr.length;i++)&#123;</div><div class="line">        int lowIndex = i;</div><div class="line">        for(int j=i+1;j&lt;intArr.length;j++)&#123;</div><div class="line">            if(intArr[j]&lt;intArr[lowIndex])&#123;</div><div class="line">                lowIndex = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //将最小元素与第i个元素交换</div><div class="line">        int temp = intArr[i];</div><div class="line">        intArr[i] = intArr[lowIndex];</div><div class="line">        intArr[lowIndex] = temp;</div><div class="line">    &#125;</div><div class="line">    return intArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>算法思想</strong></p>
<p><img src="../images/插入排序.jpg" alt=""><br>插入排序，首次默认下标0位元素为已排序列表，后面元素相对于已排序列表由后往前，找到合适位置即插入，然后下标递增继续进行。</p>
<p><strong>时间复杂度</strong><br>O(n^2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n + (n-1) + (n-2) + .... + 1 = n*(n+1) / 2</div></pre></td></tr></table></figure></p>
<p><strong>空间复杂度</strong><br>O(1)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static void insertionSort(int[] array) &#123;</div><div class="line">        if (array == null || array.length &lt; 2) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (int i = 1; i &lt; array.length; i++) &#123;</div><div class="line">            int currentValue = array[i];</div><div class="line">            int position = i;</div><div class="line">            for (int j = i - 1; j &gt;= 0; j--) &#123;</div><div class="line">                if (array[j] &gt; currentValue) &#123;</div><div class="line">                    array[j + 1] = array[j];</div><div class="line">                    position -= 1;</div><div class="line">                &#125; else &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            array[position] = currentValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><strong>插入排序和选择排序对比</strong><br>插入排序和选择排序的时间复杂度是一样的，但两种算法还是有区别的。在任何条件下，选择排序只会移动元素O(n)次,而插入排序的元素的移动次数可能达到O(n^2)</p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>算法思想</strong><br><img src="../images/归并算法.jpg" alt=""><br>归并排序采用分治法，算法涉及三个步骤 </p>
<ol>
<li>分解: 把待排序的 n 个元素的序列分解成两个子序列, 每个子序列包括 n/2 个元素. </li>
<li>治理: 对每个子序列分别调用归并排序MergeSort, 进行递归操作 </li>
<li>合并: 合并两个排好序的子序列,生成排序结果. </li>
</ol>
<p><strong>时间复杂度</strong><br>O(nlgn)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public static void mergeSort(int[] data) &#123;</div><div class="line">        sort(data, 0, data.length - 1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void sort(int[] data, int left, int right) &#123;</div><div class="line">        if (left &gt;= right)</div><div class="line">            return;</div><div class="line">        // 找出中间索引</div><div class="line">        int center = (left + right) / 2;</div><div class="line">        // 对左边数组进行递归</div><div class="line">        sort(data, left, center);</div><div class="line">        // 对右边数组进行递归</div><div class="line">        sort(data, center + 1, right);</div><div class="line">        // 合并</div><div class="line">        merge(data, left, center, right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将两个数组进行归并，归并前面2个数组已有序，归并后依然有序</div><div class="line">     *</div><div class="line">     * @param data   数组对象</div><div class="line">     * @param left   左数组的第一个元素的索引</div><div class="line">     * @param center 左数组的最后一个元素的索引，center+1是右数组第一个元素的索引</div><div class="line">     * @param right  右数组最后一个元素的索引</div><div class="line">     */</div><div class="line">    public static void merge(int[] data, int left, int center, int right) &#123;</div><div class="line">        // 临时数组</div><div class="line">        int[] tmpArr = new int[data.length];</div><div class="line">        // 右数组第一个元素索引</div><div class="line">        int mid = center + 1;</div><div class="line">        // third 记录临时数组的索引</div><div class="line">        int third = left;</div><div class="line">        // 缓存左数组第一个元素的索引</div><div class="line">        int tmp = left;</div><div class="line">        while (left &lt;= center &amp;&amp; mid &lt;= right) &#123;</div><div class="line">            // 从两个数组中取出最小的放入临时数组</div><div class="line">            if (data[left] &lt;= data[mid]) &#123;</div><div class="line">                tmpArr[third++] = data[left++];</div><div class="line">            &#125; else &#123;</div><div class="line">                tmpArr[third++] = data[mid++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // 剩余部分依次放入临时数组（实际上两个while只会执行其中一个）</div><div class="line">        while (mid &lt;= right) &#123;</div><div class="line">            tmpArr[third++] = data[mid++];</div><div class="line">        &#125;</div><div class="line">        while (left &lt;= center) &#123;</div><div class="line">            tmpArr[third++] = data[left++];</div><div class="line">        &#125;</div><div class="line">        // 将临时数组中的内容拷贝回原数组中</div><div class="line">        // （原left-right范围的内容被复制回原数组）</div><div class="line">        while (tmp &lt;= right) &#123;</div><div class="line">            data[tmp] = tmpArr[tmp++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>算法思想</strong><br>快速排序采用了一种分治的策略,算法涉及三个步骤 :</p>
<ol>
<li>先从数列中取出一个数作为基准数。</li>
<li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li>
<li>再对左右区间重复第二步，直到各区间只有一个数。</li>
</ol>
<p><strong>插图解释</strong><br>对下面这个数组快排，随意选择一个数作为基准数(此处选6),有两个变量哨兵i和哨兵j，分别指向最左边和最右边。<br><img src="../images/快排-1.jpg" alt=""><br>哨兵j先出动，一步一步的向左挪动，找到一个小于6的数停下来，接下来哨兵i再一步一步地向右挪，直到找到大于6的数停下来。交换两个数字的位置。<br><img src="../images/快排-2.jpg" alt=""><br>到此第一次交换结束，接下来哨兵j继续向左挪动，发现了4就停下来了(特别注意，每次必须哨兵j先出发)，哨兵i也jx向右挪动，发现了9就停下来了，交换两数的位置<br><img src="../images/快排-3.jpg" alt=""><br>第二次交换结束。哨兵j继续向左挪动，发现了3，哨兵i继续向右挪动，糟啦，哨兵i和哨兵j相遇了，此时说明探测结束了，我们将基数6和3进行交换。<br><img src="../images/快排-4.jpg" alt=""><br>至此我们完成了以6为分界点拆分成两个数组。接下来安装刚刚的方法，分别处理左右两边的数组即可。最后附上快速排序的流程图。<br><img src="../images/快排-5.jpg" alt=""></p>
<p><strong>示例中为何要哨兵j先出发</strong><br>因为如果哨兵i先出发，当探测结束时，哨兵i和哨兵j相遇的数据将会是大于6的，无法完成相遇数据与第一个数组的交换。</p>
<p><strong>时间复杂度</strong><br>O(n^2)</p>
<p><strong>JAVA实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  public void quick(Integer[] str) &#123;</div><div class="line">    if (str.length &gt; 0) &#123;    //查看数组是否为空</div><div class="line">        _quickSort(str, 0, str.length - 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void _quickSort(Integer[] list, int low, int high) &#123;</div><div class="line">    if (low &lt; high) &#123;</div><div class="line">        int middle = _getMiddle(list, low, high);  //将list数组进行一分为二</div><div class="line">        _quickSort(list, low, middle - 1);        //对低字表进行递归排序</div><div class="line">        _quickSort(list, middle + 1, high);       //对高字表进行递归排序</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private int _getMiddle(Integer[] list, int low, int high) &#123;</div><div class="line">    int tmp = list[low];   //数组的第一个作为中轴</div><div class="line">    while (low &lt; high) &#123;</div><div class="line">        while (low &lt; high &amp;&amp; list[high] &gt; tmp) &#123;</div><div class="line">            high--;</div><div class="line">        &#125;</div><div class="line">        list[low] = list[high];   //比中轴小的记录移到低端</div><div class="line">        while (low &lt; high &amp;&amp; list[low] &lt; tmp) &#123;</div><div class="line">            low++;</div><div class="line">        &#125;</div><div class="line">        list[high] = list[low];   //比中轴大的记录移到高端</div><div class="line">    &#125;</div><div class="line">    list[low] = tmp;              //中轴记录到尾</div><div class="line">    return low;                   //返回中轴的位置</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>查找算法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">最坏情况下运行时间</th>
<th style="text-align:center">最好情况下运行时间</th>
<th style="text-align:center">需要保证是有序数组吗?</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">线性查找</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">二分查找</td>
<td style="text-align:center">O(lgn)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<p><strong>排序算法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">最坏情况下运行时间</th>
<th style="text-align:center">最好情况下运行时间</th>
<th style="text-align:center">最坏情况下交换次数</th>
<th style="text-align:center">是否原址？</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">O(nlgn)</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zh.wikipedia.org/zh-hans/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" target="_blank" rel="external">时间复杂度 - 维基百科</a></li>
<li><a href="http://baike.baidu.com/view/540497.htm" target="_blank" rel="external">空间复杂度</a></li>
<li><a href="http://book.51cto.com/art/201405/441264.htm" target="_blank" rel="external">快速排序的插图示例-理解起来相对容易些</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法入门篇]]></title>
      <url>http://jianwl.com/2016/08/13/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h3><p>算法是完成一个任务所需的一系列步骤，且这些步骤需要足够精确的描述，使得计算机能够运行它。</p>
<h3 id="算法有什么作用？"><a href="#算法有什么作用？" class="headerlink" title="算法有什么作用？"></a>算法有什么作用？</h3><p>算法是计算机的核心，那么使用算法，我们能得到什么？下面将使用示例来说明其作用。</p>
<blockquote>
<p>假设我们在一个较快的计算机A上执行一个运行时间为n^2的排序算法，而在一个运行速度较慢的计算机B上执行一个运行时间为nlgn的排序算法，并让他们均对一个包含着1千万个数字的数组进行排序。<br>假设计算机A每秒执行的顺序是100亿条指令，而计算机B每秒仅能执行1千万条指令，即计算机A的性能比计算机B的性能快1000倍，为了使得这个差异更明显，假定世界上具有最精湛技术的程序员为计算机A使用机器语言进行编码，并且结果的代码会需要2n^2条指令来实现对n个数字的排序，而计算机B进行编码的仅仅是一个普通程序员，会使用一个带有低效编译器的高级语言，使得最终编码需要50nlgn条指令。</p>
</blockquote>
<p>计算机A所需花费的时间为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2*(10^7)^2 条指令 / 10^10 条指令/秒 = 20 000 秒 = 超过5.5个小时</div></pre></td></tr></table></figure></p>
<p>计算机B所需花费的时间为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">50*10^7lg10^7 条指令 / 10^7 条指令/秒 = 1163秒 = 不足20分钟</div></pre></td></tr></table></figure></p>
<p>通过以上这个例子，我们可以看到使用一个运行时间增长缓慢的算法，即使是使用一个较次的编译器，计算机B的运行速度也会比计算机A的运行速度快17倍。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>即使我们看到了计算机硬件方面的不断改进和发展，但是整个系统的性能不仅仅依靠选择运行较快的硬件或高效的操作系统，<strong>选择高效的算法</strong>对提升系统的性能也同样重要。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>算法基础 打开算法之门</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL逻辑架构]]></title>
      <url>http://jianwl.com/2016/08/13/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="MySQL逻辑架构图"><a href="#MySQL逻辑架构图" class="headerlink" title="MySQL逻辑架构图"></a>MySQL逻辑架构图</h3><p><img src="../images/mysql架构.png" alt=""></p>
<p><strong>最上层</strong><br>最上层服务并不是MySQL独有的，是基于网络的客户端/服务端的工具</p>
<p><strong>第二层架构</strong><br>大多数MySQL的核心服务功能都在这一层，包括查询解析、分析、优化、缓存以及所有的内置函数（例如，日期、时间、数学和加密函数），所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。</p>
<p><strong>第三层架构</strong><br>第三层包含了存储引擎，存储引擎负责MySQL中数据的存储和提取。服务器通过API与存储引擎进行通信，这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。存储引擎API包含几十个底层函数，用于执行诸如“开始一个事务”或者“根据主键提取一行记录”等操作，但存储引擎不会去解析SQL，不同存储引擎之间也不会互相通信，而只是简单地响应上层服务器的请求。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之事务隔离级别]]></title>
      <url>http://jianwl.com/2016/08/13/MYSQL%E4%B9%8B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="事务隔离级别的作用"><a href="#事务隔离级别的作用" class="headerlink" title="事务隔离级别的作用"></a>事务隔离级别的作用</h3><p>在SQL标准中定义了4种隔离级别，每一种级别都规定了一个事务所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。较低级别的隔离，通常可以执行更高的并发，系统的开销也更低。</p>
<h3 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h3><p><strong>READ UNCOMMITTED(未提交读)</strong><br>一个事务的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，也被称为脏读(Dirty Read)</p>
<p><strong>READ COMMITTED(提交读)</strong><br>一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的，这个级别有时候也被称为不可重复读(nonrepeatable read),因为两次执行同样的查询，可能会得到不一样的结果。</p>
<p><strong>REPEATABLE READ(可重复读) – MySQL的默认事务隔离级别</strong><br>这个级别解决了脏读的问题，保证了在同一个事务中多次读取同样记录的结果是一致的。但是…..无法解决幻读(Phantom Read)的问题，所谓幻读是指当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行(Phantom Row)。</p>
<p><strong>SERIALIZABLE(可串行化)</strong><br>这个级别是最高的隔离级别，它通过强制事务串行执行，避免了前面说的幻读问题，简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题。实际中很少用到，只有在非常需要保证数据的一致性而且可以接受没有并发情况下，才会采用。</p>
<h3 id="设置事务隔离级别"><a href="#设置事务隔离级别" class="headerlink" title="设置事务隔离级别"></a>设置事务隔离级别</h3><p><strong>查看隔离级别</strong></p>
<p><img src="../images/transaction-1.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查看全局的事务级别</div><div class="line">SELECT @@global.tx_isolation;</div><div class="line"></div><div class="line"># 查看当前连接上的事务级别</div><div class="line">SELECT @@session.tx_isolation;</div><div class="line"></div><div class="line"># 查看下一个（未开始）事务的隔离级别</div><div class="line">SELECT @@tx_isolation;</div></pre></td></tr></table></figure></p>
<p><strong>设置隔离级别</strong></p>
<p><img src="../images/transaction-2.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set global|session transaction isolation level read uncommitted | read committed | repeatable read | serializable</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th style="text-align:left">隔离级别</th>
<th style="text-align:center">脏读可能性</th>
<th style="text-align:center">不可重复读可能性</th>
<th style="text-align:right">幻读可能性</th>
<th style="text-align:center">加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">READ UNCOMMITTED</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:right">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:left">READ COMMITTED</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:right">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:left">REPEATABLE READ</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:right">YES</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:left">SERIALIZABLE</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:right">NO</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://blog.itpub.net/195110/viewspace-1080777" target="_blank" rel="external">mysql修改事务隔离级别 </a></li>
<li>高性能MySQL第三版</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL之事务]]></title>
      <url>http://jianwl.com/2016/08/13/MYSQL%E4%B9%8B%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>一组原子性的SQL查询，事务内的语句要么全部执行成功，要么全部执行失败。</p>
<h3 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h3><p>假设一个银行的数据库有两张表:支票(checking)表和储蓄(savings)表，现在用户Jane的支票账户转移200美元到她的储蓄账户，那么需要至少三个步骤：</p>
<ol>
<li>检查支票账户的余额高于200美元</li>
<li>从支票账户余额中减去200美元</li>
<li>在储蓄账户余额中增加200美元</li>
</ol>
<p>上述三个步骤必须打包在一个事务中，任何一个步骤失败，则必须回滚所有的步骤。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">START TRANSACTION;</div><div class="line">SELECT balance FROM checking where customer_id =  10233276;</div><div class="line">UPDATE checking SET balance = balance - 200.00 WHERE customer_id = 10233276;</div><div class="line">UPDATE savings SET balance = balance + 200.00  WHERE customer_id = 10233276;</div><div class="line">COMMIT</div></pre></td></tr></table></figure></p>
<p>但是….. 单纯的事务概念并不是故事的全部，可能会出现以下场景….</p>
<blockquote>
<ol>
<li>执行第4条语句时，服务器崩溃了 – 可能用户会损失200美金</li>
<li>在执行第3条语句和第4条语句之间，另外一个进程要删除支票账户的所有余额 – 银行在不知道这个逻辑的情况下， 可能白白给了Jane200美金。</li>
</ol>
</blockquote>
<h3 id="如何保障事务"><a href="#如何保障事务" class="headerlink" title="如何保障事务"></a>如何保障事务</h3><p>除非系统通过严格的ACID测试，否则空谈事务的概念是远远不够的。ACID分别表示原子性、一致性、隔离性、持久性。</p>
<p><strong>原子性(atomicity)</strong><br>一个事务必须被视为一个不可分割的最小工作单元，整个事务要么全部提交成功，要么全部失败回滚。</p>
<p><strong>一致性(consistency)</strong><br>数据库总是从一个一致性的状态转换到另外一个一致性的状态。例如：在前面的例子中，即使在执行第3、4条语句之间系统崩溃了，支票账户也不会损失200美元，因为事务最终没有被提交，事务中所做的修改也不会保存到数据库中。</p>
<p><strong>隔离性(isolation)</strong><br>一个事务所做的修改在最终提交以前，对其他事务是不可见的。例如：在前面的例子中，当执行完第3条语句，第4条语句还没有开始时，此时另外一个账号汇总程序开始运行，则其看到的支票账户的余额并没有被减去200美元。</p>
<p><strong>持久性(durability)</strong><br>一旦事务提交，则其所作的修改就会永久保存到数据库中，此时即使系统崩溃，修改的数据也不会丢失。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之单例模式]]></title>
      <url>http://jianwl.com/2016/08/12/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><p>确保一个类只有一个实例，并提供一个全局访问点。</p>
<h3 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//在多线程模式下，用这种方法获取单例对象是有问题的。</div><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton uniqueInstance;</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        if(uniqueInstance == null)&#123;</div><div class="line">            uniqueInstance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多线程模式下，正确获取单例的方法"><a href="#多线程模式下，正确获取单例的方法" class="headerlink" title="多线程模式下，正确获取单例的方法"></a>多线程模式下，正确获取单例的方法</h3><p><strong>方法1</strong>：获取单例的性能不高，但简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton uniqueInstance;</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line">    public static synchronized Singleton getInstance()&#123;</div><div class="line">        if(uniqueInstance == null)&#123;</div><div class="line">            uniqueInstance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong>： 使用“急切”创建实例，而不是延迟实例化的做法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton uniqueInstance = new Singleton();</div><div class="line">    private Singleton()&#123;&#125;</div><div class="line">    public static  Singleton getInstance()&#123;</div><div class="line">      return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>方法3</strong>：使用双重加锁，在getInstance中减少使用同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    // volatile关键词确保，uniqueInstance初始化为singleton实例时，多个线程能够正确处理uniqueInstance变量。</div><div class="line">    private volatile static Singleton uniqueInstance;</div><div class="line">    private Singleton() &#123;</div><div class="line">    &#125;</div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">        if (uniqueInstance == null) &#123;</div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (uniqueInstance == null) &#123;</div><div class="line">                    uniqueInstance = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="多线程模式下，单例测试"><a href="#多线程模式下，单例测试" class="headerlink" title="多线程模式下，单例测试"></a>多线程模式下，单例测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//在多线程模式下，创建单例，若hashCode相等则为同一实例。</div><div class="line">public class SingletonTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        for(int i=0;i&lt;100;i++) &#123;</div><div class="line">            new Thread(() -&gt; &#123;</div><div class="line">                Singleton instanceOne = Singleton.getInstance();</div><div class="line">                System.out.println(instanceOne.hashCode());</div><div class="line">            &#125;).start();</div><div class="line">            new Thread(() -&gt; &#123;</div><div class="line">                Singleton instanceTwo = Singleton.getInstance();</div><div class="line">                System.out.println(instanceTwo.hashCode());</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka介绍]]></title>
      <url>http://jianwl.com/2016/08/12/Kafka%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>之前工作中用到Kafka项目，近来面试，问到kafka的概念性部分，有些模糊，特写下此文，梳理知识点，备忘。</p>
<h3 id="什么是Kafka？"><a href="#什么是Kafka？" class="headerlink" title="什么是Kafka？"></a>什么是Kafka？</h3><p>Kafka是一个分布式(distributed)，可划分（partitioned）,冗余备份的持久化的日志服务(replicated committ log service),提供消息系统（messaging system）的功能。</p>
<p><strong>消息的基本术语</strong></p>
<ul>
<li><code>topics</code>  特指Kafka处理的消息源(feeds of messages)的不同分类</li>
<li><code>producers</code> 向Kafka的一个topic发布消息的过程叫producers</li>
<li><code>consumers</code>订阅topics并处理其发布的消息的过程叫consumers</li>
<li><code>broker</code> Kafka集群中的一台或多台服务器统称为broker</li>
</ul>
<p>所以，从总体来说，producers通过网络想Kafka的集群发送消息并转由consumers来处理，这个过程如图所示<br><img src="../images/producer_consumer.png" alt=""><br>客户端和服务端的通信，是基于简单、高性能且与编程语言无关的TCP协议</p>
<h3 id="Topic与日志"><a href="#Topic与日志" class="headerlink" title="Topic与日志"></a>Topic与日志</h3><p>一个Topic是指发布的消息的一个类别或消息源的名字，Kafka集群为每一个Topic划分一个日志(partitioned log)如下图所示<br><img src="../images/partitions.png" alt=""><br>每一个partition是一个排好序的，不可变的消息序列。新的消息不断的追加到序列的尾部。–即持久性日志（commit log）。每一个分区（partition）中的消息，有一个名叫offset 的顺序编号，作为这条消息在partition中的标识。</p>
<p>Kafka集群将在设定的时间范围内，保存所有被发布的消息，不论该消息是否被处理完成。例如，如果一个日志被设置为保存2天，那么在它发布的两天之内，它都是可以被处理的，而在2天之后，它就会被系统销毁并释放掉。</p>
<p>实际上，每个consumer中仅有的元数据（metadata）的主要部分是该consumer在日志中的位置信息，叫做offset（偏移量）。这个offset由consumer控制，在一般情况下，consumer按照offset的顺序读取消息，但事实上consumer可以控制位置，可以以任何想要的顺序处理消息。例如一个consumer可以重置并重新处理一个已经处理过的offset。</p>
<p>这些特点的组合使Kafka的consumers变得特别的廉价–它们能来去自如而不会对集群或者其它的consumers造成多大影响。比如，你可以使用我们的命令行工具来“tail”任意topic中的内容，而不会改变任何被已有consumers处理过的内容。</p>
<p>日志服务的分区有几个目的。首先，它允许日志扩展到超过单台服务器允许的大小。因为虽然每一个单独的分区必须适应承载它们的服务器，但是一个topic可以包含多个分区，所以能处理任意大小的数据。其次，它们作为并行单元–一会儿我们会了解更多</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>日志的分区partitions分布式地部署在Kafka服务器集群上，每个服务器为一个共享的分区处理数据和请求。每一个分区的数据被冗余的备份在多台服务器上用于容错，可以通过配置来设定用于备份的服务器的数量。</p>
<p>每个分区有一台服务器扮演“领导”的角色，有0或多台服务器扮演“随从”。领导负责所有对分区的读写请求，同时随从们被作为领导的备份。一旦领导挂掉，随从中的一个会自动变成新的领导。每一台服务器都同时在一些分区里扮演领导而在另外一些分区中充当随从，这让集群拥有良好的负载均衡。</p>
<h3 id="Producers-（生产者）"><a href="#Producers-（生产者）" class="headerlink" title="Producers （生产者）"></a>Producers （生产者）</h3><p>producers向他们选择的topics发布数据。每个producer负责在topic中选择将哪些消息分配给哪些分区。这可以通过简单的“循环赛”的方式来或是根据一些语义划分的方法（比如根据一些消息中的键）来实现负载均衡。我们会在之后介绍如何使用分区时提供更多的信息。</p>
<h3 id="Consumers-（消费者）"><a href="#Consumers-（消费者）" class="headerlink" title="Consumers （消费者）"></a>Consumers （消费者）</h3><p>传统的消息系统有两种模式：消息队列和发布/订阅。在消息队列模式中，一池子的consumers可能从一个服务器上读取数据，每个消息被分发给其中一个consumer；而在发布订阅模式中，消息被以广播的方式发给所有的consumers。Kafka通过提供了一个叫做消费者群组（consumer group）的抽象概念涵盖以上两种模式。</p>
<p>Consumers上标记有他们所属的consumer group的名字，每个被发布到topic上的消息消息会被分发到所有订阅该topic的consumer group内部的一个consumer实例上。Consumer实例可以是一个单独的进程也可以是一个单独的机器。</p>
<p>如果所有的consumer实例都具有相同的群组，那么就像传统的队列模式一样平衡着各个consumer的负载。</p>
<p>如果所有的consumer实例均有不同的群组，那么这就如同发布/订阅模式，所有的消息被广播给所有的消费者。</p>
<p>更常见的情况是，我们发现topics一般只有很少的消费者群组，一个群组一般对应一个“逻辑订阅”单元。而每一个群组由大量的consumer实例构成，用来提供可扩展性和容错性。这其实就是发布/订阅模式的一种特殊情况，只不过订阅者是一个consumers的集群而非一个单独的进程而已。<br><img src="../images/consumer-groups.png" alt=""><br>同时，Kafka具有比传统消息系统更强大的顺序保障。</p>
<p>传统的队列在服务器上按照一定的顺序存储消息，然后当多个consumers从队列中处理消息时，系统按照消息存储的顺序分发消息。然而，虽然系统是按照顺序送出消息的，但是是按异步的方式送达到consumer手中，所以当消息到达不同consumer手中的时候，已经没有顺序可言了。这意味着消息的顺序在并行处理中不复存在了。消息系统常常有一个权宜之计来应对这种情况，就是使用了一个叫做“独家消费”的概念，就是只允许一个进程处理队列，不过这么做的话，并行处理当然也就不复存在了。</p>
<p>Kafka在这一点上做的比较好。通过一个叫做“排比(parallelism)”的概念–即并行–在topics中， Kafka能够同时提供顺序保证和一池子消费进程间的负载均衡。</p>
<p>Kafka只能保证每个分区内部的消息的总体顺序，而保证同一个topic在不同分区中消息的顺序。这种每个分区有序并可以按照数据的键去分区的特性对于大多数应用都已经足够。但是，如果你需要保证所有消息的总体顺序，可以通过使用只有一个分区的topic去完成，不过这样做就意味着只有一个consumer进程了。</p>
<h3 id="保障"><a href="#保障" class="headerlink" title="保障"></a>保障</h3><p>在高层次上Kafka提供如下保障：</p>
<ul>
<li>由producer发送给特点topic分区的消息按照发送的先后顺序排序。也就是说，如果同一个producer发送了消息M1和M2，M1先被发送，那么M1的offset比M2的小，且M1先出现在日志中。</li>
<li>一个consumer实例按照消息在日志中存储的顺序收到消息。</li>
<li>对于一个有N个备份的topic，我们允许其中N-1个服务器挂掉，依然能保证不丢失任何持久性日志中的消息。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Kafka 0.8.1官方文档</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[锋利的JQuery -- DOM操作]]></title>
      <url>http://jianwl.com/2016/08/11/%E9%94%8B%E5%88%A9%E7%9A%84JQuery-DOM%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">var $li = $(“ul  li:eq(1)”)</td>
<td style="text-align:left">查找元素节点</td>
</tr>
<tr>
<td style="text-align:left">var p_text = $(“p”).attr(“title”)</td>
<td style="text-align:left">查找属性节点</td>
</tr>
</tbody>
</table>
<h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">B.append(A)</td>
<td style="text-align:left">向B内部追加A</td>
</tr>
<tr>
<td style="text-align:left">A.append(B)</td>
<td style="text-align:left">把A追加到B内部</td>
</tr>
<tr>
<td style="text-align:left">B.prepend(A)</td>
<td style="text-align:left">把B内部最前面添加A</td>
</tr>
<tr>
<td style="text-align:left">B.after(A)</td>
<td style="text-align:left">在B后面添加A</td>
</tr>
<tr>
<td style="text-align:left">A.insertAfter(B)</td>
<td style="text-align:left">把A插入B的后面</td>
</tr>
<tr>
<td style="text-align:left">B.before(A)</td>
<td style="text-align:left">在B的前面插入A</td>
</tr>
<tr>
<td style="text-align:left">A.insertBefore(B)</td>
<td style="text-align:left">在B的前面添加A</td>
</tr>
</tbody>
</table>
<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">remove()</td>
<td style="text-align:left">返回的是删除的元素</td>
</tr>
<tr>
<td style="text-align:left">detach()</td>
<td style="text-align:left">与remove类似，但元素的事件和数据都保留</td>
</tr>
<tr>
<td style="text-align:left">empty</td>
<td style="text-align:left">清空节点，清空内部的对象</td>
</tr>
</tbody>
</table>
<h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">clone()</td>
<td style="text-align:left">复制当前的节点</td>
</tr>
<tr>
<td style="text-align:left">clone(true)</td>
<td style="text-align:left">复制当前的节点以及绑定的事件</td>
</tr>
</tbody>
</table>
<h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">replaceWith()</td>
<td style="text-align:left">替换标签</td>
</tr>
</tbody>
</table>
<h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">attr(“title”,”xxxx”)</td>
<td style="text-align:left">设置参数值</td>
</tr>
<tr>
<td style="text-align:left">attr(“title”)</td>
<td style="text-align:left">获取属性值</td>
</tr>
<tr>
<td style="text-align:left">removeAttr(“title”)</td>
<td style="text-align:left">删除属性值</td>
</tr>
</tbody>
</table>
<h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">attr(“class”,”xxx”)</td>
<td style="text-align:left">设置样式</td>
</tr>
<tr>
<td style="text-align:left">addClass(“xxx”)</td>
<td style="text-align:left">追加样式</td>
</tr>
<tr>
<td style="text-align:left">removeClass(“xxx”)</td>
<td style="text-align:left">移除样式</td>
</tr>
<tr>
<td style="text-align:left">removeClass()</td>
<td style="text-align:left">移除所有样式</td>
</tr>
<tr>
<td style="text-align:left">toggleClass(“xxx”)</td>
<td style="text-align:left">切换样式</td>
</tr>
<tr>
<td style="text-align:left">hasClass(“xxx”)</td>
<td style="text-align:left">判断是否有样式</td>
</tr>
</tbody>
</table>
<h3 id="设置、获取HTML、文本和值"><a href="#设置、获取HTML、文本和值" class="headerlink" title="设置、获取HTML、文本和值"></a>设置、获取HTML、文本和值</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">html()</td>
<td style="text-align:left">设置或者获取HTML</td>
</tr>
<tr>
<td style="text-align:left">text()</td>
<td style="text-align:left">设置或者获取文本</td>
</tr>
<tr>
<td style="text-align:left">val()</td>
<td style="text-align:left">设置获取值</td>
</tr>
</tbody>
</table>
<h3 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">children()</td>
<td style="text-align:left">取得匹配元素的子元素集合</td>
</tr>
<tr>
<td style="text-align:left">next()</td>
<td style="text-align:left">取得匹配元素的下一个同辈元素</td>
</tr>
<tr>
<td style="text-align:left">prev()</td>
<td style="text-align:left">取得匹配元素的前一个同辈元素</td>
</tr>
<tr>
<td style="text-align:left">siblings()</td>
<td style="text-align:left">取得匹配元素的所有同辈元素</td>
</tr>
<tr>
<td style="text-align:left">parent()</td>
<td style="text-align:left">获得集合中每个元素的祖先元素</td>
</tr>
<tr>
<td style="text-align:left">parents()</td>
<td style="text-align:left">获得每个元素的祖先元素</td>
</tr>
<tr>
<td style="text-align:left">closest()</td>
<td style="text-align:left">从本身开始，返回最先匹配的祖先元素</td>
</tr>
</tbody>
</table>
<h3 id="CSS-DOM操作"><a href="#CSS-DOM操作" class="headerlink" title="CSS-DOM操作"></a>CSS-DOM操作</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">css(“color”)</td>
<td style="text-align:left">获得指定的样式值</td>
</tr>
<tr>
<td style="text-align:left">css(“color”,”red”)</td>
<td style="text-align:left">设置指定样式</td>
</tr>
<tr>
<td style="text-align:left">width() height()</td>
<td style="text-align:left">设置获取宽度和高度</td>
</tr>
<tr>
<td style="text-align:left">offset()</td>
<td style="text-align:left">视窗的偏移值</td>
</tr>
<tr>
<td style="text-align:left">position()</td>
<td style="text-align:left">获取定对于最近的position样式元素的位置</td>
</tr>
<tr>
<td style="text-align:left">scrollTop</td>
<td style="text-align:left">滚动条顶端距离</td>
</tr>
<tr>
<td style="text-align:left">scrollLeft()</td>
<td style="text-align:left">滚动条左端距离</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[锋利的JQuery -- Ajax]]></title>
      <url>http://jianwl.com/2016/08/11/%E9%94%8B%E5%88%A9%E7%9A%84JQuery-Ajax/</url>
      <content type="html"><![CDATA[<h3 id="Ajax的优劣"><a href="#Ajax的优劣" class="headerlink" title="Ajax的优劣"></a>Ajax的优劣</h3><p>优点</p>
<ul>
<li>不需要插件支持</li>
<li>优秀的用户体验</li>
<li>提高web程序的性能</li>
<li>减轻服务器和带宽的压力</li>
</ul>
<p>缺点</p>
<ul>
<li>浏览器对XHLHttpRequest支持度不够</li>
<li>破坏浏览器的前进、后退按钮</li>
<li>对搜索引擎的支持不足</li>
<li>开发和调试工具的匮乏</li>
</ul>
<h3 id="Ajax方法"><a href="#Ajax方法" class="headerlink" title="Ajax方法"></a>Ajax方法</h3><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">示例</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">load()</td>
<td style="text-align:left">load(url,data,callback)</td>
<td style="text-align:left">载入HTML文档</td>
</tr>
<tr>
<td style="text-align:left">get()</td>
<td style="text-align:left">$.get(url,data,callback,type)</td>
<td style="text-align:left">GET方式发送请求</td>
</tr>
<tr>
<td style="text-align:left">post</td>
<td style="text-align:left">$.post(url,data,callback,type)</td>
<td style="text-align:left">POST方式发送请求</td>
</tr>
<tr>
<td style="text-align:left">getScript</td>
<td style="text-align:left">$.getScript(‘test.js’,callback)</td>
<td style="text-align:left">动态加载js</td>
</tr>
<tr>
<td style="text-align:left">getJSON()</td>
<td style="text-align:left">$.getJSON(‘test.json’,function(data){})</td>
<td style="text-align:left">加载JSON,data为JSON内容</td>
</tr>
</tbody>
</table>
<p><strong>ajax()为最常用、最基本的方法，常用参数:</strong></p>
<ul>
<li><code>url</code> 请求的地址</li>
<li><code>type</code> 请求的类型，默认GET</li>
<li><code>timeout</code> 超时时间</li>
<li><code>data</code> 请求的数据</li>
<li><code>dataType</code> 返回数据类型</li>
<li><code>success</code> 成功回调</li>
<li><code>error</code> 失败回调</li>
<li><code>complete</code> 完成回调</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[锋利的Query -- 选择器]]></title>
      <url>http://jianwl.com/2016/08/11/%E9%94%8B%E5%88%A9%E7%9A%84Query-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">E{CSS}</td>
<td style="text-align:left">标签选择器</td>
</tr>
<tr>
<td style="text-align:left">#ID{CSS}</td>
<td style="text-align:left">id选择器</td>
</tr>
<tr>
<td style="text-align:left">E.className{CSS}</td>
<td style="text-align:left">类选择器</td>
</tr>
<tr>
<td style="text-align:left">E1，E2，E3{CSS}</td>
<td style="text-align:left">群组选择器</td>
</tr>
<tr>
<td style="text-align:left">E F{CSS}</td>
<td style="text-align:left">后代选择器</td>
</tr>
<tr>
<td style="text-align:left">*{CSS}</td>
<td style="text-align:left">统配选择器</td>
</tr>
</tbody>
</table>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“#one”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变id为one的元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“.one”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变class为one的元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变元素名为div的元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“*”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变所有元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“span. #one”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变所有span和id为one的元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“body div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变<body>内所有div的背景色</body></td>
</tr>
<tr>
<td style="text-align:left">$(“body &gt;div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变<body>内子div的背景色</body></td>
</tr>
<tr>
<td style="text-align:left">$(“.one + div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变class为one的下一个div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“#two ~ div”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变id为two的后面的所有同辈div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div:contains(di)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变 含有文本di的div元素背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:empty”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变不包含子元素的div的空元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:has(“.mini”)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变class为mini元素的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:parent”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有子元素的div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div:visible”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变所有可见的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div:hidden”).show(3000)</td>
<td style="text-align:left">显示所有隐藏的div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div[title]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title!=test]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title不等于test的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title^=te]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title以te开头的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title$=est]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title以est结尾的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title*=es]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title含有es的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[id][title*=es]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性id,并且title含有es的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title=’en’]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title等于en或者以en为前缀(en-xxx)的的div元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div[title~=’uk’]”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变含有属性title用空格分隔的值中包含字符uk的div元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“div.one:nth-child(2)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素下的第二个子元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div.one:first-child)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素中的第一个子元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div.one:last-child)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素中的最后一个子元素的背景色</td>
</tr>
<tr>
<td style="text-align:left">$(“div.one:only-child)”).css(“background”,”#bbffaa”)</td>
<td style="text-align:left">改变每个class为one的div父元素下只有一个子元素，则改变该子元素的背景色</td>
</tr>
</tbody>
</table>
<h3 id="表单对象属性过滤选择器"><a href="#表单对象属性过滤选择器" class="headerlink" title="表单对象属性过滤选择器"></a>表单对象属性过滤选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“form1 input:enabled”).val(“这里变化了!”)</td>
<td style="text-align:left">改变表单内可用input元素的值</td>
</tr>
<tr>
<td style="text-align:left">$(“form1 input:disabled”).val(“这里变化了!”)</td>
<td style="text-align:left">改变表单内不可用input元素的值</td>
</tr>
<tr>
<td style="text-align:left">$(“input:checked”).length</td>
<td style="text-align:left">改变多选框中的个数</td>
</tr>
<tr>
<td style="text-align:left">$(“select:selected”).text()</td>
<td style="text-align:left">获取下拉框选中的内容</td>
</tr>
</tbody>
</table>
<h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$(“#form1 :input”)</td>
<td style="text-align:left">获得表单中所有的input、textarea、select、button元素</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :text”)</td>
<td style="text-align:left">获得所有的单行文本框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :password”)</td>
<td style="text-align:left">获得所有的密码框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :radio”)</td>
<td style="text-align:left">获得所有的单选框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :checkbox”)</td>
<td style="text-align:left">获得所有的多选框</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :submit”)</td>
<td style="text-align:left">获得所有的提交按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :image”)</td>
<td style="text-align:left">获得所有的图片按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :reset”)</td>
<td style="text-align:left">获得所有的重置按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :button”)</td>
<td style="text-align:left">获得所有的按钮</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :file”)</td>
<td style="text-align:left">获得所有的上传域</td>
</tr>
<tr>
<td style="text-align:left">$(“#form1 :hidden”)</td>
<td style="text-align:left">获得所有的不可见元素</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>锋利的JQuery（第2版）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之模板方法模式]]></title>
      <url>http://jianwl.com/2016/08/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="场景定义"><a href="#场景定义" class="headerlink" title="场景定义"></a>场景定义</h3><p>星巴克咖啡师傅训练手册，饮料的冲泡方法。<br><strong>星巴玆咖啡冲泡法</strong></p>
<ol>
<li>把水煮沸</li>
<li>把沸水冲泡咖啡</li>
<li>把咖啡倒进杯子</li>
<li>加糖和牛奶</li>
</ol>
<p><strong>星巴玆茶冲泡法</strong></p>
<ol>
<li>把水煮沸</li>
<li>用沸水浸泡茶叶</li>
<li>把茶倒进杯子</li>
<li>加柠檬</li>
</ol>
<h3 id="不考虑设计模式的做法"><a href="#不考虑设计模式的做法" class="headerlink" title="不考虑设计模式的做法"></a>不考虑设计模式的做法</h3><p>Coffee.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Coffee &#123;</div><div class="line">    //咖啡冲泡法</div><div class="line">    void prepareRecipe() &#123;</div><div class="line">        boilWater();</div><div class="line">        brewCoffeeCrinds();</div><div class="line">        pourInCup();</div><div class="line">        addSugarAndMilk();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void brewCoffeeCrinds() &#123;</div><div class="line">        System.out.println(&quot;Dripping Coffee through filter&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addSugarAndMilk() &#123;</div><div class="line">        System.out.println(&quot;Adding sugar and milk&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Tea.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Tea &#123;</div><div class="line">    //茶冲泡法</div><div class="line">    void prepareRecipe() &#123;</div><div class="line">        boilWater();</div><div class="line">        steepTeaBag();</div><div class="line">        pourInCup();</div><div class="line">        addLemon();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void steepTeaBag() &#123;</div><div class="line">        System.out.println(&quot;Steeping the tea&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addLemon() &#123;</div><div class="line">        System.out.println(&quot;Adding Lemon&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Coffee和Tea两个类的实现很像，除了第2和第4个步骤不一样，基本上是相同的，出现了重复的代码，我们将通过模板方法模式来删除重复代码。</p>
<h3 id="使用设计模式的做法"><a href="#使用设计模式的做法" class="headerlink" title="使用设计模式的做法"></a>使用设计模式的做法</h3><ol>
<li><p>两份冲泡法都采用相同的算法，我们将抽象化prepareReceipe方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void prepareRecipe() &#123;</div><div class="line">    boilWater();</div><div class="line">    brew();</div><div class="line">    pourInCup();</div><div class="line">    addCondiments();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义一个抽象类CaffeineBeverage，相同的模块有具体实现，不同的模块定义为抽象方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public abstract class CoffeineBeverage &#123;</div><div class="line">    //子类不能覆盖这个方法</div><div class="line">    final void prepareRecipe()&#123;</div><div class="line">        boilWater();</div><div class="line">        brew();</div><div class="line">        pourInCup();</div><div class="line">        addCondiments();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void brew() ;</div><div class="line"></div><div class="line">    public abstract void addCondiments();</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Coffee和Tea继承抽象类，自行处理冲泡和添加调料部分<br>Coffee.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Coffee extends CoffeineBeverage&#123;</div><div class="line">    @Override</div><div class="line">    public void brew() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addCondiments() &#123;</div><div class="line">        System.out.println(&quot;Adding sugar and milk&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Tea.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Tea extends CoffeineBeverage&#123;</div><div class="line">    @Override</div><div class="line">    public void brew() &#123;</div><div class="line">        System.out.println(&quot;Steeping the tea&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addCondiments() &#123;</div><div class="line">        System.out.println(&quot;Add Lemon&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="什么是模板方法模式？"><a href="#什么是模板方法模式？" class="headerlink" title="什么是模板方法模式？"></a>什么是模板方法模式？</h3><p>至此你已经了解如何使用模板方法模式了，接下来让我们了解一下，模板方法的定义。<br><strong>模板方法定义</strong><br>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
<p><strong>使用场景</strong><br>这个模式是用来创建一个算法模板，什么是模板？模板是一个方法，这个方法将算法定义成一组步骤，其中的任何步骤都可以是抽象的，由子类负责实现，这可以确保算法的结构保持不变，同时由子类提供部分实现。</p>
<h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p><strong>如果我不想要在饮料中添加调料，怎么做呢？</strong> 可以对模板方法进行挂钩，在抽象方法中声明钩子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public abstract class CoffeineBeverage &#123;</div><div class="line">    //子类不能覆盖这个方法</div><div class="line">    final void prepareRecipe()&#123;</div><div class="line">        boilWater();</div><div class="line">        brew();</div><div class="line">        pourInCup();</div><div class="line">        if(customerWantsCondiments()) &#123;</div><div class="line">            addCondiments();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 子类可以覆盖这个方法</div><div class="line">    public  boolean customerWantsCondiments()&#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void brew() ;</div><div class="line"></div><div class="line">    public abstract void addCondiments();</div><div class="line"></div><div class="line">    public void boilWater() &#123;</div><div class="line">        System.out.println(&quot;Boiling water&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void pourInCup() &#123;</div><div class="line">        System.out.println(&quot;Pouring into cup&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Head First 设计模式</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java IO: 文件]]></title>
      <url>http://jianwl.com/2016/08/10/Java-IO-%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>如果你需要在不同端之间读取文件，你可以根据该文件是二进制文件/文本文件来选择使用<code>FileInputStream</code>/<code>FileReader</code>。这两个类允许你从文件开始到文件末尾读取一个字节/字符，或者将读取到的字节/字符。你不必一次性读取整个文件，你可以按顺序读取文件中的字节和字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class FileInputStreamDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            //新建一个FileInputStream对象</div><div class="line">            FileInputStream input = new FileInputStream(new File(&quot;D:\\input.txt&quot;));</div><div class="line"></div><div class="line">            // 文件的字节数</div><div class="line">            Integer size = input.available(); </div><div class="line">            byte[] b = new byte[size];</div><div class="line">            </div><div class="line">            //将文件中的内容读取到数组中</div><div class="line">            input.read(b);</div><div class="line">            input.close();</div><div class="line">            System.out.println(new String(b));</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>如果你需要在不同端之间读取文件，你可以根据该文件是二进制文件/文本文件来选择使用<code>FileInputStream</code>/<code>FileReader</code>。这两个类允许你从文件开始到文件末尾读取一个字节/字符，或者将读取到的字节/字符。你不必一次性读取整个文件，你可以按顺序读取文件中的字节和字符。</p>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java IO概述]]></title>
      <url>http://jianwl.com/2016/08/10/Java-IO%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h3 id="JAVA-IO-是什么？"><a href="#JAVA-IO-是什么？" class="headerlink" title="JAVA IO 是什么？"></a>JAVA IO 是什么？</h3><p>Java IO是一套Java用来读写数据的API，大部分程序都需要处理一些输入并由输入产生一些输出，为此Java提供了java.io包。</p>
<h3 id="Java-io包的范围"><a href="#Java-io包的范围" class="headerlink" title="Java.io包的范围"></a>Java.io包的范围</h3><p>java.io包并没有涵盖所有输入输出类型，例如不包含GUI或网页上的读写。其主要涉及文件、网络数据流、内存缓冲等的读写。</p>
<h3 id="Java-IO的用途和特征"><a href="#Java-IO的用途和特征" class="headerlink" title="Java IO的用途和特征"></a>Java IO的用途和特征</h3><p>Java IO中包含许多InputStream、OutputStream、Reader、Writer的子类，这样设计的原因是让每一个类都负责不同的功能，各类用途汇总如下：</p>
<ul>
<li>文件访问</li>
<li>网络访问</li>
<li>内存缓冲访问</li>
<li>线程内部通信（管道）</li>
<li>缓冲</li>
<li>解析</li>
<li>读写文本（Readers/Writers）</li>
<li>读写基本类型数据</li>
<li>读写对象</li>
</ul>
<h3 id="Java-IO类概述表"><a href="#Java-IO类概述表" class="headerlink" title="Java IO类概述表"></a>Java IO类概述表</h3><p><img src="../images/java-io.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Test单元测试]]></title>
      <url>http://jianwl.com/2016/08/07/Spring-Test%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h3 id="单元测试的好处？"><a href="#单元测试的好处？" class="headerlink" title="单元测试的好处？"></a>单元测试的好处？</h3><ul>
<li>缩短发现问题到解决问题的速度</li>
<li>验证程序修改后是否正确</li>
<li>如果是开源软件，通过单元测试可以了解软件是怎么使用的</li>
</ul>
<h3 id="Spring-Boot-Test常用注解"><a href="#Spring-Boot-Test常用注解" class="headerlink" title="Spring Boot Test常用注解"></a>Spring Boot Test常用注解</h3><p>当前使用SpringBoot的版本为1.4.0 Release</p>
<ul>
<li>@RunWith(SpringRunner.class) <code>运行Junit并支持Spring-test特性</code></li>
<li><p>@SpringBootTest  <code>为springApplication创建上下文并支持SpringBoot特性</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@SpringBootTest的webEnvironment属性有以下4种</div><div class="line">1、Mock —— 加载WebApplicationContext并提供Mock Servlet环境</div><div class="line">2、RANDOOM_PORT —— 加载EmbeddedWebApplicationContext并提供servlet环境，内嵌服务的监听端口是随机的</div><div class="line">3、DEFINED_PORT —— 加载EmbeddedWebApplicationContext并提供servlet环境，内容服务的监听端口是定义好的。默认端口是8080</div><div class="line">4、NONE —— 加载ApplicationContext，启动SpringApplication时，不支持Servlet环境</div></pre></td></tr></table></figure>
</li>
<li><p>@MockBean <code>声明需要模拟的服务</code></p>
</li>
<li><p>@SpyBean <code>定制化需要模拟服务的某个方法，即部分方法可以mock，部分方法可以调用真实方法</code></p>
</li>
<li><p>@WebMvcTest <code>自动加载Spring MVC配置、MockMvc配置、并扫描注解类</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在没有@WebMvcTest注解时，使用@AutoConfiureMockMvc可以自动配置MockMvc;</div></pre></td></tr></table></figure>
</li>
<li><p>@Transaction <code>开启事务，回滚测试方法对数据库的改变</code></p>
</li>
</ul>
<h3 id="SpringBoot-Test-实战"><a href="#SpringBoot-Test-实战" class="headerlink" title="SpringBoot Test 实战"></a>SpringBoot Test 实战</h3><ul>
<li><p>使用Mock，对Controller层接口进行测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@WebMvcTest(UserController.class)</div><div class="line">public class UserControllerTest &#123;</div><div class="line">    @Autowired</div><div class="line">    private MockMvc mockMvc;</div><div class="line"></div><div class="line">    @MockBean</div><div class="line">    private UserService userService;</div><div class="line"></div><div class="line">    @Before</div><div class="line">    public void mockUserService()&#123;</div><div class="line">        User user = new User(1,&quot;liuyun&quot;,&quot;123456&quot;);</div><div class="line">        given(userService.add(user)).willReturn(true);</div><div class="line">        given(userService.selectById(1)).willReturn(user);</div><div class="line">     given(userService.selectAll()).willReturn(Arrays.asList(user));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 用户列表</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void listTest() throws Exception &#123;</div><div class="line">        mockMvc.perform(get(&quot;/list&quot;)</div><div class="line">                .accept(MediaType.APPLICATION_JSON))</div><div class="line">                .andDo(print())</div><div class="line">                .andExpect(status().isOk());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用mock，模拟对数据库的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class UserServiceTest &#123;</div><div class="line"></div><div class="line">    @MockBean</div><div class="line">    private UserDao userDao;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private UserService userService;</div><div class="line"></div><div class="line">    @Before</div><div class="line">    public void initUserDao()&#123;</div><div class="line">        given(this.userDao.selectAll()).willReturn(Arrays.asList(new User(12231,&quot;zhangsan&quot;,&quot;234&quot;)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void listTest()&#123;</div><div class="line">        List&lt;User&gt; users = userService.selectAll();</div><div class="line">        log.info(new Gson().toJson(users));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>回滚测试方法对数据库状态的影响</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class TransactionTest &#123;</div><div class="line">    @Autowired</div><div class="line">    private UserService userSerivce;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    @Transactional</div><div class="line">    public void add() throws Exception &#123;</div><div class="line">        //初始化用户表</div><div class="line">        userSerivce.deleteAll();</div><div class="line"></div><div class="line">        // 新增2个用户</div><div class="line">        userSerivce.add(new User(1,&quot;liuyun&quot;,&quot;123456&quot;));</div><div class="line">        userSerivce.add(new User(2,&quot;xiaofeng&quot;,&quot;123456&quot;));</div><div class="line">        Assert.assertEquals(2, userSerivce.selectAll().size());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试方法的功能是，往数据库中添加两条记录，加上@Transaction注解后，执行完测试方法，数据库状态将自动回滚到执行这个方法前的状态。</p>
</li>
</ul>
<h3 id="JUnit常用注解"><a href="#JUnit常用注解" class="headerlink" title="JUnit常用注解"></a>JUnit常用注解</h3><ul>
<li>@Before 、@After <code>测试方法前/后运行</code></li>
<li>@BeforeClass 、@AfterClass <code>测试类前/后运行，为静态方法</code></li>
<li>@Test @ignore(“reason”) <code>忽略此测试方法</code></li>
<li>@Test(timeout=1) <code>测试方法运行时间超过1毫秒，则自动失败</code></li>
</ul>
<h3 id="JUnit常用注解实战"><a href="#JUnit常用注解实战" class="headerlink" title="JUnit常用注解实战"></a>JUnit常用注解实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)</div><div class="line">public class CommonAnnatationTest &#123;</div><div class="line">    @Before</div><div class="line">    public void before() &#123;</div><div class="line">        log.info(&quot;before&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @After</div><div class="line">    public void after() &#123;</div><div class="line">        log.info(&quot;after&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @BeforeClass</div><div class="line">    public static void beforeClass() &#123;</div><div class="line">        log.info(&quot;beforeClass&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterClass</div><div class="line">    public static void afterClass() &#123;</div><div class="line">        log.info(&quot;afterClass&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_a() &#123;</div><div class="line">        log.info(&quot;test_a&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Ignore(&quot;废弃方法&quot;)</div><div class="line">    @Test</div><div class="line">    public void test_ignore() &#123;</div><div class="line">        log.info(&quot;ignore&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test(timeout = 1)</div><div class="line">    public void test_timeout() &#123;</div><div class="line">        Integer count = 0;</div><div class="line">        do &#123;</div><div class="line">            count++;</div><div class="line">        &#125; while (count &gt; 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JUnit常用测试类型"><a href="#JUnit常用测试类型" class="headerlink" title="JUnit常用测试类型"></a>JUnit常用测试类型</h3><ul>
<li><p>集合测试 </p>
<p>SuiteA.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteA &#123;</div><div class="line">    @Test</div><div class="line">    public void test_a()&#123;</div><div class="line">        log.info(&quot;A&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_b()&#123;</div><div class="line">        log.info(&quot;B&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SuiteB.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringJUnit4ClassRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteB &#123;</div><div class="line">    @Test</div><div class="line">    public void test_c()&#123;</div><div class="line">        log.info(&quot;C&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test_d()&#123;</div><div class="line">        log.info(&quot;D&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SuiteTest.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@RunWith(Suite.class)</div><div class="line">@Suite.SuiteClasses(&#123;SuiteA.class,SuiteB.class&#125;)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteTest &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行SuiteTest,将测试SuiteA、SuiteB的所有测试方法</p>
</li>
<li><p>单元目录测试</p>
<p>目录1：Fruit.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public interface Drinking &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目录2：Drinking.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public interface Drinking &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CategoryTest.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!-- @Slf4j 是lombok注解--&gt;</div><div class="line">@Slf4j</div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest</div><div class="line">public class CategoryTest &#123;</div><div class="line">    @Test</div><div class="line">    @Category(Fruit.class)</div><div class="line">    public void getFruitName() &#123;</div><div class="line">        log.info(&quot;I am Banana!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    @Category(Drinking.class)</div><div class="line">    public void getDrinkingName() &#123;</div><div class="line">        log.info(&quot;I am water!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SuiteCategoriesTest.class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@RunWith(Categories.class)</div><div class="line">@Suite.SuiteClasses(&#123;CategoryTest.class&#125;)</div><div class="line">@Categories.IncludeCategory(Fruit.class)</div><div class="line">@SpringBootTest</div><div class="line">public class SuiteCategoriesTest &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行SuiteCategoriesTest,将会运行CategoryTest测试类下，getFruitName()方法。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij IDEA常用技巧]]></title>
      <url>http://jianwl.com/2016/08/07/Intellij-IDEA%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="1-自动import包"><a href="#1-自动import包" class="headerlink" title="1. 自动import包"></a>1. 自动import包</h3><p>在工程维护中，代码改动常常会产生一些无用的import或者需要import新的包，Intellij中提供自动import或移除无用包的功能；</p>
<ul>
<li>Optimize import on the fly 主动移除无用的import</li>
<li>Add unambiguous imports on the fly  主动导入所需的包</li>
</ul>
<p><img src="../images/IDEA技巧.png" alt=""></p>
<h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[retrofit2入门篇]]></title>
      <url>http://jianwl.com/2016/06/24/retrofit2%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h4 id="Retrofit是什么？"><a href="#Retrofit是什么？" class="headerlink" title="Retrofit是什么？"></a>Retrofit是什么？</h4><blockquote>
<p>A type-safe HTTP client for Android and Java</p>
</blockquote>
<p>你将会用注解去描述HTTP请求，同时Retrofit默认集成URL参数替换和参数查询，并支持Multipart请求和文件上传。</p>
<h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.squareup.retrofit2&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;retrofit&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;2.1.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><ul>
<li><p>创建Retrofit实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.example.xingren;</div><div class="line"></div><div class="line">import retrofit2.Call;</div><div class="line">import retrofit2.Retrofit;</div><div class="line">import retrofit2.converter.gson.GsonConverterFactory;</div><div class="line">import java.io.IOException;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by weilin on 29/6/2016.</div><div class="line"> */</div><div class="line">public class RetrofitDemo &#123;</div><div class="line">    private static final String BASE_URL = &quot;https://api.github.com&quot;;</div><div class="line">    public static void main(String[] args) throws IOException &#123;</div><div class="line">        Retrofit retrofit = new Retrofit.Builder()</div><div class="line">                .baseUrl(BASE_URL)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        // create instance for githubApi</div><div class="line">        GithubAPI github = retrofit.create(GithubAPI.class);</div><div class="line">        Call&lt;List&lt;ContributorsQO&gt;&gt; call = github.contributors(&quot;shuangziliuyun&quot;,&quot;spring-boot-thymeleaf&quot;);</div><div class="line">        List&lt;ContributorsQO&gt; all = call.execute().body();</div><div class="line">        all.forEach(contributor -&gt; &#123;</div><div class="line">            System.out.println(&quot;name = &quot; + contributor.getLogin() + &quot; starts = &quot; + contributor.getContributions());</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.example.xingren;</div><div class="line"></div><div class="line">import retrofit2.Call;</div><div class="line">import retrofit2.http.GET;</div><div class="line">import retrofit2.http.Path;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by weilin on 29/6/2016.</div><div class="line"> */</div><div class="line">public interface GithubAPI &#123;</div><div class="line">    @GET(&quot;/repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;)</div><div class="line">    Call&lt;List&lt;ContributorsQO&gt;&gt; contributors(</div><div class="line">            @Path(&quot;owner&quot;) String owner,</div><div class="line">            @Path(&quot;repo&quot;) String repo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>模型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.example.xingren;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by weilin on 29/6/2016.</div><div class="line"> */</div><div class="line">public class ContributorsQO &#123;</div><div class="line">    private String login;</div><div class="line">    private Integer contributions;</div><div class="line"></div><div class="line">    public Integer getContributions() &#123;</div><div class="line">        return contributions;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContributions(Integer contributions) &#123;</div><div class="line">        this.contributions = contributions;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLogin() &#123;</div><div class="line">        return login;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLogin(String login) &#123;</div><div class="line">        this.login = login;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><p><a href="http://yaohepeng.com/2016/03/31/Retrofit%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">Retrofit入门使用教程</a></p>
</li>
<li><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit官网</a></p>
<p>​</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hystrix入门篇]]></title>
      <url>http://jianwl.com/2016/06/24/Hystrix%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h4 id="Hystrix是什么？"><a href="#Hystrix是什么？" class="headerlink" title="Hystrix是什么？"></a>Hystrix是什么？</h4><p>Hystrix是Netflix针对微服务分布式系统的熔断保护中间件，在分布式环境中，难免有些服务依赖会失败，通过Hystrix可以添加延迟容忍和容错逻辑，控制这些分布式服务之间的交互。同时设计隔离访问远程服务端点，防止级联爆炸式的失败，能够让复杂的分布式系统更加灵活具有弹性。</p>
<h4 id="Hystrix能够做些什么？"><a href="#Hystrix能够做些什么？" class="headerlink" title="Hystrix能够做些什么？"></a>Hystrix能够做些什么？</h4><ul>
<li>通过第三方客户端库对访问的依赖关系的延迟和失败给予保护和控制（通过是网络上）</li>
<li>在复杂的分布式系统中停止级联故障</li>
<li>快速失败和快速恢复</li>
<li>回退和优雅的降级</li>
<li>近实时监控、报警和操作控制</li>
</ul>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Lambda表达式入门]]></title>
      <url>http://jianwl.com/2016/06/22/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h4 id="Lambda表达式语法"><a href="#Lambda表达式语法" class="headerlink" title="Lambda表达式语法"></a>Lambda表达式语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. (parameters) -&gt; expression</div><div class="line"></div><div class="line">2. (parameters) -&gt; &#123;statements;&#125;</div></pre></td></tr></table></figure>
<h4 id="Lambda作用域"><a href="#Lambda作用域" class="headerlink" title="Lambda作用域"></a>Lambda作用域</h4><p>Lambda表达式可以访问 外部作用域带有final修饰符的变量、实例变量和静态变量</p>
<ul>
<li><p>访问本地变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int tempNum = 5; //tempNum将被隐式地转换为final类型；</div><div class="line">List&lt;Integer&gt; nums = Arrays.asList(1,2,3);</div><div class="line">nums.stream.map(num -&gt; num + tempNum);</div></pre></td></tr></table></figure>
</li>
<li><p>访问域变量和静态变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class LambdaTest &#123;</div><div class="line">    static int outStaticNum;</div><div class="line">    int outNum;</div><div class="line"></div><div class="line">    void testScope() &#123;</div><div class="line">        List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);</div><div class="line">        nums.stream().forEach(num -&gt; &#123;</div><div class="line">            outNum = 33;</div><div class="line">            outNum = outNum + num; //outNum值可以改变，非final</div><div class="line">            System.out.println(outNum + num);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        System.out.println(&quot; =================== &quot;);</div><div class="line">        nums.stream().forEach(num -&gt; &#123;</div><div class="line">            outStaticNum = 73;</div><div class="line">            System.out.println(outStaticNum + num);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比本地变量，对于实例变量和静态变量，lambda表达式既有读的权限，也有写的权限；</p>
</li>
</ul>
<h4 id="内置函数式接口"><a href="#内置函数式接口" class="headerlink" title="内置函数式接口"></a>内置函数式接口</h4><ul>
<li><p>Predicates</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Predicate接口是返回boolean值的接口；</div><div class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;</div></pre></td></tr></table></figure>
</li>
<li><p>Functions</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//接收一个参数，返回一个结果</div><div class="line">Function&lt;String,Integer&gt; toInteger = Integer::valueOf;</div><div class="line">Function&lt;String,String&gt; backToString = toInteger.andThen(String::valueOf);</div><div class="line"></div><div class="line">backToString.apply(&quot;123&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>Suppliers</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 根据给定的范型返回一个结果，不需要传入参数</div><div class="line">Supplier&lt;Person&gt; personSupplier = Person::new;</div><div class="line">personSupplier.get(); //new Person</div></pre></td></tr></table></figure>
</li>
<li><p>Consumers</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//Consumer接口代表一类只接收一个参数的操作</div><div class="line">Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(&quot;Hello&quot; + p.getFirstName());</div><div class="line">greeter.accept(new Person(&quot;Lucy&quot;,&quot;Tom&quot;));</div></pre></td></tr></table></figure>
</li>
<li><p>Comparators</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</div><div class="line"></div><div class="line">Person p1 = new Person(&quot;John&quot;, &quot;Doe&quot;);</div><div class="line">Person p2 = new Person(&quot;Alice&quot;, &quot;Wonderland&quot;);</div><div class="line"></div><div class="line">comparator.compare(p1, p2);             // &gt; 0</div><div class="line">comparator.reversed().compare(p1, p2);  // &lt; 0</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Lambda表达式简单例子"><a href="#Lambda表达式简单例子" class="headerlink" title="Lambda表达式简单例子"></a>Lambda表达式简单例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. () -&gt; 5 //不需要参数，返回值为5；</div><div class="line"></div><div class="line">2. x -&gt; 2 * x //接收一个参数(数字类型)，返回其2倍的值</div><div class="line"></div><div class="line">3. (x,y) -&gt; x - y //接收2个参数，并返回他们的差值</div><div class="line"></div><div class="line">4. (String s) -&gt; System.out.println(s) //接收一个string对象，并在控制台打印，不返回任何值</div></pre></td></tr></table></figure>
<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String str[] = [&quot;KUFA&quot;,&quot;LINDA&quot;,&quot;DAVID&quot;];</div><div class="line">List&lt;String&gt; strs = Arrays.asList(str);</div><div class="line"></div><div class="line">//以前遍历方式</div><div class="line">for(String s : strs)&#123;</div><div class="line">  System.out.println(s + &quot; , &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//lambda表达式</div><div class="line">strs.forEach((s) -&gt; System.out.println(s + &quot;,&quot;));</div></pre></td></tr></table></figure>
<h4 id="使用Lambda排序集合"><a href="#使用Lambda排序集合" class="headerlink" title="使用Lambda排序集合"></a>使用Lambda排序集合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">//从小到大排序</div><div class="line">names.stream().sorted((name1,name2) -&gt; name1.compareTo(name2)).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">names.stream().filter(name -&gt;!name.equals(&quot;Tom&quot;)).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="使用转换函数，对Stream流中的元素，进行转换操作"><a href="#使用转换函数，对Stream流中的元素，进行转换操作" class="headerlink" title="使用转换函数，对Stream流中的元素，进行转换操作"></a>使用转换函数，对Stream流中的元素，进行转换操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">names.stream().map( name -&gt; name.concat(&quot; -- &quot;)).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line"></div><div class="line">//Reduce操作 类似于(A,B,C,D) -&gt; A = A + B； A = A + C； A = A + D；最后输出A</div><div class="line">String reduceName = names.stream().reduce((name1,name2) -&gt; name1 = name1.concat(&quot;-&quot;+name2)).orElseThrow(() -&gt; new IllegalArgumentException(&quot;无法输出结果!&quot;));</div><div class="line"></div><div class="line">System.out.println(reduceName);</div></pre></td></tr></table></figure>
<h4 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;Tom&quot;,&quot;Luck&quot;,&quot;Jane&quot;,&quot;Wiliam&quot;);</div><div class="line">//任意匹配其中一个</div><div class="line">Boolean isExistAny = names.stream().anyMatch(name -&gt; name.equals(&quot;Tom&quot;));</div><div class="line"></div><div class="line">//所有元素均匹配</div><div class="line">Boolean isExistAll = names.stream().allMatch(name -&gt; name.equals(&quot;Tom&quot;));</div><div class="line"></div><div class="line">//没有一个元素匹配</div><div class="line">Boolean isExistNone = names.stream().noneMatch(name -&gt; name.equals(&quot;Tom&quot;));</div><div class="line">System.out.println(&quot;isExistAny = &quot; + isExistAny + &quot; isExistAll = &quot; + isExistAll + &quot; isExistNone = &quot; +isExistNone);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JOOQ之CURD语法]]></title>
      <url>http://jianwl.com/2016/06/18/JOOQ%E4%B9%8BCURD%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近，刚接触JOOQ，对于JOOQ增删该查的语法做一个归纳，以便查询。</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li>常用查询样例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">DSLContext create = DSL.using(connection, dialect);</div><div class="line">create.select(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME, count())</div><div class="line">      .from(AUTHOR)</div><div class="line">      .join(BOOK).on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))  //内联结</div><div class="line">      .where(AUTHOR.ID.in(select(BOOK.TITLE).from(BOOK))) </div><div class="line">      .and(BOOK.PUBLISHED.greaterThan(&quot;2008-01-01&quot;))</div><div class="line">      .groupBy(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)  //分组</div><div class="line">      .having(count().greaterThan(5))  //分组过滤</div><div class="line">      .orderBy(AUTHOR.LAST_NAME.asc().nullsFirst()) //排序</div><div class="line">      .limit(2) // 分页</div><div class="line">      .offset(1) // 偏移量</div><div class="line">      .forUpdate()</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<ul>
<li>selectQuery拼接查询条件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//实例1</div><div class="line">DSLContext create = DSL.using(connection,dialect);</div><div class="line">SelectQuery&lt;Record&gt; query = create.selectQuery();</div><div class="line">query.addFrom(AUTHOR);</div><div class="line">query.addJoin(BOOK,BOOK.AUTHOR_ID.equal(AUTHOR.ID));</div><div class="line"></div><div class="line">//执行查询条件</div><div class="line">Result&lt;?&gt; result = query.fetch();</div><div class="line"></div><div class="line">//实例2</div><div class="line">DSLContext create = DSL.using(connection,dialect);</div><div class="line">SelectFinalStep&lt;?&gt; select = create.select().from(AUTHOR);</div><div class="line">SelectQuery&lt;?&gt; query = select.getQuery();</div><div class="line">query.addJoin(BOOK,BOOK.AUTHOR_ID.equal(AUTHOR.ID));</div><div class="line"></div><div class="line">//执行查询条件</div><div class="line">Result&lt;?&gt; result = query.fetch();</div></pre></td></tr></table></figure>
<ul>
<li>单表查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BookRecord book = create.selectFrom(BOOK)</div><div class="line">                        .where(BOOK.LANGUAGE.equal(&quot;DE&quot;))</div><div class="line">                        .orderBy(BOOK.TITLE)</div><div class="line">                        .fetchAny();</div></pre></td></tr></table></figure>
<ul>
<li>去重查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Select&lt;?&gt; select1 = create.selectDistinct(BOOK.TITLE).fetch();</div><div class="line">等价SQL</div><div class="line">SELECT DISTINCT BOOK.TITLE;</div></pre></td></tr></table></figure>
<ul>
<li>外联结查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//左外联结查询：以左表为基准，右表没有的显示为NULL；</div><div class="line">create.select()</div><div class="line">      .from(AUTHOR)</div><div class="line">      .leftOuterJoin(BOOK)</div><div class="line">      .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID)))</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<ul>
<li>外键约束为联结条件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> //BOOK.AUTHOR_ID的外键是参考AUTHOR.ID的主键的，则联结条件是符合外键约束。（有多个外键约束时，是否成立？）</div><div class="line">create.select()</div><div class="line">      .from(AUTHOR)</div><div class="line">      .join(BOOK).onKey()</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<ul>
<li>事务锁定查询记录 - 即查询这几条记录时，这几条记录不能更改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">create.select()</div><div class="line">      .from(BOOK)</div><div class="line">      .where(BOOK.ID.equal(3))</div><div class="line">      .forUpdate()</div><div class="line">      .fetch();</div></pre></td></tr></table></figure>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ul>
<li>新增一条记录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">create.insertInto(AUTHOR,</div><div class="line">        AUTHOR.ID, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</div><div class="line">      .values(100, &quot;Hermann&quot;, &quot;Hesse&quot;)</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<ul>
<li>新增多条记录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//方式1：</div><div class="line">create.insertInto(AUTHOR,</div><div class="line">        AUTHOR.ID, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</div><div class="line">      .values(100, &quot;Hermann&quot;, &quot;Hesse&quot;)</div><div class="line">      .values(101, &quot;Alfred&quot;, &quot;Döblin&quot;)</div><div class="line">      .execute();  </div><div class="line">//方式2：</div><div class="line">create.insertInto(AUTHOR)</div><div class="line">      .set(AUTHOR.ID, 100)</div><div class="line">      .set(AUTHOR.FIRST_NAME, &quot;Hermann&quot;)</div><div class="line">      .set(AUTHOR.LAST_NAME, &quot;Hesse&quot;)</div><div class="line">      .newRecord()</div><div class="line">      .set(AUTHOR.ID, 101)</div><div class="line">      .set(AUTHOR.FIRST_NAME, &quot;Alfred&quot;)</div><div class="line">      .set(AUTHOR.LAST_NAME, &quot;Döblin&quot;)</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<ul>
<li>将查询结果，新增到数据表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create.insertInto(AUTHOR_ARCHIVE)</div><div class="line">      .select(selectFrom(AUTHOR).where(AUTHOR.DECEASED.isTrue()))</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul>
<li>更新一条数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 方式1：</div><div class="line">create.update(AUTHOR)</div><div class="line">      .set(AUTHOR.FIRST_NAME, &quot;Hermann&quot;)</div><div class="line">      .set(AUTHOR.LAST_NAME, &quot;Hesse&quot;)</div><div class="line">      .where(AUTHOR.ID.equal(3))</div><div class="line">      .execute();      </div><div class="line">// 方式2：</div><div class="line">create.update(AUTHOR)</div><div class="line">      .set(AUTHOR.FIRST_NAME,</div><div class="line">         select(PERSON.FIRST_NAME)</div><div class="line">        .from(PERSON)</div><div class="line">        .where(PERSON.ID.equal(AUTHOR.ID))</div><div class="line">      )</div><div class="line">      .where(AUTHOR.ID.equal(3))</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除一条数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create.delete(AUTHOR)</div><div class="line">      .where(AUTHOR.ID.equal(100))</div><div class="line">      .execute();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot入门篇]]></title>
      <url>http://jianwl.com/2016/06/18/SpringBoot%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="SpringBoot是什么？"><a href="#SpringBoot是什么？" class="headerlink" title="SpringBoot是什么？"></a>SpringBoot是什么？</h3><p>SpringBoot是为了解决Java开发，繁琐的配置、低下的开发效率，复杂的部署流程；它使用“习惯优于配置”的理念让你的项目快速运行起来，使用SpringBoot很容易创建一个独立（运行jar、内嵌Servlet容器）准生产级别的基于Spring的项目，使用SpringBoot可以不用或者只需很少的Spring配置。</p>
<h3 id="SpringBoot的优点"><a href="#SpringBoot的优点" class="headerlink" title="SpringBoot的优点"></a>SpringBoot的优点</h3><ul>
<li>快速构建项目</li>
<li>对主流开发框架的无配置集成</li>
<li>项目可独立运行，无须外部依赖Servlet容器</li>
<li>提供运行时的应用监控</li>
<li>极大地提高了开发、部署效率</li>
<li>与云计算的天然集成</li>
</ul>
<h3 id="SpringBoot的缺点"><a href="#SpringBoot的缺点" class="headerlink" title="SpringBoot的缺点"></a>SpringBoot的缺点</h3><ul>
<li>书籍文档较少且不够深入</li>
</ul>
<h3 id="SpringBoot运行"><a href="#SpringBoot运行" class="headerlink" title="SpringBoot运行"></a>SpringBoot运行</h3><p>Spring Boot通常有一个名为Application的入口类，入口类里有一个main方法，这个main方法其实就是一个标准的Java应用入口。在main方法中使用SpringApplication.run( Application.class,args)来启动SpringBoot项目。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package org.jooq.example.spring;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author jianwl</div><div class="line"> */</div><div class="line">@SpringBootApplication</div><div class="line">public class Application &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SpringBoot-常用注解"><a href="#SpringBoot-常用注解" class="headerlink" title="SpringBoot 常用注解"></a>SpringBoot 常用注解</h3><ul>
<li><p>@Value <code>注入application.properties中定义的属性值</code></p>
</li>
<li><p>@ResponseBody <code>将结果直接填充到HTTP的响应提中，一般用于构建Restful的API</code></p>
</li>
<li><p>@Controller <code>用于定义控制类，spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口</code></p>
</li>
<li><p>@RestController<code>@ResponseBody和@Controller的合集</code></p>
</li>
<li><p>@RequestMapping <code>提供路由信息，负责URL到Controller中的具体函数映射</code></p>
</li>
<li><p>@EnableAutoConfiguration <code>Spring Boot自动配置,尝试根据你添加的jar依赖自动配置你的Spring应用</code></p>
</li>
<li><p>@ComponentScan <code>将该类自动扫描并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类</code></p>
</li>
<li><p>@Configuration <code>相对于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类，可以通过@ImportResource加载xml配置文件</code></p>
</li>
<li><p>@SpringBootApplication <code>@EnableAutoConfiguration @ComponentScan @Configuration的合集</code></p>
</li>
<li><p>@Import <code>导入其他配置类</code></p>
</li>
<li><p>@ImportResource<code>用来加载xml配置文件</code></p>
</li>
<li><p>@Autowired <code>自动导入依赖的bean</code></p>
</li>
<li><p>@Service <code>用于修饰service层的组件</code></p>
</li>
<li><p>@Reponsitory <code>用于修饰DAO层的组件</code></p>
</li>
<li><p>@Component <code>当组件不好归类时，使用这个注解进行标注</code></p>
</li>
<li><p>@Profile <code>为不同环境下，使用不同的配置提供了支持</code></p>
</li>
<li><p>@ConfigurationProperties <code>注入属性</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@ConfigurationProperties(locations = &quot;classpath:mail.properties&quot;, </div><div class="line">                         ignoreUnknownFields = false, </div><div class="line">                         prefix = &quot;mail&quot;)</div><div class="line">public class MailProperties &#123; </div><div class="line">  public static class Smtp &#123;  </div><div class="line">    private boolean auth;  </div><div class="line">    private boolean starttlsEnable;  </div><div class="line">    // ... getters and setters </div><div class="line">  &#125;</div><div class="line">  @NotBlank private String host;</div><div class="line">  private int port;  </div><div class="line">  private String from; </div><div class="line">  private String username;</div><div class="line">  private String password; </div><div class="line">  @NotNull private Smtp smtp; </div><div class="line">  // ... getters and setters</div><div class="line">&#125;</div><div class="line"></div><div class="line">// mail.properties</div><div class="line">mail.host=localhost</div><div class="line">mail.port=25</div><div class="line">mail.smtp.auth=false</div><div class="line">mail.smtp.starttlsEnable=false</div><div class="line">mail.from=me@localhost</div><div class="line">mail.username=</div><div class="line">mail.password=</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Thymeleaf入门篇]]></title>
      <url>http://jianwl.com/2016/06/15/Thymeleaf%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="Thymeleaf是什么？"><a href="#Thymeleaf是什么？" class="headerlink" title="Thymeleaf是什么？"></a>Thymeleaf是什么？</h3><p>Thymeleaf是一个跟Volecity、FreeMarker类似的模板引擎，它可以完全替代JSP，跟其他模板引擎，有如下三个吸引人的特点。</p>
<ol>
<li>Thymeleaf 在有网络和无网络的环境下皆可运行，它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持html原型，然后在html里增加额外的属性来叨叨模板、数据的展现方式。浏览器解释html时会忽略未定义的标签属性，所以thymeleaf的模板可以静态地运行，当有数据返回到页面时，Thymeleaf标签会动态替换掉静态内容，使页面动态显示。</li>
<li>Thymeleaf开箱即用的特性，它提供标准和spring标准两套方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套用模板，该标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li>
<li>Thymeleaf提供spring标准方言和一个与SpringMVC完美基础的可选模块。可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>
</ol>
<h3 id="Thymeleaf常用语法"><a href="#Thymeleaf常用语法" class="headerlink" title="Thymeleaf常用语法"></a>Thymeleaf常用语法</h3><p>1、访问数据的四种模式</p>
<ul>
<li><code>${}</code>变量表示式，用于访问容器上下文的变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//HomeController.class</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.ui.Model;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line">@Controller</div><div class="line">class HomeController &#123;</div><div class="line">    @RequestMapping(&quot;/home&quot;)</div><div class="line">    String home(Model model) &#123;</div><div class="line">        model.addAttribute(&quot;msg&quot;, &quot;welcome to thymeleaf&quot;);</div><div class="line">        return &quot;home&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//home.html (主要代码)</div><div class="line"> &lt;p th:text=&quot;$msg&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>*{}</code>选择表达式，选择表达式获取的是选定对象的变量。通过<code>th:object</code>绑定对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div th:object=&quot;$session.user&quot;&gt; </div><div class="line">&lt;p&gt; name: &lt;span th:text=&quot; *&#123;name&#125; &quot;&gt; &lt;/span&gt; &lt;/p&gt;</div><div class="line">&lt;p&gt; age: &lt;span th:text=&quot; *&#123;age&#125; &quot;&gt; &lt;/span&gt; &lt;/p&gt;</div><div class="line">&lt;p&gt; address: &lt;span th:text=&quot; *&#123;address&#125; &quot;&gt; &lt;/span&gt; &lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>#{}</code> 消息表达式，通常与<code>th:text</code>属性一起使用，指明了<code>#{}</code>中key所对应的value。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// WEB-INF/templates/home.html</div><div class="line"> &lt;p th: text=&quot; #&#123;home. welcome&#125;&quot; &gt;This text will not be show! &lt;/p&gt;</div><div class="line"></div><div class="line">// WEB-INF/templates/home.properties</div><div class="line">home.welcome=this messages is from home.properties!</div></pre></td></tr></table></figure>
<ul>
<li><code>@{}</code>超链接URL表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">script th:src=&quot;@&#123;/resource/js/jquery/juqery.json-2.4.min.js&#125;&quot;</div></pre></td></tr></table></figure>
<p>2、文本处理</p>
<ul>
<li>数字相加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//输入结果：In two years, it will be 2018</div><div class="line"> &lt;p&gt;In two years, it will be &lt;span th:text=&quot;2016 + 2&quot;&gt;1494&lt;/span&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure>
<ul>
<li>遍历列表内容 <code>th:each</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// persons为后端传过来的模型数据,List&lt;Person&gt;; Person包含&#123;name,age,address&#125;三个属性</div><div class="line"> &lt;table&gt;</div><div class="line"> &lt;tr th:each=&quot;person : $&#123;persons&#125;&quot;&gt;</div><div class="line"> 	&lt;td th:text=&quot;$&#123;person.name&#125;&quot;&gt;&lt;/td&gt;</div><div class="line"> 	&lt;td th:text=&quot;$&#123;person.age&#125;&quot;&gt;&lt;/td&gt;</div><div class="line"> 	&lt;td th:text=&quot;$&#123;person.address&#125;&quot;&gt;&lt;/td&gt;</div><div class="line"> &lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<ul>
<li>条件判断</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">th:if</div><div class="line">th:unless</div><div class="line">th:switch</div><div class="line">th:case</div></pre></td></tr></table></figure>
<ul>
<li>本地变量声明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">th:object</div><div class="line">th:with</div></pre></td></tr></table></figure>
<ul>
<li>内联文本 <code>[[ ]]</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Hello,[[ $&#123;session.user.name&#125; ]] &lt;/p&gt;</div><div class="line"></div><div class="line">等价于</div><div class="line"></div><div class="line">&lt;p&gt;Hello,&lt;span th:text=&quot;$&#123;session.user.name&#125;&quot;&gt;&lt;/span&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>3、 设置Attribute</p>
<ul>
<li>th:src=”@{/images/xxx.png}”  设置图片URL 等价于 th:attribute=”src=@{/images/xxx.png}”</li>
<li>th:value 设置属性值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;submit&quot; value=&quot;Subscribe me!&quot; th:value=&quot;#&#123;subscribe.submit&#125;&quot;/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>th:action 等价于 form 的action属性</li>
<li>th:href 设置超链接地址</li>
<li>追加属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">th:attrprepend</div><div class="line">th:attrappend</div></pre></td></tr></table></figure>
<p>4、模板</p>
<ul>
<li>引用模板,引用footer.html的copy模块<code>th:include=&quot;footer :: copy&quot;</code>或<code>th:replace=&quot;footer :: copy&quot;</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// footer.html</div><div class="line">&lt;!DOCTYPE html SYSTEM &quot;http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd&quot;&gt;</div><div class="line"></div><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;</div><div class="line">      xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</div><div class="line"></div><div class="line"> &lt;body&gt;</div><div class="line">   &lt;div th:fragment=&quot;copy&quot;&gt;</div><div class="line">     &amp;copy; 2011 The Good Thymes Virtual Grocery</div><div class="line">   &lt;/div&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line"> </div><div class="line"> &lt;/html&gt;</div></pre></td></tr></table></figure>
<p>5、常用的工具类</p>
<ul>
<li><a href="http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#arrays" target="_blank" rel="external">Dates、String、Arrays、Lists、Sets、Maps工具类</a></li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.cnblogs.com/vinphy/p/4674247.html" target="_blank" rel="external">thymeleaf 学习笔记-基础篇(中文教程)</a></li>
<li><a href="http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html" target="_blank" rel="external">Tutorial: Using Thymeleaf</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JOOQ入门篇]]></title>
      <url>http://jianwl.com/2016/06/14/JOOQ%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="什么是JOOQ？"><a href="#什么是JOOQ？" class="headerlink" title="什么是JOOQ？"></a>什么是JOOQ？</h3><p><a href="http://www.jooq.org/" target="_blank" rel="external">JOOQ</a>,全称是Java Object Oriented Querying,即面向Java对象查询，它是<a href="http://www.datageekery.com/" target="_blank" rel="external">Data Geekery</a>公司研发的DA方案(Data AccessLayer)主要解决两个问题。</p>
<ol>
<li>Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱</li>
<li>JDBC又过于嘈杂，需要干的事情太多</li>
</ol>
<p>JOOQ希望做的就是在上述两者中寻找一个最佳的平衡，它依据数据库中的表生产DA相关代码，开发者将生产的代码引入项目中使用。</p>
<p>有好几个版本</p>
<ul>
<li>OpenSource</li>
<li>Express</li>
<li>Professional</li>
<li>Enterprise</li>
</ul>
<p>OpenSource版本针对开源数据库，其他的几个版本针对非开源项目。</p>
<h3 id="JOOQ框架原理"><a href="#JOOQ框架原理" class="headerlink" title="JOOQ框架原理"></a>JOOQ框架原理</h3><p>在DAO层使用Java语言编写SQL语句，在Intellij IDEA帮助下，复杂SQL的维护变得很容易，通过内部SQL Builder转换成数据库可执行的SQL文本，使用数据库驱动，提交SQL到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。</p>
<h3 id="JOOQ-vs-Hibernate-优势"><a href="#JOOQ-vs-Hibernate-优势" class="headerlink" title="JOOQ vs Hibernate 优势"></a>JOOQ vs Hibernate 优势</h3><p>它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句，在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，简直是噩梦，而Hibernate饱受诟病的连续查询配置复杂以及HQL语法的问题，在JOOQ不复存在。</p>
<h3 id="JOOQ-vs-Mybatis-优势"><a href="#JOOQ-vs-Mybatis-优势" class="headerlink" title="JOOQ vs Mybatis 优势"></a>JOOQ vs Mybatis 优势</h3><p>它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时，带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转化问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决，又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。</p>
<h3 id="JOOQ-优势"><a href="#JOOQ-优势" class="headerlink" title="JOOQ 优势"></a>JOOQ 优势</h3><p>JOOQ提供原生的类型安全转化，以及POJO维护，免去大量一次性代码的编写(通过Maven Plugin实现)；使用这种DAO模式，可以通过类的方式来进行数据库访问，而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>Github下载链接：<code>git@github.com:shuangziliuyun/JOOQ-Study.git</code></p>
<h4 id="With-Mysql"><a href="#With-Mysql" class="headerlink" title="With Mysql"></a>With Mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--MySQL JDBC driver, 数据库迁移等情况下需要. --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.36&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!--数据库代码生成的插件 --&gt;</div><div class="line">           &lt;plugin&gt;</div><div class="line">               &lt;!-- Specify the maven code generator plugin --&gt;</div><div class="line">               &lt;groupId&gt;org.jooq&lt;/groupId&gt;</div><div class="line">               &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</div><div class="line">               &lt;version&gt;3.8.2&lt;/version&gt;</div><div class="line">               &lt;!-- The plugin should hook into the generate goal --&gt;</div><div class="line">               &lt;executions&gt;</div><div class="line">                   &lt;execution&gt;</div><div class="line">                       &lt;goals&gt;</div><div class="line">                           &lt;goal&gt;generate&lt;/goal&gt;</div><div class="line">                       &lt;/goals&gt;</div><div class="line">                   &lt;/execution&gt;</div><div class="line">               &lt;/executions&gt;</div><div class="line">               &lt;configuration&gt;</div><div class="line">                   &lt;!-- JDBC connection parameters --&gt;</div><div class="line">                   &lt;jdbc&gt;</div><div class="line">                       &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;</div><div class="line">                       &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</div><div class="line">                       &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</div><div class="line">                       &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</div><div class="line">                   &lt;/jdbc&gt;</div><div class="line">                   &lt;!-- Generator parameters --&gt;</div><div class="line">                   &lt;generator&gt;</div><div class="line">                       &lt;database&gt;</div><div class="line">                           &lt;name&gt;org.jooq.util.mysql.MySQLDatabase&lt;/name&gt;</div><div class="line">                           &lt;includes&gt;.*&lt;/includes&gt;</div><div class="line">                           &lt;inputSchema&gt;$&#123;db.schema&#125;&lt;/inputSchema&gt;</div><div class="line">                           &lt;forcedTypes&gt;</div><div class="line">                               &lt;forcedType&gt;</div><div class="line">                                   &lt;name&gt;BOOLEAN&lt;/name&gt;</div><div class="line">                                   &lt;expression&gt;.*\.HANDMADE&lt;/expression&gt;</div><div class="line">                                   &lt;types&gt;.*&lt;/types&gt;</div><div class="line">                               &lt;/forcedType&gt;</div><div class="line">                           &lt;/forcedTypes&gt;</div><div class="line">                       &lt;/database&gt;</div><div class="line">                       &lt;target&gt;</div><div class="line">                           &lt;packageName&gt;com.study.jooq.common.generated&lt;/packageName&gt;</div><div class="line">                           &lt;directory&gt;src/main/java&lt;/directory&gt;</div><div class="line">                       &lt;/target&gt;</div><div class="line">                   &lt;/generator&gt;</div><div class="line">               &lt;/configuration&gt;</div><div class="line">           &lt;/plugin&gt;</div></pre></td></tr></table></figure>
<h4 id="With-Flyway"><a href="#With-Flyway" class="headerlink" title="With Flyway"></a>With Flyway</h4><p>Flyway 是独立于数据库的应用，管理并跟踪数据库变更的数据库版本管理工具</p>
<p><a href="http://www.cnblogs.com/huang0925/p/4409506.html" target="_blank" rel="external">Flyway，数据库Schema管理利器</a></p>
<p>在pom.xml的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line"></div><div class="line">    &lt;!--防止maven改动IDE的language level --&gt;</div><div class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</div><div class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</div><div class="line"></div><div class="line">    &lt;!--数据库迁移所用的参数 --&gt;</div><div class="line">    &lt;db.url&gt;jdbc:mysql://localhost:3306&lt;/db.url&gt;</div><div class="line">    &lt;db.username&gt;root&lt;/db.username&gt;</div><div class="line">    &lt;db.password&gt;root&lt;/db.password&gt;</div><div class="line">    &lt;db.schema&gt;study&lt;/db.schema&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line"></div><div class="line">&lt;!--数据库迁移, 同步的插件 --&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;3.0&lt;/version&gt;</div><div class="line">            &lt;!-- Note that we&apos;re executing the Flyway plugin in the &quot;generate-sources&quot; phase --&gt;</div><div class="line">            &lt;executions&gt;</div><div class="line">                &lt;execution&gt;</div><div class="line">                    &lt;phase&gt;generate-sources&lt;/phase&gt;</div><div class="line">                    &lt;goals&gt;</div><div class="line">                        &lt;goal&gt;migrate&lt;/goal&gt;</div><div class="line">                    &lt;/goals&gt;</div><div class="line">                &lt;/execution&gt;</div><div class="line">            &lt;/executions&gt;</div><div class="line">            &lt;!-- Note that we need to prefix the db/migration path with filesystem:</div><div class="line">            to prevent Flyway from looking for our migration scripts only on the classpath --&gt;</div><div class="line">            &lt;configuration&gt;</div><div class="line">                &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</div><div class="line">                &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</div><div class="line">                &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</div><div class="line">                &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</div><div class="line">                &lt;schemas&gt;</div><div class="line">                    &lt;schema&gt;$&#123;db.schema&#125;&lt;/schema&gt;</div><div class="line">                &lt;/schemas&gt;</div><div class="line">                &lt;locations&gt;</div><div class="line">                    &lt;location&gt;filesystem:src/main/resources/db/migration&lt;/location&gt;</div><div class="line">                &lt;/locations&gt;</div><div class="line">            &lt;/configuration&gt;</div><div class="line">        &lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p>在工程：src/main/resources/db/migration目录下，没有目录文件夹时，需要先创建文件夹，放入数据库初始化SQL脚本V1_init_database.sql。注意在maven中配置的db.schema=study,表明需要使用的数据库名称是study，study需要实现不存在。</p>
<p>在执行maven clean、maven install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生产的，维护数据库版本升级时的信息，对应的在代码中，生产了三个POJO。</p>
<p>代码生成示例：<br><img src="/images/generate code.png" alt=""></p>
<h4 id="With-HikariCP"><a href="#With-HikariCP" class="headerlink" title="With HikariCP"></a>With HikariCP</h4><p>HikariCP号称是现在性能最好的JDBC连接池组件，从它现在的发展看来，其可能确实如它宣称的那样，性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP、这三者中BoneCP的性能最好，C3P0的性能现在来说确实非常差，而且很久没有更新了。HikariCP毕竟才出来不久，其性能如何，也需要实践检验，若是担心新东西有坑，推荐使用BoneCP.Spring现在也集成了HikaiCP，所以可以尝试用下它。</p>
<p>如何配置使用呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--JDBC连接池 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="简单的CURD"><a href="#简单的CURD" class="headerlink" title="简单的CURD"></a>简单的CURD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">try (ScopedContext scopedContext = new ScopedContext()) &#123;//try with resource</div><div class="line">            DSLContext create = scopedContext.getDSLContext();</div><div class="line">            //add</div><div class="line">            UserRecord userRecord = create.newRecord(USER);</div><div class="line">            userRecord.setAge((byte) 18);</div><div class="line">            userRecord.setMobile(&quot;15985236985&quot;);</div><div class="line">            userRecord.setName(&quot;赵六&quot;);</div><div class="line">            userRecord.setSex((byte) 1);</div><div class="line">            userRecord.setPassword(String.valueOf(System.nanoTime()));</div><div class="line">            userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</div><div class="line">            int insertRet = userRecord.insert();//执行insert sql</div><div class="line">            userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰</div><div class="line">            //userRecord.refresh();//从数据库重新加载该记录</div><div class="line">            log.info(&quot;insertRet:&#123;&#125;&quot;, insertRet);</div><div class="line">            log.info(&quot;自增长的uid:&#123;&#125;&quot;, userRecord.getUid());</div><div class="line"></div><div class="line">            //index</div><div class="line">            int createIndexRet = create.createIndex(&quot;user_index_mobile_unique&quot;)</div><div class="line">                    .on(USER, USER.MOBILE)</div><div class="line">                    .execute();//为手机号码字段创建唯一索引</div><div class="line">            int dropIndexRet = create.dropIndex(&quot;user_index_mobile_unique&quot;)</div><div class="line">                    .on(USER)</div><div class="line">                    .execute();//删除索引</div><div class="line">            log.info(&quot;dropIndexRet:&#123;&#125;,createIndexRet:&#123;&#125;&quot;, dropIndexRet, createIndexRet);</div><div class="line"></div><div class="line">            //select</div><div class="line">            Record record = create.select(USER.NAME, USER.UID)</div><div class="line">                    .from(USER)</div><div class="line">                    .where(USER.MOBILE.eq(&quot;15985236985&quot;))</div><div class="line">                    .limit(1)</div><div class="line">                    .fetchOne();</div><div class="line">            log.info(&quot;姓名:&#123;&#125;，uid:&#123;&#125;&quot;, record.getValue(USER.NAME), record.getValue(USER.UID));</div><div class="line"></div><div class="line">            Result&lt;UserRecord&gt; userRecords = create.selectFrom(USER)</div><div class="line">                    .where(USER.SEX.eq((byte) 1).and(USER.MOBILE.like(&quot;159%&quot;)))</div><div class="line">                    .orderBy(USER.MOBILE.asc()).limit(0, 20).fetch();</div><div class="line"></div><div class="line">            for (UserRecord ur : userRecords) &#123;</div><div class="line">                log.info(&quot;mobile:&#123;&#125;,uid:&#123;&#125;,registerTime:&#123;&#125;&quot;, ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //delete</div><div class="line">            int deleteRecordRet = create.deleteFrom(USER).where(USER.UID.eq(userRecord.getUid())).execute();</div><div class="line">            log.info(&quot;deleteRecordRet:&#123;&#125;&quot;, deleteRecordRet);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/" target="_blank" rel="external">jOOQ vs. Hibernate: When to Choose Which</a></li>
<li><a href="https://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/" target="_blank" rel="external">SQL Templating with jOOQ or MyBatis</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8之特性]]></title>
      <url>http://jianwl.com/2016/06/13/Java8%E4%B9%8B%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>Java8为Java语言、编译器、类库、开发工具与JVM带来了大量新的特性，在本教程中，我们将一一探索这些变化，并用真实的例子说明其适用场景。</p>
<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>lambda表达式是整个Java8发行版中最受期待的Java语言层面上的改变，最简单的lambda表达式可以由逗号分隔的参数列表、-&gt;符号和函数体三部分组成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//参数e的类型是由编译器推测出来的,等价于 (String e) -&gt; System.out.println(e);</div><div class="line"></div><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).forEach( e -&gt; System.out.println( e ));</div></pre></td></tr></table></figure>
<p>如果lambda的函数体比较复杂，可以将函数体放到花括号中；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).forEach( e -&gt; &#123;</div><div class="line">    System.out.println( e );</div><div class="line">    System.out.println( e );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>lambda引用类的成员或局部变量，如果变量不是final，会隐式转换为final，这样效率更高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// String separator 会被隐式转换为 final String separator</div><div class="line">String separator = &quot;,&quot;;</div><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).forEach ( e -&gt; System.out.println( e + separator ));</div></pre></td></tr></table></figure>
<p>lambda可能会返回一个值，返回值的类型是由编译器推测出来的，lambda的函数体只有一行的话，那么没有必要显式使用return语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).sort((e1, e2) -&gt; e1.compareTo(e2) );</div><div class="line"></div><div class="line">//等价于</div><div class="line">Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).sort((e1, e2) -&gt; &#123;</div><div class="line"> 	int result = e1.compareTo(e2) ;</div><div class="line">	return result;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用提供了非常有用的语法，可以直接引用已有Java类和对象的方法或构造器，与lambda联合使用。</p>
<ol>
<li>无参构造器引用，<code>Class::new</code></li>
<li>静态方法引用，<code>Class::static_method</code></li>
<li>特定类的方法引用 <code>Class::method</code></li>
<li>特定对象的方法引用<code>instance::method</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.xingren.java8;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.List;</div><div class="line">import java.util.function.Supplier;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by xingren on 14/6/16.</div><div class="line"> */</div><div class="line">public class CarDemo &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        final Car car = Car.create(Car::new); // 1</div><div class="line">        final List&lt;Car&gt; cars = Arrays.asList(car);</div><div class="line">        </div><div class="line">        cars.forEach(Car::collide); // 2</div><div class="line">        cars.forEach(Car::repair); // 3</div><div class="line">        cars.forEach(car::follow); // 4</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class Car &#123;</div><div class="line">        public static Car create( final Supplier&lt;Car&gt; supplier ) &#123;</div><div class="line">            return supplier.get();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void collide( final Car car ) &#123;</div><div class="line">            System.out.println( &quot;Collided &quot; + car.toString() );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void follow( final Car another ) &#123;</div><div class="line">            System.out.println( &quot;Following the &quot; + another.toString() );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void repair() &#123;</div><div class="line">            System.out.println( &quot;Repaired &quot; + this.toString() );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>Optional的引入是为了解决空指针异常，Optional实际上是个容器，它可以保存类型T的值，或保存Null，Optional提供了很多方法，这样我们不用显式进行空指针检测。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.xingren.java8;</div><div class="line"></div><div class="line">import java.util.Optional;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by xingren on 14/6/16.</div><div class="line"> */</div><div class="line">public class OptionalTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Optional&lt; String &gt; fullName = Optional.ofNullable( null );</div><div class="line">        System.out.println( &quot;Full Name is set? &quot; + fullName.isPresent() ); </div><div class="line">        System.out.println( &quot;Full Name: &quot; + fullName.orElseGet( () -&gt; &quot;[none]&quot; ) );</div><div class="line">        System.out.println( fullName.map( s -&gt; &quot;Hey &quot; + s + &quot;!&quot; ).orElse( &quot;Hey Stranger!&quot; ) );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>Stream API把真正的函数式编程风格引入到Java中，极大简化了集合框架的处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">package com.xingren.java8;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collection;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by xingren on 14/6/16.</div><div class="line"> */</div><div class="line">public class StreamsDemo &#123;</div><div class="line">    private enum Status &#123;</div><div class="line">        OPEN, CLOSED</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    private static final class Task &#123;</div><div class="line">        private final Status status;</div><div class="line">        private final Integer points;</div><div class="line"></div><div class="line">        Task( final Status status, final Integer points ) &#123;</div><div class="line">            this.status = status;</div><div class="line">            this.points = points;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Integer getPoints() &#123;</div><div class="line">            return points;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Status getStatus() &#123;</div><div class="line">            return status;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public String toString() &#123;</div><div class="line">            return String.format( &quot;[%s, %d]&quot;, status, points );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        final Collection&lt; Task &gt; tasks = Arrays.asList(</div><div class="line">                new Task(Status.OPEN, 5),</div><div class="line">                new Task(Status.OPEN, 13),</div><div class="line">                new Task(Status.CLOSED, 8)</div><div class="line">        );</div><div class="line"></div><div class="line">        // Calculate total points of all active tasks using sum()</div><div class="line">        final long totalPointsOfOpenTasks = tasks</div><div class="line">                .stream()</div><div class="line">                .filter( task -&gt; task.getStatus() == Status.OPEN )</div><div class="line">                .mapToInt( Task::getPoints )</div><div class="line">                .sum();</div><div class="line"></div><div class="line">        System.out.println( &quot;Total points: &quot; + totalPointsOfOpenTasks );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主函数做了哪些事？tasks集合被转化为其相应的stream表示，然后过滤掉状态为CLOSED的task；mapToInt操作通过Task::getPoints这种方式调用每个task实例的getPoints方法把Task的stream转化为Integer的stream；最后用sum函数把所有分数加起来。</p>
<p>Stream另一个亮点是，能够原生支持并行处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">final double totalPoints = tasks</div><div class="line">   .stream()</div><div class="line">   .parallel()</div><div class="line">   .map( task -&gt; task.getPoints() ) // or map( Task::getPoints ) </div><div class="line">   .reduce( 0, Integer::sum );</div><div class="line">     </div><div class="line">System.out.println( &quot;Total points (all tasks): &quot; + totalPoints );</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git命令之使用场景]]></title>
      <url>http://jianwl.com/2016/06/10/Git%E5%91%BD%E4%BB%A4%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      <content type="html"><![CDATA[<p>这篇文章主要是给自己做一个备忘，本文主要结合使用场景介绍常用的Git指令。</p>
<h3 id="如何安装Git"><a href="#如何安装Git" class="headerlink" title="如何安装Git"></a>如何安装Git</h3><ol>
<li>Mac:安装<a href="http://brew.sh" target="_blank" rel="external">Homebrew</a>: <code>brew install git</code></li>
<li>Linux(Debian): <code>apt-get install git-core</code></li>
<li>Linux(Fedora): <code>yum install git-core</code></li>
</ol>
<h3 id="如何设定Git"><a href="#如何设定Git" class="headerlink" title="如何设定Git"></a>如何设定Git</h3><ol>
<li>Mac: <a href="https://help.github.com/articles/set-up-git/#platform-mac" target="_blank" rel="external">Set Up Git on Mac</a></li>
<li>Linux:<a href="https://help.github.com/articles/set-up-git/#platform-linux" target="_blank" rel="external">Set Up Git on Linux</a></li>
</ol>
<h3 id="如何创建一个Git-Repository"><a href="#如何创建一个Git-Repository" class="headerlink" title="如何创建一个Git Repository"></a>如何创建一个Git Repository</h3><ol>
<li>在本机任意路径下使用<code>git init</code> 初始化一个新的Git repo</li>
<li>使用<code>git clone</code> 拷贝远程机器上的项目到本机</li>
</ol>
<h3 id="如何将文件加入暂存区-Stage"><a href="#如何将文件加入暂存区-Stage" class="headerlink" title="如何将文件加入暂存区(Stage)"></a>如何将文件加入暂存区(Stage)</h3><ol>
<li>使用<code>git add</code>将新建文件加入Stage.</li>
<li><code>git add .</code>会将所有修改过的文件加入Stage</li>
</ol>
<h3 id="如何将文件从暂存区中移除（取消add）"><a href="#如何将文件从暂存区中移除（取消add）" class="headerlink" title="如何将文件从暂存区中移除（取消add）"></a>如何将文件从暂存区中移除（取消add）</h3><ol>
<li><code>git reset HEAD &quot;文件名&quot;</code></li>
</ol>
<h3 id="如何将暂存区文件提交到本地工作区"><a href="#如何将暂存区文件提交到本地工作区" class="headerlink" title="如何将暂存区文件提交到本地工作区"></a>如何将暂存区文件提交到本地工作区</h3><ol>
<li>使用<code>git commit</code> 会将暂存区中的文件添加到本地工作区</li>
<li><code>git commit -m &quot;commit信息&quot;</code> 使用commit的前提是，文件已经放到暂存区了。</li>
<li><code>git commit -am &quot;commit信息&quot;</code> 等同于先<code>git add .</code>后<code>git commit -m &quot;commit信息&quot;</code></li>
</ol>
<h3 id="如何修改-取消上一次的commit"><a href="#如何修改-取消上一次的commit" class="headerlink" title="如何修改/取消上一次的commit"></a>如何修改/取消上一次的commit</h3><ol>
<li><code>git commit --amend</code>修改上一次的commit信息</li>
<li><code>git reset HEAD^ --soft</code>取消刚刚的commit，但保留修改过的文件(<code>-- soft</code>保留暂存区和工作区不变)</li>
<li><code>git reset HEAD^ --hard</code>取消刚刚的commit，回到上一次commit的干净状态。(<code>--hard</code>重置暂存区和工作区) </li>
</ol>
<h3 id="分支基本操作-branch"><a href="#分支基本操作-branch" class="headerlink" title="分支基本操作(branch)"></a>分支基本操作(branch)</h3><ol>
<li><code>git branch</code>列出所有本地分支</li>
<li><code>git branch -r</code>列出所有远端分支</li>
<li><code>git branch -a</code>列出所有本地及远端分支</li>
<li><code>git branch &quot;新分支名称&quot;</code>创建新的本地分支</li>
<li><code>git checkout -b &quot;新分支名称&quot;</code>创建新分支并切换到该分支(仅仅创建一个分支，不会改变stage文件，也不会改变当前工作目录)</li>
<li><code>git checkout -b develop origin/develop</code>下载远程develop分支到本地develop分支，并切换到本地develop分支</li>
<li><code>git branch -d &quot;已存在的分支名称&quot;</code>删除本地分支</li>
<li><code>git push origin :远端分支</code>删除远端分支</li>
<li><code>git checkout “分支名称”</code>切换到另一个branch</li>
</ol>
<h3 id="远端操作-remote"><a href="#远端操作-remote" class="headerlink" title="远端操作(remote)"></a>远端操作(remote)</h3><ol>
<li><code>git push origin :远端分支</code> 删除远端分支</li>
<li><code>git pull origin 远端分支</code> 下载远端分支并合并到当前目录所在分支</li>
<li><code>git push origin 远端分支</code> 将本地的分支上传到远端</li>
</ol>
<h3 id="合并操作-merge"><a href="#合并操作-merge" class="headerlink" title="合并操作(merge)"></a>合并操作(merge)</h3><ol>
<li><code>git merge &quot;本地分支&quot;</code>合并指定分支到目前的分支</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>代码改动了，我想全部重来，如何快速回到干净的目录。<code>git reset --hard</code>这个指令会清除所有最近一次commit不同的修改。</li>
<li>merge过程中发生冲突，我想放弃merge，要如何取消merge？<code>git reset --hard</code>可以取消这次merge</li>
<li>如何取消这次merge会到merge前的状态？<code>git reset --hard ORIG_HEAD</code>这个指令会取消最近一次成功的merge以及所有你在这次merge后所做的修改。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后，梳理一下整个流程。</p>
<pre><code>1.git init //初始化本地仓库
2.git clone git@git.oschina.net:shuangziliuyun/Hexo.git //拷贝远程项目到本地，这里只是举个栗子，把项目地址改成自己的即可。
3.touch README.md //新建文件
4.git add . //提交新建文件到暂存区(Stage)
5.git commit -m &quot;新增README.md文件&quot;//将暂存区的文件提交到工作区
6.git pull origin master //下载远端主分支，并合并到本地主分支。
7.git push origin master //提交本地分支到远端
</code></pre><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>1.在push前必须pull并合并代码，以便在最新的代码上进行开发。<br>ß</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://docs.google.com/presentation/d/1JbKIKOO7szXR5TnEVyn5JFGAimgq4OXTyteX5aRstYU/edit?pref=2&amp;pli=1#slide=id.g1e072dff_3_57" target="_blank" rel="external">Git版本控制</a></li>
<li><a href="http://gogojimmy.net/2012/02/29/git-scenario/" target="_blank" rel="external">Git情景剧</a></li>
<li><a href="https://git-scm.com/book/zh/v1/Git-分支-远程分支" target="_blank" rel="external">Git 分支 - 远程分支</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql for Mac 安装和基本操作]]></title>
      <url>http://jianwl.com/2016/06/09/Mysql-for-Mac-%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h3><p><a href="http://pan.baidu.com/s/1kVNb7bp" target="_blank" rel="external">mysql for mac 百度云下载链接</a></p>
<h3 id="mysql启动"><a href="#mysql启动" class="headerlink" title="mysql启动"></a>mysql启动</h3><p><img src="/images/mysql启动.png" alt="image"></p>
<h3 id="mysql关闭"><a href="#mysql关闭" class="headerlink" title="mysql关闭"></a>mysql关闭</h3><p><img src="/images/mysql关闭.png" alt="image"></p>
<h3 id="修改初始密码"><a href="#修改初始密码" class="headerlink" title="修改初始密码"></a>修改初始密码</h3><pre><code>／usr/local/mysql/bin/mysqladmin -u root password &quot;新密码&quot;
</code></pre><h3 id="卸载mysql"><a href="#卸载mysql" class="headerlink" title="卸载mysql"></a>卸载mysql</h3><pre><code>sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
vim /etc/hostconfig  (and removed the line MYSQLCOM=-YES-)
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
</code></pre><h3 id="将mysql-server的路径添加到PATH路径下"><a href="#将mysql-server的路径添加到PATH路径下" class="headerlink" title="将mysql.server的路径添加到PATH路径下"></a>将mysql.server的路径添加到PATH路径下</h3><pre><code>vi /etc/bashrc
# 在bashrc文件下增加以下内容
export PATH=/usr/local/mysql/support-files:$PATH
</code></pre><h3 id="保存只读文件bashrc"><a href="#保存只读文件bashrc" class="headerlink" title="保存只读文件bashrc"></a>保存只读文件bashrc</h3><p>向只读文件中添加内容，用wq保存出现以下错误</p>
<pre><code>E45: &apos;readonly&apos; option is set (add ! to override)
</code></pre><p>解决的方法：</p>
<pre><code>:w !sudo tee %

＃解释
:w – write
!sudo – call shell sudo command
tee – the output of write (:w) command is redirected using tee
% – current file name
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP之重定向和请求转发]]></title>
      <url>http://jianwl.com/2016/06/05/HTTP%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/</url>
      <content type="html"><![CDATA[<h6 id="重定向、请求转发是什么？举例说明"><a href="#重定向、请求转发是什么？举例说明" class="headerlink" title="重定向、请求转发是什么？举例说明"></a>重定向、请求转发是什么？举例说明</h6><p>假设你去办执照。</p>
<p><strong>重定向：</strong>你先去了A局，A局的人说：”这事不归我们管，去B局”，然后你就从A退了回来，自己乘车去了B局。</p>
<p><strong>请求转发：</strong>你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B局的人，让他们办好后，送过来。</p>
<p>重定向是客户端行为，其实是两次Request请求，第一次，客户端Request A，服务器响应，并Response回来，告诉浏览器，你应该去找B。这个时候可以看到浏览器地址变了。重定向可以访问自己Web应用以外的资源。在重定向的过程中，传输的信息会被丢失。</p>
<p>请求转发是服务器行为，服务器内部把一个Request的处理权，转发给同一个Web容器下的其他URL。(注意，不能转发到其他的Web容器的资源)对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B、C、D，传输的信息不会丢失。</p>
<h6 id="Servlet中调用请求转发和重定向"><a href="#Servlet中调用请求转发和重定向" class="headerlink" title="Servlet中调用请求转发和重定向"></a>Servlet中调用请求转发和重定向</h6><ul>
<li>请求转发到welcome.jsp页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getRequestDispatcher(&quot;welcome.jsp&quot;).forward(request,response);</div></pre></td></tr></table></figure>
<ul>
<li>重定向到success.jsp页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.sendRedirect(&quot;success.jsp&quot;);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Simplest SpringMVC教程]]></title>
      <url>http://jianwl.com/2016/06/05/Simplest-SpringMVC%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h6 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h6><p>Spring MVC框架已经近1年没有接触了，以前的基础也忘的差不多了。既然如此，那就忘去过去所学Spring MVC的知识，一切重新学起。创建第一个Spring MVC项目，网上有很多教程，但感觉都过于复杂，也不够简单明了。</p>
<h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><p>IntelliJ IDEA – (IDE)<br>Maven – (项目Jar包管理构建工具 3.2.x版本)<br>Tomcat – (Web容器 7.x版本)</p>
<h6 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h6><p>1、创建Maven项目<br><img src="/images/创建maven项目.png" alt=""><br><img src="/images/创建maven项目02.png" alt=""><br><img src="/images/创建maven项目03.png" alt=""><br><img src="/images/maven配置.png" alt=""><br><img src="/images/创建maven项目04.png" alt=""><br>2、配置pom.xml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">  &lt;groupId&gt;com.youzu&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;springmvc&lt;/artifactId&gt;</div><div class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class="line">  &lt;name&gt;mvc-demo Maven Webapp&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">  &lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;1.2&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;commons-logging&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;1.1.3&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div><div class="line"></div><div class="line">  &lt;build&gt;</div><div class="line">      &lt;plugins&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">          &lt;configuration&gt;</div><div class="line">            &lt;source&gt;1.7&lt;/source&gt;</div><div class="line">            &lt;target&gt;1.7&lt;/target&gt;</div><div class="line">          &lt;/configuration&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">      &lt;/plugins&gt;</div><div class="line">  &lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>3、新建Spring配置文件<code>/webapp/WEB-INF/springmvc-servlet.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;</div><div class="line">        http://www.springframework.org/schema/beans     </div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/mvc </div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</div><div class="line">        http://www.springframework.org/schema/context </div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</div><div class="line"> </div><div class="line">	&lt;context:component-scan base-package=&quot;com.youzu.controller&quot; /&gt;</div><div class="line"> </div><div class="line">	&lt;bean id=&quot;viewResolver&quot;</div><div class="line">		class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt;</div><div class="line">		&lt;property name=&quot;viewClass&quot;</div><div class="line">			value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;</div><div class="line">		&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</div><div class="line">		&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>在springmvc-servlet.xml配置文件中，我们定义了<code>&lt;context:component-scan&gt;</code>,这个配置允许spring扫描<code>com.youzu.controller</code>这个目录和其子目录下的所有注解,将注解类注册为Bean。同时定义了视图解析类viewResolver，这个类将会解析视图名(增加前缀<code>/WEB-INF/jsp/</code>和后缀<code>.jsp</code>)。<br>4、配置web.xml文件：webapp/WEB-INF/web.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; version=&quot;3.0&quot;&gt;</div><div class="line">    &lt;display-name&gt;spring mvc&lt;/display-name&gt;</div><div class="line">    &lt;welcome-file-list&gt;</div><div class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">    &lt;/welcome-file-list&gt;</div><div class="line"></div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;</div><div class="line">            org.springframework.web.servlet.DispatcherServlet</div><div class="line">        &lt;/servlet-class&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>特别注意在web.xml中定义了servlet-name,当DispatcherServlet初始化时，它将自动加载WEB-INF文件夹下文件名为[servlet-name]-servlet.xml的文件。即：本例中步骤3定义的springmvc-servlet.xml文件<br>5、创建StudentAction.class文件<code>com.youzu.controller.StudentAction.class</code></p>
<ul>
<li>在main文件夹下，新建一个名为“java”的文件夹<br><img src="/images/创建java文件夹.png" alt=""></li>
<li>将java文件夹设为源文件目录<br><img src="/images/java设为源文件夹.png" alt=""></li>
<li>在java文件夹下创建com.youzu.controller文件夹<br><img src="/images/创建文件夹.png" alt=""></li>
<li>创建类StudentAction.class</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.youzu.controller;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line">/**</div><div class="line"> * User: jianwl</div><div class="line"> * Date: 2016/6/5</div><div class="line"> * Time: 16:29</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">public class StudentAction &#123;</div><div class="line">    @RequestMapping(&quot;/info&quot;)</div><div class="line">    public ModelAndView info()&#123;</div><div class="line">        String stuInfo = &quot;my name is zhangsan,i am 13 years old,i am come from china&quot;;</div><div class="line">        return new ModelAndView(&quot;info&quot;,&quot;stuInfo&quot;,stuInfo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Controller的作用是，当spring扫描文件夹时，会将StudentAction视为Controller Bean类。<br>@RequestMapping的作用是，告知spring，当请求访问的URL地址以/info开头时，该控制器将会执行该请求。<br>6、创建info.jsp文件<code>/webapp/WEB-INF/jsp/info.jsp</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Spring MVC 教程&lt;/title&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">        body &#123;</div><div class="line">            background-image: url(&apos;http://crunchify.com/bg.png&apos;);</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">$&#123;stuInfo&#125;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>7、maven打包<br><img src="/images/maven打包.png" alt=""><br>8、配置Tomcat</p>
<ul>
<li>编辑配置<br><img src="/images/配置tomcat01.png" alt=""></li>
<li>新增本地Tomcat配置<br><img src="/images/配置tomcat02.png" alt=""></li>
<li>Tomcat配置详情<br><img src="/images/配置tomcat03.png" alt=""></li>
<li>在Tomcat中添加需要发布的war包<br><img src="/images/配置tomcat04.png" alt=""></li>
<li>运行Tomcat<br><img src="/images/启动tomcat.png" alt=""></li>
</ul>
<p>9、浏览器成功访问/info地址：<code>localhost:8080/info</code><br><img src="/images/springmvc成功访问.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客的云端备份和迁移]]></title>
      <url>http://jianwl.com/2016/06/04/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BA%91%E7%AB%AF%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<h6 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h6><p>使用Hexo写博客，在一台电脑上写博客，更新博客倒没什么问题，可是如果你要换一台电脑然后更新博客发现就比较麻烦了。网上类似的源码迁移也有提到，不过我个人感觉操作过于复杂，我自己用了一个比较简单的方法，用Oschina的代码托管做了一个Hexo的源码的备份。下次你要在其他的电脑上写博客也很简单。利用Git实现同步源码，当然这其中需要相关的Git和Hexo环境配置。</p>
<h6 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h6><p>1、Oschina注册账号，建立私有代码库。为何选用Oschina而不是Github做代码托管呢，因为Github上建立私有库不是免费的，而Oschina没有限制。(备忘：Oschina git上注册的邮箱：jianwl999@gmail.com)<br>2、在你的电脑上创建一个文件夹，随意命名。然后git init初始化git环境，创建仓库。git clone你的Oschina上的分支，特别注意：在Oschina创建私有库的时候，最少要添加一个README文件，否则空的仓库同步过程会有问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git clone git@git.oschina.net:shuangziliuyun/Hexo.git</div><div class="line">touch README.md</div><div class="line">git add -A</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">git pull origin master</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<p>3、将你的Hexo源码拷贝到该文件夹下，public不用拷贝，这个是由Hexo编译自动生成的。并在Git bash客户端中执行以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git status   //查看本地代码库和云端代码库的差异</div><div class="line">git add -A //添加修改的文件到本地分支，跟踪修改</div><div class="line">git commit -m &quot;commit hexo source to oschina&quot; //提交跟踪修改的文件到本地仓库分支</div><div class="line">git pull origin master //从云端代码库拉取最新的分支代码</div><div class="line">git push origin master //提交本地仓库的代码到云端仓库</div></pre></td></tr></table></figure></p>
<p>4、提交代码成功后表示你备份已经完成了，现在假设你在另外一个电脑上要编辑hexo博客并部署到github上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1、在本机上创建一个文件夹</div><div class="line">2、git init</div><div class="line">3、git clone git@git.oschina.net:shuangziliuyun/Hexo.git</div><div class="line">4、安装Node.js，[下载链接](http://pan.baidu.com/s/1pK9fHR9)</div><div class="line">5、在Hexo文件下，执行npm install hexo</div><div class="line">6、npm install</div><div class="line">7、npm install hexo-deployer-git (注意，不需要hexo init这条指令)</div></pre></td></tr></table></figure></p>
<p>5、至此完成了Hexo博客的迁移，可以在另一台电脑上的Hexo目录下，对博客进行更新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;新文章&quot;</div><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<h6 id="遇见的坑"><a href="#遇见的坑" class="headerlink" title="遇见的坑"></a>遇见的坑</h6><p>在执行 hexo deploy发布指令时，总是报以下的错误。将发布项目的地址改为ssh的地址之后，仍旧报错。最后发现是Node.js版本不一致造成的。原先那台电脑上安装的node.js版本，和要迁移到的这电脑上的node.js版本不一致，最后同步以下版本，解决了这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</div><div class="line">at ChildProcess.&lt;anonymous&gt; (D:\software\Git\Hexo\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:42:17)</div><div class="line">    at ChildProcess.emit (events.js:110:17)</div><div class="line">    at maybeClose (child_process.js:1015:16)</div><div class="line">    at Socket.&lt;anonymous&gt; (child_process.js:1183:11)</div><div class="line">    at Socket.emit (events.js:107:17)</div><div class="line">    at Pipe.close (net.js:485:12)</div></pre></td></tr></table></figure></p>
<p>参考资料：<br>1、<a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">使用hexo，如果换了电脑怎么更新博客？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PlayFramework调试]]></title>
      <url>http://jianwl.com/2016/05/31/PlayFramework%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>在Intellij Idea的IDE下，调试PlayFramework的步骤:</p>
<ul>
<li><p>启动play debug模式，监听端口9999<br><img src="/images/play调试.jpg" alt=""></p>
</li>
<li><p>Intellij Idea新建Remote监听<br><img src="/images/idea创建监听端口.jpg" alt=""></p>
</li>
<li><p>Intellij Idea创建远程Socket监听<br><img src="/images/Idea创建监听socket连接端口.png" alt=""></p>
</li>
<li><p>运行play<br><img src="/images/运行play.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[翻墙教程之VPS搭建Shadowsocks代理]]></title>
      <url>http://jianwl.com/2016/05/20/%E7%BF%BB%E5%A2%99%E6%95%99%E7%A8%8B%E4%B9%8BVPS%E6%90%AD%E5%BB%BAShadowsocks%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>做为一个开发人员，具备翻墙的能力，是最基本的；最近打算在VPS上搭建一个shadowsocks代理来实现翻墙，将操作步骤记录下来，备忘。</p>
<h6 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买VPS</h6><p>到vultr的<a href="https://www.vultr.com/freetrial/" target="_blank" rel="external">官网</a>注册账户，目前注册的新用户给你$50,用2个月，超给力的。需要注意的是，你得有支持外币支付的信用卡，并且这个优惠活动不支持paypal，反正我用民生银行的VISA信用卡是没有注册成功，最后采用了paypal的方式支付的。</p>
<h6 id="vps部署"><a href="#vps部署" class="headerlink" title="vps部署"></a>vps部署</h6><p>选择日本或者美国西海岸的服务器，速度相对比较快，我选的是日本的。操作系统是CentOS 6 x64,选择的硬件是$5/month的；以下截图是购买成功之后的VPS服务器实例;<br><img src="/images/vultr服务器.png" alt=""></p>
<h6 id="下载并安装Xshell5"><a href="#下载并安装Xshell5" class="headerlink" title="下载并安装Xshell5"></a>下载并安装Xshell5</h6><p><a href="http://pan.baidu.com/s/1eRRETaU" target="_blank" rel="external">Xshell5百度云下载链接</a></p>
<h6 id="Xshell5连接vps"><a href="#Xshell5连接vps" class="headerlink" title="Xshell5连接vps"></a>Xshell5连接vps</h6><p><img src="/images/vultr服务器详情.png" alt="vps的详情"><br>打开Xshell5,新建会话，输入IP地址,点击确定<br><img src="/images/xshell连接vps.png" alt=""><br>输入用户名<br><img src="/images/vultr输入用户名.png" alt=""><br>输入密码<br><img src="/images/vultr输入密码.png" alt=""><br>xshell5成功登陆vps服务器<br><img src="/images/xshell成功登陆vps.png" alt=""></p>
<h6 id="部署shadowsocks"><a href="#部署shadowsocks" class="headerlink" title="部署shadowsocks"></a>部署shadowsocks</h6><p>1、用Shadowsocks Python版一键安装脚本,<a href="https://teddysun.com/342.html" target="_blank" rel="external">原文链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</div><div class="line">chmod +x shadowsocks.sh</div><div class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</div></pre></td></tr></table></figure></p>
<p>执行后需要输入密码(shadowsocks的密码)<br><img src="/images/ss01.png" alt=""><br>2、输入shadowsocks的端口,我喜欢用8388<br><img src="/images/ss输入端口.png" alt=""><br>3、看到这句时，按任意键(比如回车)<br><img src="/images/ss成功.png" alt=""><br>4、等待安装结束，出现下图就表示安装成功了.<br><img src="/images/ss安装成功.png" alt=""></p>
<h6 id="开启TFO-TCP-Fast-Open"><a href="#开启TFO-TCP-Fast-Open" class="headerlink" title="开启TFO(TCP Fast Open)"></a>开启TFO(TCP Fast Open)</h6><p>编辑rc.local<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local</div></pre></td></tr></table></figure></p>
<p>在rc.local最后一行添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen</div></pre></td></tr></table></figure></p>
<p>编辑sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysctl.conf</div></pre></td></tr></table></figure></p>
<p>在sysctl.conf中输入并保存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.tcp_fastopen = 3</div></pre></td></tr></table></figure></p>
<p>打开ss配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure></p>
<p>修改fast_open的值为true并保存。<br>重启shadowsocks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/shadowsocks restart</div></pre></td></tr></table></figure></p>
<h6 id="windows端运行shadowsocks客户端"><a href="#windows端运行shadowsocks客户端" class="headerlink" title="windows端运行shadowsocks客户端"></a>windows端运行shadowsocks客户端</h6><p><a href="http://pan.baidu.com/s/1hrFz8uo" target="_blank" rel="external">shadowsocks客户端百度云下载链接</a><br>解压后运行shadowsocks.exe,并配置shadowsocks<br><img src="/images/ss客户端配置.png" alt=""></p>
<h6 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h6><p>使用代理，虽然可以访问国外的网站，但网速会比较慢。理想的情况下，我们想要在访问国外网站的时候使用代理，访问国内的网站的时候不使用代理,保证效率最大化。</p>
<p>我们使用SwitchyOmega来消除shadowsocks全局代理的副作用，<a href="http://pan.baidu.com/s/1mhX8r7i" target="_blank" rel="external">SwitchyOmega</a>是Chrome下非常好用的代理管理插件(.crx是插件,.bak是备份文件);</p>
<h6 id="安装SwitchyOmega"><a href="#安装SwitchyOmega" class="headerlink" title="安装SwitchyOmega"></a>安装SwitchyOmega</h6><p>将SwitchyOmega.crx插件直接拖到扩展程序中，即可实现安装<br><img src="/images/安装SwitchyOmega.png" alt=""></p>
<h6 id="配置SwitchyOmega"><a href="#配置SwitchyOmega" class="headerlink" title="配置SwitchyOmega"></a>配置SwitchyOmega</h6><p><img src="/images/配置SwitchyOmega01.png" alt=""><br><img src="/images/配置SwitchyOmega02.png" alt=""><br><img src="/images/配置SwitchyOmega03.png" alt=""><br><img src="/images/配置SwitchyOmega04.png" alt=""><br><img src="/images/配置SwitchyOmega05.png" alt=""><br>至此，把Shadowsocks客户端的模式改为了自动模式，<strong>通过Chrome访问的网址都会经过代理服务器;通过其他浏览器如：FireFox访问的网址则不经过代理服务器</strong>;说明了局部代理成功。</p>
<h6 id="Shadowsocks原理"><a href="#Shadowsocks原理" class="headerlink" title="Shadowsocks原理"></a>Shadowsocks原理</h6><p>简单理解的话，Shadowsocks是将以前通过SSH创建的Socks5协议拆分成Server端和Client端，下面这个原理图能简单介绍其翻墙原理，基本上和利用SSH tunnel大致类似：<br><img src="/images/shadowsocks原理.jpg" alt=""><br>PC客户端发出请求基于Socks5协议跟SS-Local端进行通讯，由于这个SS-Local一般是本机或路由器等局域网的其他机器，不经过GFW,所以解决GFW通过特征分析进行干扰的问题。</p>
<p>SS-Local和SS-Server两端通过多种可选的加密方法进行通讯，经过GFW的时候因为是常规的TCP包，没有明显特征码GFW也无法对通讯进行解密，因此通讯放行。</p>
<p>SS-Server将收到的加密数据进行解密，还原初始请求，在发送用户需要访问的服务网站，响应原路返回SS-04,返回途中依然使用了加密，使得流量是普通的TCP包，并成功穿过GFW防火墙。</p>
<p>因此，Shadowsocks的优点在于它解决了GFW通过分析流量特征从而干扰的问题，这是它优于SSH和VPN的地方。</p>
<p>参考资料：<br>1、<a href="http://mpc2008cn.github.io/2015/10/22/vps/" target="_blank" rel="external">Vultr的vps搭建shadowsocks翻墙</a><br>2、<a href="https://teddysun.com/342.html" target="_blank" rel="external">Shadowsocks Python版一键安装脚本</a><br>3、<a href="http://www.shadowsocks.co.uk/shadowsocks-tcp-fast-open/" target="_blank" rel="external">Shadowsocks设置:ShadowSocks 服务器开启TCP Fast Open</a><br>4、<a href="http://shadowsocks.blogspot.tw/" target="_blank" rel="external">shadowsocks搭建教程</a><br>5、<a href="http://www.jianshu.com/p/37ef0b9ecc08" target="_blank" rel="external">shadowsocks配合SwitchyOmega科学上网</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP报文详解]]></title>
      <url>http://jianwl.com/2016/05/17/HTTP%E6%8A%A5%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h6 id="Http协议通用首部字段："><a href="#Http协议通用首部字段：" class="headerlink" title="Http协议通用首部字段："></a>Http协议通用首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cache-Control  控制缓存行为</div><div class="line">Connection 控制不再转发给代理的首部字段、管理持久连接</div><div class="line">Date 创建报文的日期时间</div><div class="line">Pragma 报文指令</div><div class="line">Trailer 报文末端的首部一览</div><div class="line">Transfer-Encoding 指定报文主体的传输编码方式</div><div class="line">Upgrade 升级为其他协议</div><div class="line">Via 代理服务器相关信息</div><div class="line">Warning 错误通知</div></pre></td></tr></table></figure>
<h6 id="Http请求首部字段："><a href="#Http请求首部字段：" class="headerlink" title="Http请求首部字段："></a>Http请求首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Accept 用户代理可处理的媒体类型</div><div class="line">Accept-Charset 优先的字符集</div><div class="line">Accept-Encoding 优先的内容编码</div><div class="line">Accept-Language 优先的语言</div><div class="line">Authrization Web认证信息</div><div class="line">Expect 期待服务器的特定行为</div><div class="line">From 用户的电子邮箱地址</div><div class="line">Host 请求资源所在服务器</div><div class="line">If-Match 比较实体标记(Etag)</div><div class="line">If-Modified-Since 比较资源的更新时间</div><div class="line">if-None-Match 比较实体标记(与If-Match相反)</div><div class="line">If-Range 资源未更新时发送实体Byte的范围请求</div><div class="line">If-Unmodified-Since 比较资源的更新时间</div><div class="line">Max-forwards 最大传输逐跳数</div><div class="line">Proxy-Authorization 代理服务器要求客户端的认证信息</div><div class="line">Range 实体的字节范围请求</div><div class="line">Referer 对请求中的URI的原始获取方</div><div class="line">TE 传输编码的优先级</div><div class="line">User-Agent HTTP客户端程序的信息</div><div class="line">Cookie 服务器接收到的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="Http响应首部字段："><a href="#Http响应首部字段：" class="headerlink" title="Http响应首部字段："></a>Http响应首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Accept-Ranges 是否接受字节范围</div><div class="line">Age 推算资源创建经过时间</div><div class="line">Etag 资源匹配信息</div><div class="line">Location 令客户端重定向至指定URI</div><div class="line">Proxy-Authenticate 代理服务器对客户端的认证信息</div><div class="line">Retry-After 对再次发起请求的时机要求</div><div class="line">Server HTTP服务器的安装信息</div><div class="line">Vary 代理服务器缓存的管理信息</div><div class="line">WWW-Authenticate 服务器对客户端的认证信息</div><div class="line">Set-Cookie 开始状态管理所使用的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="实体首部字段："><a href="#实体首部字段：" class="headerlink" title="实体首部字段："></a>实体首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Allow 资源可支持的HTTP方法</div><div class="line">Content-Encoding 实体主体适用的编码方式</div><div class="line">Content-Length 实体主体的自然语言</div><div class="line">Content-Location 替代对应资源的URI</div><div class="line">Content-MD5 实体主体的报文摘要</div><div class="line">Content-Range 实体主体的位置范围</div><div class="line">Content-Type 实体主体的媒体类型</div><div class="line">Expires 实体主体的过期时间</div><div class="line">Last-Modified 资源的最后修改时间</div></pre></td></tr></table></figure>
<h6 id="为Cookie服务的首部字段"><a href="#为Cookie服务的首部字段" class="headerlink" title="为Cookie服务的首部字段"></a>为Cookie服务的首部字段</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set-Cookie</div><div class="line">Cookie</div></pre></td></tr></table></figure>
<h6 id="请求和响应报文的组成"><a href="#请求和响应报文的组成" class="headerlink" title="请求和响应报文的组成"></a>请求和响应报文的组成</h6><p>请求报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">请求报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：请求行+ 请求首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
<p>响应报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">响应报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：状态行+ 响应首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP请求报文详解]]></title>
      <url>http://jianwl.com/2016/05/17/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h6 id="Http协议通用首部字段："><a href="#Http协议通用首部字段：" class="headerlink" title="Http协议通用首部字段："></a>Http协议通用首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cache-Control  控制缓存行为</div><div class="line">Connection 控制不再转发给代理的首部字段、管理持久连接</div><div class="line">Date 创建报文的日期时间</div><div class="line">Pragma 报文指令</div><div class="line">Trailer 报文末端的首部一览</div><div class="line">Transfer-Encoding 指定报文主体的传输编码方式</div><div class="line">Upgrade 升级为其他协议</div><div class="line">Via 代理服务器相关信息</div><div class="line">Warning 错误通知</div></pre></td></tr></table></figure>
<h6 id="Http请求首部字段："><a href="#Http请求首部字段：" class="headerlink" title="Http请求首部字段："></a>Http请求首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Accept 用户代理可处理的媒体类型</div><div class="line">Accept-Charset 优先的字符集</div><div class="line">Accept-Encoding 优先的内容编码</div><div class="line">Accept-Language 优先的语言</div><div class="line">Authrization Web认证信息</div><div class="line">Expect 期待服务器的特定行为</div><div class="line">From 用户的电子邮箱地址</div><div class="line">Host 请求资源所在服务器</div><div class="line">If-Match 比较实体标记(Etag)</div><div class="line">If-Modified-Since 比较资源的更新时间</div><div class="line">if-None-Match 比较实体标记(与If-Match相反)</div><div class="line">If-Range 资源未更新时发送实体Byte的范围请求</div><div class="line">If-Unmodified-Since 比较资源的更新时间</div><div class="line">Max-forwards 最大传输逐跳数</div><div class="line">Proxy-Authorization 代理服务器要求客户端的认证信息</div><div class="line">Range 实体的字节范围请求</div><div class="line">Referer 对请求中的URI的原始获取方</div><div class="line">TE 传输编码的优先级</div><div class="line">User-Agent HTTP客户端程序的信息</div><div class="line">Cookie 服务器接收到的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="Http响应首部字段："><a href="#Http响应首部字段：" class="headerlink" title="Http响应首部字段："></a>Http响应首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Accept-Ranges 是否接受字节范围</div><div class="line">Age 推算资源创建经过时间</div><div class="line">Etag 资源匹配信息</div><div class="line">Location 令客户端重定向至指定URI</div><div class="line">Proxy-Authenticate 代理服务器对客户端的认证信息</div><div class="line">Retry-After 对再次发起请求的时机要求</div><div class="line">Server HTTP服务器的安装信息</div><div class="line">Vary 代理服务器缓存的管理信息</div><div class="line">WWW-Authenticate 服务器对客户端的认证信息</div><div class="line">Set-Cookie 开始状态管理所使用的Cookie信息</div></pre></td></tr></table></figure>
<h6 id="实体首部字段："><a href="#实体首部字段：" class="headerlink" title="实体首部字段："></a>实体首部字段：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Allow 资源可支持的HTTP方法</div><div class="line">Content-Encoding 实体主体适用的编码方式</div><div class="line">Content-Length 实体主体的自然语言</div><div class="line">Content-Location 替代对应资源的URI</div><div class="line">Content-MD5 实体主体的报文摘要</div><div class="line">Content-Range 实体主体的位置范围</div><div class="line">Content-Type 实体主体的媒体类型</div><div class="line">Expires 实体主体的过期时间</div><div class="line">Last-Modified 资源的最后修改时间</div></pre></td></tr></table></figure>
<h6 id="为Cookie服务的首部字段"><a href="#为Cookie服务的首部字段" class="headerlink" title="为Cookie服务的首部字段"></a>为Cookie服务的首部字段</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set-Cookie</div><div class="line">Cookie</div></pre></td></tr></table></figure>
<h6 id="请求和响应报文的组成"><a href="#请求和响应报文的组成" class="headerlink" title="请求和响应报文的组成"></a>请求和响应报文的组成</h6><p>请求报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">请求报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：请求行+ 请求首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
<p>响应报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">响应报文由报文首部+空行（CR+LF）+报文主体构成；</div><div class="line">报文首部由：状态行+ 响应首部字段+通用首部字段+实体首部字段+其他</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL存储引擎]]></title>
      <url>http://jianwl.com/2016/05/17/MYSQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<p>MySQL支持很多存储引擎，常用的有InnoDB、MyISAM存储引擎。</p>
<h3 id="InnoDB概述"><a href="#InnoDB概述" class="headerlink" title="InnoDB概述"></a>InnoDB概述</h3><p><strong>事务</strong><br>InnoDB是MySQL默认事务型引擎，采用MVCC来支持高并发，并且实现了四个标准的隔离级别，其默认级别是REPAEATABLE READ(可重复读)，并且通过间隙锁(next-key locking)策略防止幻读的出现，间隙锁使得InnoDB不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定，以防止幻影行的插入。</p>
<p><strong>索引</strong><br>InnoDB表是基于聚簇索引建立的，与MySQL其他存储引擎有很大的不同，聚簇索引对主键查询有很高的性能，不过他的二级索引(secondary index,非主键索引)中必须包含主键列，所以主键列很大的话，其他的所有索引都会很大。</p>
<p><strong>其他</strong></p>
<ul>
<li>从磁盘读取数据时，采用的可预测预读，能够自动在内存中创建hash索引以加速读操作的自适应哈希索引。</li>
<li>支持热备份，MySQL其他存储引擎不支持。</li>
</ul>
<h3 id="InnoDB适用场景"><a href="#InnoDB适用场景" class="headerlink" title="InnoDB适用场景"></a>InnoDB适用场景</h3><p>InnoDB具有较好的事务支持，其行级锁定机制对高并发有很好的适应能力，但需要确保查询是通过索引来完成。能够很好地适应于数据更新较为频繁的场景，但是对数据一致性要求较高，如果硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，尽可能减少磁盘IO。</p>
<h3 id="MyISAM概述"><a href="#MyISAM概述" class="headerlink" title="MyISAM概述"></a>MyISAM概述</h3><p><strong>特性</strong><br>MyISAM提供了大量的特性包括全文索引、压缩、空间函数(GIS)等，但是….MyISAM不支持事务和行级锁，还有一个毫无疑问的缺陷就是崩溃后无法恢复。</p>
<h3 id="MyISAM适用场景"><a href="#MyISAM适用场景" class="headerlink" title="MyISAM适用场景"></a>MyISAM适用场景</h3><p>MyISAM适用于不需要事务支持，并发性相对较低，数据修改相对较少的场景，一般这类的系统会以读为主，对数据一致性要求不是很高</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL存储引擎优化]]></title>
      <url>http://jianwl.com/2016/05/17/MYSQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h5 id="MySQL常用的搜索引擎"><a href="#MySQL常用的搜索引擎" class="headerlink" title="MySQL常用的搜索引擎"></a>MySQL常用的搜索引擎</h5><ul>
<li>MyISAM</li>
<li>InnoDB</li>
</ul>
<h6 id="MyISAM特性"><a href="#MyISAM特性" class="headerlink" title="MyISAM特性"></a>MyISAM特性</h6><p>MyISAM存储引擎不支持事务，支持全文检索,其锁定机制是表级索引，虽然可以让锁定的实现成本变得很小，但同时也大大降低了其并发性能。</p>
<p>不仅会在写入的时候阻塞读取，MyISAM还会在读取的时候阻塞写入，但读本身并不会阻塞另外的读。MyISAM可以通过key_buffer缓存以大大提高访问性能减少磁盘IO，但是这个缓存区只会缓存索引，而不会缓存数据。</p>
<h6 id="MyISAM适用场景"><a href="#MyISAM适用场景" class="headerlink" title="MyISAM适用场景"></a>MyISAM适用场景</h6><p>MyISAM适用于不需要事务支持，并发性相对较低，数据修改相对较少的场景，一般这类的系统会以读为主，对数据一致性要求不是很高</p>
<h6 id="InnoDB特性"><a href="#InnoDB特性" class="headerlink" title="InnoDB特性"></a>InnoDB特性</h6><p>InnoDB完全支持4个事务隔离级别，但不支持全文检索,通过索引实现了行级锁定，但全表扫描仍然会表锁，使用的时候注意间隙锁的影响。并且读写阻塞与事务隔离级别相关，具有非常高效的缓存特性，能够缓存索引，也能缓存数据。整个表和主键以CLUSTER方式存储；</p>
<h6 id="InnoDB适用场景"><a href="#InnoDB适用场景" class="headerlink" title="InnoDB适用场景"></a>InnoDB适用场景</h6><p>InnoDB具有较好的事务特性，也就是事务支持，其行级锁定机制对高并发有很好的适应能力，但需要确保查询是通过索引来完成。能够很好地适应于数据更新较为频繁的场景，但是对数据一致性要求较高，如果硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，尽可能减少磁盘IO。</p>
<h5 id="4个事务隔离级别"><a href="#4个事务隔离级别" class="headerlink" title="4个事务隔离级别"></a>4个事务隔离级别</h5><ol>
<li>未授权读取（Read Uncommitted）: 读未提交数据，这是事务最低的隔离级别，在并发的事务中，它允许一个事务可以读到另一个事务未提交的更新数据。（会出现脏读，不可重复读和幻读）</li>
<li>授权读取(Read Committed)：读已提交数据，保证并发的事务中，一个事务修改的数据提交后才能被另外一个事务读取到。（会出现不可重复读和幻读）</li>
<li>可重复读取(Repeatable Read):可重复读，这种事务隔离级别可以防止脏读，不可重复读，但是可能出现幻读。一般是使用“快照”的方式来实现。</li>
<li>序列化(Serializable):事务被处理为顺序执行，这是花费最高的，但也是最可靠的事务隔离级别，能够有效避免脏读、不可重复读、幻读。</li>
</ol>
<h5 id="脏读、不可重复读、幻读的概念"><a href="#脏读、不可重复读、幻读的概念" class="headerlink" title="脏读、不可重复读、幻读的概念"></a>脏读、不可重复读、幻读的概念</h5><h6 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h6><p>一个事务读取到另一事务未提交的更新新据。当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有<br>提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另<br>外一个事务读到的这个数据是脏数据，依据脏数据所做的操作也可能是不正确的</p>
<h6 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h6><p>在同一事务中，多次读取同一数据返回的结果有所不同。换句话说就是，后续读取可以读到另一事务已提交的<br>更新数据。相反，“可重复读”在同一事务中多次读取数据时，能够保证所读数据一样，也就是，后续读取不能读到另一事务<br>已提交的更新数据。</p>
<h6 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h6><p>事务T1执行一次查询，然后事务T2新插入一行记录，这行记录恰好可以满足T1所使用的查询的条件。然后T1又使用相同<br>的查询再次对表进行检索，但是此时却看到了事务T2刚才插入的新行。这个新行就称为“幻像”，因为对T1来说这一行就像突然<br>出现的一样。</p>
<h5 id="数据库事务的4个特性"><a href="#数据库事务的4个特性" class="headerlink" title="数据库事务的4个特性"></a>数据库事务的4个特性</h5><h6 id="原子性-Atomic"><a href="#原子性-Atomic" class="headerlink" title="原子性(Atomic)"></a>原子性(Atomic)</h6><p>组成一个事务的多个数据库操作是一个不可分割的原子单元；只有所有操作执行成功，整个事务才提交，其中一个操作失败，都必须回滚到初始状态。</p>
<h6 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性(Consistency)"></a>一致性(Consistency)</h6><p>事务操作成功后数据库所处的状态和它的业务规则是一致的；（即数据总额不会被破坏。如A账户转账100到B账户，无论操作成功与否，A和B的存款总额是不变的）</p>
<h6 id="隔离性（Isolation"><a href="#隔离性（Isolation" class="headerlink" title="隔离性（Isolation)"></a>隔离性（Isolation)</h6><p>在并发数据操作时，不同的事务拥有各自的数据空间，它们的操作不会对彼此产生干扰。（并非是完全无干扰，<br>根据数据库的隔离级别，会产生不同程度的干扰）</p>
<h6 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h6><p>一旦事务提交成功，事务中的数据操作都必须持久化到数据库中；就算数据库崩溃，也必须保证有某种机制恢复。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PlayFramework入门介绍]]></title>
      <url>http://jianwl.com/2016/05/16/PlayFramework%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h6 id="什么是PlayFramework"><a href="#什么是PlayFramework" class="headerlink" title="什么是PlayFramework?"></a>什么是PlayFramework?</h6><p>Play Framework 是一个轻量级，无状态，网络友好的框架，使用Java和Scala来写的开源Web应用程序框架，采用了MVC(Model View  Controller)的体系结构，它意在通过使用协议由于配置，以及在浏览器显示错误来提高开发者的工作效率。</p>
<h6 id="PlayFramework和传统的SpringMVC框架相比优势在哪？"><a href="#PlayFramework和传统的SpringMVC框架相比优势在哪？" class="headerlink" title="PlayFramework和传统的SpringMVC框架相比优势在哪？"></a>PlayFramework和传统的SpringMVC框架相比优势在哪？</h6><ul>
<li>实现了热加载，就是无需重启JVM就可以加载修改过的类，更新运行时的class行为;</li>
<li>内嵌Jetty容器</li>
<li>采用MVC结构</li>
<li>强调协议优于配置的设计,通过Http路由得到具体的接口，不需要通过XML来配置Action接口；</li>
<li>优秀的错误报告功能，当错误出现时，Play Framework会在浏览器上将错误的代码位置，甚至模板给显示出来。</li>
</ul>
<h6 id="Java类的加载"><a href="#Java类的加载" class="headerlink" title="Java类的加载"></a>Java类的加载</h6><p>Java类是通过Java虚拟机加载的，某个类的class文件被classloader加载后，会生成对应的Class对象，之后就可以创建该类的实例了。默认的虚拟机行为只会在启动时加载类，如果后期有一个类需要更新的话，单纯替换编译的class文件，Java虚拟机是不会更新正在运行的class。</p>
<h6 id="如何实现热加载？"><a href="#如何实现热加载？" class="headerlink" title="如何实现热加载？"></a>如何实现热加载？</h6><ol>
<li>最直接的方式是修改虚拟机的源代码，改变classloader的加载行为，使虚拟机能监听class文件的更新，重新加载class文件，这样的行为破坏性极大，为后续的JVM升级埋下一个大坑。</li>
<li>实现自己的classLoader，并且创建对象的行为，指定为用自定义的classLoader加载class，playFramework就是这么干的。以下是其源码实现，从源码上看play会遍历所有发生改变的class然后重新加载，因为是放在用户请求的过程中，所以，我们的直观感觉就是刷新页面就热加载了一切，这就是play的hotswap.</li>
</ol>
<h6 id="热加载具体源码"><a href="#热加载具体源码" class="headerlink" title="热加载具体源码"></a>热加载具体源码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Init the call (especially usefull in DEV mode to detect changes)</div><div class="line">public boolean init() &#123;</div><div class="line">    Thread.currentThread().setContextClassLoader(Play.classloader);</div><div class="line">    Play.detectChanges();</div><div class="line">    if (!Play.started) &#123;</div><div class="line">        if (Play.mode == Mode.PROD) &#123;</div><div class="line">            throw new UnexpectedException(&quot;Application is not started&quot;);</div><div class="line">        &#125;</div><div class="line">        Play.start();</div><div class="line">    &#125;</div><div class="line">    InvocationContext.current.set(getInvocationContext());</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Play.detectChanges()方法实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Detect Java changes</div><div class="line">     */</div><div class="line">    public void detectChanges() &#123;</div><div class="line">        // Now check for file modification</div><div class="line">        List&lt;ApplicationClass&gt; modifieds = new ArrayList&lt;ApplicationClass&gt;();</div><div class="line">        for (ApplicationClass applicationClass : Play.classes.all()) &#123;</div><div class="line">            if (applicationClass.timestamp &lt; applicationClass.javaFile.lastModified()) &#123;</div><div class="line">                applicationClass.refresh();</div><div class="line">                modifieds.add(applicationClass);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Set&lt;ApplicationClass&gt; modifiedWithDependencies = new HashSet&lt;ApplicationClass&gt;();</div><div class="line">        modifiedWithDependencies.addAll(modifieds);</div><div class="line">        if (modifieds.size() &gt; 0) &#123;</div><div class="line">            modifiedWithDependencies.addAll(Play.pluginCollection.onClassesChange(modifieds));</div><div class="line">        &#125;</div><div class="line">        List&lt;ClassDefinition&gt; newDefinitions = new ArrayList&lt;ClassDefinition&gt;();</div><div class="line">        boolean dirtySig = false;</div><div class="line">        for (ApplicationClass applicationClass : modifiedWithDependencies) &#123;</div><div class="line">            if (applicationClass.compile() == null) &#123;</div><div class="line">                Play.classes.classes.remove(applicationClass.name);</div><div class="line">                currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">            &#125; else &#123;</div><div class="line">                int sigChecksum = applicationClass.sigChecksum;</div><div class="line">                applicationClass.enhance();</div><div class="line">                if (sigChecksum != applicationClass.sigChecksum) &#123;</div><div class="line">                    dirtySig = true;</div><div class="line">                &#125;</div><div class="line">                BytecodeCache.cacheBytecode(applicationClass.enhancedByteCode, applicationClass.name, applicationClass.javaSource);</div><div class="line">                newDefinitions.add(new ClassDefinition(applicationClass.javaClass, applicationClass.enhancedByteCode));</div><div class="line">                currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (newDefinitions.size() &gt; 0) &#123;</div><div class="line">            Cache.clear();</div><div class="line">            if (HotswapAgent.enabled) &#123;</div><div class="line">                try &#123;</div><div class="line">                    HotswapAgent.reload(newDefinitions.toArray(new          ClassDefinition[newDefinitions.size()]));</div><div class="line">                &#125; catch (Throwable e) &#123;</div><div class="line">                    throw new RuntimeException(&quot;Need reload&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                throw new RuntimeException(&quot;Need reload&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // Check signature (variable name &amp; annotations aware !)</div><div class="line">        if (dirtySig) &#123;</div><div class="line">            throw new RuntimeException(&quot;Signature change !&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Now check if there is new classes or removed classes</div><div class="line">        int hash = computePathHash();</div><div class="line">        if (hash != this.pathHash) &#123;</div><div class="line">            // Remove class for deleted files !!</div><div class="line">            for (ApplicationClass applicationClass : Play.classes.all()) &#123;</div><div class="line">                if (!applicationClass.javaFile.exists()) &#123;</div><div class="line">                    Play.classes.classes.remove(applicationClass.name);</div><div class="line">                    currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">                &#125;</div><div class="line">                if (applicationClass.name.contains(&quot;$&quot;)) &#123;</div><div class="line">                    Play.classes.classes.remove(applicationClass.name);</div><div class="line">                    currentState = new ApplicationClassloaderState();//show others that we have changed..</div><div class="line">                    // Ok we have to remove all classes from the same file ...</div><div class="line">                    VirtualFile vf = applicationClass.javaFile;</div><div class="line">                    for (ApplicationClass ac : Play.classes.all()) &#123;</div><div class="line">                        if (ac.javaFile.equals(vf)) &#123;</div><div class="line">                            Play.classes.classes.remove(ac.name);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            throw new RuntimeException(&quot;Path has changed&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>参考文章：</p>
<ol>
<li><a href="http://itindex.net/detail/47223-playframework-%E6%BA%90%E7%A0%81" target="_blank" rel="external">playframework拦截器和热加载 源码浅析</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-hotdeploy/index.html?ca=drs-" target="_blank" rel="external">深入探索 Java 热部署</a></li>
<li><a href="http://www.adaplay.org/index.php/break-the-traditional-java-frameworks-play-framework/" target="_blank" rel="external">打破传统的JAVA框架－PLAY FRAMEWORK</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之装饰者模式]]></title>
      <url>http://jianwl.com/2016/05/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之观察者模式]]></title>
      <url>http://jianwl.com/2016/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h6 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h6><p>观察者模式(ObservePattern),用于实时监测某些Object的动态，只要Object一改变，那么他的所有观察者Observer都会被通知到，之后观察者会根据Object的改变进行下一步操作。</p>
<h6 id="问题的引出"><a href="#问题的引出" class="headerlink" title="问题的引出"></a>问题的引出</h6><p>要实现一个天气预报的功能，当天气的数据发生变化的时候，会实时的以三种形式来显示天气，当前天气情况、统计分析情况、天气预报。这里我们不管数据如何来，就假设我们已经能够获取到数据了，在程序中通过调用被观察的对象的notifyObserver()方法来通知所有观察者；</p>
<h6 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h6><ol>
<li>通过分析我们得出一个简单的结论，天气数据一旦更新，那么就要实时的改变显示，观察者模式可以很好的解决这种模型问题。</li>
<li>既然确定观察者模型，就要定位出谁是观察者、谁是被观察者、这里有个简单的原则、观察者和被观察者之间的关系是多对一的关系，也就是说被观察者只有一个就是我们的天气数据信息，观察者则是三种要显示不同的终端;</li>
<li>每个观察者都要动态的显示信息，所以我们应该</li>
<li>考虑到可扩展性、低耦合性、灵活性和对扩展开放、对修改关闭的原则和面向接口编程，我们下面具体类的设计</li>
<li>根据角色我们可以抽象三个接口：<br> a) 所有被观察者的接口 Subject<br> b) 所有观察者的接口 Observer<br> c) 显示信息的接口 DisplayElement</li>
<li>Subject拥有三个关于Observer的方法、注册、移除和通知Observer的方法(观察者肯定要和被观察者集合起来)</li>
<li>对于Observer肯定要有一个udpate方法，一旦监测要Subject有变动，就要更新信息，所以还要实现DisplayElement接口。</li>
</ol>
<h6 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h6><p>1、设计Subject接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface Subject &#123;</div><div class="line">    public void registerObserver(Observer observer);</div><div class="line">    public void removeObserver(Observer observer);</div><div class="line">    public void notifyObserver();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、设计Observer接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Observer &#123;</div><div class="line">    public void update(float temperature,float humidity,float pressure);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、设计DisplayElement接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface DisplayElement&#123;</div><div class="line"> 	public void display();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、Subject接口的被观察者  — WeatherDate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class WeatherDate implements Subject &#123;</div><div class="line">    private List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();</div><div class="line">    private float temperate;</div><div class="line">    private float humidity;</div><div class="line">    private float pressure;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void registerObserver(Observer observer) &#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void removeObserver(Observer observer) &#123;</div><div class="line">        int index = observers.indexOf(observer);</div><div class="line">        if(index &gt; 0)&#123;</div><div class="line">            observers.remove(observer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void notifyObserver() &#123;</div><div class="line">        for(int i=0; i &lt; observers.size(); i++)&#123;</div><div class="line">            Observer o = (Observer) observers.get(i);</div><div class="line">            o.update(temperate,humidity,pressure);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 模仿数据变动时，自动触发notifyObserver函数</div><div class="line">     */</div><div class="line">    public void measurementsChanged()&#123;</div><div class="line">        notifyObserver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 模仿数据变动、即当我们调用这个方法时就说明数据有变化，这样所有的观察者都会被通知；</div><div class="line">     */</div><div class="line">    public void setMeasurements(float temperate,float humidity,float pressure)&#123;</div><div class="line">        this.temperate = temperate;</div><div class="line">        this.humidity = humidity;</div><div class="line">        this.pressure = pressure;</div><div class="line">        measurementsChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、观察者Observer的具体实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class CurrentConditionDisplay implements DisplayElement,Observer &#123;</div><div class="line">    private float temperature;</div><div class="line">    private float humidity;</div><div class="line">    private float pressure;</div><div class="line">    private Subject weatherDate;</div><div class="line"></div><div class="line">    public CurrentConditionDisplay(Subject weatherDate)&#123;</div><div class="line">        this.weatherDate = weatherDate;</div><div class="line">        this.weatherDate.registerObserver(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println( CurrentConditionDisplay.class.getName() + &quot; temperature = &quot; + temperature + &quot;  humidity =   &quot; + humidity + &quot; pressure = &quot; + pressure);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void update(float temperature, float humidity, float pressure) &#123;</div><div class="line">        this.temperature = temperature;</div><div class="line">        this.humidity = humidity;</div><div class="line">        this.pressure = pressure;</div><div class="line">        display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>6、ForecastConditionDisplay 与CurrentConditionDisplay实现类似<br>7、Client测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        WeatherDate subject = new WeatherDate();</div><div class="line"></div><div class="line">        ForecastConditionDisplay condition1 = new ForecastConditionDisplay(subject);</div><div class="line">        CurrentConditionDisplay condition2 = new CurrentConditionDisplay(subject);</div><div class="line">        subject.setMeasurements(10,20,30);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="Java内置观察者模式"><a href="#Java内置观察者模式" class="headerlink" title="Java内置观察者模式"></a>Java内置观察者模式</h6><p>WeatherData类似于自己实现观察者模式中的的Subject的具体实现，继承了java提供的java.util.Observable，Observable封装了之前subject提供的所有方法;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import java.util.Observable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Subject</div><div class="line"> * User: jianwl</div><div class="line"> * Date: 2016/5/11</div><div class="line"> * Time: 11:16</div><div class="line"> */</div><div class="line">public class WeatherData extends Observable&#123;</div><div class="line">    private float temperature;</div><div class="line">    private float humidity;</div><div class="line">    private float pressure;</div><div class="line"></div><div class="line">    public  WeatherData()&#123;&#125;</div><div class="line"></div><div class="line">    public void messureChanged()&#123;</div><div class="line">        setChanged();</div><div class="line">        notifyObservers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public  void setMessurements(float temperature,float humidity,float pressure)&#123;</div><div class="line">        this.temperature = temperature;</div><div class="line">        this.humidity = humidity;</div><div class="line">        this.pressure = pressure;</div><div class="line">        messureChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getTemperature() &#123;</div><div class="line">        return temperature;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getHumidity() &#123;</div><div class="line">        return humidity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getPressure() &#123;</div><div class="line">        return pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CurrentConditionsDisplay,类似于自己实现观察者模式中的Observer的具体实现，实现了java提供的java.util.Observer的接口和另一个自己创建的DisplayElement接口;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public interface DisplayElement &#123;</div><div class="line">    public void display();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">import java.util.Observable;</div><div class="line">import java.util.Observer;</div><div class="line"></div><div class="line">/**</div><div class="line"> * User: jianwl</div><div class="line"> * Date: 2016/5/11</div><div class="line"> * Time: 11:23</div><div class="line"> */</div><div class="line">public class CurrentConditionsDisplay implements Observer,DisplayElement &#123;</div><div class="line">    Observable observable;</div><div class="line">    private float temperature;</div><div class="line">    private float humidity;</div><div class="line"></div><div class="line">    public CurrentConditionsDisplay(Observable observable) &#123;</div><div class="line">        this.observable = observable;</div><div class="line">        observable.addObserver(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println(&quot;CurrentConditionsDisplay  temperature = &quot; + temperature + &quot; humidity = &quot; + humidity );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void update(Observable o, Object arg) &#123;</div><div class="line">        if(o instanceof WeatherData)&#123;</div><div class="line">            WeatherData weatherData = (WeatherData)o;</div><div class="line">            this.temperature = weatherData.getTemperature();</div><div class="line">            this.humidity = weatherData.getHumidity();</div><div class="line">            display();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试Java内置的观察者模式,XFireConditionsDisplay、ForeConditionsDisplay这两个类的实现和CurrentConditionsDisplay类似;<br>同时通过测试结果可知，Java内置的观察者模式，通知的顺序是先入后出的；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    //通知的顺序是先入后出的；</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        WeatherData weatherData = new WeatherData();</div><div class="line">        CurrentConditionsDisplay condition1 = new CurrentConditionsDisplay(weatherData);</div><div class="line"></div><div class="line">        XFireConditionsDisplay condition2 = new XFireConditionsDisplay(weatherData);</div><div class="line">        ForeConditionsDisplay condition3 = new ForeConditionsDisplay(weatherData);</div><div class="line"></div><div class="line">        weatherData.setMessurements(22,11,11);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>Java内置的观察者模式有什么问题？<br>1、Observable是一个“类”，你必须设计一个类继承它，如果某类想同时具有Observable类和另一个超类的行为，就会陷入两难，毕竟Java不支持多重继承。限制了Observable的复用的能力；<br>2、Observable将关键的方法保护起来了，setChanged()方法被保护起来了（被定义成protected）,意味着除非你继承自Obserable，否则你无法创建Obserable实例并组合到自己的对象中来；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java设计模式之策略模式]]></title>
      <url>http://jianwl.com/2016/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h6 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h6><blockquote>
<p>1、逻辑代码独立到单独的方法中,注重封装性-易读，易复用;<br>2、写类、写方法、写功能时，应考虑其移植性，复用性，防止一次性代码；<br>3、熟练运用继承的思想:找出应用中相同之处，且不容易发生变化的东西，把它们抽取到抽象类中，让子类去继承它们；<br>4、熟练运用接口的思想：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起;</p>
</blockquote>
<p>通过以下示例，我们来感受一下设计模式的好处;<br><strong>场景：</strong><br>模拟鸭子游戏的应用程序，要求，游戏中的会出现各种颜色外形的鸭子，一边游戏洗水，一边呱呱叫。</p>
<h6 id="实现1：一次性代码"><a href="#实现1：一次性代码" class="headerlink" title="实现1：一次性代码"></a>实现1：一次性代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">直接编写出各种鸭子的类：MallardDuck,RedHeadDuck各个类有三个方法：</div><div class="line">quack() 叫的方法；</div><div class="line">swim()  游水的方法；</div><div class="line">display()： 外形的方法;</div></pre></td></tr></table></figure>
<h6 id="实现2：继承"><a href="#实现2：继承" class="headerlink" title="实现2：继承"></a>实现2：继承</h6><p>设计一个鸭子的超类，并让各个鸭子继承这个超类,将其中共同的部分提取出来，避免重复编程;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public abstract class Duck&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">    public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    public abstract display(); //外观不一样，由子类决定</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MallardDuck extends Duck&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;野鸭的颜色是绿色的&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class RedHeadDuc extends Duck&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;红头鸭的颜色是红色的&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不幸的是，现在客户又提出了新的需求，想让鸭子飞起来。这个对于OO程序员，在简单不过了，在超类中在加一个方法就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Duck&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">    public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    public void fly()&#123;</div><div class="line">    	System.out.println(&quot;飞啦&quot;);</div><div class="line">    &#125;</div><div class="line">    public abstract display(); //外观不一样，由子类决定</div><div class="line">&#125;</div><div class="line"></div><div class="line">//对于不能飞的鸭子，在子类中只需简单覆盖</div><div class="line">public class DisabledDuck extends Duck&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;残废鸭的颜色.&quot;);</div><div class="line">    &#125;</div><div class="line">    public void fly()&#123;</div><div class="line">		//覆盖，什么事都不做</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现2点评<br>对于上面的设计，你可能会发现一些弊端，如果超类有新的特性，子类都必须变动，这是我们开发最不喜欢看到的，故继承耦合性太高了。</p>
<h6 id="实现3-接口"><a href="#实现3-接口" class="headerlink" title="实现3:接口"></a>实现3:接口</h6><p>我们把容易变化的部分提取出来并封装，来应付以后的变化，虽然代码量加大了，但可用性提高了，耦合度也降低了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public interface Flyable()&#123;</div><div class="line">	public void fly();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface Quackable()&#123;</div><div class="line">	public void quack();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Duck()&#123;</div><div class="line">	public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    public abstract void display();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MallardDuck extends Duck implements Flyable,Quackable&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;野鸭的颜色是绿色的&quot;);</div><div class="line">    &#125;</div><div class="line">    public void fly()&#123;</div><div class="line">    	System.out.println(&quot;飞啦&quot;);</div><div class="line">    &#125;</div><div class="line">    public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class DisabledDuck extends Duck implements Quackable&#123;</div><div class="line">	public void display()&#123;</div><div class="line">    	System.out.println(&quot;能叫不能飞的残废鸭颜色....&quot;);</div><div class="line">    &#125;</div><div class="line">    public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现3接口点评<br>好处是，这样的设计，降低了程序之间的耦合度；<br>缺点是，Flyable和Quackable接口一开始似乎还挺不错的，解决了问题，只有会飞的鸭子才实现Flyable,但是Java接口不具有实现代码，所以实现接口无法达到的复用。</p>
<h6 id="实现四，策略模式"><a href="#实现四，策略模式" class="headerlink" title="实现四，策略模式"></a>实现四，策略模式</h6><p>为了要分开变化和不变化的部分，准备建立两组类,一个是Fly相关的，另一个是Quack相关的，每组类实现各自的动作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public interface FlyBehavior&#123;</div><div class="line">	public void fly();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface QuackBehavior&#123;</div><div class="line">	public void quack();</div><div class="line">&#125;</div><div class="line">public class FlyWithWings implements FlyBehavior&#123;</div><div class="line">	public void fly()&#123;</div><div class="line">    	System.out.println(&quot;飞啦&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class FlyNoWay implements FlyBehavior&#123;</div><div class="line">	public void fly()&#123;</div><div class="line">    	System.out.println(&quot;什么都不做，不会飞啊&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Quack implements QuackBehavior&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;呱呱叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MuteQuack implements QuackBehavior&#123;</div><div class="line">	public void quack()&#123;</div><div class="line">    	System.out.println(&quot;什么都不做，不会叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样的设计可以让飞行和呱呱叫的动作被其他的对象复用，因为这些行为已经和鸭子类无关了，而我们增加一些新的行为，不会影响到既有的行为类，也不会影响使用到的飞行行为的鸭子类；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public abstract class Duck &#123;</div><div class="line">	FlyBehavior flyBehavior;</div><div class="line">    QuackBehavior quackBehavior;</div><div class="line">    </div><div class="line">    public Duck()&#123;&#125;</div><div class="line">   </div><div class="line">    public void swim()&#123;</div><div class="line">    	System.out.println(&quot;游泳&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public abstract void display();</div><div class="line">    </div><div class="line">    public void performFly()&#123;</div><div class="line">    	flyBehavior.fly();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void performQuack()&#123;</div><div class="line">    	quackBehavior.quack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public MallardDuck extends Duck&#123;</div><div class="line">	public MallardDuck()&#123;</div><div class="line">    	this.flyBehavior = new FlyWithWings();</div><div class="line">        this.quackBehavior = new MuteQuack();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void display()&#123;</div><div class="line">    	System.out.println(&quot;鸭子是绿色的&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现4点评<br>即实现了解耦又实现了代码的复用；</p>
<h6 id="策略模式定义"><a href="#策略模式定义" class="headerlink" title="策略模式定义"></a>策略模式定义</h6><p>定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis之集合并集、交集、差集]]></title>
      <url>http://jianwl.com/2016/05/09/Redis%E4%B9%8B%E9%9B%86%E5%90%88%E5%B9%B6%E9%9B%86%E3%80%81%E4%BA%A4%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/</url>
      <content type="html"><![CDATA[<h6 id="Redis交集、并集、差集应用场景"><a href="#Redis交集、并集、差集应用场景" class="headerlink" title="Redis交集、并集、差集应用场景"></a>Redis交集、并集、差集应用场景</h6><ul>
<li>微博的共同和非共同好友显示;</li>
</ul>
<h6 id="实战操作（备忘…-）"><a href="#实战操作（备忘…-）" class="headerlink" title="实战操作（备忘….）"></a>实战操作（备忘….）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 创建集合</div><div class="line">SADD priceA 1 2 3 4 5</div><div class="line">SADD priceB 1 2 3 7 8</div><div class="line"></div><div class="line"># 显示集合所有元素</div><div class="line">SMEMBERS priceA</div><div class="line">SMEMBERS priceB</div><div class="line"></div><div class="line"># 交集</div><div class="line">SINTER priceA priceB  //结果 1 2 3</div><div class="line"></div><div class="line"># 差集</div><div class="line">SDIFF priceA priceB   //结果 4 5</div><div class="line"></div><div class="line"># 并集</div><div class="line">SUNION priceA priceB  //结果 1 2 3 4 5 7 8</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis持久化RDB和AOF]]></title>
      <url>http://jianwl.com/2016/05/09/Redis%E6%8C%81%E4%B9%85%E5%8C%96RDB%E5%92%8CAOF/</url>
      <content type="html"><![CDATA[<p>Redis提供了两种不同级别的持久化方式</p>
<ul>
<li>RDB</li>
<li>AOF</li>
</ul>
<h6 id="RDB、AOF概念"><a href="#RDB、AOF概念" class="headerlink" title="RDB、AOF概念"></a>RDB、AOF概念</h6><p>RDB持久化可以在指定的时间间隔内生成数据集的时间点快照。</p>
<p>AOF持久化记录服务器执行的所有写操作命令，在服务器启动时，通过执行这些命令来还原数据集。</p>
<h6 id="RDB的优点"><a href="#RDB的优点" class="headerlink" title="RDB的优点"></a>RDB的优点</h6><ol>
<li>紧凑易于备份，就一个文件</li>
<li>RDB可以最大化Redis性能，父进程无需做任何操作，只需fork一个子进程；</li>
<li>恢复比AOF快</li>
</ol>
<h6 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h6><ol>
<li>数据完整性，如果非常注重数据的完整性，RDB就不行了，虽然是时间点的快照方式，但在快照过程中，Redis重启了，那么快照中的这些数据将会丢失。</li>
<li>数据非常庞大后，非常耗CPU和时间，REDIS服务可能DOWN掉1秒甚至更长；</li>
</ol>
<h6 id="AOF的优点"><a href="#AOF的优点" class="headerlink" title="AOF的优点"></a>AOF的优点</h6><ol>
<li>AOF持久化让Redis变得更加耐久，AOF默认每一秒追加一次，也可以修改它的方式每执行一次追加一次，所以你最多丢失1秒钟的数据；</li>
<li>AOF文件是一个只进行追加操作的日志文件;</li>
<li>Redis可以在AOF文件体积变得过大时，自动地在后台对AOF重写</li>
</ol>
<h6 id="AOF缺点"><a href="#AOF缺点" class="headerlink" title="AOF缺点"></a>AOF缺点</h6><ol>
<li>对于相同的数据集来说，AOF文件的体积大于RDB文件的体积；</li>
<li>根据所使用的fsync策略，AOF的速度可能会慢于RDB；</li>
</ol>
<h6 id="RDB持久化原理"><a href="#RDB持久化原理" class="headerlink" title="RDB持久化原理"></a>RDB持久化原理</h6><p>当Redis需要保存dump.rdb文件时，服务器执行以下操作：</p>
<ol>
<li>Redis调用fork(),同时拥有父进程和子进程；</li>
<li>子进程将数据集写入到一个临时RDB文件中；</li>
<li>当子进程完成对RDB文件的写入时，Redis用新RDB文件替换原来的RDB文件，并删除旧的RDB文件；</li>
<li>这种方式使得Redis可以从写时复制机制中获益</li>
</ol>
<h5 id="AOF持久化原理"><a href="#AOF持久化原理" class="headerlink" title="AOF持久化原理"></a>AOF持久化原理</h5><ol>
<li>Redis执行fork()，现在同时拥有父进程和子进程；</li>
<li>子进程开始将AOF文件的内容写入到临时文件。</li>
<li>对于所有新执行的写入命令，父进程一边将他们累积到一个内存缓存中，一边将这些改动追加到现有AOF文件的末尾，这样即使在重写的中途发生宕机，现有AOF文件也是安全的</li>
<li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新的AOF文件的末尾。</li>
<li>现在Redis原子地用新文件替换旧文件，之后所有命令都会追加到新的AOF文件</li>
</ol>
<h5 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h5><ul>
<li>AOF的运作方式是不断将命令追加到文件的末尾，所以随着写入命令的不断增加，AOF文件的体积也变得越来越大。举个例子，如果你对计数器调用100次INCR，那么仅仅是为了保存这个计数器的当前值，AOF文件就需要使用100条记录，然而实际上只需一条SET命令就可以保存当前值；为了处理这种情况Redis会对AOF文件进行重写，执行beginWriteAof命令，Redis将生成一个新的AOF文件，这个文件将重建当前数据集所需的最少命令；</li>
</ul>
<p>参考资料：<br><a href="http://www.cnblogs.com/luotianshuai/p/4969379.html" target="_blank" rel="external">Redis-cluster集群【第二篇】：redis持久化</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP对数据库的增删改查]]></title>
      <url>http://jianwl.com/2016/05/06/PHP%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      <content type="html"><![CDATA[<p>对于PHP和前端HTML的CURD交互操作的详情请参考链接资料，写的非常详细，这里主要总结一下，PHP的CURD的操作;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">//数据库配置</div><div class="line">$ip = &apos;localhost&apos;;</div><div class="line">$user = &apos;root&apos;;</div><div class="line">$password = &apos;root&apos;;</div><div class="line">$database = &apos;test&apos;;</div><div class="line"></div><div class="line">//增</div><div class="line">$isbn = &quot;A001&quot;;</div><div class="line">$author = &quot;jianwl&quot;;</div><div class="line">$title = &quot;PHP&quot;;</div><div class="line">$price = 222;</div><div class="line"></div><div class="line">@$db = new mysqli($ip,$user,$password,$database);</div><div class="line">if(mysqli_connect_errno())&#123;</div><div class="line">	echo &quot;mysql connected error&quot;;</div><div class="line">    exit();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$sql_insert = &quot;INSERT INTO books(isbn,author,title,price) VALUES(&apos;$isbn&apos;,&apos;$author&apos;,&apos;$title&apos;,&apos;$price&apos;)&quot;;</div><div class="line">mysql_query($sql_insert);</div><div class="line">echo &quot;insert into db 1 data.....&quot;;</div><div class="line"></div><div class="line">//查</div><div class="line"></div><div class="line">$sql_select = &quot;SELECT * FROM books&quot;;</div><div class="line">$result_set = mysql_query($sql_select);</div><div class="line">while($row=mysql_fetch_row($result_set))&#123;</div><div class="line">echo &quot;isbn = &quot;.$row[&apos;isbn&apos;].&quot; author = &quot;.$row[&apos;author&apos;].&quot; title = &quot;.$row[&apos;title&apos;].&quot; price = &quot;.$row[&apos;price&apos;].&quot;&lt;br/&gt;&quot; ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//改</div><div class="line">$sql_update = &quot;update books SET title=&quot;MYSQL PHP CONNECT WHERE isbn=&apos;$isbn&apos;&quot;;</div><div class="line">mysql_query($sql_update);</div><div class="line">echo &quot;data has updated&quot;;</div><div class="line"></div><div class="line">//删</div><div class="line">$sql_delete = &quot;delete books where isbn=dd&quot;;</div><div class="line">mysql_query($sql_delete);</div><div class="line">echo &quot;data has deleted&quot;;</div></pre></td></tr></table></figure></p>
<p>参考资料：<br><a href="http://www.codingcage.com/2014/12/simple-php-crud-operations-with-mysql.html" target="_blank" rel="external">Simple PHP CRUD Operations with MySQL</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP常用类和接口的判断方法]]></title>
      <url>http://jianwl.com/2016/05/06/PHP%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">        class Computer &#123;</div><div class="line">                public function _run() &#123;&#125;</div><div class="line">                private function _go() &#123;&#125;</div><div class="line">                public $_name = &apos;dell&apos;;</div><div class="line">                private $_model = &apos;i7&apos;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        class NoteComputer extends Computer &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        interface Person &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        $computer = new Computer();</div><div class="line">        $notecomputer = new NoteComputer();</div><div class="line"></div><div class="line">        //1.检查类是否存在</div><div class="line">        echo class_exists(&apos;Computer&apos;);</div><div class="line">        //2.获取对象的类名</div><div class="line">        echo get_class($computer);</div><div class="line">        //3.获取类中公共的方法</div><div class="line">        print_r(get_class_methods($computer));</div><div class="line">        //4.获取类中的字段</div><div class="line">        print_r(get_class_vars(&apos;Computer&apos;));</div><div class="line">        //5.获取子类的父类</div><div class="line">        echo get_parent_class($notecomputer);</div><div class="line">        //6.判断接口是否存在</div><div class="line">        echo interface_exists(&apos;Person&apos;);</div><div class="line">        //7.判断对象是否是这个类，$notecomputer的类的父类是Computer</div><div class="line">        echo is_a($notecomputer,&apos;Computer&apos;);</div><div class="line">        //8.判断对象是否是类的子类。</div><div class="line">        echo is_subclass_of($notecomputer,&apos;Computer&apos;);</div><div class="line">        //9.判断对象是否有这个方法</div><div class="line">        echo method_exists($computer,&apos;_run&apos;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP面向对象特性]]></title>
      <url>http://jianwl.com/2016/05/05/PHP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>常量声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//特别注意 PI没有$,同时不用声明访问权限，声明为public时，会报错；</div><div class="line">class Fruit&#123;</div><div class="line">  const PI =3.14;</div><div class="line">&#125;</div><div class="line">echo Fruit::PI;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>define和const的区别？</p>
<ol>
<li>编译器处理方式不同，define宏是预处理阶段展开，const常量是编译运行阶段使用;</li>
<li>类型和安全检查不同；define宏没有类型，不做任何类型检查，仅仅是展开；const常量有具体的类型，编译阶段会执行类型检查；</li>
<li>存储方式不同，define宏仅仅是展开，有多少地方使用，就展开多少次，不分配内存，宏定义不分配内存，定义变量分配内存；const常量会在内存中分配；</li>
<li>const可以节省空间，避免不必要的内存分配；</li>
</ol>
<p>静态类成员和方法的调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Fruit&#123;</div><div class="line">public static $count = 0;</div><div class="line"></div><div class="line">public static function add()&#123;</div><div class="line">   self::$count++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static function get()&#123;</div><div class="line">  return self::$count;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//注意调用静态方法不需要用$符号；</div><div class="line">Fruit::add();</div><div class="line">echo Fruit::get();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>getter和setter方法;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Fruit &#123;</div><div class="line">  private $name;</div><div class="line">  private $price;</div><div class="line"> </div><div class="line">  //为private访问权限也能访问，因为拦截于类内</div><div class="line">  public function __set($_key,$_value)&#123;</div><div class="line">        $this-&gt;$_key = $_value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public function __get($_key)&#123;</div><div class="line">    return $this-&gt;$_key;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$fruit = new Fruit();</div><div class="line">$fruit-&gt;name = &quot;apple&quot;;</div><div class="line">$fruit-&gt;price = 2.0;</div><div class="line">echo $fruit-&gt;name. &quot; -&gt; &quot;. $fruit-&gt;price;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>多态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">interface Computer&#123;</div><div class="line">   public function name();</div><div class="line">   public function version();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Tcomputer implements Computer&#123;</div><div class="line">  public function name()&#123;</div><div class="line">   echo &quot;apple&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public function version()&#123;</div><div class="line">     echo &quot;windowxp&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Person&#123;</div><div class="line"> public function run($type)&#123;</div><div class="line">     $type-&gt;name();</div><div class="line"></div><div class="line">     $type-&gt;version();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$person = new Person();</div><div class="line">$computer = new Tcomputer();</div><div class="line"></div><div class="line">$person-&gt;run($computer);</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>自动引入多个类文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">        //引入类文件即可</div><div class="line">        //require &apos;computer.class.php&apos;;</div><div class="line">        //1.如果要包含多个类文件，是不是要一一引入。</div><div class="line">        //2.引入多个类文件，如果有用不到的，就会产生浪费</div><div class="line">        //3.引入了类文件，可能会遗漏，比如说，创建了一个对象，而这个对象的类文件没有引入。就会产生错误</div><div class="line"></div><div class="line">        //$_className = 类名</div><div class="line">        //只要实例化了，那么 $_className = &apos;Computer&apos;;</div><div class="line"></div><div class="line">        function __autoload($_className) &#123;</div><div class="line">                require strtolower($_className).&apos;.class.php&apos;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        $computer = new Computer();</div><div class="line">        $person = new Person();</div><div class="line">        echo $computer-&gt;_name;</div><div class="line">        $computer-&gt;_run();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>__toString<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// 设置__toString()的访问权限为private,仍然能够访问__toString()访问；类内拦截访问该方法；</div><div class="line">        class Computer &#123;</div><div class="line">                public function _run() &#123;</div><div class="line">                        echo &apos;run&apos;;</div><div class="line">                &#125;</div><div class="line">                private function __toString() &#123;</div><div class="line">                        return &apos;i am string&apos;;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        echo new Computer();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu安装Apache+PHP+MySQL]]></title>
      <url>http://jianwl.com/2016/05/04/Ubuntu%E5%AE%89%E8%A3%85Apache-PHP-MySQL/</url>
      <content type="html"><![CDATA[<p>我在ubuntu下配置了一个Apache服务器，通过Apache我们可以学习php网络编程，可以用它来部署自己的hexo博客。以下是安装步骤和其中踩得一些坑。</p>
<h5 id="步骤一，安装apache2"><a href="#步骤一，安装apache2" class="headerlink" title="步骤一，安装apache2"></a>步骤一，安装apache2</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure>
<p>安装完成。<br>运行如下命令重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure></p>
<p>出现这个问题<br><img src="/images/apache-01.png" alt=""><br>ServerName没有配置好IP,编辑/var/apache2/apache2.conf如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /var/apache2/apache2.conf</div></pre></td></tr></table></figure></p>
<p>在apaache2.conf增加一个属性 ServerName为本机IP<br><img src="/images/apache-02.png" alt=""><br>重启apache2 不会出现刚刚的问题了。</p>
<h5 id="步骤二，安装PHP"><a href="#步骤二，安装PHP" class="headerlink" title="步骤二，安装PHP"></a>步骤二，安装PHP</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libapache2-mod-php5 php5</div><div class="line">sudo apt-get install php5-gd php5-MySQL</div></pre></td></tr></table></figure>
<p>安装完后，重新启动Apache，让它加载PHP模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure></p>
<p>接下来测试Web目录下面新建一个test.php文件来测试PHP是否正常运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /var/www/html/test.php</div></pre></td></tr></table></figure></p>
<p>然后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php echo &apos;&lt;p&gt;Order processed.&lt;/p&gt;&apos;; ?&gt;</div></pre></td></tr></table></figure></p>
<p>接着保存文件，在浏览器里输入<a href="http://139.196.243.225/test.php,如果在网页中显示Order" target="_blank" rel="external">http://139.196.243.225/test.php,如果在网页中显示Order</a> processed，就表示正常运行了。如果出现错误，请查看日志信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f /var/log/apache2/error.log</div></pre></td></tr></table></figure></p>
<h5 id="步骤三，安装Mysql数据库"><a href="#步骤三，安装Mysql数据库" class="headerlink" title="步骤三，安装Mysql数据库"></a>步骤三，安装Mysql数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server mysql-client</div></pre></td></tr></table></figure>
<p>安装不成功，出现以下报错信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql-server depends on mysql-server-5.5; however: Package mysql-server-5.5 is not configured yet. dpkg: error processing mysql-server (--configure)</div></pre></td></tr></table></figure></p>
<p>在stackoverflow查到解决方案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo apt-get --yes autoremove --purge mysql-server-5.5</div><div class="line">sudo apt-get --yes autoremove --purge mysql-client-5.5</div><div class="line">sudo apt-get --yes autoremove --purge mysql-common</div><div class="line">sudo rm -rf /var/lib/mysql /etc/mysql ~/.mysql</div><div class="line"></div><div class="line">sudo deluser mysql</div><div class="line">sudo apt-get autoclean</div><div class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</div><div class="line">sudo apt-get install mysql-server-5.5 mysql-client-5.5</div></pre></td></tr></table></figure></p>
<p>安装过程中，会要求输入root的密码，注意这里的root密码可不是ubuntu的root密码，是mysql设定的root密码，成功安装mysql。</p>
<h5 id="步骤四，安装phpmyadmin-mysql数据库管理"><a href="#步骤四，安装phpmyadmin-mysql数据库管理" class="headerlink" title="步骤四，安装phpmyadmin-mysql数据库管理"></a>步骤四，安装phpmyadmin-mysql数据库管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo-get install phpmyadmin</div></pre></td></tr></table></figure>
<p>在安装过程中会要求选择Web server：apache2或lighttpd，使用空格键选定apache2，按tab键然后确定。然后会要求输入设置的Mysql数据库密码连接密码Password of the database’s administrative user。<br>然后将phpmyadmin与apache2建立连接，以我的为例：html目录在/var/www/html，phpmyadmin在/usr/share /phpmyadmin目录，所以就用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /usr/share/phpmyadmin /var/www/html</div></pre></td></tr></table></figure></p>
<p>创建软连接。<br>phpmyadmin测试：在浏览器地址栏中打开<a href="http://139.196.243.225/phpmyadmin" target="_blank" rel="external">http://139.196.243.225/phpmyadmin</a>.<br>以上ALMP的基本组件就安装完毕了；</p>
<h5 id="步骤五，设置ubuntu文件执行读写权限"><a href="#步骤五，设置ubuntu文件执行读写权限" class="headerlink" title="步骤五，设置ubuntu文件执行读写权限"></a>步骤五，设置ubuntu文件执行读写权限</h5><p>PHP网络服务器跟目录默认设置在：/var/www/html修改/var/www/html目录的读写权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 777 /var/www/html</div></pre></td></tr></table></figure></p>
<p>然后就可以写入php文件了。<br>参考资料：<br><a href="http://www.cnblogs.com/ada-zheng/p/3974963.html" target="_blank" rel="external">ubuntu下安装Apache+PHP+Mysql</a><br><a href="http://stackoverflow.com/questions/13276088/cant-start-mysql5-5-on-ubuntu-12-04-dpkg-dependency-problems" target="_blank" rel="external">Can’t start MySQL5.5 on Ubuntu 12.04 - “dpkg: dependency problems”</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP字符串]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h6 id="字符串常见的函数"><a href="#字符串常见的函数" class="headerlink" title="字符串常见的函数"></a>字符串常见的函数</h6><p>chop(); 移除右端字符<br>trim()；移除左右两端字符<br>ltirm(); 移除左端字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$msg = &quot;hello world \r\n&quot;;</div><div class="line">$name = trim($msg);</div></pre></td></tr></table></figure></p>
<p>printf();格式化字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$total = &quot;222&quot;;</div><div class="line">printf(&quot;total amount of order is %s.&quot;,$total);</div></pre></td></tr></table></figure></p>
<p>strtoupper();将字符串转换为大写；<br>strtolower;将字符串转为小写；<br>ucfirst(); 将字符串的第一个字符转换成大写；<br>unwords()；将字符串的每个单词的第一个字符转换为大写；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$total = 111;</div><div class="line">$msg = &quot;hello wORld&quot;;</div><div class="line">echo strtoupper($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">echo strtolower($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">echo ucfirst($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">echo ucwords($msg).&quot;&lt;/br&gt;&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>explode() 分割字符串；<br>strok(); 分割字符串，但一次只返回一个片段；<br>implode() 指定连接符连接数组中的每个元素组成字符串；<br>join() 指定连接符连接数组中的每个元素组成字符串;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">$array = explode(&quot; &quot;,$msg);</div><div class="line">$msg3 = join(&quot;===&quot;,$array);</div><div class="line">echo $msg3;</div><div class="line"></div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line"></div><div class="line">#测试strtok();</div><div class="line">$array = strtok($msg,&quot;o&quot;);</div><div class="line">echo $array;</div><div class="line">while($array != &quot;&quot;)&#123;</div><div class="line">  $array = strtok(&quot;o&quot;);</div><div class="line">  echo &quot;====&quot;.$array;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>substr(); 返回部分字符串;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo &quot;count = &quot;.strlen($msg);</div><div class="line">echo substr($msg,0,-1).&quot;&lt;/br&gt;&quot;; //得到 hello world</div><div class="line">echo substr($msg,-5).&quot;&lt;/br&gt;&quot;; //得到 orld!</div><div class="line">echo substr($msg,0,strlen($msg)); //得到hello world!</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>字符串比较<br>strcmp();//按字典排序，2大于12<br>strcasecmp();//忽略大小写，按字典排序<br>strnatcmp(); //按自然排序字符串，2小于12；</p>
<p>strlen(); //获取字符串长度<br>strstr();//查找字符串,返回从匹配关键字起的内容；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo strstr($msg,&quot;llo&quot;); //结果为llo world！</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>str_replace(string new_str,string replacement,string info); //字符串替换<br>substr_replace(string string, string replace,int start);//用字符串替换指定位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo substr_replace($msg,&quot;==&quot;,-1);//结果为hello world==</div><div class="line"></div><div class="line">$msg = &quot;hello world!&quot;;</div><div class="line">echo str_replace(&quot;o&quot;,&quot;===&quot;,$msg); //结果为hell===w===rld!</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="转义和反转义函数"><a href="#转义和反转义函数" class="headerlink" title="转义和反转义函数"></a>转义和反转义函数</h5><p>addslashes($str); //将单引号和双引号等需要转义的字符，用反斜杠转义<br>strislashes($str);//将字符串中的转义反斜杠去掉</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP语法基础]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h5 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a>PHP数据类型</h5><ul>
<li>Integer  – 整数</li>
<li>Float  – 浮点数，也叫Double，双精度值，用来表示实数；</li>
<li>String – 字符串，</li>
<li>Boolean – 布尔值，表示true或者false</li>
<li>Array – 数组，用来保存有相同类型的多个数据项</li>
<li>Object – 对象，用来保存类的实例</li>
<li>NULL – 没有被赋值，已经被重置或者被赋值为特殊值NULL的变量</li>
<li>resource – 特定的内置函数（例如数据库函数）将返回resource类型变量，代表外部资源（如数据库连接）</li>
</ul>
<h5 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h5><p>define(‘PRICE ‘, 10);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo PRICE;</div></pre></td></tr></table></figure></p>
<h5 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h5><p>一个点号 (.)，可以将极端文本连接成一个字符串。<br><code>echo $.msg. &#39;try do it &lt;br/&gt;&#39; ;</code></p>
<h5 id="单引号和双引号的区别？"><a href="#单引号和双引号的区别？" class="headerlink" title="单引号和双引号的区别？"></a>单引号和双引号的区别？</h5><p>单引号中，变量名称或者其他任何文本都会不经修改，发送给浏览器；<br>双引号中，变量名称会被解析，然后发给浏览器；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//假设$msg = &quot;info&quot;</div><div class="line">echo &quot;msg = $msg&quot;  #结果为 msg = info;</div><div class="line">echo &apos;msg = $msg&apos;  #结果为 msg = $msg;</div></pre></td></tr></table></figure></p>
<h5 id="引用操作符"><a href="#引用操作符" class="headerlink" title="引用操作符"></a>引用操作符</h5><p>引用操作符&amp;可以在关联赋值中使用，通常，在一个变量赋值给另外一个变量的时候，先产生原变量的一个副本，然后再将它保存在内存的其他地方，使用操作符&amp;可以避免产生这样的副本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$a = 5;</div><div class="line">$b = $a;</div><div class="line">$a = 7;</div><div class="line">echo &quot;a = $a, b = $b&quot;; //结果为a = 5, b = 7;</div><div class="line"></div><div class="line">$a = 5;</div><div class="line">$b = &amp;$a;</div><div class="line">$a = 7;</div><div class="line">echo &quot;a = $a, b = $b&quot;; //结果为a = 7, b = 7;</div></pre></td></tr></table></figure></p>
<h5 id="错误抑制操作符"><a href="#错误抑制操作符" class="headerlink" title="错误抑制操作符"></a>错误抑制操作符</h5><p>错误抑制操作符@可以在任何表达式面前使用，可以抑制一些警告，但要写一些错误处理的代码；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$a = @(57/0);</div></pre></td></tr></table></figure></p>
<p>如果在php配置文件中的track_errors特性，错误信息将会被保存在$php_errormsg中。</p>
<h5 id="执行操作符"><a href="#执行操作符" class="headerlink" title="执行操作符"></a>执行操作符</h5><p>一对反向单引号(<code> </code>  )，将反向单引号之间的命令当做服务器端的命令来执行；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$out = `ls -la`  ;</div><div class="line">echo &apos;&lt;pre&gt;&apos; .$out. &apos;&lt;/pre&gt;&apos;;</div></pre></td></tr></table></figure></p>
<h5 id="类型操作符"><a href="#类型操作符" class="headerlink" title="类型操作符"></a>类型操作符</h5><p>类型操作符instanceof，用来检查一个对象是否是特定类的实例；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class sampleClass&#123;&#125;;</div><div class="line">$myObject = new sampleClass();</div><div class="line">if ($myObject instanceof sampleClass) &#123;</div><div class="line">  echo “myObject is an instance of sampleClass”；</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="测试变量状态"><a href="#测试变量状态" class="headerlink" title="测试变量状态"></a>测试变量状态</h5><p>bool isset(mixed var);如果变量存在，则返回true，如果不存在则返回false；<br>void unset(mixed var);销毁变量；<br>bool empty(mixed var);检查变量，为null,为空字符串，为0，均返回true，其余返回false；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$msg = &quot;msg&quot;;</div><div class="line">if(isset($msg))</div><div class="line">  echo &quot;isset function return true&quot;;</div><div class="line">else</div><div class="line">  echo &quot;isset function return false&quot;;</div><div class="line">unset($msg);</div><div class="line">if(isset($msg))</div><div class="line">  echo &quot;isset function return true&quot;;</div><div class="line">else</div><div class="line">  echo &quot;isset function return false&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="访问表单数据的几种方式："><a href="#访问表单数据的几种方式：" class="headerlink" title="访问表单数据的几种方式："></a>访问表单数据的几种方式：</h5><ul>
<li>$name    //简短风格，需要将register_globals配置设为on，默认是off，有安全问题；</li>
<li>$_POST[“name”] ,$_GET[“name”]  //推荐使用，没有安全问题</li>
<li>$HTTP_POST_VARS[“name”]  //冗长风格，性能不好；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//hello.php</div><div class="line">&lt;form action=&quot;hello.php&quot; method=&quot;post&quot;&gt;</div><div class="line">      enter your name:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</div><div class="line">      enter your age:&lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</div><div class="line">     &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">Welcome &lt;?php echo$_POST[&quot;name&quot;];?&gt;  &lt;br/&gt;</div><div class="line">You are &lt;?php echo $_POST[&quot;age&quot;];?&gt; years old!</div></pre></td></tr></table></figure>
<h5 id="当函数返回值为false时，需要用“-”来判断"><a href="#当函数返回值为false时，需要用“-”来判断" class="headerlink" title="当函数返回值为false时，需要用“===”来判断"></a>当函数返回值为false时，需要用“===”来判断</h5><p>因为布尔值“true”和”false”可以分别用整数“1”和“0”来表示；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">function large($x,$y)&#123;</div><div class="line">  if((!isset($x)) || (!isset($y)))&#123;</div><div class="line">      return false;</div><div class="line">  &#125; else if ($x &gt; $y)&#123;</div><div class="line">      return $x;</div><div class="line">  &#125; else &#123;</div><div class="line">     return $y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$x = 0;</div><div class="line">$y = -1 ;</div><div class="line">$result = large($x,$y);</div><div class="line">echo &quot;return = $result &lt;br/&gt;&quot; ;</div><div class="line">#因为布尔值false可以用0来表示，所以为了确保0和false不混淆，用&quot;===&quot;</div><div class="line">if($result === &quot;false&quot;)&#123;</div><div class="line">  echo &quot;false&quot;;</div><div class="line">&#125; else &#123;</div><div class="line">  echo $result;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP数组]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h5 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//初始化数组</div><div class="line">$products = array(&apos;tires&apos;,&apos;oil&apos;,&apos;spark&apos;);</div><div class="line">//初始化关联数组</div><div class="line">$prices = array(&apos;tires&apos;=&gt;100,&apos;oil&apos;=&gt;10,&apos;spark&apos;=&gt;4);</div><div class="line">foreach($products as $product)&#123;</div><div class="line">  echo &quot;product = &quot; . $product. &quot; - price = &quot; . $prices[$product] . &quot;&lt;/br&gt; &quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//初始化数组</div><div class="line">$products = array(&apos;tires&apos;,&apos;oil&apos;,&apos;spark&apos;);</div><div class="line">//初始化关联数组</div><div class="line">$prices = array(&apos;tires&apos;=&gt;100,&apos;oil&apos;=&gt;10,&apos;spark&apos;=&gt;4);</div><div class="line"></div><div class="line">#关系型数组循环方式1</div><div class="line">while(list($product,$price) = each($prices)) &#123;</div><div class="line">  echo &quot;(1) - $product - $price &lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line">#关系型数组循环方式2</div><div class="line">foreach($prices as $key =&gt; $value) &#123;</div><div class="line">  echo &quot; (2) - &quot;. $key.&quot; - &quot;.$value.&quot; &lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#关系型数组循环方式3</div><div class="line">reset($prices);</div><div class="line">while($element = each($prices))&#123;</div><div class="line">   echo &quot; (3)- &quot;. $element[&apos;key&apos;].&apos; - &apos; .$element[&apos;value&apos;].&apos;&lt;/br&gt;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#特别注意，使用each函数将记录当前元素，如果脚本中两次使用该数组，应该使用reset（）重置元素至开始处</div><div class="line">reset($prices);</div><div class="line">while($element = each($prices))&#123;</div><div class="line">   echo &quot; (4) -&quot;. $element[&apos;key&apos;].&apos; - &apos; . $element[&apos;value&apos;].&apos;&lt;/br&gt;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 数组循环</div><div class="line">foreach($products as $product)&#123;</div><div class="line">  echo &quot;[1] - product = &quot;.$product .&quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$products = array(</div><div class="line">	array(&apos;code&apos; =&gt;&apos;CODE&apos;),</div><div class="line">    array(&quot;price&quot;=&gt;10)</div><div class="line">);</div><div class="line"></div><div class="line">for($row = 0; $row &lt; 3; $row ++) &#123;</div><div class="line">   while( list($key,$value) = each($products[$row])) &#123;</div><div class="line">   		echo $key .&quot;  - &quot; .$value .&quot;&lt;/br&gt;&quot;;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数组排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$products = array(&apos;fruit&apos;,&apos;apple&apos;,&apos;banana&apos;);</div><div class="line">$prices = array(100,79,88);</div><div class="line"></div><div class="line">#字符串升序</div><div class="line">sort($products);</div><div class="line">foreach($products as $product)&#123;</div><div class="line"> echo  $product.&quot; &quot;;</div><div class="line">&#125;</div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line"></div><div class="line">#数字升序</div><div class="line">sort($prices);</div><div class="line">foreach($prices as $price)&#123;</div><div class="line">  echo $price.&quot; &quot; ;</div><div class="line">&#125;</div><div class="line"># 反向排序 rsort($products);</div><div class="line"></div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line"></div><div class="line">#关联数组排序</div><div class="line">$prices = array(&apos;fruit&apos;=&gt; 5,&apos;apple&apos;=&gt;20,&apos;banana&apos;=&gt;3);</div><div class="line"></div><div class="line">#按价格升序排序</div><div class="line">asort($prices);</div><div class="line">while(list($product,$price) = each($prices))&#123;</div><div class="line">  echo $product . &apos; - &apos; .$price . &quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#按水果名升序排序</div><div class="line">ksort($prices);</div><div class="line">while(list($product,$price) = each($prices))&#123;</div><div class="line">  echo $product . &apos; - &apos; .$price . &quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line">#降序排 arsort($price)、 krsort($price)</div><div class="line"></div><div class="line">echo &quot;&lt;==&gt;&lt;/br&gt;&quot;;</div><div class="line">#多维数组排序,按价格升序</div><div class="line">$products = array(</div><div class="line">array(&apos;fruit&apos;,&apos;FRUIT&apos;,20),</div><div class="line">array(&apos;apple&apos;,&apos;APPLE&apos;,5),</div><div class="line">array(&apos;banana&apos;,&apos;BANANA&apos;,3)</div><div class="line">);</div><div class="line">function compare($x,$y) &#123;</div><div class="line">  if($x[2] == $y[2])&#123;</div><div class="line">    return 0;</div><div class="line">  &#125; else if($x[2] &lt; $y[2])&#123;</div><div class="line">    return -1;</div><div class="line">  &#125; else &#123;</div><div class="line">    return 1;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">usort($products,&apos;compare&apos;);</div><div class="line">for($row = 0;$row &lt; 3;$row ++)&#123;</div><div class="line">for($column = 0; $column &lt; 3; $column ++)&#123;</div><div class="line">    echo $products[$row][$column] . &apos; &apos;;</div><div class="line">  &#125;</div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#对数组重新排序</div><div class="line">$numbers = array(1,2,3,4,5,6,7,8,9);</div><div class="line">#对数组重新排序,应用场景每次登陆时，看到不一样的三张图片;</div><div class="line">shuffle($numbers);</div><div class="line">foreach($numbers as $number)&#123;</div><div class="line"> echo $number.&quot; &quot;;</div><div class="line">&#125;</div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">#对数组反序</div><div class="line">$numbers = array(1,3,5,7,4);</div><div class="line">$numbers = array_reverse($numbers);</div><div class="line">foreach($numbers as $number)&#123;</div><div class="line"> echo $number.&apos; &apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">#产生1-10,步长为2，数组;</div><div class="line">$numbers = range(1,10,2);</div><div class="line">foreach($numbers as $number)&#123;</div><div class="line"> echo $number.&apos; &apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo &quot;&lt;/br&gt;&quot;;</div><div class="line">$products = file(&quot;./fruit.txt&quot;);</div><div class="line">echo &quot;count = &quot;. count($products).&apos;&lt;/br&gt;&apos;;</div><div class="line">foreach($products as $product)&#123;</div><div class="line">   #分割字符串</div><div class="line">   $array = explode(&quot;\t&quot;,$product);</div><div class="line">   echo &apos;price = &apos;.$array[2].&apos;&lt;/br&gt;&apos;;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">#对每个元素应用任何函数</div><div class="line">$numbers = array(1,2,3,4);</div><div class="line">function my_print($value)&#123;</div><div class="line">  echo &quot;$value &lt;br/&gt;&quot;;</div><div class="line">&#125;</div><div class="line">array_walk($numbers,&apos;my_print&apos;);</div><div class="line"></div><div class="line">#统计数组元素个数count\sizeof()</div><div class="line">$array = array(1,2,3,2,1,1,1,1,1,1,6,7);</div><div class="line">echo &quot;count = &quot; . count($array).&apos; sizeof = &apos; .sizeof($array).&quot;&lt;/br&gt;&quot;;</div><div class="line"></div><div class="line">#统计数组中，每个元素出现的次数;</div><div class="line">$array = array_count_values($array);</div><div class="line">while(list($key,$value) = each($array))&#123;</div><div class="line">  echo $key . &apos; - &apos;.$value.&quot;&lt;/br&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#将数组转换成标量变量，输出变量的名称，必须是数组中变量的名称；</div><div class="line">$products = array(&apos;apple&apos;=&gt;5,&apos;banana&apos;=&gt;3);</div><div class="line">extract($products,EXTR_OVERWRITE);</div><div class="line">echo &quot;apple_price = $apple , banana_price = $banana&quot;;</div><div class="line"></div><div class="line">extract($products,EXTR_PREFIX_ALL,&quot;my_prefix&quot;);</div><div class="line">echo &quot;apple_price = $my_prefix_apple,banana_price = $my_prefix_banana&quot;;</div><div class="line"></div><div class="line">#extract_type常用值</div><div class="line">#EXTR_OVERWRITE 当关键字发生冲突时，覆盖已有的关键字；</div><div class="line">#EXTR_PREFIX_ALL 给关键字加前缀;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="踩坑提示"><a href="#踩坑提示" class="headerlink" title="踩坑提示"></a>踩坑提示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一行代码结束，别忘了分号（；）</div><div class="line">引用变量，别忘了$</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP读写文件]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h5 id="写文件步骤"><a href="#写文件步骤" class="headerlink" title="写文件步骤"></a>写文件步骤</h5><ol>
<li>打开文件，如果文件不存在，需要先创建它；</li>
<li>将数据写入这个文件；</li>
<li>关闭这个文件；</li>
</ol>
<h5 id="读文件步骤"><a href="#读文件步骤" class="headerlink" title="读文件步骤"></a>读文件步骤</h5><ol>
<li>打开这个文件，如果文件不能打开，说明文件不存在就正确地退出;</li>
<li>从文件中读出数据</li>
<li>关闭文件;</li>
</ol>
<h5 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># $_SERVER[&apos;DOCUMENT_ROOT&apos;] 表示当前文件的路径；</div><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;w&apos; ); </div><div class="line"></div><div class="line">//如果文件不能正确地打开则退出；</div><div class="line">if($fp) &#123;</div><div class="line">	echo &quot;&lt;p&gt;Your Order could not be processed at this time.Please try again later.&lt;/p&gt; &quot;;</div><div class="line">    exit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;w&apos; ); </div><div class="line">$outputstring = &quot;msg&quot;;</div><div class="line"></div><div class="line"># 使用二进制模式执行写操作，第三个参数可以避免一些跨平台的兼容问题；</div><div class="line">fwrite($fp,$outputstring,strlen($outputstring)); //写到字符串末尾或已经输入length字节就停止写入。</div></pre></td></tr></table></figure>
<h5 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;w&apos; );</div><div class="line">fclose($fp);  //正确关闭文件返回true，否则返回false;</div></pre></td></tr></table></figure>
<h5 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;rb&apos; );</div><div class="line">#判断文件何时读完</div><div class="line">while(!feof($fp))&#123;</div><div class="line">	$order = fgets($fp,999); //从文件中每次读取一行的内容；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="单行读取方式"><a href="#单行读取方式" class="headerlink" title="单行读取方式"></a>单行读取方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;rb&apos; );</div><div class="line"></div><div class="line">1、fgets($fp,999); //从文件中每次读取一行内容；</div><div class="line"></div><div class="line">2、fgetss($fp,999,tags); //每次读取一行内容，并且过滤字符串中包含的PHP或HTML特殊标记; tags为字符串数组表示，需要过滤的一些标记,如，html、body</div><div class="line"></div><div class="line">3、$order = fgetcsv($fp,100,&quot;\t&quot;)；//从文件从读取一行，并且在有制表符（\t）的地方将文件内容分行。</div><div class="line"></div><div class="line">4、fread($fp,length),从文件中读取length字节内容；</div></pre></td></tr></table></figure>
<h5 id="读取整个文件-（经过测试，发现读取整个文件的方法均不能实现，为何？）"><a href="#读取整个文件-（经过测试，发现读取整个文件的方法均不能实现，为何？）" class="headerlink" title="读取整个文件 （经过测试，发现读取整个文件的方法均不能实现，为何？）"></a>读取整个文件 （经过测试，发现读取整个文件的方法均不能实现，为何？）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$filename =$_SERVER[&apos;DOCUMENT_ROOT&apos;]/orders/order.txt;</div><div class="line">1、readfile（$filename）; //读取整个文件：</div><div class="line">2、file($filename);//读取整个文件，将结果发送到一个数组，每一行为一个元素；</div></pre></td></tr></table></figure>
<h5 id="文件的定位"><a href="#文件的定位" class="headerlink" title="文件的定位"></a>文件的定位</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;rb&apos; );</div><div class="line">1、rewind($fp); //将文件制定复位到文件的开始；</div><div class="line">2、ftell($fp); //报告文件指针在当前文件中的位置；</div><div class="line">3、fseek($fp,offset,current),//文件指针从current位置，移动offset个字节；</div></pre></td></tr></table></figure>
<h5 id="文件锁"><a href="#文件锁" class="headerlink" title="文件锁"></a>文件锁</h5><p><strong>使用文件锁的目的？</strong><br>假设两个用户试图同时订购同一件商品，那么生成的订单是第一个用户的还是第二个用户的；为了避免这样的情况，可以使用文件锁；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$fp = fopen( &quot;$_SERVER[&apos;DOCUMENT_ROOT&apos;]/../orders/orders.txt &quot;, &apos;ab&apos; );</div><div class="line">flock($fp,LOCK_EX)；//锁定文件的写操作；</div><div class="line">$outputstring = &quot;msg&quot;;</div><div class="line">fwrite($fp,$outputstring);</div><div class="line">flock($fp,LOCK_UN);//释放锁；</div><div class="line">fclose($fp);</div></pre></td></tr></table></figure></p>
<h5 id="flock操作值"><a href="#flock操作值" class="headerlink" title="flock操作值"></a>flock操作值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LOCK_SH 读操作锁定，文件可以共享，其他人可以读该文件；</div><div class="line">LOCK_EX 写操作，互斥，文件不能被共享</div><div class="line">LOCK_UN 释放已有的锁定</div><div class="line">LOCK_NB 防止在请求加锁时发生阻塞</div></pre></td></tr></table></figure>
<h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$DOCUMENT_ROOT=$_SERVER[&apos;DOCUMENT_ROOT&apos;];</div><div class="line">$fp = fopen(&quot;$DOCUMENT_ROOT/../orders/orders.txt&quot;,&apos;ab&apos;);</div><div class="line">flock($fp,LOCK_EX);</div><div class="line">fwrite($fp,&quot;write the file twice&quot;);</div><div class="line">flock($fp,LOCK_UN);</div><div class="line">$fp = fopen(&quot;$DOCUMENT_ROOT/../orders/orders.txt&quot;,&apos;rb&apos;);</div><div class="line">while(!feof($fp))&#123;</div><div class="line">   $content = fgets($fp,999);</div><div class="line">   echo &quot;content = &quot;.$content;</div><div class="line">&#125;</div><div class="line">fclose($fp);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP编码准则]]></title>
      <url>http://jianwl.com/2016/05/04/PHP%E7%BC%96%E7%A0%81%E5%87%86%E5%88%99/</url>
      <content type="html"><![CDATA[<ol>
<li>重用代码，一个新项目是这样创建的，将可重新利用的组件进行组合，将开发难度降低到最小；</li>
<li>用成熟的代码，增加可靠性；</li>
<li>系统的外部接口应该一致，其中包括用户接口和系统的外部接口；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL权限系统介绍]]></title>
      <url>http://jianwl.com/2016/05/04/MySQL%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//创建用户流云</div><div class="line">CREATE USER  &quot;liuyun&quot;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;</div></pre></td></tr></table></figure>
<h5 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">注：privileges -用户操作权限如SELECT、INSERT、UPDATE、DELETE，如果要授予所有权限则使用ALL</div><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;；</div><div class="line"></div><div class="line"># 对 test数据库的所有表具有增删改查的权限；</div><div class="line">GRANT SELECT,INSERT,UPDATE,DELETE  ON test.* TO &apos;liuyun&apos; @ &apos;localhost&apos;;</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">exit;</div><div class="line">mysql -u liuyun -p liuyun</div></pre></td></tr></table></figure>
<h4 id="更改用户密码"><a href="#更改用户密码" class="headerlink" title="更改用户密码"></a>更改用户密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#更改其他用户</div><div class="line">SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(&apos;newpassword&apos;);</div><div class="line"></div><div class="line">#当前用户修改密码</div><div class="line">SET PASSWORD = PASSWORD(&apos;newpassword&apos;);</div></pre></td></tr></table></figure>
<h4 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REVOKE SELECT,INSERT,UPDATE,DELETE ON test.*  FROM  &apos;liuyun&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>
<h5 id="查看某个用户有哪些权限"><a href="#查看某个用户有哪些权限" class="headerlink" title="查看某个用户有哪些权限"></a>查看某个用户有哪些权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW GRANTS FOR &apos;liuyun&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>
<h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP USER &quot;liuyun&quot; @ &quot;localhost&quot;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL练习]]></title>
      <url>http://jianwl.com/2016/05/04/MYSQL%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><blockquote>
<p>表student:stu_id、stu_name、stu_age、company   – 主键 stu_id<br>表class:class_id、class_name  – 主键 class_id<br>表result: stu_id、class_id、score – 组合主键 stu_id、class_id  外键 stu_id、class_id</p>
</blockquote>
<p>1、使用标准SQL嵌套语句查询选修课程名称为’math’的学员学号和姓名?<br>2、使用标准SQL嵌套语句查询选修课程编号为‘c_3’的学员姓名和所属单位?<br>3、使用标准SQL嵌套语句查询不选修课程编号为’c_3’的学员姓名和所属单位?<br>4、查询选修了课程的学员人数<br>5、查询选修课程超过2门的学员学号和所属单位?<br>6、查询每个学生所选的课程数，显示学号、学生名字、和所选课程的数目；</p>
<p>1、<br>result:<br>方法1：子查询<br>select class_id from class where class_name=’math’;<br>select student_id from result where class_id  in ()<br>select stu_id,stu_name from student where stu_id in ();<br>==&gt;<br>select stu_id,stu_name from student where stu_id in (select stu_id from result where class_id  in (select class_id from class where class_name=’math’));</p>
<p>方法2：等值联结<br>select student.stu_id,stu_name from student,class,result where class_name=’math’ AND class.class_id = result.class_id AND result.stu_id = student.stu_id;</p>
<p>2、<br>方法1：子查询<br>select stu_id from result where class_id = ‘c_3’;<br>select stu_name,company from student where stu_id in ();<br>==&gt;<br>select stu_name,company from student where stu_id in (select stu_id from result where class_id = ‘c_3’);<br>方法2：内联结<br>SELECT stu_name,company FROM student INNER JOIN result ON class_id = ‘c_3’ AND result.stu_id = student.stu_id;</p>
<p>3、<br>select stu_id from result where class_id = ‘c_3’;<br>select stu_name,company from student where stu_id NOT in();<br>==&gt;<br>select stu_name,company from student where stu_id NOT in(select stu_id from result where class_id = ‘c_3’);</p>
<p>4、<br>select  COUNT(DISTINCT stu_id) AS count from result;</p>
<p>5、<br>select stu_id from result group by stu_id having count(<em>) &gt;=2;<br>select stu_id ,company from student where stu_id in ();<br>==&gt;<br>select stu_id ,company from student where stu_id in (select stu_id from result group by stu_id having count(</em>) &gt;=2);</p>
<p>6、<br>create view course_count as select stu_id,count(*) as num from result group by stu_id;</p>
<p>select student.stu_id,stu_name,course_count.num from student,course_count where student.stu_id=course_count.stu_id;</p>
<h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p>查询A(ID,Name)表中第31至40条记录，ID作为主键可能是不是连续增长的列<br>SELECT * FROM A LIMIT 30,10；<br>Tips: 分页查询的下标索引是从0开始。</p>
<h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p>查询表B中存在ID重复三次以上的记录<br>select id,count(*) as num from B group by id having  num &gt; 3;</p>
<h4 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h4><blockquote>
<p>表 customers:   customerid、name、city、address<br>表 orders :   customerid、orderid、amount、date</p>
</blockquote>
<h6 id="每个用户买个几本书，注意是没有买过书的用户显示数量为0；"><a href="#每个用户买个几本书，注意是没有买过书的用户显示数量为0；" class="headerlink" title="每个用户买个几本书，注意是没有买过书的用户显示数量为0；"></a>每个用户买个几本书，注意是没有买过书的用户显示数量为0；</h6><p>select customers,count(orders.orderid) from customers left join orderid on customers.customerid = order.customerid group by customerid;</p>
<h6 id="检索出消费超过100元的vip用户"><a href="#检索出消费超过100元的vip用户" class="headerlink" title="检索出消费超过100元的vip用户;"></a>检索出消费超过100元的vip用户;</h6><p>select customerid,sum(orders.amount)  as sum from customers left join orders on customers.customerid = orders.customerid group by customerid  having sum &gt;= 100;</p>
<h6 id="统计每个用户每个订单消费超过50的总和"><a href="#统计每个用户每个订单消费超过50的总和" class="headerlink" title="统计每个用户每个订单消费超过50的总和"></a>统计每个用户每个订单消费超过50的总和</h6><p>select customerid,ifnull(sum(orders.amount),0)  as sum from customers left join orders on customers.customerid = orders.customerid and orders.amount &gt;= 50 group by customerid ;</p>
<h6 id="统计这个月每个用户的消费金额"><a href="#统计这个月每个用户的消费金额" class="headerlink" title="统计这个月每个用户的消费金额"></a>统计这个月每个用户的消费金额</h6><p>select customerid,ifnull(sum(orders.amount),0)  as sum from customers left join orders on customers.customerid = orders.customerid and  date between date(“2016-05-01”) and date(“2016-05-31”) group by customerid ;</p>
<h6 id="统计每个用户的消费金额"><a href="#统计每个用户的消费金额" class="headerlink" title="统计每个用户的消费金额"></a>统计每个用户的消费金额</h6><p>select customerid,ifnull(sum(orders.amount),0)  as sum from customers left join orders on customers.customerid = orders.customerid group by customerid ;</p>
<h5 id="ISNULL-IFNULL、NULLIF函数"><a href="#ISNULL-IFNULL、NULLIF函数" class="headerlink" title="ISNULL IFNULL、NULLIF函数"></a>ISNULL IFNULL、NULLIF函数</h5><p>1、isnull(expr)  expr为null，为1，不为空为0；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT ISNULL(null)     # 结果为 1</div><div class="line">SELECT ISNULL(1) #结果为0</div></pre></td></tr></table></figure></p>
<p>2、ifnull(expr1,expr2)，expr1为空,值等于expr2,不为空则为expr1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT userid,ifnull(item.itemid,0) from user left join item on item.userid = user.userid ; #结果为当用户没有下单订时，该用户检索出的订单将默认为0，而不是空；</div></pre></td></tr></table></figure></p>
<p>3、nullif(expr1,expr2), expr1不等于expr2，值为expr1，否则为空；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT NULLIF(201,111)    #结果为 201，因为201！=111,所以结果为201，否则为null；</div></pre></td></tr></table></figure></p>
<h5 id="WHERE-、HAVING、ON的区别是什么？"><a href="#WHERE-、HAVING、ON的区别是什么？" class="headerlink" title="WHERE 、HAVING、ON的区别是什么？"></a>WHERE 、HAVING、ON的区别是什么？</h5><p>ON，是表联结的条件；<br>WHERE，定义表行记录的过滤条件,<br>HAVING，定义分组的过滤条件；</p>
<h5 id="WHERE和HAVING的区别"><a href="#WHERE和HAVING的区别" class="headerlink" title="WHERE和HAVING的区别"></a>WHERE和HAVING的区别</h5><p>HAVING子句可以引用总计函数，而WHERE子句不能引用；<br>HAVING必须引用GROUP BY子句中的列或总计函数的列；<br>HVING位于GROUP BY 和ORDER BY之间；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL配置文件设置my.ini]]></title>
      <url>http://jianwl.com/2016/05/04/MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AEmy-ini/</url>
      <content type="html"><![CDATA[<p>//客户端设置<br>[client]</p>
<p>//设置mysql客户端连接服务器时默认使用端口<br>port = 3306</p>
<p>[mysql]</p>
<p>//设置mysql客户端默认字符集<br>default-character-set=utf8</p>
<p>//服务器端设置<br>[mysqld]</p>
<p>//mysql服务器默认监听(listen on)的TCP/IP端口<br>port=3306</p>
<p>//基准路径<br>basedir=”D:/software/MYSQL5.6”</p>
<p>//mysql数据库文件所在目录<br>datadir=”D:/software/MYSQL5.6/Data”</p>
<p>//服务端使用的字符集默认为latin1字符集，设置为utf8<br>character-set-server=utf8</p>
<p>//默认存储引擎为INNODB<br>default-storage-engine=INNODB</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL数据库设计准则]]></title>
      <url>http://jianwl.com/2016/05/03/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%87%86%E5%88%99/</url>
      <content type="html"><![CDATA[<p>设计数据库基本准则</p>
<ol>
<li>将同一类型的数据放于同一张表中;</li>
<li>避免保存冗余数据</li>
<li>避免修改、插入、删除不规则;</li>
<li>使用原子列表即对每一行的每一个属性只存一个数据;</li>
<li>避免多个空属性的设计</li>
<li>尽量避免使用可变长度列(varchar、text)，如果字段长度固定(char),速度更快一点，但要多占点空间。</li>
<li>通过简化权限，来提高查询速度</li>
<li>表的优化，随着更新和删除操作的发生，数据将变得支离破碎，通过OPTIMIZE TABLE tablename命令来修复表</li>
<li>不要创建不必要的索引；</li>
<li>在尽可能多的地方使用列的默认值，这样可以减少执行INSERT语句所花的时间。</li>
</ol>
<p>举例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">设计4张表</div><div class="line">CUSTOMERS: customerid、name、address、city</div><div class="line">ORDERS：orderid、customerid、amount、date</div><div class="line">BOOKS:isbn、author、title、price</div><div class="line">ORDER_ITEMS：orderid、isbn、quatity</div><div class="line"></div><div class="line">#为何不将address放于orders表中？</div><div class="line">1、假设一个用户下了多个订单，那么每个订单中都会出现用户的地址，重复存储，浪费空间;(冗余数据)</div><div class="line">2、假设用户换了地址，需要将每个订单中用户的地址进行更改；（修改不规则）</div><div class="line">3、每次在处理订单时，都需要插入julia的信息，当用户搬家出现两个地址时，不知道以哪个为准；（插入不规则）</div><div class="line">4、当用户收到货时，将订单从数据库中删除，那么意味着我们没有用户的地址记录不能再为它提供服务了;(删除不规则)</div><div class="line"></div><div class="line"># 假设我们需要记录每本书的书评;</div><div class="line">有两种方式:假设这家书店，只有一个书评员</div><div class="line">1、BOOKS表中添加一个字段，Review;</div><div class="line">2、创建一个新表BOOKS_REVIEWS:isbn、review</div><div class="line"></div><div class="line">假设书库太大，评书员只评论了一部分书籍，使用第一种方式，会出现大量书评为空的记录；而使用第二种方式，只存储有书评的书籍;</div></pre></td></tr></table></figure></p>
<p>Web数据库架构<br><img src="/images/Web服务器架构.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP错误和异常处理]]></title>
      <url>http://jianwl.com/2016/05/03/PHP%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h6 id="异常处理的思想"><a href="#异常处理的思想" class="headerlink" title="异常处理的思想"></a>异常处理的思想</h6><p>当try代码中出现异常后，catch块代码对异常进行处理;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">try&#123;</div><div class="line">  throw new Exception(&quot;A terrible error has occured&quot;,42);</div><div class="line">&#125;catch(Exception $e)&#123;</div><div class="line">   echo &quot; exception &quot;.$e-&gt;getCode().&quot; ：&quot;.$e-&gt;getMessage().&quot; &lt;/br&gt;&quot;.&quot; in &quot;.$e-&gt;getFile().&quot; on line &quot;.$e-&gt;getLine().&quot;&lt;br/&gt;&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h6 id="Exception类内置方法"><a href="#Exception类内置方法" class="headerlink" title="Exception类内置方法"></a>Exception类内置方法</h6><ul>
<li>getCode() 返回传递给构造器的代码号,不可重构</li>
<li>getMessage() 返回传递给构造器的消息，不可重构</li>
<li>getFile() 返回产生异常的代码文件的完整路径，不可重构</li>
<li>getLine() 返回代码文件中产生异常的代码行号，不可重构</li>
<li>getTrace() 返回一个包含产生异常的代码回退路径的数组，不可重构</li>
<li>__toString() 允许简单地显示一个Exception对象，并给出以上所有方法可以提供的信息，可以重构</li>
</ul>
<p>####### 自定义异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class myexception extends Exception&#123;</div><div class="line">  function __toString()&#123;</div><div class="line">     return &quot;&lt;table border=\&quot;1\&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Exception &quot;.$this-&gt;getCode().&quot;&lt;/strong&gt;: &quot;.$this-&gt;getMessage().&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/br&gt;&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">try &#123;</div><div class="line">  throw new myexception(&quot;happen error,parse error&quot;,405);</div><div class="line">&#125;catch(myexception $e)&#123;</div><div class="line">  echo $e;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis介绍]]></title>
      <url>http://jianwl.com/2016/05/03/Redis%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h5 id="Redis是什么？"><a href="#Redis是什么？" class="headerlink" title="Redis是什么？"></a>Redis是什么？</h5><ul>
<li><p>Redis是REmote DIctionary Server(远程字典服务器)的缩写，它以字典结构存储数据，并允许其他应用通过TCP协议读写字典中的内容。</p>
</li>
<li><p>Redis是一个开源的、高性能的基于键值对的缓存与存储系统，通过提供多种键值数据类型来适应不同的场景与存储需求；同时Redis的诸多高层级功能使其可以胜任消息队列、任务队列等不同的角色。</p>
</li>
</ul>
<h5 id="Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？"><a href="#Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？" class="headerlink" title="Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？"></a>Redis究竟有什么魅力吸引了如此多的用户，它有什么优势？</h5><h6 id="内存存储与持久化"><a href="#内存存储与持久化" class="headerlink" title="内存存储与持久化"></a>内存存储与持久化</h6><p>Redis数据库中所有的数据都存在于内存中，内存的读写速度远快于硬盘，因此Redis在性能上对比其他基于硬盘存储的数据库有非常明显的优势。将数据存储在内存也有一定的问题，比如程序退出后，内存中的数据会丢失，不过Redis提供了对持久化的支持，即可以将内存中的数据异步写入硬盘中，同时不影响继续提供服务。</p>
<h6 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h6><p>Redis可以为每个键设置生存时间(Time To Live,TTL),生存时间到期后会自动被删除，同时Redis支持丰富的数据类型和持久化的功能，让Redis可以作为缓存系统来使用；作为缓存系统，Redis还可以限制数据占用的最大内存，在数据达到空间限制后，可以按一定的规则，淘汰不需要的键。</p>
<h6 id="简单稳定"><a href="#简单稳定" class="headerlink" title="简单稳定"></a>简单稳定</h6>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP浅拷贝和深拷贝分析]]></title>
      <url>http://jianwl.com/2016/05/03/PHP%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>在PHP中，对象的赋值实际上是引用操作，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class person&#123;</div><div class="line"> public $name;</div><div class="line">&#125;</div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person2 = $person1;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;person1-&gt;name = &quot;.$person1-&gt;name.&quot; person2-&gt;name = &quot;.$person2-&gt;name;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>因为person1和person2都只是指向同一个内存区的引用,所以修改任何一个对象都会同时修改另外一个对象.</p>
<p>在有些时候，我们其实并不希望这种引用的赋值方式，我们希望能完全复制一个对象，这时候就需要用到php中的clone（对象的复制);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class person&#123;</div><div class="line"> public $name;</div><div class="line">&#125;</div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person2 = clone $person1;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;person1-&gt;name = &quot;.$person1-&gt;name.&quot; person2-&gt;name = &quot;.$person2-&gt;name;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>因为clone的方式实际上是对整个对象的内存区域，进行了一次复制并用新的对象变量指向新的内存，因此赋值后的对象和源对象之间基本上说是独立的。</p>
<p>这是什么意思？因为PHP中的对象拷贝采用的是浅拷贝的方法，如果对象里的属性成员本身就是引用类型的，clone以后这些成员并没有真正被复制，仍然是引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class address&#123;</div><div class="line"> public $palace;</div><div class="line"> public $no;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class person&#123;</div><div class="line">public $name;</div><div class="line">public $address;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$address = new address();</div><div class="line">$address-&gt;palace = &quot;shanghai&quot;;</div><div class="line">$address-&gt;no = 21;</div><div class="line"></div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person1-&gt;address = $address;</div><div class="line"></div><div class="line">$person2 = clone $person1;</div><div class="line"></div><div class="line">echo &quot;before modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">echo &quot;=====================================&lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">$person2-&gt;address-&gt;no = 33;</div><div class="line">$person2-&gt;address-&gt;palace = &quot;beijing&quot;;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;aflter modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;; //结果为 person1-&gt;address-&gt;palace = &quot;beijing&quot;, person2-&gt;address-&gt;palace = &quot;beijing&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>一般来讲，你用clone来复制对象，希望把两个对象彻底分开，不希望他们之间有任何关联，但由于clone的浅拷贝的特性，有时候会出现非期望的结果，就像上面的例子那样。<br>$person1 -&gt;address = $address;这句话是引用类型的赋值，person1-&gt;address和person2-&gt;address 实际上是指向同一个内存区对象的数据引用，因此修改其中任何一个都会影响其他两个。</p>
<p>如何解决这个问题呢？以下采用两种方法来解决：</p>
<ul>
<li>在上面的代码中，添加address的对象拷贝即可，但治标不治本;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$person2-&gt;address = clone $person1-&gt;address;</div></pre></td></tr></table></figure>
<ul>
<li>采用PHP中的__clone方法把浅拷贝转换为深拷贝</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class address&#123;</div><div class="line"> public $palace;</div><div class="line"> public $no;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class person&#123;</div><div class="line">public $name;</div><div class="line">public $address;</div><div class="line"></div><div class="line">public function __clone()&#123;</div><div class="line"> $this-&gt;address = clone $this-&gt;address; //深拷贝的引用;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$address = new address();</div><div class="line">$address-&gt;palace = &quot;shanghai&quot;;</div><div class="line">$address-&gt;no = 21;</div><div class="line"></div><div class="line">$person1 = new person();</div><div class="line">$person1-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$person1-&gt;address = $address;</div><div class="line"></div><div class="line">$person2 = clone $person1;</div><div class="line">echo &quot;before modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">echo &quot;=====================================&lt;br/&gt;&quot;;</div><div class="line">$person2-&gt;address-&gt;no = 33;</div><div class="line">$person2-&gt;address-&gt;palace = &quot;beijing&quot;;</div><div class="line">$person2-&gt;name = &quot;lisi&quot;;</div><div class="line"></div><div class="line">echo &quot;aflter modify person1 name = &quot;.$person1-&gt;name.&quot; palace = &quot;.$person1-&gt;address-&gt;palace.&quot; &lt;br/&gt;person2 name = &quot;.$person2-&gt;name.&quot; person2 palace = &quot;.$person2-&gt;address-&gt;palace. &quot;&lt;br/&gt;&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP面向对象基础知识]]></title>
      <url>http://jianwl.com/2016/05/03/PHP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>对象直接彼此互不相同，但具有一些共同点的对象集合</p>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>举个例子，我的自行车可以被认为自行车类的一个对象，他拥有所有自行车的共同特征；</p>
<h5 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h5><p>不同的类对同一个操作可以有不同的行为；</p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>在已有类的基础上创建新类，新类包含已有类的所有的方法和属性且可以添加新的方法；PHP中只支持单重继承类，不支持多重继承类；要实现多次继承可以通过接口；</p>
<h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>初始化对象和属性,其名称必须是 __constructor().<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class classname</div><div class="line">	function __construct($param)&#123;</div><div class="line">       echo &quot;Constructor called with parameter&quot;.$param.&quot;&lt;/br&gt;&quot;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h5 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h5><p>在销毁一个类之前执行的操作，在类的引用被重置或者超出作用域时<strong>自动发生</strong>。</p>
<h5 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h5><ul>
<li>public ,设置为public的属性和方法，可以在类的内部和外部使用；</li>
<li>private,设置为private的属性和方法，只能在类的内部进行访问,方法和属性将不会被继承；</li>
<li>protected,设置为protected的属性和方法，在类的子类和类的内部中可以进行访问；<br>注：未指明方法默认为public权限，属性一定要声明访问权限否则会报错;</li>
</ul>
<h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><ul>
<li>在函数前加final，这个函数将不能被在子类中被重载；</li>
<li>在类前加final，这个类将不能被继承;</li>
</ul>
<h5 id="Per-class常量"><a href="#Per-class常量" class="headerlink" title="Per-class常量"></a>Per-class常量</h5><p>使用操作符::指定常量所属的类来访问Per-class变量;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  class Math&#123;</div><div class="line">  	const pi = 3.14;</div><div class="line">  &#125;</div><div class="line">  echo &quot;Math :: pi = &quot;.Math::pi.&quot;\n&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>在方法前添加static关键字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Math&#123;</div><div class="line">   static function squared($input)&#123;</div><div class="line">   	return $input *$input;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">echo Math::squared(8);</div></pre></td></tr></table></figure></p>
<h5 id="检查类的类型和类型提示"><a href="#检查类的类型和类型提示" class="headerlink" title="检查类的类型和类型提示"></a>检查类的类型和类型提示</h5><p>instanceof可以检查一个对象是否是特定类的实例;是否实现了某个接口；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line"> public function method1()&#123;</div><div class="line">   echo &quot;method1&quot;;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">interface C &#123;</div><div class="line">  public function method3();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extends A implements C&#123;</div><div class="line"> function method2()&#123;</div><div class="line">    echo &quot;method2&quot;;</div><div class="line"> &#125;</div><div class="line"> function method3()&#123;</div><div class="line">     echo &quot;method3&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$b = new B();</div><div class="line">$a = new A();</div><div class="line"></div><div class="line">if($b instanceof A)&#123;</div><div class="line">   echo &quot;\$a is an object of B &lt;br/&gt;&quot;;</div><div class="line"></div><div class="line">&#125;else&#123;</div><div class="line">   echo &quot;\$a is not an object of B&lt;br/&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if($b instanceof C)&#123;</div><div class="line">   echo &quot;\$b implements interface c&quot;;</div><div class="line">&#125;else &#123;</div><div class="line">   echo &quot;\$b don&apos;t implements interface c&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="类提示的思想"><a href="#类提示的思想" class="headerlink" title="类提示的思想"></a>类提示的思想</h5><p>指定参数传入的类型，如果不是传入该类型参数将报错；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function check_hint(B $someclass)&#123;&#125;; //如果传入的参数类型不是B的实例，将报错;</div></pre></td></tr></table></figure></p>
<h5 id="延迟静态绑定"><a href="#延迟静态绑定" class="headerlink" title="延迟静态绑定"></a>延迟静态绑定</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//输出的结果为 who method of class B;</div><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line">   public static function who()&#123;</div><div class="line">     echo &quot;who method of class A&quot;;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public static function test()&#123;</div><div class="line">     echo static::who(); //here comes later static binding;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extends A&#123;</div><div class="line">   public static function who()&#123;</div><div class="line">     echo &quot;who method of class B&quot;;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">B::test();</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h5 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h5><p> call方法用来监控一个对象中的其他方法，如果试着调用一个对象中不存在或被权限控制中的方法，__call方法将被自动调用;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line">  public function __call($name,$arguments)&#123;</div><div class="line">     echo &quot;call of method is =&gt;&quot;.$name.&quot; &lt;br/&gt;&quot;;</div><div class="line">     echo &quot;arguments is&quot;.implode(&quot;,&quot;,$arguments).&quot;&lt;br/&gt;&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$a = new A();</div><div class="line">$a-&gt;callMe(&quot;bac&quot;,&quot;123&quot;,&quot;www&quot;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h5 id="类转换为字符串"><a href="#类转换为字符串" class="headerlink" title="类转换为字符串"></a>类转换为字符串</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class A&#123;</div><div class="line">public $name;</div><div class="line">function __toString()&#123;</div><div class="line"> return (var_export($this,TRUE));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$a = new A();</div><div class="line">$a-&gt;name = &quot;zhangsan&quot;;</div><div class="line">$a-&gt;__toString();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL数据类型]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CHAR		1~255个字符的定长字符串，它的长度必须在创建时规定</div><div class="line">NCHAR		CHAR的特殊形式，用来支持多字节或Unicode字符</div><div class="line">NVARCHAR	TEXT的特殊形式，用来支持多字节或Unicode字符</div><div class="line">TEXT(也称 VARCHAR) 边长文本</div></pre></td></tr></table></figure>
<h5 id="变长字符串和定长字符串的区别？"><a href="#变长字符串和定长字符串的区别？" class="headerlink" title="变长字符串和定长字符串的区别？"></a>变长字符串和定长字符串的区别？</h5><p>边长字符串存储任意长度的文本，其最大长度随不同的数据类型和DBSM而变化<br>定长字符串接收长度固定的字符串，其长度是在创建表时指定的</p>
<h5 id="为何不全用变长字符串？"><a href="#为何不全用变长字符串？" class="headerlink" title="为何不全用变长字符串？"></a>为何不全用变长字符串？</h5><p>DBSM处理定长字符串的速度比处理变长的快，所以许多DBSM不允许对变长列进行索引。</p>
<h5 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BIT		 单个二进制位值，或者为0或者为1</div><div class="line">DECIMAL	 定点或精读可变的浮点值</div><div class="line">FLOAT    浮点值</div><div class="line">INT	     4字节整数值	支持-2147483648~2147483647的值</div><div class="line">REAL     4字节浮点值</div><div class="line">SMALLINT 2字节整数值，支持-32768~32767的值</div><div class="line">TINYINT  1字节整数值，支持0~255的值</div></pre></td></tr></table></figure>
<h5 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DATE	      日期值</div><div class="line">DATETIME      日期时间值</div><div class="line">SMALLDATETIME 日期时间，精确到分</div><div class="line">TIME	      时间值</div></pre></td></tr></table></figure>
<h5 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BINARY 		定长二进制数据，最大长度255B到8000B</div><div class="line">LONG RAW	变长二进制数据,最长2GB</div><div class="line">RAW			定长二进制数据，最多255B</div><div class="line">VARBINARY   变长二进制数据，最大长度255B到8000B</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL事务处理]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h5 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h5><p>事务，可以保证一组操作中，不会中途停止，它们要么全部执行，要么就不执行。</p>
<h1 id="事务处理的术语"><a href="#事务处理的术语" class="headerlink" title="事务处理的术语"></a>事务处理的术语</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">事务(transaction) 指一组SQL语句</div><div class="line">回退(rollback) 指撤销指定SQL语句的过程</div><div class="line">提交(commit) 指将未存储的SQL语句结果写入到数据库表</div><div class="line">保存点(savepoint) 指事务处理中设置的临时占位符，可以对它发布回退。</div></pre></td></tr></table></figure>
<h5 id="可以回退哪些语句？"><a href="#可以回退哪些语句？" class="headerlink" title="可以回退哪些语句？"></a>可以回退哪些语句？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事务处理用来管理INSERT、UPDATE、DELETE语句，不能回退SELECT、CREATE、DROP操作。</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL存储过程]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>用户定义的一系列SQL语句的集合，设计特定表和其他对象的任务，用户可以调用存储过程。</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>通常是数据库已定义的方法，它接收参数并返回魔种类型的值并不涉及特定用户表.</p>
<h4 id="存储过程和函数的区别"><a href="#存储过程和函数的区别" class="headerlink" title="存储过程和函数的区别"></a>存储过程和函数的区别</h4><ol>
<li>函数只能通过RETURN语句返回单个值或对象，而存储过程不允许执行RETURN，它通过OUT参数返回多个值</li>
<li>函数可以嵌入SQL中使用，可以在SELECT中调用，而存储过程不行</li>
<li>存储过程实现的功能复杂一些，而函数的实现功能针对性更强一些</li>
<li>函数限制比较多，比如不能用临时表，只能用表变量，而存储过程的限制相对少一些。</li>
</ol>
<h4 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h4><ul>
<li>通过把处理封装在容易使用的单元中，简化复杂的操作</li>
<li>多个开发人员使用同一存储过程，保证了数据的一致性；</li>
<li>简化对变动的管理，如果业务逻辑有变化，只需要改动存储过程的代码，使用它的人员甚至都不需要知道这些变化。</li>
<li>因为存储过程通常以编译过的形式存储，而且性能更高；</li>
</ul>
<h4 id="存储过程的缺点"><a href="#存储过程的缺点" class="headerlink" title="存储过程的缺点"></a>存储过程的缺点</h4><ul>
<li>不同DBMS的存储过程语法不同，移植性较差；</li>
<li>编写存储过程比编写简单SQL语句复杂，要求比较高；</li>
</ul>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"># 创建存储过程</div><div class="line">CREATE PROCEDURE productpricing()</div><div class="line">BEGIN</div><div class="line">	SELECT AVG(prod_price) AS priceaverage</div><div class="line">    FROM products;</div><div class="line">END;</div><div class="line"></div><div class="line"># 调用存储过程</div><div class="line">CALL productpricing();</div><div class="line"></div><div class="line"># 删除存储过程</div><div class="line"></div><div class="line">DROP PROCEDURE productpricing();</div><div class="line"></div><div class="line"># 使用参数</div><div class="line">CREATE PROCEDURE productpricing(</div><div class="line">	OUT pl DECIMAL(8,2),</div><div class="line">    OUT ph DECIMAL(8,2),</div><div class="line">    OUT pa DECIMAL(8,2)</div><div class="line">)</div><div class="line">BEGIN</div><div class="line">	SELECT Min(prod_price)</div><div class="line">    INTO pl</div><div class="line">    FROM products;</div><div class="line">    SELECT Max(prod_price)</div><div class="line">    INTO ph</div><div class="line">    FROM products;</div><div class="line">	SELECT AVG(prod_price)</div><div class="line">    INTO pa</div><div class="line">    FROM products;</div><div class="line">END;</div><div class="line"></div><div class="line">提示：DECIMAL(8,2)表示输出的数总共有8位，小数点有2位；</div><div class="line"></div><div class="line"># 调用，所有MYSQL变量名都必须以@开始</div><div class="line">CALL productpricing(@pricelow,@pricehigh,@priceaverage);</div><div class="line"></div><div class="line"># 显示</div><div class="line">SELECT @pricelow,@pricehigh,@priceaverage;</div><div class="line"></div><div class="line"># IN、OUT 参数</div><div class="line">CREATE PROCEDURE ordertotal(</div><div class="line">	IN onumber INT,</div><div class="line">    OUT ototal DECIMAL(8,2)</div><div class="line">)</div><div class="line">BEGIN</div><div class="line">	SELECT SUM(item_price * quantity)</div><div class="line">    FROM orderitems</div><div class="line">    WHERE order_num = onumber;</div><div class="line">    INTO ototal;</div><div class="line">END;</div><div class="line"></div><div class="line"># 调用</div><div class="line">CALL ordertotal(20005,@ototal);</div><div class="line"></div><div class="line"># 显示</div><div class="line">SELECT @ototal;</div><div class="line"></div><div class="line">提示：</div><div class="line">IN、OUT参数相当于高级语言中的函数的传值和传引用</div><div class="line">DECLARE定义局部变量</div><div class="line">SHOW PROCEDURE STATUS 可以查看存储过程列表</div></pre></td></tr></table></figure>
<p>参考资料：<br><a href="http://fqk.io/mysql-proceduce-function-diff/" target="_blank" rel="external">MySQL 存储过程和函数区别</a><br><a href="http://fqk.io/note-mysql-5/" target="_blank" rel="external">MySQL 笔记 5</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL视图]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h4 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h4><p>视图是虚拟的表，只包含使用时动态检索的查询，同时视图本身是不包含数据的，返回的数据是从其他表检索出来的。</p>
<h4 id="使用视图的好处？"><a href="#使用视图的好处？" class="headerlink" title="使用视图的好处？"></a>使用视图的好处？</h4><ul>
<li>保护数据，只让开发者看到表中的部分数据；</li>
<li>更改数据格式和表示，视图可返回与底层数据表的表示和格式不同的数据；</li>
<li>重用SQL；</li>
<li>简化复杂的SQL,在编写查询后，可以方便的重写它而不必知道其他查询细节</li>
<li>可以嵌套查询，支持子查询；</li>
</ul>
<h4 id="视图的规则"><a href="#视图的规则" class="headerlink" title="视图的规则"></a>视图的规则</h4><ol>
<li>视图需唯一命名</li>
<li>创建视图，必须具有足够的权限</li>
<li>视图不能索引，也不能关联触发器或默认值</li>
<li>视图可以和表一起使用</li>
<li>创建视图的数目没有限制</li>
<li>ORDER BY 可以用在视图中，若SELECT语句中也有ORDER BY，则会覆盖视图中的ORDER BY</li>
<li>视图可以嵌套</li>
<li>视图只做只读查询，不能将数据写回底层表；</li>
</ol>
<h4 id="视图的缺点"><a href="#视图的缺点" class="headerlink" title="视图的缺点"></a>视图的缺点</h4><p>因为视图不包含数据，所以每次使用视图是，都必须处理查询执行时的所有检索。如果使用多个联结和过滤创建了复杂的视图或者嵌套视图，性能可能下降的很厉害。</p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>视图一般只用于检索，而不用于更新</p>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 创建视图</div><div class="line">CREATE VIEW ProductCustomers AS</div><div class="line">SELECT cust_name,cust_contact,prod_id</div><div class="line">FROM Customers,Orders,OrderItems</div><div class="line">WHERE Customers.cust_id = Orders.cust_id</div><div class="line">AND OrderItems.order_num = Orders.order_num ;</div><div class="line"></div><div class="line"># 查询视图数据</div><div class="line">SELECT * FROM ProductCustomers;</div><div class="line"></div><div class="line"># 移除视图</div><div class="line">DROP VIEW ProductCustomers;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL创建表]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E5%88%9B%E5%BB%BA%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># 创建表</div><div class="line">CREATE TABLE Products(</div><div class="line"> prod_id	CHAR(10)	NOT NULL,</div><div class="line"> vend_id	CHAR(10) 	NOT NULL,</div><div class="line"> prod_name	CHAR(254)	DEFAULT &apos;xxx&apos;,</div><div class="line"> PRIMARY KEY  (prod_id)</div><div class="line">)ENGINE=InnoDB;</div><div class="line"></div><div class="line"># 创建索引</div><div class="line">CREATE INDEX indexname ON Products(prod_name);</div><div class="line"></div><div class="line"># 索引的作用</div><div class="line">1、索引用于数据过滤和数据排序</div><div class="line">2、索引改善检索操作性能，但降低了数据插入、修改、删除的性能；</div><div class="line">3、索引要占大量的存储空间</div><div class="line"></div><div class="line"></div><div class="line"># 添加列</div><div class="line">ALTER TABLE Products ADD prod_price INT;</div><div class="line"></div><div class="line"># 删除列</div><div class="line">ALTER TABLE Products DROP COLUMN prod_price;</div><div class="line"></div><div class="line">特别注意：更新/删除表之前最好做一个完整的备份，数据库的更改不能撤销;</div><div class="line"></div><div class="line">#定义外键</div><div class="line">ALTER TABLE Products</div><div class="line">ADD CONSTRAINT vend_id</div><div class="line">FOREIGN KEY(vend_id) REFERENCES Vendor(vend_id);</div><div class="line"></div><div class="line">#定义外键的好处</div><div class="line">两张表关联,保证数据的一致性</div><div class="line"></div><div class="line">#创建外键的条件</div><div class="line">外键是表中的一列，其值必须列在另一表的主键中；</div><div class="line"></div><div class="line">#重命名表</div><div class="line">RENAME TABLE Customers TO customers;</div></pre></td></tr></table></figure>
<h5 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h5><p>唯一标识表示表中的每一行的列；</p>
<h5 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h5><p>指定列名不为空；</p>
<h5 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h5><p>插入时，如果不给出值，自动采用默认值,MYSQL中默认值只支持常量，不允许使用函数</p>
<h5 id="引擎类型"><a href="#引擎类型" class="headerlink" title="引擎类型"></a>引擎类型</h5><ul>
<li>InnoDB是一个可靠的事务处理引擎，它不支持全文搜索</li>
<li>MEMORY在功能等同于MYISAM，但由于数据存储在内存中，速度很快(适合创建临时表)</li>
<li>MyISAM是一个性能极高的引擎，它支持全文搜索，但不支持事务处理</li>
<li>引擎可以混用，但外键不能跨引擎</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL更新删除数据]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>UPDATE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 更新一条数据</div><div class="line">UPDATE Customers SET cust_email = &quot;kim@163.com&quot; WHERE cust_id = &quot;10005&quot;;</div><div class="line"></div><div class="line">特别注意：别忘了WHERE条件，否则将影响整张表;</div></pre></td></tr></table></figure></p>
<p>DELETE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 删除一条记录</div><div class="line">DELETE FROM Customers WHERE cust_id = &quot;10006&quot;;</div><div class="line"></div><div class="line">特别注意：别忘了WHERE条件，否则将删除整张表,推荐先用SELECT查询需要删除的记录，再执行删除操作;</div><div class="line"></div><div class="line">#删除整个表</div><div class="line">DROP TABLE Customers;</div><div class="line"></div><div class="line"># 外键的好处</div><div class="line">使用外键确保完整性的好处是，可以防止删除某个关系需要用到的行。</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL插入数据]]></title>
      <url>http://jianwl.com/2016/04/29/SQL%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>INSERT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">INSERT INTO Customers VALUES(NULL, &apos;张三&apos;);</div><div class="line"></div><div class="line"># 推荐更安全、扩展性更好的方式</div><div class="line">INSERT INTO Customers(cust_id, cust_name) VALUES(NULL, &apos;张三&apos;);</div><div class="line"></div><div class="line"># 进一步，无需插入 AUTO_INCREMENT属性的列</div><div class="line">INSERT INTO Customers(cust_name) VALUES(&apos;张三&apos;);</div><div class="line"></div><div class="line"># 插入多条数据，单条语句插入比多次语句性能更高</div><div class="line">INSERT INTO Customers(cust_name) VALUES(&apos;张三&apos;),(&apos;李四&apos;);</div><div class="line"></div><div class="line"># 插入检索出来的数据</div><div class="line">INSERT INTO Customers(cust_id,cust_name) SELECT cust_id,cust_name FROM Old_Customers;</div><div class="line"></div><div class="line"># 从一个表复制到另外一个表</div><div class="line">CREATE TABLE CustCopy AS SELECT * FROM Customers;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MYSQL数据库无法插入中文]]></title>
      <url>http://jianwl.com/2016/04/29/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%B3%95%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87/</url>
      <content type="html"><![CDATA[<h5 id="MYSQL无法插入中文，报Incorrect-string-value-‘-xD5-xC5-xC8-xFD’错误"><a href="#MYSQL无法插入中文，报Incorrect-string-value-‘-xD5-xC5-xC8-xFD’错误" class="headerlink" title="MYSQL无法插入中文，报Incorrect string value: ‘\xD5\xC5\xC8\xFD’错误"></a>MYSQL无法插入中文，报Incorrect string value: ‘\xD5\xC5\xC8\xFD’错误</h5><p><code>mysql&gt; status;</code><br><img src="/images/mysql中文无法插入.png" alt=""></p>
<h5 id="使用的库的字符集是latin1，该字符集不支持中文字符"><a href="#使用的库的字符集是latin1，该字符集不支持中文字符" class="headerlink" title="使用的库的字符集是latin1，该字符集不支持中文字符"></a>使用的库的字符集是latin1，该字符集不支持中文字符</h5><p><code>mysql&gt; show CREATE TABLE person1;</code><br><img src="/images/mysql中文无法插入2.png" alt=""></p>
<h5 id="修改表字符集"><a href="#修改表字符集" class="headerlink" title="修改表字符集"></a>修改表字符集</h5><p><code>mysql&gt; ALTER TABLE person1 character set utf8;</code></p>
<p><code>mysql&gt; show CREATE TABLE person1;</code><br><img src="/images/mysql中文无法插入3.png" alt=""></p>
<h5 id="修改字段字符集"><a href="#修改字段字符集" class="headerlink" title="修改字段字符集"></a>修改字段字符集</h5><p><code>mysql&gt; ALTER TABLE person1 modify name varchar(20) character set utf8;</code><br><img src="/images/mysql中文无法插入4.png" alt=""></p>
<h5 id="这时在windows下的CMD控制台的MYSQL中执行"><a href="#这时在windows下的CMD控制台的MYSQL中执行" class="headerlink" title="这时在windows下的CMD控制台的MYSQL中执行"></a>这时在windows下的CMD控制台的MYSQL中执行</h5><p><code>mysql&gt;INSERT INTO person1(id,name,age) VALUES (7,&#39;张三&#39;,21);</code><br><img src="/images/mysql中文无法插入5.png" alt=""></p>
<h5 id="发现仍然报错，什么原因呢？"><a href="#发现仍然报错，什么原因呢？" class="headerlink" title="发现仍然报错，什么原因呢？"></a>发现仍然报错，什么原因呢？</h5><p><img src="/images/mysql中文无法插入6.png" alt=""><br>因为CMD控制台的编码是GBK的，但MYSQL的编码是UTF8所以出错;最后，用第三方软件navicate，在person1表中，执行刚刚的插入操作是可以成功.</p>
<h5 id="最后设置数据库的编码："><a href="#最后设置数据库的编码：" class="headerlink" title="最后设置数据库的编码："></a>最后设置数据库的编码：</h5><p><code>mysql&gt;show variables like &#39;character_set_%&#39;;</code><br><img src="/images/mysql中文无法插入7.png" alt=""><br><code>mysql&gt;set character_set_database=utf8;</code><br><img src="/images/mysql中文无法插入8.png" alt=""></p>
<h5 id="关于MYSQL数据库的配置"><a href="#关于MYSQL数据库的配置" class="headerlink" title="关于MYSQL数据库的配置"></a>关于MYSQL数据库的配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1、修改mysql/my.ini 配置文件</div><div class="line">[client]</div><div class="line">default-character-set=utf8</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">default-storage-engine=INNODB</div><div class="line">character-set-server=utf8</div><div class="line"></div><div class="line">2、重启MYSQL</div><div class="line">#windows下，停止MYSQL服务</div><div class="line">net stop mysql</div><div class="line"></div><div class="line">#启动服务</div><div class="line">net start mysql</div><div class="line"></div><div class="line">3、修改成功，进入MYSQL查看字符集</div><div class="line">show variables like &apos;character_set_%&apos;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL常用函数]]></title>
      <url>http://jianwl.com/2016/04/28/SQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h4 id="常用文本处理函数"><a href="#常用文本处理函数" class="headerlink" title="常用文本处理函数"></a>常用文本处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Concat(str1,str2,str3)拼接字符串</div><div class="line">Ltrim()	去掉左边的空格</div><div class="line">Trim()	去掉所有的空格</div><div class="line">Left()	返回串左边的字符</div><div class="line">Locate() 找出串的一个子串</div><div class="line">Lower() 将串转换为小写</div><div class="line">Right() 返回串右边的字符</div><div class="line">Soundex() 返回串的SOUNDEX值</div><div class="line">SubString() 返回子串的字符</div><div class="line">Upper() 将串转换为大写</div></pre></td></tr></table></figure>
<h4 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">AddDate() 增加一个日期（天、周等）</div><div class="line">AddTime() 增加一个时间（时、分等）</div><div class="line">CurDate() 返回当前日期</div><div class="line">CurTime() 返回当前时间</div><div class="line">Date()</div><div class="line">DateDiff()</div><div class="line">Date_Add()</div><div class="line">Date_Format()</div><div class="line">Day()</div><div class="line">DayOfWeek()</div><div class="line">Hour()</div><div class="line">Minute()</div><div class="line">Month()</div><div class="line">Now()</div><div class="line">Second()</div><div class="line">Time()</div><div class="line">Year()</div><div class="line"></div><div class="line"># 实战</div><div class="line">SELECT cust_id, order_num FROM orders WHERE Date(order_date) BETWEEN &apos;2005-09-01&apos; AND &apos;2005-09-30&apos;;</div><div class="line"></div><div class="line">SELECT cust_id, order_num FROM orders WHERE Year(order_date) = 2005 AND Month(order_date) = 9;</div></pre></td></tr></table></figure>
<h4 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Abs() 绝对值</div><div class="line">Cos()</div><div class="line">Exp() 指数</div><div class="line">Mod()</div><div class="line">Pi() </div><div class="line">Rand()</div><div class="line">Sin()</div><div class="line">Sqrt() 平方根</div><div class="line">Tan() 正切值</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL查询]]></title>
      <url>http://jianwl.com/2016/04/28/SQL%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h4 id="SQL注释"><a href="#SQL注释" class="headerlink" title="SQL注释"></a>SQL注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  --    行内注释</div><div class="line">/* */   多行注释</div></pre></td></tr></table></figure>
<h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"># 返回不同的值</div><div class="line">SELECT DISTINC name FROM person;</div><div class="line"></div><div class="line">特别注意：不能部分使用DISTINC，如, SELECT DISTINC name, age FROM person;查询结果显示name和age都不同的记录</div><div class="line"></div><div class="line"># 分页查询</div><div class="line">SELECT name, age FROM person LIMIT 1,4;</div><div class="line"></div><div class="line"># 排序检索数据</div><div class="line">SELECT name, age FROM person ORDER BY name DESC, age DESC;</div><div class="line"></div><div class="line"># 过滤查询</div><div class="line">SELECT name, age FROM person WHERE age BETWEEN 23 AND 30;</div><div class="line"></div><div class="line">## WHERE子句操作符</div><div class="line">    &lt;&gt;				不等于</div><div class="line">    !=				不等于</div><div class="line">    &lt;=				小于等于</div><div class="line">    &gt;=				大于等于</div><div class="line">    BETWEEN AND	    在指定两值之间</div><div class="line">    IS NULL 	    为NULL的值</div><div class="line">    OR				匹配任一条件的记录</div><div class="line">    IN				指定匹配清单的关键字，功能和OR相当,多个条件用逗号隔开如：IN(condition1,condition2)</div><div class="line">    NOT			    否定其后跟的所有条件</div><div class="line"></div><div class="line">特别注意：ORDER BY 应放于最后一条子语句，否则报错; 默认排序为升序ASC; DESC关键字只应用到直接位于其前面的列名。</div><div class="line"></div><div class="line"># 模糊查询</div><div class="line">SELECT name, age FROM person WHERE name LIKE &apos;张%&apos;;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">%  	任意0个、1个、多个字符,可以匹配任何东西，除了NULL</div><div class="line">_	有且仅匹配一个字符</div><div class="line"></div><div class="line"></div><div class="line"># 字段使用别名</div><div class="line">SELECT name AS new_name,age FROM person;</div><div class="line"></div><div class="line"># 表使用别名</div><div class="line">SELECT cust_name,cust_contact FROM Customers AS C,Orders AS O WHERE C.cust_id = O.cust_id;</div><div class="line"></div><div class="line"># 分组</div><div class="line">SELECT age, name,COUNT(*) AS numbers FROM person GROUP BY age,name;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">1、分组中如果包含具有NULL值的行，则NULL将作为一个分组返回，如果列中包含多个NULL，将它们分为同一组；</div><div class="line">2、除聚集计算外(如：COUNT()、MAX()等)，SELECT语句中的每一列都必须在GROUP BY 子句中给出；</div><div class="line">3、GROUP BY 子句可以包含任意数目的列</div><div class="line"></div><div class="line"># 分组过滤</div><div class="line">SELECT age, name, COUNT(*) AS numbers FROM person GROUP BY age,name HAVING COUNT(*) &gt; 2;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">HAVING等同于WHERE，唯一的区别是，HAVING可用于分组过滤，WHERE不可以。WHERE是分组前的过滤，HAVING是分组后的过滤；</div><div class="line"></div><div class="line"># 子查询练习</div><div class="line">查询所有购买order_item = 1的用户信息；</div><div class="line">SELECT order_num FROM orderitems where order_item=1;</div><div class="line"></div><div class="line">Select cust_id from orders where order_num in (SELECT order_num FROM orderitems where order_item=1);</div><div class="line"></div><div class="line">SELECT cust_name,cust_address,cust_city FROM customer WHERE cust_id in (Select cust_id from orders where order_num in (SELECT order_num FROM orderitems where order_item=1));</div><div class="line"></div><div class="line"># 等值联结查询</div><div class="line">SELECT vend_name, prod_name, prod_price FROM Vendors, Products WHERE Vendors.vend_id = Products.vend_id;</div><div class="line"></div><div class="line">特别注意：联结两表时，实际要做的是将第一个表的每一行和第二个表的每一行进行配对;如果没有联结条件，检索出行的数目将是两个表行数的乘积；</div><div class="line"></div><div class="line"># 内联查询</div><div class="line">SELECT vend_name, prod_name, prod_price FROM Vendors INNER JOIN Products ON Vendors.vend_id = Products.vend_id;</div><div class="line"></div><div class="line">特别注意：内联条件用特定的ON而不是WHERE; 匹配两表都包含的记录，不包含列为NULL记录；</div><div class="line"></div><div class="line"># 自联结查询</div><div class="line">SELECT c1.cust_id,c1.cust_name,c1.cust_contact FROM Custormer AS c1,Custormer AS c2 WHERE c1.cust_name = c2.cust_name AND c2.cust_contact = &quot;JIM jones&quot;;</div><div class="line"></div><div class="line">特别注意：别忘了c1.cust_name = c2.cust_name的条件！两表联结时，检索出行的数目是两表行数的乘积；</div><div class="line"></div><div class="line"># 外联结查询</div><div class="line">左外联：SELECT c.cust_id,o.order_num FROM Custormers AS c LEFT OUTER JOIN Orders AS o ON c.cust_id = o.cust_id;</div><div class="line"></div><div class="line">右外联：SELECT c.cust_id,o.order_num FROM Custormers AS c RIGHT OUTER JOIN Orders AS o ON c.cust_id = o.cust_id;</div><div class="line"></div><div class="line">特别注意：外联包含没有关联的行，RIGHT或LEFT指定了包含其所有行的表,RIGHT指出使用右边表的所有行，LEFT则反之；且，如果包含匹配项为NULL的记录；</div><div class="line"></div><div class="line"># 带聚合函数的联结</div><div class="line">SELECT c.cust_id,COUNT(*) AS num FROM Customers AS c INNER JOIN Orders AS o ON c.cust_id = o.cust_id GROUP BY c.cust_id;</div><div class="line"></div><div class="line"># 组合查询</div><div class="line">SELECT cust_name,cust_city FROM Customers WHERE cust_name = &apos;张三&apos; UNION SELECT cust_name,cust_city FROM Customers WHERE cust_city = &quot;shangHai&quot;;</div><div class="line"></div><div class="line">等价于 SELECT cust_name,cust_city FROM Customers WHERE cust_name = &apos;张三&apos; OR cust_city = &apos;shangHai&apos;;</div><div class="line"></div><div class="line">特别注意：</div><div class="line">1、组合查询各个查询，查询列名应相同，且顺序也要一致；</div><div class="line">2、UNION必须由两条或以上的SELECT语句组成</div><div class="line">3、默认去除重复行，使用UNION ALL可以返回所有行</div></pre></td></tr></table></figure>
<h1 id="总结回顾"><a href="#总结回顾" class="headerlink" title="总结回顾"></a>总结回顾</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># SELECT子句及其顺序</div><div class="line"></div><div class="line">SELECT		要返回的列或表达式</div><div class="line">FROM        从中检索数据的表</div><div class="line">WHERE	    行级过滤</div><div class="line">GROUP BY	分组说明</div><div class="line">HAVING		分组过滤</div><div class="line">ORDER BY	输出排序顺序</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优化SQL性能小结]]></title>
      <url>http://jianwl.com/2016/04/28/%E4%BC%98%E5%8C%96SQL%E6%80%A7%E8%83%BD%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h6 id="应用层面优化技巧"><a href="#应用层面优化技巧" class="headerlink" title="应用层面优化技巧"></a>应用层面优化技巧</h6><p>1、注意LIKE模糊查询的使用，避免%%，可以使用后面带% ，双%是不走索引的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句： select * from admin where admin_name like ‘%de%&apos;</div><div class="line"></div><div class="line">优化为： select * from admin where admin_name &gt;=&apos;de&apos; and admin_nam &lt;&apos;df&apos; （注意不是等效的这里试试提供优化的思路）</div></pre></td></tr></table></figure></p>
<p>2、尽量避免在列上进行运算，这样会导致索引失效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原语句： select * from admin where year(admin_time)&gt;2014</div><div class="line"></div><div class="line">优化为： select * from admin where admin_time&gt; &apos;2014-01-01′</div></pre></td></tr></table></figure></p>
<p>3、仅列出需要查询的字段，这对速度不会有明显影响，主要考虑节省内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句： select * from admin</div><div class="line"></div><div class="line">优化为： select admin_id,admin_name,admin_password from admin</div></pre></td></tr></table></figure></p>
<p>4、使用批量插入语句节省交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">原来语句：insert into admin(admin_name,admin_password) values (‘test1′,&apos;pass1′);</div><div class="line"></div><div class="line">insert into admin(admin_name,admin_password) values (‘test2′,&apos;pass2′);</div><div class="line"></div><div class="line">insert into admin(admin_name,admin_password) values (‘test3′,&apos;pass3′)</div><div class="line"></div><div class="line">优化为： insert into admin(admin_name,admin_password) values(‘test1′,&apos;pass1′),(‘test2′,&apos;pass2′),(‘test3′,&apos;pass3′)</div></pre></td></tr></table></figure></p>
<p>5、limit的基数比较大时使用between。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句：select * from admin order by admin_id limit 100000,10</div><div class="line"></div><div class="line">优化为：  select * from admin where admin_id between 100000 admin 100010 order by admin_id</div></pre></td></tr></table></figure></p>
<p>6、不要使用rand函数获取多条随机记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原来语句： select * from admin order by rand() limit 20</div><div class="line"></div><div class="line">优化为： select * from admin as t1 Join(select round(rand()*((select max(admin_id) from admin)-(select min(id) from admin))+(select min(id) from admin)) as id) as t2 where t1.id&gt;=t2.id order by t1.id limit</div></pre></td></tr></table></figure></p>
<p>7、避免使用NULL<br>8、不要做无谓的排序操作，而应尽可能在索引中完成排序<br>9、不要使用count(col)，而应该是count(*)</p>
<h6 id="count-col-和count-有什么区别？"><a href="#count-col-和count-有什么区别？" class="headerlink" title="count(col)和count(*)有什么区别？"></a>count(col)和count(*)有什么区别？</h6><p>count(*)通常是对主键进行索引扫描，统计表中所有符合的记录总数;而count(col)是对某个字段进行扫描，统计表中所有符合COL的记录总数;顺便提一下，count(col)统计记录总数时，是不包含col值为NULL的记录的；</p>
<h6 id="count时的WHERE执行原理？"><a href="#count时的WHERE执行原理？" class="headerlink" title="count时的WHERE执行原理？"></a>count时的WHERE执行原理？</h6><p>count的时候，如果有WHERE限制的情况，总是需要对MYSQL进行全表遍历，然后返回所得记录的总数；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Web攻击技术]]></title>
      <url>http://jianwl.com/2016/04/28/Web%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>Web攻击模式主要有以下两种：</p>
<ul>
<li>主动攻击</li>
<li>被动攻击</li>
</ul>
<h3 id="主动攻击"><a href="#主动攻击" class="headerlink" title="主动攻击"></a>主动攻击</h3><p>攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问这些资源。主动攻击力最具代表性的就是SQL注入攻击和OS命令注入工具。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//跨站脚本攻击</div><div class="line">比如修改用户信息时，将用户名字改为“ 张三 &lt;script&gt; ”,经浏览器解析后，造成意想不到的灾难。</div><div class="line"></div><div class="line">//SQL注入攻击</div><div class="line">假设需要查询参数为name=张三 &amp; state=1， 正常的输入URL是这样的http://xxx/get?name=张三&amp;state=1，如果在张三后面加上 &apos;--&apos; 就会导致 state=1的条件将被注释掉，类似于SQL --&gt; SELECT * FROM person WHERE name=张三 -- AND state=1</div></pre></td></tr></table></figure></p>
<h3 id="被动攻击"><a href="#被动攻击" class="headerlink" title="被动攻击"></a>被动攻击</h3><p>利用圈套策略执行攻击代码的攻击模式，在被动攻击过程中，攻击者不直接对目标web应用访问发起攻击。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket协议]]></title>
      <url>http://jianwl.com/2016/04/28/WebSocket%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h3 id="WebSocket技术为何出现？"><a href="#WebSocket技术为何出现？" class="headerlink" title="WebSocket技术为何出现？"></a>WebSocket技术为何出现？</h3><p>WebSocket技术的出现是为了解决HTTP协议的瓶颈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、一条连接只可发送一个请求</div><div class="line">2、请求只能从客户端开始，客户端不能接收除响应以外的指令。</div><div class="line">3、请求/响应首部未经压缩就发送，首部信息越大，延时越高。</div><div class="line">4、发送冗长的首部，每次互相发送相同的首部造成资源的浪费。</div><div class="line">5、可任意选择压缩格式，非强制压缩发送。</div></pre></td></tr></table></figure></p>
<h3 id="WebSocket技术的主要特点"><a href="#WebSocket技术的主要特点" class="headerlink" title="WebSocket技术的主要特点"></a>WebSocket技术的主要特点</h3><h4 id="推送功能"><a href="#推送功能" class="headerlink" title="推送功能"></a>推送功能</h4><p>支持服务端向客户端推送数据的推送功能，这样服务器可直接发送数据，不必等待客户端的请求。</p>
<h4 id="减少通信量"><a href="#减少通信量" class="headerlink" title="减少通信量"></a>减少通信量</h4><p>只要建立起Socket连接，就希望一直保持连接状态，和HTTP相比，不但每次连接时的总开销小了，而且WebSocket首部信息也很小，通信量也相应减小了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP使用的认证方式]]></title>
      <url>http://jianwl.com/2016/04/28/HTTP%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>Http使用的认证方式如下所示：</p>
<ol>
<li>BASIC认证</li>
<li>DIGEST认证</li>
<li>SSL客户端认证</li>
<li>基于表单的认证</li>
</ol>
<h3 id="BASIC认证"><a href="#BASIC认证" class="headerlink" title="BASIC认证"></a>BASIC认证</h3><p>1、当请求资源需要BASIC认证时，服务器会随状态码401，返回带WWW-Authenticate首部字段响应<br>2、接收到状态码401，需要将用户ID和密码发送给服务器。发送密码由用户ID和密码组成，中间用”:”连接，后经过BASE64编码处理。<br>3、接收到首部字段你Authticate请求的服务器，会认证信息的正确性进行验证，通过验证，则返回Request-URI的响应。</p>
<p>缺点：<br>BASIC认证虽然采用BASE64编码，但这并不是加密，不需要附加任何信息就能将其解码。在认证过程中被窃听，泄露账号密码的可能性较高</p>
<h3 id="DIGEST认证"><a href="#DIGEST认证" class="headerlink" title="DIGEST认证"></a>DIGEST认证</h3><p>1、客户端发送请求给服务端<br>2、服务端发送临时的咨询码(随机数，nonce)以及告知需要认证的状态码401<br>3、客户端接收到状态码401，发送摘要以及由咨询码算出来的响应码<br>4、认证成功返回200，失败再次发送状态码401</p>
<p>缺点：<br>虽然可以提供防止密码被盗的保护机制，但无法防止伪装用户。</p>
<h3 id="SSL客户端认证"><a href="#SSL客户端认证" class="headerlink" title="SSL客户端认证"></a>SSL客户端认证</h3><p>1、接收到认证资源的请求，服务端会发送Certificate Request报文，要求客户端提供客户端证书。<br>2、客户端会把客户端证书信息以Client Certificate报文方式发送给服务器。<br>3、服务器验证客户端证书，验证通过后方可领取证书内客户端的公开密钥。</p>
<p>缺点：<br>导入和维护的费用昂贵</p>
<h3 id="基于表单认证"><a href="#基于表单认证" class="headerlink" title="基于表单认证"></a>基于表单认证</h3><p>1、客户端向服务器端发送用户信息（ID和密码）；<br>2、服务端想用户发放SessionID，将包含SessionId的cookie放到响应首部字段Set-Cookie中<br>3、客户端得到Cookie，之后再次请求该资源时，会将Cookie信息带入到请求中<br>4、服务器得到Cookie信息，通过SessionId来判断对方是否为真实用户。</p>
<h3 id="安全的做法"><a href="#安全的做法" class="headerlink" title="安全的做法"></a>安全的做法</h3><p>1、给密码加盐（salt）的方式增加额外的信息，在使用散列（hash）函数计算出散列值后保存。</p>
<p>盐(salt):由服务器随机生成的一个字符串，把和密码拼接后生成散列值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTPS通信机制]]></title>
      <url>http://jianwl.com/2016/04/28/HTTPS%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>为了更好的理解HTTPS，总结一下HTTPS的通信步骤。</p>
<p><img src="/images/HTTPS通信机制.jpg" alt=""><br>1、客户端通过发送Client Hello报文开始SSL通信，报文中包含客户端支持的SSL的指定版本，加密组件（Cipher Suite）列表</p>
<p>2、服务端进行SSL通信时，会以Server Hello报文作为应答，和客户端一样，在报文中包含SSL版本，加密组件。服务器的加密组件内容是从接收到的客户端机密组件内筛选出来的。</p>
<p>3、服务器发送Certificate报文，报文中包含公开密钥证书。</p>
<p>4、服务器发送ServerHelloDone报文通知客户端，最初阶段的SSL握手协商部分结束了</p>
<p>5、SSL第一次握手结束之后，客户端以Client Key Exchange报文作为回应，报文中包含通信加密中使用的一种被称为Pre-master secret的随机密码串。该报文已用步骤3中的公钥进行加密</p>
<p>6、客户端继续发送Change Ciper Spec报文，该报文会提示服务器，在此报文之后的通信会采用Pre-master-secret密钥加密</p>
<p>7、客户端发送Finished报文，该报文包含连接至今全部报文的整体校验值，这次握手协议能否成功，要以服务器是否能够正确解密该报文作为判定标准。</p>
<p>8、服务器同样发送Change Cipher Spec报文。</p>
<p>9、服务器同样发送Finished报文</p>
<p>10、服务器和客户端的Finished报文交换完毕之后，SSL连接就算建立完成，当然，通信会受到SSL的保护，从此处开始进行应用层协议的通信，即发送HTTP请求。</p>
<p>11、应用层协议通信，即发送HTTP响应</p>
<p>12、最后由客户端断开连接，断开连接时，发送close_notify报文。</p>
<h3 id="使用服务端的公开密码证书建立HTTPS通信的整个过程"><a href="#使用服务端的公开密码证书建立HTTPS通信的整个过程" class="headerlink" title="使用服务端的公开密码证书建立HTTPS通信的整个过程"></a>使用服务端的公开密码证书建立HTTPS通信的整个过程</h3><p>1、服务端将公开密钥证书下发给客户端 （公开密钥证书包含服务器的公钥和认证机构的证书）</p>
<p>2、客户端取出证书确认其有效性，取出公开密钥，用公开密钥对随机密码串pre-master-secret进行加密,并发送给服务端</p>
<p>3、服务端用私钥解密客户端发送过来的加密信息，得到随机密码串pre-master-secret。</p>
<p>4、这样在客户端和服务端都拥有了共享密钥pre-master-secret，之后的通信就可以用这个共享密钥进行加密通信。</p>
<h3 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h3><p>使用HTTPS存在一些问题，它的处理速度会变慢，SSL的慢分两种，一种是服务器和客户端都需要做加密和解密操作大量消耗CPU及内存等资源，另一种是通信慢，因为SSL通信部分消耗网络资源。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP基础]]></title>
      <url>http://jianwl.com/2016/04/27/HTTP%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>1、HTTP协议规定，先从客户端开始建立通信，服务端在没有收到请求之前不会发送响应。</p>
<p>2、请求报文由请求方法，请求URI、协议版本、可选的请求首部字段和内容实体构成的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">POST(请求方法)    /form/query(请求URI)   HTTP/1.1(协议版本)</div><div class="line"></div><div class="line">(请求首部字段)</div><div class="line">Host:jianwl.com</div><div class="line">Connection: keep-alive</div><div class="line">Content-Type: appliation/x-www-form-urlencoded</div><div class="line">Content-Length: 16</div><div class="line"></div><div class="line">(内容实体)</div><div class="line">name=zhangsan&amp;age=21</div></pre></td></tr></table></figure></p>
<p>3、HTTP协议的特点</p>
<ul>
<li>支持客户端/服务端模式</li>
<li>简单快速，客户端向服务器请求服务时，只需传送请求方法和路径。</li>
<li>灵活，HTTP允许传输任意的数据对象，传输类型由Content-Type来标记</li>
<li>HTTP 0.9和1.0使用非持续连接，限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户的应答后，即断开连接，采用这种方式节省传输的时间.HTTP1.1使用持续连接，创建TCP连接后，只要任意一方没有明确提出断开连接，则保持TCP连接状态。</li>
<li>无状态：HTTP协议是无状态协议，无状态是指对事物处理没有记忆能力，缺乏状态以为着如果后续处理需要前面的信息，必须重传，这样会导致每次连接传送数据量大，引入Cookie，可以将对象的状态记录下来。</li>
</ul>
<p>HTTP协议的缺点：<br>1、通信使用明文（不加密），内容可能会被窃听；<br>2、不验证通信方的身份，因此有可能遭遇伪装；<br>3、无法证明报文的完整性，所以有可能已遭篡改；</p>
<p>4、TCP断开连接要四次握手，服务端发送带有FIN的首部字段数据包，客户端收到数据包后先发送带有ACK字段的数据包，然后在发送带有FIN字段的数据包，服务端收到后，返回ACK的数据包，断开连接；</p>
<p>5、持久化连接：<br>持久化连接的特点：只要任意一方没有明确提出断开连接，则保持TCP连接状态。</p>
<p>持久化连接的好处，减少了TCP连接重复建立和断开所造成的额外开销，减轻服务器端的负载。</p>
<p>6、管线化<br>持久连接使得多数请求以管线化方式发送成为可能，从前发送请求后需等待并收到响应才能发送下一个请求，管线化技术出现后，不用等待响应也可直接发送下一个请求。</p>
<p>7、Http使用cookie来管理状态<br>Cookie会根据服务端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie，当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中的加入Cookie值后发送出去。服务器发现客户端发送过来的Cookie后，会去检查究竟是从哪一个客户端发过来的连接请求，然后对比服务器的记录，最后得到之前的状态。<br><img src="/images/Cookie交互场景.jpg" alt=""></p>
<p>8、编码提升传输效率<br>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩，内容编码后的实体由客户端接收并负责解码；<br>常见的内容编码有：<br>gzip<br>compress（unix系统标准压缩）<br>deflate（zlib）<br>identify(不进行编码)</p>
<p>9、分块传输<br>分块传输编码会将实体主体分成多个部分块，每一块都会用十六进制来标记块的大小，而实体主体的最后一块会用“0（CR+LF）来标记”</p>
<p>10、报文主体和实体主体的差异？<br>报文(message)：<br>HTTP通信中的基本单位，由8位组字节流组成，通过HTTP通信传输。</p>
<p>实体(Entity):<br>作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成。</p>
<p>HTTP报文的主体用于传输请求或响应的实体主体，通常报文主体等于实体主体，只有当传输中进行编码操作是，实体主体内容才会变化。</p>
<p>11、HTTP返回状态码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">状态码    描述</div><div class="line"></div><div class="line"> 2xx	请求正常处理完毕</div><div class="line"> 200	请求被正常处理了</div><div class="line"> 204	请求被服务端正常处理，但返回的响应报文中不含实体的主体部分。</div><div class="line"> 206	客户端进行范围请求，客户端成功执行了这部分的GET请求。</div><div class="line"></div><div class="line"> 3xx	重定向状态码</div><div class="line"> 301    永久重定向，请求资源已被分配了新的URI，以后应使用现在的URI</div><div class="line"> 302	临时性重定向，请求资源已被分配新的URI，希望用户本次能够使用新的URI访问</div><div class="line"> 303	303和302状态码有相同的功能，但要求客户端以GET方法获取资源</div><div class="line"> 304	客户端发送附带条件的请求时，服务器端允许访问，但因请求未满足条件，直接返回304.（如：服务端资源未变可使用客户端未过期的缓存）</div><div class="line"> 307	和302有着相同的含义</div><div class="line"> </div><div class="line"> 4xx	客户端错误</div><div class="line"> 400	请求报文中存在语法错误</div><div class="line"> 401	发送请求需要通过HTTP认证（BASIC认证 DIGST认证）的认证信息</div><div class="line"> 403	对请求资源的访问被服务器拒绝了</div><div class="line"> 404	服务器上没有找到请求资源</div><div class="line"> </div><div class="line"> 5xx	服务器错误</div><div class="line"> 500	服务端执行请求时，发生错误。</div><div class="line"> 503 	服务器暂时处于超负荷或者正在进行停机维护</div></pre></td></tr></table></figure></p>
<p>12、通信数据转发程序：代理、网关、隧道概念</p>
<h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h5><p>一种具有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发客户端。</p>
<h5 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h5><p>转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。</p>
<h5 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h5><p>在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序，使用隧道的目的是确保客户端能与服务器进行安全的通信。</p>
<p>13、使用代理服务器的好处？<br>利用缓存技术减少网络带宽的流量，使用代理的两个基准，一种是是否使用缓存，另一种是是否会修改报文。</p>
<p>14、缓存代理<br>代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上，当代理再次接收到相同的资源的请求时，就可以不用从源服务器哪里获取资源了，将之前的缓存资源直接作为响应返回。</p>
<p>15、4种HTTP首部字段类型<br>HTTP首部字段根据实际用途被分为以下4种：<br>通用首部字段(General Heaher Fields) – 请求报文和响应报文都会用到的首部<br>请求首部字段(Request Header Fields) – 客户端向服务端发送请求报文时使用的首部<br>响应首部字段（Response Header Fields） – 服务端向客户端响应报文时使用的字段<br>实体首部字段(Entity Header Fields) – 请求报文和响应报文都会用到的首部</p>
<p>16、缓存的工作机制<br>Cache-Control: private, max-age=60, no-cache</p>
<h6 id="常用的缓存指令"><a href="#常用的缓存指令" class="headerlink" title="常用的缓存指令"></a>常用的缓存指令</h6><p>private: 缓存服务器只给特定的用户提供资源缓存的服务；<br>public: 缓存服务给所有的用户提供资源缓存服务；<br>max-age=60,当服务器返回响应中包含max-age指令，缓存过期没有超过60秒，缓存服务器将不对资源的有效性进行确认，直接将缓存响应给客户端。<br>no-cache,表示缓存服务器会向源服务器进行有效期确认后处理资源;<br>no-store,不缓存资源<br>min-fresh:缓存服务器返回至少还未过指定时间的缓存资源。</p>
<p>应用HTTP/1.1版本的缓存服务器遇到同时存在Expires首部字段的情况时，会有限处理max-age指令，而忽略掉Expires首部字段。</p>
<p>17、实体标记Etag是与特定资源关联的确定值，资源更新后ETag也会随之而更新。</p>
<p>18、  加密的两种方式：</p>
<h6 id="通信的加密"><a href="#通信的加密" class="headerlink" title="通信的加密"></a>通信的加密</h6><p>HTTP协议中没有加密的机制，但可以通过和SSL（Secure Socket Layer,安全套接层）和TLS（Transport Layer Security,安全传输层协议）的组合使用。用SSL建立安全通信线路之后，就可以在这条线路上进行HTTP通信了，与SSL组合使用的HTTP被称为HTTPS。</p>
<h6 id="内容加密"><a href="#内容加密" class="headerlink" title="内容加密"></a>内容加密</h6><p>由于HTTP协议中没有加密机制，那么就对HTTP协议传输的内容本身加密，在这种情况下，客户端要对HTTP报文进行加密处理后再发送请求。仅仅被报文的主体进行加密，对报文的首部不加密，但这样做也会出现一个问题，虽然内容加密了，但仍有被篡改的风险。</p>
<p>19、HTTP的隐患？<br>1、无法确定请求发送至目标的Web服务器是否按真实意图返回响应的那台服务器，有可能是已伪装的Web服务器。<br>2、无法确定响应返回到的客户端是否是按真实意图接受响应的那个客户端，有可能是已伪装的客户端。<br>3、无法确定正在通信的对方是否具备访问权限，因为某些Web服务器上保存着重要的信息，只想发给特定用户通信的权限。<br>4、无法判定请求是来自何方，出自谁手。<br>5、即使是无意义的请求也会照单全收，无法阻止海量请求下的DOS攻击（Denial of Service,拒绝服务攻击）行为</p>
<p>20、常见的几种加密技术</p>
<h6 id="共享秘钥加密"><a href="#共享秘钥加密" class="headerlink" title="共享秘钥加密"></a>共享秘钥加密</h6><p>加密和解密用同一个密钥的方式，也称为对称加密；</p>
<p>缺点是发送密钥，有可能被窃听，对方得到密钥，就能够机密，不安全。</p>
<h6 id="公开密钥加密"><a href="#公开密钥加密" class="headerlink" title="公开密钥加密"></a>公开密钥加密</h6><p>使用一把非对称的密钥，一把叫做私有密钥，另一把叫做公开密钥。发送密文的一方，使用对方的公开密钥进行加密，对方收到被加密的信息后，用私有密钥进行解密。</p>
<p>缺点是，无法证明公开密钥本身就是货真价实的公开密钥，比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或者在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。</p>
<h6 id="混合加密机制"><a href="#混合加密机制" class="headerlink" title="混合加密机制"></a>混合加密机制</h6><p>1、使用公开密钥加密方式安全地交换稍后共享密钥中要使用的密钥；<br>2、确保交换的密钥是安全的前提下，使用共享密钥加密的方式进行加密；</p>
<p>这样做的理由？<br>公开密钥机密比共享密钥复杂，处理速度慢，所以利用各自的优势，增加效率。</p>
<h6 id="证明公开密钥正确性的证书"><a href="#证明公开密钥正确性的证书" class="headerlink" title="证明公开密钥正确性的证书"></a>证明公开密钥正确性的证书</h6><p><img src="/images/确认公钥的真实性.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP常见面试题]]></title>
      <url>http://jianwl.com/2016/04/27/HTTP%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h5 id="HTTP-的方法中GET和POST方法的区别？"><a href="#HTTP-的方法中GET和POST方法的区别？" class="headerlink" title="HTTP 的方法中GET和POST方法的区别？"></a>HTTP 的方法中GET和POST方法的区别？</h5><ul>
<li>GET 用于从服务器获得资源，POST用于向服务器发送数据的，</li>
<li>GET 提交请求时，将参数放到URL中，用户可以从URL中看到传输的参数，POST是将参数填到一个表单中，然后发送给服务器，参数在URL中不可见。</li>
<li>GET 提交的数据上限是1024字节，POST方式没有数据长度的限制。</li>
</ul>
<h5 id="HTTP-的方法中PUT和POST方法的区别？"><a href="#HTTP-的方法中PUT和POST方法的区别？" class="headerlink" title="HTTP 的方法中PUT和POST方法的区别？"></a>HTTP 的方法中PUT和POST方法的区别？</h5><ul>
<li>POST用于提交请求，可以更新或者创建资源，是非幂等的,举个例子，一个接口的功能是将当前余额减一个值，每次提交指定该值为100，调用一次余额减100，二次减200，这个时候就用POST</li>
<li>PUT用于向指定的URI传送更新资源，是幂等的，举个例子，更新某个blog文章，因为该文章具有单一的具体URI，所以每次更新提交相同的内容，结果都一致，这个时候就用PUT</li>
</ul>
<p>幂等性：幂等是数学的一个用语，对于单个输入的运算方法，如果传入值相同，结果也相同，则称其为幂等的。</p>
<h5 id="HTTP-的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？"><a href="#HTTP-的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？" class="headerlink" title="HTTP 的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？"></a>HTTP 的方法中GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT方法各是什么含义？</h5><p>GET: 向服务器获取某个资源，发送GET请求一般会附带一些参数，这些参数会附在请求链接的后面。</p>
<p>POST: 向服务器发送数据，数据不会被附加在请求链接之后的，常用于表单提交。</p>
<p>PUT: 向服务器传输文件，要求在请求报文的主体中包含文件内容，然后保存到请求URI指定的位置，但由于HTTP/1.1自身不带验证机制，任何人都可以上传文件，存在安全问题。</p>
<p>TRACE: 让Web服务器将之前的请求通信环回给客户端，容易引发XST（Cross-Site Tracing）跨站追踪攻击，通常不会用到。</p>
<p>HEAD: 与GET类似，但服务器在响应中只返回首部，不返回实体的主体部分。</p>
<p>OPTIONS: 请求Web服务器告知其支持的各种功能。</p>
<p>DELETE: 请求服务器删除请求URL指定的资源。</p>
<p>CONNECT:在代理服务器通信时，建立隧道，实现将隧道协议进行TCP通信，主要使用SSL(Secure Socket Layer 安全套接层)和TLS（Transport Layer Security 传输层安全）协议把通信内容加密后经网络隧道传输。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP协议介绍]]></title>
      <url>http://jianwl.com/2016/04/27/TCP%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>为了了解HTTP，有必要事先了解一下TCP/IP协议簇，TCP/IP协议族最重要的一点就是分层，按层次可分为应用层、传输层、网络层和数据链路层。</p>
<blockquote>
<p>分层优点：<br>把TCP/IP分层是有好处的，比如，如果互联网只由一个协议统筹，某个地方需要改变设计时，就必须把所有部分整体换掉，而分层之后，只需要把变动的层换掉即可；分层之后，设计也变得简单了，处于应用层上的应用只考虑分派给自己的任务就可以了，不用弄清楚对方在地球上哪个地方，对方的传输线路是怎么样的传输送达的问题。</p>
</blockquote>
<h5 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h5><p>应用层决定了向用户提供应用服务时通信的活动。TCP/IP协议族内预存了各类通用的应用服务，比如FTP(File Transfer Protocol,文本传输协议)、DNS(Domain Name System 域名系统)服务、HTTP(HyperText Transfer Protocol,超文本传输协议)</p>
<h5 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h5><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议：TCP(Transmission Control Protocol 传输控制协议)和UDP（User Data Protocol,用户数据报协议）。</p>
<h5 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h5><p>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据包传给对方。与对方的计算机，通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项中，选择一条传输路线。</p>
<h5 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h5><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC(Network Interface Card,网络适配器，即网卡),及光纤等物理可见部分</p>
<h3 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h3><p><img src="/images/TCP通信传输流.jpg" alt=""><br>利用TCP/IP协议簇进行通信时，会通过分层顺序与对方进行通信，发送端从应用层往下走，接收端则从应用层网上走。</p>
<blockquote>
<p>举例说明<br>作为发送端的客户端在应用层发出一个想看某个Web页面的HTTP请求，为了方便传输，在传输层把从应用层处收到的数据进行分割，并在报文上打上标记和序号及端口后转发给网络层。在网络层(IP协议)，增加作为通信目的地的MAC地址后转发给链路层，接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层，当传输到应用层，才能算真正接收到客户端发送过来的HTTP请求。</p>
</blockquote>
<h3 id="TCP协议的可靠性"><a href="#TCP协议的可靠性" class="headerlink" title="TCP协议的可靠性"></a>TCP协议的可靠性</h3><p>TCP协议采用三次握手策略，来保证可靠性。发送端首先先发送一个带SYN标志的数据传给对方，接收端收到后，回传一个带用SYN/ACK标志的数据包以示传达确认消息，最后，发送端在回传一个带ACK标志的数据包，代表“握手”结束。若在握手过程中，某个阶段莫名中断，TCP协议会再次以相同的顺序发送数据包。<br><img src="/images/TCP三次握手.jpg" alt="TCP三次握手"></p>
<h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP协议位于网络层，它的作用是把各种数据包传递给对方，要保证确实传送到对方那里，需要两个重要的条件IP地址和MAC地址。IP地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址可以和MAC地址进行配对，IP地址可变换，但MAC地址基本不会变。</p>
<blockquote>
<p>//IP通信是如何依赖MAC地址的？<br>通信双方经过多台计算机和网络设备中转才能连接到对方，在中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标，利用ARP协议(Address Resolution Protocol 解析地址协议)，根据通信方的IP地址，可以得到对应的MAC地址，所以当中转设备的MAC地址为该通信方的MAC地址时，表示双方已经连接上了。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过一张图来解释，IP协议，TCP协议，DNS服务在使用HTTP协议通信过程中各自发挥了什么作用？</p>
<p><img src="/images/完整HTTP请求.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浮躁的环境，浮躁的我]]></title>
      <url>http://jianwl.com/2016/04/20/%E6%B5%AE%E8%BA%81%E7%9A%84%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%B5%AE%E8%BA%81%E7%9A%84%E6%88%91/</url>
      <content type="html"><![CDATA[<p><strong>前序</strong>：总是羡慕别人过得比自己好，想要努力奋斗，赶超他们，计划实施了几天，热情骤减；想要高薪，却不付出努力，想不劳而获；想要承担更多的责任，却又担心能力不足。觉得能力不足，却又不行动起来。这样的状态持续下去，我即将看到一个抱怨现实却又对改变现状无能无力的自己；我并不想成为这样的人，将目前所拥有的坏习惯和不好状态，<strong>以文字的方式记录下来，警示自己</strong>。</p>
<h2 id="习惯即刻回报"><a href="#习惯即刻回报" class="headerlink" title="习惯即刻回报"></a>习惯即刻回报</h2><p>春天播种，秋天才会有收获。刚刚付出一点点，甚至还没有付出，就想要得到回报。技术刚刚掌握，能一边谷歌一边干活了就觉得该拿到多少多少钱了。找工作先想着多少多少钱，入职了没干几个月就想着要加多少多少钱，干了没几个月，薪水要是没涨，就放弃了，准备通过跳槽加薪，不跳槽的话，往往也会因为没加薪而牢骚满腹，工作敷衍了事。</p>
<p>一个程序员的价值，是通过他带给公司的价值体现的。先给公司带来了价值，然后才会反过来在薪水上体现出自己的价值。公司都很现实，很少会为你的潜力买单，在你还没有体现出价值时就给你很高的薪水。</p>
<p>在生活和工作中，一定要懂得付出，不要那么急功近利，马上想得到回报。天下没有白吃的午餐，你想获得什么，就得先付出什么。唯有种下种子，然后浇水、施肥、除草、杀虫，然后才能等来收获。</p>
<h2 id="缺乏学习热情"><a href="#缺乏学习热情" class="headerlink" title="缺乏学习热情"></a>缺乏学习热情</h2><p>软件开发的技术日新月异，而每一项技术又往往博大精深，不持续、深入钻研是很难掌握的，更别谈精通了。如果你对一项技术不能深刻理解熟练应用，表现出来的水准仅仅是能干活、还行，那很难说会有公司愿意为“还行”付出大的代价，只有脱颖而出，才可能备受重视。</p>
<p>假如你对学习、掌握、精通技术没有兴趣，面对不断涌现的新语言新技术新框架没有学习欲望，那但就软件开发这个工作而言，你不但眼下不太可能拿到高薪，将来也不会。在这样一个快速变化的时代，只有不断地学习才不会被抛弃。</p>
<h2 id="不够努力"><a href="#不够努力" class="headerlink" title="不够努力"></a>不够努力</h2><p>虽然我们都知道努力学习可以改变我们的技能水平，持续努力不懈坚持可以让自己有所建树，可还是有很多人浅尝辄止，三天打鱼两天晒网，搞两下能Run就放下了。</p>
<p>人和人在聪明才智上的差距并没有想象中大，甚至很多时候，从大多数人的努力程度之低来看，根本还轮不到拼天赋。如果两个人的实力半斤八两的话，热情工作努力坚持的人，一定比较容易成功。</p>
<h2 id="畏难"><a href="#畏难" class="headerlink" title="畏难"></a>畏难</h2><p>做事拈轻怕重，不愿挑战。殊不知能力就是在不断挑战不断突破自己的过程中历练出来的。在一个公司里面，经常承担高难度任务的程序员，一定是成长比较快的，薪水增长也一定是比较快的。越是困难的事情，越能体现出个人价值，也越能带给个人成长。万事起头难，不要害怕困难。事情做不好往往不是因为没有能力，大都是由于缺乏恒心。只要不怕困难，坚持前行，一定会有不一样的收获。</p>
<h2 id="缺乏责任心"><a href="#缺乏责任心" class="headerlink" title="缺乏责任心"></a>缺乏责任心</h2><p>工作上不管什么事儿，反正不是自己的事儿，缺乏责任心，干好干不好都无所谓，对交付承诺、对产品质量都不在意，没什么事儿上心。一个人的责任心如何，决定着他在工作中的态度，决定着其事业的好坏和成败。如果一个人没有责任心，即使他有再大的能耐，也不一定能做出好的成绩来。</p>
<h2 id="消极，抱怨"><a href="#消极，抱怨" class="headerlink" title="消极，抱怨"></a>消极，抱怨</h2><p>工作稍有不顺，就怨气沸腾，这个怎么怎么样，那个怎么怎么样，而我怎么就这样，任务不公平，资源不公平，那谁谁不支持我，那谁谁不配合……</p>
<p>抱怨不能使事情变好，反之，它会让负面情绪蔓延，蚕食你的精力和时间，让你产出更低。成功者永不抱怨，抱怨者永不成功。立刻停止抱怨，早一分钟停止，你就离目标近一分钟。</p>
<h2 id="没有时间管理观念"><a href="#没有时间管理观念" class="headerlink" title="没有时间管理观念"></a>没有时间管理观念</h2><p>每个人的一天都只有24小时，人和人的差别就在于如何利用时间上。</p>
<p>有的人每周都有目标，每天都有计划，早上起来会想今天要做的几件重要的事，晚上会回顾今天完成的事，总结干成了什么干坏了什么，还会有计划的学习新知识新技能，这样日积月累不断坚持，每一天都是高效的，每一天都朝着更丰富更完美的自己前进。</p>
<p>而有的人则漫无目的，走哪算哪，到了公司，上午基本做不成事儿，到下午了还不知道要做什么，晚上也发愁如何消磨时间……</p>
<h2 id="为薪水工作"><a href="#为薪水工作" class="headerlink" title="为薪水工作"></a>为薪水工作</h2><p>虽然工作的一大目的是获取薪水，养活自己以及供给家庭所需；但是，这只是工作最直接的报偿，同时也是最低级的目标。</p>
<p>如果我们为薪水而工作，将注定我们是短视的，也将注定受到最深的伤害。假如你看不到工资以外的东西，斤斤计较于薪水、福利、职位等，那外界的些微风吹草动就可能让你像浮萍一样飘来荡去，你很快就会失去平衡，失去信心，失去热情，失去平和，进而在工作时总是采取一种应付了事的态度，能少做就少做，能躲避就躲避，觉得只要对得起自己的那份薪水就成了。长此以往，你追求的高薪水反倒得不到。</p>
<p>我们进入一个公司工作，是为了自己，不是薪水也不是别人，比薪水更重要的，是成长和成就自己的机会。我们一定要明白，公司、企业、组织，都是我们锻炼自己、修炼自我的平台，我们不是为薪水工作、不是为老板工作、不是为家人工作，是为实现自我而工作，是为更完美的自己而工作。</p>
<p>参考资料：<br><a href="http://http://www.codeceo.com/article/programmer-hole.html" target="_blank" rel="external">月薪3万的程序员都避开了哪些坑？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java注解]]></title>
      <url>http://jianwl.com/2016/04/20/Java%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><blockquote>
<p>Annotations, a form of metadata, provide data about a program that is not part of the program itself. Annotations have no direct effect on the operation of the code they annotate.</p>
</blockquote>
<p>注解是JAVA 5的一个新特性，它相当于是一种嵌入在程序中的元数据</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote>
<ul>
<li>Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings.</li>
<li>Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth.</li>
<li>Runtime processing — Some annotations are available to be examined at runtime.</li>
</ul>
</blockquote>
<p>运用场景主要是三个方面：</p>
<ul>
<li>内置注解，用于告诉编译器，哪些方法被覆盖，哪些方法忽略警告；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//内置注解举例说明</div><div class="line">@Override</div><div class="line">当我们想要覆盖父类的一个方法时，需要使用该注解告知编译器，我们正在覆盖一个方法。这样的话，当父类的方法被删除或修改了，编译器会提示错误信息。</div><div class="line"></div><div class="line">@Deprecated</div><div class="line">当我们想要让编译器知道一个方法已经被弃用时，应该使用这个注解。</div><div class="line"></div><div class="line">@SuppressWarning</div><div class="line">告知编译器，忽略他们产生的特殊警告</div></pre></td></tr></table></figure>
<ul>
<li>用注解解析工具对其进行解析</li>
<li>注解可以指定在运行时有效</li>
</ul>
<h2 id="Java自定义注解"><a href="#Java自定义注解" class="headerlink" title="Java自定义注解"></a>Java自定义注解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.annotations;</div><div class="line">import java.lang.annotation.Documented;</div><div class="line">import java.lang.annotation.ElementType;</div><div class="line">import java.lang.annotation.Inherited;</div><div class="line">import java.lang.annotation.Retention;</div><div class="line">import java.lang.annotation.RetentionPolicy;</div><div class="line">import java.lang.annotation.Target;</div><div class="line"></div><div class="line">@Documented</div><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Inherited</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface MethodInfo&#123;</div><div class="line">    String author() default &quot;Pankaj&quot;;</div><div class="line">    String date();</div><div class="line">    int revision() default 1;</div><div class="line">    String comments();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注解方法不能有参数</li>
<li>注解方法的返回类型局限于基本类型，字符串，枚举</li>
<li>注解方法可以包含默认值</li>
<li>注解可以包含与其绑定的元注解，元注解为注解提供信息，有四种元注解类型</li>
</ul>
<ol>
<li>@Documented – 表示使用该注解的元素应被javadoc或类似工具文档化，它应用于类型声明，类型声明的注解会影响客户端对注解元素的使用。如果一个类型声明添加了Documented注解，那么它的注解会成为被注解元素的公共API的一部分。</li>
<li>@Target – 表示支持注解的程序元素的种类，一些可能的值有TYPE, METHOD, CONSTRUCTOR, FIELD等等。如果Target元注解不存在，那么该注解就可以使用在任何程序元素之上。</li>
<li>@Inherited – 表示一个注解类型会被自动继承，如果用户在类声明的时候查询注解类型，同时类声明中也没有这个类型的注解，那么注解类型会自动查询该类的父类，这个过程将会不停地重复，直到该类型的注解被找到为止，或是到达类结构的顶层（Object）。</li>
<li>@Retention – 表示注解类型保留时间的长短，它接收RetentionPolicy参数，可能的值有SOURCE, CLASS, 以及RUNTIME。</li>
</ol>
<h2 id="Java注解解析"><a href="#Java注解解析" class="headerlink" title="Java注解解析"></a>Java注解解析</h2><p>我们将使用Java反射机制从一个类中解析注解，请记住，注解保持性策略应该是RUNTIME，否则它的信息在运行期无效，我们也不能从中获取任何数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">package com.journaldev.annotations;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line">public class AnnotationExample &#123;</div><div class="line">    @Override</div><div class="line">    @MethodInfo(author = &quot;Pankaj&quot;, comments = &quot;Main method&quot;, date = &quot;Nov 17 2012&quot;, revision = 1)</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Overriden toString method&quot;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Deprecated</div><div class="line">    @MethodInfo(comments = &quot;deprecated method&quot;, date = &quot;Nov 17 2012&quot;)</div><div class="line">    public static void oldMethod() &#123;</div><div class="line">        System.out.println(&quot;old method, don&apos;t use it.&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;deprecation&quot; &#125;)</div><div class="line">    @MethodInfo(author = &quot;Pankaj&quot;, comments = &quot;Main method&quot;, date = &quot;Nov 17 2012&quot;, revision = 10)</div><div class="line">    public static void genericsTest() throws FileNotFoundException &#123;</div><div class="line">        List l = new ArrayList();</div><div class="line">        l.add(&quot;abc&quot;);</div><div class="line">        oldMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">package com.journaldev.annotations;</div><div class="line"></div><div class="line">import java.lang.annotation.Annotation;</div><div class="line">import java.lang.reflect.Method;</div><div class="line">public class AnnotationParsing &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            for (Method method : AnnotationParsing.class</div><div class="line">                    .getClassLoader()</div><div class="line">                    .loadClass((&quot;com.journaldev.annotations.AnnotationExample&quot;))</div><div class="line">                    .getMethods()) &#123;</div><div class="line">                // checks if MethodInfo annotation is present for the method</div><div class="line">                if (method.isAnnotationPresent(com.journaldev.annotations.MethodInfo.class)) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        // iterates all the annotations available in the method</div><div class="line">                        for (Annotation anno : method.getDeclaredAnnotations()) &#123;</div><div class="line">                            System.out.println(&quot;Annotation in Method &apos;&quot;</div><div class="line">                                    + method + &quot;&apos; : &quot; + anno);</div><div class="line">                        &#125;</div><div class="line">                        MethodInfo methodAnno = method.getAnnotation(MethodInfo.class);</div><div class="line">                        if (methodAnno.revision() == 1) &#123;</div><div class="line">                            System.out.println(&quot;Method with revision no 1 = &quot;+ method);</div><div class="line">                        &#125;</div><div class="line">                    &#125; catch (Throwable ex) &#123;</div><div class="line">                        ex.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (SecurityException | ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis之RDB持久化]]></title>
      <url>http://jianwl.com/2016/04/18/Redis%E4%B9%8BRDB%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="为何要持久化？"><a href="#为何要持久化？" class="headerlink" title="为何要持久化？"></a>为何要持久化？</h2><p>Redis是内存数据库，它将自己的数据库状态存在内存里面，如果不想办法将储存在内存中的数据库状态保存到磁盘里面，那么一旦服务器进程退出，服务器中的数据库状态也会消失不见。</p>
<p>为了解决这个问题，Redis提供了RDB的功能，RDB持久化生成的RDB文件是一个经过压缩的二进制文件，通过二进制文件可以还原生成RDB文件时的数据库状态。</p>
<h2 id="RDB文件的创建"><a href="#RDB文件的创建" class="headerlink" title="RDB文件的创建"></a>RDB文件的创建</h2><p>生成RDB文件的两种命令：</p>
<ol>
<li>SAVE</li>
<li>BGSAVE</li>
</ol>
<p>SAVE命令会<strong>阻塞</strong>Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求。</p>
<p>BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程(父进程)继续处理命令请求。</p>
<h2 id="自动间隔性保存"><a href="#自动间隔性保存" class="headerlink" title="自动间隔性保存"></a>自动间隔性保存</h2><p>用户可以通过设置服务器配置的save选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行BGSAVE操作。</p>
<p>举个例子，如果我们向服务器提供以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save  900  1    //服务器在900秒之内，对数据库进行了至少一次修改</div><div class="line">save  300  10  </div><div class="line">save  60    10000</div></pre></td></tr></table></figure></p>
<p>只要满足以上三个条件中任意之一，BGSAVE命令就会被执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis过期键删除策略]]></title>
      <url>http://jianwl.com/2016/04/18/Redis%E8%BF%87%E6%9C%9F%E9%94%AE%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</url>
      <content type="html"><![CDATA[<p>Redis过期键删除有三种策略：</p>
<ol>
<li>定时删除：在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作。（主动删除）</li>
<li>惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有，就返回该键。（被动删除）</li>
<li>定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则有算法决定。（主动删除）</li>
</ol>
<h2 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h2><p>定时删除策略对内存是最友好的，通过定时器，定时删除策略可以保证过期键会尽可能地被删除，并释放过期键所占用的内存。另外一方面，定时删除策略的缺点是，它对CPU时间是最不友好的，在过期键比较多的情况下，删除过期键这一行为可能会占用相当一部分CPU时间，在内存不紧张但是CPU时间非常紧张的情况下，将CPU时间用在删除和当前任务无关的过期键上，对服务器的响应时间和吞吐量造成影响。</p>
<h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>惰性删除策略对CPU是最友好的：程序只会在取出键时才对键进行过期检查，这可以保证删除过期键的操作只会在非做不可的情况下进行，并且删除的目标仅限于当前处理的键，这个策略并不会在删除其他无关的过期键上花费任何CPU时间。<br>惰性删除策略的缺点是，它对内存是最不友好的，过期键保留在数据库中，那么只要它没有被访问到的话，那么他们永远不会被删除（除非用户手动执行FLUSHDB），我们可以将这种情况看做是内存泄漏 —-无用的垃圾数据占用了大量的内存，而服务器却不释放它们</p>
<h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><p>定期删除策略每个一段时间执行一次删除过期操作，并通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响;期删除过期键，还能减少过期键带来的内存浪费</p>
<p>定期删除的难点：</p>
<ol>
<li>如果删除太频繁，或者执行时间过程，定期删除就会退化到定时删除；</li>
<li>如果删除操作执行太少，或者执行时间太短，定期删除就会和惰性删除策略一样，出现浪费内存的情况。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>定时删除，耗CPU但对内存友好，高并发时，影响服务器的响应时间和吞吐量。</li>
<li>惰性删除，耗内存，对CPU友好；</li>
<li>定期删除，是定时删除和惰性删除的折中。</li>
</ul>
<p>参考资料：<br>Redis设计与实现  –黄健宏</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis对象类型介绍]]></title>
      <url>http://jianwl.com/2016/04/15/Redis%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>对象的类型</p>
<ol>
<li>字符串对象 – REDIS_STRING</li>
<li>列表对象 – REDIS_LIST</li>
<li>哈希对象 – REDIS_HASH</li>
<li>集合对象 – REDIS_SET</li>
<li>有序集合对象 – REDIS_ZSET</li>
</ol>
<p>实战操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># 键为字符串对象，值为字符串对象</div><div class="line">redis&gt; SET msg &quot;hello world&quot;</div><div class="line">OK</div><div class="line"></div><div class="line">redis&gt; TYPE msg</div><div class="line">string</div><div class="line"></div><div class="line">#键为字符串对象，值为列表对象</div><div class="line">redis&gt; RPUSH numbers 1 3 5</div><div class="line">3</div><div class="line"></div><div class="line">redis&gt; TYPE numbers</div><div class="line">list</div><div class="line"></div><div class="line">#键为字符串对象，值为哈希对象</div><div class="line">redis&gt; HMSET profile name Tom age 25 career programmer</div><div class="line">OK</div><div class="line"></div><div class="line">redis&gt; TYPE profile</div><div class="line">hash</div><div class="line"></div><div class="line">#键为集合对象，值为集合对象</div><div class="line">redis&gt; SADD fruits apples banana cherry</div><div class="line">3</div><div class="line"></div><div class="line">redis&gt; TYPE fruits</div><div class="line">set</div><div class="line"></div><div class="line">#键为字符串对象，值为有序集合对象</div><div class="line">redis&gt; ZADD price 8.5 apple 5.0 banana 6.0 cherry</div><div class="line">3</div><div class="line"></div><div class="line">redis&gt; TYPE price</div><div class="line">zset</div></pre></td></tr></table></figure></p>
<p>集合和列表的区别</p>
<ul>
<li>集合中的元素是唯一的，但列表中的元素是不唯一</li>
<li>集合中的元素是没有顺序的，底层实现是散列表，列表中的元素是有顺序的，列表的底层实现是双向链表，所以获取两端的数据的速度快，但获取中间的数据速度慢，时间复杂度是O(N);</li>
<li>相同点是存储内容都是至多为2^32-1个字符串;</li>
</ul>
<p>有序集合和列表的共同点和区别？</p>
<h6 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h6><ul>
<li>两者均有序；</li>
<li>两者均可获得某一范围的元素</li>
</ul>
<h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><ul>
<li>列表是通过链表来实现的，获取靠近两端的数据速度极快，而当元素增多后，访问中间速度的速度会较慢，常用场景，适合实现如“新鲜事”、“日志”这样访问中间元素少的应用；</li>
<li>有序集合是通过散列表和跳跃表来实现的，所以读取位于中间部分的数据速度也很快(时间复杂度是O(logN))</li>
<li>列表不能简单地调整某个元素的位置，但有序集合可以，通过改变这个元素的分数</li>
<li>有序集合比列表更消耗内存</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Github Pages和Hexo搭建个人博客]]></title>
      <url>http://jianwl.com/2016/04/14/%E5%88%A9%E7%94%A8Github-Pages%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>喜欢写Blog的人，会经历三个阶段<br>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费的空间来写。<br>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。<br>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>
</blockquote>
<p>的确，大多数Blog作者，都停留在第一阶段和第二阶段，因为第三阶段太不容易到达，你很难找到俯首听命，愿意为你管理服务器的人。但是，现在情况发生了变化，我们可以在github搭建个人博客。主要是以下步骤：</p>
<ol>
<li>在Github 上注册账号；</li>
<li>在Godaddy上买域名；</li>
<li>在DNSPOD上设置域名解析；</li>
<li>在Github创建username.github.io项目；</li>
<li>Hexo生成静态博客框架并部署到github上；</li>
</ol>
<p>具体操作步骤，参考以下资料<br>参考资料：<br><a href="http://sunwhut.com/2015/10/30/buildBlog/" target="_blank" rel="external">如何利用GitHub Pages和Hexo快速搭建个人博客</a><br><a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客——简明 Github Pages与 jekyll 教程</a><br><a href="http://http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo免输入密码部署到Github]]></title>
      <url>http://jianwl.com/2016/04/14/Hexo%E5%85%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%83%A8%E7%BD%B2%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<p>在使用hexo deploy命令部署hexo到github时，每次都要输入用户名和密码，这种重复机械的流程，让人感觉很烦躁。以下是介绍如何解决这个问题：<br>方案一：在本机新建文本，明文存储github的账号和密码<br>1、在系统环境变量中新增一个环境变量<br><img src="/images/env.png" alt=""><br>2、接着在你的用户目录(C:\Users\username)下新建一个叫_netrc的文件，在文件中添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">machine github.com</div><div class="line">login username //username为github账户名 （ps：请将注释内容去掉）</div><div class="line">password password //password为github账户的密码</div></pre></td></tr></table></figure></p>
<p>3、设置好这些之后，当你再次部署时，就不用再输入用户名和密码了。</p>
<p>方案二：本机生成SSH密钥，配置到github中<br>1、设置Git的user name和email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;shuangziliuyun&quot;</div><div class="line">git config --global user.email &quot;1515970958@qq.com&quot;</div></pre></td></tr></table></figure></p>
<p>2、生成SSH密钥</p>
<ul>
<li>查看是否已经有了ssh密钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果没有密钥则不会有此文件夹，有则备份删除</p>
<ul>
<li>生成密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -f rsa -C &quot;1515970958@qq.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>按3个回车，密码为空，得到两个文件id_rsa和id_rsa.pub</p>
<p>3、在github上添加ssh密钥，这里添加的是id_rsa.pub里面的公钥<br><img src="/images/ssh配置.png" alt=""></p>
<p>4、修改_config.yml中deploy的参数，部署仓库以SSH的方式发布不需输入密码，反之如果以HTTPS的方式发布则需要密码。<br><img src="/images/hexo的deploy参数.png" alt=""><br>参考资料：<br><a href="http://www.foreverpx.cn/2014/09/25/Hexo%E5%85%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E9%83%A8%E7%BD%B2%E5%88%B0github/" target="_blank" rel="external">Hexo免输入密码部署到Github</a></p>
]]></content>
    </entry>
    
  
  
</search>
