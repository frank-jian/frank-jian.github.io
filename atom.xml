<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2018-08-02T10:18:26.491Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决ElasticSearch分页机制中Result window is too large的问题</title>
    <link href="http://jianwl.com/2018/08/02/%E8%A7%A3%E5%86%B3ElasticSearch%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6%E4%B8%ADResult-window-is-too-large%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://jianwl.com/2018/08/02/解决ElasticSearch分页机制中Result-window-is-too-large的问题/</id>
    <published>2018-08-02T10:03:47.000Z</published>
    <updated>2018-08-02T10:18:26.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天在用ES的时候，遇到一个奇怪的问题，获取100百万批量数据总是报异常，Review代码，没发现什么问题。本地调试之后发现以下异常日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Result window is too large, from + size must be less than or equal to: [10000] but was [1000000]</div></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在index中配置，提高窗口大小的上限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &quot;http://localhost:9200/my_index/_settings&quot; -d &apos;&#123; &quot;index&quot; : &#123; &quot;max_result_window&quot; : 100000000 &#125; &#125;&apos;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.4/search-request-search-after.html" target="_blank" rel="external">search-api</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;今天在用ES的时候，遇到一个奇怪的问题，获取100百万批量数据总是报异常，Review代码，没发现什么问题。本地调试之后发现以下异常日志：&lt;
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://jianwl.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://jianwl.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring自定义注解与AOP获取注解</title>
    <link href="http://jianwl.com/2018/08/01/Spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E4%B8%8EAOP%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3/"/>
    <id>http://jianwl.com/2018/08/01/Spring自定义注解与AOP获取注解/</id>
    <published>2018-08-01T10:34:22.000Z</published>
    <updated>2018-08-01T11:18:04.068Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>需要对consul的节点上下线的操作日志集中管理，且尽可能减少对业务代码的侵入性。</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ol>
<li>通过AOP的方式，对指定的方法进行切面</li>
<li>通过AOP的方式，对指定的注解进行切面</li>
</ol>
<p>两个方案对比，方案一，如果预先不知道这个AOP的存在，在写代码是，可能会出现一些suprise。而方案二，扫描自定义注解的方式，对于使用方会更友好一些。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-引入AOP需要引入核心依赖"><a href="#1-引入AOP需要引入核心依赖" class="headerlink" title="1. 引入AOP需要引入核心依赖"></a>1. 引入AOP需要引入核心依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="2-CreateRouteLog-自定义注解"><a href="#2-CreateRouteLog-自定义注解" class="headerlink" title="2. CreateRouteLog(自定义注解)"></a>2. CreateRouteLog(自定义注解)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.frank.springlearning.annotation;</div><div class="line"></div><div class="line">import java.lang.annotation.*;</div><div class="line"></div><div class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Inherited</div><div class="line">@Documented</div><div class="line">public @interface CreateRouteLog &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-声明切面-OperateLogAspect"><a href="#3-声明切面-OperateLogAspect" class="headerlink" title="3. 声明切面(OperateLogAspect)"></a>3. 声明切面(OperateLogAspect)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">@Aspect</div><div class="line">@Slf4j</div><div class="line">public class OperateLogAspect &#123;</div><div class="line">    @Pointcut(&quot;@annotation(com.frank.springlearning.annotation.CreateRouteLog)&quot;)</div><div class="line">    public void createRouteLog() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterReturning(value = &quot;createRouteLog()&quot;, argNames = &quot;joinPoint,response&quot;, returning = &quot;response&quot;)</div><div class="line">    public void createRouteLog(JoinPoint joinPoint, Object response) &#123;</div><div class="line">        log.info(&quot;&gt;&gt;&gt;&gt; aspect create route log &gt;&gt;&gt;&gt;&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-LogService"><a href="#4-LogService" class="headerlink" title="4. LogService"></a>4. LogService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">@Slf4j</div><div class="line">public class LogService &#123;</div><div class="line">    @CreateRouteLog</div><div class="line">    public void createRoute(String content) &#123;</div><div class="line">        log.info(&quot;has a node create route! content: &#123;&#125;&quot;, content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-LogController"><a href="#5-LogController" class="headerlink" title="5. LogController"></a>5. LogController</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">@Slf4j</div><div class="line">public class LogController &#123;</div><div class="line">    @RequestMapping(&quot;/create/node&quot;)</div><div class="line">    public String createNode()&#123;</div><div class="line">        logService.createRoute(&quot;Hello World!&quot;);</div><div class="line">        return &quot;create node&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;需要对consul的节点上下线的操作日志集中管理，且尽可能减少对业务代码的侵入性。&lt;/p&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Spring" scheme="http://jianwl.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://jianwl.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>5.工厂方法模式</title>
    <link href="http://jianwl.com/2018/07/31/5-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/07/31/5-工厂方法模式/</id>
    <published>2018-07-31T14:53:21.000Z</published>
    <updated>2018-08-04T02:57:32.890Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>有两类铁匠师，精灵铁匠师和兽人铁匠师，精灵铁匠师专门做精灵类的武器，兽人铁匠师专门做兽人的武器。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Weapon-product"><a href="#1-Weapon-product" class="headerlink" title="1. Weapon(product)"></a>1. Weapon(product)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Weapon &#123;</div><div class="line">    WeaponType getWeaponType();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-WeaponType"><a href="#2-WeaponType" class="headerlink" title="2. WeaponType"></a>2. WeaponType</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public enum WeaponType &#123;</div><div class="line">    SHORT_SWORD(&quot;short sword&quot;),</div><div class="line">    SPEAR(&quot;spear&quot;),</div><div class="line">    AXE(&quot;axe&quot;),</div><div class="line">    UNDEFINE(&quot;&quot;);</div><div class="line">    private String title;</div><div class="line"></div><div class="line">    WeaponType(String title) &#123;</div><div class="line">        this.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getTitle() &#123;</div><div class="line">        return title;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-OrcWeapon-concret-product"><a href="#3-OrcWeapon-concret-product" class="headerlink" title="3. OrcWeapon(concret product)"></a>3. OrcWeapon(concret product)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class OrcWeapon implements Weapon &#123;</div><div class="line">    private WeaponType weaponType;</div><div class="line"></div><div class="line">    public OrcWeapon(WeaponType weaponType) &#123;</div><div class="line">        this.weaponType = weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public WeaponType getWeaponType() &#123;</div><div class="line">        return weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Orcish: &quot; + weaponType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-ElfWeapon-concret-product"><a href="#4-ElfWeapon-concret-product" class="headerlink" title="4. ElfWeapon(concret product)"></a>4. ElfWeapon(concret product)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class ElfWeapon implements Weapon &#123;</div><div class="line">    private WeaponType weaponType;</div><div class="line"></div><div class="line">    public ElfWeapon(WeaponType weaponType) &#123;</div><div class="line">        this.weaponType = weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public WeaponType getWeaponType() &#123;</div><div class="line">        return weaponType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Elf: &quot; + weaponType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-Blacksmith-factory"><a href="#5-Blacksmith-factory" class="headerlink" title="5. Blacksmith(factory)"></a>5. Blacksmith(factory)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Blacksmith &#123;</div><div class="line">    Weapon manufactureWeapon(WeaponType weaponType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-OrcBlacksmith-concret-factory"><a href="#6-OrcBlacksmith-concret-factory" class="headerlink" title="6. OrcBlacksmith(concret factory)"></a>6. OrcBlacksmith(concret factory)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class OrcBlacksmith implements Blacksmith &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Weapon manufactureWeapon(WeaponType weaponType) &#123;</div><div class="line">        return new OrcWeapon(weaponType);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-ElfBlacksmith-concret-factory"><a href="#7-ElfBlacksmith-concret-factory" class="headerlink" title="7. ElfBlacksmith(concret factory)"></a>7. ElfBlacksmith(concret factory)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ElfBlacksmith implements Blacksmith&#123;</div><div class="line">    @Override</div><div class="line">    public Weapon manufactureWeapon(WeaponType weaponType) &#123;</div><div class="line">        return new ElfWeapon(weaponType);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-App-启动类"><a href="#8-App-启动类" class="headerlink" title="8. App(启动类)"></a>8. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    private final Blacksmith blacksmith;</div><div class="line"></div><div class="line">    public App(Blacksmith blacksmith) &#123;</div><div class="line">        this.blacksmith = blacksmith;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        App app = new App(new OrcBlacksmith());</div><div class="line">        app.manufactureWeapons();</div><div class="line">        app = new App(new ElfBlacksmith());</div><div class="line">        app.manufactureWeapons();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void manufactureWeapons()&#123;</div><div class="line">        Weapon weapon;</div><div class="line">        weapon = blacksmith.manufactureWeapon(SHORT_SWORD);</div><div class="line">        System.out.println(weapon.toString());</div><div class="line">        weapon = blacksmith.manufactureWeapon(AXE);</div><div class="line">        System.out.println(weapon.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>工厂方法模式：定义了一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p>
<h4 id="2-UML"><a href="#2-UML" class="headerlink" title="2. UML"></a>2. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-8-4/35555791.jpg" alt=""></p>
<h4 id="3-简单工厂-VS-工厂模式"><a href="#3-简单工厂-VS-工厂模式" class="headerlink" title="3. 简单工厂 VS 工厂模式"></a>3. 简单工厂 VS 工厂模式</h4><p>简单工厂模式的最大优点杂鱼工厂类中包含了必要的逻辑判断，根据客户端的条件选择动态实例化相关的类，对于客户端来说，去除了具体产品的依赖。但如果要新增一个产品，需要修改原有的工厂类，增加一个CASE用例。违背了开放-封闭模式。</p>
<p>使用工厂模式，<strong>整个工厂和产品体系都没有修改的变化，只有扩展的变化符合了开放-封闭原则</strong>，客户端需要决定实例化哪一个工厂来实现运算类，即 工厂方法把简单工厂的内部逻辑判断移到了客户端进行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;有两类铁匠师，精灵铁匠师和兽人铁匠师，精灵铁匠师专门做精灵类的武器，兽人铁匠师专门做兽人的武器。&lt;/p&gt;
&lt;h3 id=&quot;实
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>4.代理模式</title>
    <link href="http://jianwl.com/2018/07/30/4-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/07/30/4-代理模式/</id>
    <published>2018-07-30T15:13:25.000Z</published>
    <updated>2018-07-30T15:48:20.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>有个暗恋”李娇娇”同学的男生雇佣快递员“威廉”，把礼物送给这个女生。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-IGiveGift-Subject"><a href="#1-IGiveGift-Subject" class="headerlink" title="1. IGiveGift(Subject)"></a>1. IGiveGift(Subject)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface IGiveGift &#123;</div><div class="line">    void giveDolls();</div><div class="line">    void giveFlowers();</div><div class="line">    void giveChocolate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-SchoolGirl"><a href="#2-SchoolGirl" class="headerlink" title="2. SchoolGirl"></a>2. SchoolGirl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SchoolGirl &#123;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public SchoolGirl(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Pursuit-RealSubject"><a href="#3-Pursuit-RealSubject" class="headerlink" title="3. Pursuit(RealSubject)"></a>3. Pursuit(RealSubject)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Pursuit implements IGiveGift &#123;</div><div class="line">    private SchoolGirl girl;</div><div class="line"></div><div class="line">    public Pursuit(SchoolGirl girl) &#123;</div><div class="line">        this.girl = girl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveDolls() &#123;</div><div class="line">        System.out.println(girl.getName() + &quot;送你洋娃娃~&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveFlowers() &#123;</div><div class="line">        System.out.println(girl.getName() + &quot;送你花~&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveChocolate() &#123;</div><div class="line">        System.out.println(girl.getName() + &quot;送你巧克力~&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Proxy"><a href="#4-Proxy" class="headerlink" title="4. Proxy"></a>4. Proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Proxy implements IGiveGift&#123;</div><div class="line">    private Pursuit man;</div><div class="line"></div><div class="line">    public Proxy(SchoolGirl girl) &#123;</div><div class="line">        this.man = new Pursuit(girl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveDolls() &#123;</div><div class="line">        man.giveDolls();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveFlowers() &#123;</div><div class="line">        man.giveFlowers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void giveChocolate() &#123;</div><div class="line">        man.giveChocolate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-App-启动类"><a href="#5-App-启动类" class="headerlink" title="5. App(启动类)"></a>5. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SchoolGirl girl = new SchoolGirl(&quot;李娇娇&quot;);</div><div class="line">        Proxy william = new Proxy(girl);</div><div class="line">        william.giveDolls();</div><div class="line">        william.giveFlowers();</div><div class="line">        william.giveChocolate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>为其他对象提供一种代理以控制这个对象的访问</p>
<h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><ol>
<li>远程代理，即一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象存在于不同空间地址的事实。</li>
<li>虚拟代理，是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。比如说打开一个很大的HTML网页时，里面可能需要很多的文字和图片，但是你还是可以很快打开它，此时你看到的是所有的文字，但图片还是一张一张地下载后才能看到。那些未打开的图片库，通过虚拟代理来替代真实的图片，此时代理存储了真实图片的路径和尺寸。</li>
<li>安全代理，用来控制真实对象访问是的权限。</li>
<li>智能指引，当调用真实对象时，代理处理另外一些事。</li>
</ol>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-30/12731914.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;有个暗恋”李娇娇”同学的男生雇佣快递员“威廉”，把礼物送给这个女生。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>3.装饰模式</title>
    <link href="http://jianwl.com/2018/07/29/3-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/07/29/3-装饰模式/</id>
    <published>2018-07-29T01:52:22.000Z</published>
    <updated>2018-07-29T03:56:43.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>写一个可以给人搭配不同的服饰的系统，比如类似QQ、网络游戏或论坛都有的Avatar系统，你会怎么开发？</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Person-concreteComponent"><a href="#1-Person-concreteComponent" class="headerlink" title="1. Person(concreteComponent)"></a>1. Person(concreteComponent)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Person &#123;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public Person() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Person(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void show()&#123;</div><div class="line">        System.out.println(&quot;light up the body,just wear clothes,please!&quot;);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Finery-Decorator"><a href="#2-Finery-Decorator" class="headerlink" title="2. Finery(Decorator)"></a>2. Finery(Decorator)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Finery extends Person &#123;</div><div class="line">    private Person component;</div><div class="line"></div><div class="line">    public void setComponent(Person component) &#123;</div><div class="line">        this.component = component;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void show() &#123;</div><div class="line">        if(component != null)&#123;</div><div class="line">            component.show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-TShirts-ConcreteDecorator"><a href="#3-TShirts-ConcreteDecorator" class="headerlink" title="3. TShirts(ConcreteDecorator)"></a>3. TShirts(ConcreteDecorator)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class TShirts extends Finery &#123;</div><div class="line">    @Override</div><div class="line">    public void show() &#123;</div><div class="line">        super.show();</div><div class="line">        System.out.println(&quot;wear TShirts&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-BigTrouser-ConcreteDecorator"><a href="#4-BigTrouser-ConcreteDecorator" class="headerlink" title="4. BigTrouser(ConcreteDecorator)"></a>4. BigTrouser(ConcreteDecorator)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class BigTrouser extends Finery &#123;</div><div class="line">    @Override</div><div class="line">    public void show() &#123;</div><div class="line">        super.show();</div><div class="line">        System.out.println(&quot;wear bigTrouser&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-App-启动类"><a href="#5-App-启动类" class="headerlink" title="5. App(启动类)"></a>5. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Person component = new Person(&quot;William&quot;);</div><div class="line">        TShirts tShirts = new TShirts();</div><div class="line">        BigTrouser trouser = new BigTrouser();</div><div class="line"></div><div class="line">        tShirts.setComponent(component);</div><div class="line">        trouser.setComponent(tShirts);</div><div class="line">        trouser.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>动态给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><p>当系统需要新功能的时候，是向旧的类中添加新的代码，这些新加的代码通常修饰了原有类的核心职责或主要行为，他们在主类中加入新的字段、新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。装饰模式提供了一个很好的解决方案，它把每个要装饰的功能都放在单独的类中，并让这个类包装它所要修饰的类，因为当需要执行特殊行为时，客户代码就可以在运行时，根据需要有选择地、按顺序使用装饰功能包装对象。</p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><p>有效地把核心职责和装饰功能去分开了，去除相关的重复修饰逻辑；</p>
<h4 id="3-UML"><a href="#3-UML" class="headerlink" title="3. UML"></a>3. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-29/12012511.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;写一个可以给人搭配不同的服饰的系统，比如类似QQ、网络游戏或论坛都有的Avatar系统，你会怎么开发？&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2.策略模式</title>
    <link href="http://jianwl.com/2018/07/28/2-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/07/28/2-策略模式/</id>
    <published>2018-07-28T04:21:20.000Z</published>
    <updated>2018-07-28T06:38:43.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><p>做一个商场收银软件，营业员可以记录客户所购买商品的单价和数量，有个列表框来记录商品的清单，一个标签来记录总计, 同时支持商场有此促销策略，比如全场打折活动。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-RecvCash接口"><a href="#1-RecvCash接口" class="headerlink" title="1. RecvCash接口"></a>1. RecvCash接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface RecvCash &#123;</div><div class="line"></div><div class="line">    double returnCash(double totalPrice);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-NormalCash-促销手段"><a href="#2-NormalCash-促销手段" class="headerlink" title="2. NormalCash(促销手段)"></a>2. NormalCash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class NormalCash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public NormalCash( double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return totalPrice * discount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Point8Cash-促销手段"><a href="#3-Point8Cash-促销手段" class="headerlink" title="3. Point8Cash(促销手段)"></a>3. Point8Cash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Point8Cash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public Point8Cash(double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return totalPrice * discount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-Point7Cash-促销手段"><a href="#4-Point7Cash-促销手段" class="headerlink" title="4. Point7Cash(促销手段)"></a>4. Point7Cash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Point7Cash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public Point7Cash( double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return discount * totalPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-Point5Cash-促销手段"><a href="#5-Point5Cash-促销手段" class="headerlink" title="5. Point5Cash(促销手段)"></a>5. Point5Cash(促销手段)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Point5Cash implements RecvCash &#123;</div><div class="line">    private double discount;</div><div class="line"></div><div class="line">    public Point5Cash(double discount) &#123;</div><div class="line">        this.discount = discount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double returnCash(double totalPrice) &#123;</div><div class="line">        return discount * totalPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-Discount-枚举"><a href="#6-Discount-枚举" class="headerlink" title="6. Discount(枚举)"></a>6. Discount(枚举)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public enum Discount &#123;</div><div class="line">    NORMAL(1, 1, &quot;正常&quot;),</div><div class="line">    POINT_8(2, 0.8, &quot;8折&quot;),</div><div class="line">    POINT_7(3, 0.7, &quot;7折&quot;),</div><div class="line">    POINT_5(4, 0.5, &quot;5折&quot;);</div><div class="line">    private int lab;</div><div class="line">    private double discountPoint;</div><div class="line">    private String desc;</div><div class="line"></div><div class="line">    Discount(int lab, double discountPoint, String desc) &#123;</div><div class="line">        this.lab = lab;</div><div class="line">        this.discountPoint = discountPoint;</div><div class="line">        this.desc = desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getLab() &#123;</div><div class="line">        return lab;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double getDiscountPoint() &#123;</div><div class="line">        return discountPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDesc() &#123;</div><div class="line">        return desc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-Strategy-策略封装"><a href="#7-Strategy-策略封装" class="headerlink" title="7. Strategy(策略封装)"></a>7. Strategy(策略封装)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class Strategy &#123;</div><div class="line">    private RecvCash recvCash;</div><div class="line"></div><div class="line">    public Strategy(int label) &#123;</div><div class="line">        switch (label) &#123;</div><div class="line">            case 1:</div><div class="line">                recvCash = new NormalCash(Discount.NORMAL.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            case 2:</div><div class="line">                recvCash = new Point8Cash(Discount.POINT_8.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            case 3:</div><div class="line">                recvCash = new Point7Cash(Discount.POINT_7.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            case 4:</div><div class="line">                recvCash = new Point5Cash(Discount.POINT_5.getDiscountPoint());</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                recvCash = new NormalCash(Discount.NORMAL.getDiscountPoint());</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RecvCash getRecvCash() &#123;</div><div class="line">        return recvCash;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-App-启动类"><a href="#8-App-启动类" class="headerlink" title="8. App(启动类)"></a>8. App(启动类)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private List&lt;String&gt; result;</div><div class="line">private static final String DESC_PATTRN = &quot;单价：%.2f 数量:%d %s 合计: %.2f&quot;;</div><div class="line"></div><div class="line">public App() &#123;</div><div class="line">    result = new ArrayList&lt;&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void initInstance(double price, int count, Discount discount)&#123;</div><div class="line">    double realCash = new Strategy(discount.getLab()).getRecvCash().returnCash(price * count);</div><div class="line">    result.add(String.format(DESC_PATTRN, price,count,discount.getDesc(),realCash));</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">    App app = new App();</div><div class="line">    app.initInstance(10,10,Discount.NORMAL);</div><div class="line">    app.initInstance(10,10,Discount.POINT_8);</div><div class="line">    app.initInstance(10,10,Discount.POINT_7);</div><div class="line">    app.initInstance(10,10,Discount.POINT_5);</div><div class="line">    System.out.println(JSON.toJSONString(app.result));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="策略模式介绍"><a href="#策略模式介绍" class="headerlink" title="策略模式介绍"></a>策略模式介绍</h3><h4 id="1-UML"><a href="#1-UML" class="headerlink" title="1. UML"></a>1. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-28/49505014.jpg" alt=""></p>
<h4 id="2-定义"><a href="#2-定义" class="headerlink" title="2. 定义"></a>2. 定义</h4><p>策略模式是一个定义一系列算法的方法，从概念上看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了<strong>各种算法类</strong>与<strong>使用算法类</strong>之间的耦合。</p>
<h4 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h4><ol>
<li>将选择所用具体实现的职责由客户端对象承担转移给策略模式的Context对象，最大化地减轻了客户端的职责。</li>
<li>策略模式的Strategy类层次为Context定义了一系列的可供<strong>重用</strong>的算法和行为。</li>
<li>简化测试，每个算法都有自己的类</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求场景&quot;&gt;&lt;a href=&quot;#需求场景&quot; class=&quot;headerlink&quot; title=&quot;需求场景&quot;&gt;&lt;/a&gt;需求场景&lt;/h3&gt;&lt;p&gt;做一个商场收银软件，营业员可以记录客户所购买商品的单价和数量，有个列表框来记录商品的清单，一个标签来记录总计, 同时支持商场
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>1.简单工厂模式</title>
    <link href="http://jianwl.com/2018/07/22/1-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jianwl.com/2018/07/22/1-简单工厂模式/</id>
    <published>2018-07-22T14:12:37.000Z</published>
    <updated>2018-07-28T06:57:38.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文章用小故事的形式引出设计模式，让读者相对轻松地进入设计模式的学习。</p>
<h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>小菜今年计算机专业大四了，学了不少软件开发方面的东西，也学着编了些小程序，踌躇满志，一心找到一个好单位，当投递了无数份简历后，终于收到了一个单位的面试通知，小菜欣喜若狂。</p>
<p>到了人家单位，前台小姐姐给他一份题目，上面写着: 请用Java面向对象语言实现<strong>一个计算器控制台程序，要求输入两个数和运算符，得到结果</strong></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-Operation"><a href="#1-Operation" class="headerlink" title="1. Operation"></a>1. Operation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Operation &#123;</div><div class="line">    double getResult(int numa,int numb);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-AddOperation"><a href="#2-AddOperation" class="headerlink" title="2. AddOperation"></a>2. AddOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class AddOperation implements Operation &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line">        return numa + numb ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-SubOperation"><a href="#3-SubOperation" class="headerlink" title="3. SubOperation"></a>3. SubOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SubOperation implements Operation &#123;</div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line">        return numa - numb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-MulOperation"><a href="#4-MulOperation" class="headerlink" title="4. MulOperation"></a>4. MulOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class MulOperation implements Operation &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line">        return numa * numb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-DivOperation"><a href="#5-DivOperation" class="headerlink" title="5. DivOperation"></a>5. DivOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class DivOperation implements Operation &#123;</div><div class="line">    @Override</div><div class="line">    public double getResult(int numa,int numb) &#123;</div><div class="line"></div><div class="line">        if (numb == 0) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;除数不能为0&quot;);</div><div class="line">        &#125;</div><div class="line">        return numa / numb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-启动类App"><a href="#6-启动类App" class="headerlink" title="6. 启动类App"></a>6. 启动类App</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class App &#123;</div><div class="line">    public static Operation createOperation(String operate)&#123;</div><div class="line">        switch (operate)&#123;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                return new AddOperation();</div><div class="line">            case &quot;-&quot;:</div><div class="line">                return new SubOperation();</div><div class="line">            case &quot;*&quot;:</div><div class="line">                return new MulOperation();</div><div class="line">            case &quot;/&quot;:</div><div class="line">                return new DivOperation();</div><div class="line">            default:</div><div class="line">                throw new IllegalArgumentException(&quot;没有此运算符&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Operation oper = createOperation(&quot;+&quot;);</div><div class="line">        System.out.println(oper.getResult(1,2));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="1-UML"><a href="#1-UML" class="headerlink" title="1. UML"></a>1. UML</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-28/83812847.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;文章用小故事的形式引出设计模式，让读者相对轻松地进入设计模式的学习。&lt;/p&gt;
&lt;h3 id=&quot;小故事&quot;&gt;&lt;a href=&quot;#小故事&quot; cla
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式专题训练</title>
    <link href="http://jianwl.com/2018/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/"/>
    <id>http://jianwl.com/2018/07/22/设计模式专题训练/</id>
    <published>2018-07-22T13:52:33.000Z</published>
    <updated>2018-07-30T15:43:56.256Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>设计模式有四境界：</p>
<ol>
<li>没学前一点不懂，根本想不到用设计模式，设计的代码很糟糕。</li>
<li>学了几个设计模式后，很开心，于是导出想着要用自己学过的模式，于是时常造成误用模式而不自知。</li>
<li>学完全部设计模式时，感觉诸多模式极其相似，无法分清模式之间的差异，有困惑，但深知误用之害，应用之时有所犹豫。</li>
<li>灵活应用模式，甚至不应用具体的某种模式也能设计出优秀的代码，以达到无剑胜有剑的境界。</li>
</ol>
<p>通过学习设计模式，让你找到封装变化、对象间松散耦合、针对接口编程的感觉，从而设计出易维护、易扩展、易复用、灵活性好的程序。</p>
<h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><ol>
<li>简单工厂模式 「√」</li>
<li>策略模式 「√」</li>
<li>装饰模式「√」</li>
<li>代理模式「√」</li>
<li>工厂方法模式</li>
<li>原型模式</li>
<li>模板方法模式</li>
<li>外观模式</li>
<li>建造者模式</li>
<li>观察者模式</li>
<li>抽象工厂模式</li>
<li>状态模式</li>
<li>适配器模式</li>
<li>备忘录模式</li>
<li>组合模式</li>
<li>迭代器模式</li>
<li>单例模式</li>
<li>桥接模式</li>
<li>命令模式</li>
<li>责任链模式</li>
<li>中介者模式</li>
<li>享元模式</li>
<li>解释器模式</li>
<li>访问者模式</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;设计模式有四境界：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没学前一点不懂，根本想不到用设计模式，设计的代码很糟糕。&lt;/li&gt;
&lt;li&gt;学了几个设计模式后
    
    </summary>
    
      <category term="设计模式" scheme="http://jianwl.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://jianwl.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>consul实现服务注册与发现</title>
    <link href="http://jianwl.com/2018/07/22/consul%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>http://jianwl.com/2018/07/22/consul实现服务注册与发现/</id>
    <published>2018-07-22T07:06:08.000Z</published>
    <updated>2018-07-22T07:37:43.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个章节旨在梳理consul服务注册与发现的实战细节。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-启动consul-agent"><a href="#1-启动consul-agent" class="headerlink" title="1. 启动consul agent"></a>1. 启动consul agent</h4><p>如果没有安装consul，请移步<a href="https://www.consul.io/downloads.html" target="_blank" rel="external">consul install</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/consul.d</div><div class="line">consul agent -dev -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<p>启动consul后，在另外一个控制台输入：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-22/83511450.jpg" alt=""></p>
<p>可以看到consul agent已经正常启动了。</p>
<h4 id="2-注册一个服务"><a href="#2-注册一个服务" class="headerlink" title="2. 注册一个服务"></a>2. 注册一个服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --request PUT --data @payload.json &quot;http://localhost:8500/v1/agent/service/register&quot;</div></pre></td></tr></table></figure>
<p>payload.json文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;ID&quot;: &quot;spring-learning&quot;,</div><div class="line">  &quot;Name&quot;: &quot;springLearning&quot;,</div><div class="line">  &quot;Tags&quot;: [</div><div class="line">    &quot;primary&quot;,</div><div class="line">    &quot;v1&quot;</div><div class="line">  ],</div><div class="line">  &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">  &quot;Port&quot;: 1111,</div><div class="line">  &quot;Meta&quot;: &#123;</div><div class="line">    &quot;spring-learning&quot;: &quot;1.0.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;EnableTagOverride&quot;: false,</div><div class="line">  &quot;Check&quot;: &#123;</div><div class="line">    &quot;HTTP&quot;: &quot;http://localhost:1111/health&quot;,</div><div class="line">    &quot;Interval&quot;: &quot;10s&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册一个服务，包含这些参数(服务名、服务标签、IP、端口、健康检查)；IP为<code>127.0.0.1</code>，端口<code>1111</code>，这个服务是本地写的一个服务，可以根据自己的情况，去注册服务。</p>
<h4 id="3-查看所有服务列表"><a href="#3-查看所有服务列表" class="headerlink" title="3. 查看所有服务列表"></a>3. 查看所有服务列表</h4><p>请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &quot;localhost:8500/v1/catalog/services&quot;</div></pre></td></tr></table></figure>
<p>响应：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;consul&quot;: [],</div><div class="line">    &quot;springLearning&quot;: [</div><div class="line">        &quot;primary&quot;,</div><div class="line">        &quot;v1&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-查看某个服务信息"><a href="#4-查看某个服务信息" class="headerlink" title="4. 查看某个服务信息"></a>4. 查看某个服务信息</h4><p>请求:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &quot;localhost:8500/v1/catalog/service/springLearning&quot;</div></pre></td></tr></table></figure>
<p>响应：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;ID&quot;: &quot;a6db682e-fb44-2af6-63f8-83c43cb7824c&quot;,</div><div class="line">        &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">        &quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">        &quot;TaggedAddresses&quot;: &#123;</div><div class="line">            &quot;lan&quot;: &quot;127.0.0.1&quot;,</div><div class="line">            &quot;wan&quot;: &quot;127.0.0.1&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;NodeMeta&quot;: &#123;</div><div class="line">            &quot;consul-network-segment&quot;: &quot;&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;ServiceID&quot;: &quot;spring-learning&quot;,</div><div class="line">        &quot;ServiceName&quot;: &quot;springLearning&quot;,</div><div class="line">        &quot;ServiceTags&quot;: [</div><div class="line">            &quot;primary&quot;,</div><div class="line">            &quot;v1&quot;</div><div class="line">        ],</div><div class="line">        &quot;ServiceAddress&quot;: &quot;127.0.0.1&quot;,</div><div class="line">        &quot;ServiceMeta&quot;: &#123;</div><div class="line">            &quot;spring-learning&quot;: &quot;1.0.0&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;ServicePort&quot;: 1111,</div><div class="line">        &quot;ServiceEnableTagOverride&quot;: false,</div><div class="line">        &quot;CreateIndex&quot;: 40,</div><div class="line">        &quot;ModifyIndex&quot;: 40</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="5-获取健康的服务节点列表"><a href="#5-获取健康的服务节点列表" class="headerlink" title="5. 获取健康的服务节点列表"></a>5. 获取健康的服务节点列表</h4><p>请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &quot;localhost:8500/v1/health/service/springLearning?passing&quot;</div></pre></td></tr></table></figure>
<p>响应：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;Node&quot;: &#123;</div><div class="line">            &quot;ID&quot;: &quot;a6db682e-fb44-2af6-63f8-83c43cb7824c&quot;,</div><div class="line">            &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">            &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">            &quot;Datacenter&quot;: &quot;dc1&quot;,</div><div class="line">            &quot;TaggedAddresses&quot;: &#123;</div><div class="line">                &quot;lan&quot;: &quot;127.0.0.1&quot;,</div><div class="line">                &quot;wan&quot;: &quot;127.0.0.1&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;Meta&quot;: &#123;</div><div class="line">                &quot;consul-network-segment&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;CreateIndex&quot;: 5,</div><div class="line">            &quot;ModifyIndex&quot;: 6</div><div class="line">        &#125;,</div><div class="line">        &quot;Service&quot;: &#123;</div><div class="line">            &quot;ID&quot;: &quot;spring-learning&quot;,</div><div class="line">            &quot;Service&quot;: &quot;springLearning&quot;,</div><div class="line">            &quot;Tags&quot;: [</div><div class="line">                &quot;primary&quot;,</div><div class="line">                &quot;v1&quot;</div><div class="line">            ],</div><div class="line">            &quot;Address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">            &quot;Meta&quot;: &#123;</div><div class="line">                &quot;spring-learning&quot;: &quot;1.0.0&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;Port&quot;: 1111,</div><div class="line">            &quot;EnableTagOverride&quot;: false,</div><div class="line">            &quot;CreateIndex&quot;: 40,</div><div class="line">            &quot;ModifyIndex&quot;: 40</div><div class="line">        &#125;,</div><div class="line">        &quot;Checks&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">                &quot;CheckID&quot;: &quot;serfHealth&quot;,</div><div class="line">                &quot;Name&quot;: &quot;Serf Health Status&quot;,</div><div class="line">                &quot;Status&quot;: &quot;passing&quot;,</div><div class="line">                &quot;Notes&quot;: &quot;&quot;,</div><div class="line">                &quot;Output&quot;: &quot;Agent alive and reachable&quot;,</div><div class="line">                &quot;ServiceID&quot;: &quot;&quot;,</div><div class="line">                &quot;ServiceName&quot;: &quot;&quot;,</div><div class="line">                &quot;ServiceTags&quot;: [],</div><div class="line">                &quot;Definition&quot;: &#123;&#125;,</div><div class="line">                &quot;CreateIndex&quot;: 5,</div><div class="line">                &quot;ModifyIndex&quot;: 5</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Node&quot;: &quot;jianweilindeMacBook-Pro.local&quot;,</div><div class="line">                &quot;CheckID&quot;: &quot;service:spring-learning&quot;,</div><div class="line">                &quot;Name&quot;: &quot;Service &apos;springLearning&apos; check&quot;,</div><div class="line">                &quot;Status&quot;: &quot;passing&quot;,</div><div class="line">                &quot;Notes&quot;: &quot;&quot;,</div><div class="line">                &quot;Output&quot;: &quot;HTTP GET http://localhost:1111/health: 200  Output: services is healthy!&quot;,</div><div class="line">                &quot;ServiceID&quot;: &quot;spring-learning&quot;,</div><div class="line">                &quot;ServiceName&quot;: &quot;springLearning&quot;,</div><div class="line">                &quot;ServiceTags&quot;: [</div><div class="line">                    &quot;primary&quot;,</div><div class="line">                    &quot;v1&quot;</div><div class="line">                ],</div><div class="line">                &quot;Definition&quot;: &#123;&#125;,</div><div class="line">                &quot;CreateIndex&quot;: 40,</div><div class="line">                &quot;ModifyIndex&quot;: 42</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="5-注销服务"><a href="#5-注销服务" class="headerlink" title="5. 注销服务"></a>5. 注销服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --request PUT &quot;localhost:8500/v1/agent/service/deregister/spring-learning</div></pre></td></tr></table></figure>
<p>查看服务列表，可知服务已经被注销了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-22/66291532.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.consul.io/api/agent/service.html" target="_blank" rel="external">Agent HTTP API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个章节旨在梳理consul服务注册与发现的实战细节。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;heade
    
    </summary>
    
      <category term="consul" scheme="http://jianwl.com/categories/consul/"/>
    
    
      <category term="consul" scheme="http://jianwl.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>consul核心概念梳理</title>
    <link href="http://jianwl.com/2018/07/22/consul%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/"/>
    <id>http://jianwl.com/2018/07/22/consul核心概念梳理/</id>
    <published>2018-07-22T06:00:30.000Z</published>
    <updated>2018-07-22T07:38:28.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是consul"><a href="#1-什么是consul" class="headerlink" title="1. 什么是consul"></a>1. 什么是consul</h3><p>Consul是一种服务网格(service mesh)解决方案，提供<strong>服务发现、配置和分段功能</strong>的全功能控制平面。每个功能可以单独使用，也可以一起使用以构建全服务网格。consul附带一个简单的内建代理，所以可以开箱即用，也支持第三方代理如Envoy。</p>
<h3 id="2-consul的核心特性"><a href="#2-consul的核心特性" class="headerlink" title="2. consul的核心特性"></a>2. consul的核心特性</h3><h4 id="1-服务发现"><a href="#1-服务发现" class="headerlink" title="1) 服务发现"></a>1) 服务发现</h4><p>consul客户端注册一个服务，如api或mysql，其他客户端可以使用consul发现服务提供者。使用DNS或HTTP可以很简单的找到它们依赖的服务。</p>
<h4 id="2）健康检查"><a href="#2）健康检查" class="headerlink" title="2）健康检查"></a>2）健康检查</h4><p>consul客户端提供任意数量的健康检查，这些运行检查可以与服务相关联(如服务健康检查)，也可以与本地节点相关联(如内存利用率低于90%)。使用方可以使用此信息来监控集群运行状态，服务发现组件使用此信息将流量路由远离不健康的主机。</p>
<h4 id="3-KV存储"><a href="#3-KV存储" class="headerlink" title="3) KV存储"></a>3) KV存储</h4><p>应用程序可以将consul的分层<strong>键/值存储</strong>用于任何用途，包括动态配置，功能标记，协调、领导者选举等。简单的HTTP API 使其易于使用。</p>
<h4 id="4）安全的服务通信"><a href="#4）安全的服务通信" class="headerlink" title="4）安全的服务通信"></a>4）安全的服务通信</h4><p>consul可以为服务生成和分发TLS证书，以建立互相的TLS连接。可以使用<strong>intentions</strong>来定义允许哪些服务进行通信。可以实时更改的<strong>intentions</strong>轻松管理服务分段，而不是使用复杂的网络拓扑和静态防火墙规则。</p>
<h4 id="5）多数据中心"><a href="#5）多数据中心" class="headerlink" title="5）多数据中心"></a>5）多数据中心</h4><p>consul支持开箱即用的多个数据中心，这意味着consul用户不必担心构建额外的抽象层以扩展到多个区域。</p>
<h3 id="3-consul的常用术语"><a href="#3-consul的常用术语" class="headerlink" title="3. consul的常用术语"></a>3. consul的常用术语</h3><h4 id="1）Agent"><a href="#1）Agent" class="headerlink" title="1）Agent"></a>1）Agent</h4><p>代理是consul集群的每个成员的长时间运行的守护进程，它是通过运行<code>consul agent</code>来启动的，代理能够以客户端或服务器模式运行，由于所有节点都必须运行代理，因此将节点成为客户端或服务器更简单，但代理的其他实例也是如此。所有代理都可以运行DNS或HTTP接口，并负责<strong>运行检查并保持服务同步</strong></p>
<h4 id="2）Client"><a href="#2）Client" class="headerlink" title="2）Client"></a>2）Client</h4><p>客户端是将所有RPC请求转发到服务器的代理，客户端是无状态的，客户端执行的唯一后台活动是参与局域gossip，这个活动的资源开销非常小，并且仅消耗少量的网络带宽。</p>
<h4 id="3-Server"><a href="#3-Server" class="headerlink" title="3) Server"></a>3) Server</h4><p>服务器是具有扩展责任的代理，包括参与Raft仲裁、维护集群状态，响应RPC查询，与其他数据中心交换广域gossip以及将查询转发给领导者或远程数据中心。</p>
<h4 id="4）Datacenter"><a href="#4）Datacenter" class="headerlink" title="4）Datacenter"></a>4）Datacenter</h4><p>虽然数据中心的定义似乎很明显，但必须考虑细微的细节。例如，在EC2中，多个可用区域是否被视为包含单个数据中心？我们将数据中心定义为专用、低延迟和高带宽的网络环境。这排除了通过公共互联网通信，但出于我们的目的，单个EC2区域内的多个可用区域将被视为单个数据中心的一部分。</p>
<h4 id="5）Consensus"><a href="#5）Consensus" class="headerlink" title="5）Consensus"></a>5）Consensus</h4><p>我们使用共识来表示对当选领导者的协议以及对事务顺序的协议，由于这些事务应用于有限状态机，因此我们对共识的定义意味着复制状态机的一致性。</p>
<h4 id="6）Gossip"><a href="#6）Gossip" class="headerlink" title="6）Gossip"></a>6）Gossip</h4><p>Consul建立在Serf之上，它提供了一个完整的gossip协议，可用于多种用途，Serf提供<strong>会员资格、故障检测和事件广播</strong>，gossip涉及随机节点间的通信，主要是通过UDP</p>
<h4 id="7）LAN-Gossip"><a href="#7）LAN-Gossip" class="headerlink" title="7）LAN Gossip"></a>7）LAN Gossip</h4><p>包含全部位于同一局域网或数据中心的节点</p>
<h4 id="8）WAN-Gossip"><a href="#8）WAN-Gossip" class="headerlink" title="8）WAN Gossip"></a>8）WAN Gossip</h4><p>服务器位于不同数据中心，通常通过广域网进行通信。</p>
<h4 id="9）RPC"><a href="#9）RPC" class="headerlink" title="9）RPC"></a>9）RPC</h4><p>远程过程调用，这是一种请求/响应机制，允许客户端想服务端发出请求。</p>
<h3 id="4-consul架构"><a href="#4-consul架构" class="headerlink" title="4. consul架构"></a>4. consul架构</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-22/94003551.jpg" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.consul.io/docs/internals/architecture.html" target="_blank" rel="external">Consul Guides</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是consul&quot;&gt;&lt;a href=&quot;#1-什么是consul&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是consul&quot;&gt;&lt;/a&gt;1. 什么是consul&lt;/h3&gt;&lt;p&gt;Consul是一种服务网格(service mesh)解决方案，
    
    </summary>
    
      <category term="consul" scheme="http://jianwl.com/categories/consul/"/>
    
    
      <category term="consul" scheme="http://jianwl.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>初识zookeeper</title>
    <link href="http://jianwl.com/2018/07/05/%E5%88%9D%E8%AF%86zookeeper/"/>
    <id>http://jianwl.com/2018/07/05/初识zookeeper/</id>
    <published>2018-07-05T00:41:49.000Z</published>
    <updated>2018-07-05T00:50:01.642Z</updated>
    
    <content type="html"><![CDATA[<p>Zookeeper是一个开源的分布式协调服务，由雅虎创建，是google chubby的开源实现。zookeeper的设计目标是将哪些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>
<h3 id="Zookeeper是什么"><a href="#Zookeeper是什么" class="headerlink" title="Zookeeper是什么"></a>Zookeeper是什么</h3><p>zookeeper是典型的分布式数据一致性的解决方案，分布式应用程序可以基于它实现如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master选举，分布式锁和分布式队列等功能。zookeeper可以保证如下分布式一致性特性：</p>
<p><strong>顺序一致性</strong></p>
<p>从同一个客户端发起的事务请求，最终将会严格地按照其发起顺序被应用到Zookeeper中去。</p>
<p><strong>原子性</strong></p>
<p>所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群所有机器都成功应用了某个事务，要么都没有应用，一定不会出现集群中部分机器应用了事务，另外一部分没有应用事务。</p>
<p><strong>单一视图</strong></p>
<p>无论客户端连接的是哪个zookeeper服务器，其看到的服务端数据模型都是一致的</p>
<p><strong>可靠性</strong></p>
<p>一旦服务端成功地应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会被一直保留下来，除非有另一个事务又对其进行了变更。</p>
<p><strong>实时性</strong></p>
<p>通常人们看到实时性的第一反应是，一旦一个事务被成功应用，那么客户端能够立即从服务端读取到这个事务变更后的最新数据状态。这里需要注意的是，zookeeper仅仅保证在一定时间内，客户端最终一定能够从服务器上读取到最新的数据状态。</p>
<h3 id="Zookeeper的设计目标"><a href="#Zookeeper的设计目标" class="headerlink" title="Zookeeper的设计目标"></a>Zookeeper的设计目标</h3><p>zookeeper致力于提供一个高性能、高可用、且具有严格的顺序访问控制能力(主要是写操作的严格顺序性)的分布式协调服务。高性能使得zookeeper能够应用于那些对系统吞吐有明确要求的大型分布式系统中，高可用使得分布式的单点问题得到了很好的解决，而严格的顺序访问控制使得客户端能够基于Zookeeper实现一些复杂的同步原语。下面看下zk的四个设计目标。</p>
<h4 id="目标1：简单的数据模型"><a href="#目标1：简单的数据模型" class="headerlink" title="目标1：简单的数据模型"></a>目标1：简单的数据模型</h4><p>zookeeper使得分布式程序能够通过一个共享的、树形结构的名字空间来进行相互协调。这里所说的树形结构的名字空间，是指zookeeper服务器内存中的一个数据模型，是由一些列被称为znode的数据节点组成，总的来说，其数据模型类似于一个文件系统，而znode之间的层级关系，就想文件系统的目录结构一样。不过和传统的磁盘文件系统不同的是，zookeeper将全量数据存储在内存中，以此实现提高服务器吞吐，减少延迟的目的。</p>
<h4 id="目标2：可以构建集群"><a href="#目标2：可以构建集群" class="headerlink" title="目标2：可以构建集群"></a>目标2：可以构建集群</h4><p>一个zookeeper集群通常由一组机器组成，一般3 ~ 5台机器组成一个可用的zookeeper集群了，组成zookeeper集群的每台机器都会在内存中维护当前的服务器状态，并且每台机器之间都互相保持通信。值得一提的是，只要集群中存在超过一半的机器能够正常工作，那么整个集群就能够正常对外服务。</p>
<p>zookeeper的客户端程序会选择和集群中任意一台机器共同来床架一个TCP连接，而一旦客户端和某台zookeeper服务器之间的连接断开之后，客户端会自动连接到集群中的其他机器。</p>
<h4 id="目标3：顺序访问"><a href="#目标3：顺序访问" class="headerlink" title="目标3：顺序访问"></a>目标3：顺序访问</h4><p>对于来自客户端的每个更新请求，zookeeper都会分配一个全局唯一的递增编号，这个编号反映了所有事务操作的先后顺序，应用程序可以使用zookeeper的这个特性来实现更高层次的同步原语。</p>
<h4 id="目标4：高性能"><a href="#目标4：高性能" class="headerlink" title="目标4：高性能"></a>目标4：高性能</h4><p>由于zookeeper将全量数据存储在内存中，并直接服务于客户端的所有非事务请求，因此它尤其适用于以读操作为主的应用场景。</p>
<h3 id="zookeeper的基本概念"><a href="#zookeeper的基本概念" class="headerlink" title="zookeeper的基本概念"></a>zookeeper的基本概念</h3><h4 id="1-集群角色"><a href="#1-集群角色" class="headerlink" title="1) 集群角色"></a>1) 集群角色</h4><p>通常在分布式系统中，构成一个集群的每一台机器都有自己的角色，最经典的集群模式就是Master/Slave模式(主备模式)，在这种模式中，我们把能够处理所有写操作的机器成为master机器，把所有通过异步复制方式获取最新数据，并提供读服务的机器成为Slave.</p>
<p>而在zookeeper中，这些概念被颠覆了，它没有沿用传统的Master/Slave概念，而是引入了Leader、Follower和Observe三种角色。Zookeeper集群中的所有机器通过一个Leader选举过程来选定一台机器被称为Leader的机器，Leader服务器为客户端提供读和写服务。除Leader外，其他机器包括Follower和Observer。Follower和Observer都能够提供读服务，唯一的区别在于，Observer机器不参与Leader选举过程，也不参加写操作的过半写成功策略，因此Observer可以在不影响写性能的情况下提升集群的读性能。</p>
<h4 id="2-会话-Session"><a href="#2-会话-Session" class="headerlink" title="2) 会话(Session)"></a>2) 会话(Session)</h4><p>session是指客户端会话，在讲解会话之前，我们首先来了解以下客户端连接。在zookeeper中，一个客户端连接是指客户端和服务器之间的一个TCP长连接。zookeeper对外的服务端口默认是2181，客户端启动的时候，首先会与服务器建立一个TCP连接，从第一次连接建立开始，客户端会话的生命周期也开始了，通过这个链接，客户端能够通过心跳检测与服务器保持有效的会话，也能够向zookeeper服务器发送请求并接受响应，同时还能通过该连接接受来自服务器的Watch事件通知。Session的sessionTimeout值用来设置一个客户端会话的超时时间，当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话仍然有效。</p>
<h4 id="3-数据节点-Znode"><a href="#3-数据节点-Znode" class="headerlink" title="3) 数据节点(Znode)"></a>3) 数据节点(Znode)</h4><p>在谈到分布式的时候，我们通常说的节点是指组成集群的每一台机器。然而，在zookeeper中，节点分为两类，第一类同样是指构成集群的机器，我们称之为机器节点；第二类则是指数据模型中的数据单元，我们称之为数据节点 - ZNode。zookeeper将所有数据存储在内存中，数据模型是一棵树(znode tree)，由斜杠「/」进行分割路径，就是一个znode，例如「/foo/path1」，每个znode上都会保存自己的数据内容同事还会保存一些列属性信息。</p>
<p>在zookeeper中，znode可以分为持久节点和临时节点两类。所谓持久节点是指一旦这个znode被创建了，除非主动进行znode的移除操作，否则这个znode将一直保存在zookeeper上。而临时节点就不一样了，它的声明周期和客户端会话绑定，一旦客户端会话失效，那么这个客户端创建的所有临时节点都会被移除。另外，zookeeper还允许用户为每个节点添加一个特殊的属性：SEQUENTIAL。一旦节点被标记上这个属性，那么在这个节点被创建的时候，zookeeper会自动在其节点名后面追加上一个整型数字，这个整型数字是一个由父节点维护的自增数字。</p>
<h4 id="4）版本"><a href="#4）版本" class="headerlink" title="4）版本"></a>4）版本</h4><p>在前面我们已经提到，zookeeper的每个znode都会存储数据，对应于每个znode，zookeeper都会维护一个叫做stat的数据结构，stat中记录了这个znode的三个数据版本，分别是version(当前znode的版本)、cversion(当前znode子节点的版本)和aversion(当前znode的acl版本)</p>
<h4 id="5-watcher"><a href="#5-watcher" class="headerlink" title="5) watcher"></a>5) watcher</h4><p>watcher(事件监听器)，是zookeeper中的一个很重要的特性。zookeeper允许用户在指定节点上注册一些watcher，并且在一些特定事件触发的时候，zookeeper服务器会将事件通知到感兴趣的客户端上去，该机制是zookeeper实现分布式协调服务的重要特性。</p>
<h4 id="6-ACL"><a href="#6-ACL" class="headerlink" title="6) ACL"></a>6) ACL</h4><p>Zookeeper采用ACL(Access Control Lists)策略来进行权限控制，类似UNIX文件系统的权限控制。zookeeper定义了如下5中权限。</p>
<ul>
<li>create: 创建子节点的权限</li>
<li>read: 获取节点数据和子节点列表的权限</li>
<li>write: 更新节点数据的权限</li>
<li>delete: 删除子节点的权限</li>
<li>admin: 设置节点acl的权限</li>
</ul>
<p>其中尤其需要注意的是，create和delete这两种权限都是针对子节点的权限控制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zookeeper是一个开源的分布式协调服务，由雅虎创建，是google chubby的开源实现。zookeeper的设计目标是将哪些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。&lt;/p&gt;
&lt;h3 id=&quot;Zoo
    
    </summary>
    
      <category term="zookeeper" scheme="http://jianwl.com/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="http://jianwl.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>使用vagrant搭建consul集群</title>
    <link href="http://jianwl.com/2018/07/04/%E4%BD%BF%E7%94%A8vagrant%E6%90%AD%E5%BB%BAconsul%E9%9B%86%E7%BE%A4/"/>
    <id>http://jianwl.com/2018/07/04/使用vagrant搭建consul集群/</id>
    <published>2018-07-04T14:58:44.000Z</published>
    <updated>2018-07-04T15:57:03.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1. 软件下载"></a>1. 软件下载</h3><ol>
<li><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">vagrant下载</a></li>
<li><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">virtualbox下载</a></li>
</ol>
<p>Vagrant是Hashi Corp公司的产品，用于创建和部署虚拟化开发环境，支持创建的操作系统。在部署虚拟开发环境需要用到virtualbox虚拟机软件，所以以上两个软件需要提前下载好。</p>
<h3 id="2-用vagrant创建虚拟机"><a href="#2-用vagrant创建虚拟机" class="headerlink" title="2. 用vagrant创建虚拟机"></a>2. 用vagrant创建虚拟机</h3><p>在安装好，virtualBox和vagrant的前提下，我们创建文件夹consul_cluster,在consul_cluster文件夹下创建一个文件<code>VagrantFile</code>,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># -*- mode: ruby -*-</div><div class="line"># vi: set ft=ruby :</div><div class="line"></div><div class="line">$script = &lt;&lt;SCRIPT</div><div class="line">echo &quot;Installing dependencies ...&quot;</div><div class="line"># 使用阿里云镜像</div><div class="line">sudo sed -i &apos;s/archive.ubuntu.com/mirrors.aliyun.com/g&apos; /etc/apt/sources.list</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install -y unzip curl jq</div><div class="line">SCRIPT</div><div class="line"></div><div class="line"># Specify a custom Vagrant box for the demo</div><div class="line">DEMO_BOX_NAME = &quot;ubuntu/xenial64&quot;</div><div class="line"></div><div class="line"># Vagrantfile API/syntax version.</div><div class="line"># NB: Don&apos;t touch unless you know what you&apos;re doing!</div><div class="line">VAGRANTFILE_API_VERSION = &quot;2&quot;</div><div class="line"></div><div class="line">Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|</div><div class="line">  config.vm.box = DEMO_BOX_NAME</div><div class="line"></div><div class="line">  config.vm.provision &quot;shell&quot;,</div><div class="line">                          inline: $script</div><div class="line"></div><div class="line">  config.vm.define &quot;n1&quot; do |n1|</div><div class="line">      n1.vm.hostname = &quot;n1&quot;</div><div class="line">      n1.vm.network &quot;private_network&quot;, ip: &quot;172.20.20.10&quot;</div><div class="line">  end</div><div class="line"></div><div class="line">  config.vm.define &quot;n2&quot; do |n2|</div><div class="line">      n2.vm.hostname = &quot;n2&quot;</div><div class="line">      n2.vm.network &quot;private_network&quot;, ip: &quot;172.20.20.11&quot;</div><div class="line">  end</div><div class="line"></div><div class="line">  config.vm.define &quot;n3&quot; do |n3|</div><div class="line">      n3.vm.hostname = &quot;n3&quot;</div><div class="line">      n3.vm.network &quot;private_network&quot;, ip: &quot;172.20.20.12&quot;</div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<p>这里我们创建了三个虚拟机，hostname为 n1，n2，n3；ip分别为 172.20.20.10，172.20.20.11，172.20.20.10，使用镜像 ubuntu/xenial64，并且将镜像更新为了阿里云，安装了一些必须的软件。</p>
<p>编辑好文件，在consul_cluster文件夹的路径下执行<code>vagrant up</code>,会下载ubuntu操作系统，并启动三台虚拟机，这个过程耗时比较长，我用了5个小时。</p>
<h3 id="3-登录3台虚拟机"><a href="#3-登录3台虚拟机" class="headerlink" title="3. 登录3台虚拟机"></a>3. 登录3台虚拟机</h3><p>在使用<code>vagrant up</code>命令初始化完成之后，在consul_cluster文件夹路径下，使用以下命令分别登录n1、n2、n3虚拟机:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 登录n1虚拟机</div><div class="line">vagrant ssh n1</div><div class="line"></div><div class="line"># 登录n2虚拟机</div><div class="line">vagrant ssh n2</div><div class="line"></div><div class="line"># 登录n3虚拟机</div><div class="line">vagrant ssh n3</div></pre></td></tr></table></figure>
<h3 id="4-搭建consul环境-三台虚拟机都需要执行一遍以下操作"><a href="#4-搭建consul环境-三台虚拟机都需要执行一遍以下操作" class="headerlink" title="4. 搭建consul环境(三台虚拟机都需要执行一遍以下操作)"></a>4. 搭建consul环境(三台虚拟机都需要执行一遍以下操作)</h3><h4 id="1-下载consul"><a href="#1-下载consul" class="headerlink" title="1. 下载consul"></a>1. 下载consul</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 下载consul</div><div class="line">wget https://releases.hashicorp.com/consul/1.2.0/consul_1.2.0_linux_amd64.zip</div><div class="line"></div><div class="line"># 解压</div><div class="line">unzip consul_1.2.0_linux_amd64.zip</div></pre></td></tr></table></figure>
<h4 id="2-创建以下两个文件夹"><a href="#2-创建以下两个文件夹" class="headerlink" title="2. 创建以下两个文件夹"></a>2. 创建以下两个文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /tmp/consul</div><div class="line"></div><div class="line">sudo mkdir /etc/consul.d</div></pre></td></tr></table></figure>
<h3 id="5-consul集群搭建"><a href="#5-consul集群搭建" class="headerlink" title="5. consul集群搭建"></a>5. consul集群搭建</h3><h4 id="1-虚拟机n1，启动consul服务"><a href="#1-虚拟机n1，启动consul服务" class="headerlink" title="1. 虚拟机n1，启动consul服务;"></a>1. 虚拟机n1，启动consul服务;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -server -bootstrap-expect=1 -data-dir=/tmp/consul -node=agent-one -bind=当前虚拟机IP -enable-script-checks=true -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<h4 id="2-虚拟机n2，启动consul服务"><a href="#2-虚拟机n2，启动consul服务" class="headerlink" title="2. 虚拟机n2，启动consul服务;"></a>2. 虚拟机n2，启动consul服务;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -data-dir=/tmp/consul -node=agent-two -bind=当前虚拟机IP -enable-script-checks=true -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<h4 id="3-在n1虚拟机的consul服务中，添加n2节点。"><a href="#3-在n1虚拟机的consul服务中，添加n2节点。" class="headerlink" title="3. 在n1虚拟机的consul服务中，添加n2节点。"></a>3. 在n1虚拟机的consul服务中，添加n2节点。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul join 虚拟机n2的IP</div></pre></td></tr></table></figure>
<h4 id="4-虚拟机n3，启动consul服务"><a href="#4-虚拟机n3，启动consul服务" class="headerlink" title="4. 虚拟机n3，启动consul服务;"></a>4. 虚拟机n3，启动consul服务;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -data-dir=/tmp/consul -node=agent-three -bind=当前虚拟机IP -enable-script-checks=true -config-dir=/etc/consul.d</div></pre></td></tr></table></figure>
<h4 id="5-在n1虚拟机的consul服务中，添加n3节点。"><a href="#5-在n1虚拟机的consul服务中，添加n3节点。" class="headerlink" title="5. 在n1虚拟机的consul服务中，添加n3节点。"></a>5. 在n1虚拟机的consul服务中，添加n3节点。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul join 虚拟机n3的IP</div></pre></td></tr></table></figure>
<h3 id="6-consul集群搭建实战"><a href="#6-consul集群搭建实战" class="headerlink" title="6. consul集群搭建实战"></a>6. consul集群搭建实战</h3><h3 id="1-登录n1虚拟机"><a href="#1-登录n1虚拟机" class="headerlink" title="1. 登录n1虚拟机"></a>1. 登录n1虚拟机</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/42241770.jpg" alt=""></p>
<h3 id="2-启动consul服务"><a href="#2-启动consul服务" class="headerlink" title="2. 启动consul服务"></a>2. 启动consul服务</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/50184269.jpg" alt=""></p>
<h3 id="3-查看n1集群状态"><a href="#3-查看n1集群状态" class="headerlink" title="3. 查看n1集群状态"></a>3. 查看n1集群状态</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/36062811.jpg" alt=""></p>
<h3 id="4-登录n2虚拟机"><a href="#4-登录n2虚拟机" class="headerlink" title="4. 登录n2虚拟机"></a>4. 登录n2虚拟机</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/68487932.jpg" alt=""></p>
<h3 id="5-启动consul服务"><a href="#5-启动consul服务" class="headerlink" title="5. 启动consul服务"></a>5. 启动consul服务</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/89679832.jpg" alt=""></p>
<h3 id="6-查看n2集群状态"><a href="#6-查看n2集群状态" class="headerlink" title="6. 查看n2集群状态"></a>6. 查看n2集群状态</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/70512094.jpg" alt=""></p>
<p>通过步骤3和步骤6的对比，我们发现，n1和n2两个节点并没有直接的关联。</p>
<h3 id="7-在n1节点中，加入节点2，节点间实现互相通信"><a href="#7-在n1节点中，加入节点2，节点间实现互相通信" class="headerlink" title="7. 在n1节点中，加入节点2，节点间实现互相通信"></a>7. 在n1节点中，加入节点2，节点间实现互相通信</h3><p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/86438059.jpg" alt=""></p>
<h3 id="8-查看集群状态"><a href="#8-查看集群状态" class="headerlink" title="8. 查看集群状态"></a>8. 查看集群状态</h3><p>n1节点查看集群状态</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/28819181.jpg" alt=""></p>
<p>n2节点查看集群状态</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-7-4/9956699.jpg" alt=""></p>
<p>由此看出n1节点和n2节点已经互相通信。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://www.consul.io/intro/getting-started/join.html" target="_blank" rel="external">Consul Cluster官方文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-软件下载&quot;&gt;&lt;a href=&quot;#1-软件下载&quot; class=&quot;headerlink&quot; title=&quot;1. 软件下载&quot;&gt;&lt;/a&gt;1. 软件下载&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/downloads.h
    
    </summary>
    
      <category term="consul" scheme="http://jianwl.com/categories/consul/"/>
    
    
      <category term="consul" scheme="http://jianwl.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>Go语法概述</title>
    <link href="http://jianwl.com/2018/07/01/Go%E8%AF%AD%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    <id>http://jianwl.com/2018/07/01/Go语法概述/</id>
    <published>2018-07-01T01:19:24.000Z</published>
    <updated>2018-07-01T01:34:34.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为之前已经有编程基础了，所以在接触新语言时，会预先概览语言的语法，而后在针对每个语法深入学习。本节会描述Go常用的语法规则。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-编程第一个Go程序"><a href="#1-编程第一个Go程序" class="headerlink" title="1. 编程第一个Go程序"></a>1. 编程第一个Go程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">// 输出Hello world!</div><div class="line">func main() &#123;</div><div class="line">	fmt.Println(&quot;hello world!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-声明变量"><a href="#2-声明变量" class="headerlink" title="2. 声明变量"></a>2. 声明变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// 方式1</div><div class="line">func defineVar1()&#123;</div><div class="line">	var x int32</div><div class="line">	var s = &quot;hello world&quot;</div><div class="line">	println(x,s)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 方式2</div><div class="line">func defineVar2()&#123;</div><div class="line">	x := 100</div><div class="line">	println(x)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义变量</div><div class="line">func main() &#123;</div><div class="line">	defineVar1()</div><div class="line">	defineVar2()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-1-表达式if"><a href="#3-1-表达式if" class="headerlink" title="3.1 表达式if"></a>3.1 表达式if</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// 表达式</div><div class="line">func main() &#123;</div><div class="line">	x := 100</div><div class="line"></div><div class="line">	if x &gt; 0 &#123;</div><div class="line">		println(&quot;x&quot;)</div><div class="line">	&#125;else if x &lt; 0 &#123;</div><div class="line">		println(&quot;-x&quot;)</div><div class="line">	&#125;else&#123;</div><div class="line">		println(&quot;0&quot;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-2-表达式switch"><a href="#3-2-表达式switch" class="headerlink" title="3.2 表达式switch"></a>3.2 表达式switch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// switch</div><div class="line">func main() &#123;</div><div class="line">	x := 100</div><div class="line"></div><div class="line">	switch &#123;</div><div class="line">	case x &gt; 0:</div><div class="line">		println(&quot;x&quot;)</div><div class="line">	case x &lt; 0:</div><div class="line">		println(&quot;-x&quot;)</div><div class="line">	default:</div><div class="line">		println(&quot;0&quot;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-表达式for"><a href="#3-3-表达式for" class="headerlink" title="3.3 表达式for"></a>3.3 表达式for</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">func for01()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for01 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line">	for i:=0; i&lt;5;i++&#123;</div><div class="line">		println(i)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for i := 4; i&gt;=0;i--&#123;</div><div class="line">		println(i)</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for01 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func for02()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for02 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line">	x := 0</div><div class="line"></div><div class="line">	for x &lt; 5&#123;</div><div class="line">		println(x)</div><div class="line">		x++</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for02 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func for03()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for03 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line">	x := 4</div><div class="line"></div><div class="line">	for &#123;</div><div class="line">		println(x)</div><div class="line">		x--</div><div class="line"></div><div class="line">		if x&lt;0&#123;</div><div class="line">			break</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for03 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func for04()&#123;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for04 &gt;&gt;&gt;&gt;&gt;&quot;)</div><div class="line"></div><div class="line">	x := []int&#123;100,101,102&#125;</div><div class="line"></div><div class="line">	for i,n :=range x&#123;</div><div class="line">		println(i,&quot;:&quot;,n)</div><div class="line">	&#125;</div><div class="line">	println(&quot;&gt;&gt;&gt;&gt; for04 &gt;&gt;&gt;&gt;&gt;\n&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 多种循环</div><div class="line">func main() &#123;</div><div class="line">	for01()</div><div class="line">	for02()</div><div class="line">	for03()</div><div class="line">	for04()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;errors&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">// 函数: 可定义多个返回值</div><div class="line">func div(a,b int) (int,error)&#123;</div><div class="line">	if b==0&#123;</div><div class="line">		return 0,errors.New(&quot;division by zero&quot;)</div><div class="line">	&#125;</div><div class="line">	return a/b, nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 函数是第一类型，可作为参数或返回值</div><div class="line">func print01(x int) func()&#123;</div><div class="line">	return func()&#123;</div><div class="line">		println(x)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// defer定义延迟调用，无论函数是否出错，它都确保结束前被调用</div><div class="line">func defer01(a,b int)&#123;</div><div class="line">	defer println(&quot;dispace ...&quot;)</div><div class="line"></div><div class="line">	println(a/b)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	a,b := 10,2</div><div class="line">	c,err := div(a,b)</div><div class="line"></div><div class="line">	fmt.Println(c,err)</div><div class="line"></div><div class="line">	x := 100</div><div class="line"></div><div class="line">	f := print01(x)</div><div class="line">	f()</div><div class="line"></div><div class="line">	defer01(10,2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-切片"><a href="#5-切片" class="headerlink" title="5. 切片"></a>5. 切片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">// 切片(slice)可实现类似动态数组的功能</div><div class="line">func main() &#123;</div><div class="line">	x := make([]int, 0,5) // 创建容量为5的切片</div><div class="line"></div><div class="line">	for i:=0; i&lt;8;i++&#123;</div><div class="line">		x = append(x,i) // 追加数据，当容量超出，自动分配更大的存储空间</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-字典"><a href="#6-字典" class="headerlink" title="6. 字典"></a>6. 字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">// 将字典(map)类型内置，可直接从运行时层面获得性能优化</div><div class="line">func main() &#123;</div><div class="line">	m := make(map[string]int) // 创建字典对象</div><div class="line"></div><div class="line">	m[&quot;a&quot;] = 1 // 添加</div><div class="line"></div><div class="line">	x,ok := m[&quot;b&quot;] // 可知道key/value 是否存在</div><div class="line"></div><div class="line">	fmt.Println(x,ok)</div><div class="line">	delete(m,&quot;a&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-结构体"><a href="#7-结构体" class="headerlink" title="7. 结构体"></a>7. 结构体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type user struct &#123; // 结构体</div><div class="line">	name string</div><div class="line">	age byte</div><div class="line">&#125;</div><div class="line"></div><div class="line">type manager struct &#123;</div><div class="line">	user // 匿名嵌入其他类型</div><div class="line">	title string</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结构体：可匿名嵌入其他类型</div><div class="line">func main() &#123;</div><div class="line">	var m manager</div><div class="line"></div><div class="line">	m.name = &quot;Tom&quot;</div><div class="line">	m.age = 29</div><div class="line">	m.title = &quot;cto&quot;</div><div class="line"></div><div class="line">	fmt.Println(m)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8-方法"><a href="#8-方法" class="headerlink" title="8. 方法"></a>8. 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">type X int</div><div class="line"></div><div class="line">func (x *X) inc()&#123; // 名称前的参数称作receiver，作用类似python self</div><div class="line">	*x++</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 方法，可以为当前包内的任意类型定义方法</div><div class="line">func main() &#123;</div><div class="line">	var x X</div><div class="line">	x.inc()</div><div class="line">	println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-接口"><a href="#9-接口" class="headerlink" title="9. 接口"></a>9. 接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type role struct &#123;</div><div class="line">	name string</div><div class="line">	parentId int</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (r role) Print()&#123;</div><div class="line">	fmt.Printf(&quot;%+v\n&quot;,r)</div><div class="line">&#125;</div><div class="line"></div><div class="line">type Printer interface &#123;</div><div class="line">	Print()</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 接口采用了duck type方式，也就是说无须在实现类型上添加显式声明。</div><div class="line">// 另有空接口类型interface&#123;&#125;,用途类似OOP里的system.Object,可接受任意类型对象</div><div class="line">func main() &#123;</div><div class="line">	var r role</div><div class="line">	r.name = &quot;admin&quot;</div><div class="line">	r.parentId = 29</div><div class="line"></div><div class="line">	var p Printer = r</div><div class="line">	p.Print()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="10-并发"><a href="#10-并发" class="headerlink" title="10. 并发"></a>10. 并发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;time&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func task(id int)&#123;</div><div class="line">	for i:=0; i&lt;5;i++&#123;</div><div class="line">		fmt.Printf(&quot;%d:%d\n&quot;,id,i)</div><div class="line">		time.Sleep(time.Second)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 整体运行时完全并发设计，凡你能看到的，几乎都在以goroutine方式运行，这是一种比普通协程或线程更加高效的并发设计，能够</div><div class="line">// 轻松创建和运行成千上万的并发任务</div><div class="line">func main() &#123;</div><div class="line">	go task(1)  // 创建goroutine</div><div class="line">	go task(2)</div><div class="line"></div><div class="line">	time.Sleep(time.Second*6)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="11-通道-channel-与-goroutine搭配"><a href="#11-通道-channel-与-goroutine搭配" class="headerlink" title="11. 通道(channel) 与 goroutine搭配"></a>11. 通道(channel) 与 goroutine搭配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">// 消费者</div><div class="line">func consumer(data chan int, done chan bool)&#123;</div><div class="line">	for x:=range data&#123;</div><div class="line">		println(&quot;recv:&quot;,x)  // 接受数据，直到通道被关闭</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	done &lt;- true // 通知main，消费结束</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 生产者</div><div class="line">func producer(data chan int)&#123;</div><div class="line">	for i :=0; i&lt;4; i++&#123;</div><div class="line">		data &lt;- i         // 发送数据</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	close(data) // 生产结束，关闭通道</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通道(channel) 与 goroutine搭配，实现用通信替代内存共享的CSP模型</div><div class="line">func main() &#123;</div><div class="line">	done := make(chan bool) // 用于接收消费结束信息</div><div class="line">	data := make(chan int)  // 数据管道</div><div class="line"></div><div class="line">	go consumer(data, done) // 启动消费者</div><div class="line">	go producer(data) // 启动生产者</div><div class="line"></div><div class="line">	&lt;-done // 阻塞，直到消费者发回结束信息</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;因为之前已经有编程基础了，所以在接触新语言时，会预先概览语言的语法，而后在针对每个语法深入学习。本节会描述Go常用的语法规则。&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="Go" scheme="http://jianwl.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://jianwl.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Git的各种撤销技巧</title>
    <link href="http://jianwl.com/2018/06/20/Git%E7%9A%84%E5%90%84%E7%A7%8D%E6%92%A4%E9%94%80%E6%8A%80%E5%B7%A7/"/>
    <id>http://jianwl.com/2018/06/20/Git的各种撤销技巧/</id>
    <published>2018-06-19T23:53:43.000Z</published>
    <updated>2018-06-19T23:57:01.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/" target="_blank" rel="external">How to undo anything with Git</a></li>
<li><a href="https://tonydeng.github.io/2015/07/08/how-to-undo-almost-anything-with-git/" target="_blank" rel="external">Git的各种Undo技巧</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.github.com/2015-06-08-how-to-undo-
    
    </summary>
    
      <category term="Git" scheme="http://jianwl.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jianwl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Spring容器的基本实现</title>
    <link href="http://jianwl.com/2018/06/04/Spring%E5%AE%B9%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/"/>
    <id>http://jianwl.com/2018/06/04/Spring容器的基本实现/</id>
    <published>2018-06-04T00:14:01.000Z</published>
    <updated>2018-06-11T23:48:14.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节从实战到理论学习Spring容器的实现。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-核心依赖"><a href="#1-核心依赖" class="headerlink" title="1) 核心依赖"></a>1) 核心依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</div><div class="line">	&lt;relativePath/&gt; </div><div class="line">&lt;/parent&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">	</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;5.0.6.RELEASE&lt;/version&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<h4 id="2）在容器中注册Bean-amp-获取Bean"><a href="#2）在容器中注册Bean-amp-获取Bean" class="headerlink" title="2）在容器中注册Bean &amp; 获取Bean"></a>2）在容器中注册Bean &amp; 获取Bean</h4><p>运行类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class MainBootstrap &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        BeanFactory bf = new XmlBeanFactory(new ClassPathResource(&quot;beanFactoryTest.xml&quot;));</div><div class="line">        MyTestBean bean = (MyTestBean) bf.getBean(&quot;myTestBean&quot;);</div><div class="line">        System.out.println(String.format(&quot;测试是否加载xml: %s&quot;,bean.getTestStr()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>beanFactoryTest.xml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">       xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</div><div class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">		http://www.springframework.org/schema/task</div><div class="line">        http://www.springframework.org/schema/task/spring-task-3.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</div><div class="line">&gt;</div><div class="line">    &lt;bean id=&quot;myTestBean&quot; class=&quot;com.frank.springlearning.domain.MyTestBean&quot;/&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>以上完成了，Bean的注册和使用；</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这一节从实战到理论学习Spring容器的实现。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="Spring源码学习专题" scheme="http://jianwl.com/categories/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="Spring源码学习专题" scheme="http://jianwl.com/tags/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码学习计划</title>
    <link href="http://jianwl.com/2018/06/04/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://jianwl.com/2018/06/04/Spring源码学习计划/</id>
    <published>2018-06-03T23:58:32.000Z</published>
    <updated>2018-06-04T00:13:50.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接触Spring有3年了，Spring的两大特性IOC和AOP在工作中也是常用，但是如果有人问我，Spring是如何实现这两大特性的，我一定只能模棱两可的说出。或许这个时候就是你该沉下心来，好好学习它的原理实现了，知其所以然，学习其思想。学习Spring这是一个专题，刻意学习，才能有所收获。</p>
<h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><ol>
<li>容器的基本实现；</li>
<li>AOP的基本实现；</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;接触Spring有3年了，Spring的两大特性IOC和AOP在工作中也是常用，但是如果有人问我，Spring是如何实现这两大特性的，我一定
    
    </summary>
    
      <category term="Spring源码学习专题" scheme="http://jianwl.com/categories/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="Spring源码学习专题" scheme="http://jianwl.com/tags/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型之happens-before</title>
    <link href="http://jianwl.com/2018/05/20/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8Bhappens-before/"/>
    <id>http://jianwl.com/2018/05/20/Java内存模型之happens-before/</id>
    <published>2018-05-20T10:31:08.000Z</published>
    <updated>2018-05-20T11:01:21.079Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java语言中有一个“先行发生”的原则，它是判断数据是否存在竞争、线程是否安全的主要依据。下面是Java内存模型一些“天然”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来的话，它们就没有顺序性保障，虚拟机可以对它们随意地进行重排序。</p>
<h3 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a>happens-before规则</h3><h4 id="1-程序次序规则"><a href="#1-程序次序规则" class="headerlink" title="1) 程序次序规则"></a>1) 程序次序规则</h4><p>在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</p>
<h4 id="2）管程锁定规则"><a href="#2）管程锁定规则" class="headerlink" title="2）管程锁定规则"></a>2）管程锁定规则</h4><p>一个unlock操作先行发生于后面的对同一个锁的lock操作。这里必须强调是同一个锁，而“后面”同样是指时间上的先后顺序。</p>
<h4 id="3）volatile变量规则"><a href="#3）volatile变量规则" class="headerlink" title="3）volatile变量规则"></a>3）volatile变量规则</h4><p>对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后顺序。</p>
<h4 id="4-线程启动规则"><a href="#4-线程启动规则" class="headerlink" title="4) 线程启动规则"></a>4) 线程启动规则</h4><p>Thread对象的start()方法先行发生于此线程的每一个动作。</p>
<h4 id="5）线程终止规则"><a href="#5）线程终止规则" class="headerlink" title="5）线程终止规则"></a>5）线程终止规则</h4><p>线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行了。</p>
<h4 id="6）线程中断规则"><a href="#6）线程中断规则" class="headerlink" title="6）线程中断规则"></a>6）线程中断规则</h4><p>对于线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断时间的发生，可以通过Thread.interrupted方法检测到是否有中断发生。</p>
<h4 id="7）对象终结规则"><a href="#7）对象终结规则" class="headerlink" title="7）对象终结规则"></a>7）对象终结规则</h4><p>一个对象的初始化完成(构造函数执行结束)先行发生于它的finilize()方法的开始。</p>
<h4 id="8）传递性"><a href="#8）传递性" class="headerlink" title="8）传递性"></a>8）传递性</h4><p>如果操作A先行发生于操作B，操作B先行发生于操作C，那么就可以得出操作A先行发生于操作C。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>深入理解Java虚拟机 - P376</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Java语言中有一个“先行发生”的原则，它是判断数据是否存在竞争、线程是否安全的主要依据。下面是Java内存模型一些“天然”先行发生关系，这
    
    </summary>
    
      <category term="Java进阶" scheme="http://jianwl.com/categories/Java%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java进阶" scheme="http://jianwl.com/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型</title>
    <link href="http://jianwl.com/2018/05/20/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://jianwl.com/2018/05/20/Java内存模型/</id>
    <published>2018-05-20T08:10:13.000Z</published>
    <updated>2018-05-20T10:10:15.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java内存模型有什么用？"><a href="#Java内存模型有什么用？" class="headerlink" title="Java内存模型有什么用？"></a>Java内存模型有什么用？</h3><p>JVM规范定义Java内存模型主要是为了屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各个平台下都能达到一致的内存访问效果。</p>
<p>在此之前，主流程序语言如<code>C/C++</code>直接使用物理硬件和操作系统的内存模型，因此，会由于不同内存模型的差异，有可能导致在平台A能运行，平台B却不能运行的情况。</p>
<h3 id="什么是内存模型"><a href="#什么是内存模型" class="headerlink" title="什么是内存模型"></a>什么是内存模型</h3><p>在多CPU的系统中，每个CPU都有多级缓存，一般分为L1、L2、L3缓存，因为这些缓存的存在，提供了数据的访问性能，也减轻了数据总线上数据传输的压力，同时也带来了很多新的挑战，比如两个CPU同时去操作同一个内存地址，会发生什么？在什么条件下，它们可以看到相同的结果？这些都是需要解决的。</p>
<p>所以在CPU的层面，内存模型定义了一个充分必要条件，保证其他CPU的写入动作对该CPU是可见的，而且该CPU的写入动作对其他CPU也是可见的，那这种可见性，应该如何实现呢？</p>
<p>有些处理器提供了强内存模型，所有CPU在任何时候都能看到内存中任意位置相同的值，这种完全是硬件提供的支持。</p>
<p>其他处理器，提供了弱内存模型，需要执行一些特殊指令(就是经常看到货听到的，Memory Barries内存屏障)，刷新CPU缓存的数据到内存中，保证这个写操作能够被其他CPU可见，或者将CPU缓存的数据设置为无效状态，保证其他CPU的写操作对本CPU可见。通过这些内存屏障的行为由底层实现，对于上层语言的程序员来说是透明的。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-20/9953164.jpg" alt=""></p>
<p>前面说到的内存屏障，除了实现CPU之外的数据可见性之外，还有一个重要的职责，可以禁止指令的重排序。</p>
<p>这里说的重排序可以发生在好几个地方：编译器、运行时、JIT等，比如编译器会觉得把一个变量的写操作放在最后更有效率，编译后，这个指令就是在最后了(前提是只要不改变程序的语义，编译器、执行器就可以这样自由的随意优化)，一旦编译器对某个变量的写操作进行优化(放到最后)，那么执行之前，另一个线程将不会看到这个执行结果。</p>
<p>当然了，写入动作可能被移到后面，那么也有可能挪到前面，这样的优化有什么影响呢？这种情况下，其他线程可能会在程序实现“发生”之前，看到这个写入动作(这里怎么理解，指令已经执行了，但是在代码层面还没执行到)，通过内存屏障的功能，我们可以禁止一些不必要、或者会带来负面影响的重排序优化，在内存模型的范围内，实现更高性能，同时保证程序的正确性。</p>
<p>下面看一个重排序的例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Class Reordering &#123;</div><div class="line">  int x = 0, y = 0;</div><div class="line">  public void writer() &#123;</div><div class="line">    x = 1;</div><div class="line">    y = 2;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void reader() &#123;</div><div class="line">    int r1 = y;</div><div class="line">    int r2 = x;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设这段代码有2个线程并发执行，线程A执行writer方法，线程B执行reader方法，线程B看到y的值为2，因为把y设置成2发生在变量x的写入之后，所以能断定线程B这时看到的x就是1吗？</p>
<p>在Java内存模型中，描述了在多线程代码中，哪些行为是正确的、合法的、以及多线程之间如何进行通信，代码中变量的读写行为如何反应到内存、CPU缓存的底层细节。</p>
<p>在Java中包含了几个关键字：volatile、final和synchronized，帮助程序员把代码中的并发需求描述给编译器，Java内存模型中定义了他们的行为，确保正确同步的Java代码在所有的处理器上都能正确执行。</p>
<h3 id="synchronization可以实现什么"><a href="#synchronization可以实现什么" class="headerlink" title="synchronization可以实现什么"></a>synchronization可以实现什么</h3><p>Synchronizeation有多中语义，其中最容易理解的是互斥，对于一个monitor对象，只能够被一个线程持有，意味着一旦有线程进入了同步代码块，那么其他线程就不能进入直到第一个进入的线程退出代码块。</p>
<p>但是更多的时候，使用synchronization并非单单互斥功能，synchronization保证了线程在同步块之前或者期间写入动作，对于后续进入该代码块的线程是可见的(又是可见性，不过这里需要注意的是对同一个monitor对象而言)。在一个线程退出同步块时，线程释放monitor对象，它的作用是把CPU缓存数据(本地缓存数据)刷新到主内存中，从而实现该线程的行为可以被其他线程看到。在其他线程进入到该代码块时，需要获得monitor对象，它的作用是使CPU缓存失效，从而使变量从主内存中重新加载，然后就可以看到之前线程对该变量的修改。</p>
<p>但从缓存的角度看，似乎这个问题只会影响多处理器的机器，对于单核来说没什么问题，但是别忘了，它还有一个语义是禁止指令的重排序，对于编译器来说，同步块中的代码不会移动到获取和释放monitor外面。</p>
<p>下面这种代码，千万别写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">synchronized(new Object()) 「×」</div></pre></td></tr></table></figure>
<p>编译器完全可以删除这个同步语义，因为编译器知道没有其他线程会在同一个monitor对象上同步。</p>
<p>所以，请注意：对于两个线程来说，在相同的monitor对象上同步是很重要的，以便正确的设置happens-before关系。</p>
<h3 id="final可以影响什么"><a href="#final可以影响什么" class="headerlink" title="final可以影响什么"></a>final可以影响什么</h3><p>如果一个类包含final字段，且在构造器中初始化，那么正确的构造一个对象后，final字段被设置后对于其他线程是可见的。</p>
<p>这里所说的正确构造对象，意思是在对象的构造过程中，不允许对该对象进行引用，不然的话，可能存在其他线程在对象还没构造完成时就对该对象进行访问，造成不必要的麻烦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">final int x;</div><div class="line">  int y;</div><div class="line">  static FinalFieldExample f;</div><div class="line">  public FinalFieldExample() &#123;</div><div class="line">    x = 3;</div><div class="line">    y = 4;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static void writer() &#123;</div><div class="line">    f = new FinalFieldExample();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static void reader() &#123;</div><div class="line">    if (f != null) &#123;</div><div class="line">      int i = f.x;</div><div class="line">      int j = f.y;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个例子描述了应该如何使用final字段，一个线程A执行reader方法，如果f已经在线程B初始化好了，那么可以确保线程A看到x值是3，因为final它是final修饰的，而不能确保看到y的值是4.</p>
<h3 id="volatile可以做什么"><a href="#volatile可以做什么" class="headerlink" title="volatile可以做什么"></a>volatile可以做什么</h3><p>volatile字段主要用于线程之间进行通信，volatile字段的每次读行为都能看到其他线程最后一次对该字段的写行为，通过它就可以避免拿到缓存中陈旧数据。它们必须保证在被写入之后，会被刷新到主内存中，这样就可以立即对其他线程可以见。类似的，在读取volatile字段之前，缓存必须是无效的，以保证每次拿到的都是主内存的值，都是最新的值。volatile的内存语义和synchronized获取和释放monitor的实现目的差不多。</p>
<p>对于重排序，volatile也有额外的限制。</p>
<p>下面看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class VolatileExample &#123;</div><div class="line">  int x = 0;</div><div class="line">  volatile boolean v = false;</div><div class="line">  public void writer() &#123;</div><div class="line">    x = 42;</div><div class="line">    v = true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void reader() &#123;</div><div class="line">    if (v == true) &#123;</div><div class="line">      //uses x - guaranteed to see 42.</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，假设一个线程A执行writer，另一个线程B执行reader，writer中对变量v的写入把x的写入也刷新到主内存中。reader方法会从主内存重新获取v的值，所以如果线程B看到v的值为true，就能保证拿到的x是42.（因为把x设置成42发生在把v设置成true之前，volatile禁止这两个写入行为的重排序）</p>
<p>如果变量v不是volatile，那么以上描述就不成立了，因为执行顺序可能是v=true，x=42,或者对于线程B来说，根本看不到v被设置为true。</p>
<h3 id="double-checked-locking的问题"><a href="#double-checked-locking的问题" class="headerlink" title="double-checked locking的问题"></a>double-checked locking的问题</h3><p>臭名昭著的双重检查(单例模式的一种)，是一种延时初始化的实现技巧，避免了同步的开销，因为在早起的JVM，同步操作性能很差，所以才出现了这样的小技巧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static Something instance = null;</div><div class="line"></div><div class="line">public Something getInstance() &#123;</div><div class="line">  if (instance == null) &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">      if (instance == null)</div><div class="line">        instance = new Something();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个技巧看起来很聪明，避免了同步的开销，但是有一个问题，它可能不起作用，为什么呢？因为实例的初始化和实例字段的写入可能被编译器重排序，这样可能读到一个未初始化完成的对象。</p>
<p>当然，这种bug可以通过使用volatile修饰instance字段进行修复，但是我觉得这种代码格式实在太丑陋了，如果真要延时初始化，不妨使用下面这种方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static class LazySomethingHolder &#123;</div><div class="line">  public static Something something = new Something();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Something getInstance() &#123;</div><div class="line">  return LazySomethingHolder.something;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于是静态字段的初始化，可以确保对访问该类的所有线程都是可见的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java内存模型有什么用？&quot;&gt;&lt;a href=&quot;#Java内存模型有什么用？&quot; class=&quot;headerlink&quot; title=&quot;Java内存模型有什么用？&quot;&gt;&lt;/a&gt;Java内存模型有什么用？&lt;/h3&gt;&lt;p&gt;JVM规范定义Java内存模型主要是为了屏蔽各种硬件
    
    </summary>
    
      <category term="Java进阶" scheme="http://jianwl.com/categories/Java%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java进阶" scheme="http://jianwl.com/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>深入分析CAS</title>
    <link href="http://jianwl.com/2018/05/19/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90CAS/"/>
    <id>http://jianwl.com/2018/05/19/深入分析CAS/</id>
    <published>2018-05-19T15:17:12.000Z</published>
    <updated>2018-05-20T05:19:14.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>CAS, Compare And Swap，即比较并交换。Doug lea大神在同步组价中大量使用CAS技术鬼斧神工地实现了Java多线程的并发操作。整个AQS同步组件、Atomic原子类操作等等都是以CAS实现的，甚至ConcurrentHashMap在1.8版本中也调整为CAS + Synchronized。可以说CAS是整个JUC的基石。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-20/58954764.jpg" alt=""></p>
<h3 id="CAS分析"><a href="#CAS分析" class="headerlink" title="CAS分析"></a>CAS分析</h3><p>在CAS中有三个参数：内存值V、旧的预期值A，要更新的值B，当前仅当内存值V的值等于旧的预期值A时才会将内存值V的值修改为B，否则什么都不干。其伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(this.value == A)&#123;</div><div class="line">	this.value = B</div><div class="line">	return true;</div><div class="line">&#125;else&#123;</div><div class="line">	return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JUC的atomic类都是通过CAS来实现的，下面就以AtomicInteger为例阐述CAS的实现。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static final Unsafe unsafe = Unsafe.getUnsafe();</div><div class="line">private static final long valueOffset;</div><div class="line"></div><div class="line">static &#123;</div><div class="line">    try &#123;</div><div class="line">        valueOffset = unsafe.objectFieldOffset</div><div class="line">            (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</div><div class="line">    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private volatile int value;</div></pre></td></tr></table></figure>
<p>Unsafe是CAS的核心类，Java无法直接访问底层操作系统，而是通过本地(native)方法来访问。不过尽管如此，JVM还是开了一个后门，Unsafe，它提供了<strong>硬件级别</strong>的原子操作。</p>
<p><code>valueOffset</code>为变量值在内存中的偏移地址，unsafe就是通过偏移地址来得到数据的原值的。</p>
<p><code>value</code>当前值，使用volatile修饰，保证多线程环境下看见的是同一个。</p>
<p>我们就以AtomicInteger的addAndGet()方法来说明，先看源代码；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   public final int addAndGet(int delta) &#123;</div><div class="line">       return unsafe.getAndAddInt(this, valueOffset, delta) + delta;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   public final int getAndAddInt(Object var1, long var2, int var4) &#123;</div><div class="line">       int var5;</div><div class="line">       do &#123;</div><div class="line">           var5 = this.getIntVolatile(var1, var2);</div><div class="line">       &#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));</div><div class="line">       return var5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部调用unsafe的getAndAddInt方法，在getAndAddInt方法中主要看compareAndSwapInt方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</div></pre></td></tr></table></figure>
<p>该方法为本地方法，有4个参数，分表代表：对象、对象的地址、预期值、修改值，该方法的实现这里就不做详细介绍了，有兴趣的伙伴可以看看<code>openjdk</code>的源码。</p>
<p>CAS可以保证一次的读-写-改操作是原子操作，在单处理器上该操作容易实现，但是在多处理器上实现就有点复杂了。</p>
<p>CPU提供了两种方法来实现多处理器的原子操作：总线加锁或缓存加锁。</p>
<h4 id="总线加锁"><a href="#总线加锁" class="headerlink" title="总线加锁"></a>总线加锁</h4><p>总线加锁就是使用处理器提供一个LOCK#信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以独占使用共享内存。但是这种处理方式显得有点霸道，它把CPU和内存之间的通信锁住了，在锁定期间，其他处理器都不能访问内存地址的数据，其开销有点大。所以就有了缓存加锁。</p>
<h4 id="缓存加锁"><a href="#缓存加锁" class="headerlink" title="缓存加锁"></a>缓存加锁</h4><p>其实针对上面那种情况我们只需要保证在同一时刻对某个内存地址的操作是原子性的即可。缓存加锁就是缓存在内存区域的数据如果在加锁期间，当它执行操作写回内存时，处理器不在输出LOCK#信号，而是修改内存的内存地址，利用缓存一致性协议来保证原子性。缓存一致性机制可以保证同一个内存区域的数据仅能被一个处理器修改，也就是说当CPU1修改缓存行中的i时使用缓存锁定，那么CPU2就不能同时缓存了i的缓存行。</p>
<h3 id="CAS缺陷"><a href="#CAS缺陷" class="headerlink" title="CAS缺陷"></a>CAS缺陷</h3><p>CAS虽然高效地解决了原子操作，但是还是存在一些缺陷的，主要表现在三个方面：循环时间太长、只能保证一个共性变量原子操作、ABA问题。</p>
<h5 id="1-循环时间太长"><a href="#1-循环时间太长" class="headerlink" title="1) 循环时间太长"></a>1) 循环时间太长</h5><p>如果CAS一直不成功呢？这种情况绝对有可能发生，如果自旋CAS长时间地不成功，则会给CPU带来非常大的开销。在JUC有些地方就限制了CAS自旋的次数，例如BlockQueue的SynchronousQueue。</p>
<h5 id="2-只能保证一个共享变量原子操作"><a href="#2-只能保证一个共享变量原子操作" class="headerlink" title="2) 只能保证一个共享变量原子操作"></a>2) 只能保证一个共享变量原子操作</h5><p>看了CAS的实现就知道它只能针对一个共享变量，如果是多个共享变量就只能使用锁了。当然如果你有办法把多个变量整成一个变量，利用CAS也不错。例如读写锁中state的高位</p>
<h5 id="3-ABA问题"><a href="#3-ABA问题" class="headerlink" title="3) ABA问题"></a>3) ABA问题</h5><p>CAS需要检查操作值有没有发生改变，如果没有发生改变则更新。但是存在这样一种情况：如果一个值原来是A，变成B，然后又变成了A，那么在CAS检查的时候会发现没有改变，但是实质上它发生了改变，这就是所谓的ABA问题。对于ABA问题其解决方案是加上版本号，即在每个变量都加上一个版本号，每次改变时加1，即A -&gt; B -&gt; A，变成1A -&gt; 2B -&gt; 3A。</p>
<h5 id="ABA解决方案"><a href="#ABA解决方案" class="headerlink" title="ABA解决方案"></a>ABA解决方案</h5><p>CAS的ABA隐患问题，解决方案则是加上版本号，Java提供了AtomicStampedReference来解决。AtomicStampedReference通过包装[E,Integer]的元组来对对象标记版本戳stamp，从而避免ABA问题。</p>
<p>AtomicStampedReference的compareAndSet()方法定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public boolean compareAndSet(V   expectedReference,</div><div class="line">                             V   newReference,</div><div class="line">                             int expectedStamp,</div><div class="line">                             int newStamp) &#123;</div><div class="line">    Pair&lt;V&gt; current = pair;</div><div class="line">    return</div><div class="line">        expectedReference == current.reference &amp;&amp;</div><div class="line">        expectedStamp == current.stamp &amp;&amp;</div><div class="line">        ((newReference == current.reference &amp;&amp;</div><div class="line">          newStamp == current.stamp) ||</div><div class="line">         casPair(current, Pair.of(newReference, newStamp)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>compareAndSet有四个参数，分别表示：预期引用、更新后的引用、预期标志、更新后的标志。如果更新后的引用和标志和当前引用和标志相等则直接返回true，否则通过Pair生成一个新的pair对象与当前pair CAS替换。Pair为AtomicStampedReference的内部类，主要用于记录引用和版本戳信息，其定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static class Pair&lt;T&gt; &#123;</div><div class="line">    final T reference;</div><div class="line">    final int stamp;</div><div class="line">    private Pair(T reference, int stamp) &#123;</div><div class="line">        this.reference = reference;</div><div class="line">        this.stamp = stamp;</div><div class="line">    &#125;</div><div class="line">    static &lt;T&gt; Pair&lt;T&gt; of(T reference, int stamp) &#123;</div><div class="line">        return new Pair&lt;T&gt;(reference, stamp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Pair记录着对象的引用和版本戳，版本戳为int型，保持自增，同时Pair是一个不可变对象，其所有属性定义都为final，对外提供一个of方法，该方法返回一个新建的Pair对象，pair对象定义为volatile，保证多线程环境下的可见性。在AtomicStampedReference中，大多方法都是通过调用Pair的of方法来产生一个新的Pair对象，然后赋予给变量pair。如set方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void set(V newReference, int newStamp) &#123;</div><div class="line">    Pair&lt;V&gt; current = pair;</div><div class="line">    if (newReference != current.reference || newStamp != current.stamp)</div><div class="line">        this.pair = Pair.of(newReference, newStamp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h5><p>下面我们将通过一个例子可以看到AtomicStampedReference和AtomicInteger的区别。我们定义两个线程，线程1负责将100 -&gt; 110 -&gt; 100，线程2执行100 -&gt; 120，看看两者之间的区别。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">public class AtomicDemo2 &#123;</div><div class="line">    private static AtomicInteger atomicInteger = new AtomicInteger(100);</div><div class="line">    private static AtomicStampedReference atomicStampedReference = new AtomicStampedReference(100,1);</div><div class="line"></div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        // AtomicInteger</div><div class="line">        Thread at1 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                atomicInteger.compareAndSet(100,110);</div><div class="line">                atomicInteger.compareAndSet(110,100);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread at2 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(2); // at1，执行完</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(&quot;AtomicInteger: &quot; + atomicInteger.compareAndSet(100,120));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        at1.start();</div><div class="line">        at2.start();</div><div class="line">        at1.join();</div><div class="line">        at2.join();</div><div class="line"></div><div class="line">        // AtomicStampedReference</div><div class="line">        Thread tsf1 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    // 让tsf2先获取stamp，导致预期时间戳不一致</div><div class="line">                    TimeUnit.SECONDS.sleep(2);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // 预期引用：100， 更新后的引用110，预期表示getStamp(), 更新后表示：getStamp() + 1</div><div class="line">                atomicStampedReference.compareAndSet(100,110,atomicStampedReference.getStamp(),atomicStampedReference.getStamp() +1);</div><div class="line">                System.out.println(&quot;100 -&gt; 110: &quot; + atomicStampedReference.getStamp());</div><div class="line">                atomicStampedReference.compareAndSet(110,100,atomicStampedReference.getStamp(),atomicStampedReference.getStamp() +1);</div><div class="line">                System.out.println(&quot;110 -&gt; 100: &quot; + atomicStampedReference.getStamp());</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread tsf2 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                int stamp = atomicStampedReference.getStamp();</div><div class="line">                System.out.println(&quot;100 -&gt; 120: &quot; + stamp);</div><div class="line">                </div><div class="line">                // 此处线程休眠，是为了让线程tsf1执行，从而改变版本戳，最后导致atomicStampedReference.compareAndSet()因版本对不上而更新失败；</div><div class="line">                try &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(5);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(&quot;AtomicStampedReference: &quot; + atomicStampedReference.compareAndSet(100,120,stamp,stamp+1));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        tsf1.start();</div><div class="line">        tsf2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">AtomicInteger: true</div><div class="line">100 -&gt; 120: 1</div><div class="line">100 -&gt; 110: 2</div><div class="line">110 -&gt; 100: 3</div><div class="line">AtomicStampedReference: false</div></pre></td></tr></table></figure>
<p>运行结果充分展示了AtomicInteger的ABA问题和AtomicStampedReference解决ABA问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;CAS, Compare And Swap，即比较并交换。Doug lea大神在同步组价中大量使用CAS技术鬼斧神工地实现了Java多线程的
    
    </summary>
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/categories/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/tags/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap源码学习</title>
    <link href="http://jianwl.com/2018/05/16/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jianwl.com/2018/05/16/ConcurrentHashMap源码学习/</id>
    <published>2018-05-16T00:12:00.000Z</published>
    <updated>2018-05-18T00:41:43.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>HashMap是我们平时开发过程中用的比较多的集合，它是非线程安全的，涉及到多线程并发的情况，进行get操作有可能会引起死循环「JDK1.8以前」，导致CPU利用率接近100%。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_001()&#123;</div><div class="line">    final Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</div><div class="line">    IntStream.range(0,1000).forEach(num -&gt; new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            map.put(UUID.randomUUID().toString(),&quot;&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;).start()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决方案有HashTable和Collections.synchronizedMap(hashMap),不过两个方案基本上是对读写进行加锁操作，一个线程在读写元素，其余线程必须等待，性能可想而知。</p>
<p>所以，Doug Lea给我们带来了并发安全的CocurrentHashMap,它的实现是依赖于Java内存模型，本文源码是JDK8的版本，与之前的版本有较大差异。</p>
<h3 id="JDK1-7分析"><a href="#JDK1-7分析" class="headerlink" title="JDK1.7分析"></a>JDK1.7分析</h3><p>ConcurrentHashMap采用分段锁的机制，实现并发的更新操作，底层采用数组+链表的存储结构。其包含两个核心静态内部类Segment和HashEntry。</p>
<ol>
<li>Segment继承ReentrantLock用来充当锁的角色，每个Segment对象守护每个散列映射表的若干个桶。</li>
<li>HashEntry用来封装映射表的键/值对；</li>
<li>每个桶是由若干个HashEntry对象链接起来的链表</li>
</ol>
<p>一个ConcurrentHashMap实例中包含由若干个Segment对象组成的数组。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-16/36278984.jpg" alt=""></p>
<h3 id="JDK1-8-分析"><a href="#JDK1-8-分析" class="headerlink" title="JDK1.8 分析"></a>JDK1.8 分析</h3><p>1.8的实现已经抛弃了Segment分段锁机制，利用CAS + Synchronized来保证并发更新的安全，底层采用数组 + 链表 + 红黑树的存储结构。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/18-5-18/3990408.jpg" alt=""></p>
<h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h4><p>在开始之前，有些重要的概念需要介绍一下：</p>
<p>1、 <code>table</code>: 默认为null,初始化发生在第一次插入操作，默认大小为16的数组，用来存储Node节点数据，扩容时大小总是2的幂次方。</p>
<p>2、<code>nextTable</code>: 默认为null,扩容时新生成的数组，其大小为原数组的两倍。</p>
<p>3 、<code>sizeCtl</code>: 默认为0， 用来控制table的初始化和扩容操作，具体应用在后续会体现出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-1 代表table正在初始化</div><div class="line">-N 表示有N-1个线程正在进行扩容操作</div><div class="line">其他情况：</div><div class="line">1. 如果table未初始化，表示table需要初始化的大小；</div><div class="line">2. 如果table初始化完成，表示table的容量，默认是table大小的0.75倍</div></pre></td></tr></table></figure>
<p>4、 Node: 保存key，value及key的hash值的数据结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">    final int hash;</div><div class="line">    final K key;</div><div class="line">    volatile V val;</div><div class="line">    volatile Node&lt;K,V&gt; next;</div><div class="line">    ... 省略部分代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中value和next都用volatile修饰，保证并发的可见性。</p>
<p>5、<code>ForwardingNode:</code> 一个特殊的Node节点，hash值为-1，其中存储nextTable的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">final class ForwardingNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;</div><div class="line">    final Node&lt;K,V&gt;[] nextTable;</div><div class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</div><div class="line">        super(MOVED, null, null, null);</div><div class="line">        this.nextTable = tab;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有table发生扩容的时候，ForwardingNode才会发生作用，作为一个占位符放在table中表示当前节点为null或已经被移动。</p>
<h4 id="实例初始化"><a href="#实例初始化" class="headerlink" title="实例初始化"></a>实例初始化</h4><p>实例化CocurrentHashMap时带参数时，会根据参数调整table的大小，假设参数为100，最终会调整成256，确保table的大小总是2的幂次方，算法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ConcurrentHashMap&lt;String, String&gt; hashMap = new ConcurrentHashMap&lt;&gt;(100);</div><div class="line">private static final int tableSizeFor(int c) &#123;</div><div class="line">    int n = c - 1;</div><div class="line">    n |= n &gt;&gt;&gt; 1;</div><div class="line">    n |= n &gt;&gt;&gt; 2;</div><div class="line">    n |= n &gt;&gt;&gt; 4;</div><div class="line">    n |= n &gt;&gt;&gt; 8;</div><div class="line">    n |= n &gt;&gt;&gt; 16;</div><div class="line">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，ConcurrentHashMap在构造函数中只会初始化sizeCtl值，并不会直接初始化table，而是延缓到第一次put操作。</p>
<h4 id="table初始化"><a href="#table初始化" class="headerlink" title="table初始化"></a>table初始化</h4><p>前面已经提到过，table初始化操作会延缓到第一次put行为，但是put是可以并发执行的，DougLea是如何实现table只初始化一次的？让我们来看看源码的实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">private final Node&lt;K,V&gt;[] initTable() &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; int sc;</div><div class="line">    while ((tab = table) == null || tab.length == 0) &#123;</div><div class="line">//如果一个线程发现sizeCtl&lt;0，意味着另外的线程执行CAS操作成功，当前线程只需要让出cpu时间片</div><div class="line">        if ((sc = sizeCtl) &lt; 0) </div><div class="line">            Thread.yield(); // lost initialization race; just spin</div><div class="line">        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) &#123;</div><div class="line">            try &#123;</div><div class="line">                if ((tab = table) == null || tab.length == 0) &#123;</div><div class="line">                    int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;</div><div class="line">                    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];</div><div class="line">                    table = tab = nt;</div><div class="line">                    sc = n - (n &gt;&gt;&gt; 2);</div><div class="line">                &#125;</div><div class="line">            &#125; finally &#123;</div><div class="line">                sizeCtl = sc;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return tab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>sizeCtl默认为0，如果ConcurrentHashMap实例化时有传参数，sizeCtl会是一个2的幂次方的值。所以执行第一次put操作的线程会执行<code>Unsafe.compareAndSwapInt</code>方法修改sizeCtl为-1，有且只有一个线程能够修改成功，其他线程通过Thread.yield()让出CPU时间片等待初始化完成。</p>
<h4 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h4><p>假设table已经初始化完成，put操作采用CAS + synchronized实现并发插入或更新操作，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class="line">    if (key == null || value == null) throw new NullPointerException();</div><div class="line">    int hash = spread(key.hashCode());</div><div class="line">    int binCount = 0;</div><div class="line">    for (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class="line">        Node&lt;K,V&gt; f; int n, i, fh;</div><div class="line">        if (tab == null || (n = tab.length) == 0)</div><div class="line">            tab = initTable();</div><div class="line">        else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123;</div><div class="line">            if (casTabAt(tab, i, null, new Node&lt;K,V&gt;(hash, key, value, null)))</div><div class="line">                break;                   // no lock when adding to empty bin</div><div class="line">        &#125;</div><div class="line">        else if ((fh = f.hash) == MOVED)</div><div class="line">            tab = helpTransfer(tab, f);</div><div class="line">        ...省略部分代码</div><div class="line">    &#125;</div><div class="line">    addCount(1L, binCount);</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1、 hash算法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static final int spread(int h) &#123;return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;&#125;</div></pre></td></tr></table></figure>
<p>2、table中定位索引位置，n是table的大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int index = (n - 1) &amp; hash</div></pre></td></tr></table></figure>
<p>3、获取table中对应索引的元素f。</p>
<p>Doug Lea采用Unsafe.getObjectVolatile来获取，也许有人质疑，直接talbe[index]不可以么，为什么要这么复杂？</p>
<p>在java内存模型中，我们已经知道每个线程都有一个工作内存，里面存储这table的副本，虽然table是volatile修饰的，但是不能保证线程每次都拿到table中的最新元素，Unsafe.getObjectVolatile可以直接获取指定内存的数据，保证了每次拿到数据都是最新的。</p>
<p>4、如果f为null，说明table中这个位置第一次元素，利用Unsafe.compareAndSwapObject方法插入Node节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果CAS成功，说明Node节点已经插入，随后addCount(1L,binCount)方法会检查当前容量是否需要进行扩容。</div><div class="line"></div><div class="line">如果CAS失败，说明有其他线程提前插入了节点，自旋重新尝试在这个位置插入节点。</div></pre></td></tr></table></figure>
<p>5、如果f的hash值为-1，说明当前f是ForwardingNode节点，意味有其他线程正在扩容，则一起进行扩容操作。</p>
<p>6、其余情况把新的Node节点按链表或红黑树的方式插入到合适的位置，这个过程采用同步内置锁实现并发，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">synchronized (f) &#123;</div><div class="line">    if (tabAt(tab, i) == f) &#123;</div><div class="line">        if (fh &gt;= 0) &#123;</div><div class="line">            binCount = 1;</div><div class="line">            for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">                K ek;</div><div class="line">                if (e.hash == hash &amp;&amp;</div><div class="line">                    ((ek = e.key) == key ||</div><div class="line">                     (ek != null &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                    oldVal = e.val;</div><div class="line">                    if (!onlyIfAbsent)</div><div class="line">                        e.val = value;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                Node&lt;K,V&gt; pred = e;</div><div class="line">                if ((e = e.next) == null) &#123;</div><div class="line">                    pred.next = new Node&lt;K,V&gt;(hash, key,</div><div class="line">                                              value, null);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else if (f instanceof TreeBin) &#123;</div><div class="line">            Node&lt;K,V&gt; p;</div><div class="line">            binCount = 2;</div><div class="line">            if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                           value)) != null) &#123;</div><div class="line">                oldVal = p.val;</div><div class="line">                if (!onlyIfAbsent)</div><div class="line">                    p.val = value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在节点f上进行同步，节点插入之前，再次利用tabAt(tab,i) == f判断，防止被其他线程修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、如果f.hash &gt;= 0，说明f是链表结构的头结点，遍历链表，如果找到对应的node节点，则修改value，否则在链表尾部加入节点。</div><div class="line"></div><div class="line">2、如果f是TreeBin类型节点，说明f是红黑树跟节点，则在树结构上遍历元素，更新或增加节点。</div><div class="line"></div><div class="line">3、如果链表中节点数binCount &gt;= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构。</div></pre></td></tr></table></figure>
<h4 id="table扩容"><a href="#table扩容" class="headerlink" title="table扩容"></a>table扩容</h4><p>当table容量不足的时候，即table的元素数量达到容量阈值sizeCtl,需要对table进行扩容。</p>
<blockquote>
<p>整个扩容分为两部分：</p>
<p>1、构建一个nextTable，大小为table的两倍</p>
<p>2、把table的数据复制到nextTable中</p>
</blockquote>
<p>这两个过程在单线程实现很简单，但是ConcurrentHashMap是支持并发插入的，扩容操作自然也会有并发的出现，这种情况下，第二步可以支持节点的并发复制，这样性能自然提升不少，但是实现的复杂度也上升了一个台阶。</p>
<p>先看第一步，构建nextTable，毫无疑问，这个过程只能单个线程进行nextTable的初始化，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">private final void addCount(long x, int check) &#123;</div><div class="line">    ... 省略部分代码</div><div class="line">    if (check &gt;= 0) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab, nt; int n, sc;</div><div class="line">        while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp;</div><div class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class="line">            int rs = resizeStamp(n);</div><div class="line">            if (sc &lt; 0) &#123;</div><div class="line">                if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||</div><div class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||</div><div class="line">                    transferIndex &lt;= 0)</div><div class="line">                    break;</div><div class="line">                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))</div><div class="line">                    transfer(tab, nt);</div><div class="line">            &#125;</div><div class="line">            else if (U.compareAndSwapInt(this, SIZECTL, sc,</div><div class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2))</div><div class="line">                transfer(tab, null);</div><div class="line">            s = sumCount();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Unsafe.compareAndSwapInt修改sizeCtl值，保证只有一个线程能够初始化nextTable,扩容后的数组长度为原来的两倍，但是容量是原来的1.5。</p>
<p>节点是从table移动nextTable，大体思路是遍历、复制的过程。</p>
<p>1、首先根据运算得到遍历的次数i，利用tabAt方法获得i位置的元素f，初始化一个forwardNode实例fwd。</p>
<p>2、如果f == null，则在table中的i位置放入fwd,这个过程是采用Unsafe.compareAndSwapObject方法实现的，很巧妙的实现了节点的并发移动。</p>
<p>3、如果f是链表的头节点，就构造一个反序列链表，把他们分别放在nextTable的i和i+n的位置上，移动完成，采用Unsafe.putObjectVolatile方法给table原位置复制fwd。</p>
<p>4、如果f是TreeBin节点，也做了一个反序处理，并判断是否需要untreeify,把处理的结果分别放在nextTable的i和i+n的位置上，移动完成，同样采用Unsafe.putObjectVolatile方法给table原位置复制fwd。</p>
<p>遍历过所有的节点以后就完成了复制工作，把table指向nextTable，并更新sizeCtl为新数组大小的0.75倍，扩容完成。</p>
<h4 id="红黑树构造"><a href="#红黑树构造" class="headerlink" title="红黑树构造"></a>红黑树构造</h4><p>注意: 如果链表结构中元素超过TREEIFY_THRESHOLD阈值，默认为8个，则把链表转化为红黑树，提高遍历查询效率。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (binCount != 0) &#123;</div><div class="line">    if (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">        treeifyBin(tab, i);</div><div class="line">    if (oldVal != null)</div><div class="line">        return oldVal;</div><div class="line">    break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们看看如何构造树结构，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">private final void treeifyBin(Node&lt;K,V&gt;[] tab, int index) &#123;</div><div class="line">    Node&lt;K,V&gt; b; int n, sc;</div><div class="line">    if (tab != null) &#123;</div><div class="line">        if ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</div><div class="line">            tryPresize(n &lt;&lt; 1);</div><div class="line">        else if ((b = tabAt(tab, index)) != null &amp;&amp; b.hash &gt;= 0) &#123;</div><div class="line">            synchronized (b) &#123;</div><div class="line">                if (tabAt(tab, index) == b) &#123;</div><div class="line">                    TreeNode&lt;K,V&gt; hd = null, tl = null;</div><div class="line">                    for (Node&lt;K,V&gt; e = b; e != null; e = e.next) &#123;</div><div class="line">                        TreeNode&lt;K,V&gt; p =</div><div class="line">                            new TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</div><div class="line">                                              null, null);</div><div class="line">                        if ((p.prev = tl) == null)</div><div class="line">                            hd = p;</div><div class="line">                        else</div><div class="line">                            tl.next = p;</div><div class="line">                        tl = p;</div><div class="line">                    &#125;</div><div class="line">                    setTabAt(tab, index, new TreeBin&lt;K,V&gt;(hd));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，生成树节点的代码块是同步的，进入同步代码块之后，再次验证table中index位置元素是否被修改过。</p>
<p>1、根据table中index位置Node链表，重新生成一个hd为头结点的TreeNode链表</p>
<p>2、 根据hd头结点，生成TreeBin树结构，并把树结构的root节点写到table的index位置的内存中，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">TreeBin(TreeNode&lt;K,V&gt; b) &#123;</div><div class="line">    super(TREEBIN, null, null, null);</div><div class="line">    this.first = b;</div><div class="line">    TreeNode&lt;K,V&gt; r = null;</div><div class="line">    for (TreeNode&lt;K,V&gt; x = b, next; x != null; x = next) &#123;</div><div class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</div><div class="line">        x.left = x.right = null;</div><div class="line">        if (r == null) &#123;</div><div class="line">            x.parent = null;</div><div class="line">            x.red = false;</div><div class="line">            r = x;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            K k = x.key;</div><div class="line">            int h = x.hash;</div><div class="line">            Class&lt;?&gt; kc = null;</div><div class="line">            for (TreeNode&lt;K,V&gt; p = r;;) &#123;</div><div class="line">                int dir, ph;</div><div class="line">                K pk = p.key;</div><div class="line">                if ((ph = p.hash) &gt; h)</div><div class="line">                    dir = -1;</div><div class="line">                else if (ph &lt; h)</div><div class="line">                    dir = 1;</div><div class="line">                else if ((kc == null &amp;&amp;</div><div class="line">                          (kc = comparableClassFor(k)) == null) ||</div><div class="line">                         (dir = compareComparables(kc, k, pk)) == 0)</div><div class="line">                    dir = tieBreakOrder(k, pk);</div><div class="line">                    TreeNode&lt;K,V&gt; xp = p;</div><div class="line">                if ((p = (dir &lt;= 0) ? p.left : p.right) == null) &#123;</div><div class="line">                    x.parent = xp;</div><div class="line">                    if (dir &lt;= 0)</div><div class="line">                        xp.left = x;</div><div class="line">                    else</div><div class="line">                        xp.right = x;</div><div class="line">                    r = balanceInsertion(r, x);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    this.root = r;</div><div class="line">    assert checkInvariants(root);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要根据Node节点的hash值大小构建二叉树，这个红黑树的构造过程实在有点复杂，感兴趣的同学可以看看源码。</p>
<h4 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h4><p>get操作和put操作相比，显得简单了许多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public V get(Object key) &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;</div><div class="line">    int h = spread(key.hashCode());</div><div class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class="line">        (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123;</div><div class="line">        if ((eh = e.hash) == h) &#123;</div><div class="line">            if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))</div><div class="line">                return e.val;</div><div class="line">        &#125;</div><div class="line">        else if (eh &lt; 0)</div><div class="line">            return (p = e.find(h, key)) != null ? p.val : null;</div><div class="line">        while ((e = e.next) != null) &#123;</div><div class="line">            if (e.hash == h &amp;&amp;</div><div class="line">                ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))</div><div class="line">                return e.val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1、判断table是否为空，如果为空，直接返回null<br>2、计算key的hash值，并获取指定table中指定位置的Node节点，通过遍历链表或树结构找到对应节点，返回value值。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ConcurrentHashMap是一个并发散列映射表的实现，它允许完全并发的读取，并且支持给定数量的并发更新。相当于HashTable和同步包装器包装的HashMap，使用一个全局的锁来同步不同线程间的并发访问，同一时间点，只能有一个线程持有锁，也就是说在同一个时间点，只能有一个线程能访问容器，这虽然保证多线程间的安全并发访问，但同时也导致对容器的访问变成串行化。</p>
<p>1.6中采用ReentrantLock分段锁的方式，是多个线程在不同的segment上进行写操作，不会发现阻塞行为；1.8中采用内置锁synchronized，难道是因为1.8的虚拟机内置锁已经优化足够快了？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;HashMap是我们平时开发过程中用的比较多的集合，它是非线程安全的，涉及到多线程并发的情况，进行get操作有可能会引起死循环「JDK1.8
    
    </summary>
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/categories/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="JDK源码学习专题" scheme="http://jianwl.com/tags/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
</feed>
