<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录点滴成长</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jianwl.com/"/>
  <updated>2017-03-18T09:05:36.000Z</updated>
  <id>http://jianwl.com/</id>
  
  <author>
    <name>流云</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git读书笔记</title>
    <link href="http://jianwl.com/2017/03/18/Git%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://jianwl.com/2017/03/18/Git读书笔记/</id>
    <published>2017-03-18T05:20:23.000Z</published>
    <updated>2017-03-18T09:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Git非常强大，本节主要记录些常用，但之前不知道的技巧；在此之前Git操作基本按照以下这个套路：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.git init //初始化本地仓库</div><div class="line">2.git clone git@git.oschina.net:shuangziliuyun/Hexo.git //拷贝远程项目到本地</div><div class="line">3.touch README.md //新建文件</div><div class="line">4.git add . //提交新建文件到暂存区(Stage)</div><div class="line">5.git commit -m &quot;新增README.md文件&quot;//将暂存区的文件提交到本地仓库</div><div class="line">6.git pull origin master //下载远端主分支，并合并到本地主分支。</div><div class="line">7.git push origin master //提交本地分支到远端</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-删除索引中的文件-但在工作区中保留它"><a href="#1-删除索引中的文件-但在工作区中保留它" class="headerlink" title="1. 删除索引中的文件,但在工作区中保留它"></a>1. 删除索引中的文件,但在工作区中保留它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached</div></pre></td></tr></table></figure>
<p>场景：Git项目一开始没有新增<code>.gitignore</code>文件，后续增加<code>.gitignore文件</code>无法忽略已存在的文件，需要将这些文件标记为未追踪。– 以a.txt文件为例；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git rm --cached a.txt 「暂存区的a.txt文件删除，并将a.txt文件退回到工作区」</div><div class="line">git commit -m &quot;将暂存区的内容提交到本地仓库&quot;</div><div class="line">git add a.txt 「将工作区的a.txt文件提交到暂存区」</div><div class="line">git commit -m &quot;将a.txt文件重新放到本地仓库&quot;</div><div class="line">git push origin master  「将本地仓库提交到远程仓库，此时.gitignore文件将生效，会忽略a.txt文件」</div></pre></td></tr></table></figure>
<p>本地<code>.gitignore</code>文件和本地文件</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/38737859-file_1489819916053_1297a.png" alt=""></p>
<p>远端分支：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/73891144-file_1489820008800_eb7b.png" alt=""></p>
<h4 id="2-查看某个文件修改的全部历史记录"><a href="#2-查看某个文件修改的全部历史记录" class="headerlink" title="2. 查看某个文件修改的全部历史记录"></a>2. 查看某个文件修改的全部历史记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --follow 文件名</div></pre></td></tr></table></figure>
<p>修改<code>index.html文件的提交记录</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline --follow index.html</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/15470718-file_1489820728948_b196.png" alt=""></p>
<p>全量提交记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/77055950-file_1489820652429_231a.png" alt=""></p>
<h4 id="3-GIT用于特定目的的特殊符号引用"><a href="#3-GIT用于特定目的的特殊符号引用" class="headerlink" title="3. GIT用于特定目的的特殊符号引用"></a>3. GIT用于特定目的的特殊符号引用</h4><table>
<thead>
<tr>
<th style="text-align:center">特殊符号</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">HEAD始终指向当前分支的最新提交，当切换分支时，HEAD会更新为指向新分支的最近提交</td>
</tr>
<tr>
<td style="text-align:center">ORIG_HEAD</td>
<td style="text-align:center">某些操作，例如合并(merge)和复位(reset)，会把调整为新值之前的先前版本的HEAD记录到ORIG_HEAD中。可以使用ORIG_HEAD来恢复或回滚到之前的状态或者做一个比较</td>
</tr>
<tr>
<td style="text-align:center">FETCH_HEAD</td>
<td style="text-align:center">当使用远程库时，git fetch命令将所有抓取分支的头记录到<code>.git/FETCH_HEAD</code>中。FETCH_HEAD是最近抓取的分支HEAD的简写，并且仅在刚刚抓取操作之后才有效。</td>
</tr>
<tr>
<td style="text-align:center">MERGE_HEAD</td>
<td style="text-align:center">当一个合并操作正在进行时，其他分支的头暂时记录在MERGE_HEAD中。换言之，MERGE_HEAD是正在合并进HEAD的提交</td>
</tr>
</tbody>
</table>
<h4 id="4-当版本出现问题时，用于查找版本的工具"><a href="#4-当版本出现问题时，用于查找版本的工具" class="headerlink" title="4. 当版本出现问题时，用于查找版本的工具"></a>4. 当版本出现问题时，用于查找版本的工具</h4><p>操作1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git bisect start 「从干净的工作中启动bisect」</div><div class="line">git bisect bad 「默认当前版本是有问题的版本」</div><div class="line">git bisect good 版本SHA-A值 「设定认为一定没有问题的版本，此时HEAD会跳到**当前版本**和**认为是一定是好的版本的中间**」</div></pre></td></tr></table></figure>
<p>图示1：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/14250483-file_1489822730415_9bf1.png" alt=""></p>
<p>结果1：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/7113223-file_1489822865951_3b76.png" alt=""></p>
<hr>
<p>操作2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git bisect good 「认为版本是好的，HEAD会向前进一个提交的记录，知道找到有问题的版本」</div><div class="line"></div><div class="line">或</div><div class="line"></div><div class="line">git bisect bad 「认为版本是坏的，HEAD会向后退一个提交的记录，知道找到有问题的版本」</div></pre></td></tr></table></figure>
<p>图示2：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/93829162-file_1489823104402_15067.png" alt=""></p>
<p>结果2：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/2013385-file_1489823069103_6c3b.png" alt=""></p>
<h4 id="5-变基提交"><a href="#5-变基提交" class="headerlink" title="5. 变基提交"></a>5. 变基提交</h4><p>什么是变基呢？用一个图来说明：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/46864201-file_1489824210279_245c.png" alt=""></p>
<p>实战：</p>
<p>dev 分支的提交记录</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/62076278-file_1489826998750_1802.png" alt=""></p>
<p>topic 分支的提交记录</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/78783161-file_1489827077268_253f.png" alt=""></p>
<p>所在分支是topic分支，执行变基：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/29230732-file_1489827178578_16545.png" alt=""></p>
<p>变基后topic分支的提交记录：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/60646943-file_1489827247580_2db0.png" alt=""></p>
<p>提示：</p>
<p>执行变基的过程，有很大概率会出现冲突。如果多个开发人员，更改同一文件时，将会出现</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Git版本控制管理 – 王迪 丁彦 译</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Git非常强大，本节主要记录些常用，但之前不知道的技巧；在此之前Git操作基本按照以下这个套路：&lt;/p&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="Git" scheme="http://jianwl.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jianwl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot之下载文件&amp;下载zip文件</title>
    <link href="http://jianwl.com/2017/03/18/SpringBoot%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6-%E4%B8%8B%E8%BD%BDzip%E6%96%87%E4%BB%B6/"/>
    <id>http://jianwl.com/2017/03/18/SpringBoot之下载文件-下载zip文件/</id>
    <published>2017-03-18T04:33:21.000Z</published>
    <updated>2017-03-18T04:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>下载文件这一块之前都没接触过，话不多说直接贴出代码，备忘。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-下载文件"><a href="#1-下载文件" class="headerlink" title="1. 下载文件"></a>1. 下载文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/download&quot;,method = RequestMethod.POST)</div><div class="line">public ResponseEntity&lt;InputStreamResource&gt; downloadFile(@RequestParam String gifUrl) throws IOException &#123;</div><div class="line">    InputStream inputStream = new URL(gifUrl).openStream();</div><div class="line">    HttpHeaders headers = new HttpHeaders();</div><div class="line">    headers.add(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</div><div class="line">    headers.add(&quot;Content-Disposition&quot;, String.format(&quot;attachment; filename=\&quot;%s\&quot;.gif&quot;, UUID.randomUUID().toString()));</div><div class="line">    headers.add(&quot;Pragma&quot;, &quot;no-cache&quot;);</div><div class="line">    headers.add(&quot;Expires&quot;, &quot;0&quot;);</div><div class="line"></div><div class="line">    return ResponseEntity</div><div class="line">            .ok()</div><div class="line">            .headers(headers)</div><div class="line">            .contentType(MediaType.parseMediaType(&quot;application/octet-stream&quot;))</div><div class="line">            .body(new InputStreamResource(inputStream));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-下载zip文件"><a href="#2-下载zip文件" class="headerlink" title="2. 下载zip文件"></a>2. 下载zip文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/batch/download&quot;,method = RequestMethod.POST,produces=&quot;application/zip&quot;)</div><div class="line">    public void batchDownload(@RequestParam String gifUrls,HttpServletResponse response) throws IOException &#123;</div><div class="line">        response.setStatus(HttpServletResponse.SC_OK);</div><div class="line">        response.addHeader(&quot;Content-Disposition&quot;,String.format(&quot;attachment; filename=\&quot;%s\&quot;.zip&quot;, UUID.randomUUID().toString()));</div><div class="line"></div><div class="line">        ZipOutputStream zipOutputStream = new ZipOutputStream(response.getOutputStream());</div><div class="line">        List&lt;String&gt; gifs = Arrays.asList(gifUrls.split(&quot;,&quot;));</div><div class="line">        System.out.println(&quot;gifs =&gt; &quot; + gifs.size());</div><div class="line">        if(gifs.size() == 0)&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for(String gif : gifs)&#123;</div><div class="line">            zipOutputStream.putNextEntry(new ZipEntry(UUID.randomUUID().toString().concat(&quot;.gif&quot;)));</div><div class="line">            InputStream inputStream = new URL(gif).openStream();</div><div class="line">            IOUtils.copy(inputStream, zipOutputStream);</div><div class="line">            inputStream.close();</div><div class="line">            zipOutputStream.closeEntry();</div><div class="line">        &#125;</div><div class="line">        zipOutputStream.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;下载文件这一块之前都没接触过，话不多说直接贴出代码，备忘。&lt;/p&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;hea
    
    </summary>
    
      <category term="SpringBoot" scheme="http://jianwl.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://jianwl.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JAVA之IO</title>
    <link href="http://jianwl.com/2017/03/18/JAVA%E4%B9%8BIO/"/>
    <id>http://jianwl.com/2017/03/18/JAVA之IO/</id>
    <published>2017-03-18T02:02:58.000Z</published>
    <updated>2017-03-18T04:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以来对JAVA IO这一块都很陌生，最近接触的项目涉及到这一块，因为不熟悉所以做起来稍微花了点时间，这一节，主要学习<code>JAVA IO</code>的基础知识点；</p>
<h3 id="本节目标"><a href="#本节目标" class="headerlink" title="本节目标"></a>本节目标</h3><ul>
<li>了解 java.io.File类的主要用途</li>
<li>了解如何使用字节流和字符流</li>
<li>理解如何从文件读取数据和向其中写入数据</li>
</ul>
<h3 id="JAVA-IO基础"><a href="#JAVA-IO基础" class="headerlink" title="JAVA IO基础"></a>JAVA IO基础</h3><h4 id="1-流的概念"><a href="#1-流的概念" class="headerlink" title="1. 流的概念"></a>1. 流的概念</h4><p><code>JAVA</code>中将输入输出抽象成流，流通过输入输出系统与物理设备连接，尽管与他们连接的物理设备不尽相同，所有流的行为具有同样的方式。将数据从外部（包括磁盘文件、键盘、套接字）读入到内存中的流称为输入流，将从内存写入到外部设备（控制台、磁盘文件或网络）的称为输出流。</p>
<h4 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2. 流的分类"></a>2. 流的分类</h4><p>流序列中的数据既可以是未加工的原始二进制数据，也可以是经一定编码处理后符合某种规格的特定数据，因此Java中的流分为两种:</p>
<ul>
<li>字节流(8bits) : 用于读取或写二进制数据</li>
<li>字符流(16bits) : JAVA中的字符是Unicode编码，一个字符占两个字节。</li>
</ul>
<p>提示：</p>
<p>在最底层，所有的输入、输出都是字节形式的，基于字符的流只为处理字符提供方便有效的方法。</p>
<h4 id="3-字节流"><a href="#3-字节流" class="headerlink" title="3. 字节流"></a>3. 字节流</h4><p>字节流的最顶层是两个抽象类：InputStream和OutputStream,其他关于处理字节的类都是他们的子类，这些子类对不同的外设进行处理，例如磁盘、网络连接、甚至是内存缓冲区。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BufferedInputStream</td>
<td style="text-align:center">缓冲输入流</td>
</tr>
<tr>
<td style="text-align:center">BufferedOutputStream</td>
<td style="text-align:center">缓冲输出流</td>
</tr>
<tr>
<td style="text-align:center">ByteArrayInputStream</td>
<td style="text-align:center">从字节数组读取的输入流</td>
</tr>
<tr>
<td style="text-align:center">DataInputStream</td>
<td style="text-align:center">包含读取Java标准数据类型方法的输入流</td>
</tr>
<tr>
<td style="text-align:center">DataOutputStream</td>
<td style="text-align:center">包含编写Java 标准数据类型方法的输出流</td>
</tr>
<tr>
<td style="text-align:center">FileInputStream</td>
<td style="text-align:center">读取文件的输入流</td>
</tr>
<tr>
<td style="text-align:center">FileOutputStream</td>
<td style="text-align:center">写文件的输出流</td>
</tr>
<tr>
<td style="text-align:center">FilterInputStream</td>
<td style="text-align:center">实现 InputStream</td>
</tr>
<tr>
<td style="text-align:center">FilterOutputStream</td>
<td style="text-align:center">实现 OutputStream</td>
</tr>
<tr>
<td style="text-align:center">InputStream</td>
<td style="text-align:center">描述流输入的抽象类</td>
</tr>
<tr>
<td style="text-align:center">OutputStream</td>
<td style="text-align:center">描述流输出的抽象类</td>
</tr>
<tr>
<td style="text-align:center">PipedInputStream</td>
<td style="text-align:center">输入管道</td>
</tr>
<tr>
<td style="text-align:center">PipedOutputStream</td>
<td style="text-align:center">输出管道</td>
</tr>
<tr>
<td style="text-align:center">PrintStream</td>
<td style="text-align:center">包含print( ) 和 println( )的输出流</td>
</tr>
<tr>
<td style="text-align:center">PushbackInputStream</td>
<td style="text-align:center">支持向输入流返回一个字节的单字节的“unget”的输入流</td>
</tr>
<tr>
<td style="text-align:center">RandomAccessFile</td>
<td style="text-align:center">支持随机文件输入/输出</td>
</tr>
<tr>
<td style="text-align:center">SequenceInputStream</td>
<td style="text-align:center">两个或两个以上顺序读取的输入流组成的输入流</td>
</tr>
</tbody>
</table>
<p>抽象类InputStream和OutputStream中定义了实现其他流类的关键方法<code>read()</code>和<code>write</code>，他们分别是对数据的字节进行读写，两种方法都是抽象方法，被子类重载。</p>
<p>文件按字节流的方式拷贝：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class CopyFileByte &#123;</div><div class="line">   public static void main(String args[]) throws IOException</div><div class="line">   &#123;</div><div class="line">      FileInputStream in = null;</div><div class="line">      FileOutputStream out = null;</div><div class="line">      try &#123;</div><div class="line">         in = new FileInputStream(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">         out = new FileOutputStream(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line">         int c;</div><div class="line">         while ((c = in.read()) != -1) &#123;</div><div class="line">            out.write(c);</div><div class="line">         &#125;</div><div class="line">      &#125;finally &#123;</div><div class="line">         if (in != null) &#123;</div><div class="line">            in.close();</div><div class="line">         &#125;</div><div class="line">         if (out != null) &#123;</div><div class="line">            out.close();</div><div class="line">         &#125;</div><div class="line">      &#125; </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/47337851-file_1489806018819_6ceb.png" alt=""></p>
<p>上面使用的是文件名来创建FileInputStream和FileOutputStream，实际上还可以使用文件对象来创建输入输出流，字节流的每次操作都是一个数据单位–字节。<code>input.txt</code>中包含<code>Hello World</code>，那么他将复制完<code>H</code>之后，再复制<code>e</code>接着是<code>l</code>,如此类推直到结束。in.read()每次从输入流中读取一个字节，如果达到文件尾部就返回-1.使用完了，还要关闭这些字节流，调用close方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File inFile = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">File outFile = new File(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line"></div><div class="line">FileInputStream in = new FileInputStream(inFile);</div><div class="line">FileOutputStream out = new FileOutputStream(outFile);</div></pre></td></tr></table></figure>
<h4 id="4-字符流"><a href="#4-字符流" class="headerlink" title="4. 字符流"></a>4. 字符流</h4><p>JAVA是使用16字节来存储字符数据的，涉及到的大多数是字符操作，在程序中使用字符流比字节流更加合适，类似于字节流，字符流的两个顶层抽象类是Reader和Writer，以下是它们的子类处理字符流。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BufferedReader</td>
<td style="text-align:center">缓冲输入字符流</td>
</tr>
<tr>
<td style="text-align:center">BufferedWriter</td>
<td style="text-align:center">缓冲输出字符流</td>
</tr>
<tr>
<td style="text-align:center">CharArrayReader</td>
<td style="text-align:center">从字符数组读取数据的输入流</td>
</tr>
<tr>
<td style="text-align:center">CharArrayWriter</td>
<td style="text-align:center">向字符数组写数据的输出流</td>
</tr>
<tr>
<td style="text-align:center">FileReader</td>
<td style="text-align:center">读取文件的输入流</td>
</tr>
<tr>
<td style="text-align:center">FileWriter</td>
<td style="text-align:center">写文件的输出流</td>
</tr>
<tr>
<td style="text-align:center">FilterReader</td>
<td style="text-align:center">过滤读</td>
</tr>
<tr>
<td style="text-align:center">FilterWriter</td>
<td style="text-align:center">过滤写</td>
</tr>
<tr>
<td style="text-align:center">InputStreamReader</td>
<td style="text-align:center">把字节转换成字符的输入流</td>
</tr>
<tr>
<td style="text-align:center">LineNumberReader</td>
<td style="text-align:center">计算行数的输入流</td>
</tr>
<tr>
<td style="text-align:center">OutputStreamWriter</td>
<td style="text-align:center">把字符转换成字节的输出流</td>
</tr>
<tr>
<td style="text-align:center">PipedReader</td>
<td style="text-align:center">输入管道</td>
</tr>
<tr>
<td style="text-align:center">PipedWriter</td>
<td style="text-align:center">输出管道</td>
</tr>
<tr>
<td style="text-align:center">PrintWriter</td>
<td style="text-align:center">包含print( )和println( )的输出流</td>
</tr>
<tr>
<td style="text-align:center">PushbackReader</td>
<td style="text-align:center">允许字符返回到输入流的输入流</td>
</tr>
<tr>
<td style="text-align:center">StringReader</td>
<td style="text-align:center">读取字符串的输入流</td>
</tr>
<tr>
<td style="text-align:center">StringWriter</td>
<td style="text-align:center">写字符串的输出流</td>
</tr>
<tr>
<td style="text-align:center">Writer</td>
<td style="text-align:center">描述字符流输出的抽象类</td>
</tr>
<tr>
<td style="text-align:center">Reader</td>
<td style="text-align:center">描述字符流输入的抽象类</td>
</tr>
</tbody>
</table>
<p>类似于字节，字符的抽象类Reader和Writer中也定义了关键方法<code>read()</code>和<code>writer()</code>，它们分别对字符进行读写，两种方法也都是抽象方法，被子类重载；</p>
<p>文件按字符流的方式拷贝</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">//Character streams are used to perform input and output for 16-bit unicode</div><div class="line">public class CopyFileCharacter &#123;</div><div class="line">   public static void main(String args[]) throws IOException</div><div class="line">   &#123;</div><div class="line">      FileReader in = null;</div><div class="line">      FileWriter out = null;</div><div class="line">      try &#123;</div><div class="line">         in = new FileReader(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">         out = new FileWriter(&quot;/Users/jianweilin/Desktop/output.txt&quot;);</div><div class="line"></div><div class="line">         int c;</div><div class="line">         while ((c = in.read()) != -1) &#123;</div><div class="line">            out.write(c);</div><div class="line">         &#125;</div><div class="line">      &#125;finally &#123;</div><div class="line">         if (in != null) &#123;</div><div class="line">            in.close();</div><div class="line">         &#125;</div><div class="line">         if (out != null) &#123;</div><div class="line">            out.close();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/88832472-file_1489808155695_709d.png" alt=""></p>
<p>与字节流例子对比，只有声明的I/O流的类名不同，这里使用的FileReader和FileWriter，他们操作的最小单位是一个字符(16bits)，而FileInputStream和FileOutputStream最小单位则是一个字节(8bits)</p>
<h3 id="JAVA自定义的标准流"><a href="#JAVA自定义的标准流" class="headerlink" title="JAVA自定义的标准流"></a>JAVA自定义的标准流</h3><p>标准输入流<code>System.in</code>读取标准输入设备数据，例如键盘输入(默认)，其类型是InputStream，三个重要的读入方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int read() 从输入流中读取数据的下一个字节，返回ASCLL码，若返回值==-1，说明没有读取到任何字节，读取工作结束</div><div class="line">int read(byte[] b)  从输入流中读取一定数量的字节，并将这些数据存储到缓冲区数据b中</div><div class="line">int read(byte[] b,int off,int len) 将输入流中最多len个字节读入到字节数组b中</div></pre></td></tr></table></figure>
<p>标准输入流<code>System.out</code>向标准的输出设备写入数据，默认情况下指控制台，其类型是<code>PrintStream</code>，包含两个重要的方法：print()、println()</p>
<p>标准错误流<code>System.err</code>默认也是控制台，类型和<code>System.out</code>相同说<code>PrintStream</code></p>
<p>提示：</p>
<p>这些流都有默认的设备，但它们可以重定向到任何兼容的输入/输出设备。</p>
<h3 id="控制台的输入和输出"><a href="#控制台的输入和输出" class="headerlink" title="控制台的输入和输出"></a>控制台的输入和输出</h3><p>控制台的输入和输出是由System.in和System.out来完成的，目前，读取控制台的输入输出的首选方法的是字符流，但完成控制台输入的唯一方法是字节流，因而java提供了InputStreamReader和OutputStreamWriter将字节流转化为字符流，BufferedReader是缓冲输入字符流，正如我们在例子中看到的，Java允许使用<code>System.out</code>向控制台写数据，但在实际项目中，推荐使用PrintWriter，他是基于字符的；</p>
<p>控制台输入字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">public class ConsoleInOut&#123;</div><div class="line">    public static void main(String args[])throws IOException&#123;</div><div class="line">           char c;</div><div class="line">            InputStreamReader isr = new InputStreamReader(System.in); //①</div><div class="line">            BufferedReader br = new BufferedReader(isr); //②</div><div class="line">            System.out.println(&quot;Enter characters, &apos;q&apos; to exit.&quot;);</div><div class="line">            c=(char)br.read();</div><div class="line">            while(c != &apos;q&apos;)&#123;</div><div class="line">                System.out.println(c);</div><div class="line">                c = (char) br.read();                </div><div class="line">            &#125; ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/55041445-file_1489809083755_c258.png" alt=""></p>
<p>①和②两行创建了一个与键盘相连的BufferedReader对象，这里使用read()方法来读取字符，当到达流的末尾时返回-1，输出q退出程序，输出使用的是println()方法，每次输出后都会换行。</p>
<h3 id="文件的输入和输出"><a href="#文件的输入和输出" class="headerlink" title="文件的输入和输出"></a>文件的输入和输出</h3><p>文件File位于<code>java.io</code>包中，用于描述文件和目录的操作，创建文件对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File file = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;)</div></pre></td></tr></table></figure>
<p>File相关的方法如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">exists()</td>
<td style="text-align:center">判断文件或目录是否存在</td>
</tr>
<tr>
<td style="text-align:center">mkdir()</td>
<td style="text-align:center">创建目录</td>
</tr>
<tr>
<td style="text-align:center">createNewFile()</td>
<td style="text-align:center">创建文件</td>
</tr>
<tr>
<td style="text-align:center">isFile()/isDirectory()</td>
<td style="text-align:center">判断是文件还是目录</td>
</tr>
<tr>
<td style="text-align:center">delete()</td>
<td style="text-align:center">删除文件</td>
</tr>
<tr>
<td style="text-align:center">getPath()</td>
<td style="text-align:center">获取文件或者目录的路径</td>
</tr>
<tr>
<td style="text-align:center">list()</td>
<td style="text-align:center">将目录中所有文件名保存在字符串数组中返回</td>
</tr>
</tbody>
</table>
<p>文件相关的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">public class TestAbstract &#123;  </div><div class="line">    public static void main(String args[]) throws IOException &#123;  </div><div class="line">        File file1 = new File(&quot;/Users/jianweilin/Desktop/input.txt&quot;);</div><div class="line">        if (!file1.exists())</div><div class="line">            file1.createNewFile();  </div><div class="line">        System.out.println(&quot;file1&apos;s AbsolutePath=  &quot; + file1.getAbsolutePath());</div><div class="line">        System.out.println(&quot;file1 can read=&quot; + file1.canRead());</div><div class="line">        System.out.println(&quot;file1&apos;s len= &quot; + file1.length());  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-18/29701927-file_1489810785272_10b66.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://zhuanlan.zhihu.com/p/21444494" target="_blank" rel="external">JAVA IO输入、输出</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-perry-io/index.html" target="_blank" rel="external">IBM:IO</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/io/streams.html" target="_blank" rel="external">IO官方教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一直以来对JAVA IO这一块都很陌生，最近接触的项目涉及到这一块，因为不熟悉所以做起来稍微花了点时间，这一节，主要学习&lt;code&gt;JAVA
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Maven依赖的有效范围</title>
    <link href="http://jianwl.com/2017/03/16/Maven%E4%BE%9D%E8%B5%96%E7%9A%84%E6%9C%89%E6%95%88%E8%8C%83%E5%9B%B4/"/>
    <id>http://jianwl.com/2017/03/16/Maven依赖的有效范围/</id>
    <published>2017-03-16T15:14:48.000Z</published>
    <updated>2017-03-16T15:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Maven项目中某些依赖，只需要在编译阶段有效，运行时不需要该依赖，该如何配置？之前对依赖的有效范围的配置理解的很模糊，这一节主要来学习Maven依赖的有效范围配置。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>声明一个依赖可以包含以下元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</div><div class="line">	&lt;type&gt;jar&lt;/type&gt;</div><div class="line">	&lt;optional&gt;true&lt;/optional&gt;</div><div class="line">	&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">	&lt;exclusions&gt;</div><div class="line">		&lt;exclusion&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">		&lt;/exclusion&gt;</div><div class="line">	&lt;/exclusions&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>groupId、artifactId、version：依赖的基本坐标</p>
<p>type: 依赖的类型</p>
<p>optional:标记依赖是否可选</p>
<p>exclusions: 用来排除传递性依赖</p>
<p>scope: 依赖的有效范围</p>
<table>
<thead>
<tr>
<th style="text-align:center">依赖范围</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">compile</td>
<td style="text-align:center">没有指定默认依赖范围，对于编译、测试、运行三种classpath都有效</td>
<td style="text-align:center">大部分依赖</td>
</tr>
<tr>
<td style="text-align:center">test</td>
<td style="text-align:center">只对测试classpath有效</td>
<td style="text-align:center">测试依赖</td>
</tr>
<tr>
<td style="text-align:center">provided</td>
<td style="text-align:center">对于编译和测试classpath均有效，运行时无效</td>
<td style="text-align:center">servlet-api，编译和测试项目时需要该依赖，运行时无效，因为运行时容器已提供该依赖</td>
</tr>
<tr>
<td style="text-align:center">runtime</td>
<td style="text-align:center">对测试和运行classpath有效，编译主代码时无效</td>
<td style="text-align:center">JDBC驱动实现，项目主代码的编译主需要JDK提供的接口，只有在测试或者运行时才需要实现上述接口的具体JDBC驱动</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Maven实战</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Maven项目中某些依赖，只需要在编译阶段有效，运行时不需要该依赖，该如何配置？之前对依赖的有效范围的配置理解的很模糊，这一节主要来学习Ma
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本基本功</title>
    <link href="http://jianwl.com/2017/03/15/Shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    <id>http://jianwl.com/2017/03/15/Shell脚本基本功/</id>
    <published>2017-03-15T15:49:16.000Z</published>
    <updated>2017-03-16T03:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节主要介绍Shell常用的命令和语法，这个章节会持续更新，<a href="http://git.oschina.net/shuangziliuyun/shell" target="_blank" rel="external">本节练习脚本请查看GIT</a></p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-数值比较"><a href="#1-数值比较" class="headerlink" title="1. 数值比较"></a>1. 数值比较</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/94282744-file_1489584983851_14e8a.png" alt=""></p>
<p>数字比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>n1 -eq n2</td>
<td>n1是否与n2相等</td>
</tr>
<tr>
<td>n1 -ge n2</td>
<td>n1是否大于或等于n2</td>
</tr>
<tr>
<td>n1 -gt n2</td>
<td>n1是否大于n2</td>
</tr>
<tr>
<td>n1 -le n2</td>
<td>n1是否小于或等于n2</td>
</tr>
<tr>
<td>n1 -lt n2</td>
<td>n1是否小于n2</td>
</tr>
<tr>
<td>n1 -ne n2</td>
<td>n1是否不等于n2</td>
</tr>
</tbody>
</table>
<p>字符串比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>str1 = str2</td>
<td>str1和str2相同</td>
</tr>
<tr>
<td>str1 != str2</td>
<td>str1和str2不相等</td>
</tr>
<tr>
<td>str1 &lt; str2</td>
<td>str1是否比str2小</td>
</tr>
<tr>
<td>str1 &gt; str2</td>
<td>str1是否比str2大</td>
</tr>
<tr>
<td>-n str1</td>
<td>str1的长度是否非0</td>
</tr>
<tr>
<td>-z str1</td>
<td>str2的长度是否为0</td>
</tr>
</tbody>
</table>
<h4 id="2-文件比较"><a href="#2-文件比较" class="headerlink" title="2. 文件比较"></a>2. 文件比较</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/5842677-file_1489586826777_16d8c.png" alt=""></p>
<p>文件比较</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d file</td>
<td>file是否存在并是一个目录</td>
</tr>
<tr>
<td>-e file</td>
<td>file是否存在</td>
</tr>
<tr>
<td>-f file</td>
<td>file是否存在并是个文件</td>
</tr>
<tr>
<td>-r file</td>
<td>file是否存在并可读</td>
</tr>
<tr>
<td>-s file</td>
<td>file是否存在并非空</td>
</tr>
<tr>
<td>-w file</td>
<td>file是否存在并可写</td>
</tr>
<tr>
<td>-x file</td>
<td>file是否存在并可执行</td>
</tr>
<tr>
<td>-O file</td>
<td>file是否存在并属当前用户所有</td>
</tr>
<tr>
<td>-G file</td>
<td>file是否存在并且默认组与当前用户相同</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>file1是否比file2新</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>file1是否比file2旧</td>
</tr>
</tbody>
</table>
<h4 id="3-for命令"><a href="#3-for命令" class="headerlink" title="3. for命令"></a>3. for命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/79683869-file_1489587635186_1b43.png" alt=""></p>
<h4 id="4-修改分割符"><a href="#4-修改分割符" class="headerlink" title="4. 修改分割符"></a>4. 修改分割符</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/21867516-file_1489588386921_5740.png" alt=""></p>
<table>
<thead>
<tr>
<th>分割符设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>IFS=<code>$&#39;\n&#39;</code></td>
<td>设置换行符为分隔符</td>
</tr>
<tr>
<td>IFS=<code>$&#39;\n:;&quot;&#39;</code></td>
<td>设置换行符、冒号、分好、双引号为分隔符</td>
</tr>
</tbody>
</table>
<h4 id="5-while命令"><a href="#5-while命令" class="headerlink" title="5. while命令"></a>5. while命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/34656202-file_1489588951940_12c28.png" alt=""></p>
<h4 id="6-continue命令"><a href="#6-continue命令" class="headerlink" title="6. continue命令"></a>6. continue命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/19067708-file_1489589502995_10596.png" alt=""></p>
<h4 id="7-case命令"><a href="#7-case命令" class="headerlink" title="7. case命令"></a>7. case命令</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/50152327-file_1489591476267_3699.png" alt=""></p>
<h4 id="8-创建函数"><a href="#8-创建函数" class="headerlink" title="8. 创建函数"></a>8. 创建函数</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/31595596-file_1489590492602_f1cf.png" alt=""></p>
<p>bash shell会把函数当做小型脚本，运行结束时会返回一个退出状态码,用<code>$?</code>判断程序的运行状态。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>命令成功结束 </td>
</tr>
<tr>
<td>1</td>
<td>通用未知错误</td>
</tr>
<tr>
<td>2</td>
<td>误用shell命令</td>
</tr>
<tr>
<td>126</td>
<td>命令不可执行</td>
</tr>
</tbody>
</table>
<p>…</p>
<h4 id="9、特殊参数变量"><a href="#9、特殊参数变量" class="headerlink" title="9、特殊参数变量"></a>9、特殊参数变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`$0` 读取程序名</div><div class="line">`$#` 命令行参数个数</div><div class="line">`$&#123;!#&#125;` 最后一个参数值</div><div class="line">`$*` 单个变量中存储所有的命令行参数</div><div class="line">`$@` 单个变量中存储所有的命令行参数</div></pre></td></tr></table></figure>
<p> <code>params.sh</code></p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/19213513-file_1489592788517_3396.png" alt=""></p>
<p> 运行：</p>
<p> <img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-15/3625461-file_1489592376768_13f93.png" alt=""></p>
<p> 特别注意：<code>“$*”</code>变量会将所有参数当做单个参数，<code>“$@”</code>会单独处理每个参数;而<code>$*</code>变量和<code>$@</code>变量均会将所有参数当做单个参数。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.Linux命令行与Shell脚本编程大全</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本节主要介绍Shell常用的命令和语法，这个章节会持续更新，&lt;a href=&quot;http://git.oschina.net/shuangzi
    
    </summary>
    
      <category term="Shell" scheme="http://jianwl.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://jianwl.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Python操作MYSQL数据库</title>
    <link href="http://jianwl.com/2017/03/12/Python%E6%93%8D%E4%BD%9CMYSQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://jianwl.com/2017/03/12/Python操作MYSQL数据库/</id>
    <published>2017-03-12T15:20:55.000Z</published>
    <updated>2017-03-12T15:33:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Python操作MySQL数据库是入门必须要掌握的技能，这节主要学习Python对MYSQL的增删改查操作。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装Python-MySQL</div><div class="line">pip install MySQL-python</div></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><code>mysql_test.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"># -*- coding: UTF-8 -*-</div><div class="line"></div><div class="line">import MySQLdb</div><div class="line"></div><div class="line"></div><div class="line">def init_db():</div><div class="line">    return MySQLdb.connect(&quot;localhost&quot;, &quot;root&quot;, &apos;&apos;, &quot;dada&quot;)</div><div class="line"></div><div class="line"></div><div class="line">def create(db):</div><div class="line">    print &quot;========= create start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;&quot;&quot;CREATE TABLE EMPLOYEE (</div><div class="line">                     FIRST_NAME  CHAR(20) NOT NULL,</div><div class="line">                     LAST_NAME  CHAR(20),</div><div class="line">                     AGE INT,</div><div class="line">                     SEX CHAR(1),</div><div class="line">                     INCOME FLOAT )&quot;&quot;&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        print &quot;========= create end==========&quot;</div><div class="line">    except:</div><div class="line">        print &quot;Error: unable to create table&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def select(db):</div><div class="line">    cursor = db.cursor()</div><div class="line">    sql = &quot;SELECT * FROM EMPLOYEE \</div><div class="line">           WHERE INCOME &gt; &apos;%d&apos;&quot; % (1000)</div><div class="line"></div><div class="line">    try:</div><div class="line">        print &quot;========= select start==========&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        results = cursor.fetchall()</div><div class="line">        for row in results:</div><div class="line">            fname = row[0]</div><div class="line">            lname = row[1]</div><div class="line">            age = row[2]</div><div class="line">            sex = row[3]</div><div class="line">            income = row[4]</div><div class="line">            # 打印结果</div><div class="line">            print &quot;fname=%s,lname=%s,age=%d,sex=%s,income=%d&quot; % \</div><div class="line">                  (fname, lname, age, sex, income)</div><div class="line">        print &quot;========= select end==========&quot;</div><div class="line"></div><div class="line">    except:</div><div class="line">        print &quot;Error: unable to fecth data&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def save(db):</div><div class="line">    print &quot;========= save start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">    	 # 三引号可输入多行文本</div><div class="line">        sql = &quot;&quot;&quot;INSERT INTO EMPLOYEE(FIRST_NAME,</div><div class="line">         LAST_NAME, AGE, SEX, INCOME)</div><div class="line">         VALUES (&apos;Mac&apos;, &apos;Mohan&apos;, 20, &apos;M&apos;, 2000)&quot;&quot;&quot;</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= save end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def update(db):</div><div class="line">    print &quot;========= update start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = &apos;%c&apos;&quot; % (&apos;M&apos;)</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= update end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line">def delete(db):</div><div class="line">    print &quot;========= delete start==========&quot;</div><div class="line">    cursor = db.cursor()</div><div class="line">    try:</div><div class="line">        sql = &quot;DELETE FROM EMPLOYEE WHERE AGE &gt; &apos;%d&apos;&quot; % (20)</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">        print &quot;========= delete end==========&quot;</div><div class="line">    except:</div><div class="line">        db.rollback()</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    # 初始化db</div><div class="line">    db = init_db()</div><div class="line"></div><div class="line">    # 保存一条记录</div><div class="line">    save(db)</div><div class="line"></div><div class="line">    # 查看记录</div><div class="line">    select(db)</div><div class="line"></div><div class="line">    # 修改记录</div><div class="line">    update(db)</div><div class="line"></div><div class="line">    # 查看修改后的记录</div><div class="line">    select(db)</div><div class="line"></div><div class="line">    # 删除记录</div><div class="line">    delete(db)</div><div class="line"></div><div class="line">    # 查看删除后的记录</div><div class="line">    select(db)</div></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python mysql_test.py</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/23315645-file_1489332690876_12b7e.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Python操作MySQL数据库是入门必须要掌握的技能，这节主要学习Python对MYSQL的增删改查操作。&lt;/p&gt;
&lt;h3 id=&quot;环境准
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之字典</title>
    <link href="http://jianwl.com/2017/03/11/Python%E4%B9%8B%E5%AD%97%E5%85%B8/"/>
    <id>http://jianwl.com/2017/03/11/Python之字典/</id>
    <published>2017-03-11T10:20:08.000Z</published>
    <updated>2017-03-12T03:24:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>字典是Python中唯一内建的映射类型，构造字典的目的是通过某个特定的键，轻松找到其对应的值。</p>
<h3 id="初始化字典"><a href="#初始化字典" class="headerlink" title="初始化字典"></a>初始化字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = dict(one=1, two=2, three=3)</div><div class="line">b = &#123;&apos;one&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3&#125;</div><div class="line">c = dict(zip([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;], [1, 2, 3]))</div><div class="line">d = dict([(&apos;two&apos;, 2), (&apos;one&apos;, 1), (&apos;three&apos;, 3)])</div><div class="line">e = dict(&#123;&apos;three&apos;: 3, &apos;one&apos;: 1, &apos;two&apos;: 2&#125;)</div><div class="line">a == b == c == d == e</div></pre></td></tr></table></figure>
<h3 id="字典基本操作"><a href="#字典基本操作" class="headerlink" title="字典基本操作"></a>字典基本操作</h3><p>字典的基本操作包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">字典常用方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">len(d)</td>
<td style="text-align:center">返回d中键值对的数量</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">d[k]</td>
<td style="text-align:center">返回关联到键k上的值</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">d[k] = v</td>
<td style="text-align:center">将值v关联到键k上</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">del d[k]</td>
<td style="text-align:center">删除键为k的项</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">k in d</td>
<td style="text-align:center">检查d中是否有含有键为k的项</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">clear</td>
<td style="text-align:center">清除字典中所有的项</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">copy</td>
<td style="text-align:center">返回一个具有相同键值对的字典</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">fromkeys</td>
<td style="text-align:center">使用给定的键建立新字典，每个键对应一个默认值None</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">get</td>
<td style="text-align:center">获取字典项，若不存在该键，会出错</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">has_key</td>
<td style="text-align:center">检查字典中是否含有特定的键</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">items、iteritems</td>
<td style="text-align:center">将字典所有项以列表方式返回</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">keys、iterkeys</td>
<td style="text-align:center">将字典所有的键以列表方式返回</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">pop</td>
<td style="text-align:center">获取给定键值，并建这个键值对从字典中删除</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">popitems</td>
<td style="text-align:center">弹出<strong>随机</strong>的项</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">setdefault</td>
<td style="text-align:center">设置键的值，若键存在，返回该键位的值，否则，为该键设置值</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">update</td>
<td style="text-align:center">利用一个字典，更新另外一个字典</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">values、itervaues</td>
<td style="text-align:center">将字典中所有的值以列表方式返回</td>
</tr>
</tbody>
</table>
<h4 id="1）len"><a href="#1）len" class="headerlink" title="1）len"></a>1）len</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/51156140-file_1489285794306_25da.png" alt=""></p>
<h4 id="2-d-k"><a href="#2-d-k" class="headerlink" title="2) d[k]"></a>2) d[k]</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/30802879-file_1489285860276_3fd1.png" alt=""></p>
<h4 id="3-d-k-v"><a href="#3-d-k-v" class="headerlink" title="3) d[k] = v"></a>3) d[k] = v</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/62014407-file_1489285908551_1509c.png" alt=""></p>
<h4 id="4-del-d-k"><a href="#4-del-d-k" class="headerlink" title="4) del d[k]"></a>4) del d[k]</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/62540962-file_1489285964580_1059.png" alt=""></p>
<h4 id="5-k-in-d"><a href="#5-k-in-d" class="headerlink" title="5) k in d"></a>5) k in d</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/99042578-file_1489286045292_15b09.png" alt=""></p>
<h4 id="6-clear"><a href="#6-clear" class="headerlink" title="6) clear"></a>6) clear</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/19340560-file_1489286089117_15e4f.png" alt=""></p>
<h4 id="7-copy"><a href="#7-copy" class="headerlink" title="7) copy"></a>7) copy</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/1088979-file_1489286221891_a032.png" alt=""></p>
<h4 id="8-fromkeys"><a href="#8-fromkeys" class="headerlink" title="8) fromkeys"></a>8) fromkeys</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/11813325-file_1489286328979_137e.png" alt=""></p>
<h4 id="9-get"><a href="#9-get" class="headerlink" title="9) get"></a>9) get</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/62310043-file_1489286393838_46f1.png" alt=""></p>
<h4 id="10-has-key"><a href="#10-has-key" class="headerlink" title="10) has_key"></a>10) has_key</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/29896375-file_1489286444406_54ba.png" alt=""></p>
<h4 id="11-items、iteritems"><a href="#11-items、iteritems" class="headerlink" title="11) items、iteritems"></a>11) items、iteritems</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/67390503-file_1489286499089_aec8.png" alt=""></p>
<h4 id="12-keys、iterkeys"><a href="#12-keys、iterkeys" class="headerlink" title="12) keys、iterkeys"></a>12) keys、iterkeys</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/10181597-file_1489286546021_4e01.png" alt=""></p>
<h4 id="13-pop"><a href="#13-pop" class="headerlink" title="13) pop"></a>13) pop</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/57529412-file_1489286599806_163f5.png" alt=""></p>
<h4 id="14-popitems"><a href="#14-popitems" class="headerlink" title="14) popitems"></a>14) popitems</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/26922130-file_1489286675036_b62b.png" alt=""></p>
<h4 id="15-setdefault"><a href="#15-setdefault" class="headerlink" title="15) setdefault"></a>15) setdefault</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/96093454-file_1489286800270_298b.png" alt=""></p>
<h4 id="16）update"><a href="#16）update" class="headerlink" title="16）update"></a>16）update</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/5491167-file_1489286924873_d5e3.png" alt=""></p>
<h4 id="17-values"><a href="#17-values" class="headerlink" title="17) values"></a>17) values</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-12/5253501-file_1489286967576_e7bf.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Python基础教程</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;字典是Python中唯一内建的映射类型，构造字典的目的是通过某个特定的键，轻松找到其对应的值。&lt;/p&gt;
&lt;h3 id=&quot;初始化字典&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之列表和元组</title>
    <link href="http://jianwl.com/2017/03/11/Python%E4%B9%8B%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/"/>
    <id>http://jianwl.com/2017/03/11/Python之列表和元组/</id>
    <published>2017-03-11T09:36:43.000Z</published>
    <updated>2017-03-11T09:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Python包含6种内建的序列：列表、元组、字符串、Unicode字符串、buffer对象、xrange对象，这节主要来学习列表和元组。<strong>列表和元组的区别在于，列表可以修改，元组不可以。</strong></p>
<h3 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h3><p>所有序列类型都可以进行这些操作：索引、分片、加、乘、以及检查某个元素是否属于该序列的成员、序列长度、找出最大元素、最小元素。</p>
<h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1) 索引"></a>1) 索引</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/14523041-file_1489217087380_3e78.png" alt=""></p>
<h4 id="2-分片"><a href="#2-分片" class="headerlink" title="2) 分片"></a>2) 分片</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/86520910-file_1489217253044_6475.png" alt=""></p>
<p>获取最后三个元素：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/2981895-file_1489217362541_2232.png" alt=""></p>
<p>更大步长：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/81377151-file_1489217450167_8f65.png" alt=""></p>
<h4 id="3-加"><a href="#3-加" class="headerlink" title="3) 加"></a>3) 加</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/55587129-file_1489217507183_666e.png" alt=""></p>
<h4 id="4-乘"><a href="#4-乘" class="headerlink" title="4) 乘"></a>4) 乘</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/63363847-file_1489217608021_1294.png" alt=""></p>
<h4 id="5-长度、最大值、最小值"><a href="#5-长度、最大值、最小值" class="headerlink" title="5) 长度、最大值、最小值"></a>5) 长度、最大值、最小值</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/65898019-file_1489217734808_186c.png" alt=""></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表除了适用序列的标准操作方法，本节还会介绍一些可以改变列表的方法：元素赋值、元素删除、分片赋值、以及列表方法</p>
<h4 id="1）改变列表元素"><a href="#1）改变列表元素" class="headerlink" title="1）改变列表元素"></a>1）改变列表元素</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/39445538-file_1489218070573_559e.png" alt=""></p>
<h4 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2) 删除元素"></a>2) 删除元素</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/83266752-file_1489218148529_12224.png" alt=""></p>
<h4 id="3-分片赋值"><a href="#3-分片赋值" class="headerlink" title="3) 分片赋值"></a>3) 分片赋值</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/68678272-file_1489218225510_75a7.png" alt=""></p>
<h4 id="4-列表方法"><a href="#4-列表方法" class="headerlink" title="4) 列表方法"></a>4) 列表方法</h4><p>4.1) <code>append</code> 列表末尾追加元素</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/63479534-file_1489218330479_b5b6.png" alt=""></p>
<p>4.2) <code>count</code> 统计某个元素在列表中出现的次数</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/33437808-file_1489218501030_e517.png" alt=""></p>
<p>4.3) <code>extend</code> 在列表后，一次性追加新的一个列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/81047607-file_1489218616823_b8c0.png" alt=""></p>
<p>4.4) <code>index</code> 从列表中找出某个值，第一个匹配项的索引位置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/87902781-file_1489218827874_12817.png" alt=""></p>
<p>4.5) <code>insert</code> 将对象插入列表</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/87119013-file_1489218933650_15ae9.png" alt=""></p>
<p>4.6) <code>pop</code> 默认移除最后一个元素，并返回该元素的值</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/94076650-file_1489219047630_175f8.png" alt=""></p>
<p>4.7) <code>reverse</code> 将列表中的元素反向存放</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/46157796-file_1489219161800_1183d.png" alt=""></p>
<p>4.8) <code>sort</code> 对列表元素排序</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/97781689-file_1489219230515_13a99.png" alt=""></p>
<p>4.9) 高级排序</p>
<p>sort方法有两个可选的参数–key和reverse</p>
<p>a) <code>key</code> 根据函数，为每个元素创建一个键，然后根据键来排序；</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/32829610-file_1489219789896_8d71.png" alt=""></p>
<p>b）<code>reverse</code>，指明列表是否需要进行反序</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/99489690-file_1489219907483_ef90.png" alt=""></p>
<h3 id="元组：不可变序列"><a href="#元组：不可变序列" class="headerlink" title="元组：不可变序列"></a>元组：不可变序列</h3><p>元组与列表一样，也是一种序列，不同的是元组不能修改。</p>
<p>1）空元组</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/66845723-file_1489220816664_686a.png" alt=""></p>
<p>2) 单元素元组，—必须加个逗号</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/79464689-file_1489220865683_34a9.png" alt=""></p>
<p>3) 创建多元素元组</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/24763301-file_1489220747488_f833.png" alt=""></p>
<p>4) <code>tuple</code> 将一个序列转化为元组</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-3-11/85051282-file_1489220996689_13c72.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Python基础教程</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Python包含6种内建的序列：列表、元组、字符串、Unicode字符串、buffer对象、xrange对象，这节主要来学习列表和元组。&lt;s
    
    </summary>
    
      <category term="Python" scheme="http://jianwl.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jianwl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>React技术栈介绍</title>
    <link href="http://jianwl.com/2017/02/26/React%E6%8A%80%E6%9C%AF%E6%A0%88%E4%BB%8B%E7%BB%8D/"/>
    <id>http://jianwl.com/2017/02/26/React技术栈介绍/</id>
    <published>2017-02-26T10:21:12.000Z</published>
    <updated>2017-02-26T13:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React整个技术栈涉及到的技术非常多，零基础的人入门总是望而却步，几个月之前就想认真学习React技术栈一直拖延至今。最近会抽出大部分时间，好好研究React技术栈。这一节我们来学习React涉及到的技术栈。</p>
<h3 id="React技术栈"><a href="#React技术栈" class="headerlink" title="React技术栈"></a>React技术栈</h3><h4 id="1-React"><a href="#1-React" class="headerlink" title="1. React"></a>1. React</h4><p>React是一个声明式、高效、灵活的、创建用户界面的JavaScript库，让我们来逐一解读：</p>
<h5 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h5><p>使用React描述组件的样子就可以改变用户界面。传统方式是命令式地操作DOM，不仅需要记住大量的API，而且还会增加代码的耦合度，使得项目难以维护。React使用自己的魔法改变界面，让开发者最大限度地减少DOM交互，较低处理视图的难度。</p>
<h5 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h5><p>React高性能的Diff算法，让我们在刷新全部界面时只更新需要改变的那部分界面，其使用单向数据流改变界面，抛弃传统的数据绑定，减少了样板代码和重量。</p>
<h5 id="灵活"><a href="#灵活" class="headerlink" title="灵活"></a>灵活</h5><p>React作为视图层与其他技术栈配合使用，比如与Redux搭配等等。</p>
<h4 id="2-Redux"><a href="#2-Redux" class="headerlink" title="2. Redux"></a>2. Redux</h4><p>Redux是一个JavaScript状态容器，提供可预测的状态管理。Redux可以用三条基本准则来描述：单一数据源；state只读；使用纯函数来执行修改。</p>
<h5 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h5><p>整个应用的state被存储在一棵对象树中，并且这个对象树只存在唯一一个store中。这里的state指的是数据。</p>
<h5 id="state只读"><a href="#state只读" class="headerlink" title="state只读"></a>state只读</h5><p>不是无法改变state，这里的只读指的是不允许直接对state这个变量重写赋值，但可以通过action和reducer返回一个新的state，而且只能使用这一方法。</p>
<h5 id="使用纯函数来执行修改"><a href="#使用纯函数来执行修改" class="headerlink" title="使用纯函数来执行修改"></a>使用纯函数来执行修改</h5><p>更新state的reducer只是一些纯函数，它接收先前的state和action，并返回新的state。</p>
<p>了解以上规则后，或许你会问为什么要使用Redux?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">可预测： Redux只有一个数据源，想要修改它只能发起action，reducer又是纯函数，相同的输入永远会得到相同的输出。这一切使得程序运作变得可控、可预测。</div><div class="line"></div><div class="line">便于组织管理代码：严格而明确的程序结构是的代码更容易组织和管理，也方便团队协作。</div><div class="line"></div><div class="line">支持Universal渲染：单一数据源这一原则可以帮助解决Universal渲染中的数据传递问题，服务端渲染后只需给客户端传递一个变量即可，这个变量就是存储state的对象树。</div><div class="line"></div><div class="line">容易测试：编写可测试的代码，最重要的一条规则就是写单一功能的、没有外界依赖的小型函数。</div></pre></td></tr></table></figure>
<h4 id="3-Node与Universal渲染"><a href="#3-Node与Universal渲染" class="headerlink" title="3.Node与Universal渲染"></a>3.Node与Universal渲染</h4><p>React与Redux既可以在浏览器运行也可以在服务器端运行，这里的服务器端指的是Node服务器。</p>
<p>和传统Web服务器相比，Node更简单，它是单线程，与平台无关的，我们可以实现Universal渲染 – 用同一套代码在服务端和客户端渲染。</p>
<h4 id="4-Babel"><a href="#4-Babel" class="headerlink" title="4.Babel"></a>4.Babel</h4><p>Babel是一个JavaScript编译器，可以让开发者提前使用下一代的JavaScript。</p>
<h4 id="5-Webpack"><a href="#5-Webpack" class="headerlink" title="5.Webpack"></a>5.Webpack</h4><p>Webpack是当下最热门的前端资源模块化管理和打包工具，它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。通过加载器(loader)的转换，任何形式的资源都可以视作模块，比如CommonJS模块、AMD模块、ES2015模块、CSS、图片、JSON、LESS、Coffeescript等等。</p>
<p>Webpack主要功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">编译、加载使用ES2015和JSX语法的模块</div><div class="line">实现开发服务器与热替换</div><div class="line">加载图片文件</div><div class="line">加载字体文件</div><div class="line">加载样式文件</div><div class="line">加载JSON文件</div><div class="line">视同同构工具实现同构渲染</div><div class="line">压缩代码</div><div class="line">哈希命名</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.React与Redux开发实例精解</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;React整个技术栈涉及到的技术非常多，零基础的人入门总是望而却步，几个月之前就想认真学习React技术栈一直拖延至今。最近会抽出大部分时间
    
    </summary>
    
      <category term="React" scheme="http://jianwl.com/categories/React/"/>
    
    
      <category term="React" scheme="http://jianwl.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ES6之SET、Map数据结构</title>
    <link href="http://jianwl.com/2017/02/26/ES6%E4%B9%8BSET%E3%80%81Map%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://jianwl.com/2017/02/26/ES6之SET、Map数据结构/</id>
    <published>2017-02-26T05:12:31.000Z</published>
    <updated>2017-02-26T09:22:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一节我们来学习在工作中最常用的两个数据结构<code>Set</code>和<code>Map</code>，介绍两种数据结构的基本用法。</p>
<h3 id="SET实战"><a href="#SET实战" class="headerlink" title="SET实战"></a>SET实战</h3><p>定义：类似于数组，但成员都是唯一，没有重复的</p>
<h4 id="1-初始化SET"><a href="#1-初始化SET" class="headerlink" title="1. 初始化SET"></a>1. 初始化SET</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/27685484-file_1488086345162_a031.png" alt=""></p>
<h4 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2. 常用方法"></a>2. 常用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add : 新增某个成员</div><div class="line">delete: 删除某个成员</div><div class="line">has: 判断是否有该成员</div><div class="line">clear: 清楚所有成员</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/37263173-file_1488086504381_112f0.png" alt=""></p>
<h4 id="3-遍历"><a href="#3-遍历" class="headerlink" title="3. 遍历"></a>3. 遍历</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/3967547-file_1488086882638_3a52.png" alt=""></p>
<h3 id="MAP实战"><a href="#MAP实战" class="headerlink" title="MAP实战"></a>MAP实战</h3><p>定义：键值对的集合，ES6提供的<code>Map</code>数据结构的键的范围不限于字符串，各种类型的值(包括对象)都可以当作键</p>
<h4 id="1-初始化MAP"><a href="#1-初始化MAP" class="headerlink" title="1. 初始化MAP"></a>1. 初始化MAP</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/69357943-file_1488098923626_8f95.png" alt=""></p>
<h4 id="2-常用方法-1"><a href="#2-常用方法-1" class="headerlink" title="2. 常用方法"></a>2. 常用方法</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/8039268-file_1488099286728_504e.png" alt=""></p>
<h4 id="3-遍历-1"><a href="#3-遍历-1" class="headerlink" title="3. 遍历"></a>3. 遍历</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/86767862-file_1488100323638_7af1.png" alt=""></p>
<h4 id="4-Map转数组"><a href="#4-Map转数组" class="headerlink" title="4. Map转数组"></a>4. Map转数组</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-26/78684823-file_1488100481693_81a3.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>ES6标准入门 – 阮一峰</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这一节我们来学习在工作中最常用的两个数据结构&lt;code&gt;Set&lt;/code&gt;和&lt;code&gt;Map&lt;/code&gt;，介绍两种数据结构的基本用法。
    
    </summary>
    
      <category term="JavaScript" scheme="http://jianwl.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jianwl.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置Filter、Interceptor</title>
    <link href="http://jianwl.com/2017/02/25/SpringBoot%E9%85%8D%E7%BD%AEFilter%E3%80%81Interceptor/"/>
    <id>http://jianwl.com/2017/02/25/SpringBoot配置Filter、Interceptor/</id>
    <published>2017-02-25T01:45:53.000Z</published>
    <updated>2017-02-25T02:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SpringBoot自动配置的功能「加了EnableAutoConfiguration注解」，创建了一堆默认的配置，以前在web.xml中的配置，现在都可以通过Spring Bean的方式进行配置，由Spring进行生命周期的管理。本节主要来学习在SpringBoot中如何配置Filter,Interceptor。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1-RequestReplaceFilter，包装请求流，允许多次读"><a href="#1-RequestReplaceFilter，包装请求流，允许多次读" class="headerlink" title="1. RequestReplaceFilter，包装请求流，允许多次读"></a>1. RequestReplaceFilter，包装请求流，允许多次读</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">public class RequestReplaceFilter extends OncePerRequestFilter &#123;</div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</div><div class="line">        if (!(request instanceof CustomServletRequestWrapper)) &#123;</div><div class="line">            request = new CustomServletRequestWrapper(request);</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    class CustomServletRequestWrapper extends HttpServletRequestWrapper &#123;</div><div class="line">        private final byte[] body;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Construct a wrapper for the specified request.</div><div class="line">         *</div><div class="line">         * @param request The request to be wrapped</div><div class="line">         */</div><div class="line">        public CustomServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</div><div class="line">            super(request);</div><div class="line">            body = toByteArray(super.getInputStream());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public BufferedReader getReader() throws IOException &#123;</div><div class="line">            return new BufferedReader(new InputStreamReader(getInputStream()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public ServletInputStream getInputStream() throws IOException &#123;</div><div class="line">            return new RequestBodyCachingInputStream(body);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private class RequestBodyCachingInputStream extends ServletInputStream &#123;</div><div class="line">            private byte[] body;</div><div class="line">            private int lastIndexRetrieved = -1;</div><div class="line">            private ReadListener listener;</div><div class="line"></div><div class="line">            public RequestBodyCachingInputStream(byte[] body) &#123;</div><div class="line">                this.body = body;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public int read() throws IOException &#123;</div><div class="line">                if (isFinished()) &#123;</div><div class="line">                    return -1;</div><div class="line">                &#125;</div><div class="line">                int i = body[lastIndexRetrieved + 1];</div><div class="line">                lastIndexRetrieved++;</div><div class="line">                if (isFinished() &amp;&amp; listener != null) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        listener.onAllDataRead();</div><div class="line">                    &#125; catch (IOException e) &#123;</div><div class="line">                        listener.onError(e);</div><div class="line">                        throw e;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                return i;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean isFinished() &#123;</div><div class="line">                return lastIndexRetrieved == body.length - 1;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean isReady() &#123;</div><div class="line">                // This implementation will never block</div><div class="line">                // We also never need to call the readListener from this method, as this method will never return false</div><div class="line">                return isFinished();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void setReadListener(ReadListener listener) &#123;</div><div class="line">                if (listener == null) &#123;</div><div class="line">                    throw new IllegalArgumentException(&quot;listener cann not be null&quot;);</div><div class="line">                &#125;</div><div class="line">                if (this.listener != null) &#123;</div><div class="line">                    throw new IllegalArgumentException(&quot;listener has been set&quot;);</div><div class="line">                &#125;</div><div class="line">                this.listener = listener;</div><div class="line">                if (!isFinished()) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        listener.onAllDataRead();</div><div class="line">                    &#125; catch (IOException e) &#123;</div><div class="line">                        listener.onError(e);</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    try &#123;</div><div class="line">                        listener.onAllDataRead();</div><div class="line">                    &#125; catch (IOException e) &#123;</div><div class="line">                        listener.onError(e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public int available() throws IOException &#123;</div><div class="line">                return body.length - lastIndexRetrieved - 1;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void close() throws IOException &#123;</div><div class="line">                lastIndexRetrieved = body.length - 1;</div><div class="line">                body = null;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-SignInterceptor-签名验证拦截器"><a href="#2-SignInterceptor-签名验证拦截器" class="headerlink" title="2. SignInterceptor 签名验证拦截器"></a>2. SignInterceptor 签名验证拦截器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class SignInterceptor extends HandlerInterceptorAdapter &#123;</div><div class="line">    @Override</div><div class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</div><div class="line"></div><div class="line">        String reqHash = request.getHeader(AppHeaders.VERIFICATION_HASH);</div><div class="line">        Map&lt;String, String[]&gt; reqParameterMap = request.getParameterMap();</div><div class="line"></div><div class="line">        log.info(&quot;Request-Url =&gt; &quot; + request.getRequestURL());</div><div class="line">        log.info(&quot;Request-Hash =&gt; &quot; + reqHash);</div><div class="line">        log.info(&quot;Request-params =&gt; &quot; + JSON.toJSONString(reqParameterMap));</div><div class="line"></div><div class="line">        if (StringUtils.isNotEmpty(reqHash)) &#123;</div><div class="line">            if (ApiConstants.NO_CHECK_SIGN_HASH.contains(reqHash)) &#123;</div><div class="line">                log.info(&quot;hash pass&quot;);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Object[] key_arr = reqParameterMap.keySet().toArray();</div><div class="line">            Arrays.sort(key_arr);</div><div class="line">            StringBuilder str = new StringBuilder();</div><div class="line">            for (Object key : key_arr) &#123;</div><div class="line">                String[] values = reqParameterMap.get(key);</div><div class="line">                str.append(key).append(&quot;=&quot;).append(values[values.length - 1]).append(&quot;&amp;&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            String paramStr = str.toString();</div><div class="line">            if (StringUtils.isNotBlank(paramStr)) &#123;</div><div class="line">                paramStr = paramStr.substring(0, paramStr.length() - 1);</div><div class="line">            &#125;</div><div class="line">            log.info(&quot;Server Md5 str =&gt; &quot; + paramStr);</div><div class="line"></div><div class="line">            String serverHash = DigestUtils.md5Hex(paramStr + SaltKeys.BDMS_API_SALT.getKey());</div><div class="line">            log.info(&quot;Server md5 hash =&gt; &quot; + serverHash);</div><div class="line">            if (reqHash.equals(serverHash)) &#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</div><div class="line">        response.getWriter().write(</div><div class="line">                JSON.toJSONString(ApiResponse.failed(ErrorCode.SIGN_ERROR))</div><div class="line">        );</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-注册拦截器、过滤器-amp-配置拦截器、过滤器的路径"><a href="#3-注册拦截器、过滤器-amp-配置拦截器、过滤器的路径" class="headerlink" title="3. 注册拦截器、过滤器 &amp; 配置拦截器、过滤器的路径"></a>3. 注册拦截器、过滤器 &amp; 配置拦截器、过滤器的路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class FilterRegister extends WebMvcConfigurerAdapter &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</div><div class="line">        // 签名校验</div><div class="line">        registry.addInterceptor(new SignInterceptor())</div><div class="line">        .addPathPatterns(&quot;/**&quot;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Bean</div><div class="line">    public FilterRegistrationBean getRequestFilter()&#123;</div><div class="line">        RequestReplaceFilter filter = new RequestReplaceFilter();</div><div class="line">        FilterRegistrationBean registrationBean = new FilterRegistrationBean();</div><div class="line">        registrationBean.setFilter(filter);</div><div class="line">        List&lt;String&gt; urlPatterns = new ArrayList&lt;&gt;();</div><div class="line">        urlPatterns.add(&quot;/*&quot;);</div><div class="line">        registrationBean.setUrlPatterns(urlPatterns);</div><div class="line">        registrationBean.setOrder(1);</div><div class="line">        return registrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;SpringBoot自动配置的功能「加了EnableAutoConfiguration注解」，创建了一堆默认的配置，以前在web.xml中的
    
    </summary>
    
      <category term="SpringBoot" scheme="http://jianwl.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://jianwl.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议详解</title>
    <link href="http://jianwl.com/2017/02/23/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jianwl.com/2017/02/23/HTTP协议详解/</id>
    <published>2017-02-23T15:09:21.000Z</published>
    <updated>2017-02-25T01:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们日常生活中经常会使用浏览器访问Web站点，但大家有思考过在这个过程中到底发生了什么吗？为什么我们在浏览器上输入要访问的URL就可以访问Web页面呢？</p>
<p>当我们在浏览器地址栏上输入要访问的URL后，浏览器会分析出URL上的域名，然后通过NDS服务器查询出域名映射的IP地址，浏览器根据查询到的IP地址与Web服务器进行通信，而<strong>通信的协议就是HTTP协议。</strong></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-25/53842035-file_1487985982597_a3ff.png" alt=""></p>
<p>浏览器与Web服务器使用HTTP协议进行通信，接下来我们会详细介绍HTTP协议的相关知识。</p>
<h3 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h3><p>HTTP协议交互的信息称为HTTP报文，请求端的HTTP报文称为请求报文，响应端的被称为响应报文。</p>
<h4 id="1-报文结构"><a href="#1-报文结构" class="headerlink" title="1.报文结构"></a>1.报文结构</h4><p>HTTP报文大致分为报文首部和报文主体两部分，两者由最初出现的空行来划分。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/63335022-file_1487776806455_14596.png" alt=""></p>
<h4 id="2-请求报文结构"><a href="#2-请求报文结构" class="headerlink" title="2.请求报文结构"></a>2.请求报文结构</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/18159996-file_1487777311008_1c4d.png" alt=""></p>
<p>举个例子：<br><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/94747527-file_1487777973466_aaae.png" alt=""></p>
<h4 id="3-响应报文结构"><a href="#3-响应报文结构" class="headerlink" title="3.响应报文结构"></a>3.响应报文结构</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/73324972-file_1487777733759_13411.png" alt=""></p>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-22/50444905-file_1487777764748_115e3.png" alt=""></p>
<h3 id="HTTP首部字段"><a href="#HTTP首部字段" class="headerlink" title="HTTP首部字段"></a>HTTP首部字段</h3><h4 id="1-通用首部字段"><a href="#1-通用首部字段" class="headerlink" title="1.通用首部字段"></a>1.通用首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Cache-Control</td>
<td style="text-align:center">控制缓存的行为</td>
</tr>
<tr>
<td style="text-align:center">Connection</td>
<td style="text-align:center">逐跳首部、连接的管理</td>
</tr>
<tr>
<td style="text-align:center">Date</td>
<td style="text-align:center">创建报文的日期时间</td>
</tr>
<tr>
<td style="text-align:center">Pragma</td>
<td style="text-align:center">报文指令</td>
</tr>
<tr>
<td style="text-align:center">Trailer</td>
<td style="text-align:center">报文末端的首部一览</td>
</tr>
<tr>
<td style="text-align:center">Transfer-Encoding</td>
<td style="text-align:center">指定报文主体的<strong>传输编码方式</strong></td>
</tr>
<tr>
<td style="text-align:center">Upgrade</td>
<td style="text-align:center">升级为其他协议</td>
</tr>
<tr>
<td style="text-align:center">Via</td>
<td style="text-align:center">代理服务器的相关信息</td>
</tr>
<tr>
<td style="text-align:center">Warning</td>
<td style="text-align:center">错误通知</td>
</tr>
</tbody>
</table>
<h4 id="2-请求首部字段"><a href="#2-请求首部字段" class="headerlink" title="2.请求首部字段"></a>2.请求首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept</td>
<td style="text-align:center">用户代理可处理的媒体类型</td>
</tr>
<tr>
<td style="text-align:center">Accept-Charset</td>
<td style="text-align:center">优先的字符集</td>
</tr>
<tr>
<td style="text-align:center">Accept-Encoding</td>
<td style="text-align:center">优先的内容编码</td>
</tr>
<tr>
<td style="text-align:center">Accept-Language</td>
<td style="text-align:center">优先的语言</td>
</tr>
<tr>
<td style="text-align:center">Authorization</td>
<td style="text-align:center">Web认证信息</td>
</tr>
<tr>
<td style="text-align:center">Expect</td>
<td style="text-align:center">期待服务器的特定行为</td>
</tr>
<tr>
<td style="text-align:center">From</td>
<td style="text-align:center">用户的电子邮箱地址</td>
</tr>
<tr>
<td style="text-align:center">Host</td>
<td style="text-align:center">请求资源所在服务器</td>
</tr>
<tr>
<td style="text-align:center">If-Match</td>
<td style="text-align:center">比较实体标记ETag</td>
</tr>
<tr>
<td style="text-align:center">If-Modified-Since</td>
<td style="text-align:center">比较资源的更新时间</td>
</tr>
<tr>
<td style="text-align:center">If-None-Match</td>
<td style="text-align:center">比较实体标记（与If-Match相反）</td>
</tr>
<tr>
<td style="text-align:center">If-Range</td>
<td style="text-align:center">资源未更新时发送实体Byte的范围请求</td>
</tr>
<tr>
<td style="text-align:center">If-Unmodified-Since</td>
<td style="text-align:center">比较资源的更新时间 （与If-Modified-Since相反）</td>
</tr>
<tr>
<td style="text-align:center">Max-Forwards</td>
<td style="text-align:center">最大传输逐跳数</td>
</tr>
<tr>
<td style="text-align:center">Proxy-Authorization</td>
<td style="text-align:center">代理服务器要求客户端的认证信息</td>
</tr>
<tr>
<td style="text-align:center">Range</td>
<td style="text-align:center">实体的字节范围请求</td>
</tr>
<tr>
<td style="text-align:center">Referer</td>
<td style="text-align:center">对请求中URI的原始获取方</td>
</tr>
<tr>
<td style="text-align:center">TE</td>
<td style="text-align:center">传输编码的优先级</td>
</tr>
<tr>
<td style="text-align:center">User-Agent</td>
<td style="text-align:center">HTTP客户端程序的信息</td>
</tr>
</tbody>
</table>
<h4 id="3-响应首部字段"><a href="#3-响应首部字段" class="headerlink" title="3. 响应首部字段"></a>3. 响应首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept-Ranges</td>
<td style="text-align:center">是否接受字节范围请求</td>
</tr>
<tr>
<td style="text-align:center">Age</td>
<td style="text-align:center">推算资源创建经过时间</td>
</tr>
<tr>
<td style="text-align:center">ETag</td>
<td style="text-align:center">资源的匹配信息</td>
</tr>
<tr>
<td style="text-align:center">Location</td>
<td style="text-align:center">令客户端重定向至指定URI</td>
</tr>
<tr>
<td style="text-align:center">Proxy-Authenticate</td>
<td style="text-align:center">代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td style="text-align:center">Retry-After</td>
<td style="text-align:center">对再次发起请求的时机要求</td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center">HTTP服务器的安装信息</td>
</tr>
<tr>
<td style="text-align:center">Vary</td>
<td style="text-align:center">代理服务器缓存的管理信息</td>
</tr>
<tr>
<td style="text-align:center">WWW-Authenticate</td>
<td style="text-align:center">服务器对客户端的认证信息</td>
</tr>
</tbody>
</table>
<h4 id="4-实体首部字段"><a href="#4-实体首部字段" class="headerlink" title="4.实体首部字段"></a>4.实体首部字段</h4><table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Allow</td>
<td style="text-align:center">资源可支持的HTTP方法</td>
</tr>
<tr>
<td style="text-align:center">Content-Encoding</td>
<td style="text-align:center">实体主体适用的编码方式</td>
</tr>
<tr>
<td style="text-align:center">Content-Language</td>
<td style="text-align:center">实体主体的自然语言</td>
</tr>
<tr>
<td style="text-align:center">Content-Length</td>
<td style="text-align:center">实体主体的大小(单位：字节)</td>
</tr>
<tr>
<td style="text-align:center">Content-Location</td>
<td style="text-align:center">替代对应资源的URI</td>
</tr>
<tr>
<td style="text-align:center">Content-MD5</td>
<td style="text-align:center">实体主体的报文摘要</td>
</tr>
<tr>
<td style="text-align:center">Content-Range</td>
<td style="text-align:center">实体主体的位置范围</td>
</tr>
<tr>
<td style="text-align:center">Content-Type</td>
<td style="text-align:center">实体主体的媒体类型</td>
</tr>
<tr>
<td style="text-align:center">Expires</td>
<td style="text-align:center">实体主体的过期时间</td>
</tr>
<tr>
<td style="text-align:center">Last-Modified</td>
<td style="text-align:center">资源的最后修改日期时间</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>图解HTTP - 上野宣</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我们日常生活中经常会使用浏览器访问Web站点，但大家有思考过在这个过程中到底发生了什么吗？为什么我们在浏览器上输入要访问的URL就可以访问W
    
    </summary>
    
      <category term="HTTP" scheme="http://jianwl.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://jianwl.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP缓存机制</title>
    <link href="http://jianwl.com/2017/02/23/HTTP%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://jianwl.com/2017/02/23/HTTP缓存机制/</id>
    <published>2017-02-23T14:25:50.000Z</published>
    <updated>2017-02-23T16:00:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>HTTP缓存机制作为Web性能优化的重要手段，这一节我们主要来学习HTTP缓存，先贴出2道题，大家可以尝试解答下：</p>
<p>以下为<code>page.html</code>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">    &lt;title&gt;page页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</div><div class="line">    &lt;img src=&quot;images/head.png&quot; /&gt;</div><div class="line">    &lt;a href=&quot;page.html&quot;&gt;重新访问page页&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>首次访问该页面，页面中head.png响应头信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Cache-Control: no-cache</div><div class="line">Content-Type: image/png</div><div class="line">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</div><div class="line">Accept-Ranges: bytes</div><div class="line">Date: Thu, 10 Nov 2016 02:48:50 GMT</div><div class="line">Content-Length: 3534</div></pre></td></tr></table></figure>
<p><strong>问题1：</strong> 请问当点击<code>重新访问page页</code>链接重新加载该页面后，head.png如何二次加载？</p>
<p><strong>问题2：</strong>如果将上述信息中的Cache-Controller设置为private，那么结果又会如何呢？</p>
<p>以上2道题，如果你能答对，说明你已经对这些知识理解非常透彻了，否则请继续往下看。接下来我们将从系统化角度来讲讲HTTP缓存是如何协同工作的</p>
<h3 id="HTTP缓存体系"><a href="#HTTP缓存体系" class="headerlink" title="HTTP缓存体系"></a>HTTP缓存体系</h3><p>HTTP缓存体系分为以下三个部分：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-23/15685593-file_1487864473858_e48d.png" alt=""></p>
<h4 id="1-缓存存储策略"><a href="#1-缓存存储策略" class="headerlink" title="1. 缓存存储策略"></a>1. 缓存存储策略</h4><p>用来确定HTTP响应内容是否可以被客户端缓存，以及可以被哪些客户端存储，这个策略的作用只有一个，用于决定HTTP响应内容是否可缓存到客户端。</p>
<p>对于<code>Cache-Controller</code>里头的Public、Private、no-cache、max-age、no-store他们都是用来指明响应内容是否可以被客户端存储的，其中前4个都会缓存文件数据(关于no-cache应理解为不建议使用本地缓存，其仍然会缓存数据到本地)，后者no-store则不会在客户端缓存任何响应数据。</p>
<p>通过<code>Cache-Controller:</code>Public设置我们可以将HTTP响应数据存储到本地，但此时并不意味着后续浏览器会直接从缓存中读取数据并使用，为啥？因为它无法确定本地缓存的数据是否可用，还必须借助一套鉴别机制来确定才行，这就是我们下面将到的缓存过期策略</p>
<h4 id="2-缓存过期策略"><a href="#2-缓存过期策略" class="headerlink" title="2. 缓存过期策略"></a>2. 缓存过期策略</h4><p>客户端用来确认存储在本地的缓存数据是否过期，进而决定是否要发请求到服务端获取数据，这个策略的作用也只有一个，那就是决定客户端是否可直接从本地缓存数据中加载数据并展示，否则就发请求到服务器获取。</p>
<p>刚上面我们已阐述了数据缓存到了本地还需要经过判断才能使用，那么浏览器通过什么条件来判断呢？答案是<code>Expires</code>，Expires指名了缓存数据绝对时间，告诉客户端到这个时间点后本地缓存就作废了。</p>
<p>注意：<br>当Cache-Control: max-age=10 与 <code>Expires</code>同时存在时，后者会被覆盖掉；</p>
<h4 id="3-缓存对比策略"><a href="#3-缓存对比策略" class="headerlink" title="3. 缓存对比策略"></a>3. 缓存对比策略</h4><p>将缓存在客户端的数据标识发往服务端，服务端通过标识来判断客户端缓存数据是否仍有效，进而决定是否要重发数据。</p>
<p>客户端检查到数据过期或浏览器刷新后，往往会重新发起一个HTTP请求到服务器，服务器此时并不急于返回数据，而是按请求头有没有带标识(If-Modified-Since、If-None-Match)过来，如果判断标识仍然有效，则返回304告诉客户端取本地缓存数据来用即可(这里要注意的是你必须要在首次响应时输出相应的头信息(Last-Modified、ETags)到客户端。至此我们明白了上面所说的本地缓存数据即使被认为过期，并不等于数据从此没用的道理。</p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ" target="_blank" rel="external">HTTP缓存策略</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;HTTP缓存机制作为Web性能优化的重要手段，这一节我们主要来学习HTTP缓存，先贴出2道题，大家可以尝试解答下：&lt;/p&gt;
&lt;p&gt;以下为&lt;c
    
    </summary>
    
      <category term="HTTP" scheme="http://jianwl.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://jianwl.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Java8之不常用却很有用的知识点</title>
    <link href="http://jianwl.com/2017/02/21/Java8%E4%B9%8B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%B4%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://jianwl.com/2017/02/21/Java8之不常用却很有用的知识点/</id>
    <published>2017-02-21T06:07:13.000Z</published>
    <updated>2017-02-21T15:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="1-forEach-VS-forEachOrdered"><a href="#1-forEach-VS-forEachOrdered" class="headerlink" title="1. forEach VS forEachOrdered"></a>1. forEach VS forEachOrdered</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void test_005()&#123;</div><div class="line">    List&lt;String&gt; strs = Arrays.asList(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;);</div><div class="line">    strs.stream().parallel().forEach(str -&gt; System.out.println(&quot;forEach =&gt; &quot; + str));</div><div class="line">    strs.stream().parallel().forEachOrdered(str -&gt; System.out.println(&quot;forEachOrdered =&gt; &quot; + str));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>结果：</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/16-12-11/96792814-file_1481436578266_14fcc.png" alt=""></p>
<p><code>分析</code></p>
<p>并行处理数据时，<code>forEach</code>处理的数据是无序的，而<code>forEachOrdered</code>处理数据是按照输入流的顺序处理的。</p>
<h4 id="2-合并Map"><a href="#2-合并Map" class="headerlink" title="2. 合并Map"></a>2. 合并Map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@RunWith(JUnit4.class)</div><div class="line">public class BasicTest &#123;</div><div class="line">    /**</div><div class="line">     * 将sub合并至total,若在total中存在该键(key),则键值合并;</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void test_001()&#123;</div><div class="line">        Map&lt;String,List&lt;Integer&gt;&gt; total = Maps.newHashMap();</div><div class="line">        Map&lt;String,List&lt;Integer&gt;&gt; sub = Maps.newHashMap();</div><div class="line"></div><div class="line">        total.put(&quot;num1&quot;, Arrays.asList(1,2,3,4,11));</div><div class="line">        total.put(&quot;num2&quot;,Arrays.asList(1,2,3,4));</div><div class="line">        total.put(&quot;num3&quot;,Arrays.asList(1,2,3,4));</div><div class="line">        total.put(&quot;num4&quot;,Arrays.asList(1,2,3,4));</div><div class="line"></div><div class="line">        sub.put(&quot;num1&quot;,Arrays.asList(1,2,3,4,5,6,7));</div><div class="line">        sub.put(&quot;num2&quot;,Arrays.asList(1,2,3,4,4,5,6,7));</div><div class="line"></div><div class="line">        sub.keySet().forEach(key -&gt; total.merge(key,sub.get(key),(v1,v2) -&gt; Arrays.asList(v1,v2).stream().flatMap(Collection::stream).distinct().collect(Collectors.toList())));</div><div class="line"></div><div class="line">        System.out.println(&quot;total =&gt; &quot; + JSON.toJSONString(total));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-21/83737621-file_1487691562243_10db7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h3&gt;&lt;h4 id=&quot;1-forEach-VS-forEachOrdered&quot;&gt;&lt;a href=&quot;#1-forEach-VS-forEachOr
    
    </summary>
    
      <category term="JAVA" scheme="http://jianwl.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://jianwl.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>awk及sed简明教程</title>
    <link href="http://jianwl.com/2017/02/20/awk%E5%8F%8Ased%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>http://jianwl.com/2017/02/20/awk及sed简明教程/</id>
    <published>2017-02-20T15:32:05.000Z</published>
    <updated>2017-02-20T15:34:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://coolshell.cn/articles/9104.html" target="_blank" rel="external">SED简明教程 – 酷壳</a></li>
<li><a href="http://coolshell.cn/articles/9070.html" target="_blank" rel="external">AWK简明教程 – 酷壳</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://coolshell.cn/articles/9104.html&quot; target=
    
    </summary>
    
      <category term="Linux" scheme="http://jianwl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jianwl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB存储引擎之B+树索引内部实现</title>
    <link href="http://jianwl.com/2017/02/19/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BB-%E6%A0%91%E7%B4%A2%E5%BC%95%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/"/>
    <id>http://jianwl.com/2017/02/19/InnoDB存储引擎之B-树索引内部实现/</id>
    <published>2017-02-19T08:02:17.000Z</published>
    <updated>2017-02-19T14:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>B+</code>树索引是InnoDB最为常用和最为有效的索引，其构造类似于<code>二叉树</code>，<code>B+</code>树中的B代表的是平衡(balance)，因为<code>B+</code>树是从最早的平衡二叉树演化而来的。</p>
<p>在学习索引之前先介绍与之密切相关的一些算法与数据结构，有助于更好的理解B+树索引的工作方式。</p>
<h4 id="1-二分查找法"><a href="#1-二分查找法" class="headerlink" title="1. 二分查找法"></a>1. 二分查找法</h4><p>基本思想：先以<strong>有序数列</strong>的中点位置为比较对象，如果找的元素值小于该中点元素，则将待查序列缩小为左半部分，否则为右半部分。通过一次比较，将查找区间缩小一半。</p>
<p>举个例子：从以下10个数中，查找48这条记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">5 10 19 21 31 37(✅) 42 48 50 55</div><div class="line"></div><div class="line">5 10 19 21 31 37 42 48 50(✅) 55</div><div class="line"></div><div class="line">5 10 19 21 31 37 42 48(✅) 50 55</div><div class="line"></div><div class="line">顺序查找平均次数: (1+2+3+4+5+6+7+8+9+10)/10 = 5.5次</div><div class="line"></div><div class="line">二分查找法平均次数: (4+3+2+4+3+1+4+3+2+3)/10 = 4次</div></pre></td></tr></table></figure>
<h4 id="2-二叉查找树"><a href="#2-二叉查找树" class="headerlink" title="2. 二叉查找树"></a>2. 二叉查找树</h4><p>定义：在二叉查找树中，左子树的键值总是小于跟的键值，右子树的键值总是大于根的键值。</p>
<p>三种遍历方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">前序遍历：根节点-&gt;左子树-&gt;右子树</div><div class="line">中序遍历：左子树-&gt;根节点-&gt;右子树</div><div class="line">后序遍历：左子树-&gt;右子树-&gt;根节点</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/62647480-file_1487492747619_129e8.gif" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">前序遍历：abdefgc</div><div class="line">中序遍历：debgfac</div><div class="line">后序遍历：edgfbca</div></pre></td></tr></table></figure>
<h4 id="3-平衡二叉树"><a href="#3-平衡二叉树" class="headerlink" title="3. 平衡二叉树"></a>3. 平衡二叉树</h4><p>定义：符合二叉查找树的定义，其次必须满足任何节点的两个子数的高度最大差为1.</p>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+ 树"></a>B+ 树</h3><p>定义：B+树中，所有记录节点都按键值的大小的顺序存放在同一层的叶子节点上，由各叶子节点指针进行连接。先来看一个B+树，其高度为2，<strong>每页可存放4条记录</strong>，扇出(fan out)为5。</p>
<p>从图1-1可以看出，所有记录都在叶子节点上，并且是顺序存放的，如果用户从最左边的叶子节点开始顺序遍历，可以得到所有键值的顺序排序：5、10、15、20、25、30、50、55、60、65、75、80、85、90。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/79936845-file_1487501076247_17452.png" alt="图1-1"></p>
<h4 id="1-插入操作"><a href="#1-插入操作" class="headerlink" title="1. 插入操作"></a>1. 插入操作</h4><table>
<thead>
<tr>
<th style="text-align:center">Leaf Page满</th>
<th style="text-align:center">Index Page满</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">直接将记录插入到叶子节点</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">1）拆分Leaf Page  2) 将中间的节点放入到Index Page中 3）小于中间节点的记录放左边</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:left">1）拆分Leaf Page 2) 小于中间节点的记录放左边 3）大于或等于中间节点的记录放右边 4）拆分Index Page 5) 小于中间节点的记录放左边 6）大于中间节点放右边 7） 中间节点放入上一层Index Page</td>
</tr>
</tbody>
</table>
<p>操作1. 用户插入28键值，发现当前Leaf Page与Index Page都没有满</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/73962338-file_1487501771494_c1ff.png" alt=""></p>
<p>操作2. 继操作1之后，再插入70这个键值，此时Leaf Page满了，但Index Page还没有满</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/91261615-file_1487502263260_fa07.png" alt=""></p>
<p>操作3. 继操作2之后，再插入键值95，此时Leaf Page与Index Page都满了。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/87480241-file_1487503232532_1e17.png" alt=""></p>
<h4 id="2-删除操作"><a href="#2-删除操作" class="headerlink" title="2. 删除操作"></a>2. 删除操作</h4><table>
<thead>
<tr>
<th style="text-align:center">叶子节点小于填充因子</th>
<th style="text-align:center">中间节点小于填充因子</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">直接将记录从叶子节点删除，如果该节点还是Index Page的节点，用该节点的右节点代替</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:left">合并叶子节点和他的兄弟节点，同时更新Index Page</td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:left">1) 合并叶子节点和它的兄弟节点 2）更新Index Page 3) 合并Index Page和它的兄弟节点</td>
</tr>
</tbody>
</table>
<p>操作1. 删除键值为70的记录，符合上述第一种情况：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/52906554-file_1487511007704_aa56.png" alt=""></p>
<p>操作2. 继操作1之后，删除键值为25记录，符合上述第二种情况：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/63451589-file_1487511457231_11319.png" alt=""></p>
<p>操作3. 继操作2之后，删除键值60的记录，填充因子小于50%，进行合并操作，符合上述第三种情况：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/67245038-file_1487511783693_b9ba.png" alt=""></p>
<h3 id="B-索引类型"><a href="#B-索引类型" class="headerlink" title="B+ 索引类型"></a>B+ 索引类型</h3><p>B+树索引可以分为聚集索引、辅助索引，但不管是聚集还是辅助索引，其内部都是B+树的，高度平衡，叶子节点存放着所有的数据。</p>
<h4 id="1-聚集索引"><a href="#1-聚集索引" class="headerlink" title="1. 聚集索引"></a>1. 聚集索引</h4><p>定义：按照每张表的主键构造一棵B+树，同时叶子节点中存放的即为整张表的行记录数据，也将聚集索引的叶子节点称为数据页。</p>
<p>好处：</p>
<p>1）对于主键的排序查找和范围查找速度非常快。由于B+数索引是双向链表，用户可以快速找到最后一个数据页。</p>
<p>举个例子：<br>因为B+树索引是双向链表的，可以快速找到最后一个数据页，并获取10条记录。<br><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/86953295-file_1487513202735_1c86.png" alt=""></p>
<h4 id="2-辅助索引"><a href="#2-辅助索引" class="headerlink" title="2. 辅助索引"></a>2. 辅助索引</h4><p>定义：叶子节点并不包含行记录的全部数据，叶子节点除了包含键值以外，每个叶子节点中的索引行还包含了一个书签。该书签用来告诉InnoDB存储引擎哪里可以找到索引相对应的行数据。由于InnoDB存储引擎表是索引组织表，因此InnoDB存储引擎的辅助索引的书签就是相应的行数据的聚集索引键。</p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>MYSQL技术内幕</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;B+&lt;/code&gt;树索引是InnoDB最为常用和最为有效的索引，其构造类似于&lt;code&gt;二叉树&lt;/code&gt;，&lt;code&gt;B+&lt;
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB存储引擎之日志文件</title>
    <link href="http://jianwl.com/2017/02/19/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8B%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/"/>
    <id>http://jianwl.com/2017/02/19/InnoDB存储引擎之日志文件/</id>
    <published>2017-02-19T05:10:00.000Z</published>
    <updated>2017-02-19T07:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>InnoDB存储引擎表的有以下几种文件：</p>
<table>
<thead>
<tr>
<th style="text-align:center">文件</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">参数文件</td>
<td style="text-align:center">告诉MYSQL启动时，哪里可以找到数据库文件，并指定某些初始化参数，这些参数定义了某种内存结构的大小</td>
</tr>
<tr>
<td style="text-align:center">日志文件</td>
<td style="text-align:center">记录MYSQL实例对某种条件作出响应时写入的文件，如：错误日志、二进制日志文件、慢查询日志文件、查询日志文件等</td>
</tr>
<tr>
<td style="text-align:center">socket文件</td>
<td style="text-align:center">当用UNIX域套接字进行连接时需要的文件</td>
</tr>
<tr>
<td style="text-align:center">pid文件</td>
<td style="text-align:center">MYSQL实例的进程ID</td>
</tr>
<tr>
<td style="text-align:center">MySQL表结构文件</td>
<td style="text-align:center">存放MYSQL表结构定义文件</td>
</tr>
<tr>
<td style="text-align:center">存储引擎文件</td>
<td style="text-align:center">因MYSQ表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据，这些存储引擎真正存储了记录和索引等数据。</td>
</tr>
</tbody>
</table>
<p>这一节，我们主要介绍日志文件。</p>
<h3 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1. 错误日志"></a>1. 错误日志</h3><p>1）错误日志文件的位置</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/65048571-file_1487482229292_773f.png" alt=""></p>
<p>2）查看错误日志</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/6724899-file_1487482372203_17997.png" alt=""></p>
<h3 id="2-慢查询日志"><a href="#2-慢查询日志" class="headerlink" title="2. 慢查询日志"></a>2. 慢查询日志</h3><p>1）MYSQL启动时设了一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询日志文件中，阈值可通过参数<code>long_query_time</code>来设置，默认为10,代表10秒。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/70209826-file_1487482647488_b735.png" alt=""></p>
<p>2）慢查询日志参数，默认是<code>OFF</code>，需要手动设置为<code>ON</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/56036822-file_1487482980959_aa98.png" alt=""></p>
<p>3）没有使用索引的慢查询参数，默认是OFF，需要手动设置为<code>ON</code>：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/25689763-file_1487483450794_166ec.png" alt=""></p>
<p>4）启动慢查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set global slow_query_log = ON;</div><div class="line">set global log_queries_not_using_indexes = ON;</div></pre></td></tr></table></figure>
<p>5）慢查询日志文件位置：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/36049973-file_1487483823605_cd92.png" alt=""></p>
<p>6）查看慢查询日志：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/22431008-file_1487483956114_4b85.png" alt=""></p>
<p>7）越来越多的SQL查询记录到慢查询日志文件中，此时要分析该文件显得不是那么简单和直观了。MYSQL提供<code>mysqldumpslow</code>命令可以很好解决该问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 查询执行时间最长的10条SQL语句</div><div class="line"></div><div class="line">sudo mysqldumpslow -s al -n 10 /usr/local/mysql/data/jianweilindeMacBook-Pro-slow.log</div><div class="line"></div><div class="line">-s ORDER what to sort by(al、at、ar、c、l、r、t),&apos;at&apos; is default</div><div class="line">   al : average lock time</div><div class="line">   ar : average row sent</div><div class="line">   at : average query time</div><div class="line">   c  : count</div><div class="line">   l  : lock time</div><div class="line">   r  : rows sent</div><div class="line">   t  : query time</div><div class="line"></div><div class="line">-r reverse the sort order</div><div class="line">-n Num  abstract numbers with at least n dights within names</div></pre></td></tr></table></figure>
<h3 id="3-查询日志"><a href="#3-查询日志" class="headerlink" title="3. 查询日志"></a>3. 查询日志</h3><p>查询日志记录了所有对MYSQL数据库请求的信息，无论这些请求是否得到了正确的执行。默认文件名为：主机名.log。</p>
<p>1）查询日志参数：默认是<code>OFF</code></p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/15106561-file_1487485005374_3283.png" alt=""></p>
<p>2）手动启动查询日志<code>ON</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set global general_log = ON;</div></pre></td></tr></table></figure>
<p>3）查看日志文件位置：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/73309992-file_1487485312775_16e30.png" alt=""></p>
<p>4）查看日志文件：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/14055636-file_1487485396146_1862e.png" alt=""></p>
<h3 id="4-二进制日志"><a href="#4-二进制日志" class="headerlink" title="4. 二进制日志"></a>4. 二进制日志</h3><p>二进制日志(binary log)记录了对MYSQL数据库执行更改的所有操作，但不包括<code>SELECT</code>和<code>SHOW</code>这类操作，因为这类操作对数据库本身并没有修改。二进制文件有以下几个作用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">恢复(recovery)：某些数据的恢复需要二进制日志，例如，在一个数据库全备文件恢复后，用户可以通过二进制日志进行point-in-time恢复。</div><div class="line"></div><div class="line">复制(replication)：其原理与恢复类似，通过复制和执行二进制日志使一台远程的MYSQL数据库(slave)与一台MYSQL数据库(master)进行实时同步。</div><div class="line"></div><div class="line">审计(aduit)：用户可以通过二进制日志中的信息来进行审计，判断是否有对数据库进行注入攻击。</div></pre></td></tr></table></figure>
<p>1) 启动二进制文件</p>
<p>MYSQL二进制日志由配置文件my.cnf的<code>log_bin</code>选项负责启用的:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/20551906-file_1487487869672_1052.png" alt=""></p>
<p>2) 二进制文件位置<br><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-19/70390816-file_1487487919637_78fc.png" alt=""></p>
<p>这里的<code>mysql-bin.000001</code>即为二进制文件，我们在配置文件中指定了名字，所以没有用默认的文件名。<code>mysql-bin.indx</code>为二进制的索引文件，用来存储过往产生的二进制日志序号。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.MySQL技术内幕 – InnoDB存储引擎</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;InnoDB存储引擎表的有以下几种文件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:ce
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL存储引擎间的比较</title>
    <link href="http://jianwl.com/2017/02/17/MYSQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://jianwl.com/2017/02/17/MYSQL存储引擎间的比较/</id>
    <published>2017-02-17T14:05:50.000Z</published>
    <updated>2017-02-17T14:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>存储引擎是MYSQL体系结构的核心，本节我们通过比较存储引擎加深对其的了解。</p>
<h3 id="存储引擎对比"><a href="#存储引擎对比" class="headerlink" title="存储引擎对比"></a>存储引擎对比</h3><table>
<thead>
<tr>
<th style="text-align:center">Feature</th>
<th style="text-align:center">MyISAM</th>
<th style="text-align:center">BDB</th>
<th style="text-align:center">Memory</th>
<th style="text-align:center">InnoDB</th>
<th style="text-align:center">Archive</th>
<th style="text-align:center">NDB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Storage Limits</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">64TB</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">Transactions</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Locking granularity</td>
<td style="text-align:center">Table</td>
<td style="text-align:center">Page</td>
<td style="text-align:center">Table</td>
<td style="text-align:center">Row</td>
<td style="text-align:center">Row</td>
<td style="text-align:center">Row</td>
</tr>
<tr>
<td style="text-align:center">MVCC/Snapshot Read</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Geospatial support</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">B-Tree indexes</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Hash indexes</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Full text search index</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Clustered index</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Data Caches</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Index Caches</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Compressed data</td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Encrypted data</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Storage cost</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">High</td>
<td style="text-align:center">Very Low</td>
<td style="text-align:center">Low</td>
</tr>
<tr>
<td style="text-align:center">Memory cost</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Medium</td>
<td style="text-align:center">High</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">High</td>
</tr>
<tr>
<td style="text-align:center">Bulk Insert Speed</td>
<td style="text-align:center">High</td>
<td style="text-align:center">High</td>
<td style="text-align:center">High</td>
<td style="text-align:center">Low</td>
<td style="text-align:center">Very High</td>
<td style="text-align:center">High</td>
</tr>
<tr>
<td style="text-align:center">Cluster database support</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Replication support</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Foreign key support</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">✅</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Backup/Point-in-time recovery</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Query cache support</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
<tr>
<td style="text-align:center">Update Statistics for Data Dictionary</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
</tbody>
</table>
<h4 id="1-InnoDB-存储引擎"><a href="#1-InnoDB-存储引擎" class="headerlink" title="1. InnoDB 存储引擎"></a>1. InnoDB 存储引擎</h4><p>InnoDB存储引擎支持事务，其特点是行锁设计、支持外键，InnoDB通过多版本并发控制(MVCC)来获得高并发性，并且实现了SQL标准的4中隔离级别，默认为Repeatable级别，同时使用一种被称为<code>next-key locking</code>的策略来避免幻读。InnoDB存储引擎采用了聚集的方式，因此每张表的存储都是按主键的顺序进行存放。</p>
<h4 id="2-MyISAM-存储引擎"><a href="#2-MyISAM-存储引擎" class="headerlink" title="2. MyISAM 存储引擎"></a>2. MyISAM 存储引擎</h4><p>MyISAM存储引擎不支持事务、表锁设计、支持全文索引，此外<strong>它的缓冲池只缓存索引文件，而不缓冲数据文件，这点和大多数的数据都非常不同。</strong></p>
<h4 id="3-NDB-存储引擎"><a href="#3-NDB-存储引擎" class="headerlink" title="3. NDB 存储引擎"></a>3. NDB 存储引擎</h4><p>NDB存储引擎是一个集群存储引擎，其特点是数据全部放在内存中(从MYSQL5.1版本开始可以将非索引数据放在磁盘上)，因此主键查找的数据极快，并且添加NDB数据存储节点可以线性提高数据性能。还有一点，<strong>NDB存储引擎的连接操作是在MYSQL数据库层完成的，而不是在存储引擎层完成的，解决了连接操作巨大的网络开销。</strong></p>
<h4 id="4-Memory-存储引擎"><a href="#4-Memory-存储引擎" class="headerlink" title="4. Memory 存储引擎"></a>4. Memory 存储引擎</h4><p>Memory存储引擎将表中的数据存放在内存中，如果数据库重启或者发生奔溃，表中的数据都将消失，Memory存储引擎默认使用哈希索引，而不是我们熟悉的B+树索引。</p>
<h4 id="5-Archive-存储引擎"><a href="#5-Archive-存储引擎" class="headerlink" title="5. Archive 存储引擎"></a>5. Archive 存储引擎</h4><p>Archive存储引擎只支持INSERT和SELECT操作，从MYSQL5.1开始支持索引，其使用<code>zlib</code>算法将数据行(Row)进行压缩后存储，压缩比一般可达1:10。</p>
<h4 id="6-Federated-存储引擎"><a href="#6-Federated-存储引擎" class="headerlink" title="6. Federated 存储引擎"></a>6. Federated 存储引擎</h4><p>Federated存储引擎表并不存放数据，它只是指向一台远程MYSQL数据库服务器上的表。</p>
<h4 id="7-Maria-存储引擎"><a href="#7-Maria-存储引擎" class="headerlink" title="7. Maria 存储引擎"></a>7. Maria 存储引擎</h4><p>Maria存储引擎是新开发的引擎，其特点是支持缓存数据和索引文件，应用行锁设计，提供MVCC功能，支持事务和非事务，以及更好的BLOB字符类型的处理性能。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>MySQL技术内幕</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;存储引擎是MYSQL体系结构的核心，本节我们通过比较存储引擎加深对其的了解。&lt;/p&gt;
&lt;h3 id=&quot;存储引擎对比&quot;&gt;&lt;a href=&quot;#存
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL体系结构</title>
    <link href="http://jianwl.com/2017/02/16/MYSQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>http://jianwl.com/2017/02/16/MYSQL体系结构/</id>
    <published>2017-02-16T14:52:49.000Z</published>
    <updated>2017-02-16T16:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接触MYSQL多年，却对MYSQL体系结构知之甚少，这一节主要学习这方面的知识点。</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="1-定义数据库和实例"><a href="#1-定义数据库和实例" class="headerlink" title="1. 定义数据库和实例"></a>1. 定义数据库和实例</h4><ul>
<li>数据库：物理操作系统文件或其他文件类型的集合</li>
<li>数据库实例：MYSQL数据库由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。数据库实例才是真正用于操作数据库文件的。</li>
</ul>
<p>这两个词很容易混淆，要特别注意。MYSQL数据库实例在系统上的表现是一个进程，其被设计为一个单进程多线程架构的数据库。</p>
<p>Mac系统下启动MYSQL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql/support-files</div><div class="line">sudo ./mysql.server start</div></pre></td></tr></table></figure>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-16/49796817-file_1487258098966_6c52.png" alt=""></p>
<p>进程号为929就是MYSQL实例，启动实例时，MYSQL数据库会去读取配置文件，根据配置文件的参数来启动数据库实例。读取的顺序为<code>/etc/my.cnf</code> -&gt; <code>/etc/mysql/my.cnf</code> -&gt; <code>/usr/local/mysql/etc/my.cnf</code> -&gt; <code>~/.my.cnf</code>,如果几个配置文件都有同一个参数，MYSQL会以最后一个配置文件的参数为准。</p>
<h4 id="2-MYSQL体系结构"><a href="#2-MYSQL体系结构" class="headerlink" title="2. MYSQL体系结构"></a>2. MYSQL体系结构</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-16/56429664-file_1487259812820_9ded.png" alt="图1-1 MYSQL体系结构"></p>
<p>由图1-1可知，MYSQL由以下几部分组成：</p>
<p>连接池组件、管理组件和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲组件、插件式存储引擎、物理文件</p>
<p>特别注意，存储引擎是基于表的，而不是数据库。</p>
<h4 id="3-连接MYSQL"><a href="#3-连接MYSQL" class="headerlink" title="3. 连接MYSQL"></a>3. 连接MYSQL</h4><p>连接MYSQL操作是一个连接进程和MySQL数据库实例进行通信。常用的进程通信方式有管道、命名管道、TCP/IP套接字、UNIX域套接字。</p>
<p><strong>1）TCP/IP方式</strong></p>
<p>客户端在一台服务器上，MYSQL实例在另外一台服务器上，这两台机器通过TCP/IP网络连接。</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-17/32797080-file_1487261300938_33f5.png" alt=""></p>
<p><strong>2）UNIX域套接字方式</strong></p>
<p>UNIX域套接字其实不是一个网络协议，所以<strong>只能在MYSQL客户端和数据库实例在一台服务器上</strong>的情况下使用。用户可以通过下列命令进行UNIX域套接字文件的查找:</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-17/32760164-file_1487261521375_d445.png" alt=""></p>
<p>在知道了UNIX域套接字文件的路径后，就可以通过该方式进行连接了：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-17/52720077-file_1487261638596_2970.png" alt=""></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、MySQL技术内幕 - InnoDB存储引擎</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;接触MYSQL多年，却对MYSQL体系结构知之甚少，这一节主要学习这方面的知识点。&lt;/p&gt;
&lt;h3 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能查看常用命令</title>
    <link href="http://jianwl.com/2017/02/14/MySQL%E6%80%A7%E8%83%BD%E6%9F%A5%E7%9C%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://jianwl.com/2017/02/14/MySQL性能查看常用命令/</id>
    <published>2017-02-14T13:42:05.000Z</published>
    <updated>2017-02-14T14:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="1、-场景：显示哪些线程正在运行"><a href="#1、-场景：显示哪些线程正在运行" class="headerlink" title="1、 场景：显示哪些线程正在运行"></a>1、 场景：显示哪些线程正在运行</h4><p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/84951625-file_1487082323314_593c.png" alt=""></p>
<h4 id="2、场景：显示SQL的执行计划"><a href="#2、场景：显示SQL的执行计划" class="headerlink" title="2、场景：显示SQL的执行计划"></a>2、场景：显示SQL的执行计划</h4><p>表结构：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/38715377-file_1487082561514_1082c.png" alt="表结构"></p>
<p>执行计划：</p>
<p>有索引：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/98390318-file_1487082868500_135a2.png" alt=""></p>
<p>全表遍历(全表共829条记录)：</p>
<p><img src="http://oc5a5l0a0.bkt.clouddn.com/17-2-14/83614830-file_1487082737342_17766.png" alt=""></p>
<p>未完待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://dev.mysql.com/doc/refman/5.7/en/explain.html" target="_blank" rel="external">MYSQL官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;1、-场景：显示哪些线程正在运行&quot;&gt;&lt;a href=&quot;#1、-场景：显示哪些线程正在运行&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="MYSQL" scheme="http://jianwl.com/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://jianwl.com/tags/MYSQL/"/>
    
  </entry>
  
</feed>
